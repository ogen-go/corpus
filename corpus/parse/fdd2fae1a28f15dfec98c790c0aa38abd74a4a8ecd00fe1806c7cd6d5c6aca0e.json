{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/EMResearch/EvoMaster"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "core-it/src/test/resources/APIs_guru/amazonaws.com/acm/2015-12-08/openapi.yaml",
			"byteSize": 89650,
			"content": "openapi: 3.0.0\ninfo:\n  version: '2015-12-08'\n  x-release: v4\n  title: AWS Certificate Manager\n  description: '\u003cfullname\u003eAmazon Web Services Certificate Manager\u003c/fullname\u003e \u003cp\u003eYou can use Amazon Web Services Certificate Manager (ACM) to manage SSL/TLS certificates for your Amazon Web Services-based websites and applications. For more information about using ACM, see the \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/\"\u003eAmazon Web Services Certificate Manager User Guide\u003c/a\u003e.\u003c/p\u003e'\n  x-logo:\n    url: 'https://twitter.com/awscloud/profile_image?size=original'\n    backgroundColor: '#FFFFFF'\n  termsOfService: 'https://aws.amazon.com/service-terms/'\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: 'https://github.com/mermade/aws2openapi'\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: 'http://www.apache.org/licenses/'\n  x-providerName: amazonaws.com\n  x-serviceName: acm\n  x-origin:\n    - contentType: application/json\n      url: 'https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/acm-2015-12-08.normal.json'\n      converter:\n        url: 'https://github.com/mermade/aws2openapi'\n        version: 1.0.0\n      x-apisguru-driver: external\n  x-apiClientRegistration:\n    url: 'https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct'\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: 'https://docs.aws.amazon.com/acm/'\nservers:\n  - url: 'http://acm.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The ACM multi-region endpoint\n  - url: 'https://acm.{region}.amazonaws.com'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - eu-south-1\n          - af-south-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-east-1\n          - ap-south-1\n          - sa-east-1\n          - me-south-1\n        default: us-east-1\n    description: The ACM multi-region endpoint\n  - url: 'http://acm.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The ACM endpoint for China (Beijing) and China (Ningxia)\n  - url: 'https://acm.{region}.amazonaws.com.cn'\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The ACM endpoint for China (Beijing) and China (Ningxia)\nx-hasEquivalentPaths: true\npaths:\n  /#X-Amz-Target=CertificateManager.AddTagsToCertificate:\n    post:\n      operationId: AddTagsToCertificate\n      description: '\u003cp\u003eAdds one or more tags to an ACM certificate. Tags are labels that you can use to identify and organize your Amazon Web Services resources. Each tag consists of a \u003ccode\u003ekey\u003c/code\u003e and an optional \u003ccode\u003evalue\u003c/code\u003e. You specify the certificate on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. \u003c/p\u003e \u003cp\u003eYou can apply a tag to just one certificate if you want to identify a specific characteristic of that certificate, or you can apply the same tag to multiple certificates if you want to filter for a common relationship among those certificates. Similarly, you can apply the same tag to multiple resources if you want to specify a relationship among those resources. For example, you can add the same tag to an ACM certificate and an Elastic Load Balancing load balancer to indicate that they are both used by the same website. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/tags.html\"\u003eTagging ACM certificates\u003c/a\u003e. \u003c/p\u003e \u003cp\u003eTo remove one or more tags, use the \u003ca\u003eRemoveTagsFromCertificate\u003c/a\u003e action. To view all of the tags that have been applied to the certificate, use the \u003ca\u003eListTagsForCertificate\u003c/a\u003e action. \u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n        '482':\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidTagException'\n        '483':\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyTagsException'\n        '484':\n          description: TagPolicyException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagPolicyException'\n        '485':\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidParameterException'\n        '486':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddTagsToCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.AddTagsToCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.DeleteCertificate:\n    post:\n      operationId: DeleteCertificate\n      description: '\u003cp\u003eDeletes a certificate and its associated private key. If this action succeeds, the certificate no longer appears in the list that can be displayed by calling the \u003ca\u003eListCertificates\u003c/a\u003e action or be retrieved by calling the \u003ca\u003eGetCertificate\u003c/a\u003e action. The certificate will not be available for use by Amazon Web Services services integrated with ACM. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eYou cannot delete an ACM certificate that is being used by another Amazon Web Services service. To delete a certificate that is in use, the certificate association must first be removed.\u003c/p\u003e \u003c/note\u003e'\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: ResourceInUseException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceInUseException'\n        '482':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DeleteCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.DeleteCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.DescribeCertificate:\n    post:\n      operationId: DescribeCertificate\n      description: Returns detailed metadata about the specified ACM certificate.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DescribeCertificateResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DescribeCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.DescribeCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.ExportCertificate:\n    post:\n      operationId: ExportCertificate\n      description: '\u003cp\u003eExports a private certificate issued by a private certificate authority (CA) for use anywhere. The exported file contains the certificate, the certificate chain, and the encrypted private 2048-bit RSA key associated with the public key that is embedded in the certificate. For security, you must assign a passphrase for the private key when exporting it. \u003c/p\u003e \u003cp\u003eFor information about exporting and formatting a certificate using the ACM console or CLI, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-export-private.html\"\u003eExport a Private Certificate\u003c/a\u003e.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportCertificateResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestInProgressException'\n        '482':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExportCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.ExportCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.GetAccountConfiguration:\n    post:\n      operationId: GetAccountConfiguration\n      description: Returns the account configuration options associated with an Amazon Web Services account.\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAccountConfigurationResponse'\n        '480':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '481':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.GetAccountConfiguration\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.GetCertificate:\n    post:\n      operationId: GetCertificate\n      description: 'Retrieves an Amazon-issued certificate and its certificate chain. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs. All of the certificates are base64 encoded. You can use \u003ca href=\"https://wiki.openssl.org/index.php/Command_Line_Utilities\"\u003eOpenSSL\u003c/a\u003e to decode the certificates and inspect individual fields.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetCertificateResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: RequestInProgressException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestInProgressException'\n        '482':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.GetCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.ImportCertificate:\n    post:\n      operationId: ImportCertificate\n      description: '\u003cp\u003eImports a certificate into Amazon Web Services Certificate Manager (ACM) to use with services that are integrated with ACM. Note that \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-services.html\"\u003eintegrated services\u003c/a\u003e allow only certificate types and keys they support to be associated with their resources. Further, their support differs depending on whether the certificate is imported into IAM or into ACM. For more information, see the documentation for each service. For more information about importing certificates into ACM, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html\"\u003eImporting Certificates\u003c/a\u003e in the \u003ci\u003eAmazon Web Services Certificate Manager User Guide\u003c/i\u003e. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eACM does not provide \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\u003emanaged renewal\u003c/a\u003e for certificates that you import.\u003c/p\u003e \u003c/note\u003e \u003cp\u003eNote the following guidelines when importing third party certificates:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eYou must enter the private key that matches the certificate you are importing.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe private key must be unencrypted. You cannot import a private key that is protected by a password or a passphrase.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe private key must be no larger than 5 KB (5,120 bytes).\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf the certificate you are importing is not self-signed, you must enter its certificate chain.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eIf a certificate chain is included, the issuer must be the subject of one of the certificates in the chain.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe certificate, private key, and certificate chain must be PEM-encoded.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe current time must be between the \u003ccode\u003eNot Before\u003c/code\u003e and \u003ccode\u003eNot After\u003c/code\u003e certificate fields.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe \u003ccode\u003eIssuer\u003c/code\u003e field must not be empty.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe OCSP authority URL, if present, must not exceed 1000 characters.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eTo import a new certificate, omit the \u003ccode\u003eCertificateArn\u003c/code\u003e argument. Include this argument only when you want to replace a previously imported certificate.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eWhen you import a certificate by using the CLI, you must specify the certificate, the certificate chain, and the private key by their file names preceded by \u003ccode\u003efileb://\u003c/code\u003e. For example, you can specify a certificate saved in the \u003ccode\u003eC:\\temp\u003c/code\u003e folder as \u003ccode\u003efileb://C:\\temp\\certificate_to_import.pem\u003c/code\u003e. If you are making an HTTP or HTTPS Query request, include these arguments as BLOBs. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eWhen you import a certificate by using an SDK, you must specify the certificate, the certificate chain, and the private key files in the manner required by the programming language you''re using. \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eThe cryptographic algorithm of an imported certificate must match the algorithm of the signing CA. For example, if the signing CA key type is RSA, then the certificate key type must also be RSA.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e \u003cp\u003eThis operation returns the \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Name (ARN)\u003c/a\u003e of the imported certificate.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportCertificateResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '482':\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidTagException'\n        '483':\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyTagsException'\n        '484':\n          description: TagPolicyException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagPolicyException'\n        '485':\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidParameterException'\n        '486':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ImportCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.ImportCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.ListCertificates:\n    post:\n      operationId: ListCertificates\n      description: 'Retrieves a list of certificate ARNs and domain names. You can request that only certificates that match a specific status be listed. You can also filter by specific attributes of the certificate. Default filtering returns only \u003ccode\u003eRSA_2048\u003c/code\u003e certificates. For more information, see \u003ca\u003eFilters\u003c/a\u003e.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListCertificatesResponse'\n        '480':\n          description: InvalidArgsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArgsException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ListCertificatesRequest'\n      parameters:\n        - name: MaxItems\n          in: query\n          schema:\n            type: string\n          description: Pagination limit\n          required: false\n        - name: NextToken\n          in: query\n          schema:\n            type: string\n          description: Pagination token\n          required: false\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.ListCertificates\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.ListTagsForCertificate:\n    post:\n      operationId: ListTagsForCertificate\n      description: 'Lists the tags that have been applied to the ACM certificate. Use the certificate''s Amazon Resource Name (ARN) to specify the certificate. To add a tag to an ACM certificate, use the \u003ca\u003eAddTagsToCertificate\u003c/a\u003e action. To delete a tag, use the \u003ca\u003eRemoveTagsFromCertificate\u003c/a\u003e action. '\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListTagsForCertificateResponse'\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ListTagsForCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.ListTagsForCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.PutAccountConfiguration:\n    post:\n      operationId: PutAccountConfiguration\n      description: '\u003cp\u003eAdds or modifies account-level configurations in ACM. \u003c/p\u003e \u003cp\u003eThe supported configuration option is \u003ccode\u003eDaysBeforeExpiry\u003c/code\u003e. This option specifies the number of days prior to certificate expiration when ACM starts generating \u003ccode\u003eEventBridge\u003c/code\u003e events. ACM sends one event per day per certificate until the certificate expires. By default, accounts receive events starting 45 days before certificate expiration.\u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ValidationException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidationException'\n        '481':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n        '482':\n          description: AccessDeniedException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessDeniedException'\n        '483':\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConflictException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutAccountConfigurationRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.PutAccountConfiguration\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.RemoveTagsFromCertificate:\n    post:\n      operationId: RemoveTagsFromCertificate\n      description: '\u003cp\u003eRemove one or more tags from an ACM certificate. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this function, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. \u003c/p\u003e \u003cp\u003eTo add tags to a certificate, use the \u003ca\u003eAddTagsToCertificate\u003c/a\u003e action. To view all of the tags that have been applied to a specific ACM certificate, use the \u003ca\u003eListTagsForCertificate\u003c/a\u003e action. \u003c/p\u003e'\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n        '482':\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidTagException'\n        '483':\n          description: TagPolicyException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagPolicyException'\n        '484':\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidParameterException'\n        '485':\n          description: ThrottlingException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ThrottlingException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RemoveTagsFromCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.RemoveTagsFromCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.RenewCertificate:\n    post:\n      operationId: RenewCertificate\n      description: 'Renews an eligible ACM certificate. At this time, only exported private certificates can be renewed with this operation. In order to renew your ACM PCA certificates with ACM, you must first \u003ca href=\"https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaPermissions.html\"\u003egrant the ACM service principal permission to do so\u003c/a\u003e. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/manual-renewal.html\"\u003eTesting Managed Renewal\u003c/a\u003e in the ACM User Guide.'\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RenewCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.RenewCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.RequestCertificate:\n    post:\n      operationId: RequestCertificate\n      description: '\u003cp\u003eRequests an ACM certificate for use with other Amazon Web Services services. To request an ACM certificate, you must specify a fully qualified domain name (FQDN) in the \u003ccode\u003eDomainName\u003c/code\u003e parameter. You can also specify additional FQDNs in the \u003ccode\u003eSubjectAlternativeNames\u003c/code\u003e parameter. \u003c/p\u003e \u003cp\u003eIf you are requesting a private certificate, domain validation is not required. If you are requesting a public certificate, each domain name that you specify must be validated to verify that you own or control the domain. You can use \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html\"\u003eDNS validation\u003c/a\u003e or \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html\"\u003eemail validation\u003c/a\u003e. We recommend that you use DNS validation. ACM issues public certificates after receiving approval from the domain owner. \u003c/p\u003e \u003cnote\u003e \u003cp\u003eACM behavior differs from the \u003ca href=\"https://tools.ietf.org/html/rfc6125#appendix-B.2\"\u003ehttps://tools.ietf.org/html/rfc6125#appendix-B.2\u003c/a\u003eRFC 6125 specification of the certificate validation process. first checks for a subject alternative name, and, if it finds one, ignores the common name (CN)\u003c/p\u003e \u003c/note\u003e'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RequestCertificateResponse'\n        '480':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '481':\n          description: InvalidDomainValidationOptionsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidDomainValidationOptionsException'\n        '482':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n        '483':\n          description: InvalidTagException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidTagException'\n        '484':\n          description: TooManyTagsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TooManyTagsException'\n        '485':\n          description: TagPolicyException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagPolicyException'\n        '486':\n          description: InvalidParameterException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidParameterException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestCertificateRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.RequestCertificate\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.ResendValidationEmail:\n    post:\n      operationId: ResendValidationEmail\n      description: 'Resends the email that requests domain ownership validation. The domain owner or an authorized representative must approve the ACM certificate before it can be issued. The certificate can be approved by clicking a link in the mail to navigate to the Amazon certificate approval website and then clicking \u003cb\u003eI Approve\u003c/b\u003e. However, the validation email can be blocked by spam filters. Therefore, if you do not receive the original mail, you can request that the mail be resent within 72 hours of requesting the ACM certificate. If more than 72 hours have elapsed since your original request or since your last attempt to resend validation mail, you must request a new certificate. For more information about setting up your contact email addresses, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/setup-email.html\"\u003eConfigure Email for your Domain\u003c/a\u003e. '\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidStateException'\n        '482':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n        '483':\n          description: InvalidDomainValidationOptionsException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidDomainValidationOptionsException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResendValidationEmailRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.ResendValidationEmail\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\n  /#X-Amz-Target=CertificateManager.UpdateCertificateOptions:\n    post:\n      operationId: UpdateCertificateOptions\n      description: 'Updates a certificate. Currently, you can use this function to specify whether to opt in to or out of recording your certificate in a certificate transparency log. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency\"\u003e Opting Out of Certificate Transparency Logging\u003c/a\u003e. '\n      responses:\n        '200':\n          description: Success\n        '480':\n          description: ResourceNotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceNotFoundException'\n        '481':\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LimitExceededException'\n        '482':\n          description: InvalidStateException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidStateException'\n        '483':\n          description: InvalidArnException\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InvalidArnException'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateCertificateOptionsRequest'\n      parameters:\n        - name: X-Amz-Target\n          in: header\n          required: true\n          schema:\n            type: string\n            enum:\n              - CertificateManager.UpdateCertificateOptions\n    parameters:\n      - $ref: '#/components/parameters/X-Amz-Content-Sha256'\n      - $ref: '#/components/parameters/X-Amz-Date'\n      - $ref: '#/components/parameters/X-Amz-Algorithm'\n      - $ref: '#/components/parameters/X-Amz-Credential'\n      - $ref: '#/components/parameters/X-Amz-Security-Token'\n      - $ref: '#/components/parameters/X-Amz-Signature'\n      - $ref: '#/components/parameters/X-Amz-SignedHeaders'\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      schema:\n        type: string\n      required: false\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      schema:\n        type: string\n      required: false\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    AddTagsToCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n        - Tags\n      title: AddTagsToCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the ACM certificate to which the tag is to be applied. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/TagList'\n            - description: The key-value pair that defines the tag. The tag value is optional.\n    ResourceNotFoundException: {}\n    InvalidArnException: {}\n    InvalidTagException: {}\n    TooManyTagsException: {}\n    TagPolicyException: {}\n    InvalidParameterException: {}\n    ThrottlingException: {}\n    DeleteCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n      title: DeleteCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the ACM certificate to be deleted. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n    ResourceInUseException: {}\n    DescribeCertificateResponse:\n      type: object\n      properties:\n        Certificate:\n          allOf:\n            - $ref: '#/components/schemas/CertificateDetail'\n            - description: Metadata about an ACM certificate.\n    DescribeCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n      title: DescribeCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eThe Amazon Resource Name (ARN) of the ACM certificate. The ARN must have the following form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n    ExportCertificateResponse:\n      type: object\n      properties:\n        Certificate:\n          allOf:\n            - $ref: '#/components/schemas/CertificateBody'\n            - description: The base64 PEM-encoded certificate.\n        CertificateChain:\n          allOf:\n            - $ref: '#/components/schemas/CertificateChain'\n            - description: The base64 PEM-encoded certificate chain. This does not include the certificate that you are exporting.\n        PrivateKey:\n          allOf:\n            - $ref: '#/components/schemas/PrivateKey'\n            - description: 'The encrypted private key associated with the public key in the certificate. The key is output in PKCS #8 format and is base64 PEM-encoded. '\n    ExportCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n        - Passphrase\n      title: ExportCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eAn Amazon Resource Name (ARN) of the issued certificate. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:account:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e'\n        Passphrase:\n          allOf:\n            - $ref: '#/components/schemas/PassphraseBlob'\n            - description: '\u003cp\u003ePassphrase to associate with the encrypted exported private key. If you want to later decrypt the private key, you must have the passphrase. You can use the following OpenSSL command to decrypt a private key: \u003c/p\u003e \u003cp\u003e \u003ccode\u003eopenssl rsa -in encrypted_key.pem -out decrypted_key.pem\u003c/code\u003e \u003c/p\u003e'\n    RequestInProgressException: {}\n    GetAccountConfigurationResponse:\n      type: object\n      properties:\n        ExpiryEvents:\n          allOf:\n            - $ref: '#/components/schemas/ExpiryEventsConfiguration'\n            - description: Expiration events configuration options associated with the Amazon Web Services account.\n    AccessDeniedException: {}\n    GetCertificateResponse:\n      type: object\n      properties:\n        Certificate:\n          allOf:\n            - $ref: '#/components/schemas/CertificateBody'\n            - description: The ACM-issued certificate corresponding to the ARN specified as input.\n        CertificateChain:\n          allOf:\n            - $ref: '#/components/schemas/CertificateChain'\n            - description: 'Certificates forming the requested certificate''s chain of trust. The chain consists of the certificate of the issuing CA and the intermediate certificates of any other subordinate CAs. '\n    GetCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n      title: GetCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains a certificate ARN in the following format:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n    ImportCertificateResponse:\n      type: object\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Name (ARN)\u003c/a\u003e of the imported certificate.'\n    ImportCertificateRequest:\n      type: object\n      required:\n        - Certificate\n        - PrivateKey\n      title: ImportCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: 'The \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Name (ARN)\u003c/a\u003e of an imported certificate to replace. To import a new certificate, omit this field. '\n        Certificate:\n          allOf:\n            - $ref: '#/components/schemas/CertificateBodyBlob'\n            - description: The certificate to import.\n        PrivateKey:\n          allOf:\n            - $ref: '#/components/schemas/PrivateKeyBlob'\n            - description: The private key that matches the public key in the certificate.\n        CertificateChain:\n          allOf:\n            - $ref: '#/components/schemas/CertificateChainBlob'\n            - description: The PEM encoded certificate chain.\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/TagList'\n            - description: '\u003cp\u003eOne or more resource tags to associate with the imported certificate. \u003c/p\u003e \u003cp\u003eNote: You cannot apply tags when reimporting a certificate.\u003c/p\u003e'\n    LimitExceededException: {}\n    ListCertificatesResponse:\n      type: object\n      properties:\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextToken'\n            - description: 'When the list is truncated, this value is present and contains the value to use for the \u003ccode\u003eNextToken\u003c/code\u003e parameter in a subsequent pagination request.'\n        CertificateSummaryList:\n          allOf:\n            - $ref: '#/components/schemas/CertificateSummaryList'\n            - description: A list of ACM certificates.\n    ListCertificatesRequest:\n      type: object\n      title: ListCertificatesRequest\n      properties:\n        CertificateStatuses:\n          allOf:\n            - $ref: '#/components/schemas/CertificateStatuses'\n            - description: Filter the certificate list by status value.\n        Includes:\n          allOf:\n            - $ref: '#/components/schemas/Filters'\n            - description: 'Filter the certificate list. For more information, see the \u003ca\u003eFilters\u003c/a\u003e structure.'\n        NextToken:\n          allOf:\n            - $ref: '#/components/schemas/NextToken'\n            - description: Use this parameter only when paginating results and only in a subsequent request after you receive a response with truncated results. Set it to the value of \u003ccode\u003eNextToken\u003c/code\u003e from the response you just received.\n        MaxItems:\n          allOf:\n            - $ref: '#/components/schemas/MaxItems'\n            - description: 'Use this parameter when paginating results to specify the maximum number of items to return in the response. If additional items exist beyond the number you specify, the \u003ccode\u003eNextToken\u003c/code\u003e element is sent in the response. Use this \u003ccode\u003eNextToken\u003c/code\u003e value in a subsequent request to retrieve additional items.'\n    InvalidArgsException: {}\n    ListTagsForCertificateResponse:\n      type: object\n      properties:\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/TagList'\n            - description: The key-value pairs that define the applied tags.\n    ListTagsForCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n      title: ListTagsForCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the ACM certificate for which you want to list the tags. This must have the following form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n    PutAccountConfigurationRequest:\n      type: object\n      required:\n        - IdempotencyToken\n      title: PutAccountConfigurationRequest\n      properties:\n        ExpiryEvents:\n          allOf:\n            - $ref: '#/components/schemas/ExpiryEventsConfiguration'\n            - description: Specifies expiration events associated with an account.\n        IdempotencyToken:\n          allOf:\n            - $ref: '#/components/schemas/IdempotencyToken'\n            - description: 'Customer-chosen string used to distinguish between calls to \u003ccode\u003ePutAccountConfiguration\u003c/code\u003e. Idempotency tokens time out after one hour. If you call \u003ccode\u003ePutAccountConfiguration\u003c/code\u003e multiple times with the same unexpired idempotency token, ACM treats it as the same request and returns the original result. If you change the idempotency token for each call, ACM treats each call as a new request.'\n    ValidationException: {}\n    ConflictException: {}\n    RemoveTagsFromCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n        - Tags\n      title: RemoveTagsFromCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the ACM Certificate with one or more tags that you want to remove. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/TagList'\n            - description: The key-value pair that defines the tag to remove.\n    RenewCertificateRequest:\n      type: object\n      required:\n        - CertificateArn\n      title: RenewCertificateRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the ACM certificate to be renewed. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n    RequestCertificateResponse:\n      type: object\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the issued certificate. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e'\n    RequestCertificateRequest:\n      type: object\n      required:\n        - DomainName\n      title: RequestCertificateRequest\n      properties:\n        DomainName:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: '\u003cp\u003e Fully qualified domain name (FQDN), such as www.example.com, that you want to secure with an ACM certificate. Use an asterisk (*) to create a wildcard certificate that protects several sites in the same domain. For example, *.example.com protects www.example.com, site.example.com, and images.example.com. \u003c/p\u003e \u003cp\u003e The first domain name you enter cannot exceed 64 octets, including periods. Each subsequent Subject Alternative Name (SAN), however, can be up to 253 octets in length. \u003c/p\u003e'\n        ValidationMethod:\n          allOf:\n            - $ref: '#/components/schemas/ValidationMethod'\n            - description: 'The method you want to use if you are requesting a public certificate to validate that you own or control domain. You can \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html\"\u003evalidate with DNS\u003c/a\u003e or \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-email.html\"\u003evalidate with email\u003c/a\u003e. We recommend that you use DNS validation. '\n        SubjectAlternativeNames:\n          allOf:\n            - $ref: '#/components/schemas/DomainList'\n            - description: '\u003cp\u003eAdditional FQDNs to be included in the Subject Alternative Name extension of the ACM certificate. For example, add the name www.example.net to a certificate for which the \u003ccode\u003eDomainName\u003c/code\u003e field is www.example.com if users can reach your site by using either name. The maximum number of domain names that you can add to an ACM certificate is 100. However, the initial quota is 10 domain names. If you need more than 10 names, you must request a quota increase. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-limits.html\"\u003eQuotas\u003c/a\u003e.\u003c/p\u003e \u003cp\u003e The maximum length of a SAN DNS name is 253 octets. The name is made up of multiple labels separated by periods. No label can be longer than 63 octets. Consider the following examples: \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e(63 octets).(63 octets).(63 octets).(61 octets)\u003c/code\u003e is legal because the total length is 253 octets (63+1+63+1+63+1+61) and no label exceeds 63 octets.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e(64 octets).(63 octets).(63 octets).(61 octets)\u003c/code\u003e is not legal because the total length exceeds 253 octets (64+1+63+1+63+1+61) and the first label exceeds 63 octets.\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e(63 octets).(63 octets).(63 octets).(62 octets)\u003c/code\u003e is not legal because the total length of the DNS name (63+1+63+1+63+1+62) exceeds 253 octets.\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        IdempotencyToken:\n          allOf:\n            - $ref: '#/components/schemas/IdempotencyToken'\n            - description: 'Customer chosen string that can be used to distinguish between calls to \u003ccode\u003eRequestCertificate\u003c/code\u003e. Idempotency tokens time out after one hour. Therefore, if you call \u003ccode\u003eRequestCertificate\u003c/code\u003e multiple times with the same idempotency token within one hour, ACM recognizes that you are requesting only one certificate and will issue only one. If you change the idempotency token for each call, ACM recognizes that you are requesting multiple certificates.'\n        DomainValidationOptions:\n          allOf:\n            - $ref: '#/components/schemas/DomainValidationOptionList'\n            - description: The domain name that you want ACM to use to send you emails so that you can validate domain ownership.\n        Options:\n          allOf:\n            - $ref: '#/components/schemas/CertificateOptions'\n            - description: 'Currently, you can use this parameter to specify whether to add the certificate to a certificate transparency log. Certificate transparency makes it possible to detect SSL/TLS certificates that have been mistakenly or maliciously issued. Certificates that have not been logged typically produce an error message in a browser. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-bestpractices.html#best-practices-transparency\"\u003eOpting Out of Certificate Transparency Logging\u003c/a\u003e.'\n        CertificateAuthorityArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eThe Amazon Resource Name (ARN) of the private certificate authority (CA) that will be used to issue the certificate. If you do not provide an ARN and you are trying to request a private certificate, ACM will attempt to issue a public certificate. For more information about private CAs, see the \u003ca href=\"https://docs.aws.amazon.com/acm-pca/latest/userguide/PcaWelcome.html\"\u003eAmazon Web Services Certificate Manager Private Certificate Authority (PCA)\u003c/a\u003e user guide. The ARN must have the following form: \u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e'\n        Tags:\n          allOf:\n            - $ref: '#/components/schemas/TagList'\n            - description: One or more resource tags to associate with the certificate.\n    InvalidDomainValidationOptionsException: {}\n    ResendValidationEmailRequest:\n      type: object\n      required:\n        - CertificateArn\n        - Domain\n        - ValidationDomain\n      title: ResendValidationEmailRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eString that contains the ARN of the requested certificate. The certificate ARN is generated and returned by the \u003ca\u003eRequestCertificate\u003c/a\u003e action as soon as the request is made. By default, using this parameter causes email to be sent to all top-level domains you specified in the certificate request. The ARN must be of the form: \u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e'\n        Domain:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: The fully qualified domain name (FQDN) of the certificate that needs to be validated.\n        ValidationDomain:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: '\u003cp\u003eThe base validation domain that will act as the suffix of the email addresses that are used to send the emails. This must be the same as the \u003ccode\u003eDomain\u003c/code\u003e value or a superdomain of the \u003ccode\u003eDomain\u003c/code\u003e value. For example, if you requested a certificate for \u003ccode\u003esite.subdomain.example.com\u003c/code\u003e and specify a \u003cb\u003eValidationDomain\u003c/b\u003e of \u003ccode\u003esubdomain.example.com\u003c/code\u003e, ACM sends email to the domain registrant, technical contact, and administrative contact in WHOIS and the following five addresses:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eadmin@subdomain.example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eadministrator@subdomain.example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ehostmaster@subdomain.example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003epostmaster@subdomain.example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ewebmaster@subdomain.example.com\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n    InvalidStateException: {}\n    UpdateCertificateOptionsRequest:\n      type: object\n      required:\n        - CertificateArn\n        - Options\n      title: UpdateCertificateOptionsRequest\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eARN of the requested certificate to update. This must be of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:us-east-1:\u003ci\u003eaccount\u003c/i\u003e:certificate/\u003ci\u003e12345678-1234-1234-1234-123456789012\u003c/i\u003e \u003c/code\u003e \u003c/p\u003e'\n        Options:\n          allOf:\n            - $ref: '#/components/schemas/CertificateOptions'\n            - description: 'Use to update the options for your certificate. Currently, you can specify whether to add your certificate to a transparency log. Certificate transparency makes it possible to detect SSL/TLS certificates that have been mistakenly or maliciously issued. Certificates that have not been logged typically produce an error message in a browser. '\n    Arn:\n      type: string\n      pattern: 'arn:[\\w+=/,.@-]+:[\\w+=/,.@-]+:[\\w+=/,.@-]*:[0-9]+:[\\w+=,.@-]+(/[\\w+=,.@-]+)*'\n      minLength: 20\n      maxLength: 2048\n    TagList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tag'\n      minItems: 1\n      maxItems: 50\n    CertificateBody:\n      type: string\n      pattern: '-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?'\n      minLength: 1\n      maxLength: 32768\n    CertificateBodyBlob:\n      type: string\n      minLength: 1\n      maxLength: 32768\n    CertificateChain:\n      type: string\n      pattern: '(-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}\\u000D?\\u000A)*-{5}BEGIN CERTIFICATE-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END CERTIFICATE-{5}(\\u000D?\\u000A)?'\n      minLength: 1\n      maxLength: 2097152\n    CertificateChainBlob:\n      type: string\n      minLength: 1\n      maxLength: 2097152\n    DomainNameString:\n      type: string\n      pattern: '^(\\*\\.)?(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$'\n      minLength: 1\n      maxLength: 253\n    DomainList:\n      type: array\n      items:\n        $ref: '#/components/schemas/DomainNameString'\n      minItems: 1\n      maxItems: 100\n    DomainValidationList:\n      type: array\n      items:\n        $ref: '#/components/schemas/DomainValidation'\n      minItems: 1\n      maxItems: 1000\n    String:\n      type: string\n    TStamp:\n      type: string\n      format: date-time\n    CertificateStatus:\n      type: string\n      enum:\n        - PENDING_VALIDATION\n        - ISSUED\n        - INACTIVE\n        - EXPIRED\n        - VALIDATION_TIMED_OUT\n        - REVOKED\n        - FAILED\n    RevocationReason:\n      type: string\n      enum:\n        - UNSPECIFIED\n        - KEY_COMPROMISE\n        - CA_COMPROMISE\n        - AFFILIATION_CHANGED\n        - SUPERCEDED\n        - CESSATION_OF_OPERATION\n        - CERTIFICATE_HOLD\n        - REMOVE_FROM_CRL\n        - PRIVILEGE_WITHDRAWN\n        - A_A_COMPROMISE\n    KeyAlgorithm:\n      type: string\n      enum:\n        - RSA_1024\n        - RSA_2048\n        - RSA_3072\n        - RSA_4096\n        - EC_prime256v1\n        - EC_secp384r1\n        - EC_secp521r1\n    InUseList:\n      type: array\n      items:\n        $ref: '#/components/schemas/String'\n    FailureReason:\n      type: string\n      enum:\n        - NO_AVAILABLE_CONTACTS\n        - ADDITIONAL_VERIFICATION_REQUIRED\n        - DOMAIN_NOT_ALLOWED\n        - INVALID_PUBLIC_DOMAIN\n        - DOMAIN_VALIDATION_DENIED\n        - CAA_ERROR\n        - PCA_LIMIT_EXCEEDED\n        - PCA_INVALID_ARN\n        - PCA_INVALID_STATE\n        - PCA_REQUEST_FAILED\n        - PCA_NAME_CONSTRAINTS_VALIDATION\n        - PCA_RESOURCE_NOT_FOUND\n        - PCA_INVALID_ARGS\n        - PCA_INVALID_DURATION\n        - PCA_ACCESS_DENIED\n        - SLR_NOT_FOUND\n        - OTHER\n    CertificateType:\n      type: string\n      enum:\n        - IMPORTED\n        - AMAZON_ISSUED\n        - PRIVATE\n    RenewalSummary:\n      type: object\n      required:\n        - RenewalStatus\n        - DomainValidationOptions\n        - UpdatedAt\n      properties:\n        RenewalStatus:\n          allOf:\n            - $ref: '#/components/schemas/RenewalStatus'\n            - description: 'The status of ACM''s \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\u003emanaged renewal\u003c/a\u003e of the certificate.'\n        DomainValidationOptions:\n          allOf:\n            - $ref: '#/components/schemas/DomainValidationList'\n            - description: 'Contains information about the validation of each domain name in the certificate, as it pertains to ACM''s \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\u003emanaged renewal\u003c/a\u003e. This is different from the initial validation that occurs as a result of the \u003ca\u003eRequestCertificate\u003c/a\u003e request. This field exists only when the certificate type is \u003ccode\u003eAMAZON_ISSUED\u003c/code\u003e.'\n        RenewalStatusReason:\n          allOf:\n            - $ref: '#/components/schemas/FailureReason'\n            - description: The reason that a renewal request was unsuccessful.\n        UpdatedAt:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: The time at which the renewal summary was last updated.\n      description: 'Contains information about the status of ACM''s \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\u003emanaged renewal\u003c/a\u003e for the certificate. This structure exists only when the certificate type is \u003ccode\u003eAMAZON_ISSUED\u003c/code\u003e.'\n    KeyUsageList:\n      type: array\n      items:\n        $ref: '#/components/schemas/KeyUsage'\n    ExtendedKeyUsageList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ExtendedKeyUsage'\n    RenewalEligibility:\n      type: string\n      enum:\n        - ELIGIBLE\n        - INELIGIBLE\n    CertificateOptions:\n      type: object\n      properties:\n        CertificateTransparencyLoggingPreference:\n          allOf:\n            - $ref: '#/components/schemas/CertificateTransparencyLoggingPreference'\n            - description: 'You can opt out of certificate transparency logging by specifying the \u003ccode\u003eDISABLED\u003c/code\u003e option. Opt in by specifying \u003ccode\u003eENABLED\u003c/code\u003e. '\n      description: 'Structure that contains options for your certificate. Currently, you can use this only to specify whether to opt in to or out of certificate transparency logging. Some browsers require that public certificates issued for your domain be recorded in a log. Certificates that are not logged typically generate a browser error. Transparency makes it possible for you to detect SSL/TLS certificates that have been mistakenly or maliciously issued for your domain. For general information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-concepts.html#concept-transparency\"\u003eCertificate Transparency Logging\u003c/a\u003e. '\n    CertificateDetail:\n      type: object\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: 'The Amazon Resource Name (ARN) of the certificate. For more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e in the \u003ci\u003eAmazon Web Services General Reference\u003c/i\u003e.'\n        DomainName:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: 'The fully qualified domain name for the certificate, such as www.example.com or example.com.'\n        SubjectAlternativeNames:\n          allOf:\n            - $ref: '#/components/schemas/DomainList'\n            - description: 'One or more domain names (subject alternative names) included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CN) of the certificate and additional domain names that can be used to connect to the website. '\n        DomainValidationOptions:\n          allOf:\n            - $ref: '#/components/schemas/DomainValidationList'\n            - description: 'Contains information about the initial validation of each domain name that occurs as a result of the \u003ca\u003eRequestCertificate\u003c/a\u003e request. This field exists only when the certificate type is \u003ccode\u003eAMAZON_ISSUED\u003c/code\u003e. '\n        Serial:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The serial number of the certificate.\n        Subject:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the entity that is associated with the public key contained in the certificate.\n        Issuer:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the certificate authority that issued and signed the certificate.\n        CreatedAt:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: The time at which the certificate was requested.\n        IssuedAt:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: 'The time at which the certificate was issued. This value exists only when the certificate type is \u003ccode\u003eAMAZON_ISSUED\u003c/code\u003e. '\n        ImportedAt:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: 'The date and time at which the certificate was imported. This value exists only when the certificate type is \u003ccode\u003eIMPORTED\u003c/code\u003e. '\n        Status:\n          allOf:\n            - $ref: '#/components/schemas/CertificateStatus'\n            - description: The status of the certificate.\n        RevokedAt:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: 'The time at which the certificate was revoked. This value exists only when the certificate status is \u003ccode\u003eREVOKED\u003c/code\u003e. '\n        RevocationReason:\n          allOf:\n            - $ref: '#/components/schemas/RevocationReason'\n            - description: 'The reason the certificate was revoked. This value exists only when the certificate status is \u003ccode\u003eREVOKED\u003c/code\u003e. '\n        NotBefore:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: The time before which the certificate is not valid.\n        NotAfter:\n          allOf:\n            - $ref: '#/components/schemas/TStamp'\n            - description: The time after which the certificate is not valid.\n        KeyAlgorithm:\n          allOf:\n            - $ref: '#/components/schemas/KeyAlgorithm'\n            - description: The algorithm that was used to generate the public-private key pair.\n        SignatureAlgorithm:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The algorithm that was used to sign the certificate.\n        InUseBy:\n          allOf:\n            - $ref: '#/components/schemas/InUseList'\n            - description: 'A list of ARNs for the Amazon Web Services resources that are using the certificate. A certificate can be used by multiple Amazon Web Services resources. '\n        FailureReason:\n          allOf:\n            - $ref: '#/components/schemas/FailureReason'\n            - description: 'The reason the certificate request failed. This value exists only when the certificate status is \u003ccode\u003eFAILED\u003c/code\u003e. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/troubleshooting.html#troubleshooting-failed\"\u003eCertificate Request Failed\u003c/a\u003e in the \u003ci\u003eAmazon Web Services Certificate Manager User Guide\u003c/i\u003e. '\n        Type:\n          allOf:\n            - $ref: '#/components/schemas/CertificateType'\n            - description: 'The source of the certificate. For certificates provided by ACM, this value is \u003ccode\u003eAMAZON_ISSUED\u003c/code\u003e. For certificates that you imported with \u003ca\u003eImportCertificate\u003c/a\u003e, this value is \u003ccode\u003eIMPORTED\u003c/code\u003e. ACM does not provide \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\u003emanaged renewal\u003c/a\u003e for imported certificates. For more information about the differences between certificates that you import and those that ACM provides, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html\"\u003eImporting Certificates\u003c/a\u003e in the \u003ci\u003eAmazon Web Services Certificate Manager User Guide\u003c/i\u003e. '\n        RenewalSummary:\n          allOf:\n            - $ref: '#/components/schemas/RenewalSummary'\n            - description: 'Contains information about the status of ACM''s \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/acm-renewal.html\"\u003emanaged renewal\u003c/a\u003e for the certificate. This field exists only when the certificate type is \u003ccode\u003eAMAZON_ISSUED\u003c/code\u003e.'\n        KeyUsages:\n          allOf:\n            - $ref: '#/components/schemas/KeyUsageList'\n            - description: 'A list of Key Usage X.509 v3 extension objects. Each object is a string value that identifies the purpose of the public key contained in the certificate. Possible extension values include DIGITAL_SIGNATURE, KEY_ENCHIPHERMENT, NON_REPUDIATION, and more.'\n        ExtendedKeyUsages:\n          allOf:\n            - $ref: '#/components/schemas/ExtendedKeyUsageList'\n            - description: 'Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies a purpose for which the certificate public key can be used and consists of a name and an object identifier (OID). '\n        CertificateAuthorityArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eThe Amazon Resource Name (ARN) of the ACM PCA private certificate authority (CA) that issued the certificate. This has the following format: \u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e'\n        RenewalEligibility:\n          allOf:\n            - $ref: '#/components/schemas/RenewalEligibility'\n            - description: 'Specifies whether the certificate is eligible for renewal. At this time, only exported private certificates can be renewed with the \u003ca\u003eRenewCertificate\u003c/a\u003e command.'\n        Options:\n          allOf:\n            - $ref: '#/components/schemas/CertificateOptions'\n            - description: 'Value that specifies whether to add the certificate to a transparency log. Certificate transparency makes it possible to detect SSL certificates that have been mistakenly or maliciously issued. A browser might respond to certificate that has not been logged by showing an error message. The logs are cryptographically secure. '\n      description: 'Contains metadata about an ACM certificate. This structure is returned in the response to a \u003ca\u003eDescribeCertificate\u003c/a\u003e request. '\n    CertificateTransparencyLoggingPreference:\n      type: string\n      enum:\n        - ENABLED\n        - DISABLED\n    CertificateStatuses:\n      type: array\n      items:\n        $ref: '#/components/schemas/CertificateStatus'\n    CertificateSummary:\n      type: object\n      properties:\n        CertificateArn:\n          allOf:\n            - $ref: '#/components/schemas/Arn'\n            - description: '\u003cp\u003eAmazon Resource Name (ARN) of the certificate. This is of the form:\u003c/p\u003e \u003cp\u003e \u003ccode\u003earn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-123456789012\u003c/code\u003e \u003c/p\u003e \u003cp\u003eFor more information about ARNs, see \u003ca href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\"\u003eAmazon Resource Names (ARNs)\u003c/a\u003e.\u003c/p\u003e'\n        DomainName:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: 'Fully qualified domain name (FQDN), such as www.example.com or example.com, for the certificate.'\n      description: 'This structure is returned in the response object of \u003ca\u003eListCertificates\u003c/a\u003e action. '\n    CertificateSummaryList:\n      type: array\n      items:\n        $ref: '#/components/schemas/CertificateSummary'\n    DomainStatus:\n      type: string\n      enum:\n        - PENDING_VALIDATION\n        - SUCCESS\n        - FAILED\n    ValidationEmailList:\n      type: array\n      items:\n        $ref: '#/components/schemas/String'\n    ResourceRecord:\n      type: object\n      required:\n        - Name\n        - Type\n        - Value\n      properties:\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The name of the DNS record to create in your domain. This is supplied by ACM.\n        Type:\n          allOf:\n            - $ref: '#/components/schemas/RecordType'\n            - description: The type of DNS record. Currently this can be \u003ccode\u003eCNAME\u003c/code\u003e.\n        Value:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: The value of the CNAME record to add to your DNS database. This is supplied by ACM.\n      description: 'Contains a DNS record value that you can use to validate ownership or control of a domain. This is used by the \u003ca\u003eDescribeCertificate\u003c/a\u003e action. '\n    ValidationMethod:\n      type: string\n      enum:\n        - EMAIL\n        - DNS\n    DomainValidation:\n      type: object\n      required:\n        - DomainName\n      properties:\n        DomainName:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: 'A fully qualified domain name (FQDN) in the certificate. For example, \u003ccode\u003ewww.example.com\u003c/code\u003e or \u003ccode\u003eexample.com\u003c/code\u003e. '\n        ValidationEmails:\n          allOf:\n            - $ref: '#/components/schemas/ValidationEmailList'\n            - description: A list of email addresses that ACM used to send domain validation emails.\n        ValidationDomain:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: The domain name that ACM used to send domain validation emails.\n        ValidationStatus:\n          allOf:\n            - $ref: '#/components/schemas/DomainStatus'\n            - description: '\u003cp\u003eThe validation status of the domain name. This can be one of the following values:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003ePENDING_VALIDATION\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode/\u003eSUCCESS\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode/\u003eFAILED\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n        ResourceRecord:\n          allOf:\n            - $ref: '#/components/schemas/ResourceRecord'\n            - description: '\u003cp\u003eContains the CNAME record that you add to your DNS database for domain validation. For more information, see \u003ca href=\"https://docs.aws.amazon.com/acm/latest/userguide/gs-acm-validate-dns.html\"\u003eUse DNS to Validate Domain Ownership\u003c/a\u003e.\u003c/p\u003e \u003cp\u003eNote: The CNAME information that you need does not include the name of your domain. If you include\u0026#x2028; your domain name in the DNS database CNAME record, validation fails.\u0026#x2028; For example, if the name is \"_a79865eb4cd1a6ab990a45779b4e0b96.yourdomain.com\", only \"_a79865eb4cd1a6ab990a45779b4e0b96\" must be used.\u003c/p\u003e'\n        ValidationMethod:\n          allOf:\n            - $ref: '#/components/schemas/ValidationMethod'\n            - description: Specifies the domain validation method.\n      description: Contains information about the validation of each domain name in the certificate.\n    DomainValidationOption:\n      type: object\n      required:\n        - DomainName\n        - ValidationDomain\n      properties:\n        DomainName:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: A fully qualified domain name (FQDN) in the certificate request.\n        ValidationDomain:\n          allOf:\n            - $ref: '#/components/schemas/DomainNameString'\n            - description: '\u003cp\u003eThe domain name that you want ACM to use to send you validation emails. This domain name is the suffix of the email addresses that you want ACM to use. This must be the same as the \u003ccode\u003eDomainName\u003c/code\u003e value or a superdomain of the \u003ccode\u003eDomainName\u003c/code\u003e value. For example, if you request a certificate for \u003ccode\u003etesting.example.com\u003c/code\u003e, you can specify \u003ccode\u003eexample.com\u003c/code\u003e for this value. In that case, ACM sends domain validation emails to the following five addresses:\u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003eadmin@example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003eadministrator@example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ehostmaster@example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003epostmaster@example.com\u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003ewebmaster@example.com\u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e'\n      description: Contains information about the domain names that you want ACM to use to send you emails that enable you to validate domain ownership.\n    DomainValidationOptionList:\n      type: array\n      items:\n        $ref: '#/components/schemas/DomainValidationOption'\n      minItems: 1\n      maxItems: 100\n    PositiveInteger:\n      type: integer\n      minimum: 1\n    ExpiryEventsConfiguration:\n      type: object\n      properties:\n        DaysBeforeExpiry:\n          allOf:\n            - $ref: '#/components/schemas/PositiveInteger'\n            - description: 'Specifies the number of days prior to certificate expiration when ACM starts generating \u003ccode\u003eEventBridge\u003c/code\u003e events. ACM sends one event per day per certificate until the certificate expires. By default, accounts receive events starting 45 days before certificate expiration.'\n      description: Object containing expiration events options associated with an Amazon Web Services account.\n    PassphraseBlob:\n      type: string\n      minLength: 4\n      maxLength: 128\n      format: password\n    PrivateKey:\n      type: string\n      pattern: '-{5}BEGIN PRIVATE KEY-{5}\\u000D?\\u000A([A-Za-z0-9/+]{64}\\u000D?\\u000A)*[A-Za-z0-9/+]{1,64}={0,2}\\u000D?\\u000A-{5}END PRIVATE KEY-{5}(\\u000D?\\u000A)?'\n      minLength: 1\n      maxLength: 524288\n      format: password\n    ExtendedKeyUsageName:\n      type: string\n      enum:\n        - TLS_WEB_SERVER_AUTHENTICATION\n        - TLS_WEB_CLIENT_AUTHENTICATION\n        - CODE_SIGNING\n        - EMAIL_PROTECTION\n        - TIME_STAMPING\n        - OCSP_SIGNING\n        - IPSEC_END_SYSTEM\n        - IPSEC_TUNNEL\n        - IPSEC_USER\n        - ANY\n        - NONE\n        - CUSTOM\n    ExtendedKeyUsage:\n      type: object\n      properties:\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/ExtendedKeyUsageName'\n            - description: The name of an Extended Key Usage value.\n        OID:\n          allOf:\n            - $ref: '#/components/schemas/String'\n            - description: \u003cp\u003eAn object identifier (OID) for the extension value. OIDs are strings of numbers separated by periods. The following OIDs are defined in RFC 3280 and RFC 5280. \u003c/p\u003e \u003cul\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.1 (TLS_WEB_SERVER_AUTHENTICATION)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.2 (TLS_WEB_CLIENT_AUTHENTICATION)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.3 (CODE_SIGNING)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.4 (EMAIL_PROTECTION)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.8 (TIME_STAMPING)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.9 (OCSP_SIGNING)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.5 (IPSEC_END_SYSTEM)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.6 (IPSEC_TUNNEL)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003cli\u003e \u003cp\u003e \u003ccode\u003e1.3.6.1.5.5.7.3.7 (IPSEC_USER)\u003c/code\u003e \u003c/p\u003e \u003c/li\u003e \u003c/ul\u003e\n      description: 'The Extended Key Usage X.509 v3 extension defines one or more purposes for which the public key can be used. This is in addition to or in place of the basic purposes specified by the Key Usage extension. '\n    ExtendedKeyUsageFilterList:\n      type: array\n      items:\n        $ref: '#/components/schemas/ExtendedKeyUsageName'\n    KeyUsageFilterList:\n      type: array\n      items:\n        $ref: '#/components/schemas/KeyUsageName'\n    KeyAlgorithmList:\n      type: array\n      items:\n        $ref: '#/components/schemas/KeyAlgorithm'\n    Filters:\n      type: object\n      properties:\n        extendedKeyUsage:\n          allOf:\n            - $ref: '#/components/schemas/ExtendedKeyUsageFilterList'\n            - description: Specify one or more \u003ca\u003eExtendedKeyUsage\u003c/a\u003e extension values.\n        keyUsage:\n          allOf:\n            - $ref: '#/components/schemas/KeyUsageFilterList'\n            - description: Specify one or more \u003ca\u003eKeyUsage\u003c/a\u003e extension values.\n        keyTypes:\n          allOf:\n            - $ref: '#/components/schemas/KeyAlgorithmList'\n            - description: '\u003cp\u003eSpecify one or more algorithms that can be used to generate key pairs.\u003c/p\u003e \u003cp\u003eDefault filtering returns only \u003ccode\u003eRSA_1024\u003c/code\u003e and \u003ccode\u003eRSA_2048\u003c/code\u003e certificates that have at least one domain. To return other certificate types, provide the desired type signatures in a comma-separated list. For example, \u003ccode\u003e\"keyTypes\": [\"RSA_2048,RSA_4096\"]\u003c/code\u003e returns both \u003ccode\u003eRSA_2048\u003c/code\u003e and \u003ccode\u003eRSA_4096\u003c/code\u003e certificates.\u003c/p\u003e'\n      description: 'This structure can be used in the \u003ca\u003eListCertificates\u003c/a\u003e action to filter the output of the certificate list. '\n    IdempotencyToken:\n      type: string\n      pattern: \\w+\n      minLength: 1\n      maxLength: 32\n    PrivateKeyBlob:\n      type: string\n      minLength: 1\n      maxLength: 5120\n      format: password\n    KeyUsageName:\n      type: string\n      enum:\n        - DIGITAL_SIGNATURE\n        - NON_REPUDIATION\n        - KEY_ENCIPHERMENT\n        - DATA_ENCIPHERMENT\n        - KEY_AGREEMENT\n        - CERTIFICATE_SIGNING\n        - CRL_SIGNING\n        - ENCIPHER_ONLY\n        - DECIPHER_ONLY\n        - ANY\n        - CUSTOM\n    KeyUsage:\n      type: object\n      properties:\n        Name:\n          allOf:\n            - $ref: '#/components/schemas/KeyUsageName'\n            - description: A string value that contains a Key Usage extension name.\n      description: The Key Usage X.509 v3 extension defines the purpose of the public key contained in the certificate.\n    NextToken:\n      type: string\n      pattern: '[\\u0009\\u000A\\u000D\\u0020-\\u00FF]*'\n      minLength: 1\n      maxLength: 10000\n    MaxItems:\n      type: integer\n      minimum: 1\n      maximum: 1000\n    RecordType:\n      type: string\n      enum:\n        - CNAME\n    RenewalStatus:\n      type: string\n      enum:\n        - PENDING_AUTO_RENEWAL\n        - PENDING_VALIDATION\n        - SUCCESS\n        - FAILED\n    TagKey:\n      type: string\n      pattern: '[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*'\n      minLength: 1\n      maxLength: 128\n    TagValue:\n      type: string\n      pattern: '[\\p{L}\\p{Z}\\p{N}_.:\\/=+\\-@]*'\n      minLength: 0\n      maxLength: 256\n    Tag:\n      type: object\n      required:\n        - Key\n      properties:\n        Key:\n          allOf:\n            - $ref: '#/components/schemas/TagKey'\n            - description: The key of the tag.\n        Value:\n          allOf:\n            - $ref: '#/components/schemas/TagValue'\n            - description: The value of the tag.\n      description: A key-value pair that identifies or specifies metadata about an ACM resource.\nsecurity:\n  - hmac: []\n",
			"canonicalURL": "/github.com/EMResearch/EvoMaster@8378d4a862866198d1e37579c50f98e04429034a/-/blob/core-it/src/test/resources/APIs_guru/amazonaws.com/acm/2015-12-08/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/EMResearch/EvoMaster/blob/8378d4a862866198d1e37579c50f98e04429034a/core-it/src/test/resources/APIs_guru/amazonaws.com/acm/2015-12-08/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:51805: duplicate path: \"/#X-Amz-Target=CertificateManager.DeleteCertificate\""
}