{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/diem/reference-wallet"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/webapp/openapi.yaml",
			"byteSize": 14899,
			"content": "openapi: 3.0.0\ninfo:\n  title: Backend API\n  version: 0.0.1\n  termsOfService: \"/tos\"\nsecurity:\n  - BearerAuth: []\n\npaths:\n  /user:\n    get:\n      summary: returns user metadata information for the user_id\n      tags:\n        - user\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: User object with user metadata\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n\n    post:\n      summary: Creates a new user account with a globally unique account id and password\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - user_id\n                - password\n              properties:\n                user_id:\n                  type: string\n                  description: Unique user id of the user\n                password:\n                  type: string\n      responses:\n        200:\n          description: Auth Token\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AuthToken'\n\n    put:\n      summary: Update user information with the given info, such as name, address, DOB, nationality, and national id\n      tags:\n        - user\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              description: a dictionary of information to update, with keys as type of information\n              type: object\n              required:\n                - user\n                - document_type\n                - document_file\n              properties:\n                user:\n                  $ref: '#/components/schemas/User'\n                document_type:\n                  type: string\n                  description: Type of document to upload\n                  enum:\n                    - drivers_license\n                    - profile_image\n                document_file:\n                  type: string\n                  description: File of the document to upload\n                  format: binary\n      responses:\n        200:\n          description: Updated user object with user metadata\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/User\"\n\n  /user/actions/signin:\n    post:\n      summary: Returns token for client session. Pass in the session for all other requests\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - user_id\n                - password\n              properties:\n                user_id:\n                  type: string\n                password:\n                  type: string\n      responses:\n        200:\n          description: Auth Token\n          content:\n            text/plain:\n              schema:\n                $ref: '#/components/schemas/AuthToken'\n\n  /user/actions/signout:\n    post:\n      summary: Logs user out and invalidates session token\n      tags:\n        - user\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: Success\n\n  /user/actions/change-password:\n    post:\n      summary: Change user password\n      tags:\n        - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  required:\n                    - old_password\n                    - new_password\n                  properties:\n                    old_password:\n                      type: string\n                    new_password:\n                      type: string\n                - type: object\n                  required:\n                    - token\n                    - new_password\n                  properties:\n                    token:\n                      type: string\n                      description: Password reset token\n                    new_password:\n                      type: string\n      responses:\n        200:\n          description: Success\n\n  /account:\n    get:\n      summary: Account information\n      tags:\n        - account\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: Account object with account details\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n\n  /account/payment-method:\n    description: When a user creates an account, the user should provide the wallet with a means to pay for the coins it would buy for the user.\n      Usually, this process involves the payment method provider to issue an authorization/capturing token (with some limitations) and storing this token for later use.\n      Here we simulate it in a way that the frontend will not run a process with the payment provider, but rather just generate a fake token and register it with a unique name under the account payment methods.\n      whenever the user will purchase coins, the payment method name will be used for capturing the funds from the user card or bank account.\n    get:\n      summary: List of payment methods registered with the account\n      tags:\n        - account\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: List of registered payment methods\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    post:\n      summary: Register a payment method to the account\n      tags:\n        - account\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n                - token\n              properties:\n                name:\n                  type: string\n                  description: a name to identify this payment method (presented to the user)\n                provider:\n                  type: string\n                  description: the name of the payment method provider (PSP, Acquirer, etc). E.g. PayPal\n                token:\n                  type: string\n                  description: a token to be used to capture funds from fiat PSP\n      responses:\n        201:\n          description: Success\n\n  /account/quotes:\n    post:\n      summary: (RFQ) Request for quote\n      tags:\n        - CICO\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestForQuote'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Quote\"\n\n  /account/quotes/{quote_id}:\n    get:\n      summary: Get a quote execution status\n      parameters:\n        - in: path\n          name: quote_id\n          schema:\n            type: string\n          required: true\n      tags:\n        - CICO\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: Quote status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  quote_id:\n                    type: string\n                  status:\n                    $ref: '#/components/schemas/QuoteStatus'\n                  status_reason:\n                    type: string\n\n  /account/quotes/{quote_id}/actions/execute:\n    post:\n      summary: Execute a given quote\n      parameters:\n        - in: path\n          name: quote_id\n          schema:\n            type: string\n          required: true\n      tags:\n        - CICO\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - payment_method\n              properties:\n                payment_method:\n                  type: string\n      responses:\n        204:\n          description: Request accepted. You should poll for status updates.\n\n  /account/transactions:\n    get:\n      summary: See all transactions made by a user\n      tags:\n        - transaction\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: All transactions made by user\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Transaction\"\n\n    post:\n      summary: Transfer money from sender to receiver\n      tags:\n        - transaction\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - receiver_address\n                - amount\n                - currency\n              properties:\n                receiver_address:\n                  type: string\n                amount:\n                  type: number\n                currency:\n                  $ref: '#/components/schemas/DiemCurrencies'\n      responses:\n        200:\n          description: Success\n\n  /account/transactions/{transaction_id}:\n    get:\n      summary: See the transaction details of a transaction\n      tags:\n        - transaction\n      security:\n        - BearerAuth: []\n      parameters:\n        - description: Transaction ID\n          in: path\n          name: transaction_id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Transaction details of a transaction\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Transaction\"\n\n  /valid_vasps:\n    get:\n      summary: Get a list of valid and certified VASPs\n      tags:\n        - account\n      security:\n        - BearerAuth: []\n      responses:\n        200:\n          description: List of VASP IDs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  vasp:\n                    - vasp_1\n                    - vasp_2\n                    - vasp_3\n\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n  schemas:\n    DiemCurrencies:\n      type: string\n      enum:\n        - XUSUSD\n        - XUSEUR\n        - XUSGBP\n    CurrencyPairs:\n      type: string\n      enum:\n        - XUSUSD_USD\n        - XUSUSD_EUR\n        - XUSUSD_GBP\n        - XUS_USD\n        - XUS_EUR\n        - XUS_GBP\n        - XUS_XUSUSD\n    Account:\n      type: object\n      required:\n        - user_id\n        - subaddress\n        - balances\n        - created\n      properties:\n        user_id:\n          type: string\n        subaddress:\n          type: string\n        balances:\n          description: Account balance in each currency\n          type: array\n          items:\n            type: object\n            required:\n              - currency\n              - balance\n            properties:\n              currency:\n                $ref: '#/components/schemas/DiemCurrencies'\n              balance:\n                type: number\n        created:\n          type: integer\n      example:\n        user_id: sunmilee@diem.com\n        subaddress: abcde\n        balances:\n          - currency: XUSGBP\n            balance: 0\n          - currency: XUSUSD\n            balance: 100\n        created: '04052020'\n    VaspAccountDetails:\n      type: object\n      required:\n        - vasp_name\n        - user_id\n      properties:\n        vasp_name:\n          type: string\n        user_id:\n          type: string\n    BlockchainTransaction:\n      type: object\n      required:\n        - version\n        - status\n        - expirationTIme\n        - source\n        - destination\n        - amount\n        - sequenceNumber\n      properties:\n        version:\n          type: integer\n        status:\n          type: string\n        expirationTime:\n          type: string\n        source:\n          type: string\n        destination:\n          type: string\n        amount:\n          type: integer\n        sequenceNumber:\n          type: integer\n    Transaction:\n      type: object\n      required:\n        - id\n        - source\n        - destination\n        - amount\n        - blockchain_tx\n        - timestamp\n      properties:\n        id:\n          type: string\n        source:\n          $ref: '#/components/schemas/VaspAccountDetails'\n        destination:\n          $ref: '#/components/schemas/VaspAccountDetails'\n        amount:\n          type: integer\n        blockchain_tx:\n          $ref: '#/components/schemas/BlockchainTransaction'\n        timestamp:\n          type: string\n          format: date-time\n    User:\n      example:\n        user_id: user@gmail.com\n        first_name: Sherlock\n        last_name: Holmes\n        dob: 1861-01-06\n        phone_number: +972521234567\n        country: UK\n        city: London\n        address_1: 1 Hacker Way\n        zip: NW1 6XE\n      type: object\n      required:\n        - user_id\n      properties:\n        user_id:\n          type: string\n        first_name:\n          type: integer\n        last_name:\n          type: integer\n        dob:\n          type: string\n          format: date\n        phone_number:\n          type: string\n        country:\n          type: string\n        state:\n          type: string\n        city:\n          type: string\n        address_1:\n          type: string\n        address_2:\n          type: string\n        zip:\n          type: string\n    AuthToken:\n      type: object\n      required:\n        - access_token\n        - token_type\n      properties:\n        access_token:\n          type: string\n        token_type:\n          type: string\n          example: JWT\n    QuoteActions:\n      type: string\n      enum:\n        - buy\n        - sell\n    RequestForQuote:\n      type: object\n      required:\n        - action\n        - amount\n        - currency_pair\n      properties:\n        action:\n          $ref: '#/components/schemas/QuoteActions'\n        amount:\n          type: number\n        currency_pair:\n          $ref: '#/components/schemas/CurrencyPairs'\n    Quote:\n      type: object\n      required:\n        - quote_id\n        - rfq\n        - price\n        - expiration_time\n      properties:\n        quote_id:\n          type: string\n        rfq:\n          $ref: '#/components/schemas/RequestForQuote'\n        price:\n          description: price for 1 unit of the quote\n          type: number\n        expiration_time:\n          type: string\n          format: date-time\n    QuoteStatus:\n      type: string\n      enum:\n        - Pending\n        - Success\n        - Failed\n"
		}
	},
	"Error": "parse: parse spec: paths: /account/transactions/{transaction_id}: get: operation \"\": parameters: parse parameter \"transaction_id\": path parameters must be required"
}