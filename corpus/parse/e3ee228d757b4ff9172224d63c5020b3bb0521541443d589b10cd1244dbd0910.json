{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/centreon/centreon-gorgone"
		},
		"file": {
			"name": "gorgone-openapi.yaml",
			"size": 0,
			"path": "docs/api/gorgone-openapi.yaml",
			"byteSize": 32971,
			"content": "openapi: 3.0.1\ninfo:\n  title: Centreon Gorgone RestAPI\n  description: |\n    # Information\n    Centreon Gorgone and his \"gorgoned\" daemon is a lightweight, distributed, modular tasks handler.\n\n    It provides a set of actions like:\n    \n      - Execute commands\n      - Send files/directories,\n      - Schedule cron-like tasks,\n      - Push or execute tasks through SSH.\n    \n    The daemon can be installed on Centreon environments like Centreon Central, Remote and Poller servers.\n    \n    It uses ZeroMQ library.\n  x-logo:\n    url: ./centreon-logo.png\n  contact:\n    url: 'https://www.centreon.com'\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: \"1.0\"\nexternalDocs:\n  description: You can contact us on our community Slack\n  url: 'https://centreon.slack.com/messages/CCRGLQSE5'\nservers:\n  - url: '{protocol}://{server}:{port}/api'\n    description: \"Local Gorgone instance\"\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n        description: \"HTTP schema\"\n      server:\n        default: localhost\n        description: \"IP address or hostname of Gorgone instance\"\n      port:\n        default: '8085'\n        description: \"Port used by HTTP server\"\n  - url: '{protocol}://{server}:{port}/api/nodes/{id}'\n    description: \"Remote Gorgone instance\"\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n        description: \"HTTP schema\"\n      server:\n        default: localhost\n        description: \"IP address or hostname of Gorgone instance\"\n      port:\n        default: '8085'\n        description: \"Port used by HTTP server\"\n      id:\n        default: '1'\n        description: \"ID of the remote Gorgone node\"\ntags:\n  - name: Internal\n    description: \"Internal events.\"\n  - name: Logs\n    description: \"Logs management.\"\n  - name: Cron\n    description: \"Module aiming to reproduce a cron-like scheduler that can send events to other Gorgone modules.\"\n  - name: Action\n    description: \"Module aiming to execute actions on the server running the Gorgone daemon or remotly using SSH.\"\n  - name: Engine\n    description: \"Module aiming to provide a bridge to communicate with Centreon Engine daemon.\"\n  - name: Statistics\n    description: \"Module aiming to deal with statistics collection of Centreon Engine and Broker.\"\n  - name: Autodiscovery\n    description: \"Module aiming to extend Centreon Autodiscovery server functionalities.\"\nsecurity:\n  - Basic Authentication: []\npaths:\n  /internal/constatus:\n    get:\n      tags:\n        - Internal\n      summary: \"Get nodes connection status\"\n      description: \"Get the connection status of all nodes managed by the Gorgone daemon.\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NodesStatus'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /internal/information:\n    get:\n      tags:\n        - Internal\n      summary: \"Get runtime informations and statistics\"\n      description: \"Get informations and statistics about loaded modules, available endpoints and number of events computed at runtime.\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Information'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /internal/thumbprint:\n    get:\n      tags:\n        - Internal\n      summary: \"Get public key thumbprint\"\n      description: \"Get the thumbprint of the public key of the Gorgone daemon.\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Thumbprint'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /internal/logger:\n    post:\n      tags:\n        - Internal\n      summary: \"Set logger severity level\"\n      description: \"Set the logger severity level for all modules.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SeverityLevel'\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /log/{token}:\n    get:\n      tags:\n        - Logs\n      summary: \"Retrieve event's logs\"\n      description: \"Retrieve the event's logs based on event's token.\"\n      parameters:\n        - $ref: '#/components/parameters/Token'\n        - $ref: '#/components/parameters/Code'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Ctime'\n        - $ref: '#/components/parameters/Etime'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /core/cron/definitions:\n    get:\n      tags:\n        - Cron\n      summary: \"List definitions\"\n      description: \"List all cron definitions.\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n    post:\n      tags:\n        - Cron\n      summary: \"Add definitions\"\n      description: \"Add one or multiple cron definitions to runtime.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CronDefinitions'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /core/cron/definitions/{definition_id}:\n    get:\n      tags:\n        - Cron\n      summary: \"Get a definition\"\n      description: \"List cron definition identified by id.\"\n      parameters:\n        - $ref: '#/components/parameters/DefinitionId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n    patch:\n      tags:\n        - Cron\n      summary: \"Update a definition\"\n      description: \"Update a cron definition.\"\n      parameters:\n        - $ref: '#/components/parameters/DefinitionId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CronDefinition'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n    delete:\n      tags:\n        - Cron\n      summary: \"Delete a definition\"\n      description: \"Delete a cron definition.\"\n      parameters:\n        - $ref: '#/components/parameters/DefinitionId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /core/cron/definitions/{definition_id}/status:\n    get:\n      tags:\n        - Cron\n      summary: \"Get a definition status\"\n      description: \"Get a definition execution status.\"\n      parameters:\n        - $ref: '#/components/parameters/DefinitionId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /core/action/command:\n    post:\n      tags:\n        - Action\n      summary: \"Execute one or several command lines\"\n      description: \"Execute a command or a set of commands on server running Gorgone.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionCommands'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /centreon/engine/command:\n    post:\n      tags:\n        - Engine\n      summary: \"Send one or several external commands\"\n      description: |\n        Send an external command or a set of external commands to a running Centreon Engine instance using command file pipe.\n        This method needs the commands to be preformatted as Nagios external commands format.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EngineCommands'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /centreon/statistics/broker:\n    get:\n      tags:\n        - Statistics\n      summary: \"Launch Broker statistics collection\"\n      description: \"Launch Broker statistics collection and store the result on disk.\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /centreon/statistics/broker/{monitoring_server_id}:\n    get:\n      tags:\n        - Statistics\n      summary: \"Launch Broker statistics collection of a specific monitoring server\"\n      description: \"Launch Broker statistics collection and store the result on disk.\"\n      parameters:\n        - $ref: '#/components/parameters/MonitoringServerId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /centreon/autodiscovery/hosts:\n    post:\n      tags:\n        - Autodiscovery\n      summary: \"Add a host discovery job\"\n      description: \"Add one Centreon Autodiscovery job to discover hosts.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/HostDiscoveryJob'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /centreon/autodiscovery/hosts/{job_id}/schedule:\n    get:\n      tags:\n        - Autodiscovery\n      summary: \"Launch a host discovery job\"\n      description: \"Launch a host discovery job identified by id (even if in cron mode).\"\n      parameters:\n        - $ref: '#/components/parameters/HostDiscoveryId'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\n  /centreon/autodiscovery/hosts/{token}:\n    delete:\n      tags:\n        - Autodiscovery\n      summary: \"Delete a host discovery job\"\n      description: \"Delete one Centreon Autodiscovery scheduled job.\"\n      parameters:\n        - $ref: '#/components/parameters/HostDiscoveryToken'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/Token'\n                  - $ref: '#/components/schemas/Logs'\n                  - $ref: '#/components/schemas/NoLogs'\n                  - $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/Unauthorized'\n        '403':\n          $ref: '#/components/responses/Forbidden'\ncomponents:\n  securitySchemes:\n    Basic Authentication:\n      type: http\n      scheme: basic\n  parameters:\n    Token:\n      in: path\n      name: token\n      required: true\n      description: \"Token of the event\"\n      schema:\n        type: string\n        example: \"1d48a26a0fc37c1d8658222378044007d9c12311ba49b214de633739be05353415eee946f41b43babb6cb2a083a45c0d6359f361874af39a45b07542de8e2165\"\n    Code:\n      in: query\n      name: code\n      required: false\n      description: \"Only retrieve logs with defined code\"\n      schema:\n        type: integer\n        enum: [0, 1, 2]\n        example: 2\n    Limit:\n      in: query\n      name: limit\n      required: false\n      description: \"Only retrieve the last x logs\"\n      schema:\n        type: integer\n        minimum: 1\n        example: 1\n    Ctime:\n      in: query\n      name: ctime\n      required: false\n      description: \"Only retrieve logs with a creation time equal or superior to a timestamp\"\n      schema:\n        type: integer\n        format: int64\n        example: 1577726040\n    Etime:\n      in: query\n      name: etime\n      required: false\n      description: \"Only retrieve logs of an event time superior to a timestamp\"\n      schema:\n        type: integer\n        format: int64\n        example: 1577726040\n    DefinitionId:\n      in: path\n      name: definition_id\n      required: true\n      description: \"ID of the definition\"\n      schema:\n        type: string\n        example: \"broker_stats\"\n    MonitoringServerId:\n      in: path\n      name: monitoring_server_id\n      required: true\n      description: \"ID of the monitoring server\"\n      schema:\n        type: integer\n        example: 2\n    HostDiscoveryId:\n      in: path\n      name: job_id\n      required: true\n      description: \"ID of the job\"\n      schema:\n        type: integer\n        example: 2\n    HostDiscoveryToken:\n      in: path\n      name: token\n      required: true\n      description: \"Token of the scheduled job\"\n      schema:\n        type: string\n        example: \"discovery_14_6b7d1bb8\"\n  responses:\n    NotFound:\n      description: \"The specified resource was not found\"\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Unauthorized:\n      description: \"Unauthorized\"\n      headers:\n        WWW-Authenticate:\n          schema:\n            type: string\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: \"Short error description\"\n                example: \"http_error_401\"\n              message:\n                type: string\n                description: \"Message explaining the error\"\n                example: \"unauthorized\"\n            required:\n              - error\n              - message\n    Forbidden:\n      description: \"Forbidden\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: \"Short error description\"\n                example: \"http_error_403\"\n              message:\n                type: string\n                description: \"Message explaining the error\"\n                example: \"forbidden\"\n            required:\n              - error\n              - message\n    UnknownEndpoint:\n      description: \"Unknown endpoint\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: \"Short error description\"\n                example: \"method_unknown\"\n              message:\n                type: string\n                description: \"Message explaining the error\"\n                example: \"Method not implemented\"\n            required:\n              - error\n              - message\n    UnknownMethod:\n      description: \"Unknown method\"\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              error:\n                type: string\n                description: \"Short error description\"\n                example: \"endpoint_unknown\"\n              message:\n                type: string\n                description: \"Message explaining the error\"\n                example: \"endpoint not implemented\"\n            required:\n              - error\n              - message\n  schemas:\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: \"Short error description\"\n        message:\n          type: string\n          description: \"Message explaining the error\"\n      required:\n        - error\n        - message\n    Token:\n      type: object\n      properties:\n        token:\n          type: string\n          format: byte\n          description: \"Token related to the event's result\"\n          example: \"1d48a26a0fc37c1d8658222378044007d9c12311ba49b214de633739be05353415eee946f41b43babb6cb2a083a45c0d6359f361874af39a45b07542de8e2165\"\n    Logs:\n      type: object\n      properties:\n        message:\n          type: string\n          description: \"Additionnal message\"\n          example: \"Logs found\"\n        token:\n          type: string\n          format: byte\n          description: \"Token related to the event's result\"\n          example: \"03008486ba50b52e529ff5828d1432e5578dd18bb530c145b133dc902c8cfa6b8aac4d58fffb0c5ed44b943d2acbfb7cd1b18c55fcebce62e51999db460112c7\"\n        data:\n          type: array\n          description: \"Results array containing all logs related to token\"\n          items:\n            $ref: '#/components/schemas/Log'\n    Log:\n      type: object\n      properties:\n        ctime:\n          type: string\n          format: timestamp\n          description: \"Time when the server has stored the log in its database\"\n          example: 1577727699\n        etime:\n          type: string\n          format: timestamp\n          description: \"Time when the event has occured\"\n          example: 1577727699\n        id:\n          type: integer\n          description: \"ID of the event\"\n          example: 101483\n        instant:\n          type: integer\n          example: 0\n        data:\n          type: object\n          description: \"Data stored for this event\"\n        token:\n          type: string\n          format: byte\n          description: \"Token related to the event\"\n          example: \"03008486ba50b52e529ff5828d1432e5578dd18bb530c145b133dc902c8cfa6b8aac4d58fffb0c5ed44b943d2acbfb7cd1b18c55fcebce62e51999db460112c7\"\n        code:\n          type: integer\n          description: \"Returned code of the event\"\n          example: 2\n    NoLogs:\n      type: object\n      properties:\n        error:\n          type: string\n          description: \"Short error description\"\n          example: \"no_log\"\n        message:\n          type: string\n          description: \"Message explaining the error\"\n          example: \"No log found for token\"\n        token:\n          type: string\n          description: \"Token related to the event's result\"\n          example: \"03008486ba50b52e529ff5828d1432e5578dd18bb530c145b133dc902c8cfa6b8aac4d58fffb0c5ed44b943d2acbfb7cd1b18c55fcebce62e51999db460112c7\"\n        data:\n          type: array\n          description: \"Empty array\"\n          items:\n            type: object\n    NodesStatus:\n      type: object\n      properties:\n        action:\n          type: string\n          description: \"Event sent to retrieve data\"\n          example: \"constatus\"\n        message:\n          type: string\n          description: \"Response message\"\n          example: \"ok\"\n        data:\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/NodeStatus'\n    NodeStatus:\n      type: object\n      properties:\n        last_ping_sent:\n          type: string\n          format: timestamp\n          description: \"Last ping sent timestamp\"\n          example: 1577726040\n        type:\n          type: string\n          enum: [push_zmq, pull_zmq, ssh]\n          description: \"Communication type\"\n          example: \"push_zmq\"\n        nodes:\n          type: object\n          description: \"Nodes managed by this Gorgone daemon\"\n        last_ping_recv:\n          type: string\n          format: timestamp\n          description: \"Last ping received timestamp\"\n          example: 1577726040\n    Information:\n      type: object\n      properties:\n        action:\n          type: string\n          description: \"Event sent to retrieve data\"\n          example: \"information\"\n        message:\n          type: string\n          description: \"Response message\"\n          example: \"ok\"\n        data:\n          type: object\n          properties:\n            modules:\n              $ref: '#/components/schemas/Modules'\n            api_endpoints:\n              $ref: '#/components/schemas/ApiEndpoints'\n            counters:\n              $ref: '#/components/schemas/Counters'\n    Modules:\n      type: object\n      description: \"List of loaded modules\"\n      additionalProperties:\n        type: string\n      example:\n        httpserver: \"gorgone::modules::core::httpserver::hooks\"\n        dbcleaner: \"gorgone::modules::core::dbcleaner::hooks\"\n        cron: \"gorgone::modules::core::cron::hooks\"\n        engine: \"gorgone::modules::centreon::engine::hooks\"\n        action: \"gorgone::modules::core::action::hooks\"\n        statistics: \"gorgone::modules::centreon::statistics::hooks\"\n        nodes: \"gorgone::modules::centreon::nodes::hooks\"\n        legacycmd: \"gorgone::modules::centreon::legacycmd::hooks\"\n        proxy: \"gorgone::modules::core::proxy::hooks\"\n    ApiEndpoints:\n      type: object\n      description: \"List of available endpoints\"\n      additionalProperties:\n        type: string\n      example:\n        POST_/internal/logger: \"BCASTLOGGER\"\n        GET_/centreon/statistics/broker: \"BROKERSTATS\"\n        GET_/internal/thumbprint: \"GETTHUMBPRINT\"\n        GET_/core/cron/definitions: \"GETCRON\"\n        GET_/internal/information: \"INFORMATION\"\n        POST_/core/cron/definitions: \"ADDCRON\"\n        POST_/core/action/command: \"COMMAND\"\n        POST_/core/proxy/remotecopy: \"REMOTECOPY\"\n        POST_/centreon/engine/command: \"ENGINECOMMAND\"\n        PATCH_/core/cron/definitions: \"UPDATECRON\"\n        DELETE_/core/cron/definitions: \"DELETECRON\"\n        GET_/internal/constatus: \"CONSTATUS\"\n    Counters:\n      type: object\n      description: \"List of metric counters\"\n      properties:\n        total:\n          type: integer\n          description: \"Total number of events processed since startup\"\n          example: 40210\n        external:\n          type: object\n          description: \"Number of external events since startup\"\n          additionalProperties:\n            type: string\n          example:\n            total: 0\n        internal:\n          type: object\n          description: \"Number of internal events since startup\"\n          additionalProperties:\n            type: string\n          example:\n            legacycmdready: 1\n            setlogs: 7841\n            enginecommand: 20\n            registernodes: 443\n            pong: 3397\n            proxyready: 5\n            statisticsready: 1\n            addcron: 1\n            cronready: 1\n            getthumbprint: 2\n            centreonnodesready: 1\n            httpserverready: 1\n            command: 4446\n            putlog: 9809\n            dbcleanerready: 1\n            information: 6\n            brokerstats: 4446\n            constatus: 1\n            total: 40210\n            setcoreid: 443\n            getlog: 8893\n            engineready: 1\n            unregisternodes: 443\n            actionready: 1\n        proxy:\n          type: object\n          description: \"Number of events passed through proxy since startup\"\n          additionalProperties:\n            type: string\n          example:\n            enginecommand: 10\n            getlog: 4446\n            total: 8902\n            command: 4446\n    Thumbprint:\n      type: object\n      properties:\n        action:\n          type: string\n          description: \"Event sent to retrieve data\"\n          example: \"getthumbprint\"\n        message:\n          type: string\n          description: \"Response message\"\n          example: \"ok\"\n        data:\n          type: object\n          properties:\n            thumbprint:\n              type: string\n              description: \"Thumbprint of the public key\"\n              example:\n                \"cS4B3lZq96qcP4FTMhVMuwAhztqRBQERKyhnEitnTFM\"\n    SeverityLevel:\n      type: object\n      properties:\n        severity:\n          type: string\n          description: \"Severity level to be defined for all loaded modules\"\n          enum:\n            - info\n            - error\n            - debug\n    CronDefinitions:\n      type: array\n      items:\n        $ref: '#/components/schemas/CronDefinition'\n    CronDefinition:\n      type: object\n      properties:\n        timespec:\n          type: string\n          description: \"Cron-like time specification\"\n        id:\n          type: string\n          description: \"Unique identifier of the cron definition\"\n        action:\n          type: string\n          description: \"Action/event to call at job execution\"\n        parameters:\n          type: object\n          description: \"Parameters needed by the called action/event\"\n        keep_token:\n          type: boolean\n          description: \"Boolean to define whether or not the ID of the definition will be used as token for the command\"\n      required:\n        - timespec\n        - id\n        - action\n        - parameters\n    ActionCommands:\n      type: array\n      items:\n        $ref: '#/components/schemas/ActionCommand'\n    ActionCommand:\n      type: object\n      properties:\n        command:\n          type: string\n          description: \"Command to execute\"\n          example: \"echo data \u003e /tmp/date.log\"\n        timeout:\n          type: integer\n          description: \"Time in seconds before a command is considered timed out\"\n          example: 5\n          default: 30\n        continue_on_error:\n          type: boolean\n          description: \"Behaviour in case of execution issue\"\n          example: true\n          default: false\n      required:\n        - command\n    EngineCommands:\n      type: object\n      properties:\n        command_file:\n          type: string\n          description: \"Path to the Centreon Engine command file pipe\"\n          example: \"/var/lib/centreon-engine/rw/centengine.cmd\"\n        command:\n          type: array\n          items:\n            type: string\n            description: \"External command\"\n            example: \"[653284380] SCHEDULE_SVC_CHECK;host1;service1;653284380\"\n    HostDiscoveryJob:\n      type: object\n      properties:\n        job_id:\n          type: integer\n          description: \"ID of the Host Discovery job\"\n          example: 14\n        target:\n          type: integer\n          description: \"Identifier of the target on which to execute the command\"\n          example: 2\n        command_line:\n          type: string\n          description: \"Command line to execute to perform the discovery\"\n          example: \"perl /usr/lib/centreon/plugins/centreon_generic_snmp.pl --plugin=os::linux::local::plugin --mode=discovery-snmp --subnet='10.1.2.3/24' --snmp-port='161' --snmp-version='2c' --snmp-community='public'\"\n        timeout:\n          type: integer\n          description: \"Time in seconds before the command is considered timed out\"\n          example: 300\n        execution:\n          type: object\n          description: \"Execution mode of this job ('0': execute immediately, '1': schedule with cron)\"\n          properties:\n            mode:\n              type: integer\n              description: \"Execution mode ('0': immediate, '1': scheduled)\"\n              example: 0\n            parameters:\n              type: object\n              description: \"Parameters needed by execution mode\"\n              properties:\n                cron_definition:\n                  type: string\n                  description: \"Cron definition\"\n                  example: \"*/10 * * * *\"\n        post_execution:\n          type: object\n          description: \"Post-execution settings\"\n          properties:\n            commands:\n              type: array\n              description: \"Array of commands (content depends on command)\"\n              items:\n                type: object\n                description: \"Command\"\n                properties:\n                  action:\n                    type: string\n                    description: \"Action to perform\"\n                    example: COMMAND\n                  command_line:\n                    type: string\n                    description: \"Command line to execute\"\n                    example: \"/usr/share/centreon/www/modules/centreon-autodiscovery-server/script/run_save_discovered_host --job-id=14\"\n      required:\n        - job_id\n        - target\n        - command_line\n        - execution\n          ",
			"canonicalURL": "/github.com/centreon/centreon-gorgone@65a81f39b559f04a72155d8c361dfcf0b879ecfa/-/blob/docs/api/gorgone-openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/centreon/centreon-gorgone/blob/65a81f39b559f04a72155d8c361dfcf0b879ecfa/docs/api/gorgone-openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: securitySchemes: at 1:12897: invalid name: \"Basic Authentication\" doesn't match \"^[a-zA-Z0-9.\\\\-_]+$\""
}