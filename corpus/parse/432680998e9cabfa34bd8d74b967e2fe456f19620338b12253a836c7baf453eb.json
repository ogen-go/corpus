{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CON-In-A-Box/CIAB-Portal"
		},
		"file": {
			"name": "ciab.openapi.yaml",
			"size": 0,
			"path": "ciab.openapi.yaml",
			"byteSize": 130783,
			"content": "openapi: 3.0.0\ninfo:\n  title: 'CIAB backend API'\n  description: 'The CIAB RESTful Web API is designed to allow access to the Con In A Box functionality from a variety of web clients as well as more cleanly divide the front end and back ends of the main CIAB web site.'\n  license:\n    name: 'Apache 2.0'\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: '0.1'\nservers:\n  -\n    url: 'http://localhost:8080/api'\n    description: Sign-in\npaths:\n  '/announcement/{id}':\n    get:\n      tags:\n        - announcements\n      summary: 'Gets an announcement'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the announcement'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Announcement found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/announcement'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/announce_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - announcements\n      summary: 'Updates a announcement'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the announcement'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                Department:\n                  nullable: true\n                  type: integer\n                Text:\n                  nullable: true\n                  type: string\n                Scope:\n                  nullable: true\n                  type: integer\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/department_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - announcements\n      summary: 'Deletes an announcement'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the announcement'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/announce_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/announcements':\n    get:\n      tags:\n        - departments\n      summary: 'Lists announcements for a given department'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/announcement_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/department_not_found'\n      security:\n        -\n          ciab_auth: []\n  /announcement:\n    get:\n      tags:\n        - announcements\n      summary: 'Lists announcements for the current member'\n      parameters:\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/announcement_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/announcement':\n    post:\n      tags:\n        - departments\n      summary: 'Adds a new announcement'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                text:\n                  type: string\n                scope:\n                  type: integer\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Department or Member not found in the system'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/cycle/{id}':\n    get:\n      tags:\n        - cycles\n      summary: 'Gets an cycle'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the cycle'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'Cycle found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cycle'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/cycle_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - cycles\n      summary: 'Updates a cycle'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the cycle'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                date_from:\n                  nullable: true\n                  type: string\n                  format: date\n                date_to:\n                  nullable: true\n                  type: string\n                  format: date\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cycle'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/cycle_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - cycles\n      summary: 'Deletes an cycle'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the cycle'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/cycle_not_found'\n      security:\n        -\n          ciab_auth: []\n  /cycle:\n    get:\n      tags:\n        - cycles\n      summary: 'Lists cycles'\n      parameters:\n        -\n          name: from\n          in: query\n          description: 'Start date for cycle list'\n          required: false\n          schema:\n            type: string\n            format: date\n        -\n          name: to\n          in: query\n          description: 'Final date for cycle list'\n          required: false\n          schema:\n            type: string\n            format: date\n        -\n          name: includesDate\n          in: query\n          description: 'A date that must be included in cycles in the list'\n          required: false\n          schema:\n            type: string\n            format: date\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cycle_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/cycle_not_found'\n      security:\n        -\n          ciab_auth: []\n    post:\n      tags:\n        - cycles\n      summary: 'Adds a new cycle'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                date_from:\n                  type: string\n                  format: date\n                date_to:\n                  type: string\n                  format: date\n              type: object\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/cycle'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Department or Member not found in the system'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/deadline/{id}':\n    get:\n      tags:\n        - deadlines\n      summary: 'Gets a deadline'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the deadline'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Deadline found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/deadline'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/deadline_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - deadlines\n      summary: 'Updates a deadline'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the deadline'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                deadline:\n                  nullable: true\n                  type: string\n                  format: date\n                note:\n                  nullable: true\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/deadline_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - deadlines\n      summary: 'Deletes a deadline'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the deadline'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/deadline_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/deadlines':\n    get:\n      tags:\n        - departments\n      summary: 'Lists deadlines for a given department'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/deadline_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/department_not_found'\n      security:\n        -\n          ciab_auth: []\n  /deadline:\n    get:\n      tags:\n        - deadlines\n      summary: 'Lists deadlines for the current member'\n      parameters:\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/deadline_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/deadline':\n    post:\n      tags:\n        - departments\n      summary: 'Adds a new deadline'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                deadline:\n                  type: string\n                  format: date\n                note:\n                  type: string\n                scope:\n                  type: integer\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/department_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}':\n    get:\n      tags:\n        - departments\n      summary: 'Gets a department'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id or name of the deadline'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Department found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/department'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/department_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/children':\n    get:\n      tags:\n        - departments\n      summary: 'Lists children of the department'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id or name of the deadline'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department name'\n                type: string\n              -\n                description: 'Department id'\n                type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/department_list'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  /department:\n    get:\n      tags:\n        - departments\n      summary: 'Lists departments'\n      parameters:\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/department_list'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  '/event/{id}':\n    get:\n      tags:\n        - events\n      summary: 'Gets an event'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the event'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Event found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - events\n      summary: 'Deletes an event'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the event'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n  /event:\n    get:\n      tags:\n        - events\n      summary: 'Lists events'\n      parameters:\n        -\n          name: begin\n          in: query\n          description: 'First date to search from.'\n          required: false\n          style: form\n          schema:\n            type: string\n            format: date\n        -\n          name: end\n          in: query\n          description: 'Last date to search until.'\n          required: false\n          style: form\n          schema:\n            type: string\n            format: date\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/event_list'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - events\n      summary: 'Modifies an existing event.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the event'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                date_from:\n                  type: string\n                  format: date\n                date_to:\n                  type: string\n                  format: date\n                name:\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n    post:\n      tags:\n        - events\n      summary: 'Adds a new event'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                date_from:\n                  type: string\n                  format: date\n                date_to:\n                  type: string\n                  format: date\n                name:\n                  type: string\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '400':\n          description: 'Cycle not found in the system which contains event dates.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  /member/find:\n    get:\n      tags:\n        - members\n      summary: 'Search for a member based on the query'\n      parameters:\n        -\n          name: q\n          in: query\n          description: 'Query string'\n          required: true\n          schema:\n            type: string\n        -\n          name: from\n          in: query\n          description: 'Comma seperated list of attributes to be searched, default = ''all'''\n          required: false\n          style: simple\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - all\n                - email\n                - id\n                - legal_name\n                - name\n                - badge\n                - badge_id\n        -\n          name: partial\n          in: query\n          description: 'Allow partial matches, default is false'\n          required: false\n          schema:\n            type: boolean\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Member(s) found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/configuration/{field}':\n    get:\n      tags:\n        - members\n      summary: 'Get a configuration setting for a member'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or login of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member login'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n        -\n          name: field\n          in: path\n          description: 'Configuration setting field'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/configuration':\n    get:\n      tags:\n        - members\n      summary: 'Get all configuration settings for a member'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or login of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member login'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - members\n      summary: 'Updates a member configuration setting'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or login of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member login'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                Field:\n                  nullable: false\n                  type: string\n                Value:\n                  nullable: false\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}':\n    get:\n      tags:\n        - members\n      summary: 'Gets a member'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the member.'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'Member found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - members\n      summary: 'Updates a member'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or login of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member login'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/member_body'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '400':\n          description: 'Parameter is missing or invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  /member:\n    get:\n      tags:\n        - members\n      summary: 'Gets current member'\n      responses:\n        '200':\n          description: 'Member found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n    post:\n      tags:\n        - members\n      summary: 'Adds a new member'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/member_body'\n      responses:\n        '201':\n          description: OK\n        '409':\n          description: 'Email address already in use.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '400':\n          description: 'Required parameters missing.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  '/member/{name}/status':\n    get:\n      tags:\n        - members\n      summary: 'Gets the status of an member account.'\n      parameters:\n        -\n          name: name\n          in: path\n          description: 'login for the account'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Member status found'\n          content:\n            application/json:\n              schema:\n                properties:\n                  type: { type: string, enum: [member_status] }\n                  status: { description: 'Member account status code', type: integer, enum: [0, 1, 2, 3] }\n                type: object\n        '404':\n          $ref: '#/components/responses/member_not_found'\n  '/member/{email}/password':\n    post:\n      tags:\n        - members\n      summary: 'Requests a password reset for a member'\n      parameters:\n        -\n          name: email\n          in: path\n          description: 'The id or login email for the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member ID'\n                type: integer\n              -\n                description: 'Member login email'\n                type: string\n      responses:\n        '201':\n          description: OK\n        '404':\n          $ref: '#/components/responses/member_not_found'\n  '/member/{id}/password':\n    put:\n      tags:\n        - members\n      summary: 'Updates a member''s password'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or login of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member login'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                OldPassword:\n                  nullable: false\n                  type: string\n                NewPassword:\n                  nullable: false\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/member'\n        '400':\n          description: 'Parameter is missing or invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  '/member/{email}/password/recovery':\n    put:\n      tags:\n        - members\n      summary: 'Updates a member''s password with recovery code'\n      parameters:\n        -\n          name: email\n          in: path\n          description: 'The login email of the member'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                OneTimeCode:\n                  nullable: false\n                  type: string\n                NewPassword:\n                  nullable: false\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: 'Parameter is missing or invalid'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  '/admin/SUDO/{id}':\n    post:\n      tags:\n        - administrative\n      summary: 'Convert current session to that of another member.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or login of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member login'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  /payment/:\n    post:\n      tags:\n        - payments\n      summary: 'Start a new payment'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                success:\n                  type: string\n                  format: url\n                cancel:\n                  type: string\n                  format: url\n                cart:\n                  type: array\n                  items: {  }\n              type: object\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/payment'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Payment Processor Not Found.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/method/{resource}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets permissions on a resource by method'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - announcement\n              - deadline\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/method/{resource}/{method}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets a method permission'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - announcement\n              - deadline\n        -\n          name: method\n          in: path\n          description: 'Method being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - get\n              - put\n              - post\n              - delete\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/method/{resource}/{method}/{department}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets a method permission'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - announcement\n              - deadline\n        -\n          name: method\n          in: path\n          description: 'Method being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - get\n              - put\n              - post\n              - delete\n        -\n          name: department\n          in: path\n          description: 'The Id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/resource/{resource}/{department}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets a resource permission'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - announcement\n              - deadline\n        -\n          name: department\n          in: path\n          description: 'The Id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department name'\n                type: integer\n              -\n                description: 'Department id'\n                type: string\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/resource/{resource}/{department}/{method}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets a resource permission'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - announcement\n              - deadline\n        -\n          name: department\n          in: path\n          description: 'The Id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department name'\n                type: integer\n              -\n                description: 'Department id'\n                type: string\n        -\n          name: method\n          in: path\n          description: 'Method being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - get\n              - put\n              - post\n              - delete\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/generic/{resource}/{method}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets a generic permission'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n        -\n          name: method\n          in: path\n          description: 'Method being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - get\n              - put\n              - post\n              - delete\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/permissions/generic/{resource}/{method}/{detail}':\n    get:\n      tags:\n        - permissions\n      summary: 'Gets a generic permission'\n      parameters:\n        -\n          name: resource\n          in: path\n          description: 'Resource being queried.'\n          required: true\n          schema:\n            type: string\n        -\n          name: method\n          in: path\n          description: 'Method being queried.'\n          required: true\n          schema:\n            type: string\n            enum:\n              - get\n              - put\n              - post\n              - delete\n        -\n          name: detail\n          in: path\n          description: 'detail of the method.'\n          required: true\n          schema:\n            type: string\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Permissions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/permission_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/permission_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/stores/{id}':\n    get:\n      tags:\n        - stores\n      summary: 'Gets a store'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the store.'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'Store found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/store'\n        '404':\n          $ref: '#/components/responses/store_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - stores\n      summary: 'Updates a store'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the store'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                store_slug:\n                  type: string\n                name:\n                  type: string\n                description:\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/store'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/store_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - stores\n      summary: 'Deletes a store'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of a store'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/store_not_found'\n      security:\n        -\n          ciab_auth: []\n  /stores:\n    get:\n      tags:\n        - stores\n      summary: 'Lists stores'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/store_list'\n    post:\n      tags:\n        - stores\n      summary: 'Adds a new store'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                store_slug:\n                  nullable: false\n                  type: string\n                name:\n                  nullable: false\n                  type: string\n                description:\n                  type: string\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '400':\n          description: 'Invalid parameters'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/admin/configuration/{field}':\n    get:\n      tags:\n        - administrative\n      summary: 'Get a configuration setting for the site'\n      parameters:\n        -\n          name: field\n          in: path\n          description: 'Configuration setting field'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n  /admin/configuration:\n    get:\n      tags:\n        - administrative\n      summary: 'Get all configuration settings for the site'\n      parameters:\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - administrative\n      summary: 'Updates a site configuration setting'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                Field:\n                  nullable: false\n                  type: string\n                Value:\n                  nullable: false\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n  /admin/log:\n    get:\n      tags:\n        - administrative\n      summary: 'Read the system log'\n      responses:\n        '200':\n          description: 'Log entries found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/log'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Log entries not found on the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/registration/admin/configuration/{field}':\n    get:\n      tags:\n        - registration\n      summary: 'Get a configuration setting for registration'\n      parameters:\n        -\n          name: field\n          in: path\n          description: 'Configuration setting field'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n  /registration/admin/configuration:\n    get:\n      tags:\n        - registration\n      summary: 'Get all configuration settings for registration'\n      parameters:\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - registration\n      summary: 'Updates a registration configuration setting'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                Field:\n                  nullable: false\n                  type: string\n                Value:\n                  nullable: false\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/configuration'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/configuration_not_found'\n      security:\n        -\n          ciab_auth: []\n  /registration/open:\n    get:\n      tags:\n        - registration\n      summary: 'Returns if event registration is open or not..'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n      responses:\n        '200':\n          description: 'Event registration open status'\n          content:\n            application/json:\n              schema:\n                properties:\n                  type: { type: string, enum: [registration] }\n                  event: { description: 'event Id', type: integer }\n                  open: { description: 'Is registration open', type: boolean }\n                type: object\n        '404':\n          $ref: '#/components/responses/event_not_found'\n  /registration/admin:\n    get:\n      tags:\n        - registration\n      summary: 'Returns is the current account is a registration admin.'\n      responses:\n        '200':\n          description: 'Member status found'\n          content:\n            application/json:\n              schema:\n                properties:\n                  admin: { type: boolean, enum: [true] }\n                type: object\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/checkin':\n    put:\n      tags:\n        - registration\n      summary: 'Check in a ticket and generate boarding pass'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}':\n    get:\n      tags:\n        - registration\n      summary: 'Gets a registration ticket'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket.'\n          required: true\n          schema:\n            type: integer\n        -\n          name: show_void\n          in: query\n          description: 'Show voided tickets as well.'\n          required: false\n          schema:\n            type: integer\n            enum:\n              - 0\n              - 1\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Ticket found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n    put:\n      tags:\n        - registration\n      summary: 'Updates ticket information.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                badge_id:\n                  type: string\n                badge_name:\n                  type: string\n                emergency_contact:\n                  type: string\n                note:\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - registration\n      summary: 'Deletes a ticket'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/email':\n    put:\n      tags:\n        - registration\n      summary: 'Email the boarding pass to the ticket holder.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/type/{id}':\n    get:\n      tags:\n        - registration\n      summary: 'Gets a ticket type for an event'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket type'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Ticket type found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket_type'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n  /registration/ticket/type:\n    get:\n      tags:\n        - registration\n      summary: 'List all ticket types for the event'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Ticket type found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket_type_list'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  /registration/ticket/list/unclaimed:\n    get:\n      tags:\n        - registration\n      summary: 'Gets all unclaimed tickets for an event'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/show_void'\n        -\n          $ref: '#/components/parameters/show_checked_in'\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Tickets found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/list/{member}':\n    get:\n      tags:\n        - registration\n      summary: 'Gets tickets for an event for a member'\n      parameters:\n        -\n          name: member\n          in: path\n          description: 'The member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member email'\n                type: string\n              -\n                description: 'Member id'\n                type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/show_void'\n        -\n          $ref: '#/components/parameters/show_checked_in'\n        -\n          $ref: '#/components/parameters/show_picked_up'\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Tickets found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n  /registration/ticket/list:\n    get:\n      tags:\n        - registration\n      summary: 'Gets tickets for the current member for the event'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/show_void'\n        -\n          $ref: '#/components/parameters/show_checked_in'\n        -\n          $ref: '#/components/parameters/show_picked_up'\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Tickets found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/lost':\n    put:\n      tags:\n        - registration\n      summary: 'Report the badge for the ticket lost.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/pickup':\n    put:\n      tags:\n        - registration\n      summary: 'Report the badge for the ticket as picked up.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  /registration/ticket:\n    post:\n      tags:\n        - registration\n      summary: 'Create a new Ticket'\n      parameters:\n        -\n          $ref: '#/components/parameters/short_response'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                member:\n                  type: string\n                event:\n                  type: string\n                ticket_type:\n                  type: string\n                badge_dependent_on:\n                  type: string\n                badge_id:\n                  type: string\n                badge_name:\n                  type: string\n                emergency_contact:\n                  type: string\n                registered_by:\n                  type: string\n              type: object\n      responses:\n        '201':\n          description: 'Ticket created'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/event_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/print':\n    put:\n      tags:\n        - registration\n      summary: 'Send the badge for the ticket to the print queue.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  /registration/ticket/printqueue:\n    get:\n      tags:\n        - registration\n      summary: 'Get the current print queue for badges for the event.'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/print_queue'\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/printqueue/claim/{id}':\n    put:\n      tags:\n        - registration\n      summary: 'Claim and clear a job from the print queue.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/reinstate':\n    put:\n      tags:\n        - registration\n      summary: 'Reinstate a voided ticket.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ticket'\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/registration/ticket/{id}/void':\n    put:\n      tags:\n        - registration\n      summary: 'Void a ticket.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the ticket'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '409':\n          description: 'Update Conflict'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n        '404':\n          $ref: '#/components/responses/ticket_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/staff_membership/{id}':\n    get:\n      tags:\n        - staff\n      summary: 'Gets staff position'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the staff position.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member staff positions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/staff_entry'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/staff_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - staff\n      summary: 'Deletes a staff member.'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the position'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/staff_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/staff':\n    get:\n      tags:\n        - departments\n      summary: 'List staff for a department'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Department being listed'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/staff_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Event or Department not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/staff_membership':\n    get:\n      tags:\n        - members\n      summary: 'Gets staff positions for a member'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the member.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member staff positions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/staff_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  /member/staff_membership/:\n    get:\n      tags:\n        - members\n      summary: 'Gets staff positions for the current member'\n      parameters:\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'Member staff positions found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/staff_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  /department/staff/:\n    get:\n      tags:\n        - departments\n      summary: 'List staff all departments'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/staff_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Event or Department not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  'member/{id}/staff_membership':\n    post:\n      tags:\n        - members\n      summary: 'Adds a new staff membership to a member'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'The id or email of the member'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Member ID'\n                type: integer\n              -\n                description: 'Member login email'\n                type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                Department:\n                  nullable: false\n                  description: 'Id or name of the department'\n                  type: string\n                Position:\n                  nullable: false\n                  description: 'ID of the position'\n                  type: integer\n                Note:\n                  nullable: true\n                  type: string\n                Event:\n                  nullable: true\n                  description: 'If not present, current event'\n                  type: integer\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/department_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/volunteers/claims/{id}':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets volunteer claim'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer claim.'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'volunteer claim data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_claim'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/volunteer_claim_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - volunteers\n      summary: 'Deletes an existing volunteer claim'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer claim'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/volunteers/claims':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets member volunteer claims'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the member.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'volunteer claim data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_claim_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/volunteer_claim_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/volunteer/claims/summary':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets member volunteer summary'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the member.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_claim_summary'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  /volunteer/claims:\n    post:\n      tags:\n        - volunteers\n      summary: 'Adds a new volunteer claim'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          parameter: force\n          name: force\n          in: query\n          description: 'Force the reward addition. If not specified defaults false'\n          required: false\n          style: form\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                member:\n                  nullable: false\n                  description: 'Id or email of the member'\n                  type: string\n                reward:\n                  nullable: false\n                  description: 'Id of the reward'\n                  type: string\n                event:\n                  nullable: true\n                  description: 'Id of the event; current event if absent'\n                  type: string\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '400':\n          description: 'User not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteer/claims/{id}':\n    put:\n      tags:\n        - volunteers\n      summary: 'Modifies an existing volunteer claim'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer claim'\n          required: true\n          schema:\n            type: integer\n        -\n          parameter: force\n          name: force\n          in: query\n          description: 'Force the reward addition. If not specified defaults false'\n          required: false\n          style: form\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                member:\n                  nullable: true\n                  description: 'Id or email of the member'\n                  type: string\n                reward:\n                  nullable: true\n                  description: 'Id of the reward'\n                  type: string\n                event:\n                  nullable: true\n                  description: 'Id of the event'\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteers/hours/{id}':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets volunteer data'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer record.'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/volunteer_entry_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - volunteers\n      summary: 'Deletes an existing volunteer entry'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer entry'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/volunteer/hours':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets department volunteer data'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/department/{id}/volunteer/hours/summary':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets department volunteer summary'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id or name of the department'\n          required: true\n          schema:\n            oneOf:\n              -\n                description: 'Department id'\n                type: integer\n              -\n                description: 'Department name'\n                type: string\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/event/{id}/volunteer/hours':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets event volunteer data'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the event'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/event/{id}/volunteer/hours/summary':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets member volunteer summary'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the event.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/volunteer/hours':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets member volunteer data'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the member.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  '/member/{id}/volunteer/hours/summary':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets member volunteer summary'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the member.'\n          required: true\n          schema:\n            type: integer\n        -\n          $ref: '#/components/parameters/event'\n        -\n          $ref: '#/components/parameters/short_response'\n      responses:\n        '200':\n          description: 'Member volunteer data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_hour_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/member_not_found'\n      security:\n        -\n          ciab_auth: []\n  /volunteer/hours:\n    post:\n      tags:\n        - volunteers\n      summary: 'Adds a new volunteer entry'\n      parameters:\n        -\n          $ref: '#/components/parameters/event'\n        -\n          parameter: force\n          name: force\n          in: query\n          description: 'Force the hour addition. If not specified defaults false'\n          required: false\n          style: form\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                member:\n                  type: string\n                department:\n                  type: string\n                hours:\n                  type: string\n                authorizer:\n                  type: string\n                end:\n                  type: string\n                enterer:\n                  type: string\n                modifier:\n                  type: string\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '400':\n          description: 'User not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteer/hours/{id}':\n    put:\n      tags:\n        - volunteers\n      summary: 'Modifies an existing volunteer entry'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer entry'\n          required: true\n          schema:\n            type: integer\n        -\n          parameter: force\n          name: force\n          in: query\n          description: 'Force the change. If not specified defaults 0'\n          required: false\n          style: form\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                member:\n                  type: string\n                department:\n                  type: string\n                hours:\n                  type: string\n                authorizer:\n                  type: string\n                end:\n                  type: string\n                enterer:\n                  type: string\n                modifier:\n                  type: string\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteers/rewards/{id}':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets volunteer reward data'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer reward.'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'reward data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_reward'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/volunteer_reward_not_found'\n      security:\n        -\n          ciab_auth: []\n    delete:\n      tags:\n        - volunteers\n      summary: 'Deletes an existing volunteer reward'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer reward'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteers/reward_group/{id}':\n    delete:\n      tags:\n        - volunteers\n      summary: 'Deletes an existing volunteer reward group'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer reward group'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '204':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteers/rewards_group/{id}':\n    get:\n      tags:\n        - volunteers\n      summary: 'Gets volunteer reward group data'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the reward group.'\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'reward data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_reward_group'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/volunteer_reward_group_not_found'\n      security:\n        -\n          ciab_auth: []\n  /volunteers/rewards:\n    get:\n      tags:\n        - volunteers\n      summary: 'List volunteer reward data'\n      parameters:\n        -\n          name: sold_out\n          in: query\n          description: 'Show sold out items, default if false'\n          required: false\n          schema:\n            type: boolean\n        -\n          $ref: '#/components/parameters/short_response'\n        -\n          $ref: '#/components/parameters/max_results'\n        -\n          $ref: '#/components/parameters/page_token'\n      responses:\n        '200':\n          description: 'reward data found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/volunteer_reward_entry_list'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/volunteer_reward_not_found'\n      security:\n        -\n          ciab_auth: []\n  /volunteer/rewards:\n    post:\n      tags:\n        - volunteers\n      summary: 'Adds a new volunteer reward'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                name:\n                  type: string\n                promo:\n                  type: boolean\n                reward_group:\n                  description: 'Reward Group Id'\n                  type: integer\n                inventory:\n                  type: integer\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  /volunteer/reward_group:\n    post:\n      tags:\n        - volunteers\n      summary: 'Adds a new volunteer reward group'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                reward_limit:\n                  description: 'Number of items allowed from the group.'\n                  type: integer\n              type: object\n      responses:\n        '201':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n      security:\n        -\n          ciab_auth: []\n  '/volunteer/rewards/{id}':\n    put:\n      tags:\n        - volunteers\n      summary: 'Modifies an existing volunteer reward'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer reward'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                name:\n                  type: string\n                promo:\n                  type: boolean\n                reward_group:\n                  description: 'Reward Group Id'\n                  type: integer\n                inventory:\n                  type: integer\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteer/reward_group/{id}':\n    put:\n      tags:\n        - volunteers\n      summary: 'Modifies an existing volunteer reward group'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer reward group'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                reward_limit:\n                  type: integer\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\n  '/volunteer/rewards/{id}/inventory':\n    put:\n      tags:\n        - volunteers\n      summary: 'Modifies the inventory of an existing volunteer reward'\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Id of the volunteer reward'\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                difference:\n                  type: integer\n              type: object\n      responses:\n        '200':\n          description: OK\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: 'Entry not found in the system.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      security:\n        -\n          ciab_auth: []\ncomponents:\n  schemas:\n    announcement:\n      properties:\n        type:\n          type: string\n          enum:\n            - announcement\n        id:\n          description: 'announcement ID'\n          type: integer\n        posted_on:\n          description: 'Date the announcement was first posted'\n          type: string\n          format: date\n        department:\n          description: 'Department for the announcement'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'Department Id'\n              type: integer\n        posted_by:\n          description: 'The member who created the announcement'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        scope:\n          description: 'The scope of the announcement'\n          type: integer\n        text:\n          description: 'Text of the announcement'\n          type: string\n      type: object\n    announcement_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - announcement_list\n            data:\n              description: 'List of announcements'\n              type: array\n              items:\n                $ref: '#/components/schemas/announcement'\n        -\n          $ref: '#/components/schemas/resource_list'\n    error:\n      properties:\n        type:\n          type: string\n          enum:\n            - error\n        code:\n          description: 'announcement ID'\n          type: integer\n        status:\n          description: 'Error Status'\n          type: string\n        message:\n          description: 'Error Message'\n          type: string\n      type: object\n    resource_list:\n      properties:\n        type:\n          type: string\n        data:\n          description: 'List of resources'\n          type: array\n          items: {  }\n        next_page_token:\n          description: 'If present, the `page_token` for the next page of results'\n          type: integer\n      type: object\n    cycle:\n      properties:\n        type:\n          type: string\n          enum:\n            - cycle\n        id:\n          description: 'cycle Id'\n          type: integer\n        date_from:\n          description: 'cycle start date'\n          type: string\n          format: date\n        date_to:\n          description: 'cycle ending date'\n          type: string\n          format: date\n      type: object\n    cycle_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - cycle_list\n            data:\n              description: 'List of cycles'\n              type: array\n              items:\n                $ref: '#/components/schemas/cycle'\n        -\n          $ref: '#/components/schemas/resource_list'\n    deadline:\n      properties:\n        type:\n          type: string\n          enum:\n            - deadline\n        id:\n          description: 'Deadline Id'\n          type: integer\n        deadline:\n          description: 'When this deadline expires'\n          type: string\n          format: date\n        department:\n          description: 'Department for the deadline'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'Department Id'\n              type: integer\n        note:\n          description: 'Note about the deadline.'\n          type: string\n        scope:\n          description: 'The scope of the deadline'\n          type: integer\n        posted_by:\n          description: 'The member who created the deadline'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n      type: object\n    deadline_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - deadline_list\n            data:\n              description: 'List of deadlines'\n              type: array\n              items:\n                $ref: '#/components/schemas/deadline'\n        -\n          $ref: '#/components/schemas/resource_list'\n    department:\n      properties:\n        type:\n          type: string\n          enum:\n            - department\n        id:\n          description: 'department Id'\n          type: integer\n        name:\n          description: 'department name'\n          type: string\n        parent:\n          description: 'Department that is the parent of this department.'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'Department Id'\n              type: integer\n        child_count:\n          description: 'Number of child departments'\n          type: integer\n        fallback:\n          description: 'Department that is this departments fallback.'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'Department Id'\n              type: integer\n        email:\n          description: 'Department''s email addresses.'\n          type: array\n          items:\n            type: string\n      type: object\n    department_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - department_list\n            data:\n              description: 'List of departments'\n              type: array\n              items:\n                $ref: '#/components/schemas/department'\n        -\n          $ref: '#/components/schemas/resource_list'\n    event:\n      properties:\n        type:\n          type: string\n          enum:\n            - event\n        id:\n          description: 'event Id'\n          type: integer\n        cycle:\n          description: 'Annual cycle this event is part of'\n          oneOf:\n            -\n              $ref: '#/components/schemas/cycle'\n            -\n              description: 'Cycle Id'\n              type: integer\n        date_from:\n          description: 'Date the event starts'\n          type: string\n          format: date\n        date_to:\n          description: 'Date the event ends'\n          type: string\n          format: date\n        name:\n          description: 'Name of the event'\n          type: string\n      type: object\n    event_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - event_list\n            data:\n              description: 'List of events'\n              type: array\n              items:\n                $ref: '#/components/schemas/event'\n        -\n          $ref: '#/components/schemas/resource_list'\n    member:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - member\n            id:\n              description: 'member ID'\n              type: integer\n        -\n          $ref: '#/components/schemas/member_body'\n    member_body:\n      properties:\n        first_name:\n          description: 'Members preferred first name'\n          type: string\n        last_name:\n          description: 'Members preferred last name'\n          type: string\n        email:\n          description: 'Members primary email'\n          type: string\n        legal_first_name:\n          description: 'Members legal first name.'\n          type: string\n        legal_last_name:\n          description: 'Members legal last name.'\n          type: string\n        middle_name:\n          description: 'Member''s middle name.'\n          type: string\n        suffix:\n          description: 'Suffix for members name.'\n          type: string\n        email2:\n          description: 'Member''s second email.'\n          type: string\n        email3:\n          description: 'Member''s third email'\n          type: string\n        phone:\n          description: 'Member''s primary phone'\n          type: string\n        phone2:\n          description: 'Member''s secondary phone'\n          type: string\n        address_line1:\n          description: 'Member''s address line 1'\n          type: string\n        address_line2:\n          description: 'Member''s address line 2'\n          type: string\n        city:\n          description: 'Member''s address city.'\n          type: string\n        state:\n          description: 'Member''s address state'\n          type: string\n        zip_code:\n          description: 'Member''s Address Zip code.'\n          type: string\n        zip_plus4:\n          description: 'Member''s Address Zip code suffix'\n          type: string\n        country:\n          description: 'Member''s Address country.'\n          type: string\n        province:\n          description: 'Member''s Address province.'\n          type: string\n        preferred_first_name:\n          description: 'Member''s Preferred First Name.'\n          type: string\n        preferred_last_name:\n          description: 'Member''s Preferred Last Name.'\n          type: string\n        deceased:\n          description: 'Is member deceased.'\n          type: boolean\n        do_not_contact:\n          description: 'Do not contact member.'\n          type: boolean\n        email_optout:\n          description: 'Do not mass email member.'\n          type: boolean\n        birthdate:\n          description: 'Member''s birth date.'\n          type: string\n          format: date\n        gender:\n          description: 'Member''s preferred gender string.'\n          type: string\n        concom_display_phone:\n          description: 'If Concom display phone on list.'\n          type: boolean\n      type: object\n    member_reference:\n      properties:\n        type:\n          type: string\n          enum:\n            - member_reference\n        id:\n          description: 'Member Id'\n          type: integer\n      type: object\n    member_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - member_list\n            data:\n              description: 'List of members'\n              type: array\n              items:\n                $ref: '#/components/schemas/member_reference'\n        -\n          $ref: '#/components/schemas/resource_list'\n    payment:\n      properties:\n        type:\n          type: string\n          enum:\n            - payment\n      type: object\n    permission_entry:\n      properties:\n        type:\n          type: string\n          enum:\n            - permission_entry\n        subtype:\n          description: 'Description string about the permission'\n          type: string\n        allowed:\n          description: 'Is the permission enabled'\n          type: boolean\n        action:\n          $ref: '#/components/schemas/permission_action'\n        subdata:\n          $ref: '#/components/schemas/permission_subdata'\n      type: object\n    permission_subdata:\n      properties:\n        department:\n          description: 'Id for the target department'\n          type: integer\n      type: object\n    permission_action:\n      properties:\n        method:\n          description: 'Name of the method'\n          type: string\n        href:\n          description: 'URI for the method'\n          type: string\n          format: uri\n        request:\n          description: 'HTTP request type for the method'\n          type: string\n      type: object\n    permission_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - permission_list\n            data:\n              description: 'List of permissions'\n              type: array\n              items:\n                $ref: '#/components/schemas/permission_entry'\n        -\n          $ref: '#/components/schemas/resource_list'\n    store:\n      properties:\n        type:\n          type: string\n          enum:\n            - store\n        id:\n          description: 'store Id'\n          type: integer\n        store_slug:\n          description: 'short, unique name for store'\n          type: string\n        name:\n          description: 'public-facing name for store, e.g. ''Membership'''\n          type: string\n        description:\n          description: 'description of store, eventually public facing'\n          type: string\n      type: object\n    store_list:\n      properties:\n        type:\n          type: string\n          enum:\n            - store_list\n        data:\n          description: 'List of stores'\n          type: array\n          items:\n            $ref: '#/components/schemas/store'\n      type: object\n    log_entry:\n      properties:\n        type:\n          type: string\n          enum:\n            - log_entry\n        id:\n          description: 'Entry ID'\n          type: string\n        account:\n          description: 'Member account generating the log'\n          type: string\n        function:\n          description: 'Function generating the log'\n          type: string\n        query:\n          description: 'The query string being logged'\n          type: string\n        date:\n          description: 'When the log entry was generated'\n          type: string\n          format: date-time\n      type: object\n    log:\n      properties:\n        type:\n          type: string\n          enum:\n            - log\n        data:\n          description: 'List of entries'\n          type: array\n          items:\n            $ref: '#/components/schemas/log_entry'\n      type: object\n    configuration:\n      properties:\n        type:\n          type: string\n          enum:\n            - configuration\n        field:\n          description: 'Configuration Field'\n          type: string\n        value:\n          description: 'Configurtion Value'\n          type: string\n      type: object\n    configuration_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - configuration_list\n            data:\n              description: 'List of configuration fields'\n              type: array\n              items:\n                $ref: '#/components/schemas/configuration'\n        -\n          $ref: '#/components/schemas/resource_list'\n    ticket:\n      properties:\n        type:\n          type: string\n          enum:\n            - ticket\n        id:\n          type: integer\n        badge_dependent_on:\n          description: 'Member badge is dependent on'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        badge_id:\n          description: 'The badge number of unique distinguishing ID'\n          type: string\n        badge_name:\n          type: string\n        badges_picked_up:\n          description: 'The number of times this badge has been printed and picked up'\n          type: integer\n        emergency_contact:\n          type: string\n        event:\n          description: 'Event the badge is for'\n          oneOf:\n            -\n              $ref: '#/components/schemas/event'\n            -\n              description: 'Event Id'\n              type: integer\n        registered_by:\n          description: 'Member who create the ticket'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        registration_date:\n          type: string\n          format: date\n        boarding_pass_generated:\n          type: string\n          format: date\n        print_requested:\n          type: string\n          format: date\n        last_printed_date:\n          type: string\n          format: date\n        print_request_ip:\n          type: string\n          format: ip\n        note:\n          type: string\n        void_date:\n          type: string\n          format: date\n        void_by:\n          description: 'Member who voided the ticket'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        void_reason:\n          type: string\n        ticket_type:\n          description: 'Type of the ticket'\n          oneOf:\n            -\n              $ref: '#/components/schemas/ticket_type'\n            -\n              description: 'Ticket Type Id'\n              type: integer\n        member:\n          description: 'Member who the ticket is for'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n      type: object\n    ticket_type:\n      properties:\n        type:\n          type: string\n          enum:\n            - ticket_type\n        id:\n          type: integer\n        event:\n          description: 'Event the badge is for'\n          oneOf:\n            -\n              $ref: '#/components/schemas/event'\n            -\n              description: 'Event Id'\n              type: integer\n        name:\n          type: string\n        avaliable_from:\n          type: string\n          format: date\n        avaliable_to:\n          type: string\n          format: date\n        cost:\n          type: number\n          format: float\n        background_image:\n          type: string\n      type: object\n    ticket_type_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - ticket_type_list\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/ticket_type'\n        -\n          $ref: '#/components/schemas/resource_list'\n    ticket_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - ticket_list\n            data:\n              type: array\n              items:\n                $ref: '#/components/schemas/ticket'\n        -\n          $ref: '#/components/schemas/resource_list'\n    print_job:\n      properties:\n        type:\n          type: string\n          enum:\n            - print_job\n        id:\n          type: integer\n        method:\n          type: string\n          enum:\n            - claim\n        request:\n          type: string\n          enum:\n            - PUT\n        href:\n          type: string\n      type: object\n    print_queue:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - print_queue\n            data:\n              description: 'List of queued print jobs'\n              type: array\n              items:\n                $ref: '#/components/schemas/print_job'\n        -\n          $ref: '#/components/schemas/resource_list'\n    staff_entry:\n      properties:\n        type:\n          type: string\n          enum:\n            - staff_entry\n        id:\n          description: 'Entry Id'\n          type: integer\n        member:\n          description: 'Member resource'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        note:\n          description: 'Note about this staffing entry'\n          type: string\n        position:\n          description: 'Title of the staff position.'\n          type: string\n        departemnt:\n          description: 'The department of the staff position.'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'departemnt Id'\n              type: integer\n      type: object\n    staff_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - staff_list\n            event:\n              description: 'Id of the event being listed.'\n              type: integer\n            data:\n              description: 'List of staff positions'\n              type: array\n              items:\n                $ref: '#/components/schemas/staff_entry'\n        -\n          $ref: '#/components/schemas/resource_list'\n    volunteer_claim:\n      properties:\n        type:\n          type: string\n          enum:\n            - volunteer_claim\n        id:\n          type: integer\n        member:\n          description: 'Member badge who volunteered'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        event:\n          description: 'Event the badge is for'\n          oneOf:\n            -\n              $ref: '#/components/schemas/event'\n            -\n              description: 'Event Id'\n              type: integer\n        reward:\n          description: 'The Reward.'\n          oneOf:\n            -\n              $ref: '#/components/schemas/volunteer_reward'\n            -\n              description: 'Reward Id'\n              type: integer\n      type: object\n    volunteer_claim_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - volunteer_claim_list\n            data:\n              description: 'List of volunteer claims'\n              type: array\n              items:\n                $ref: '#/components/schemas/volunteer_claim'\n        -\n          $ref: '#/components/schemas/resource_list'\n    volunteer_claim_summary:\n      properties:\n        type:\n          type: string\n          enum:\n            - volunteer_claim_summary\n        reward_count:\n          type: integer\n        spent_hours:\n          type: integer\n        event:\n          description: 'Event of the claim summary'\n          oneOf:\n            -\n              $ref: '#/components/schemas/event'\n            -\n              description: 'Event Id'\n              type: integer\n      type: object\n    volunteer_hour_entry:\n      properties:\n        type:\n          type: string\n          enum:\n            - volunteer_hour_entry\n        id:\n          type: integer\n        member:\n          description: 'Member badge who volunteered'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        department:\n          description: 'The department of the staff position.'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'departemnt Id'\n              type: integer\n        hours:\n          description: 'Actual time in entry.'\n          type: number\n        authorizer:\n          description: 'Member authorizing the entry'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        end:\n          description: 'Time entry ended'\n          type: string\n          format: date-time\n        enterer:\n          description: 'Member entering the entry'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        event:\n          description: 'Event the badge is for'\n          oneOf:\n            -\n              $ref: '#/components/schemas/event'\n            -\n              description: 'Event Id'\n              type: integer\n        modifier:\n          description: 'Time Modifier.'\n          type: number\n      type: object\n    volunteer_hour_summary:\n      properties:\n        type:\n          type: string\n          enum:\n            - volunteer_hour_summary_entry\n        entry_count:\n          type: number\n        total_hours:\n          type: number\n      type: object\n      oneOf:\n        -\n          property: member\n          description: 'Member badge who volunteered'\n          oneOf:\n            -\n              $ref: '#/components/schemas/member'\n            -\n              description: 'Member Id'\n              type: integer\n        -\n          property: department\n          description: 'The department of the staff position.'\n          oneOf:\n            -\n              $ref: '#/components/schemas/department'\n            -\n              description: 'departemnt Id'\n              type: integer\n    volunteer_hour_entry_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - volunteer_hour_entry_list\n            total_hours:\n              type: in\n            data:\n              description: 'List of volunteer hour entries'\n              type: array\n              items:\n                $ref: '#/components/schemas/volunteer_hour_entry'\n        -\n          $ref: '#/components/schemas/resource_list'\n    volunteer_hour_summary_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - volunteer_hour_summary_list\n            total_hours:\n              type: in\n            data:\n              description: 'List of volunteer hour summaries'\n              type: array\n              items:\n                $ref: '#/components/schemas/volunteer_hour_summary'\n        -\n          $ref: '#/components/schemas/resource_list'\n    volunteer_reward:\n      properties:\n        type:\n          type: string\n          enum:\n            - volunteer_reward\n        id:\n          type: integer\n        name:\n          type: string\n        promo:\n          type: boolean\n        reward_group:\n          oneOf:\n            -\n              $ref: '#/components/schemas/volunteer_reward_group'\n            -\n              description: 'Reward Group Id'\n              type: integer\n        inventory:\n          type: integer\n      type: object\n    volunteer_reward_entry_list:\n      type: object\n      allOf:\n        -\n          properties:\n            type:\n              type: string\n              enum:\n                - volunteer_reward_entry_list\n            data:\n              description: 'List of volunteer rewards'\n              type: array\n              items:\n                $ref: '#/components/schemas/volunteer_reward'\n        -\n          $ref: '#/components/schemas/resource_list'\n    volunteer_reward_group:\n      properties:\n        type:\n          type: string\n          enum:\n            - volunteer_reward_group\n        id:\n          type: integer\n        reward_limit:\n          description: 'Number of items allowed from the group.'\n          type: integer\n        rewards:\n          description: 'Items in the group.'\n      type: object\n  responses:\n    '401':\n      description: 'User is not authenticated or not authorized for the API.'\n    announce_not_found:\n      description: 'Announcement not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    cycle_not_found:\n      description: 'Cycle not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    deadline_not_found:\n      description: 'Deadline not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    department_not_found:\n      description: 'Department not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    event_not_found:\n      description: 'Event not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    member_not_found:\n      description: 'Member not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    payment_not_found:\n      description: 'Payment Processor not found.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    permission_not_found:\n      description: 'Permission not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    store_not_found:\n      description: 'Store not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    configuration_not_found:\n      description: 'Configuration field not defined.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    ticket_not_found:\n      description: 'Ticket not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    staff_not_found:\n      description: 'Staff Position not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    volunteer_claim_not_found:\n      description: 'Volunteer claim not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    volunteer_entry_not_found:\n      description: 'Volunteer entry not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    volunteer_reward_not_found:\n      description: 'Volunteer reward not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n    volunteer_reward_group_not_found:\n      description: 'Volunteer reward group not found in the system.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n  parameters:\n    max_results:\n      name: max_results\n      in: query\n      description: 'Maximum members of the list per page or ''all'' (default 100).'\n      required: false\n      style: form\n      schema:\n        oneOf:\n          -\n            type: integer\n          -\n            type: string\n            enum:\n              - all\n    page_token:\n      name: page_token\n      in: query\n      description: 'Starting page of results.'\n      required: false\n      style: form\n      schema:\n        type: integer\n    short_response:\n      name: short_response\n      in: query\n      description: 'Do not include sub-resource structures, only Ids.'\n      required: false\n      style: form\n      schema:\n        type: integer\n        enum:\n          - 0\n          - 1\n    event:\n      name: short_response\n      in: query\n      description: 'Target event ID for query. If not specified defaults to the current event'\n      required: false\n      style: form\n      schema:\n        type: integer\n    show_void:\n      name: show_void\n      in: query\n      description: 'Show voided tickets as well.'\n      required: false\n      schema:\n        type: integer\n        enum:\n          - 0\n          - 1\n    show_checked_in:\n      name: checked_in\n      in: query\n      description: 'Show/exclude checked in'\n      required: false\n      schema:\n        type: integer\n        enum:\n          - 0\n          - 1\n    show_picked_up:\n      name: picked_up\n      in: query\n      description: 'Show/exclude picked up'\n      required: false\n      schema:\n        type: integer\n        enum:\n          - 0\n          - 1\n  securitySchemes:\n    ciab_auth:\n      type: oauth2\n      description: 'Authentication to the API server'\n      flows:\n        password:\n          tokenUrl: api/token\n          refreshUrl: api/token\n          scopes:\n            - ''\ntags:\n  -\n    name: announcements\n    description: 'Features around text announcements to event and event staff'\n  -\n    name: cycles\n    description: 'Features around annual cycles'\n  -\n    name: deadlines\n    description: 'Features around event department deadlines'\n  -\n    name: departments\n    description: 'Features around staffing departments for events'\n  -\n    name: events\n    description: 'Features around events'\n  -\n    name: members\n    description: 'Features around members of events'\n  -\n    name: payments\n    description: 'Features around payments'\n  -\n    name: permissions\n    description: 'Querying and checking permissions in the API'\n  -\n    name: stores\n    description: 'Features around stores'\n  -\n    name: administrative\n    description: 'Features around Administration of the site'\n  -\n    name: registration\n    description: 'Features around members of event registration'\n  -\n    name: staff\n    description: 'Features around event staff. (Only avalaible if the ''staff'' module is enabled)'\n  -\n    name: volunteers\n    description: 'Features around volunteers at an event'\nexternalDocs:\n  description: 'View us on GitHub'\n  url: 'https://github.com/CON-In-A-Box/CIAB-Portal/tree/master/api/doc'\n"
		}
	},
	"Error": "parse: parse spec: paths: /registration/ticket/list: get: operation \"\": parameters: duplicate parameter: \"short_response\" in \"query\""
}