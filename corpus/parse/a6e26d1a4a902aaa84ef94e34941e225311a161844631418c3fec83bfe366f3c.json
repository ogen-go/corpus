{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openapi-processor/openapi-processor-core"
		},
		"file": {
			"name": "user.v1.yaml",
			"size": 0,
			"path": "src/testInt/resources/tests/ref-chain-spring-124.1/inputs/apis/user.v1.yaml",
			"byteSize": 4421,
			"content": "openapi: 3.0.0\ninfo:\n  title: user\n  version: '1.0'\n\ntags:\n  - name: user\n    description: user tag\n\npaths:\n\n  '/users/{userId}':\n    parameters:\n      - schema:\n          type: integer\n        name: userId\n        in: path\n        required: true\n        description: Id of an existing user.\n\n    get:\n      summary: Get User by User ID\n      description: Retrieve the information of the user with the matching user ID.\n      operationId: get-user-by-userId\n      tags:\n        - user\n      responses:\n        '200':\n          description: User Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Get User Alice Smith:\n                  $ref: '#/components/examples/UserExample'\n        '404':\n          description: User Not Found\n\n    put:\n      summary: Replace User Info by User ID\n      description: Replace the information of the user with the matching user ID.\n      operationId: put-user-by-userId\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Put User Alice Smith:\n                  value:\n                    id: 0\n                    firstName: string\n                    lastName: string\n                    birthDate: '2019-08-24'\n                    email: user@example.com\n        '404':\n          description: Not Found\n      requestBody:\n        description: ''\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n            examples:\n              Put User Alice Smith:\n                $ref: '#/components/examples/UserExample'\n\n    delete:\n      summary: Delete User by User ID\n      description: Delete the user with the matching user ID.\n      operationId: delete-user-by-userId\n      tags:\n        - user\n      responses:\n        '200':\n          description: OK\n\n  '/user':\n    post:\n      summary: Create New User\n      description: Create a new user.\n      operationId: post-user\n      tags:\n        - user\n      responses:\n        '200':\n          description: User Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                Post User Alice Smith:\n                  $ref: '#/components/examples/UserExample'\n        '400':\n          description: Missing Required Information.\n      requestBody:\n        description: Post the necessary fields for the API to create a new user.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n            examples:\n              Post User Alice Smith:\n                $ref: '#/components/examples/UserExample'\n\n  /users:\n    get:\n      summary: Get all users\n      description: Get all users.\n      operationId: get-all-users\n      tags:\n        - user\n      responses:\n        '200':\n          description: none\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n\n  /user-page:\n    post:\n      summary: Get user page\n      description: Get a user page.\n      operationId: get-user-page\n      tags:\n        - user\n      parameters:\n        - in: query\n          name: pageable\n          required: false\n          schema:\n            $ref: '#/components/schemas/Pageable'\n      responses:\n        '200':\n          description: none\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserPage'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserSearch'\n\ncomponents:\n  schemas:\n    Pageable:\n      $ref: ../models/pageable.model.v1.yaml\n    Page:\n      $ref: ../models/page.model.v1.yaml\n    UserContent:\n      $ref: ../models/user-content.model.v1.yaml\n    UserPage:\n      $ref: ../models/user-page.model.v1.yaml\n    User:\n      $ref: ../models/user.model.v1.yaml\n    UserSearch:\n      $ref: ../models/user-search.model.v1.yaml\n  examples:\n    UserExample:\n      $ref: ../examples/user.example.v1.yaml\n",
			"canonicalURL": "/github.com/openapi-processor/openapi-processor-core@1f7170ca885f2b2d2dabec0f20ca2838e3e39856/-/blob/src/testInt/resources/tests/ref-chain-spring-124.1/inputs/apis/user.v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openapi-processor/openapi-processor-core/blob/1f7170ca885f2b2d2dabec0f20ca2838e3e39856/src/testInt/resources/tests/ref-chain-spring-124.1/inputs/apis/user.v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Page\": parse schema: at 1:113: external \"../models/page.model.v1.yaml\": get: file: local file reference is not allowed"
}