{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stackql/stackql-provider-registry"
		},
		"file": {
			"name": "tracing.yaml",
			"size": 0,
			"path": "providers/src/sumologic/v0.1.1/services/tracing.yaml",
			"byteSize": 107638,
			"content": "paths:\n  /v1/tracing/tracequery:\n    post:\n      tags:\n        - traces\n      summary: Run a trace search query asynchronously.\n      description: Execute a trace search query and get the id to fetch its status and results. Use the [Trace Query Status](#operation/getTraceQueryStatus) endpoint to check a query status. When the query has been completed, use the [Trace Query Result](#operation/getTraceQueryResult) endpoint to get the result of the asynchronous query.\n      operationId: createTraceQuery\n      parameters: []\n      requestBody:\n        description: Query parameters.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AsyncTraceQueryRequest'\n        required: true\n      responses:\n        '200':\n          description: Query execution result.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CreateTraceQueryResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/tracequery/{queryId}:\n    delete:\n      tags:\n        - traces\n      summary: Cancel a trace search query.\n      description: Cancel a currently processed trace search query with the given id.\n      operationId: cancelTraceQuery\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the query to cancel.\n          required: true\n          schema:\n            type: string\n            example: 798a13dc1ceeb19a\n      responses:\n        '204':\n          description: Query canceled successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/tracequery/{queryId}/status:\n    get:\n      tags:\n        - traces\n      summary: Get a trace search query status.\n      description: Get a status of a trace query with the given id. When the query has been completed, use the [Trace Query Result](#operation/getTraceQueryResult) endpoint to get the result of the asynchronous query.\n      operationId: getTraceQueryStatus\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the executed query.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n      responses:\n        '200':\n          description: Status of the given trace search query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceQueryStatusResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/tracequery/{queryId}/rows/{rowId}/traces:\n    get:\n      tags:\n        - traces\n      summary: Get results of a trace search query.\n      description: Get a list of traces matching a query with the specified id. The response is paginated with a default limit of 100 traces per page.\n      operationId: getTraceQueryResult\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the executed query.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n        - name: rowId\n          in: path\n          description: Identifier of the query row.\n          required: true\n          schema:\n            type: string\n            example: A\n        - name: limit\n          in: query\n          description: Limit of the number of traces returned in the response.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            example: 100\n            default: 100\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n            example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI\n      responses:\n        '200':\n          description: Details about the given span query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceQueryResultResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/metrics:\n    get:\n      tags:\n        - traces\n      summary: Get trace search query metrics.\n      description: Get a list of available trace metrics that can be used in trace search queries.\n      operationId: getMetrics\n      parameters: []\n      responses:\n        '200':\n          description: List of available metrics.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceMetricsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/tracequery/fields:\n    get:\n      tags:\n        - traces\n      summary: Get filter fields for trace search queries.\n      description: Get a list of available fields which can be used in trace search queries.\n      operationId: getTraceQueryFields\n      parameters: []\n      responses:\n        '200':\n          description: List of available fields.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceFieldsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/tracequery/fields/{field}/values:\n    get:\n      tags:\n        - traces\n      summary: Get trace search query filter field values.\n      description: Get a list of available values for the given trace search query filter field. Not all fields support value listing. The response is paginated with a default limit of 10 values per page.\n      operationId: getTraceQueryFieldValues\n      parameters:\n        - name: field\n          in: path\n          description: Field identifier.\n          required: true\n          schema:\n            type: string\n        - name: query\n          in: query\n          description: Search filter to apply on the values to be returned. Only values containing the search query term will be returned.\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The maximum number of results to fetch.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            default: 10\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of available filter values for the given field.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceFieldValuesResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}:\n    get:\n      tags:\n        - traces\n      summary: Get trace details.\n      description: Get details of a trace with the given identifier.\n      operationId: getTrace\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace to get the details.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Details of the trace with the given identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceDetail'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/exists:\n    get:\n      tags:\n        - traces\n      summary: Check if the trace exists.\n      description: Check if the trace with the given identifier exists.\n      operationId: traceExists\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace to check.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: The response contains the information whether the trace exists with other optional attributes.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceExistsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/spans:\n    get:\n      tags:\n        - traces\n      summary: Get a list of trace spans.\n      description: Get a list of spans for the given trace. The response is paginated with a default limit of 100 spans per page.\n      operationId: getSpans\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace to get the spans.\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The maximum number of results to fetch.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            default: 100\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of spans for the given trace.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceSpansResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/traceEvents:\n    get:\n      tags:\n        - traces\n      summary: Get a list of events (without their attributes) per span for a trace.\n      description: Gets a list of the events (without their attributes) attached to each span in a given trace. The response is paginated with a default limit of 100 spans per page.\n      operationId: getTraceLightEvents\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace for which span events will be returned.\n          required: true\n          schema:\n            maxLength: 32\n            minLength: 16\n            type: string\n            example: 695068749d21cd104222a95cabc4707c\n        - name: limit\n          in: query\n          description: The maximum number of spans with events returned by a single query.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            default: 100\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n            example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI\n      responses:\n        '200':\n          description: Map of spans to events relations.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceLightEventsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/criticalPath:\n    get:\n      tags:\n        - traces\n      summary: Get a critical path of a trace.\n      description: Get a list of span segments composing the critical path of the trace. A span segment represents the processing time that was consumed within the span itself and does not incorporate the processing time of its children. The critical path is the sequence of span segments that contribute to the total trace duration. An increase of the processing time of any segment from the critical path would result in an increase of the total trace processing time.\n      operationId: getCriticalPath\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace.\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The maximum number of results to fetch.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            default: 100\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of span segments composing the critical path.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CriticalPathResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/criticalPath/breakdown/service:\n    get:\n      tags:\n        - traces\n      summary: Get a critical path service breakdown of a trace.\n      description: Get a critical path breakdown by services of the spans contributing to the critical path of a trace with the given identifier.\n      operationId: getCriticalPathServiceBreakdown\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of elements representing the critical path service breakdown.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CriticalPathServiceBreakdownResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/spans/{spanId}:\n    get:\n      tags:\n        - traces\n      summary: Get span details.\n      description: Get details of a span with the given identifier.\n      operationId: getSpan\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace the span belongs to.\n          required: true\n          schema:\n            type: string\n        - name: spanId\n          in: path\n          description: Identifier of the span to get the details.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Details of the span with the given identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceSpanDetail'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/traces/{traceId}/spans/{spanId}/billingInfo:\n    get:\n      tags:\n        - traces\n      summary: Get span billing details.\n      description: Get the billing information of the span.\n      operationId: getSpanBillingInfo\n      parameters:\n        - name: traceId\n          in: path\n          description: Identifier of the trace the span belongs to.\n          required: true\n          schema:\n            type: string\n        - name: spanId\n          in: path\n          description: Identifier of the span to get the billing info.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Billing information of the span with the given identifier.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceSpanBillingInfo'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery:\n    post:\n      tags:\n        - spanAnalytics\n      summary: Run a span analytics query asynchronously.\n      description: Execute a span analytics query and get the id to fetch its status and results. Use the [Span Query Status](#operation/getSpanQueryStatus) endpoint to check a query status. When the query has been completed, use the [Span Query Result](#operation/getSpanQueryResult) endpoint to get the result of the asynchronous query.\n      operationId: createSpanQuery\n      parameters: []\n      requestBody:\n        description: Query parameters.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SpanQueryRequest'\n        required: true\n      responses:\n        '200':\n          description: Query execution result.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpanQueryResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}:\n    delete:\n      tags:\n        - spanAnalytics\n      summary: Cancel a span analytics query.\n      description: Cancel a currently processed span search query with the given id.\n      operationId: cancelSpanQuery\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the query to cancel.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n      responses:\n        '204':\n          description: Query canceled successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}/status:\n    get:\n      tags:\n        - spanAnalytics\n      summary: Get a span analytics query status.\n      description: Get a status of a span analytics query with the given id. When the query has been completed, use the [Span Query Result](#operation/getSpanQueryResult) endpoint to get the result of the asynchronous query.\n      operationId: getSpanQueryStatus\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the executed query.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n      responses:\n        '200':\n          description: Details about the given span query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpanQueryStatusResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}/pause:\n    put:\n      tags:\n        - spanAnalytics\n      summary: Pause a span analytics query.\n      description: Pause a currently processed span search query with the given id.\n      operationId: pauseSpanQuery\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the query to pause.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n      responses:\n        '204':\n          description: Query paused successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}/resume:\n    put:\n      tags:\n        - spanAnalytics\n      summary: Resume a span analytics query.\n      description: Resume a previously paused span search query with the given id.\n      operationId: resumeSpanQuery\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the query to resume.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n      responses:\n        '204':\n          description: Query resumed successfully.\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}/rows/{rowId}/spans:\n    get:\n      tags:\n        - spanAnalytics\n      summary: Get results of a span analytics query.\n      description: Get a list of spans matching a query with the specified id. The response is paginated with a default limit of 100 spans per page.\n      operationId: getSpanQueryResult\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the executed query.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n        - name: rowId\n          in: path\n          description: Identifier of the query row.\n          required: true\n          schema:\n            type: string\n            example: A\n        - name: limit\n          in: query\n          description: Limit of the number of spans returned in the response.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            example: 100\n            default: 100\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n            example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI\n      responses:\n        '200':\n          description: Details about the given span query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpanQueryResultSpansResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}/rows/{rowId}/facets:\n    get:\n      tags:\n        - spanAnalytics\n      summary: Get a list of facets of a span analytics query.\n      description: Get a list of facets of a span analytics query with the specified id.\n      operationId: getSpanQueryFacets\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the executed query.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n        - name: rowId\n          in: path\n          description: Identifier of the query row.\n          required: true\n          schema:\n            type: string\n            example: A\n      responses:\n        '200':\n          description: The list of facets from the executed query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpanQueryResultFacetsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/{queryId}/aggregates:\n    get:\n      tags:\n        - spanAnalytics\n      summary: Get span analytics query aggregated results.\n      description: Get span aggregation results for an aggregated span analytics query with the specified id. Only aggregated rows being part of the executed query will have matching results in the response of this endpoint.\n      operationId: getSpanQueryAggregates\n      parameters:\n        - name: queryId\n          in: path\n          description: Identifier of the executed query.\n          required: true\n          schema:\n            type: string\n            example: 195038749d21ad109242c95cbbc8709d\n      responses:\n        '200':\n          description: The aggregation result of the executed query.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpanQueryAggregateResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/fields:\n    get:\n      tags:\n        - spanAnalytics\n      summary: Get filter fields for span analytics queries.\n      description: Get a list of available fields which can be used in span analytics queries.\n      operationId: getSpanQueryFields\n      parameters: []\n      responses:\n        '200':\n          description: List of available fields.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SpanQueryFieldsResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/spanquery/fields/{field}/values:\n    get:\n      tags:\n        - spanAnalytics\n      summary: Get span analytics query filter field values.\n      description: Get a list of available values for the given span analytics query filter field. Not all fields support value listing. The response is paginated with a default limit of 10 field values per page.\n      operationId: getSpanQueryFieldValues\n      parameters:\n        - name: field\n          in: path\n          description: Field identifier.\n          required: true\n          schema:\n            type: string\n        - name: query\n          in: query\n          description: Search filter to apply on the values to be returned. Only values containing the search query term will be returned.\n          required: false\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: The maximum number of results to fetch.\n          required: false\n          schema:\n            maximum: 500\n            minimum: 1\n            type: integer\n            format: int32\n            default: 10\n        - name: token\n          in: query\n          description: Continuation token to get the next page of results. A page object with the next continuation token is returned in the response body. Subsequent GET requests should specify the continuation token to get the next page of results. `token` is set to null when no more pages are left.\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: List of available filter values for the given field.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceFieldValuesResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /v1/tracing/serviceMap:\n    get:\n      tags:\n        - serviceMap\n      summary: Get a service map.\n      description: Run a search request to get a map of services and connections between them.\n      operationId: getServiceMap\n      parameters: []\n      responses:\n        '200':\n          description: List of nodes and list of edges.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceMapResponse'\n        default:\n          description: Operation failed with an error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    AsyncTraceQueryRequest:\n      required:\n        - queryRows\n        - timeRange\n      type: object\n      properties:\n        queryRows:\n          type: array\n          description: A list of trace queries.\n          items:\n            $ref: '#/components/schemas/AsyncTraceQueryRow'\n        timeRange:\n          $ref: '#/components/schemas/ResolvableTimeRange'\n    CreateTraceQueryResponse:\n      required:\n        - queryId\n      type: object\n      properties:\n        queryId:\n          type: string\n          description: Id of the created query\n          example: cafaebf2f4f8320f\n    ErrorResponse:\n      required:\n        - errors\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: An identifier for the error; this is unique to the specific API request.\n          example: IUUQI-DGH5I-TJ045\n        errors:\n          type: array\n          description: A list of one or more causes of the error.\n          example:\n            - code: auth:password_too_short\n              message: Your password was too short.\n            - code: auth:password_character_classes\n              message: Your password did not contain any non-alphanumeric characters\n          items:\n            $ref: '#/components/schemas/ErrorDescription'\n    AsyncTraceQueryRow:\n      required:\n        - query\n        - rowId\n      type: object\n      properties:\n        query:\n          $ref: '#/components/schemas/TraceQueryExpression'\n        rowId:\n          maxLength: 16\n          type: string\n          description: An identifier used to reference this particular row of the query request while fetching a query result. Within a query, row ids must have distinct values.\n          example: '#A'\n        orderBy:\n          $ref: '#/components/schemas/OrderBy'\n    ResolvableTimeRange:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: Type of the time range. Value must be either `CompleteLiteralTimeRange` or `BeginBoundedTimeRange`.\n      example:\n        type: BeginBoundedTimeRange\n        from:\n          type: RelativeTimeRangeBoundary\n          relativeTime: '-15m'\n      discriminator:\n        propertyName: type\n    ErrorDescription:\n      required:\n        - code\n        - message\n      type: object\n      properties:\n        code:\n          type: string\n          description: An error code describing the type of error.\n          example: auth:password_too_short\n        message:\n          type: string\n          description: A short English-language description of the error.\n          example: Your password was too short.\n        detail:\n          type: string\n          description: An optional fuller English-language description of the error.\n          example: Your password was 5 characters long, the minimum length is 12 characters. See http://example.com/password for more information.\n        meta:\n          type: object\n          description: An optional list of metadata about the error.\n          example:\n            minLength: 12\n            actualLength: 5\n    TraceQueryExpression:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: Expression type of the object model.\n      description: Base query expression object.\n      discriminator:\n        propertyName: type\n    OrderBy:\n      required:\n        - fieldName\n        - order\n      type: object\n      properties:\n        fieldName:\n          maxLength: 32\n          minLength: 1\n          type: string\n          description: 'Field based on which results should be sorted. When not provided, the default behavior is to sort by timestamp descending. Sortable fields values: `trace_id`, `start_timestamp`, `duration`, `spans_number`, `errors`, `status_code`.'\n          example: start_timestamp\n        order:\n          pattern: ^(Asc|Desc)$\n          type: string\n          description: Type of sorting values - descending or ascending.\n          example: Asc\n          default: Desc\n          x-pattern-message: should be either 'Asc' or 'Desc'\n    TraceQueryStatusResponse:\n      required:\n        - queryRows\n        - status\n      type: object\n      properties:\n        queryRows:\n          type: array\n          description: A list of trace queries.\n          items:\n            $ref: '#/components/schemas/TraceQueryRowStatus'\n        status:\n          pattern: ^(Processing|Finished|Error|Canceled)$\n          type: string\n          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.'\n          example: Processing\n          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Canceled`.\n    TraceQueryRowStatus:\n      required:\n        - count\n        - rowId\n        - status\n      type: object\n      properties:\n        rowId:\n          type: string\n          description: A unique identifier of the query.\n          example: A\n        status:\n          pattern: ^(Processing|Finished|Error|Canceled)$\n          type: string\n          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Canceled`.'\n          example: Processing\n          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Canceled`.\n        statusMessage:\n          type: string\n          description: Descriptive message of the status\n          example: Finished successfully\n        count:\n          minimum: 0\n          type: integer\n          description: Number of results matching the query\n          format: int64\n          example: 3215\n    TraceQueryResultResponse:\n      required:\n        - results\n      type: object\n      properties:\n        results:\n          type: array\n          description: List of traces matching the query.\n          items:\n            $ref: '#/components/schemas/TraceDetail'\n        next:\n          type: string\n          description: Next continuation token.\n          example: '10001'\n    TraceDetail:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n          description: Trace identifier.\n          example: 00000000000120CB\n        rootService:\n          type: string\n          description: 'Root service which started the trace. Examples: `user-service`, `authentication-service`, `payment-service`, `/shopping-cart`'\n          example: user-service\n        rootResource:\n          type: string\n          description: 'Root resource on which the trace was started. Examples: `db.query`, `http.request`, `rpc.call`, `container`'\n          example: http.request\n        rootStatus:\n          $ref: '#/components/schemas/TraceSpanStatus'\n        rootOperationName:\n          type: string\n          description: The name of the operation given to the root span.\n          example: retrieveAccount\n        metrics:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/DoubleTracingValue'\n          description: Calculated trace metrics.\n          example:\n            _duration: 143984411\n        startedAt:\n          type: string\n          description: Date and time the trace was started in [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.\n          format: date-time\n          example: '2019-11-22T09:00:00Z'\n        criticalPathServiceBreakdownSummary:\n          $ref: '#/components/schemas/CriticalPathServiceBreakdownSummary'\n    TraceSpanStatus:\n      required:\n        - code\n      type: object\n      properties:\n        code:\n          type: string\n          description: 'Status code of the span. Possible values: `OK`, `ERROR`, `UNKNOWN`.'\n          example: OK\n        message:\n          type: string\n          description: Optional descriptive message about the status, could be an http status code or the kind of an error, e.g. OSError.\n          example: '404'\n    DoubleTracingValue:\n      allOf:\n        - $ref: '#/components/schemas/TracingValue'\n        - required:\n            - value\n          type: object\n          properties:\n            value:\n              type: number\n              format: double\n    CriticalPathServiceBreakdownSummary:\n      required:\n        - elements\n        - idleTime\n        - otherServicesDuration\n      type: object\n      properties:\n        elements:\n          type: array\n          description: List of the elements representing the critical path service duration breakdown - contains the first few services with the longest overall duration of the spans contributing to the critical path.\n          items:\n            $ref: '#/components/schemas/CriticalPathServiceBreakdownElementBase'\n        otherServicesDuration:\n          type: integer\n          description: Overall processing time in nanoseconds consumed by the rest of the spans in the critical path (a sum of the duration times of the spans' critical path segments).\n          format: int64\n          example: 12957153\n        idleTime:\n          type: integer\n          description: Overall time in nanoseconds when no particular operation was in progress.\n          format: int64\n          example: 60000000\n    TracingValue:\n      required:\n        - type\n      properties:\n        type:\n          type: string\n          description: Type of the value model.\n      discriminator:\n        propertyName: type\n    CriticalPathServiceBreakdownElementBase:\n      required:\n        - duration\n      type: object\n      properties:\n        service:\n          type: string\n          description: The name of the service.\n          example: user-service\n        serviceColor:\n          type: string\n          description: Color hex code assigned to the service.\n          example: '#fa41c6'\n        duration:\n          type: integer\n          description: Overall processing time in nanoseconds consumed by the spans belonging to this service in the critical path (a sum of the duration times of the spans' critical path segments).\n          format: int64\n          example: 12957153\n    TraceMetricsResponse:\n      required:\n        - metrics\n      type: object\n      properties:\n        metrics:\n          type: array\n          description: List of trace metrics.\n          items:\n            $ref: '#/components/schemas/TraceMetricDetail'\n    TraceMetricDetail:\n      required:\n        - metric\n        - type\n      type: object\n      properties:\n        metric:\n          type: string\n          description: Trace metric name. In trace queries it can be used in `MetricTracingFilter.metric`.\n          example: _duration\n        description:\n          type: string\n          description: Short description of the metric.\n          example: The duration of a trace in nanoseconds.\n        type:\n          type: string\n          description: 'The type the values of this field will have. Possible values: `DoubleTracingValue`, `IntegerTracingValue`.'\n          example: IntegerTracingValue\n    TraceFieldsResponse:\n      required:\n        - fields\n      type: object\n      properties:\n        fields:\n          type: array\n          description: List of filter fields.\n          items:\n            $ref: '#/components/schemas/TraceFieldDetail'\n    TraceFieldDetail:\n      required:\n        - field\n        - fieldType\n        - type\n      type: object\n      properties:\n        field:\n          type: string\n          description: Filter field name.\n          example: operation\n        fieldType:\n          pattern: ^(TraceField|SpanEventField)$\n          type: string\n          description: 'Indicates the kind of a field. Possible values: `TraceField`, `SpanEventField`.'\n          example: SpanEventField\n          default: TraceField\n          x-pattern-message: 'Should be one of: `TraceField`, `SpanEventField`.'\n        valueListing:\n          type: boolean\n          description: Indicates whether values for this field can be listed.\n          example: false\n        description:\n          type: string\n          description: Short description of the field.\n          example: A piece of the workflow represented by a span\n        type:\n          type: string\n          description: 'The type the values of this field will have. Possible values: `DoubleTracingValue`, `IntegerTracingValue`, `StringTracingValue`, `DateTimeTracingValue`.'\n          example: StringTracingValue\n        noValuesReason:\n          $ref: '#/components/schemas/NoTraceFieldValuesReason'\n    NoTraceFieldValuesReason:\n      required:\n        - code\n        - message\n      type: object\n      properties:\n        code:\n          pattern: ^(HighCardinalityField|AutocompleteDisabled)$\n          type: string\n          description: 'A code uniquely identifying the reason for the lack of trace field values. Possible values: `HighCardinalityField`, `AutocompleteDisabled`.'\n          example: HighCardinalityField\n          x-pattern-message: Should be either `HighCardinalityField`, `AutocompleteDisabled`.\n        message:\n          type: string\n          description: A short English-language description of the reason.\n          example: Autocomplete has been disabled for this field due to high cardinality.\n    TraceFieldValuesResponse:\n      required:\n        - fieldValues\n        - totalCount\n      type: object\n      properties:\n        fieldValues:\n          type: array\n          description: List of filter field values.\n          items:\n            type: string\n        totalCount:\n          type: integer\n          description: Total number of values for a field matching the query. Can be approximated when it's above 3000.\n          format: int64\n          example: 1234\n        next:\n          type: string\n          description: Next continuation token.\n          example: Mi93V0ZqTTBzaW89\n    TraceExistsResponse:\n      required:\n        - exists\n      type: object\n      properties:\n        exists:\n          type: boolean\n          description: Indicates whether the trace with the given trace id exists.\n          example: true\n        url:\n          type: string\n          description: A path to the trace view page in Sumo Logic UI.\n          example: '#/trace/00000000000120CB'\n    TraceSpansResponse:\n      required:\n        - spans\n        - totalCount\n      type: object\n      properties:\n        spanPage:\n          type: array\n          description: List of trace spans.\n          items:\n            $ref: '#/components/schemas/TraceSpan'\n        totalCount:\n          type: integer\n          description: Total count of spans for this trace.\n          format: int64\n          example: 1234\n        next:\n          type: string\n          description: Next continuation token.\n          example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI\n    TraceSpan:\n      required:\n        - duration\n        - id\n        - operationName\n        - startedAt\n        - status\n      type: object\n      properties:\n        id:\n          type: string\n          description: Identifier of the span.\n          example: 00000000002317A9\n        parentId:\n          type: string\n          description: Identifier of the parent span, if any. If the span has no parent it's considered a root span.\n          example: 000000000003C7BE\n        operationName:\n          type: string\n          description: The name of the operation given to the span.\n          example: retrieveAccount\n        resource:\n          type: string\n          description: The name of the resource attached to the span.\n          example: http.request\n        service:\n          type: string\n          description: The name of the service this span is part of.\n          example: user-service\n        serviceColor:\n          type: string\n          description: Color hex code assigned to the service.\n          example: '#fa41c6'\n        serviceType:\n          $ref: '#/components/schemas/ServiceType'\n        duration:\n          type: integer\n          description: Number of nanoseconds the span lasted.\n          format: int64\n          example: 212957153\n        startedAt:\n          type: string\n          description: Date and time the span was started in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.\n          format: date-time\n          example: '2019-11-22T09:00:00Z'\n        status:\n          $ref: '#/components/schemas/TraceSpanStatus'\n        kind:\n          pattern: ^(CLIENT|SERVER|PRODUCER|CONSUMER|INTERNAL)$\n          type: string\n          description: 'Span kind describes the relationship between the Span, its parents, and its children in a Trace. Possible values: `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER`, `INTERNAL`.'\n          example: SERVER\n          x-pattern-message: Should be either `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER` or `INTERNAL`.\n        remoteService:\n          type: string\n          description: Name of the possible remote span's service.\n          example: external-service\n        remoteServiceColor:\n          type: string\n          description: Color hex code assigned to the remote service.\n          example: '#fa41c6'\n        remoteServiceType:\n          $ref: '#/components/schemas/ServiceType'\n        info:\n          $ref: '#/components/schemas/TraceSpanInfo'\n        numberOfLinks:\n          type: integer\n          description: Number of span links in this span.\n          format: int32\n          example: 2\n    ServiceType:\n      pattern: ^(Db|HTTP|MQ|Web|Mixed|Unknown|Cpp|DotNET|Erlang|Go|Java|NodeJS|Php|Python|Ruby|WebJS|Swift|MSSQL|MySQL|Oracle|Db2|PostgreSQL|Redshift|Hive|Cloudscape|HSQLDB|Progress|MaxDB|HANADB|Ingres|FirstSQL|EnterpriseDB|Cache|Adabas|Firebird|ApacheDerby|FileMaker|Informix|InstantDB|InterBase|MariaDB|Netezza|PervasivePSQL|PointBase|SQLite|Sybase|Teradata|Vertica|H2|ColdFusion|Cassandra|HBase|MongoDB|Redis|Couchbase|CouchDB|CosmosDB|DynamoDB|Neo4j|Geode|Elasticsearch|Memcached|CockroachDB)$\n      type: string\n      description: Defines type of service.\n      example: HTTP\n      x-pattern-message: Should be either `Db`, `HTTP`, `MQ`, `Web`, `Mixed`, `Unknown`, `Cpp`, `DotNET`, `Erlang`, `Go`, `Java`, `NodeJS`, `Php`, `Python`, `Ruby`, `WebJS`, `Swift`, `MSSQL`, `MySQL`, `Oracle`, `Db2`, `PostgreSQL`, `Redshift`, `Hive`, `Cloudscape`, `HSQLDB`, `Progress`, `MaxDB`, `HANADB`, `Ingres`, `FirstSQL`, `EnterpriseDB`, `Cache`, `Adabas`, `Firebird`, `ApacheDerby`, `FileMaker`, `Informix`, `InstantDB`, `InterBase`, `MariaDB`, `Netezza`, `PervasivePSQL`, `PointBase`, `SQLite`, `Sybase`, `Teradata`, `Vertica`, `H2`, `ColdFusion`, `Cassandra`, `HBase`, `MongoDB`, `Redis`, `Couchbase`, `CouchDB`, `CosmosDB`, `DynamoDB`, `Neo4j`, `Geode`, `Elasticsearch`, `Memcached` or `CockroachDB`\n    TraceSpanInfo:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: 'Type of this span. Possible values: `TraceHttpSpanInfo`, `TraceDbSpanInfo`, `TraceMessageBusSpanInfo`.'\n          example: TraceHttpSpanInfo\n      discriminator:\n        propertyName: type\n    TraceLightEventsResponse:\n      type: object\n      properties:\n        spanEvents:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/LightSpanEvent'\n          description: Map of span ids to lists of their events, without their attributes.\n        next:\n          type: string\n          description: Next continuation token.\n          example: dlFXd0lhSkxzRjAwYnpVZkMrRmlhYnF4cGtNMWdnVEI\n    LightSpanEvent:\n      required:\n        - name\n        - timestamp\n      type: object\n      properties:\n        timestamp:\n          type: string\n          description: Time when an event happened in the [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.\n          format: date-time\n          example: '2021-04-19T17:36:57.47623Z'\n        name:\n          type: string\n          description: Name of the event.\n          example: domContentLoadedEventStart\n      description: Light version of Span Event, without the attributes.\n    CriticalPathResponse:\n      required:\n        - segments\n      type: object\n      properties:\n        segments:\n          type: array\n          description: List of span segments from the critical path.\n          items:\n            $ref: '#/components/schemas/SpanPathSegment'\n        next:\n          type: string\n          description: Next continuation token.\n          example: Mi93V0ZqTTBzaW89\n    SpanPathSegment:\n      required:\n        - duration\n        - ratio\n        - spanId\n        - startOffset\n      type: object\n      properties:\n        spanId:\n          type: string\n          description: Span identifier.\n          example: 00000000000120CB\n        service:\n          type: string\n          description: The name of the service this span is part of.\n          example: user-service\n        serviceColor:\n          type: string\n          description: Color hex code assigned to the service.\n          example: '#fa41c6'\n        startOffset:\n          type: integer\n          description: Number of nanoseconds from the span startedAt the segment started.\n          format: int64\n          example: 311285715\n        duration:\n          type: integer\n          description: Number of nanoseconds the span segment lasted.\n          format: int64\n          example: 12957153\n        fraction:\n          type: number\n          description: The fraction (value between 0.0 and 1.0) from the trace duration time this segment took.\n          format: double\n          example: 0.4\n    CriticalPathServiceBreakdownResponse:\n      required:\n        - elements\n        - idleTime\n      type: object\n      properties:\n        elements:\n          type: array\n          description: List of elements representing the critical path service breakdown.\n          items:\n            $ref: '#/components/schemas/CriticalPathServiceBreakdownElementDetail'\n        idleTime:\n          type: integer\n          description: Overall time in nanoseconds when no particular operation was in progress.\n          format: int64\n          example: 60000000\n    CriticalPathServiceBreakdownElementDetail:\n      allOf:\n        - $ref: '#/components/schemas/CriticalPathServiceBreakdownElementBase'\n        - required:\n            - longestSegmentDuration\n            - numSpans\n          type: object\n          properties:\n            numSpans:\n              type: integer\n              description: Number of spans that are part of this service.\n              format: int32\n              example: 12957153\n            longestSegmentDuration:\n              type: integer\n              description: Number of nanoseconds the longest span segment in the critical path lasted.\n              format: int64\n              example: 12957153\n    TraceSpanDetail:\n      allOf:\n        - $ref: '#/components/schemas/TraceSpan'\n        - type: object\n          properties:\n            errorMessage:\n              type: string\n              description: Produced error message (could be a stack trace, database error code, ..)\n              example: |\n                Exception in thread \"local[9]\" java.lang.OutOfMemoryError: Java heap space\n                    at my.app.force.fields.SpaceShipForceField.main(SpaceShipForceField.java:17)\n            fields:\n              type: object\n              additionalProperties:\n                $ref: '#/components/schemas/TracingValue'\n              description: Fields attached to this span.\n              example:\n                component:\n                  type: StringTracingValue\n                  value: http\n                http.method:\n                  type: StringTracingValue\n                  value: GET\n                http.url:\n                  type: StringTracingValue\n                  value: /v1/users/123\n                http.status_code:\n                  type: StringTracingValue\n                  value: '200'\n            criticalPathContribution:\n              $ref: '#/components/schemas/TraceSpanCriticalPathContribution'\n            logs:\n              type: array\n              description: Logs attached to this span.\n              example:\n                - '[19/Dec/2019:10:58:21 +0000] ''GET /v1/users/123 HTTP/1.1'' 200 8215 ''http://111.111.11.1/'' ''Mozilla/5.0 (Macintosh; Intel Mac OS X 11_11_1) AppleWebKit/111.11 (KHTML, like Gecko) Chrome/11.1.1111.11 Safari/111.11'''\n                - '[19/Dec/2019:10:58:24 +0000] ''GET /logo.png HTTP/1.1'' 404 555 ''http://111.111.11.1/'' ''Mozilla/5.0 (Macintosh; Intel Mac OS X 11_11_1) AppleWebKit/111.11 (KHTML, like Gecko) Chrome/11.1.1111.11 Safari/111.11'''\n              items:\n                type: string\n            events:\n              type: array\n              description: Events attached to this span.\n              items:\n                $ref: '#/components/schemas/SpanEvent'\n            links:\n              type: array\n              description: List of casually related spans.\n              items:\n                $ref: '#/components/schemas/SpanLink'\n    TraceSpanCriticalPathContribution:\n      required:\n        - duration\n        - fraction\n      type: object\n      properties:\n        duration:\n          type: integer\n          description: Overall processing time in nanoseconds consumed by this span in the critical path of its trace (a sum of the duration times of this span's critical path segments).\n          format: int64\n          example: 12957153\n        fraction:\n          type: number\n          description: The total fraction (value between 0.0 and 1.0) of the trace duration time consumed by this span in the critical path of its trace.\n          format: double\n          example: 0.4\n    SpanEvent:\n      description: Span event containing all information (in particular attributes).\n      allOf:\n        - $ref: '#/components/schemas/LightSpanEvent'\n        - type: object\n          properties:\n            attributes:\n              type: array\n              description: Span event attributes.\n              items:\n                $ref: '#/components/schemas/SpanEventAttribute'\n    SpanLink:\n      required:\n        - spanId\n        - traceId\n      type: object\n      properties:\n        traceId:\n          type: string\n          description: Trace identifier of the linked span.\n          example: 00000000002317A9\n        spanId:\n          type: string\n          description: Span identifier of the linked span.\n          example: 000000000003C7BE\n      description: Details of the linked span.\n    SpanEventAttribute:\n      type: object\n      properties:\n        attributeName:\n          type: string\n          description: Name of the attribute.\n          example: message_details\n        attributeValue:\n          $ref: '#/components/schemas/EventAttributeValue'\n    EventAttributeValue:\n      required:\n        - type\n      properties:\n        type:\n          pattern: ^(BooleanEventAttributeValue|StringEventAttributeValue|DoubleEventAttributeValue|IntegerEventAttributeValue|BooleanArrayEventAttributeValue|StringArrayEventAttributeValue|DoubleArrayEventAttributeValue|IntegerArrayEventAttributeValue)$\n          type: string\n          description: Type of the event attribute value.\n          example: BooleanAttributeValue\n      discriminator:\n        propertyName: type\n    TraceSpanBillingInfo:\n      required:\n        - billedBytes\n        - billedFormat\n      type: object\n      properties:\n        billedBytes:\n          type: integer\n          description: Number of bytes that were charged for the span.\n          example: 502\n        billedFormat:\n          type: string\n          description: Billing format of the span. Number of bytes of this representation of the span is equal to `billedBytes`.\n          example: traceId=2ff9c457b1aa00f4;spanId=97872e33215c4275;parentSpanId=98bcdfc5da874c40;operation=spanId-97872e33215c4275;startTimestamp=1603283111874000000;endTimestamp=1603283112268000000;service=ServiceA;status.code=ERROR;status.message=ERROR;kind=SERVER;custom-tag-2=value2;_sourcehost=127.0.0.1;http.url=/api/operation-x;message=Some error message;_sourcecategory=Http Input;custom-tag-1=value1;error=true;_sourcename=Http Input;error.kind=InvalidInput;_collector=trace-generator-collector;http.method=GET;\n    SpanQueryRequest:\n      required:\n        - queryRows\n        - timeRange\n      type: object\n      properties:\n        queryRows:\n          type: array\n          description: A list of span analytics queries.\n          items:\n            $ref: '#/components/schemas/SpanQueryRow'\n        timeRange:\n          $ref: '#/components/schemas/ResolvableTimeRange'\n        timeZone:\n          type: string\n          description: Time zone for the query time ranges. Follow the format in the [IANA Time Zone Database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List).\n          example: America/Los_Angeles\n          default: UTC\n    SpanQueryResponse:\n      required:\n        - queryId\n        - queryRows\n      type: object\n      properties:\n        queryId:\n          type: string\n          description: Id of the created query\n        queryRows:\n          type: array\n          description: A list of row responses with details about individual queries.\n          items:\n            $ref: '#/components/schemas/SpanQueryRowResponse'\n        hasErrors:\n          type: boolean\n          description: Indicates whether there was an error while executing the query.\n          example: true\n          default: false\n        timeRange:\n          $ref: '#/components/schemas/BeginBoundedTimeRange'\n    SpanQueryRow:\n      required:\n        - queryString\n        - rowId\n      type: object\n      properties:\n        queryString:\n          type: string\n          description: Query string using the log search syntax.\n        rowId:\n          pattern: ^[a-zA-Z0-9_]*$\n          type: string\n          description: An identifier used to reference this particular row of the query request. Within a query, row ids must have distinct values.\n          example: A\n    SpanQueryRowResponse:\n      required:\n        - isAggregation\n        - rowId\n      type: object\n      properties:\n        rowId:\n          type: string\n          description: A unique identifier of the query.\n          example: A\n        errors:\n          type: array\n          description: List of errors which occured when executing the query\n          items:\n            $ref: '#/components/schemas/SpanQueryRowError'\n        isAggregation:\n          type: boolean\n          description: Indicates whether this query is an aggregation\n          example: true\n          default: false\n        executedQuery:\n          type: string\n          description: The executed query after rewriting\n          example: _index=_trace_spans traceId=00000000002317A9\n    BeginBoundedTimeRange:\n      allOf:\n        - $ref: '#/components/schemas/ResolvableTimeRange'\n        - required:\n            - from\n          type: object\n          properties:\n            from:\n              $ref: '#/components/schemas/TimeRangeBoundary'\n            to:\n              $ref: '#/components/schemas/TimeRangeBoundary'\n    SpanQueryRowError:\n      required:\n        - code\n        - message\n      type: object\n      properties:\n        code:\n          type: string\n          description: The error code.\n          example: spanquery:query_validation_error\n        message:\n          type: string\n          description: Short description of the occured error.\n          example: Query A was invalid\n        details:\n          type: string\n          description: Details about the occured error.\n          example: '[1.78] failure: ''('' expected but '')'' found.'\n    TimeRangeBoundary:\n      required:\n        - type\n      type: object\n      properties:\n        type:\n          type: string\n          description: 'Type of the time range boundary. Value must be from list: - `RelativeTimeRangeBoundary`, - `EpochTimeRangeBoundary`, - `Iso8601TimeRangeBoundary`, - `LiteralTimeRangeBoundary`.'\n          example: RelativeTimeRangeBoundary\n      discriminator:\n        propertyName: type\n    SpanQueryStatusResponse:\n      required:\n        - queryRows\n        - status\n      type: object\n      properties:\n        queryRows:\n          type: array\n          description: A list of span analytics queries.\n          items:\n            $ref: '#/components/schemas/SpanQueryRowStatus'\n        status:\n          pattern: ^(Processing|Finished|Error|Paused)$\n          type: string\n          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Paused`'\n          example: Processing\n          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Paused`.\n    SpanQueryRowStatus:\n      required:\n        - count\n        - rowId\n        - status\n      type: object\n      properties:\n        rowId:\n          type: string\n          description: A unique identifier of the query.\n          example: A\n        status:\n          pattern: ^(Processing|Finished|Error|Paused)$\n          type: string\n          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Paused`.'\n          example: Processing\n          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Paused`.\n        statusMessage:\n          type: string\n          description: Descriptive message of the status.\n          example: Finished successfully\n        count:\n          minimum: 0\n          type: integer\n          description: Number of results matching the query\n          format: int64\n          example: 3215\n        approximatedFieldCounts:\n          type: boolean\n          description: Indicates whether facet field cardinality counts are approximated or not.\n          example: false\n        facetsCompleted:\n          type: boolean\n          description: Indicates whether facets calculation has completed.\n          example: false\n    SpanQueryResultSpansResponse:\n      required:\n        - spanPage\n      type: object\n      properties:\n        spanPage:\n          type: array\n          description: List of trace spans.\n          items:\n            $ref: '#/components/schemas/SpanQuerySpanData'\n        next:\n          type: string\n          description: Next continuation token.\n          example: Mi93V0ZqTTBzaW89\n    SpanQuerySpanData:\n      required:\n        - duration\n        - startedAt\n      type: object\n      properties:\n        spanId:\n          type: string\n          description: Identifier of the span.\n          example: 00000000002317A9\n        traceId:\n          type: string\n          description: Identifier of the trace.\n          example: 1BB004A0005213C2\n        parentSpanId:\n          type: string\n          description: Identifier of the parent span, if any. If the span has no parent it's considered a root span.\n          example: 000000000003C7BE\n        operationName:\n          type: string\n          description: The name of the operation given to the span.\n          example: retrieveAccount\n        service:\n          type: string\n          description: The name of the service this span is part of.\n          example: user-service\n        remoteService:\n          type: string\n          description: Name of the possible remote span's service.\n          example: external-service\n        duration:\n          type: integer\n          description: Number of nanoseconds the span lasted.\n          format: int64\n          example: 212957153\n        startedAt:\n          type: string\n          description: Date and time the span was started in [ISO 8601 / RFC3339](https://tools.ietf.org/html/rfc3339) format.\n          format: date-time\n          example: '2019-11-22T09:00:00Z'\n        status:\n          $ref: '#/components/schemas/TraceSpanStatus'\n        kind:\n          pattern: ^(CLIENT|SERVER|PRODUCER|CONSUMER|INTERNAL)$\n          type: string\n          description: 'Span kind describes the relationship between the Span, its parents, and its children in a Trace. Possible values: `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER`, `INTERNAL`.'\n          example: SERVER\n          x-pattern-message: Should be either `CLIENT`, `SERVER`, `PRODUCER`, `CONSUMER` or `INTERNAL`.\n        tagsJSON:\n          type: string\n          description: Tags attached to this span as JSON.\n          example: |-\n            {\n              \u0026quot;http.host\u0026quot;:\u0026quot;http://example.com\u0026quot;,\n              \u0026quot;http.method\u0026quot;:\u0026quot;GET\u0026quot;\n            }\n        metadata:\n          type: object\n          additionalProperties:\n            type: string\n          description: Metadata attached to the span.\n          example:\n            _sourceCategory: account-backend\n    SpanQueryResultFacetsResponse:\n      required:\n        - facets\n      type: object\n      properties:\n        facets:\n          type: array\n          description: List of facets.\n          items:\n            $ref: '#/components/schemas/SpanQueryRowFacet'\n    SpanQueryRowFacet:\n      required:\n        - cardinality\n        - dataType\n        - name\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the field facet.\n          example: _sourceHost\n        cardinality:\n          type: integer\n          description: The number of unique values this field occured.\n          format: int32\n          example: 3\n        dataType:\n          pattern: ^(String|Int|Long|Double|Boolean)$\n          type: string\n          description: Data type of the field.\n          example: String\n          x-pattern-message: Should be either `String`, `Int`, `Long`, `Double` or `Boolean`.\n        inSchema:\n          type: boolean\n          description: Indicates whether the field is available in the span schema.\n          example: false\n        valueFrequency:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int64\n          description: Map of field value frequencies.\n          example:\n            _sourceHost: 34099\n    SpanQueryAggregateResponse:\n      required:\n        - result\n      type: object\n      properties:\n        result:\n          $ref: '#/components/schemas/SpanQueryAggregateResult'\n    SpanQueryAggregateResult:\n      required:\n        - series\n        - status\n      type: object\n      properties:\n        status:\n          pattern: ^(Processing|Finished|Error|Paused)$\n          type: string\n          description: 'Status of the query. Possible values: `Processing`, `Finished`, `Error`, `Paused`.'\n          example: Processing\n          x-pattern-message: Should be either `Processing`, `Finished`, `Error`, `Paused`.\n        statusMessage:\n          type: string\n          description: Descriptive message of the status\n          example: Finished successfully\n        series:\n          type: array\n          description: The series returned from a search.\n          items:\n            $ref: '#/components/schemas/SpanQueryAggregateDataSeries'\n    SpanQueryAggregateDataSeries:\n      required:\n        - dataPoints\n        - name\n        - queryId\n      type: object\n      properties:\n        queryId:\n          type: string\n          description: The id of the query.\n          example: A\n        name:\n          type: string\n          description: |\n            The meaning of 'name' depends on the series type.\n              - For results of type 'timeseries', it is the value of the x axis 'field' key.\n              - For results of type 'nontimeseries', it is the name of one of the fields that is not part of 'xAxisKeys'.\n              - For results of type 'table', it is the comma-separated string of names of all fields.\n          example: max(Disk_Used)\n        dataPoints:\n          type: array\n          description: A list of data points in the series.\n          items:\n            $ref: '#/components/schemas/SpanQueryAggregatePointData'\n        aggregateInfo:\n          $ref: '#/components/schemas/SpanQueryAggregateAggregateData'\n        metaData:\n          $ref: '#/components/schemas/SpanQueryAggregateMetaData'\n        seriesType:\n          pattern: ^(TIMESERIES|NONTIMESERIES|TABLE)$\n          type: string\n          description: Type of the visual series.\n          example: TIMESERIES\n          x-pattern-message: Should be either `TIMESERIES`, `NONTIMESERIES`, `TABLE`.\n        xAxisKeys:\n          type: array\n          description: Keys that will be plotted as a point on the x axis.\n          example:\n            - _sourceCategory\n            - _sourceHost\n          items:\n            type: string\n        valueType:\n          pattern: ^(STRING|DOUBLE)$\n          type: string\n          description: Type of the values in the series.\n          example: DOUBLE\n          x-pattern-message: Should be either `STRING`, `DOUBLE`.\n    SpanQueryAggregatePointData:\n      required:\n        - 'y'\n      type: object\n      properties:\n        x:\n          type: number\n          description: Value that represents a point on the x axis.\n          format: double\n          example: 1\n        'y':\n          type: string\n          description: Value that represents a point on the y axis.\n          example: '12.3'\n        xAxisValues:\n          type: object\n          additionalProperties:\n            type: string\n          description: Values that represents a point on the x axis.\n          example:\n            operation: /get/accounts\n            service: accountService\n          default: {}\n    SpanQueryAggregateAggregateData:\n      required:\n        - avg\n        - latest\n        - max\n        - min\n        - sum\n      type: object\n      properties:\n        max:\n          type: number\n          description: The maximum value in the series.\n          format: double\n          example: 10\n        min:\n          type: number\n          description: The minimum value in the series.\n          format: double\n          example: 1.2\n        avg:\n          type: number\n          description: The average value in the series.\n          format: double\n          example: 5.6\n        sum:\n          type: number\n          description: The sum of all the values in the series.\n          format: double\n          example: 123.4\n        latest:\n          type: number\n          description: The last value in the series.\n          format: double\n          example: 23.4\n        count:\n          type: number\n          description: The number of values in the series.\n          format: double\n          example: 600\n    SpanQueryAggregateMetaData:\n      required:\n        - data\n      type: object\n      properties:\n        data:\n          type: object\n          additionalProperties:\n            type: string\n          description: The value of the metadata.\n          example:\n            deployment: dev\n            cluster: frontend\n            instance: frontend-12\n          default: {}\n    SpanQueryFieldsResponse:\n      required:\n        - fields\n      type: object\n      properties:\n        fields:\n          type: array\n          description: List of span fields.\n          items:\n            $ref: '#/components/schemas/SpanQueryFieldDetail'\n    SpanQueryFieldDetail:\n      allOf:\n        - $ref: '#/components/schemas/TraceFieldDetail'\n        - required:\n            - inSchema\n          type: object\n          properties:\n            inSchema:\n              type: boolean\n              description: Indicates whether the field is available in the schema.\n              example: false\n    ServiceMapResponse:\n      required:\n        - edges\n        - nodes\n      type: object\n      properties:\n        nodes:\n          type: array\n          description: List of service map nodes.\n          items:\n            $ref: '#/components/schemas/ServiceMapNode'\n        edges:\n          type: array\n          description: List of service map edges.\n          items:\n            $ref: '#/components/schemas/ServiceMapEdge'\n    ServiceMapNode:\n      required:\n        - isRemote\n        - lastSeenAt\n        - serviceName\n        - serviceType\n      type: object\n      properties:\n        serviceName:\n          type: string\n          description: Name of a service in a service map.\n          example: service_name_1\n        serviceColor:\n          type: string\n          description: Color hex code assigned to the service.\n          example: '#fa41c6'\n        lastSeenAt:\n          type: string\n          description: The last time in UTC a service has been seen. Formatted as defined by date-time - RFC3339.\n          format: date-time\n          example: '2019-11-22T09:00:00Z'\n        isRemote:\n          type: boolean\n          description: Indicates whether node comes from inferred remote service or instrumented one.\n          example: true\n        serviceType:\n          $ref: '#/components/schemas/ServiceType'\n    ServiceMapEdge:\n      required:\n        - lastSeenAt\n        - source\n        - target\n      type: object\n      properties:\n        source:\n          type: string\n          description: Name of a source service. Edge is directed from source to target.\n          example: service_name_1\n        target:\n          type: string\n          description: Name of a target service. Edge is directed from source to target.\n          example: service_name_2\n        lastSeenAt:\n          type: string\n          description: The last time in UTC an edge has been seen. Formatted as defined by date-time - RFC3339.\n          format: date-time\n          example: '2019-11-22T09:00:00Z'\n  parameters: {}\n  responses: {}\n  securitySchemes: {}\n  callbacks: {}\n  examples: {}\n  requestBodies: {}\n  headers: {}\n  links: {}\n  x-stackQL-resources:\n    tracequery:\n      id: sumologic.tracing.tracequery\n      name: tracequery\n      title: Tracequery\n      methods:\n        createTraceQuery:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1tracequery/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        cancelTraceQuery:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1tracequery~1{queryId}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert:\n          - $ref: '#/components/x-stackQL-resources/tracequery/methods/createTraceQuery'\n        update: []\n        delete: []\n    tracequery_status:\n      id: sumologic.tracing.tracequery_status\n      name: tracequery_status\n      title: Tracequery_status\n      methods:\n        getTraceQueryStatus:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1tracequery~1{queryId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/tracequery_status/methods/getTraceQueryStatus'\n        insert: []\n        update: []\n        delete: []\n    tracequery_rows_traces:\n      id: sumologic.tracing.tracequery_rows_traces\n      name: tracequery_rows_traces\n      title: Tracequery_rows_traces\n      methods:\n        getTraceQueryResult:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1tracequery~1{queryId}~1rows~1{rowId}~1traces/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/tracequery_rows_traces/methods/getTraceQueryResult'\n        insert: []\n        update: []\n        delete: []\n    metrics:\n      id: sumologic.tracing.metrics\n      name: metrics\n      title: Metrics\n      methods:\n        getMetrics:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1metrics/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/metrics/methods/getMetrics'\n        insert: []\n        update: []\n        delete: []\n    tracequery_fields:\n      id: sumologic.tracing.tracequery_fields\n      name: tracequery_fields\n      title: Tracequery_fields\n      methods:\n        getTraceQueryFields:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1tracequery~1fields/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/tracequery_fields/methods/getTraceQueryFields'\n        insert: []\n        update: []\n        delete: []\n    tracequery_fields_values:\n      id: sumologic.tracing.tracequery_fields_values\n      name: tracequery_fields_values\n      title: Tracequery_fields_values\n      methods:\n        getTraceQueryFieldValues:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1tracequery~1fields~1{field}~1values/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/tracequery_fields_values/methods/getTraceQueryFieldValues'\n        insert: []\n        update: []\n        delete: []\n    traces:\n      id: sumologic.tracing.traces\n      name: traces\n      title: Traces\n      methods:\n        getTrace:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/traces/methods/getTrace'\n        insert: []\n        update: []\n        delete: []\n    traces_exists:\n      id: sumologic.tracing.traces_exists\n      name: traces_exists\n      title: Traces_exists\n      methods:\n        traceExists:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1exists/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    traces_spans:\n      id: sumologic.tracing.traces_spans\n      name: traces_spans\n      title: Traces_spans\n      methods:\n        getSpans:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1spans/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        getSpan:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1spans~1{spanId}/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/traces_spans/methods/getSpan'\n          - $ref: '#/components/x-stackQL-resources/traces_spans/methods/getSpans'\n        insert: []\n        update: []\n        delete: []\n    traces_trace_events:\n      id: sumologic.tracing.traces_trace_events\n      name: traces_trace_events\n      title: Traces_trace_events\n      methods:\n        getTraceLightEvents:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1traceEvents/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/traces_trace_events/methods/getTraceLightEvents'\n        insert: []\n        update: []\n        delete: []\n    traces_critical_path:\n      id: sumologic.tracing.traces_critical_path\n      name: traces_critical_path\n      title: Traces_critical_path\n      methods:\n        getCriticalPath:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1criticalPath/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/traces_critical_path/methods/getCriticalPath'\n        insert: []\n        update: []\n        delete: []\n    traces_critical_path_breakdown_service:\n      id: sumologic.tracing.traces_critical_path_breakdown_service\n      name: traces_critical_path_breakdown_service\n      title: Traces_critical_path_breakdown_service\n      methods:\n        getCriticalPathServiceBreakdown:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1criticalPath~1breakdown~1service/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/traces_critical_path_breakdown_service/methods/getCriticalPathServiceBreakdown'\n        insert: []\n        update: []\n        delete: []\n    traces_spans_billing_info:\n      id: sumologic.tracing.traces_spans_billing_info\n      name: traces_spans_billing_info\n      title: Traces_spans_billing_info\n      methods:\n        getSpanBillingInfo:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1traces~1{traceId}~1spans~1{spanId}~1billingInfo/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/traces_spans_billing_info/methods/getSpanBillingInfo'\n        insert: []\n        update: []\n        delete: []\n    spanquery:\n      id: sumologic.tracing.spanquery\n      name: spanquery\n      title: Spanquery\n      methods:\n        createSpanQuery:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery/post'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n        cancelSpanQuery:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}/delete'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert:\n          - $ref: '#/components/x-stackQL-resources/spanquery/methods/createSpanQuery'\n        update: []\n        delete: []\n    spanquery_status:\n      id: sumologic.tracing.spanquery_status\n      name: spanquery_status\n      title: Spanquery_status\n      methods:\n        getSpanQueryStatus:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1status/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/spanquery_status/methods/getSpanQueryStatus'\n        insert: []\n        update: []\n        delete: []\n    spanquery_pause:\n      id: sumologic.tracing.spanquery_pause\n      name: spanquery_pause\n      title: Spanquery_pause\n      methods:\n        pauseSpanQuery:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1pause/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    spanquery_resume:\n      id: sumologic.tracing.spanquery_resume\n      name: spanquery_resume\n      title: Spanquery_resume\n      methods:\n        resumeSpanQuery:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1resume/put'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select: []\n        insert: []\n        update: []\n        delete: []\n    spanquery_rows_spans:\n      id: sumologic.tracing.spanquery_rows_spans\n      name: spanquery_rows_spans\n      title: Spanquery_rows_spans\n      methods:\n        getSpanQueryResult:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1rows~1{rowId}~1spans/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/spanquery_rows_spans/methods/getSpanQueryResult'\n        insert: []\n        update: []\n        delete: []\n    spanquery_rows_facets:\n      id: sumologic.tracing.spanquery_rows_facets\n      name: spanquery_rows_facets\n      title: Spanquery_rows_facets\n      methods:\n        getSpanQueryFacets:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1rows~1{rowId}~1facets/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/spanquery_rows_facets/methods/getSpanQueryFacets'\n        insert: []\n        update: []\n        delete: []\n    spanquery_aggregates:\n      id: sumologic.tracing.spanquery_aggregates\n      name: spanquery_aggregates\n      title: Spanquery_aggregates\n      methods:\n        getSpanQueryAggregates:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1{queryId}~1aggregates/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/spanquery_aggregates/methods/getSpanQueryAggregates'\n        insert: []\n        update: []\n        delete: []\n    spanquery_fields:\n      id: sumologic.tracing.spanquery_fields\n      name: spanquery_fields\n      title: Spanquery_fields\n      methods:\n        getSpanQueryFields:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1fields/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/spanquery_fields/methods/getSpanQueryFields'\n        insert: []\n        update: []\n        delete: []\n    spanquery_fields_values:\n      id: sumologic.tracing.spanquery_fields_values\n      name: spanquery_fields_values\n      title: Spanquery_fields_values\n      methods:\n        getSpanQueryFieldValues:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1spanquery~1fields~1{field}~1values/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/spanquery_fields_values/methods/getSpanQueryFieldValues'\n        insert: []\n        update: []\n        delete: []\n    service_map:\n      id: sumologic.tracing.service_map\n      name: service_map\n      title: Service_map\n      methods:\n        getServiceMap:\n          operation:\n            $ref: '#/paths/~1v1~1tracing~1serviceMap/get'\n          response:\n            mediaType: application/json\n            openAPIDocKey: '200'\n      sqlVerbs:\n        select:\n          - $ref: '#/components/x-stackQL-resources/service_map/methods/getServiceMap'\n        insert: []\n        update: []\n        delete: []\nopenapi: 3.0.0\nservers:\n  - url: https://api.{region}.sumologic.com/api\n    variables:\n      region:\n        description: SumoLogic region\n        enum:\n          - us2\n          - au\n          - ca\n          - de\n          - eu\n          - fed\n          - in\n          - jp\n        default: us2\n    description: The SumoLogic regional endpoint\nsecurity:\n  - basicAuth: []\ntags:\n  - name: accountManagement\n    description: |\n      Account Management API.\n\n      Manage the custom subdomain for the URL used to access your Sumo Logic account. For more information see [Manage Organization](https://help.sumologic.com/Manage/01Account_Usage/05Manage_Organization).\n    x-displayName: Account\n  - name: appManagement\n    description: |\n      App installation API.\n\n      View and install Sumo Logic Applications that deliver out-of-the-box dashboards, saved searches, and field extraction for popular data sources. For more information see [Sumo Logic Apps](https://help.sumologic.com/07Sumo-Logic-Apps).\n    x-displayName: Apps (Beta)\n  - name: connectionManagement\n    description: |\n      Connection management API.\n\n      Set up connections to send alerts to other tools. For more information see [Connections and Integrations](https://help.sumologic.com/?cid=1044).\n    x-displayName: Connections\n  - name: contentManagement\n    description: |\n      Content management API.\n\n      You can export, import, delete and copy content in your organization’s Library. For more information see [Library](https://help.sumologic.com/?cid=5173). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n      \u003cbr/\u003e \u003cbr/\u003e\n      ### Example\n      The following example uses API endpoints in the US1 deployment. Sumo Logic has several deployments that are assigned depending on the geographic location and the date an account is created. For details determining your account's deployment see [API endpoints](https://help.sumologic.com/?cid=3011).\n      The [Content Import API](#operation/beginAsyncImport) can be used to create or update a Search, Scheduled Search, or Dashboard. Here is an example creating a Scheduled Search:\n      1. Get the identifier of your `Personal` folder.\n        ```bash\n        curl -X GET -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" https://api.sumologic.com/api/v2/content/folders/personal\n        ```\n\n        Find the identifier of your `Personal` folder in the response.\n        ```json\n        {\n            ...\n            \"id\": \"0000000006A2E86F\", \u003c----\n            \"name\": \"Personal\",\n            \"itemType\": \"Folder\",\n            ...\n        }\n        ```\n\n        You can use [getFolder](#operation/getFolder), [getAdminRecommededFolder](#operation/getAdminRecommendedFolderAsync),\n        or [getGlobalFolder](#operation/getGlobalFolderAsync) endpoints to traverse the content tree and find the identifier of any\n        folder you want to manage.\n\n      2. Use the [Content Import API](#operation/beginAsyncImport) to create a new Scheduled Search inside your\n        `Personal` folder.\n        ```bash\n        curl -X POST -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" -H \"Content-Type: application/json\" -d @search.json https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import\n        ```\n\n        The data file `search.json` in the above command has the following `SavedSearchWithScheduleSyncDefinition` object.\n        ```json\n        // file: search.json\n        {\n            \"type\": \"SavedSearchWithScheduleSyncDefinition\",\n            \"name\": \"demo-scheduled-search\",\n            \"description\": \"Runs every hour with timerange of 15m and sends email notifications\",\n            \"search\": {\n                \"queryText\": \"\\\"error\\\" and \\\"warn\\\"\",\n                \"defaultTimeRange\": \"-15m\",\n                \"byReceiptTime\": false,\n                \"viewName\": \"\",\n                \"viewStartTime\": null,\n                \"queryParameters\": []\n            },\n            \"searchSchedule\": {\n                \"cronExpression\": \"0 0/15 * * * ? *\",\n                \"displayableTimeRange\": \"-15m\",\n                \"parseableTimeRange\": {\n                    \"from\": {\n                        \"relativeTime\": \"-15m\",\n                        \"type\": \"RelativeTimeRangeBoundary\"\n                    },\n                    \"to\": null,\n                    \"type\": \"BeginBoundedTimeRange\"\n                },\n                \"timeZone\": \"America/Los_Angeles\",\n                \"threshold\": null,\n                \"notification\": {\n                    \"taskType\": \"EmailSearchNotificationSyncDefinition\",\n                    \"toList\": [\n                        \"ops@acme.org\"\n                    ],\n                    \"subjectTemplate\": \"Search Results: {{SearchName}}\",\n                    \"includeQuery\": true,\n                    \"includeResultSet\": true,\n                    \"includeHistogram\": true,\n                    \"includeCsvAttachment\": false\n                },\n                \"muteErrorEmails\": false,\n                \"scheduleType\": \"1Hour\",\n                \"parameters\": []\n            }\n        }\n        ```\n\n        The response of above request will have the job identifier that you can use to track the status of the import job.\n        ```json\n        {\n            \"id\": \"74DC17FA765C7443\"\n        }\n        ```\n\n      3. Use the job identifier from the import request to get the [status](#operation/getAsyncImportStatus) of the\n        import job.\n        ```bash\n        curl -X GET -u \"\u003caccessId\u003e:\u003caccessKey\u003e\" https://api.sumologic.com/api/v2/content/folders/0000000006A2E86F/import/74DC17FA765C7443/status\n        ```\n\n        If you are importing a large item, you might have to wait for the import job to finish. The following is an\n        example response from a completed job.\n        ```json\n        {\n            \"status\": \"Success\",\n            \"statusMessage\": null,\n            \"error\": null\n        }\n        ```\n    x-displayName: Content\n  - name: contentPermissions\n    description: |\n      Content permissions API.\n\n      You can share your folders, searches, and dashboards with specific users or roles. For more information see [Share Content](https://help.sumologic.com/?cid=8675309). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n    x-displayName: Permissions\n  - name: dashboardManagement\n    description: |\n      Dashboard (New) management API.\n\n      Dashboard (New) allows you to analyze metric and log data on the same dashboard, in a seamless view. This gives you control over the visual display of metric and log data. Dashboard (New) streamlines dashboard configurations and on-the-fly analytic visualizations with its new templating features. For more information see [Dashboard (New)](https://help.sumologic.com/?cid=5500).\n    x-displayName: Dashboard (New)\n  - name: dynamicParsingRuleManagement\n    description: |\n      Dynamic Parsing management API.\n\n      Dynamic Parsing allows automatic field extraction from your log messages when you run a search.  This allows you to view fields from logs without having to manually specify parsing logic. For more information  see [Dynamic Parsing](https://help.sumologic.com/?cid=20011).\n    x-displayName: Dynamic Parsing\n  - name: extractionRuleManagement\n    description: |\n      Field Extraction Rule management API.\n\n      Field Extraction Rules allow you to parse fields from your log messages at the time the messages are ingested eliminating the need to parse fields in your query. For more information see [Manage Field Extraction](https://help.sumologic.com/?cid=5313).\n    x-displayName: Field Extraction Rules\n  - name: fieldManagementV1\n    description: |\n      Field management API.\n\n      Fields allow you to reference log data based on meaningful associations. They act as metadata tags that are assigned to your logs so you can search with them. Each field contains a key-value pair, where the field name is the key. Fields may be referred to as Log Metadata Fields. For more information see [Fields](https://help.sumologic.com/?cid=10116).\n    x-displayName: Field Management\n  - name: folderManagement\n    description: |\n      Folder management API.\n\n      You can add folders and subfolders to the Library in order to organize your content for easy access or to share content. For more information see [Add Folders to the Library](https://help.sumologic.com/?cid=5020). You can perform the request as a Content Administrator by using the `isAdminMode` parameter. For more information see [Admin Mode](https://help.sumologic.com/Manage/Content_Sharing/Admin_Mode).\n    x-displayName: Folders\n  - name: ingestBudgetManagementV1\n    description: |\n      Ingest Budget management API.\n\n      Ingest Budgets allow you to control the capacity of daily ingestion volume sent to Sumo Logic from Collectors. For more information see [Ingest Budgets](https://help.sumologic.com/?cid=5235).\n    x-displayName: Ingest Budgets\n  - name: ingestBudgetManagementV2\n    description: |\n      Ingest Budget management API V2.\n\n      Ingest Budgets V2 provide you the ability to create and assign budgets to your log data by Fields instead of using a Field Value. For more information see [Metadata Ingest Budgets](https://help.sumologic.com/?cid=52352).\n    x-displayName: Ingest Budgets V2\n  - name: partitionManagement\n    description: |\n      Partition management API.\n\n      Creating a Partition allows you to improve search performance by searching over a smaller number of messages. For more information see [Manage Partitions](https://help.sumologic.com/?cid=5231).\n    x-displayName: Partitions\n  - name: logsDataForwardingManagement\n    description: |\n      Logs Data Forwarding management API.\n\n      Logs Data Forwarding allows you to forward log data from a Partition or Scheduled View to an S3 bucket. For more information see [Forwarding Data to S3](https://help.sumologic.com/Manage/Data-Forwarding/Configure-Data-Forwarding-from-Sumo-Logic-to-S3).\n    x-displayName: Logs Data Forwarding\n  - name: roleManagement\n    description: |\n      Role management API.\n\n      Roles determine the functions that users are able to perform in Sumo Logic. To manage roles, you must have an administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Roles](https://help.sumologic.com/?cid=5234).\n    x-displayName: Roles\n  - name: lookupManagement\n    description: |\n      Lookup Table management API.\n\n      A Lookup Table is a table of data hosted on Sumo Logic that you can use to enrich the log and event data received by Sumo Logic. You must create a table schema before you can populate the table. For more information see [Lookup Tables](https://help.sumologic.com/?cid=10109).\n    x-displayName: Lookup Tables\n  - name: scheduledViewManagement\n    description: |\n      Scheduled View management API.\n\n      Scheduled Views speed the search process for small and historical subsets of your data by functioning as a pre-aggregated index. For more information see [Manage Scheduled Views](https://help.sumologic.com/?cid=5128).\n    x-displayName: Scheduled Views\n  - name: tokensLibraryManagement\n    description: |\n      Tokens management API.\n\n      Tokens are associated with your organization to authorize specific operations. Currently, we support collector registration tokens, which can be used to register Installed Collectors. Managing tokens requires the Manage Tokens role capability. For more information see [Installation Tokens](https://help.sumologic.com/?cid=0100).\n    x-displayName: Tokens\n  - name: transformationRuleManagement\n    description: |\n      Transformation Rule management API.\n      Metrics Transformation Rules allow you control how long raw metrics are retained. You can also aggregate metrics at collection time and specify a separate retention period for the aggregated metrics. For more information see [Metrics Transformation Rules](https://help.sumologic.com/?cid=10117).\n    x-displayName: Transformation Rules (Beta)\n  - name: userManagement\n    description: |\n      User management API.\n\n      To manage users, you must have the administrator role or your role must have been assigned the manage users and roles capability. For more information see [Manage Users](https://help.sumologic.com/?cid=1006).\n    x-displayName: Users\n  - name: metricsSearchesManagement\n    description: |\n      Metrics Search management API.\n\n      Save metrics searches in the content library and organize them in a folder hierarchy. Share useful queries with users in your organization. For more information see [Sharing Metric Charts](https://help.sumologic.com/Metrics/03-Metric-Charts/Share_a_Metric_Chart).\n    x-displayName: Metrics Searches (Beta)\n  - name: metricsQuery\n    description: |\n      Metrics Query API.\n\n      The Metrics Query API allows you to execute queries on various metrics and retrieve multiple time-series (data-points) over time range(s). For more information see [Metrics - Classic](https://help.sumologic.com/?cid=1079).\n    x-displayName: Metrics Query\n  - name: accessKeyManagement\n    description: |\n      Access Key management API.\n\n      Access Keys allow you to securely register new Collectors and access Sumo Logic APIs. For more information see [Access Keys](https://help.sumologic.com/?cid=6690).\n    x-displayName: Access Keys\n  - name: samlConfigurationManagement\n    description: |\n      SAML configuration management API\n\n      Organizations with Enterprise accounts can provision Security Assertion Markup Language (SAML) 2.0 to enable Single Sign-On (SSO) for user access to Sumo Logic. For more information see [SAML Configuration](https://help.sumologic.com/?cid=4016).\n    x-displayName: SAML Configuration\n  - name: serviceAllowlistManagement\n    description: |\n      Service Allowlist management API\n\n      Service Allowlist Settings allow you to explicitly grant access to specific IP addresses and/or CIDR notations for logins, APIs, and dashboard access. For more information see [Service Allowlist Settings](https://help.sumologic.com/?cid=5454).\n    x-displayName: Service Allowlist\n  - name: healthEvents\n    description: |\n      Health Events management API.\n\n      Health Events allow you to keep track of the health of your Collectors and Sources. You can use them to find and investigate common errors and warnings that are known to cause collection issues. For more information see [Health Events](https://help.sumologic.com/?cid=0020).\n    x-displayName: Health Events\n  - name: archiveManagement\n    description: |-\n      Archive Ingestion Management API.\n\n      Archive Ingestion allows you to ingest data from Archive destinations. You can use this API to ingest data from your Archive with an existing AWS S3 Archive Source. You need the Manage or View Collectors role capability to manage or view ingestion jobs. For more information see [Archive](https://help.sumologic.com/?cid=10011).\n    x-displayName: Archive Ingestion Management\n  - name: logSearchesEstimatedUsage\n    description: |\n      Log Search Estimated Usage API.\n\n      Gets the estimated volume of data that would be scanned for a given log search in the Infrequent data tier, over a particular time range. In the Infrequent Data Tier, you pay per query, based on the amount data scanned. You can use this endpoint to get an estimate of the total data that would be scanned before running a query, and refine your query to scan less data, as necessary. For more information see [Infrequent data tier](https://help.sumologic.com/?cid=11987).\n    x-displayName: Log Search Estimated Usage\n  - name: passwordPolicy\n    description: |\n      Password Policy Management API\n\n      The password policy controls how user passwords are managed. The \"Manage Password Policy\" role capability is required to update the password policy. For more information see [how to set a password policy](https://help.sumologic.com/?cid=8595).\n    x-displayName: Password Policy\n  - name: policiesManagement\n    description: |\n      Policies management API.\n\n      Policies control the security and share settings of your organization. For more information see [Security](https://help.sumologic.com/?cid=4041).\n    x-displayName: Policies\n  - name: traces\n    description: |\n      Traces API\n\n      The Traces API allows you to browse traces collected in the system. You can execute queries to find traces matching provided search criteria as well as gather detailed information about individual traces and spans. For more information see [View and investigate traces](https://help.sumologic.com/Traces/View_and_investigate_traces).\n    x-displayName: Traces\n  - name: spanAnalytics\n    description: |\n      Span Analytics API\n\n      The Span Analytics API allows you to browse spans collected in the system. You can execute queries to find individual spans matching provided search criteria as well as run aggregated span queries and retrieve their results. For more information see [Spans](https://help.sumologic.com/Traces/Spans).\n    x-displayName: Span Analytics\n  - name: serviceMap\n    description: |\n      Service Map API\n\n      The Service Map API allows you to fetch a graph representation of the Service Map, which is a high-level view of your application environment, automatically derived from tracing data. For more information see [Service Map](https://help.sumologic.com/Traces/Service_Map_and_Dashboards#service-map).\n    x-displayName: Service Map\n  - name: slosLibraryManagement\n    description: |\n      SLO Management API.\n\n      SLOs are used to monitor and alert on KPIs for your most important services or user experience.\n    x-displayName: SLOs\n  - name: monitorsLibraryManagement\n    description: |\n      Monitor Management API.\n\n\n      Monitors continuously query your data to monitor and send notifications when specific events occur.\n      For more information see [Monitors](https://help.sumologic.com/?cid=10020).\n    x-displayName: Monitors\ninfo:\n  title: Sumo Logic API - tracing\n  description: tracing\n  version: 1.0.0\n  x-logo:\n    url: ./sumologic_logo.png\n",
			"canonicalURL": "/github.com/stackql/stackql-provider-registry@e5179141fc8f11e177fa608414aa3177e17c38b7/-/blob/providers/src/sumologic/v0.1.1/services/tracing.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/stackql/stackql-provider-registry/blob/e5179141fc8f11e177fa608414aa3177e17c38b7/providers/src/sumologic/v0.1.1/services/tracing.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"SpanQueryAggregateMetaData\": resolve \"#/components/schemas/SpanQueryAggregateMetaData\": property \"data\": at providers/src/sumologic/v0.1.1/services/tracing.yaml:2042:20: parse default: unexpected type: \"object\""
}