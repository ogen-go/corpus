{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/scrawler-archive/OpenAPI-spec"
		},
		"file": {
			"name": "socialAPI-spec.yaml",
			"size": 0,
			"path": "socialAPI-spec.yaml",
			"byteSize": 66617,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.1.0\n  title: Spec to build your own Social Network API\nservers:\n  - url: 'http://ossnsocial.text'\npaths:\n\n######################### User Collection Starts here #####################\n\n#-----------------\n# User Register/Create API\n#------------------\n  /users:\n    post:\n        summary: 'Create a new user'\n        operationId: createUser\n        requestBody:\n            description: 'User to add to system'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/User'\n        responses:\n            '201':\n                description: 'User successfully added'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 201\n                            message: 'user successfully created'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Get Multiple users\n#------------------\n    get:\n      summary: 'Returns list of users based on limit and offset'\n      operationId: listUser\n      tags:\n        - user\n      parameters:\n        - $ref: '#/components/parameters/offsetParam'\n        - $ref: '#/components/parameters/limitParam'\n        - in: query\n          name: type\n          required: true\n          description: Type of user to be retrived.\n          schema:\n              type: string\n              enum: \n                  # Get all users\n                  - all\n                  # Get users followed by current user\n                  - following\n                  # Get random user , Note: Offset wont work with this type\n                  - random\n      responses:\n        '200':\n          description: 'List of users'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n              example: \n                  - id: 21\n                    name: 'Ellie D'\n                    username: 'its_ellie'\n                    email: 'ellie@gmail.com'\n                    img: 'exapmle.com/ellie/profile.png'\n                    meta: {\n                        gender: 'Female',\n                        city: 'New York',\n                        country: 'USA'\n                    }\n                  - id: 10\n                    name: 'Pranjal Pandey'\n                    username: 'physcocode'\n                    email: 'pranjal@corpusvision.com'\n                    img: 'exapmle.com/physcocode/profile.png'\n                    meta: {\n                        gender: 'Male',\n                        city: 'Mumbai',\n                        country: 'India'\n                    }\n                  - id: 10\n                    name: 'Vineet Singh'\n                    username: 'Veneed'\n                    email: 'vineet@corpusvision.com'\n                    img: 'exapmle.com/veneed/profile.png'\n                    meta: {\n                        gender: 'Male',\n                        city: 'Mumbai',\n                        country: 'India'\n                    }\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n#-----------------\n# Get Single User\n#------------------\n  /users/{id}:\n    get:\n      summary: 'Returns details about a particular user'\n      operationId: getUser\n      tags:\n        - user\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '200':\n          description: 'Details about a user by ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                  Pranjal:\n                      value:\n                        id: 10\n                        name: 'Pranjal Pandey'\n                        username: 'physcocode'\n                        email: 'pranjal@corpusvision.com'\n                        img: 'exapmle.com/physcocode/profile.png'\n                        meta: {\n                            gender: 'Male',\n                            city: 'Mumbai',\n                            country: 'India'\n                        }\n                  Ellie:\n                    value:\n                        id: 21\n                        name: 'Ellie D'\n                        username: 'its_ellie'\n                        email: 'ellie@gmail.com'\n                        img: 'exapmle.com/ellie/profile.png'\n                        meta: {\n                            gender: 'Female',\n                            city: 'New York',\n                            country: 'USA'\n                        }\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#-----------------\n# Update Single User\n#------------------\n    put:\n      summary: 'update detail about a single user'\n      operationId: updateUser\n      tags:\n        - user\n      parameters:\n        - name: id\n          in: path\n          description: ID of the user\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      requestBody:\n          description: 'User to add to system'\n          content:\n            application/json:\n                schema:\n                    $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: 'Updated user detail'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n              examples:\n                  Pranjal:\n                      value:\n                        id: 10\n                        name: 'Pranjal P'\n                        username: 'physcocode'\n                        email: 'pranjal@corpusvision.com'\n                        img: 'exapmle.com/physcocode/profile.png'\n                        meta: {\n                            gender: 'Male',\n                            city: 'Mumbai',\n                            country: 'India'\n                        }\n                  Ellie:\n                    value:\n                        id: 21\n                        name: 'Ellie Don'\n                        username: 'its_ellie'\n                        email: 'ellie@gmail.com'\n                        img: 'exapmle.com/ellie/profile.png'\n                        meta: {\n                            gender: 'Female',\n                            city: 'New York',\n                            country: 'USA'\n                        }\n\n\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#-----------------\n# Delete Single User\n#------------------\n    delete:\n        summary: 'Delete a single user'\n        operationId: deleteUser\n        parameters:\n            - name: id\n              in: path\n              description: ID of the user\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1\n        responses:\n            '200':\n                description: 'User successfully deleted'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'user successfully deleted'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n################################# User Collection Ends Here ###############################  \n\n######################### Post Collection Starts here #####################\n# Posts are actual entity that keeps status update in text, image upload etc it is backbone of social network\n#-----------------\n# Create Post\n#------------------\n  /posts:\n    post:\n        summary: 'Create a new post'\n        operationId: createPost\n        requestBody:\n            description: 'Add Post to system'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/Post'\n        responses:\n            '201':\n                description: 'Post Successfully Added'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 201\n                            message: 'post successfully created'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Get Multiple posts\n#------------------\n    get:\n      summary: 'Returns list of posts based on limit and offset'\n      operationId: listPost\n      tags:\n        - post\n      parameters:\n        - $ref: '#/components/parameters/offsetParam'\n        - $ref: '#/components/parameters/limitParam'\n        - in: query\n          name: type\n          required: true\n          description: type of possts to be retrived.\n          schema:\n              type: string\n              enum: \n                  # Get all public post\n                  - all\n                  # Get posts of people followed by user\n                  - following\n                  # Get post of user both private and public\n                  - me\n      responses:\n        '200':\n          description: 'List of post'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPosts'\n              example:\n                  #image type post\n                  - id: 13\n                    type: \"Image\"\n                    owner: {\n                        id: 10,\n                        name: \"Pranjal Pandey\",\n                        username: \"physcocoede\",\n                        image: \"example.com/physcocode/profile.png\"\n                    }\n                    created_at: \"2017-07-21T17:32:28Z\"\n                    visibility: public\n                    meta: {\n                        'status': 'I am a example status update with image',\n                        'image': 'example.com/image.png' \n                    }\n                    like_count: 9\n                    comment_count: 12\n                    #text type post\n                  - id: 19\n                    type: \"Text\"\n                    owner: {\n                        id: 10,\n                        name: \"Pranjal Pandey\",\n                        username: \"physcocoede\",\n                        image: \"example.com/physcocode/profile.png\"\n                    }\n                    created_at: \"2017-07-21T17:32:28Z\"\n                    visibility: public\n                    meta: {\n                        'status': 'I am a example of text status update !',\n                    }\n                    like_count: 22\n                    comment_count: 4\n                    #video type post\n                  - id: 33\n                    type: \"Video\"\n                    owner: {\n                        id: 12,\n                        name: \"Vineet Singh\",\n                        username: \"vineed\",\n                        image: \"example.com/vineed/profile.png\"\n                    }\n                    created_at: \"2017-07-21T17:32:28Z\"\n                    visibility: public\n                    meta: {\n                        'status': 'I am a example of text status update !',\n                        'video': 'example.com/video.mp4'\n                    }\n                    like_count: 22\n                    comment_count: 4\n                    #slideshow type post\n                  - id: 23\n                    type: \"Slideshow\"\n                    owner: {\n                        id: 12,\n                        name: \"Vineet Singh\",\n                        username: \"vineed\",\n                        image: \"example.com/vineed/profile.png\"\n                    }\n                    created_at: \"2017-07-21T17:32:28Z\"\n                    visibility: public\n                    meta: {\n                        'status': 'I am a example of slideshow update !',\n                        'image': [\n                            'example.com/image1.png',\n                            'example.com/image2.png',\n                            'example.com/image3.png'\n                        ]\n                    }\n                    like_count: 28\n                    comment_count: 9\n                                                           \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n#-----------------\n# Get Single Post\n#------------------\n  /posts/{id}:\n    get:\n      summary: 'Returns details about a particular post'\n      operationId: getPost\n      tags:\n        - post\n      parameters:\n        - name: id\n          in: path\n          description: ID of the post\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        '200':\n          description: 'Details about a post by its ID'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPost'\n              examples:\n                  image:\n                      summary: 'Example of Image type post'\n                      value:\n                        id: 13\n                        type: \"Image\"\n                        owner: {\n                            id: 10,\n                            name: \"Pranjal Pandey\",\n                            username: \"physcocoede\",\n                            image: \"example.com/physcocode/profile.png\"\n                        }\n                        created_at: \"2017-07-21T17:32:28Z\"\n                        visibility: public\n                        meta: {\n                            'status': 'I am a example status update with image',\n                            'image': 'example.com/image.png' \n                        }\n                        like_count: 9\n                        comment_count: 12\n                    #text type post\n                  text:\n                      summary: 'Example of text type post'\n                      value:\n                        id: 19\n                        type: \"Text\"\n                        owner: {\n                            id: 10,\n                            name: \"Pranjal Pandey\",\n                            username: \"physcocoede\",\n                            image: \"example.com/physcocode/profile.png\"\n                        }\n                        created_at: \"2017-07-21T17:32:28Z\"\n                        visibility: public\n                        meta: {\n                            'status': 'I am a example of text status update !',\n                        }\n                        like_count: 22\n                        comment_count: 4\n                  \n                  video:\n                      summary: 'Example of video type post'\n                      value:\n                        id: 33\n                        type: \"Video\"\n                        owner: {\n                            id: 12,\n                            name: \"Vineet Singh\",\n                            username: \"vineed\",\n                            image: \"example.com/vineed/profile.png\"\n                        }   \n                        created_at: \"2017-07-21T17:32:28Z\"\n                        visibility: public\n                        meta: {\n                           'status': 'I am a example of text status update !',\n                            'video': 'example.com/video.mp4'\n                        }\n                        like_count: 22\n                        comment_count: 4\n                  slideshow:\n                      summary: 'slideshow type of post'\n                      value:\n                        id: 23\n                        type: \"Slideshow\"\n                        owner: {\n                            id: 12,\n                            name: \"Vineet Singh\",\n                            username: \"vineed\",\n                            image: \"example.com/vineed/profile.png\"\n                        }\n                        created_at: \"2017-07-21T17:32:28Z\"\n                        visibility: public\n                        meta: {\n                            'status': 'I am a example of slideshow update !',\n                            'image': [\n                                'example.com/image1.png',\n                                'example.com/image2.png',\n                                'example.com/image3.png'\n                            ]\n                        }\n                        like_count: 28\n                        comment_count: 9\n                  \n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#-----------------\n# Update Single Post , Note: Currently editing post is not provided but maybe in future , open for discussion\n#------------------\n    # put:\n    #   summary: 'update detail about a single post'\n    #   operationId: updatePost\n    #   tags:\n    #     - post\n    #   parameters:\n    #     - name: id\n    #       in: path\n    #       description: ID of the post\n    #       required: true\n    #       schema:\n    #         type: integer\n    #         format: int64\n    #         minimum: 1\n    #   requestBody:\n    #       description: 'User to add to system'\n    #       content:\n    #         application/json:\n    #             schema:\n    #                 $ref: '#/components/schemas/Post'\n    #   responses:\n    #     '200':\n    #       description: 'Updated user detail'\n    #       content:\n    #         application/json:\n    #           schema:\n    #             $ref: '#/components/schemas/Post'\n           \n    #     default:\n    #       description: Unexpected error\n    #       content:\n    #         application/json:\n    #           schema:\n    #             $ref: '#/components/schemas/Error'\n\n#-----------------\n# Delete Single Post\n#------------------\n    delete:\n        summary: 'Delete a single post'\n        operationId: deletePost\n        parameters:\n            - name: id\n              in: path\n              description: ID of the post\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1\n        responses:\n            '200':\n                description: 'Post successfully deleted'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'post successfully deleted'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n\n\n########################## Post Collection Ends here ######################\n\n######################### Comment and Likes Collection Starts here ####################\n#-----------------\n# Create new comment\n#------------------ \n  /comments:\n     post:\n        summary: 'Create a comment and attach to post' \n        operationId: createComment\n        requestBody:\n            description: 'Add Post to system'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/Comment'\n        responses:\n            '201':\n                description: 'Comment Successfuly added'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 201\n                            message: 'comment Successfuly Added'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Get all comments of a post\n#------------------\n     get:\n         summary: 'get comments of a post'\n         operationId: getComment\n         parameters:\n            - in: query\n              name: post_id\n              required: true\n              description: Type of user to be retrived.\n              schema:\n                type: integer\n         responses:\n            '200':\n                description: 'List comment for a post'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/GetComments'\n                        example: \n                            - id: 23\n                              post: 32\n                              owner: 10\n                              body: \"I like this post\"\n                              created_at: \"2017-07-21T17:32:28Z\"\n                            - id: 24\n                              post: 32\n                              owner: 21\n                              body: \"This post seems great\"\n                              created_at: \"2017-07-21T17:32:28Z\"\n                            - id: 25\n                              post: 32\n                              owner: 14\n                              body: \"Hahah this is funny\"\n                              created_at: \"2017-07-21T17:32:28Z\"  \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Delete Single Comment\n#------------------\n  /comments/{id}:\n     delete:\n        summary: 'Delete a single comment' \n        operationId: deleteComment\n        parameters:\n            - name: id\n              in: path\n              description: ID of the comment\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1\n        responses:\n            '200':\n                description: 'Comment Successfuly deleted'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'comment Successfuly Deleted'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Update a Comment\n#------------------\n     put:\n         summary: 'Update a comment'\n         operationId: updateComment\n         parameters:\n            - name: id\n              in: path\n              description: ID of the comment\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1\n         requestBody:\n             description: 'Add Post to system'\n             content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/Comment'\n         responses:\n            '200':\n                description: 'Comment after being updated'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Comment'\n                        example: \n                             id: 23\n                             post: 32\n                             owner: 10\n                             body: \"The updated comment\"\n                             created_at: \"2017-07-21T17:32:28Z\"\n                           \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Like a post\n#------------------ \n  /likes:\n     post:\n        summary: 'Like a post' \n        operationId: like\n        requestBody:\n            description: 'Add Like to post'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/Like'\n        responses:\n            '201':\n                description: 'Post successfully liked'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 201\n                            message: 'Post successfully liked'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Get all likes of the post\n#------------------\n     get:\n         summary: 'get likes of a post'\n         operationId: getLike\n         parameters:\n            - in: query\n              name: post_id\n              required: true\n              description: id of post whose likes need to be retrived\n              schema:\n                type: integer\n         responses:\n            '200':\n                description: 'List user that likes post'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/GetLikes'\n                        example: \n                            - id: 10  \n                              post: 25\n                              owner: {\n                                id: 10,\n                                name: \"Pranjal Pandey\",\n                                username: \"physcocoede\",\n                                image: \"example.com/physcocode/profile.png\"\n                              }\n                              created_at: \"2017-07-21T17:32:28Z\" \n\n                            - id: 13 \n                              post: 25\n                              owner: {\n                                id: 12,\n                                name: \"Ellie D\",\n                                username: \"its_ellie\",\n                                image: \"example.com/ellie/profile.png\"\n                                }\n                              created_at: \"2017-07-21T17:32:28Z\" \n                               \n                            - id: 23 \n                              post: 25\n                              owner: {\n                                id: 15,\n                                name: \"Vineet Singh\",\n                                username: \"vineed\",\n                                image: \"example.com/vineed/profile.png\"\n                                }\n                              created_at: \"2017-07-21T17:32:28Z\"  \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Unlike a post / Delete Like\n#------------------\n     delete:\n        summary: 'Unlike a post' \n        operationId: unlike\n        parameters:\n            - name: post_id\n              in: query\n              description: ID of post\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1\n            - name: user_id\n              in: query\n              description: ID of user \n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1    \n        responses:\n            '200':\n                description: 'Post successfully unliked'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'Post successfully unliked'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n\n######################### Comment and Likes Collection Ends here #####################\n\n######################### API collection to work with user relations  #########################\n#-----------------\n# Create relation between two user\n# Relations can be anything from friends to follow or as complex as circles introduced by google+\n#------------------  \n  /relations:\n     post:\n        summary: 'Create new relation between two users' \n        operationId: createRelations\n        requestBody:\n            description: 'Information about users and type of relation'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/UserRelation'\n        responses:\n            '201':\n                description: 'Relation successfully created'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 201\n                            message: 'Relation successfully created'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Get all likes of the post\n#------------------\n     get:\n         summary: 'get all relation of a user'\n         operationId: getRelations\n         parameters:\n            - in: query\n              name: user_id\n              required: true\n              description: id of users whose relations is to be listed\n              schema:\n                type: integer\n         responses:\n            '200':\n                description: 'List user that are related to current user'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/GetUserRelations'\n                        example: \n                            - id: 10  \n                              owner: 25\n                              user: {\n                                id: 10,\n                                name: \"Pranjal Pandey\",\n                                username: \"physcocoede\",\n                                image: \"example.com/physcocode/profile.png\"\n                              }\n                              type: 'follow'\n                              bidirectional: false\n                              created_at: \"2017-07-21T17:32:28Z\"\n                              meta: {} \n\n                            - id: 13 \n                              owner: 25\n                              user: {\n                                id: 12,\n                                name: \"Ellie D\",\n                                username: \"its_ellie\",\n                                image: \"example.com/ellie/profile.png\"\n                                }\n                              type: 'follow'\n                              bidirectional: false\n                              created_at: \"2017-07-21T17:32:28Z\"\n                              meta: {} \n                               \n                            - id: 23 \n                              owner: 25\n                              user: {\n                                id: 15,\n                                name: \"Vineet Singh\",\n                                username: \"vineed\",\n                                image: \"example.com/vineed/profile.png\"\n                                }\n                              type: 'follow'\n                              bidirectional: false  \n                              created_at: \"2017-07-21T17:32:28Z\"\n                              meta: {}  \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Delete the relations bettwen user\n# This is to perform action like unfollow or unfriend\n#------------------\n     delete:\n        summary: 'Remove relation between users' \n        operationId: unlike\n        parameters:\n            - name: owner_id\n              in: query\n              description: ID of user who is owner of relation (\"Followed by\")\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1\n            - name: user_id\n              in: query\n              description: ID of user whom the owner is related to (\"Followed to\")\n              required: true\n              schema:\n                type: integer\n                format: int64\n                minimum: 1    \n        responses:\n            '200':\n                description: 'Relation successfully removed'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'Relation successfully removed '\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n  \n\n######################### API collection to work with user relations Ends here #####################\n\n######################### API collection to work with messages #####################\n#-----------------\n# Send message to a room\n#------------------\n  /messages:\n     post:\n        summary: 'Send message to a room' \n        operationId: createMessages\n        requestBody:\n            description: 'Message to send'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/Message'\n        responses:\n            '201':\n                description: 'Message Successfully sent'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'Message Successfully sent'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Get all messages of a room\n#------------------\n     get:\n         summary: 'get all messages of a room'\n         operationId: getMessages\n         parameters:\n            - in: query\n              name: room_id\n              required: true\n              description: id of room whose message to get\n              schema:\n                type: integer\n         responses:\n            '200':\n                description: 'List of messages in a room'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Messages'\n                        example: \n                            - id: 13 \n                              room: 25\n                              owner: 12\n                              created_at: \"2017-07-21T17:32:28Z\"\n                              message: \"Hi\" \n\n                            - id: 16 \n                              room: 25\n                              owner: 13\n                              created_at: \"2017-07-21T17:32:28Z\"\n                              message: \"Hey, wassup?\" \n                               \n                            - id: 18 \n                              room: 25\n                              owner: 12\n                              created_at: \"2017-07-21T17:32:28Z\"\n                              message: \"I am good\"\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Delete all messages of a room\n#------------------\n     delete:\n         summary: 'delete all messages of a room'\n         operationId: deleteMessages\n         parameters:\n            - in: query\n              name: room_id\n              required: true\n              description: id of room whose message to delete\n              schema:\n                type: integer\n         responses:\n            '200':\n                description: 'Successfully deleted all message in room'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example:\n                            code: 200\n                            message: 'Successfully deleted all message in room'                             \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Delete single message\n#------------------  \n  /messages/{id}:\n      delete:\n          summary: 'delete a single message'\n          operationId: deleteMessage\n          parameters:\n            - in: path\n              name: id\n              required: true\n              description: id of message to delete\n              schema:\n                type: integer\n          responses:\n            '200':\n                description: 'Successfully deleted message'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example:\n                            code: 200\n                            message: 'Successfully deleted message'                             \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n#-----------------\n# Create a room\n#------------------  \n  /messages/rooms:\n      post:\n        summary: 'Create a new Room' \n        operationId: createRoom\n        requestBody:\n            description: 'Detail about room including users'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/MessageRoom'\n        responses:\n            '201':\n                description: 'Room successfully created'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'Room successfully created'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n      delete:\n          summary: 'delete a room'\n          operationId: deleteRoom\n          parameters:\n            - in: query\n              name: id\n              required: true\n              description: id of room to delete\n              schema:\n                type: integer\n          responses:\n            '200':\n                description: 'Successfully deleted room'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example:\n                            code: 200\n                            message: 'Successfully deleted room'                             \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'        \n                \n######################### End of API collection to work with messages #####################\n\n######################### API collection for Activity Feed #####################\n#-----------------\n# Create a new Activity\n#------------------\n  /feeds:\n     post:\n        summary: 'Creat new Activity in Feed' \n        operationId: createFeed\n        requestBody:\n            description: 'Activity Feed to add'\n            content:\n                application/json:\n                    schema:\n                        $ref: '#/components/schemas/Feed'\n        responses:\n            '201':\n                description: 'Feed successfully added'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example: \n                            code: 200\n                            message: 'Message Successfully sent'\n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Get all activities in feed\n#------------------\n     get:\n         summary: 'get all acrivities in feed'\n         operationId: getFeeds\n         parameters:\n            - in: query\n              name: type\n              required: true\n              description: type of feed\n              schema:\n                type: string\n                enum: \n                  # Get all public post\n                  - all\n                  # Get posts of people followed by user\n                  - following\n                  # Get post of user both private and public\n                  - me\n         responses:\n            '200':\n                description: 'List of Activities in feed'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/GetFeeds'\n                        example: \n                          - id: 12\n                            owner: {\n                                 id: 10,\n                                 name: 'Pranjal Pandey',\n                                 username: physcocode\n                            }\n                            action: 'liked'\n                            object: {\n                                id: 10,\n                                type: \"Image\",\n                                owner: {\n                                id: 10,\n                                name: \"Pranjal Pandey\",\n                                username: \"physcocoede\",\n                                image: \"example.com/physcocode/profile.png\"\n                                },\n                                created_at: \"2017-07-21T17:32:28Z\",\n                                visibility: public,\n                                meta: {\n                                    'status': 'I am a example status update with image',\n                                    'image': 'example.com/image.png' \n                                },\n                                like_count: 9,\n                                comment_count: 12,\n                                }\n                            type: 'like'\n\n                          - id: 13\n                            owner: {\n                                 id: 10,\n                                 name: 'Pranjal Pandey',\n                                 username: physcocode\n                            }\n                            action: 'followed'\n                            object: {\n                                 id: 12,\n                                 name: 'Vineet Singh',\n                                 username: vineed\n                            }\n                            type: 'follow'\n                           \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n#-----------------\n# Delete an activity from feed\n#------------------  \n  /feeds/{id}:\n      delete:\n          summary: 'delete an activity from feed'\n          operationId: deleteFeed\n          parameters:\n            - in: path\n              name: id\n              required: true\n              description: id of feed activity to delete\n              schema:\n                type: integer\n          responses:\n            '200':\n                description: 'Successfully deleted activity from feed'\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Success'\n                        example:\n                            code: 200\n                            message: 'Successfully deleted activity from feed'                             \n            default:\n                description: Unexpected error\n                content:\n                    application/json:\n                        schema:\n                            $ref: '#/components/schemas/Error'\n\n######################### End of API collection for Activity Feed #####################\n\ncomponents:\n  schemas:\n#--------------------   \n# Array of Users \n#--------------------\n    Users:  \n        type: array\n        items:\n            $ref: '#/components/schemas/User'\n\n#-----------------------\n# User model  \n# extra user information can be stored in user meta like DOB, city etc \n#------------------------ \n    User:\n      type: object\n      required:\n        # id will be generated by system not required parameter  \n        #- id\n        - name\n        - username\n        - email\n      properties:\n        id:\n          type: integer\n          format: int64\n          minimum: 1\n        name:\n          type: string\n        username:\n            type: string\n        email:\n          type: string\n          format: email\n        #profile pic of user  \n        img:\n           type: string   \n        #meta can be used as object container to store any kind of information about user as per your application requires  \n        meta:\n          type: object\n          additionalProperties: true  \n          example: {\n              'DOB': '10/10/1997',\n              'City': 'mumbai'\n          }\n      example: \n            id: 21\n            name: 'Ellie D'\n            username: 'its_ellie'\n            email: 'ellie@gmail.com'\n            img: 'exapmle.com/ellie/profile.png'\n            meta: {\n                gender: 'Female',\n                city: 'New York',\n                country: 'USA'\n            }\n\n#-----------------------\n# User details summary to be embedded into get request  \n#------------------------ \n    UserSummary:\n      type: object\n      required:\n        - id\n        - name\n        - username\n      properties:\n        id:\n          type: integer\n          format: int64\n          minimum: 1\n        name:\n          type: string\n        username:\n            type: string\n        img:\n           type: string   \n        #meta can be used as object container to store any kind of information about user as per your application requires  \n\n      example: \n            id: 21\n            name: 'Ellie D'\n            username: 'its_ellie'\n            img: 'exapmle.com/ellie/profile.png'\n        \n#-----------------------\n# User relations\n# This model can be used to create friends, follow and other relation between users\n#------------------------ \n    UserRelation:\n        type: object\n        required:\n            # id will be generated by system not required on post request\n            #- id\n            - owner\n            - user\n            - type\n        properties:\n            id:\n                type: integer\n                format: int64\n                minimum: 1\n            #id of user who is creating relation\n            owner:\n                type: integer\n            #id of user whome owner is following    \n            user:\n                type: integer\n            #type of relation eg: follow, friend, connection etc    \n            type:\n                type: string\n            # is relation bidirectional like friends or unidirectional like follow ?    \n            bidirectional:\n                type: boolean\n            #any other meta you want to store about relation    \n            meta:\n                type: object\n                additionalProperties: true \n        example:\n            id: 11\n            owner: 10\n            user: 12\n            type: 'follow'\n            bidirectional: false\n            meta: {\n\n            }       \n#--------------------   \n# Array of UserRelations\n#--------------------\n    GetUserRelations:  \n        type: array\n        items:\n            $ref: '#/components/schemas/GetUserRelation'                \n#-----------------------\n# Model to get list of related users\n#------------------------ \n    GetUserRelation:\n        type: object\n        required:\n            - id\n            - owner\n            - user\n            - type\n        properties:\n            id:\n                type: integer\n                format: int64\n                minimum: 1\n            owner:\n                type: integer\n            user:\n                $ref: '#/components/schemas/UserSummary'\n            type:\n                type: string\n            # is relation bidirectional like friends or unidirectional like follow ?    \n            bidirectional:\n                type: boolean\n            #any other meta you want to store about relation    \n            meta:\n                type: object\n                additionalProperties: true \n        example:\n            id: 11\n            owner: 10\n            user: {\n                id: 12,\n                name: 'Vineet Singh',\n                username: 'vineed',\n                img: 'example.com/vineed/profile.png'\n            }\n            type: 'friend'\n            bidirectional: true\n            meta: {\n             accepted: true\n            }\n          \n\n\n#-----------------------\n# Post model\n# All detail required to render post can be added in meta like discription, image url etc\n#-----------------------      \n    \n    Post:\n      type: object\n      required:\n        # id generated by the system not a required parameter on post request  \n        #- id\n        - owner\n        - visibility\n      properties:\n        id:\n          type: integer\n          format: int64\n          minimum: 1\n        #type of post (image,text,video etc) \n        type:\n            type: string\n            example: 'image'\n        #id of owner(user) post is added by   \n        owner:\n          type: integer\n          format: int64\n          minimum: 1\n        created_at:\n            type: string\n            format: date-time\n        visibility:\n            type: string\n            # limited type can be used to represent post which is displayed ti only friends or followers etc\n            enum: \n                - public\n                - private\n                - limited  \n        # meta holds all the property you would need to render the post in a view eg: status update, image url, video url etc    \n        # Note : meta SHOULD ALWAYS have 'type' field to determine post type , helps in binding status updates with renders \n        meta:\n          type: object\n          additionalProperties: true  \n          example: {\n              'status': 'i am a example status update',\n              'image': 'example.com/image.png' \n          }\n      example: \n        id: 10\n        type: 'image'\n        owner: 10\n        created_at: \"2017-07-21T17:32:28Z\"\n        visibility: public\n        meta: {\n            'status': 'I am a example status update with image',\n            'image': 'example.com/image.png' \n        }\n\n#--------------------   \n# Array of Posts to display \n#--------------------\n    GetPosts:  \n        type: array\n        items:\n            $ref: '#/components/schemas/GetPost'\n\n#-----------------------\n# Post model returned on get request to \n# All detail required to render post can be found in meta like discription, image url etc\n#-----------------------\n      \n    GetPost:\n      type: object\n      required:\n        - id\n        - owner\n        - visibility\n      properties:\n        id:\n          type: integer\n          format: int64\n          minimum: 1\n        type:\n            type: string\n            example : 'image'  \n        # Details of owner to be rendered on display \n        owner:\n          $ref: '#/components/schemas/UserSummary'\n        created_at:\n            type: string\n            format: date-time\n        visibility:\n            type: string\n            # limited type can be used to represent post which is displayed ti only friends or followers etc\n            enum: \n                - public\n                - private\n                - limited  \n        #no. of likes on post\n        like_count: \n            type: integer\n            format: int64\n            minimum: 1  \n        #no. of comments on post\n        comment_count: \n            type: integer\n            format: int64\n            minimum: 1          \n        # meta holds all the property you would need to render the post in a view eg: status update, image url, video url etc    \n        # Note : meta SHOULD ALWAYS have 'type' field to determine post type , helps in binding status updates with renders \n        meta:\n          type: object\n          additionalProperties: true  \n          example: {\n              'status': 'i am a exaple status update',\n              'image': 'example.com/image.png' \n          }\n      example:\n          id: 10\n          type: \"Image\"\n          owner: {\n              id: 10,\n              name: \"Pranjal Pandey\",\n              username: \"physcocoede\",\n              image: \"example.com/physcocode/profile.png\"\n           }\n          created_at: \"2017-07-21T17:32:28Z\"\n          visibility: public\n          meta: {\n            'status': 'I am a example status update with image',\n            'image': 'example.com/image.png' \n          }\n          like_count: 9\n          comment_count: 12\n\n\n#--------------------   \n# Array of comments to display \n#--------------------\n    GetComments:  \n        type: array\n        items:\n            $ref: '#/components/schemas/GetComment'\n\n#-----------------------\n# Get comment with user deetails to be displayed\n#------------------------    \n    GetComment:\n      type: object\n      required:\n        - id\n        - post\n        - owner\n        - body\n      properties:\n        id:\n          type: integer\n          format: int64\n        # id of post comment is part of  \n        post:\n          type: integer\n        #id of owner(user) comment is done by   \n        owner:\n            $ref: '#/components/schemas/UserSummary'\n        #the actual comment    \n        body:\n          type: string\n        created_at:\n            type: string\n            format: date-time\n      example:\n          id: 23\n          post: 32\n          owner: {\n              id: 10,\n              name: \"Pranjal Pandey\",\n              username: \"physcocoede\",\n              image: \"example.com/physcocode/profile.png\"\n           }\n          body: \"i like this post\"\n          created_at: \"2017-07-21T17:32:28Z\" \n\n\n#-----------------------\n#comment model\n#------------------------    \n    Comment:\n      type: object\n      required:\n        # id will be generated by system  \n        #- id\n        - post\n        - owner\n        - body\n      properties:\n        id:\n          type: integer\n          format: int64\n        # id of post comment is part of  \n        post:\n          type: integer\n        #id of owner(user) comment is done by   \n        owner:\n            type: integer\n        #the actual comment    \n        body:\n          type: string\n        created_at:\n            type: string\n            format: date-time\n      example:\n          id: 23\n          post: 32\n          owner: 10\n          body: \"i like this post\"\n          created_at: \"2017-07-21T17:32:28Z\" \n\n#--------------------   \n# Array of likes to display \n#--------------------\n    GetLikes:  \n        type: array\n        items:\n            $ref: '#/components/schemas/GetLike'\n\n#-----------------------  \n# Model to list people who liked the post\n#-----------------------\n    GetLike:\n      type: object\n      required:\n        - id\n        - post\n        - owner\n      properties:\n        id:\n          type: integer\n          format: int64\n          minimum: 1\n        # id of post like is part of  \n        post:\n          type: integer\n        #id of owner(user) who liked the post\n        owner:\n            $ref: '#/components/schemas/UserSummary'\n        created_at:\n            type: string\n            format: date-time\n      example:\n          id: 10  \n          post: 25\n          owner: {\n              id: 10,\n              name: \"Pranjal Pandey\",\n              username: \"physcocoede\",\n              image: \"example.com/physcocode/profile.png\"\n           }\n          created_at: \"2017-07-21T17:32:28Z\" \n\n\n#-----------------------  \n# Model to store the list of people who likes the post\n#-----------------------\n    Like:\n      type: object\n      required:\n        # id will be generated by system  \n        #- id\n        - post\n        - owner\n      properties:\n        id:\n          type: integer\n          format: int64\n          minimum: 1\n        # id of post like is part of  \n        post:\n          type: integer\n        #id of owner(user) who liked the post\n        owner:\n            type: integer\n        created_at:\n            type: string\n            format: date-time\n      example:\n          id: 10  \n          post: 25\n          owner: 10\n          created_at: \"2017-07-21T17:32:28Z\" \n\n#-----------------------  \n# Model to store data in activity feed\n#-----------------------\n    Feed:\n        type: object\n        required:\n            # id will be generated by system\n            #- id\n            - owner\n            - action\n            - object\n            - type\n        properties:\n            id:\n                type: integer\n                format: int64\n                minimum: 1\n          #id of owner(user) who performed action\n            owner:\n                type: integer\n          #type of action performed (Verb)     \n            action:\n                type: string\n          #id of object the action is performed on (Object can be other user,post etc)\n            object:\n                 type: integer \n          #type of activity (can be used to determine how to render feed in view)    \n            type:\n                 type: string\n \n        example:\n            # This is an exapmple of Pranjal (id:10) followed Vineet (id:20)\n            id: 5\n            owner: 10\n            action: 'followed'\n            object: 20 \n            type: 'follow'\n            created_at: \"2017-07-21T17:32:28Z\" \n\n#--------------------   \n# Array of Feeds to display \n#--------------------\n    GetFeeds:  \n        type: array\n        items:\n            $ref: '#/components/schemas/GetFeed'\n\n\n#-----------------------  \n# Model to get data to render activity feed in view\n# Message can be rendered by using 'owner.name + action + object.type/object.name\n# Eg: msg could be 'Pranjal liked Image' \n#-----------------------\n    GetFeed:\n        type: object\n        required:\n            - id\n            - owner\n            - action\n            - object\n            - type\n        properties:\n            id:\n                type: integer\n                format: int64\n                minimum: 1\n          #id of owner(user) who performed action\n            owner:\n                $ref: '#/components/schemas/UserSummary'\n                                 \n          #type of action performed (Verb)     \n            action:\n                type: string\n                example: 'liked'\n          #post object if the action is performed on post, user object if action is performed on other user\n            object:\n                type: object\n                additionalProperties: true\n          #type of activity (can be used to determine how to render feed in view)    \n            type:\n                 type: string\n        example:\n            id: 12\n            owner: {\n                id: 10,\n                name: 'Pranjal Pandey',\n                username: physcocode\n            }\n            action: 'liked'\n            object: {\n                id: 10,\n                type: \"Image\",\n                owner: {\n                    id: 10,\n                    name: \"Pranjal Pandey\",\n                    username: \"physcocoede\",\n                    image: \"example.com/physcocode/profile.png\"\n                 },\n                created_at: \"2017-07-21T17:32:28Z\",\n                visibility: public,\n                meta: {\n                     'status': 'I am a example status update with image',\n                     'image': 'example.com/image.png' \n                 },\n                like_count: 9,\n                comment_count: 12,\n            }\n            type: 'like'\n#---------------------------\n# Model to create message rooms(Chat rooms) where message can be exchanged\n# Message room can be both 1-1 and group\n#--------------------------- \n    MessageRoom:\n        type: object\n        properties:\n            id:\n                type: integer\n                format: int64\n                minimum: 1\n            type:\n                type: string\n                enum:\n                    - single\n                    - group\n            #id of user who created the room (imp for group rooms)\n            owner: \n                type: integer\n            # other user in room string for 1-1 and array for group    \n            users:\n                oneOf:\n                    - type: integer\n                    - type: array \n        example:\n            id: 12\n            type: 'single'\n            owner: 12\n            users: 21    \n\n#--------------------   \n# Array of messages to display \n#--------------------\n    Messages:  \n        type: array\n        items:\n            $ref: '#/components/schemas/Message'\n#---------------------------\n# Model to store message\n#--------------------------- \n    Message:\n        type: object\n        properties:\n            id:\n                type: integer\n                format: int64\n                minimum: 1\n            #id of message room the message is part of    \n            room:\n                type: integer               \n            #id of user who sent message\n            owner: \n                type: integer\n            # other user in room string for 1-1 and array for group    \n            message: \n                type: string\n            created_at:\n                type: string\n                format: date-time\n\n        example:\n            id: 12\n            room: 32\n            owner: 12\n            message: 'Hi whats up ?'                           \n\n\n#-----------------------\n# Simple model to return on successful create operations\n#-----------------------\n    Success:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n          minimum: 200\n          maximum: 201\n        message:\n          type: string\n          example: 'Post has been successfully added'\n      example:\n        code: 200\n        message: 'Object have been successfully added'   \n\n#-----------------------\n# General Error return model\n#-----------------------\n    Error:\n        type: object\n        required:\n            - code\n            - message\n        properties:\n            code:\n                type: integer\n                format: int32\n                minimum: 400\n                maximum: 511\n            message:\n                type: string\n        example: \n          code: 500\n          message: 'Oops something went wrong !'\n              \n\n#-----------------------\n# Wherever offset is requires in list\n#-----------------------\n  parameters:\n    offsetParam:      \n      name: offset\n      in: query\n      description: Number of items to skip before returning the results.\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 0\n        default: 0\n#-----------------------\n# Wherever limit is required in list\n#-----------------------\n    limitParam:       \n      name: limit\n      in: query\n      description: Maximum number of items to return.\n      required: false\n      schema:\n        type: integer\n        format: int32\n        minimum: 1\n        maximum: 100\n        default: 20\n      ",
			"canonicalURL": "/github.com/scrawler-archive/OpenAPI-spec@92aa16b349733044624315104e8933b8bbc6c77d/-/blob/socialAPI-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/scrawler-archive/OpenAPI-spec/blob/92aa16b349733044624315104e8933b8bbc6c77d/socialAPI-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /relations: delete: duplicate operationId: \"unlike\""
}