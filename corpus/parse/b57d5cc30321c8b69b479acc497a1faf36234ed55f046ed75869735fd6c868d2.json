{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/temando/serverless-openapi-documentation"
		},
		"file": {
			"name": "good.yml",
			"size": 0,
			"path": "test/project/good.yml",
			"byteSize": 19744,
			"content": "openapi: 3.0.0-RC1\ndescription: ''\nversion: 0.0.0\ntitle: ''\npaths:\n  /dock:\n    get:\n      operationId: dockSearch\n      summary: Search Documents\n      description: Searches documents in storage\n      responses:\n        '200':\n          description: Status 200 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchDocumentsResponse'\n        '422':\n          description: Status 422 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SearchDocumentsRequest'\n  '/dock/{proxy+}':\n    head:\n      operationId: dockCheck\n      summary: Document Existence\n      description: Check the existence of a document\n      responses:\n        '206':\n          description: Status 206 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        '404':\n          description: Status 404 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: proxy+\n          in: path\n          description: \u003e-\n            The Path of the document you wish to check the existence of. e.g\n            accounts/39838/users/username\n          required: true\n          schema:\n            type: string\n            pattern: '^(?!/)[-a-z0-9/]+$'\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody: {}\n    get:\n      operationId: dockRetrieve\n      summary: Get Document\n      description: Gets document by path\n      responses:\n        '200':\n          description: Status 200 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDocumentResponse'\n        '404':\n          description: Status 404 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: proxy+\n          in: path\n          description: \u003e-\n            The Path of the document you wish to retrieve. e.g\n            accounts/39838/users/username.json\n          required: true\n          schema:\n            type: string\n            pattern: '^(?!/)[-a-z0-9/]+$'\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody: {}\n    put:\n      operationId: dockStore\n      summary: Store Document\n      description: Stores a document by path\n      responses:\n        '201':\n          description: Status 201 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDocumentResponse'\n        '422':\n          description: Status 422 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: proxy+\n          in: path\n          description: \u003e-\n            The Path of the document you wish to store. e.g\n            accounts/39838/users/username\n          required: true\n          schema:\n            type: string\n            pattern: '^(?!/)[-a-z0-9/]+$'\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PutDocumentRequest'\n    patch:\n      operationId: dockPatch\n      summary: Patch Document\n      description: Patches a document by path\n      responses:\n        '201':\n          description: Status 201 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDocumentResponse'\n        '422':\n          description: Status 422 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: proxy+\n          in: path\n          description: \u003e-\n            The Path of the document you wish to patch. e.g\n            accounts/39838/users/username\n          required: true\n          schema:\n            type: string\n            pattern: '^(?!/)[-a-z0-9/]+$'\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PatchDocumentRequest'\n    delete:\n      operationId: dockDestroy\n      summary: Delete document\n      description: Deletes a document\n      responses:\n        '204':\n          description: Status 204 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        '404':\n          description: Status 404 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EmptyResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: proxy+\n          in: path\n          description: \u003e-\n            The Path of the document you wish to check the existence of. e.g\n            accounts/39838/users/username\n          required: true\n          schema:\n            type: string\n            pattern: '^(?!/)[-a-z0-9/]+$'\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody: {}\n  /batch-get:\n    post:\n      operationId: dockRetrieveMultiple\n      summary: Get Multiple Documents\n      description: Gets documents by array of paths\n      responses:\n        '200':\n          description: Status 200 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDocumentsResponse'\n        '500':\n          description: Status 500 Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      parameters:\n        - name: Content-Type\n          in: header\n          description: Content Type Header (should always be 'application/json')\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GetDocumentsRequest'\ncomponents:\n  schemas:\n    ErrorResponse:\n      title: JSON API Schema\n      description: \u003e-\n        This is a schema for responses in the JSON API format. For more, see\n        http://jsonapi.org\n      type: object\n      required:\n        - errors\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                description: \u003e-\n                  A unique identifier for this particular occurrence of the\n                  problem.\n                type: string\n              links:\n                description: \u003e-\n                  A resource object **MAY** contain references to other resource\n                  objects (\"relationships\"). Relationships may be to-one or\n                  to-many. Relationships can be specified by including a member\n                  in a resource's links object.\n                type: object\n                properties:\n                  self:\n                    description: \u003e-\n                      A `self` member, whose value is a URL for the relationship\n                      itself (a \"relationship URL\"). This URL allows the client\n                      to directly manipulate the relationship. For example, it\n                      would allow a client to remove an `author` from an\n                      `article` without deleting the people resource itself.\n                    type: string\n                    format: uri\n                  related:\n                    description: \u003e-\n                      A link **MUST** be represented as either: a string\n                      containing the link's URL or a link object.\n                    oneOf:\n                      - description: A string containing the link's URL.\n                        type: string\n                        format: uri\n                      - type: object\n                        required:\n                          - href\n                        properties:\n                          href:\n                            description: A string containing the link's URL.\n                            type: string\n                            format: uri\n                          meta:\n                            description: \u003e-\n                              Non-standard meta-information that can not be\n                              represented as an attribute or relationship.\n                            type: object\n                            additionalProperties: true\n                additionalProperties: true\n              status:\n                description: \u003e-\n                  The HTTP status code applicable to this problem, expressed as\n                  a string value.\n                type: string\n              code:\n                description: \u003e-\n                  An application-specific error code, expressed as a string\n                  value.\n                type: string\n              title:\n                description: \u003e-\n                  A short, human-readable summary of the problem. It **SHOULD\n                  NOT** change from occurrence to occurrence of the problem,\n                  except for purposes of localization.\n                type: string\n              detail:\n                description: \u003e-\n                  A human-readable explanation specific to this occurrence of\n                  the problem.\n                type: string\n              source:\n                type: object\n                properties:\n                  pointer:\n                    description: \u003e-\n                      A JSON Pointer [RFC6901] to the associated entity in the\n                      request document [e.g. \"/data\" for a primary data object,\n                      or \"/data/attributes/title\" for a specific attribute].\n                    type: string\n                  parameter:\n                    description: \u003e-\n                      A string indicating which query parameter caused the\n                      error.\n                    type: string\n              meta:\n                description: \u003e-\n                  Non-standard meta-information that can not be represented as\n                  an attribute or relationship.\n                type: object\n                additionalProperties: true\n            additionalProperties: false\n          uniqueItems: true\n        meta:\n          description: \u003e-\n            Non-standard meta-information that can not be represented as an\n            attribute or relationship.\n          type: object\n          additionalProperties: true\n        links:\n          description: \u003e-\n            A resource object **MAY** contain references to other resource\n            objects (\"relationships\"). Relationships may be to-one or to-many.\n            Relationships can be specified by including a member in a resource's\n            links object.\n          type: object\n          properties:\n            self:\n              description: \u003e-\n                A `self` member, whose value is a URL for the relationship\n                itself (a \"relationship URL\"). This URL allows the client to\n                directly manipulate the relationship. For example, it would\n                allow a client to remove an `author` from an `article` without\n                deleting the people resource itself.\n              type: string\n              format: uri\n            related:\n              description: \u003e-\n                A link **MUST** be represented as either: a string containing\n                the link's URL or a link object.\n              oneOf:\n                - description: A string containing the link's URL.\n                  type: string\n                  format: uri\n                - type: object\n                  required:\n                    - href\n                  properties:\n                    href:\n                      description: A string containing the link's URL.\n                      type: string\n                      format: uri\n                    meta:\n                      description: \u003e-\n                        Non-standard meta-information that can not be\n                        represented as an attribute or relationship.\n                      type: object\n                      additionalProperties: true\n          additionalProperties: true\n      additionalProperties: false\n    GetDocumentResponse:\n      properties:\n        Attributes:\n          type: object\n          properties:\n            Origin:\n              description: String to describe the service that created this document\n              title: The service of origin\n              type: string\n            Sovereignty:\n              default: global\n              title: The Sovereignty schema.\n              type: string\n              enum:\n                - global\n                - au\n                - eu\n                - asia\n                - us\n            Type:\n              description: The type of document that this is\n              title: Document Type\n              type: string\n          required:\n            - Origin\n            - Sovereignty\n            - Type\n        Content: {}\n        Path:\n          description: The path of the document stored\n          title: Document Path\n          type: string\n      required:\n        - Path\n        - Attributes\n        - Content\n      type: object\n    GetDocumentsRequest:\n      items:\n        description: An array of document paths to retrieve\n        title: Array of Document Paths\n        type: string\n      minItems: 1\n      type: array\n    GetDocumentsResponse:\n      required:\n        - Results\n      properties:\n        Results:\n          type: array\n          items:\n            type: object\n            properties:\n              Attributes:\n                type: object\n                properties:\n                  Origin:\n                    description: String to describe the service that created this document\n                    title: The service of origin\n                    type: string\n                  Sovereignty:\n                    default: global\n                    title: The Sovereignty schema.\n                    type: string\n                    enum:\n                      - global\n                      - au\n                      - eu\n                      - asia\n                      - us\n                  Type:\n                    description: The type of document that this is\n                    title: Document Type\n                    type: string\n                required:\n                  - Origin\n                  - Sovereignty\n                  - Type\n              Content: {}\n              Path:\n                description: The path of the document stored\n                title: Document Path\n                type: string\n            required:\n              - Path\n              - Attributes\n              - Content\n    PutDocumentRequest:\n      properties:\n        Attributes:\n          type: object\n          properties:\n            Origin:\n              description: String to describe the service that created this document\n              title: The service of origin\n              type: string\n            Sovereignty:\n              default: global\n              title: The Sovereignty schema.\n              type: string\n              enum:\n                - global\n                - au\n                - eu\n                - asia\n                - us\n            Type:\n              description: The type of document that this is\n              title: Document Type\n              type: string\n          required:\n            - Origin\n            - Sovereignty\n            - Type\n        Content: {}\n      required:\n        - Attributes\n        - Content\n      type: object\n    PatchDocumentRequest:\n      title: JSON schema for JSONPatch files\n      type: array\n      items:\n        type: object\n        required:\n          - op\n          - path\n        allOf:\n          - properties:\n              path:\n                description: A JSON Pointer path.\n                type: string\n        oneOf:\n          - required:\n              - value\n            properties:\n              op:\n                description: The operation to perform.\n                type: string\n                enum:\n                  - add\n                  - replace\n                  - test\n              value:\n                description: 'The value to add, replace or test.'\n          - properties:\n              op:\n                description: The operation to perform.\n                type: string\n                enum:\n                  - remove\n          - required:\n              - from\n            properties:\n              op:\n                description: The operation to perform.\n                type: string\n                enum:\n                  - move\n                  - copy\n              from:\n                description: \u003e-\n                  A JSON Pointer path pointing to the location to move/copy\n                  from.\n                type: string\n    SearchDocumentsRequest: {}\n    SearchDocumentsResponse: {}\n    EmptyResponse:\n      title: Empty Schema\n      type: object\n  securitySchemes: {}\nservers: []\ninfo:\n  title: Storage V2 Service\n  description: The Storage V2 service is Temando's storage platform\n  version: 2.0.7\n"
		}
	},
	"Error": "parse: parse spec: paths: /dock/{proxy+}: get: operation \"dockRetrieve\": requestBody: content must have at least one entry"
}