{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gokulakannant/express-typescript-mongodb-starter"
		},
		"file": {
			"name": "Swagger.yaml",
			"size": 0,
			"path": "src/config/yaml/Swagger.yaml",
			"byteSize": 5681,
			"content": "openapi: 3.0.0\ninfo:\n  title: Express Typescript Mongodb Starter\n  description: A express app to expose the basic api's.\n  version: 1.0.0\nservers:\n  - url: '{protocol}://{hostname}:{port}/api/{version}'\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n      hostname:\n        default: localhost\n      port:\n        default: '3001'\n      version:\n        enum:\n          - v1\n        default: v1\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\nsecurity:\n  - BasicAuth: []\ntags:\n- name: \"auth\"\n  description: \"To authendicate further apis\"\n- name: \"user\"\n  description: \"Basic crud operation of users\"\npaths:\n  /login:\n    post:\n      tags:\n      - \"auth\"\n      summary: Login user.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                password:\n                  type: string\n              example:\n                email: \"admin@gmail.com\"\n                password: \"admin123\"\n      responses:\n        200:\n          description: Logged in\n          schema:\n            $ref: \"#/definitions/ApiResponse\"\n        401:\n          description: \"Unauthorized\"\n  /admin/index:\n    post:\n      tags:\n        - \"user\"\n      summary: \"List the available users from the database\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/definitions/GridRequest\"\n      responses:\n        200:\n          description: \"Successful operation\"\n          schema:\n            $ref: \"#/definitions/ApiResponse\"\n        401:\n          description: \"Unauthorized\"\n  /admin/store:\n    post:\n      tags:\n      - \"user\"\n      summary: \"To store the user info into the database\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/definitions/UserModel\"\n      responses:\n        200:\n          description: \"Successful operation\"\n          schema:\n            $ref: \"#/definitions/ApiResponse\"\n        401:\n          description: \"Unauthorized\"\n        422:\n          description: \"User already registered\"\n  /admin/update/{userId}:\n    put:\n      tags:\n      - \"user\"\n      summary: \"To update the user info into the database\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/definitions/UserModel\"\n      parameters:\n      - name: userId\n        in: path\n        required: true\n        description: the user identifier, as userId\n        schema:\n          type: \"string\"\n      responses:\n        200:\n          description: \"Successful operation\"\n          schema:\n            $ref: \"#/definitions/ApiResponse\"\n        401:\n          description: \"Unauthorized\"\n  /admin/delete:\n    delete:\n      tags:\n      - \"user\"\n      summary: \"To delete the documents of users in database.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: \"array\"\n              example: [\n                \"5d7a20512ec76643bf1c6b61\"\n              ]\n      responses:\n        200:\n          description: \"Successful operation\"\n          schema:\n            $ref: \"#/definitions/ApiResponse\"\n        401:\n          description: \"Unauthorized\"\n  /admin/{userId}:\n    get:\n      tags:\n      - \"user\"\n      summary: \"To get the single record of user document from the collection\"\n      parameters:\n      - name: userId\n        in: path\n        required: true\n        description: the user identifier, as userId\n        schema:\n          type: \"string\"\n      responses:\n        200:\n          description: \"Successful operation\"\n          schema:\n            $ref: \"#/definitions/ApiResponse\"\n        401:\n          description: \"Unauthorized\"\ndefinitions:\n  UserModel:\n    type: \"object\"\n    properties:\n      name: \"string\"\n      email: \"string\"\n      is_active: \"string\"\n      dob: \"string\"\n      role: \"string\"\n      mobile_number: \"number\"\n    example:\n      name: \"Foo\"\n      email: \"foo@gmail.com\"\n      is_active: \"true\"\n      dob: \"2019-06-25T19:31:59.747Z\"\n      role: \"Admin\"\n      mobile_number: 9790352880\n  GridRequest:\n    type: \"object\"\n    properties:\n      row_per_page:\n        type: \"number\"\n      page:\n        type: \"number\"\n      search_query:\n        type: \"string\"\n      filter:\n        $ref: \"#/definitions/Filter\"\n      sort:\n        $ref: \"#/definitions/Sort\"\n    example: {\n      row_per_page: 5,\n      page: 1,\n      filter: {\n        is_active: \"\",\n        roles: \"\",\n        startDate: \"\",\n        endDate: \"\",\n        search_query: \"\"\n      },\n      sort: {\n        order: \"desc\",\n        orderBy: \"name\"\n      }\n    }\n  Status:\n    type: \"string\"\n    description: \"Denotes the user is active or not\"\n    enum:\n      - \"true\"\n      - \"false\"\n    example: \"true\"\n  Sort:\n    type: \"object\"\n    properties:\n      order:\n        type: \"string\"\n      orderBy:\n        type: \"string\"\n    example:\n      order: \"asc\"\n      orderBy: \"name\"\n  Filter:\n    type: \"object\"\n    properties:\n      is_active:\n        $ref: \"#/definitions/Status\"\n      roles:\n        enum:\n          - \"Admin\"\n          - \"Moderator\"\n          - \"Analyst\"\n      dob:\n        type: \"date\"\n      startDate:\n        type: \"date\"\n      endDate:\n        type: \"date\"\n  ApiResponse:\n    type: \"object\"\n    properties:\n      data:\n        type: \"object\"\n      message:\n        type: \"string\"\n    example:\n      data: {}\n      message: \"message\"\n",
			"canonicalURL": "/github.com/gokulakannant/express-typescript-mongodb-starter@f0007e7d7782629df44b53d3f84ce19f79970cc7/-/blob/src/config/yaml/Swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/gokulakannant/express-typescript-mongodb-starter/blob/f0007e7d7782629df44b53d3f84ce19f79970cc7/src/config/yaml/Swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/admin/index\": post: requestBody: parse content: application/json: schema: parse schema: parse schema: property \"filter\": parse schema: parse schema: property \"dob\": parse schema: at 1:299: unexpected schema type: \"date\""
}