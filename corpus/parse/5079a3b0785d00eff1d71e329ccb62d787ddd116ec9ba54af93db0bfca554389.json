{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hashgraph/guardian"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "api-docs/api/swagger/swagger.yaml",
			"byteSize": 63227,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"Guardian\"\n  description: \"The Guardian is a modular open-source solution that includes best-in-class identity management and decentralized ledger technology (DLT) libraries. At the heart of the Guardian solution is a sophisticated Policy Workflow Engine (PWE) that enables applications to offer a requirements-based tokenization implementation.\"\n  version: \"1.2.1\"\n  contact:\n    name: \"API developer\"\n    url: \"https://envisionblockchain.com\"\n    email: \"info@envisionblockchain.com\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\nservers:\n- url: /api/v1\n  description: version 1.0\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: \"http\"\n      scheme: \"bearer\"\n      bearerFormat: \"JWT\"\n  schemas:\n    Credentials:\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          type: string\n        password:\n          type: string\n    Account:\n      type: object\n      required:\n        - username\n        - role\n      properties:\n        username:\n          type: string\n        role:\n          type: string\n        did:\n          type: string\n    Session:\n      type: object\n      required:\n        - username\n        - role\n        - accessToken\n      properties:\n        username:\n          type: string\n        role:\n          type: string\n        accessToken:\n          type: string\n    User:\n      type: object\n      required:\n        - username\n        - role\n      properties:\n        confirmed:\n          type: string\n        failed:\n          type: string\n        username:\n          type: string\n        role:\n          type: string\n        hederaAccountId:\n          type: string\n        hederaAccountKey:\n          type: string\n        did:\n          type: string\n        didDocument:\n            type: object\n        vcDocument:\n            type: object\n        addressBook:\n          type: object\n          properties:\n            appnetName:\n              type: string\n            addressBook:\n              type: string\n            didTopic:\n              type: string\n            vcTopic:\n              type: string\n            didServerUrl:\n              type: string\n            didTopicMemo:\n              type: string\n            vcTopicMemo:\n              type: string\n    Schema:\n      type: object\n      required:\n        - id\n        - name\n        - description\n        - entity\n        - document\n      properties:\n        id:\n          type: string\n        uuid:\n          type: string\n        name:\n          type: string\n        description:\n          type: string\n        entity:\n          type: string\n        hash:\n          type: string\n        status:\n          type: string\n        document:\n          type: string\n    ImportSchema:\n      type: object\n      required:\n        - schemes\n      properties:\n        schemes:\n          type: array\n          items:\n            type: object\n            required:\n              - document\n              - entity\n              - name\n              - uuid\n            properties:\n              document:\n                type: string\n              entity:\n                type: string\n              hash:\n                type: string\n              name:\n                type: string\n              uuid:\n                type: string\n    ExportSchema:\n      type: object\n      required:\n        - ids\n      properties:\n        name:\n          type: string\n        version:\n          type: string\n        messageId:\n          type: string\n    Token:\n      type: object\n      required:\n        - changeSupply\n        - decimals\n        - enableAdmin\n        - enableKYC\n        - enableFreeze\n        - enableWipe\n        - initialSupply\n        - tokenName\n        - tokenSymbol\n        - tokenType\n      properties:\n        changeSupply:\n          type: boolean\n        decimals:\n          type: string\n        enableAdmin:\n          type: boolean\n        enableFreeze:\n          type: boolean\n        enableKYC:\n          type: boolean\n        enableWipe:\n          type: boolean\n        initialSupply:\n          type: string\n        tokenName:\n          type: string\n        tokenSymbol:\n          type: string\n        tokenType:\n          type: string\n    TokenInfo:\n      type: object\n      required:\n        - id\n        - tokenId\n        - tokenName\n        - tokenSymbol\n        - tokenType\n        - decimals\n        - associated\n        - balance\n        - frozen\n        - kyc\n      properties:\n        id:\n          type: string\n        tokenId:\n          type: string\n        tokenName:\n          type: string\n        tokenSymbol:\n          type: string\n        tokenType:\n          type: string\n        decimals:\n          type: string\n        associated:\n          type: boolean\n        balance:\n          type: string\n        frozen:\n          type: boolean\n        kyc:\n          type: boolean\n    PolicyConfig:\n      type: object\n      required:\n        - name\n        - version\n        - description\n        - topicDescription\n        - config\n        - topicId\n        - policyTag\n      properties:\n        name:\n          type: string\n        version:\n          type: string\n        description:\n          type: string\n        topicDescription:\n          type: string\n        config:\n          type: object\n        status:\n          type: string\n        owner:\n          type: string\n        policyRoles:\n          type: array\n          items:\n            type: string\n        topicId:\n          type: string\n        policyTag:\n          type: string\n    TrustChains:\n      type: object\n      required:\n        - chain\n        - userMap\n      properties:\n        chain:\n          type: array\n          items:\n            type: object\n            required:\n              - id\n              - type\n              - tag\n              - label\n              - schema\n              - owner\n              - document\n            properties:\n              id:\n                type: string\n              type:\n                type: string\n              tag:\n                type: string\n              label:\n                type: string\n              schema:\n                type: string\n              owner:\n                type: string\n              document:\n                type: object\n        userMap:\n          type: array\n          items:\n            type: object\n            required:\n              - did\n              - username\n            properties:\n              did:\n                type: string\n              username:\n                type: string\n    VerifiablePresentation:\n      type: object\n      required:\n        - hash\n        - id\n        - policyId\n        - signature\n        - status\n        - tag\n        - type\n        - updateDate\n        - createDate\n        - owner\n        - document\n      properties:\n        hash:\n          type: string\n        id:\n          type: string\n        policyId:\n          type: string\n        signature:\n          type: string\n        status:\n          type: string\n        tag:\n          type: string\n        type:\n          type: string\n        updateDate:\n          type: string\n        createDate:\n          type: string\n        owner:\n          type: string\n        document:\n          type: object\n    PublishPolicy:\n      type: object\n      required:\n        - errors\n        - isValid\n        - policies\n      properties:\n        errors:\n          type: array\n          items:\n            type: object\n        isValid:\n          type: boolean\n        policies:\n          type: array\n          items:\n            type: object\n    ValidatePolicy:\n      type: object\n      required:\n        - config\n        - results\n      properties:\n        config:\n          type: object\n        results:\n          type: object\n    PolicyBlock:\n      type: object\n      required:\n        - id\n        - blockType\n        - isActive\n        - uiMetaData\n      properties:\n        id:\n          type: string\n        blockType:\n          type: string\n        isActive:\n          type: boolean\n        uiMetaData:\n          type: object\n        blocks:\n          type: array\n          items:\n            type: object\n    PolicyBlockData:\n      type: object\n      required:\n        - id\n        - isActive\n        - uiMetaData\n        - data\n      properties:\n        id:\n          type: string\n        blockType:\n          type: string\n        isActive:\n          type: boolean\n        uiMetaData:\n          type: object\n        data:\n          type: object\n        fields:\n          type: array\n          items:\n            type: object\n        index:\n          type: number\n        roles:\n          type: array\n          items:\n            type: string\n        blocks:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyBlock'\n    ExportPolicy:\n      type: object\n      required:\n        - name\n        - version\n        - messageId\n      properties:\n        name:\n          type: string\n        version:\n          type: string\n        tokens:\n          type: string\n    PreviewPolicy:\n      type: object\n      required:\n        - policy\n        - schemas\n        - tokens\n      properties:\n        policy:\n          type: object\n        schemas:\n          type: array\n          items:\n            type: object\n        tokens:\n          type: array\n          items:\n            type: object\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: number\n        message:\n          type: string\n    ExternalData:\n      type: object\n      required:\n        - owner\n        - policyTag\n        - document\n      properties:\n        owner:\n          type: string\n        policyTag:\n          type: string\n        document:\n          type: object\n    HederaAccount:\n      type: object\n      required:\n        - id\n        - key\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n    CommonSettings:\n      type: object\n      properties:\n        operatorId:\n          type: string\n        operatorKey:\n          type: string\n        schemaTopicId:\n          type: string\n        nftApiKey:\n          type: string\n    LogFilters:\n      type: object\n      properties:\n        type:\n          type: string\n        startDate:\n          type: string\n        endDate:\n          type: string\n        attributes:\n          type: array\n          items:\n            type: string\n        message:\n          type: string\n        pageSize:\n          type: number\n        pageIndex:\n          type: number\n        sortDirection:\n          type: string\n          enum: [ASC, DESC]\n    Log:\n      type: object\n      properties:\n        type:\n          type: string\n        datetime:\n          type: string\n        message:\n          type: string\n        attributes:\n          type: array\n          items:\n            type: string\ntags:\n  - name: \"accounts\"\n    description: \"Operations related to Guardian users\"\n  - name: \"profiles\"\n    description: \"Hedera profile related operations\"\n  - name: \"schemas\"\n    description: \"Operations with data schemas\"\n  - name: \"tokens\"\n    description: \"Everything about tokens\"\n  - name: \"trustchains\"\n    description: \"Audit and trust chain\"\n  - name: \"policies\"\n    description: \"Policy engine operations\"\n  - name: \"external\"\n    description: \"APIs for external data sources\"\n  - name: \"demo\"\n    description: \"Demo Only APIs\"\n  - name: \"ipfs\"\n    description: \"IPFS Operations\"\n  - name: \"settings\"\n    description: \"Settings operations\"\n  - name: \"logs\"\n    description: \"Logs operations\"\npaths:\n  /accounts:\n    get:\n      tags:\n        - accounts\n      description: Returns all users except those with roles Root Authority and Auditor. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Returns a list of users, excluding Root Authority and Auditors.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /accounts/session:\n    get:\n      tags:\n        - accounts\n      description: Returns current user session.\n      security:\n      - bearerAuth: []\n      summary: Returns current session of the user.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Session'\n        401:\n          description: Unauthorized.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /accounts/register:\n    post:\n      tags:\n        - accounts\n      summary: Registers a new user account.\n      requestBody:\n        description: Object that contain username, password and role (optional) fields.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Credentials\"\n      responses:\n        201:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /accounts/login:\n    post:\n      tags:\n        - accounts\n      summary: Logs user into the system.\n      requestBody:\n        description: Object that contains username and password fields.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Credentials\"\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Session'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /profiles/{username}/balance:\n    get:\n      tags:\n        - profiles\n      description: Requests Hedera account balance. Only users with the Installer role are allowed to make the request.\n      parameters:\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: The name of the user for whom to fetch the balance.\n      security:\n      - bearerAuth: []\n      summary: Returns user's Hedera account balance.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: string\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /profiles/{username}:\n    get:\n      tags:\n        - profiles\n      description: Returns user account information. For users with the Root Authority role it also returns address book and VC document information.\n      parameters:\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: The name of the user for whom to fetch the information.\n      security:\n      - bearerAuth: []\n      summary: Returns user account info.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - profiles\n      description: Sets Hedera credentials for the user. For users with the Root Authority role it also creates an address book.\n      parameters:\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: The name of the user for whom to update the information.\n      security:\n      - bearerAuth: []\n      summary: Sets Hedera credentials for the user.\n      requestBody:\n        description: Object that contains the Hedera account data.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n      responses:\n        201:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas:\n    post:\n      tags:\n        - schemas\n      description: Creates new schema. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Create new schema.\n      requestBody:\n        description: Object that contains a valid schema.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Schema\"\n      responses:\n        201:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    get:\n      tags:\n        - schemas\n      description: Returns all schemas.\n      security:\n      - bearerAuth: []\n      summary: Returns all schemas.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/{schemaId}/publish:\n    put:\n      tags:\n        - schemas\n      description: Publishes the schema with the provided (internal) schema ID onto IPFS, sends a message featuring IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: schemaId\n          schema:\n            type: string\n          required: true\n          description: Schema ID.\n      security:\n      - bearerAuth: []\n      summary: Publishes the schema.\n      requestBody:\n        description: Object that contains policy version.\n        required: true\n        content:\n          application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/{schemaId}:\n    put:\n      tags:\n        - schemas\n      description: Updates the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: schemaId\n          schema:\n            type: string\n          required: true\n          description: Schema ID.\n      security:\n      - bearerAuth: []\n      summary: Updates the schema.\n      requestBody:\n        description: Object that contains a valid schema.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Schema\"\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    delete:\n      tags:\n        - schemas\n      description: Deletes the schema with the provided schema ID. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: schemaId\n          schema:\n            type: string\n          required: true\n          description: Schema ID.\n      security:\n      - bearerAuth: []\n      summary: Deletes the schema.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/import/file:\n    post:\n      tags:\n        - schemas\n      description: Imports new schema from a zip file into the local DB. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Imports new schema from a zip file.\n      requestBody:\n        description: A zip file containing schema to be imported.\n        required: true\n      responses:\n        201:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/import/message:\n    post:\n      tags:\n        - schemas\n      description: Imports new schema from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Imports new schema from IPFS.\n      requestBody:\n        description: Object that contains the identifier of the Hedera message which contains the IPFS CID of the schema.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                messageId:\n                  type: string\n      responses:\n        201:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/import/message/preview:\n    post:\n      tags:\n        - schemas\n      description: Previews the schema from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Schema preview from IPFS.\n      requestBody:\n        description: Object that contains the identifier of the Hedera message which contains the IPFS CID of the schema.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                messageId:\n                  type: string\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n                \n  /schemas/import/file/preview:\n    post:\n      tags:\n        - schemas\n      description: Previews the schema from a zip file. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Schema preview from a zip file.\n      requestBody:\n        description: A zip file containing the schema to be viewed.\n        required: true\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schema'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/{schemaId}/export/message:\n    post:\n      tags:\n        - schemas\n      description: Returns Hedera message IDs of the published schemas, these messages contain IPFS CIDs of these schema files. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: List Hedera message IDs of published schemas.\n      parameters:\n        - in: path\n          name: schemaId\n          schema:\n            type: string\n          required: true\n          description: Selected schema ID.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ExportSchema\"\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /schemas/{schemaId}/export/file:\n    post:\n      tags:\n        - schemas\n      description: Returns schema files for the schemas. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Return zip file with schemas.\n      parameters:\n        - in: path\n          name: schemaId\n          schema:\n            type: string\n          required: true\n          description: Selected schema ID.\n      responses:\n        200:\n          description: Successful operation. Response zip file\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens:\n    get:\n      tags:\n        - tokens\n      description: Returns all tokens. For the Root Authority role it returns only the list of tokens, for other users it also returns token balances as well as the KYC, Freeze, and Association statuses. Not allowed for the Auditor role.\n      security:\n      - bearerAuth: []\n      summary: Return a list of tokens.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TokenInfo'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    post:\n      tags:\n        - tokens\n      description: Creates a new token. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Creates a new token.\n      requestBody:\n        description: Object that contains token information.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Token\"\n      responses:\n        201:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/TokenInfo'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/{username}/info:\n    get:\n      tags:\n        - tokens\n      description: Returns user information for the selected token. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfo'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/associate:\n    put:\n      tags:\n        - tokens\n      description: Associates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n      security:\n      - bearerAuth: []\n      summary: Associates the user with the provided Hedera token.\n      responses:\n        200:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/dissociate:\n    put:\n      tags:\n        - tokens\n      description: Disassociates the user with the provided Hedera token. Only users with the Installer role are allowed to make the request.\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n      security:\n      - bearerAuth: []\n      summary: Associate the user with the provided Hedera token.\n      responses:\n        200:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/{username}/grantKyc:\n    put:\n      tags:\n        - tokens\n      description: Sets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username.\n      security:\n      - bearerAuth: []\n      summary: Sets the KYC flag for the user.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfo'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/{username}/revokeKyc:\n    put:\n      tags:\n        - tokens\n      description: Unsets the KYC flag for the user. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username.\n      security:\n      - bearerAuth: []\n      summary: Unsets the KYC flag for the user.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfo'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/{username}/freeze:\n    put:\n      tags:\n        - tokens\n      description: Freezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username.\n      security:\n      - bearerAuth: []\n      summary: Freeze transfers of the specified token for the user.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfo'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /tokens/{tokenId}/{username}/unfreeze:\n    put:\n      tags:\n        - tokens\n      description: Unfreezes transfers of the specified token for the user. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: tokenId\n          schema:\n            type: string\n          required: true\n          description: Token ID.\n        - in: path\n          name: username\n          schema:\n            type: string\n          required: true\n          description: Username.\n      security:\n      - bearerAuth: []\n      summary: Unfreezes transfers of the specified token for the user.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfo'\n        400:\n          description: Bad Request.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /trustchains:\n    get:\n      tags:\n        - trustchains\n      description: Requests all VP documents. Only users with the Auditor role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Returns a list of all VP documents.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VerifiablePresentation'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /trustchains/{hash}:\n    get:\n      tags:\n        - trustchains\n      description: Builds and returns a trustchain, from the VP to the root VC document. Only users with the Auditor role are allowed to make the request.\n      parameters:\n        - in: path\n          name: hash\n          schema:\n            type: string\n          required: true\n          description: Hash or ID of a VP document.\n      security:\n      - bearerAuth: []\n      summary: Returns a trustchain for a VP document.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TrustChains'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies:\n    get:\n      tags:\n        - policies\n      description: Returns all policies. Only users with the Root Authority and Installer role are allowed to make the request.\n      security:\n        - bearerAuth: []\n      summary: Return a list of all policies.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PolicyConfig'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n    post:\n      tags:\n        - policies\n      description: Creates a new policy. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Creates a new policy.\n      requestBody:\n        description: Object that contains policy configuration.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PolicyConfig\"\n      responses:\n        200:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}:\n    get:\n      tags:\n        - policies\n      description: Retrieves policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n      summary: Retrieves policy configuration.\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyConfig'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - policies\n      description: Updates policy configuration for the specified policy ID. Only users with the Root Authority role are allowed to make the request.\n      summary: Updates policy configuration.\n      parameters:\n        - in: path\n          name: policyId\n          description: Selected policy ID.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Object that contains policy configuration.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PolicyConfig\"\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyConfig'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}/publish:\n    put:\n      tags:\n        - policies\n      description: Publishes the policy with the specified (internal) policy ID onto IPFS, sends a message featuring its IPFS CID into the corresponding Hedera topic. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n      requestBody:\n        description: Object that contains policy version.\n        required: true\n        content:\n          application/json:\n              schema:\n                type: object\n                properties:\n                  policyVersion:\n                    type: string\n      summary: Publishes the policy onto IPFS.\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PublishPolicy'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/validate:\n    post:\n      tags:\n        - policies\n      description: Validates selected policy. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Validates policy.\n      requestBody:\n        description: Object that contains policy configuration.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PolicyConfig\"\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ValidatePolicy'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}/blocks:\n    get:\n      tags:\n        - policies\n      description: Returns data from the root policy block. Only users with the Root Authority and Installer role are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n      summary: Retrieves data for the policy root block.\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyBlock'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}/blocks/{uuid}:\n    get:\n      tags:\n        - policies\n      description: Requests block data. Only users with a role that described in block are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n        - in: path\n          name: uuid\n          schema:\n            type: string\n          required: true\n          description: Selected block UUID.\n      summary: Requests block data.\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyBlockData'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - policies\n      description: Sends data to the specified block.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n        - in: path\n          name: uuid\n          schema:\n            type: string\n          required: true\n          description: Selected block UUID.\n      summary: Sends data to the specified block.\n      requestBody:\n        description: Object with the data to be sent to the block.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}/tag/{tag}:\n    get:\n      tags:\n        - policies\n      description: Requests block ID from a policy by tag. Only users with the Root Authority and Installer roles are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n        - in: path\n          name: tag\n          schema:\n            type: string\n          required: true\n          description: Tag from the selected policy.\n      summary: Requests block ID from a policy by tag.\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}/export/message:\n    get:\n      tags:\n        - policies\n      description: Returns the Hedera message ID for the specified policy published onto IPFS. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n      security:\n      - bearerAuth: []\n      summary: Return Heder message ID for the specified published policy.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportPolicy'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/{policyId}/export/file:\n    get:\n      tags:\n        - policies\n      description: Returns a zip file containing the published policy and all associated artifacts, i.e. schemas and VCs. Only users with the Root Authority role are allowed to make the request.\n      parameters:\n        - in: path\n          name: policyId\n          schema:\n            type: string\n          required: true\n          description: Selected policy ID.\n      security:\n      - bearerAuth: []\n      summary: Return policy and its artifacts in a zip file format for the specified policy.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportPolicy'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  \n  /policies/import/message:\n    post:\n      tags:\n        - policies\n      description: Imports new policy and all associated artifacts from IPFS into the local DB. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Imports new policy from IPFS.\n      requestBody:\n        description: Object that contains the identifier of the Hedera message which contains the IPFS CID of the Policy.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                messageId:\n                  type: string\n      responses:\n        201:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PolicyConfig'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/import/file:\n    post:\n      tags:\n        - policies\n      description: Imports new policy and all associated artifacts, such as schemas and VCs, from the provided zip file into the local DB. Only users with the Root Authority role are allowed to make the request.\n      security:\n      - bearerAuth: []\n      summary: Imports new policy from a zip file.\n      requestBody:\n        description: A zip file that contains the policy and associated schemas and VCs to be imported.\n        required: true\n      responses:\n        201:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PolicyConfig'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/import/message/preview:\n    post:\n      tags:\n        - policies\n      description: Previews the policy from IPFS without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.\n      summary: Policy preview from IPFS.\n      security:\n      - bearerAuth: []\n      requestBody:\n        description: Object that contains the identifier of the Hedera message which contains the IPFS CID of the policy.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                messageId:\n                  type: string\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreviewPolicy'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /policies/import/file/preview:\n    post:\n      tags:\n        - policies\n      description: Previews the policy from a zip file without loading it into the local DB. Only users with the Root Authority role are allowed to make the request.\n      summary: Policy preview from a zip file.\n      security:\n      - bearerAuth: []\n      requestBody:\n        description: A zip file that contains the policy and associated schemas and VCs to be viewed.\n        required: true\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PreviewPolicy'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /external:\n    post:\n      tags:\n        - external\n      description: Sends data from an external source.\n      summary: Sends data from an external source.\n      requestBody:\n        description: Object that contains a VC Document.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ExternalData\"\n      responses:\n        201:\n          description: Successful operation.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /demo/registeredUsers:\n    get:\n      tags:\n        - demo\n      deprecated: true\n      description: Returns all registered user accounts.\n      responses:\n        200:\n          description: All registered user accounts.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /demo/randomKey:\n    get:\n      tags:\n        - demo\n      deprecated: true\n      description: Generates a new Hedera account with a random private key.\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HederaAccount'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /ipfs/file:\n    post:\n      tags:\n        - ipfs\n      description: Add file to ipfs.\n      summary: Add file to ipfs.\n      requestBody:\n        description: Data array of file.\n        required: true\n        content:\n          binary/octet-stream:\n              schema:\n                type: string\n                format: binary\n      security:\n      - bearerAuth: []\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                description: CID of added file.\n                type: string\n        401:\n          description: Unauthorized.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /settings:\n    get:\n      tags:\n        - settings\n      description: Returns current settings. For users with the Root Authority role only.\n      security:\n      - bearerAuth: []\n      summary: Returns current settings.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommonSettings'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - settings\n      description: Set settings. For users with the Root Authority role only.\n      security:\n      - bearerAuth: []\n      requestBody:\n        description: Settings.\n        required: true\n        content:\n          application/json:\n              schema:\n                $ref: '#/components/schemas/CommonSettings'\n      summary: Set settings.\n      responses:\n        200:\n          description: Successful operation.\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /logs:\n    post:\n      tags:\n        - logs\n      description: Returns logs. For users with the Root Authority role only.\n      security:\n      - bearerAuth: []\n      requestBody:\n        description: Log filters.\n        content:\n          application/json:\n              schema:\n                $ref: '#/components/schemas/LogFilters'\n      summary: Returns logs.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  totalCount:\n                    type: number\n                  logs:\n                    $ref: '#/components/schemas/Log'\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /logs/attributes:\n    get:\n      tags:\n        - logs\n      description: Returns logs attributes. For users with the Root Authority role only.\n      parameters:\n        - in: query\n          name: name\n          schema:\n            type: string\n          description: Part of name.\n      security:\n      - bearerAuth: []\n      summary: Returns logs attributes.\n      responses:\n        200:\n          description: Successful operation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items: \n                  type: string\n        401:\n          description: Unauthorized.\n        403:\n          description: Forbidden.\n        500:\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'"
		}
	},
	"Error": "parse: parse spec: paths: /policies/import/file: post: operation \"\": requestBody: content must have at least one entry"
}