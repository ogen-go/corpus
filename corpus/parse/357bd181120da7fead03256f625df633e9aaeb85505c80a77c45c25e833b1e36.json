{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/localstack/presentations"
		},
		"file": {
			"name": "ecsapi-demo-cloudformation.yaml",
			"size": 0,
			"path": "2022-05-06_Demo/sample4/cloudformation-template-yaml/ecsapi-demo-cloudformation.yaml",
			"byteSize": 23521,
			"content": "# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: MIT\n\nAWSTemplateFormatVersion: '2010-09-09'\n\nDescription: Demo of an AWS Fargate cluster hosting APIs exposed through API Gateway.\n\nParameters:\n  EnvironmentName:\n    Type: String\n    Default: ecsapi-demo\n    Description: \"A friendly environment name that will be used for namespacing all cluster resources. Example: staging, qa, or production\"\n  PrivateDNSNamespaceName:\n    Type: String\n    Default: example.com\n    Description: \"The private DNS name that identifies the name that you want to use to locate your resources\"\n  MinContainersFoodstoreFoods:\n    Type: Number\n    Default: 3\n    Description: \"Minimum number of ECS tasks per ECS service\"\n  MaxContainersFoodstoreFoods:\n    Type: Number\n    Default: 30\n    Description: \"Maximum number of ECS tasks per ECS service\"\n  AutoScalingTargetValueFoodstoreFoods:\n    Type: Number\n    Default: 50\n    Description: \"Target CPU utilizatio (%) for ECS services auto scaling\"\n  MinContainersPetstorePets:\n    Type: Number\n    Default: 3\n    Description: \"Minimum number of ECS tasks per ECS service\"\n  MaxContainersPetstorePets:\n    Type: Number\n    Default: 30\n    Description: \"Maximum number of ECS tasks per ECS service\"\n  AutoScalingTargetValuePetstorePets:\n    Type: Number\n    Default: 50\n    Description: \"Target CPU utilizatio (%) for ECS services auto scaling\"\n\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      -\n        Label:\n          default: \"Generic\"\n        Parameters:\n          - EnvironmentName\n          - PrivateDNSNamespaceName\n      -\n        Label:\n          default: \"FoodstoreFoods Service\"\n        Parameters:\n          - MinContainersFoodstoreFoods\n          - MaxContainersFoodstoreFoods\n          - AutoScalingTargetValueFoodstoreFoods\n      -\n        Label:\n          default: \"PetstorePets Service\"\n        Parameters:\n          - MinContainersPetstorePets\n          - MaxContainersPetstorePets\n          - AutoScalingTargetValuePetstorePets\n\nMappings:\n  SubnetConfig:\n    VPC:\n      CIDR: '10.0.0.0/16'\n    PublicOne:\n      CIDR: '10.0.0.0/24'\n    PublicTwo:\n      CIDR: '10.0.1.0/24'\n    PublicThree:\n      CIDR: '10.0.2.0/24'\n    PrivateOne:\n      CIDR: '10.0.100.0/24'\n    PrivateTwo:\n      CIDR: '10.0.101.0/24'\n    PrivateThree:\n      CIDR: '10.0.102.0/24'\n\nResources:\n\n  DynamoDBTableFoodstoreFoods:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: foodId\n          AttributeType: S\n      KeySchema:\n        - AttributeName: foodId\n          KeyType: HASH\n\n  DynamoDBTablePetstorePets:\n    Type: AWS::DynamoDB::Table\n    Properties:\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: petId\n          AttributeType: S\n      KeySchema:\n        - AttributeName: petId\n          KeyType: HASH\n\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      EnableDnsSupport: true\n      EnableDnsHostnames: true\n      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']\n\n  PublicSubnetOne:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone: !Select\n        - 0\n        - Fn::GetAZs: !Ref 'AWS::Region'\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']\n      MapPublicIpOnLaunch: true\n  PublicSubnetTwo:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone: !Select\n        - 1\n        - Fn::GetAZs: !Ref 'AWS::Region'\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']\n      MapPublicIpOnLaunch: true\n  PublicSubnetThree:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone: !Select\n        - 2\n        - Fn::GetAZs: !Ref 'AWS::Region'\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PublicThree', 'CIDR']\n      MapPublicIpOnLaunch: true\n\n  PrivateSubnetOne:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone: !Select\n        - 0\n        - Fn::GetAZs: !Ref 'AWS::Region'\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']\n  PrivateSubnetTwo:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone: !Select\n        - 1\n        - Fn::GetAZs: !Ref 'AWS::Region'\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']\n  PrivateSubnetThree:\n    Type: AWS::EC2::Subnet\n    Properties:\n      AvailabilityZone: !Select\n        - 2\n        - Fn::GetAZs: !Ref 'AWS::Region'\n      VpcId: !Ref 'VPC'\n      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateThree', 'CIDR']\n\n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n  GatewayAttachement:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      VpcId: !Ref 'VPC'\n      InternetGatewayId: !Ref 'InternetGateway'\n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PublicRoute:\n    Type: AWS::EC2::Route\n    DependsOn: GatewayAttachement\n    Properties:\n      RouteTableId: !Ref 'PublicRouteTable'\n      DestinationCidrBlock: '0.0.0.0/0'\n      GatewayId: !Ref 'InternetGateway'\n  PublicSubnetOneRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetOne\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnetTwoRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetTwo\n      RouteTableId: !Ref PublicRouteTable\n  PublicSubnetThreeRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      SubnetId: !Ref PublicSubnetThree\n      RouteTableId: !Ref PublicRouteTable\n\n  NatGatewayOneAttachment:\n    Type: AWS::EC2::EIP\n    DependsOn: GatewayAttachement\n    Properties:\n        Domain: vpc\n  NatGatewayTwoAttachment:\n    Type: AWS::EC2::EIP\n    DependsOn: GatewayAttachement\n    Properties:\n        Domain: vpc\n  NatGatewayThreeAttachment:\n    Type: AWS::EC2::EIP\n    DependsOn: GatewayAttachement\n    Properties:\n        Domain: vpc\n  NatGatewayOne:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId\n      SubnetId: !Ref PublicSubnetOne\n  NatGatewayTwo:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId\n      SubnetId: !Ref PublicSubnetTwo\n  NatGatewayThree:\n    Type: AWS::EC2::NatGateway\n    Properties:\n      AllocationId: !GetAtt NatGatewayThreeAttachment.AllocationId\n      SubnetId: !Ref PublicSubnetThree\n  PrivateRouteTableOne:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PrivateRouteOne:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTableOne\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGatewayOne\n  PrivateRouteTableOneAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTableOne\n      SubnetId: !Ref PrivateSubnetOne\n  PrivateRouteTableTwo:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PrivateRouteTwo:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTableTwo\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGatewayTwo\n  PrivateRouteTableTwoAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTableTwo\n      SubnetId: !Ref PrivateSubnetTwo\n  PrivateRouteTableThree:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      VpcId: !Ref 'VPC'\n  PrivateRouteThree:\n    Type: AWS::EC2::Route\n    Properties:\n      RouteTableId: !Ref PrivateRouteTableThree\n      DestinationCidrBlock: 0.0.0.0/0\n      NatGatewayId: !Ref NatGatewayThree\n  PrivateRouteTableThreeAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PrivateRouteTableThree\n      SubnetId: !Ref PrivateSubnetThree\n\n  DynamoDBEndpoint:\n    Type: AWS::EC2::VPCEndpoint\n    Properties:\n      PolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Action: \"*\"\n            Principal: \"*\"\n            Resource: \"*\"\n      RouteTableIds:\n        - !Ref 'PrivateRouteTableOne'\n        - !Ref 'PrivateRouteTableTwo'\n        - !Ref 'PrivateRouteTableThree'\n      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb\n      VpcId: !Ref 'VPC'\n\n  ECSCluster:\n    Type: AWS::ECS::Cluster\n\n  ContainerSecurityGroup:\n    Type: AWS::EC2::SecurityGroup\n    Properties:\n      GroupDescription: Access to the Fargate containers\n      VpcId: !Ref 'VPC'\n\n  ContainerSecurityGroupSelfIngress:\n    Type: AWS::EC2::SecurityGroupIngress\n    Properties:\n      GroupId: !Ref ContainerSecurityGroup\n      SourceSecurityGroupId: !Ref ContainerSecurityGroup\n      IpProtocol: tcp\n      FromPort: 8080\n      ToPort: 8080\n\n  AutoScalingRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ecs-tasks.amazonaws.com\n            Action: 'sts:AssumeRole'\n      ManagedPolicyArns:\n        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'\n\n  ECSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: [ecs.amazonaws.com]\n          Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n      - PolicyName: ecs-service\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n              - 'ec2:AttachNetworkInterface'\n              - 'ec2:CreateNetworkInterface'\n              - 'ec2:CreateNetworkInterfacePermission'\n              - 'ec2:DeleteNetworkInterface'\n              - 'ec2:DeleteNetworkInterfacePermission'\n              - 'ec2:Describe*'\n              - 'ec2:DetachNetworkInterface'\n\n              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'\n              - 'elasticloadbalancing:DeregisterTargets'\n              - 'elasticloadbalancing:Describe*'\n              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'\n              - 'elasticloadbalancing:RegisterTargets'\n            Resource: '*'\n\n  ECSTaskExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n        - Effect: Allow\n          Principal:\n            Service: [ecs-tasks.amazonaws.com]\n          Action: ['sts:AssumeRole']\n      Path: /\n      Policies:\n        - PolicyName: AmazonECSTaskExecutionRolePolicy\n          PolicyDocument:\n            Statement:\n            - Effect: Allow\n              Action:\n                # Allow the ECS Tasks to download images from ECR\n                - 'ecr:GetAuthorizationToken'\n                - 'ecr:BatchCheckLayerAvailability'\n                - 'ecr:GetDownloadUrlForLayer'\n                - 'ecr:BatchGetImage'\n\n                # Allow the ECS tasks to upload logs to CloudWatch\n                - 'logs:CreateLogStream'\n                - 'logs:PutLogEvents'\n              Resource: '*'\n\n  PrivateDNSNamespace:\n    Type: 'AWS::ServiceDiscovery::PrivateDnsNamespace'\n    Properties:\n      Vpc: !Ref VPC\n      Name: !Ref PrivateDNSNamespaceName\n\n  ServiceDiscoveryServiceFoodstoreFoods:\n    Type: 'AWS::ServiceDiscovery::Service'\n    Properties:\n      DnsConfig:\n        DnsRecords:\n          - Type: SRV\n            TTL: 60\n        NamespaceId: !Ref PrivateDNSNamespace\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      Name: 'foods.foodstore'\n\n  ServiceDiscoveryServicePetstorePets:\n    Type: 'AWS::ServiceDiscovery::Service'\n    Properties:\n      DnsConfig:\n        DnsRecords:\n          - Type: SRV\n            TTL: 60\n        NamespaceId: !Ref PrivateDNSNamespace\n      HealthCheckCustomConfig:\n        FailureThreshold: 1\n      Name: 'pets.petstore'\n\n  TaskRoleFoodstoreFoods:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ecs-tasks.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Policies:\n      - PolicyName: dynamodb-table-access\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n            - dynamodb:BatchGet*\n            - dynamodb:DescribeStream\n            - dynamodb:DescribeTable\n            - dynamodb:Get*\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:BatchWrite*\n            - dynamodb:CreateTable\n            - dynamodb:Delete*\n            - dynamodb:Update*\n            - dynamodb:PutItem\n            Resource: !GetAtt DynamoDBTableFoodstoreFoods.Arn\n\n  TaskRolePetstorePets:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ecs-tasks.amazonaws.com\n            Action: 'sts:AssumeRole'\n      Policies:\n      - PolicyName: dynamodb-table-access\n        PolicyDocument:\n          Statement:\n          - Effect: Allow\n            Action:\n            - dynamodb:BatchGet*\n            - dynamodb:DescribeStream\n            - dynamodb:DescribeTable\n            - dynamodb:Get*\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:BatchWrite*\n            - dynamodb:CreateTable\n            - dynamodb:Delete*\n            - dynamodb:Update*\n            - dynamodb:PutItem\n            Resource: !GetAtt DynamoDBTablePetstorePets.Arn\n\n  TaskDefinitionFoodstoreFoods:\n    Type: 'AWS::ECS::TaskDefinition'\n    Properties:\n      TaskRoleArn: !GetAtt TaskRoleFoodstoreFoods.Arn\n      RequiresCompatibilities:\n        - FARGATE\n      ContainerDefinitions:\n          - Name: 'FoodstoreFoods'\n            Image: 'localstack/ecsapi-demo-foodstore:latest'\n            Essential: true\n            PortMappings:\n              - ContainerPort: 8080\n                Protocol: tcp\n            Environment:\n              - Name: DynamoDBTable\n                Value: !Ref DynamoDBTableFoodstoreFoods\n      NetworkMode: awsvpc\n      Memory: '512'\n      Cpu: '256'\n\n  TaskDefinitionPetstorePets:\n    Type: 'AWS::ECS::TaskDefinition'\n    Properties:\n      TaskRoleArn: !GetAtt TaskRolePetstorePets.Arn\n      RequiresCompatibilities:\n        - FARGATE\n      ContainerDefinitions:\n          - Name: 'PetstorePets'\n            Image: 'localstack/ecsapi-demo-petstore:latest'\n            Essential: true\n            PortMappings:\n              - ContainerPort: 8080\n                Protocol: tcp\n            Environment:\n              - Name: DynamoDBTable\n                Value: !Ref DynamoDBTablePetstorePets\n      NetworkMode: awsvpc\n      Memory: '512'\n      Cpu: '256'\n\n  ServiceFoodstoreFoods:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - PrivateRouteOne\n      - PrivateRouteTwo\n      - PrivateRouteThree\n    Properties:\n      Cluster: !Ref ECSCluster\n      TaskDefinition: !Ref TaskDefinitionFoodstoreFoods\n      LaunchType: FARGATE\n      DesiredCount: 3\n      ServiceRegistries:\n        - RegistryArn: !GetAtt ServiceDiscoveryServiceFoodstoreFoods.Arn\n          Port: 8080\n      NetworkConfiguration:\n          AwsvpcConfiguration:\n            AssignPublicIp: DISABLED\n            Subnets:\n              - !Ref PrivateSubnetOne\n              - !Ref PrivateSubnetTwo\n              - !Ref PrivateSubnetThree\n            SecurityGroups:\n              - !Ref ContainerSecurityGroup\n\n  ServicePetstorePets:\n    Type: AWS::ECS::Service\n    DependsOn:\n      - PrivateRouteOne\n      - PrivateRouteTwo\n      - PrivateRouteThree\n    Properties:\n      Cluster: !Ref ECSCluster\n      TaskDefinition: !Ref TaskDefinitionPetstorePets\n      LaunchType: FARGATE\n      DesiredCount: 3\n      ServiceRegistries:\n        - RegistryArn: !GetAtt ServiceDiscoveryServicePetstorePets.Arn\n          Port: 8080\n      NetworkConfiguration:\n          AwsvpcConfiguration:\n            AssignPublicIp: DISABLED\n            Subnets:\n              - !Ref PrivateSubnetOne\n              - !Ref PrivateSubnetTwo\n              - !Ref PrivateSubnetThree\n            SecurityGroups:\n              - !Ref ContainerSecurityGroup\n\n  AutoScalingTargetFoodstoreFoods:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MinCapacity: !Ref MinContainersFoodstoreFoods\n      MaxCapacity: !Ref MaxContainersFoodstoreFoods\n      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ServiceFoodstoreFoods.Name]]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n      RoleARN: !GetAtt AutoScalingRole.Arn\n\n  AutoScalingTargetPetstorePets:\n    Type: AWS::ApplicationAutoScaling::ScalableTarget\n    Properties:\n      MinCapacity: !Ref MinContainersPetstorePets\n      MaxCapacity: !Ref MaxContainersPetstorePets\n      ResourceId: !Join ['/', [service, !Ref ECSCluster, !GetAtt ServicePetstorePets.Name]]\n      ScalableDimension: ecs:service:DesiredCount\n      ServiceNamespace: ecs\n      RoleARN: !GetAtt AutoScalingRole.Arn\n\n  AutoScalingPolicyFoodstoreFoods:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Join ['', [!GetAtt ServiceFoodstoreFoods.Name, '-AutoScalingPolicy']]\n      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref AutoScalingTargetFoodstoreFoods\n      TargetTrackingScalingPolicyConfiguration:\n        PredefinedMetricSpecification:\n          PredefinedMetricType: ECSServiceAverageCPUUtilization\n        TargetValue: !Ref AutoScalingTargetValueFoodstoreFoods\n\n  AutoScalingPolicyPetstorePets:\n    Type: AWS::ApplicationAutoScaling::ScalingPolicy\n    Properties:\n      PolicyName: !Join ['', [!GetAtt ServicePetstorePets.Name, '-AutoScalingPolicy']]\n      PolicyType: TargetTrackingScaling\n      ScalingTargetId: !Ref AutoScalingTargetPetstorePets\n      TargetTrackingScalingPolicyConfiguration:\n        PredefinedMetricSpecification:\n          PredefinedMetricType: ECSServiceAverageCPUUtilization\n        TargetValue: !Ref AutoScalingTargetValuePetstorePets\n\n  HttpApiVPCLink:\n    Type: AWS::ApiGatewayV2::VpcLink\n    Properties:\n      Name: !Ref EnvironmentName\n      SecurityGroupIds:\n        - !Ref ContainerSecurityGroup\n      SubnetIds:\n        - !Ref PrivateSubnetOne\n        - !Ref PrivateSubnetTwo\n        - !Ref PrivateSubnetThree\n\n  UserPool:\n    Type: AWS::Cognito::UserPool\n    Properties:\n      # UserPoolName: pool1\n      UsernameAttributes:\n        - email\n      AutoVerifiedAttributes:\n        - email\n\n  UserPoolClient:\n    Type: \"AWS::Cognito::UserPoolClient\"\n    Properties:\n      UserPoolId: !Ref UserPool\n      GenerateSecret: false\n      SupportedIdentityProviders:\n        - COGNITO\n      PreventUserExistenceErrors: ENABLED\n\n  HttpApi:\n    Type: AWS::ApiGatewayV2::Api\n    Properties:\n      Body:\n        openapi: \"3.0.1\"\n        info:\n          title: !Ref EnvironmentName\n        components:\n          securitySchemes:\n            my-authorizer:\n              type: oauth2\n              flows: {}\n              x-amazon-apigateway-authorizer:\n                identitySource: \"$request.header.Authorization\"\n                jwtConfiguration:\n                  audience:\n                  - !Ref 'UserPoolClient'\n                  issuer: !GetAtt 'UserPool.ProviderURL'\n                type: jwt\n        paths:\n          /foodstore/foods/{foodId}:\n            get:\n              responses:\n                default:\n                  description: \"Default response for GET /foodstore/foods/{foodId}\"\n              x-amazon-apigateway-integration:\n                payloadFormatVersion: \"1.0\"\n                connectionId: !Ref HttpApiVPCLink\n                type: \"http_proxy\"\n                httpMethod: \"ANY\"\n                uri: !GetAtt ServiceDiscoveryServiceFoodstoreFoods.Arn\n                connectionType: \"VPC_LINK\"\n            put:\n              responses:\n                default:\n                  description: \"Default response for PUT /foodstore/foods/{foodId}\"\n              security:\n              - my-authorizer: []\n              x-amazon-apigateway-integration:\n                payloadFormatVersion: \"1.0\"\n                connectionId: !Ref HttpApiVPCLink\n                type: \"http_proxy\"\n                httpMethod: \"ANY\"\n                uri: !GetAtt ServiceDiscoveryServiceFoodstoreFoods.Arn\n                connectionType: \"VPC_LINK\"\n          /petstore/pets/{petId}:\n            get:\n              responses:\n                default:\n                  description: \"Default response for GET /petstore/pets/{petId}\"\n              x-amazon-apigateway-integration:\n                payloadFormatVersion: \"1.0\"\n                connectionId: !Ref HttpApiVPCLink\n                type: \"http_proxy\"\n                httpMethod: \"ANY\"\n                uri: !GetAtt ServiceDiscoveryServicePetstorePets.Arn\n                connectionType: \"VPC_LINK\"\n            put:\n              responses:\n                default:\n                  description: \"Default response for PUT /petstore/pets/{petId}\"\n              security:\n              - my-authorizer: []\n              x-amazon-apigateway-integration:\n                payloadFormatVersion: \"1.0\"\n                connectionId: !Ref HttpApiVPCLink\n                type: \"http_proxy\"\n                httpMethod: \"ANY\"\n                uri: !GetAtt ServiceDiscoveryServicePetstorePets.Arn\n                connectionType: \"VPC_LINK\"\n        x-amazon-apigateway-cors:\n          # This is a Test client web app that invokes the API, used in the blog post, for demostration purposes only.\n          # In production, make sure that you do NOT allow any untrusted origin.\n          allowOrigins:\n            - 'https://master.d34am23lsz3nvz.amplifyapp.com'\n          allowHeaders:\n            - '*'\n          allowMethods:\n            - 'PUT'\n            - 'GET'\n        x-amazon-apigateway-importexport-version: \"1.0\"\n\n  HttpApiStage:\n    Type: 'AWS::ApiGatewayV2::Stage'\n    Properties:\n      StageName: '$default'\n      ApiId: !Ref 'HttpApi'\n      AutoDeploy: true\n\nOutputs:\n  APITestPage:\n    Description: The URL of the sample web app client, used to test the sample API\n    Value: !Join\n      - ''\n      - - \"https://master.d34am23lsz3nvz.amplifyapp.com/?stackregion=\"\n        - !Ref 'AWS::Region'\n        - \"\u0026stackhttpapi=\"\n        - !Ref 'HttpApi'\n        - \"\u0026stackuserpool=\"\n        - !Ref 'UserPool'\n        - \"\u0026stackuserpoolclient=\"\n        - !Ref 'UserPoolClient'\n  APIInvokeURL:\n    Description: Invoke URL for the HTTP API\n    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'\n  APIInvokeURLFoodstoreFoods:\n    Description: Invoke URL for the HTTP API for the service Foodstore Foods\n    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/foodstore/foods/{foodId}'\n  APIInvokeURLPetstorePets:\n    Description: Invoke URL for the HTTP API for the service Petstore Pets\n    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/petstore/pets/{petId}'\n  APIId:\n    Description: The ID of the HTTP API\n    Value: !Ref 'HttpApi'\n  ECSClusterName:\n    Description: The name of the ECS cluster\n    Value: !Ref 'ECSCluster'\n  VpcId:\n    Description: The ID of the VPC that this stack is deployed in\n    Value: !Ref 'VPC'\n  ContainerSecurityGroup:\n    Description: A security group used to allow Fargate containers to receive traffic\n    Value: !Ref 'ContainerSecurityGroup'\n  PrivateDNSNamespace:\n    Description: The ID of the private DNS namespace.\n    Value: !Ref 'PrivateDNSNamespace'\n",
			"canonicalURL": "/github.com/localstack/presentations@8cdfb32015e58e52932855617606e029b63438f8/-/blob/2022-05-06_Demo/sample4/cloudformation-template-yaml/ecsapi-demo-cloudformation.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/localstack/presentations/blob/8cdfb32015e58e52932855617606e029b63438f8/2022-05-06_Demo/sample4/cloudformation-template-yaml/ecsapi-demo-cloudformation.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at 2022-05-06_Demo/sample4/cloudformation-template-yaml/ecsapi-demo-cloudformation.yaml:4:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}