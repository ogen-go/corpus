{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/moov-io/achgateway"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 14035,
			"content": "openapi: 3.0.2\ninfo:\n  description: |\n    Moov ACHGateway is an extensible, highly-available, distributed, and fault-tolerant ACH uploader and downloader. ACHGateway creates events for outside services and transforms files prior to upload to fit real-world requirements of production systems.\n\n    Refer to the documentation site for more information on running ACHGateway. https://moov-io.github.io/achgateway/\n  version: v1\n  title: ACHGateway API\n  contact:\n    url: https://github.com/moov-io/achgateway\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n\nservers: []\n\ntags:\n  - name: Files\n    description: Endpoint for submitting files to ACHGateway for later upload.\n  - name: Shards\n    description: |\n      Shards are logical grouping for ACH file delivery. They are designed to allow a large number of identifiers map to a small number\n      of upload agents and schedules. This allows customization to match business and banking requirements. Identifiers can be random\n      values (e.g. UUIDs) with shard names (e.g. testing, SD-live).\n  - name: Operations\n    description: |\n      Endpoints for monitoring ACHGateway and triggering manual steps outside of the automated processes.\n\n      There are endpoints for liveness/readiness checks and Prometheus metrics. The [`admin` package from `moov-io/base` describes these endpoints](https://github.com/moov-io/base/tree/master/admin#endpoints).\n\npaths:\n  /shards/{shardKey}/files/{fileID}:\n    post:\n      description: |\n        Submit a file to ACHGateway for upload at the next cutoff processing. The file may be in either Nacha formatted ACH or moov-io/ach's\n        JSON specification. When ValidateOpts are required the JSON specification must be used.\n      tags: [ \"Files\" ]\n      operationId: submitFile\n      summary: Submit file\n      servers:\n        - url: http://localhost:8484\n          description: Business Logic\n      parameters:\n        - name: shardKey\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"testing\"\n        - name: fileID\n          in: path\n          required: true\n          schema:\n            type: string\n            example: AE694B55-C103-4FA5-B62E-E4F6F79AD581\n      requestBody:\n        description: Content of the ACH file in moov-io/ach JSON or Nacha formatted text\n        required: true\n        content:\n          text/plain:\n            schema:\n              description: A plaintext ACH file\n              type: string\n              example: |\n               101 23138010401210428821906240000A094101Federal Reserve Bank   My Bank Name\n               5225Name on Account                     121042882 PPDREG.SALARY      190625   1121042880000001\n               62723138010412345678         0100000000               Receiver Account Name   0121042880000001\n               82250000010023138010000100000000000000000000121042882                          121042880000001\n               9000001000001000000010023138010000100000000000000000000\n               9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n               9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n               9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n               9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n               9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999\n          application/json:\n            schema:\n              $ref: 'https://raw.githubusercontent.com/moov-io/ach/master/openapi.yaml#/components/schemas/CreateFile'\n      responses:\n        '200':\n          description: File accepted successfully without errors.\n        '400':\n          description: Unable to read file, make sure the file is in either valid Nacha or moov-io/ach formatting.\n        '500':\n          description: Error publishing the file. Check logs for publishing errors.\n    delete:\n      description: Cancel a pending ACH file\n      tags: [ \"Files\" ]\n      operationId: cancelFile\n      servers:\n        - url: http://localhost:8484\n          description: Business Logic\n      parameters:\n        - name: shardKey\n          in: path\n          required: true\n          schema:\n            type: string\n            example: \"testing\"\n        - name: fileID\n          in: path\n          required: true\n          schema:\n            type: string\n            example: AE694B55-C103-4FA5-B62E-E4F6F79AD581\n      responses:\n        '200':\n          description: File accepted successfully without errors.\n        '500':\n          description: Error canceling the file. Check logs for publishing errors.\n\n  /shards/{shardName}/files:\n    get:\n      description: |\n        List files pending for the given shard.\n      tags: [ \"Operations\" ]\n      operationId: listPendingFiles\n      summary: List pending files\n      servers:\n        - url: http://localhost:9494\n          description: Admin Endpoints\n      parameters:\n        - name: shardName\n          in: path\n          required: true\n          description: Name of shard from configuration file\n          schema:\n            type: string\n            example: SD-live\n      responses:\n        '200':\n          description: List of pending files in the shard.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShardFilesResponse'\n\n  /shards/{shardName}/files/{filepath}:\n    get:\n      description: |\n        Get pending file metadata.\n      tags: [ \"Operations\" ]\n      operationId: getPendingFile\n      summary: Get pending file\n      servers:\n        - url: http://localhost:9494\n          description: Admin Endpoints\n      parameters:\n        - name: shardName\n          in: path\n          required: true\n          description: Name of shard from configuration file\n          schema:\n            type: string\n            example: SD-live\n        - name: filepath\n          in: path\n          required: true\n          description: Relative filepath within the shard\n          schema:\n            type: string\n            example: \"616d04d8-f8ec-46a9-b467-1d6ec009852f.ach\"\n      responses:\n        '200':\n          description: Content of pending ACH file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PendingFile'\n\n  /shards:\n    get:\n      description: |\n        List the configured shards.\n      tags: [ \"Shard Mapping\" ]\n      operationId: listShards\n      summary: List shards\n      servers:\n        - url: http://localhost:9494\n          description: Admin Endpoints\n      responses:\n        '200':\n          description: List of configured shards\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Shards'\n\n  /shard_mappings:\n    get:\n      description: |\n        List existing shard mappings.\n      tags: [ \"Shard Mapping\" ]\n      operationId: listShardMappings\n      summary: List shard mappings\n      servers:\n        - url: http://localhost:8484\n          description: Business Logic\n      responses:\n        '200':\n          description: List of shard mappings\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShardMappings'\n    post:\n      description: |\n        Create a new shard mapping.\n      tags: [ \"Shard Mapping\" ]\n      operationId: createShardMapping\n      summary: Create shard mapping\n      servers:\n        - url: http://localhost:8484\n          description: Business Logic\n      requestBody:\n        description: Shard mapping to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ShardMapping'\n      responses:\n        '201':\n          description: Shard mapping created\n        '400':\n          description: Error creating shard mapping\n\n  /shard_mappings/{shardKey}:\n    get:\n      description: |\n        Get shard for a specific key.\n      tags: [ \"Shard Mapping\" ]\n      operationId: getShardMapping\n      summary: Get shard mapping\n      servers:\n        - url: http://localhost:8484\n          description: Business Logic\n      parameters:\n        - name: shardKey\n          in: path\n          required: true\n          description: Key to lookup and retrieve the configured shard mapped to it.\n          schema:\n            type: string\n            example: userID123\n      responses:\n        '200':\n          description: Shard mapped to specified key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ShardMapping'\n        '404':\n          description: Shard key not found\n\n# Operations\n  /config:\n    get:\n      description: |\n        Retrieve the active configuration.\n      tags: [ \"Operations\" ]\n      operationId: getConfig\n      summary: Get ACHGateway config\n      servers:\n        - url: http://localhost:9494\n          description: Admin Endpoints\n      responses:\n        '200':\n          description: Masked application configuration\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n\n  /ping:\n    get:\n      description: PONG if the service is running.\n      tags: [ \"Operations\" ]\n      operationId: ping\n      summary: Ping ACHGateway\n      servers:\n        - url: http://localhost:8484\n          description: Business Logic\n      responses:\n        '200':\n          description: ACHGateway is running\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: PONG\n\n  /trigger-cutoff:\n    put:\n      description: |\n        Initiate cutoff processing for shards.\n      tags: [ \"Operations\" ]\n      operationId: triggerCutoff\n      summary: Trigger cutoff processing\n      servers:\n        - url: http://localhost:9494\n          description: Admin Endpoints\n      requestBody:\n        description: |\n          List of shards to trigger cutoff processing for. If no shards are specified then all configured shards will be processed.\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TriggerRequest'\n      responses:\n        '200':\n          description: All specified shards have completed cutoff processing successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n\n  /trigger-inbound:\n    put:\n      description: |\n        Initiate inbound processing of ODFI files for shards.\n      tags: [ \"Operations\" ]\n      operationId: triggerInbound\n      summary: Trigger inbound processing\n      servers:\n        - url: http://localhost:9494\n          description: Admin Endpoints\n      requestBody:\n        description: |\n          List of shards to trigger inbound processing for. This involves consuming all Correction, Inbound, Return, Pre-Note, and Reconciliation files on the upload agent servers, If no shards are specified then all configured shards will be processed.\n        required: false\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TriggerRequest'\n      responses:\n        '200':\n          description: All specified shards have completed inbound processing successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TriggerResponse'\n\ncomponents:\n  schemas:\n    Config:\n      description: |\n        Full config object loaded with ACHGateway. Certain sensitive values are masked to protect their value.\n        See https://moov-io.github.io/achgateway/config/ for a full specification.\n      properties: {}\n\n    Shards:\n      type: array\n      items:\n        type: string\n      example:\n        - testing\n        - SD-live\n        - ND-live\n\n    ShardFilesResponse:\n      properties:\n        Files:\n          type: array\n          items:\n            $ref: '#/components/schemas/ShardFile'\n        SourceHostname:\n          type: string\n          example: \"achgateway-1.apps.svc.cluster.local\"\n\n    ShardFile:\n      properties:\n        Filename:\n          type: string\n          example: \"dd437bdf-c5ff-4caf-9e0c-9bf2a100b7be.ach\"\n        Path:\n          type: string\n          example: \"mergable/SD-live/dd437bdf-c5ff-4caf-9e0c-9bf2a100b7be.ach\"\n        ModTime:\n          type: string\n          format: date-time\n          example: \"2022-01-02T15:04:05Z07:00\"\n\n    PendingFile:\n      properties:\n        Filename:\n          type: string\n          example: \"dd437bdf-c5ff-4caf-9e0c-9bf2a100b7be.ach\"\n        ContentsBase64:\n          type: string\n          example: \"bW9vdi1pbyBhY2hnYXRld2F5Cg==\"\n        Valid:\n          type: string\n          description: Optional value describing Nacha validation\n        ModTime:\n          type: string\n          format: date-time\n          example: \"2022-01-02T15:04:05Z07:00\"\n        SourceHostname:\n          type: string\n          example: \"achgateway-1.apps.svc.cluster.local\"\n\n    ShardMapping:\n      properties:\n        shardKey:\n          type: string\n          example: 8c458c10-5476-4f9c-aeb4-9339fb85d481\n        shardName:\n          type: string\n          example: SD-live\n\n    ShardMappings:\n      type: array\n      items:\n        $ref: '#/components/schemas/ShardMapping'\n\n    TriggerRequest:\n      properties:\n        ShardNames:\n          type: array\n          items:\n            type: string\n          example:\n            - \"SD-live\"\n            - \"ND-live\"\n\n    TriggerResponse:\n      properties:\n        Shards:\n          description: A map of shards and any errors encountered during processing.\n          type: object\n          example:\n            \"testing\": \"ERROR processing shard: hostname not found\"\n            \"SD-live\": null\n",
			"canonicalURL": "/github.com/moov-io/achgateway@f98701c5c65a499abc2cda586b5d1628e12108db/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/moov-io/achgateway/blob/f98701c5c65a499abc2cda586b5d1628e12108db/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:8438: duplicate path: \"/shards/{shardName}/files/{filepath}\""
}