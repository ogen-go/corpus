{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/rolling-scopes-school/react-rslang-be"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "doc/api.yaml",
			"byteSize": 16034,
			"content": "openapi: 3.0.0\ninfo:\n  title: React Learn Words\n  description: a backend part of RSSchool-React \"Learn words\" task\n  version: 1.0.0\n\nservers:\n  - url: /\n\ncomponents:\n  schemas:\n    Word:\n      type: object\n      properties:\n        id:\n          type: string\n        group:\n          type: number\n        page:\n          type: number\n        word:\n          type: string\n        image:\n          type: string\n        audio:\n          type: string\n        audioMeaning:\n          type: string\n        audioExample:\n          type: string\n        textMeaning:\n          type: string\n        textExample:\n          type: string\n        transcription:\n          type: string\n        wordTranslate:\n          type: string\n        textMeaningTranslate:\n          type: string\n        textExampleTranslate:\n          type: string\n    UserWord:\n      type: object\n      properties:\n        difficulty:\n          type: string\n        optional:\n          type: object\n          items:\n            type: any\n    Statistic:\n      type: object\n      properties:\n        learnedWords:\n          type: number\n        optional:\n          type: object\n          items:\n            type: any\n    Setting:\n      type: object\n      properties:\n        wordsPerDay:\n          type: number\n        optional:\n          type: object\n          items:\n            type: any\n    User:\n      type: object\n      properties:\n        name:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n    Auth:\n      type: object\n      properties:\n        message:\n          type: string\n        token:\n          type: string\n        refreshToken:\n          type: string\n        userId:\n          type: string\n        name:\n          type: string\n  responses:\n    UnauthorizedError:\n      description: Access token is missing or invalid\n    UnauthenticatedError:\n      description: Access token is missing, expired or invalid\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\nsecurity:\n  - bearerAuth: []\n\npaths:\n  /words:\n    parameters:\n      - name: group\n        in: query\n        required: false\n        description: group number\n        schema:\n          type: string\n      - name: page\n        in: query\n        required: false\n        description: page in the group\n        schema:\n          type: string\n    get:\n      tags:\n        - Words\n      security:\n        []\n      summary: Get a chunk of words\n      description: Gets a chunk of words\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Word\"\n  /words/{id}:\n    parameters:\n      - name: id\n        description: wordId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Words\n      security:\n        []\n      summary: Get a word with assets by id\n      description: Gets a word with assets by id\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Word\"\n  /users:\n    post:\n      tags:\n        - Users\n      security:\n        []\n      summary: Create a new user\n      description: Creates a new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                name:\n                  type: string\n                  description: User name\n                email:\n                  type: string\n                  description: E-mail\n                password:\n                  type: string\n                  description: Password\n      responses:\n        200:\n          description: Successful creation.\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/User\"\n        422:\n          description: Incorrect e-mail or password\n  /users/{id}:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Users\n      summary: Get user\n      description: Gets user\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/User\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: User not found\n    put:\n      tags:\n        - Users\n      summary: Update a user\n      description: Updates a user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                email:\n                  type: string\n                  description: E-mail\n                password:\n                  type: string\n                  description: Password\n      responses:\n        200:\n          description: The user has been updated.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    delete:\n      tags:\n        - Users\n      summary: Delete a user\n      description: Deletes a user by id\n      responses:\n        204:\n          description: The user has been deleted\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /users/{id}/tokens:\n    parameters:\n      - name: id\n        description: user id\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Users\n      summary: Get new user tokens\n      description: Gets new user tokens\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Auth\"\n        403:\n          $ref: '#/components/responses/UnauthenticatedError'\n  /users/{id}/words:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Users/Words\n      summary: Get all user words\n      description: Gets all user words\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/UserWord\"\n        402:\n          $ref: '#/components/responses/UnauthorizedError'\n  /users/{id}/words/{wordId}:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: wordId\n        description: wordId\n        in: path\n        required: true\n        schema:\n          type: string\n    post:\n      tags:\n        - Users/Words\n      summary: Create a user word\n      description: Create a user word by id\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                difficulty:\n                  type: string\n                optional:\n                  type: object\n                  items:\n                    type: any\n      responses:\n        200:\n          description: The user word has been created.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWord\"\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    get:\n      tags:\n        - Users/Words\n      summary: Get a user word by id\n      description: Gets a user word by id\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWord\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: User's word not found\n    put:\n      tags:\n        - Users/Words\n      summary: Update a user word\n      description: Updates a user word by id\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                difficulty:\n                  type: string\n                optional:\n                  type: object\n                  items:\n                    type: any\n      responses:\n        200:\n          description: The user word has been updated.\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/UserWord\"\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n    delete:\n      tags:\n        - Users/Words\n      summary: Delete user word\n      description: Deletes user words by id\n      responses:\n        204:\n          description: The user word has been deleted\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /users/{id}/aggregatedWords:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: group\n        in: query\n        required: false\n        description: group(skip if you want result not depending on a group)\n        schema:\n          type: string\n      - name: page\n        in: query\n        required: false\n        description: page number\n        schema:\n          type: string\n      - name: wordsPerPage\n        in: query\n        required: false\n        description: words per page\n        schema:\n          type: string\n      - name: filter\n        in: query\n        required: false\n        description: Filter by aggreagted word fields. It should be a stringified object which meet MongoDB Query object conditions.\u003cbr\u003e\n          Get all words that have difficulte=\"hard AND optional.key=\"value \u003cpre\u003e{\"$and\":[{\"userWord.difficulty\":\"hard\", \"userWord.optional.key\":\"value\"}]}\u003c/pre\u003e\u003cbr\u003e\n          Get all words that have difficulty equal=\"easy\" OR do not have the linked userWord \u003cpre\u003e{\"$or\":[{\"userWord.difficulty\":\"easy\"},{\"userWord\":null}]}\u003c/pre\u003e\u003cbr\u003e\n          Get all words that have BOTH difficulty equal=\"easy\" AND optional.repeat=true, OR do not have the linked userWord \u003cpre\u003e{\"$or\":[{\"$and\":[{\"userWord.difficulty\":\"easy\", \"userWord.optional.repeat\":true}]},{\"userWord\":null}]}\u003c/pre\u003e\u003cbr\u003e\n        schema:\n          type: string\n    get:\n      tags:\n        - Users/AggregatedWords\n      summary: Get all user aggregated words\n      description: Gets all user aggregated words\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Word\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /users/{id}/aggregatedWords/{wordId}:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n      - name: wordId\n        description: wordId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Users/AggregatedWords\n      summary: Get a user aggregated word by id\n      description: Gets a user aggregated word by id\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserWord\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: User's word not found\n  /users/{id}/statistics:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Users/Statistic\n      summary: Get statistics\n      description: Gets statistics\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Statistic\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Statistics not found\n    put:\n      tags:\n        - Users/Statistic\n      summary: Upsert statistics\n      description: Upserts new statistics\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                learnedWords:\n                  type: number\n                  description: The number of the total learned words\n                optional:\n                  type: object\n                  items:\n                    type: any\n      responses:\n        200:\n          description: The statistics has been created.\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Statistic\"\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /users/{id}/settings:\n    parameters:\n      - name: id\n        description: userId\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      tags:\n        - Users/Setting\n      summary: Get settings\n      description: Gets settings\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Setting\"\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n        404:\n          description: Settings not found\n    put:\n      tags:\n        - Users/Setting\n      summary: Upsert settings\n      description: Upserts new settings\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                wordsPerDay:\n                  type: number\n                  description: The max number of learned words per day\n                optional:\n                  type: object\n                  items:\n                    type: any\n      responses:\n        200:\n          description: The settings has been created.\n          content:\n            application/json:\n              schema:\n                  $ref: \"#/components/schemas/Setting\"\n        400:\n          description: Bad request\n        401:\n          $ref: '#/components/responses/UnauthorizedError'\n  /signin:\n    post:\n      tags:\n        - Sign In\n      security:\n        []\n      summary: Sign in\n      description: Logins a user and returns a JWT-token\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              title: example\n              properties:\n                email:\n                  type: string\n                  description: E-mail\n                password:\n                  type: string\n                  description: Password\n      responses:\n        200:\n          description: Successful login.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Auth\"\n        403:\n          description: Incorrect e-mail or password\n",
			"canonicalURL": "/github.com/rolling-scopes-school/react-rslang-be@3f5e6015286bb43a3f4e2d320fd2cd4a2259f467/-/blob/doc/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/rolling-scopes-school/react-rslang-be/blob/3f5e6015286bb43a3f4e2d320fd2cd4a2259f467/doc/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: schemas: \"Statistic\": parse schema: property \"optional\": at 1:576: parse schema: object cannot contain 'items' field"
}