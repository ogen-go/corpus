{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/cloudmesh/cloudmesh-openapi"
		},
		"file": {
			"name": "LogisticRegression_JB.yaml",
			"path": "tests/generator/LogisticRegression_JB.yaml",
			"content": "openapi: 3.0.0\ninfo:\n  title: LogisticRegression\n  description: No description provided\n  version: \"1.0\"\nservers:\n  - url: http://127.0.0.2:8080/cloudmesh\n    description: No description provided\npaths:\n  /LogisticRegression/decision_function:\n     get:\n      summary: Predict confidence scores for samples.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.decision_function\n      parameters:\n        - in: query\n          name: X\n          description: Samples.\n          schema:\n            type: array\n            items: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: array\n                items: {}\n\n  /LogisticRegression/fit:\n     get:\n      summary: Fit the model according to the given training data.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.fit\n      parameters:\n        - in: query\n          name: X\n          description: Training vector, where n_samples is the number of samples and\n                       n_features is the number of features.\n          schema:\n            $ref: '#/components/schemas/2dArrayOfNumber'\n        - in: query\n          name: y\n          description: Target vector relative to X.\n          schema:\n            $ref: '#/components/schemas/ArrayOfNumber'\n        - in: query\n          name: sample_weight\n          description: Array of weights that are assigned to individual samples.\n                       If not provided, then each sample is given unit weight.\n\n                      # .. versionadded:: 0.17\n                      #    *sample_weight* support to LogisticRegression.\n          schema:\n            $ref: '#/components/schemas/ArrayOfNumber'\n      responses:\n        '204':\n          description: This operation returns no response.\n\n  /LogisticRegression/get_params:\n     get:\n      summary: Get parameters for this estimator.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.get_params\n      parameters:\n        - in: query\n          name: deep\n          description: If True, will return the parameters for this estimator and\n                       contained subobjects that are estimators.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n\n  /LogisticRegression/predict:\n     get:\n      summary: Predict class labels for samples in X.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.predict\n      parameters:\n        - in: query\n          name: X\n          description: Samples.\n          schema:\n            type: array\n            items: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: array\n                items: {}\n\n  /LogisticRegression/predict_log_proba:\n     get:\n      summary: Predict logarithm of probability estimates.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.predict_log_proba\n      parameters:\n        - in: query\n          name: X\n          description: Vector to be scored, where `n_samples` is the number of samples and\n                       `n_features` is the number of features.\n          schema:\n            type: array\n            items: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: array\n                items: {}\n\n  /LogisticRegression/predict_proba:\n     get:\n      summary: Probability estimates.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.predict_proba\n      parameters:\n        - in: query\n          name: X\n          description: Vector to be scored, where `n_samples` is the number of samples and\n                       `n_features` is the number of features.\n          schema:\n            type: array\n            items: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: array\n                items: {}\n\n  /LogisticRegression/score:\n     get:\n      summary: Return the mean accuracy on the given test data and labels.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.score\n      parameters:\n        - in: query\n          name: X\n          description: Test samples.\n          schema:\n            type: array\n            items: {}\n        - in: query\n          name: y\n          description: True labels for X.\n          schema:\n            type: array\n            items: {}\n        - in: query\n          name: sample_weight\n          description: Sample weights.\n          schema:\n            type: array\n            items: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: number\n\n  /LogisticRegression/set_params:\n     get:\n      summary: Set the parameters of this estimator.\n      description: None (Optional extended description in CommonMark or HTML)\n      operationId: LogisticRegression.set_params\n      parameters:\n        - in: query\n          name: params\n          description: no description provided in docstring\n          schema:\n            type: object\n            additionalProperties: true\n      responses:\n        '204':\n          description: This operation returns no response.\n\ncomponents:\n  schemas:\n    ArrayOfNumber:\n      type: array\n      items:\n        type: number\n      example: [1.0, 2.1, 3.2, 4.2]\n\n    ArrayOfArrayOfNumber:\n      type: array\n      items: {\n        type: array,\n        items: {\n          type: number\n        },\n        example: [1, 2, 3, 4]\n      }\n\n    2dArrayOfNumber:\n      type: array\n      items:\n        type: array\n        items:\n          type: number\n\n"
		}
	},
	"Error": "json: cannot unmarshal bool into Go struct field Parameter.paths.get.parameters.name of type string"
}