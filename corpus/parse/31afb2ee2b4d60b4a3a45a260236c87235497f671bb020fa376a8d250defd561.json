{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/circuitsandbox.net/2.9.233/openapi.yaml",
			"byteSize": 254065,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://circuitsandbox.net/rest/v2\nx-hasEquivalentPaths: true\ninfo:\n  description: |-\n    Circuit REST API to interact with the Circuit system.\n\n    [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)\n  title: REST API Version 2\n  version: 2.9.233\n  x-apisguru-categories:\n    - messaging\n  x-logo:\n    backgroundColor: \"#FFFFFF\"\n    url: https://pbs.twimg.com/profile_images/927933988269903874/4jU82-IJ_400x400.jpg\n  x-origin:\n    - format: openapi\n      url: https://circuitsandbox.net/rest/v2/swagger\n      version: \"3.0\"\n  x-providerName: circuitsandbox.net\npaths:\n  /conversations:\n    get:\n      description: |-\n        Gets a list of conversations and communities the authenticated user participates in.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getConversations\n      parameters:\n        - description: The modification time of the conversation in UTC format. During the query the conversations before (\u003ci\u003edefault\u003c/i\u003e) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned\n          in: query\n          name: modTime\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER\n          in: query\n          name: direction\n          required: false\n          schema:\n            default: BEFORE\n            enum:\n              - BEFORE\n              - AFTER\n            maxLength: 2048\n            type: string\n        - description: The maximum number of returned results (default 25). The maximum allowed value is 100.\n          in: query\n          name: results\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Conversation\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Conversation\"\n                type: array\n          description: The matching conversations\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets a list of conversations\n      tags:\n        - Conversations\n  /conversations/byIds:\n    get:\n      description: |-\n        Gets conversation based on the given IDs.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getConversationsById\n      parameters:\n        - description: The array of IDs of the conversations which should be retrieved\n          explode: true\n          in: query\n          name: convIds\n          required: true\n          schema:\n            items:\n              maxLength: 2048\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Conversation\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Conversation\"\n                type: array\n          description: List of existing conversations successfully retrieved.\n        \"400\":\n          description: missing documentation\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets conversations\n      tags:\n        - Conversations\n  /conversations/community:\n    get:\n      description: |-\n        Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getCommunityConversations\n      parameters:\n        - description: Defines the type of sorting for the community conversations (default is alphabetical)\n          in: query\n          name: sort\n          required: false\n          schema:\n            default: ALPHABETICALLY\n            enum:\n              - ALPHABETICALLY\n              - RECENT_ACTIVITY\n              - POPULARITY\n            maxLength: 2048\n            type: string\n        - description: Defines the ordering of the conversations (default is ascending)\n          in: query\n          name: order\n          required: false\n          schema:\n            default: ASCENDING\n            enum:\n              - ASCENDING\n              - DESCENDING\n            maxLength: 2048\n            type: string\n        - description: If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned\n          in: query\n          name: includeOwn\n          required: false\n          schema:\n            default: false\n            type: boolean\n        - description: The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned\n          in: query\n          name: startIndex\n          required: false\n          schema:\n            default: 0\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n        - description: The maximum number of returned results (default 25). The maximum allowed value is 100.\n          in: query\n          name: results\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Conversation\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Conversation\"\n                type: array\n          description: The matching conversations\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003ea field constraint is violated\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets a list of communities\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: createCommunityConversation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                description:\n                  description: An optional description for the community conversation\n                  maxLength: 2048\n                  type: string\n                participants:\n                  description: list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                topic:\n                  description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)\n                  maxLength: 2048\n                  type: string\n              required:\n                - topic\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: The conversation was created successfully and can be accessed via the conversation ID\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Creates a community conversation\n      tags:\n        - Conversations\n  \"/conversations/community/{convId}\":\n    put:\n      description: |-\n        Updates the information of the given community.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: updateConversationCommunity\n      parameters:\n        - description: The ID of the conversation which should be updated\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                description:\n                  description: An optional description for the community conversation\n                  maxLength: 2048\n                  type: string\n                topic:\n                  description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the updated conversation object with the new topic / description\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type COMMUNITY\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Updates the information of a community\n      tags:\n        - Conversations\n  \"/conversations/community/{convId}/join\":\n    post:\n      description: |-\n        Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: joinCommunityConversation\n      parameters:\n        - description: The ID of the conversation which the user will join\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the conversation object to which the participants was added\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type COMMUNITY\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Adds the authenticated user to a community\n      tags:\n        - Conversations\n  \"/conversations/community/{convId}/participants\":\n    delete:\n      description: |-\n        Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: removeParticipantCommunity\n      parameters:\n        - description: The ID of the conversation from which the participant have to be removed\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The IDs or the unique email addresses of the Circuit users that have to be removed\n          explode: true\n          in: query\n          name: participants\n          required: true\n          schema:\n            items:\n              maxLength: 6500\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the conversation object from which the participants were removed.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003c/li\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type COMMUNITY\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Removes participants from a community\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: addParticipantCommunity\n      parameters:\n        - description: The ID of the conversation to which the participant has to be added.\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/addParticipantCommunity\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the conversation object to which the participants were added.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type COMMUNITY\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Adds participants to a community\n      tags:\n        - Conversations\n  /conversations/conversationdetails:\n    get:\n      description: |-\n        Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getJoinDetailsMultiple\n      parameters:\n        - description: An array of IDs of the conversations for which the join details should be returned\n          explode: true\n          in: query\n          name: convIds\n          required: true\n          schema:\n            items:\n              maxLength: 2048\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationDetails\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationDetails\"\n                type: array\n          description: The join details.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets the conference details for multiple conversations\n      tags:\n        - Conversations\n  /conversations/direct:\n    get:\n      description: |-\n        Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getDirectConversation\n      parameters:\n        - description: The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address\n          in: query\n          name: participant\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: The conversation was found and can be accessed via the conversation ID\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe data format of the passed user does not match either a UUID (user primary key)\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor the user does not exist\u003c/li\u003e\u003cli\u003eor the user is the same who initiates the request\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Checks for a 1-to-1 conversation\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: createDirectConversation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                participant:\n                  description: The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address\n                  maxLength: 2048\n                  type: string\n              required:\n                - participant\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: The conversation was created successfully and can be accessed via the conversation ID\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe data format of the passed user does not match either a UUID (user primary key)\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor the user does not exist\u003c/li\u003e\u003cli\u003eor the user is the same who initiates the request\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: A conversation already exists. The response contains this conversation.\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Creates a 1-to-1 conversation\n      tags:\n        - Conversations\n  /conversations/favorite:\n    get:\n      description: |-\n        Gets the conversationIds which are marked as favorites.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getFavoriteConversations\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/String\"\n                type: array\n          description: A list of marked conversations or an empty response.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets favorite conversations\n      tags:\n        - Conversations\n  /conversations/group:\n    post:\n      description: |-\n        Creates a group conversation between three or more users. The authenticated user is directly added to this conversation.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: createGroupConversation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                participants:\n                  description: A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                topic:\n                  description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)\n                  maxLength: 2048\n                  type: string\n              required:\n                - participants\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: The conversation was created successfully and can be accessed via the conversation ID\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Creates a group conversation\n      tags:\n        - Conversations\n  \"/conversations/group/{convId}\":\n    put:\n      description: |-\n        Updates the information of the given group conversation.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: updateConversationGroup\n      parameters:\n        - description: The ID of the conversation which should be updated\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                topic:\n                  description: An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the updated conversation object with the new topic\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type GROUP\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Updates the information of a group conversation\n      tags:\n        - Conversations\n  \"/conversations/group/{convId}/participants\":\n    delete:\n      description: |-\n        Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: removeParticipantGroup\n      parameters:\n        - description: The ID of the conversation from which the participant have to be removed\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The IDs or the unique email addresses of the Circuit users that have to be removed\n          explode: true\n          in: query\n          name: participants\n          required: true\n          schema:\n            items:\n              maxLength: 6500\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the conversation object from which the participants were removed.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type GROUP\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Removes participants from a group conversation\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: addParticipantGroup\n      parameters:\n        - description: The ID of the conversation to which the participant has to be added.\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/addParticipantCommunity\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the conversation object to which the participants were added.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor one or more of the user do not exist\u003c/li\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe conversation is not of type GROUP\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Adds participants to a group conversation\n      tags:\n        - Conversations\n  \"/conversations/label/{labelId}\":\n    get:\n      description: |-\n        Returns conversations with matching labels and paginated \n        OauthScopes: READ_CONVERSATIONS\n      operationId: getConversationsByLabel\n      parameters:\n        - description: Id of the label to look for\n          in: path\n          name: labelId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Pointer to the next page of conversations if there are any\n          in: query\n          name: nextPagePointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Numbers of max conversations per page\n          in: query\n          name: pageSize\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationsPage\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationsPage\"\n          description: Returns a list of conversations that are tagged with a certain label\n        \"400\":\n          description: he request cannot be fulfilled due to bad syntax\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Returns conversations with a certain label\n      tags:\n        - Conversations\n  /conversations/messages/flag:\n    get:\n      description: |-\n        Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getFlagItemConv\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n          description: Gets the list of flagged items\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets a list of the flagged messages\n      tags:\n        - Conversations\n  \"/conversations/messages/{itemId}\":\n    get:\n      description: |-\n        Returns a text item for a given item id\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getSingleConversationtem\n      parameters:\n        - description: The ID of the item that will be returned\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n          description: The item was successful returned\n        \"400\":\n          description: The item with the given id was not found\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Returns a text item\n      tags:\n        - Conversations\n  \"/conversations/moderate/{convId}\":\n    post:\n      description: |-\n        Set a conversation in moderatd mode. Moderators can be added and removed\n        OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS\n      operationId: moderateConversation\n      parameters:\n        - description: The ID of the conversation which will be set to moderated state\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The conversation is in moderated mode\n        \"401\":\n          description: Permission denied\n        \"403\":\n          description: Forbidden to edit this conversation\n        \"500\":\n          description: Internal server error\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MODERATE_CONVERSATIONS\n      summary: Set conversation moderated\n      tags:\n        - Conversations\n  /conversations/resolveinvitetoken:\n    get:\n      description: |-\n        Resolves an invite token to a conversation\n        OauthScopes: READ_CONVERSATIONS\n      operationId: resolveInvitationToken\n      parameters:\n        - description: The invite token to resolve\n          in: query\n          name: token\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Returns the conversation object that belongs to the invite token if you are member of the conversation\n        \"400\":\n          description: In case no invitation token was send\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: \"If the token does not exist or you are not member of the conversation \"\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Resolves an invite token to a conversation\n      tags:\n        - Conversations\n  /conversations/search:\n    get:\n      description: |-\n        Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: searchConversations\n      parameters:\n        - description: The search term\n          in: query\n          name: term\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs).\n          in: query\n          name: includeItemIds\n          required: false\n          schema:\n            default: false\n            type: boolean\n        - description: The search scope, FILES||PEOPLE||MEMBERS||MESSAGES||SENTBY||ALL||CONVERSATIONS||LABEL||FILTER\n          in: query\n          name: scope\n          required: false\n          schema:\n            default: ALL\n            enum:\n              - FILES\n              - PEOPLE\n              - MEMBERS\n              - MESSAGES\n              - SENTBY\n              - ALL\n              - CONVERSATIONS\n              - LABEL\n              - FILTER\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationSearchResult\"\n          description: A list of conversations and items that match the term\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Performs a conversation search\n      tags:\n        - Conversations\n  \"/conversations/unmoderate/{convId}\":\n    post:\n      description: |-\n        Set a conversation to unmoderatd mode\n        OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS\n      operationId: unmoderateConversation\n      parameters:\n        - description: The ID of the conversation which will be set to unmoderated state\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The conversation is in unmoderated mode\n        \"401\":\n          description: Forbidden to edit this conversation\n        \"403\":\n          description: Permission denied\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MODERATE_CONVERSATIONS\n      summary: Set conversation unmoderated\n      tags:\n        - Conversations\n  \"/conversations/{convId}\":\n    get:\n      description: |-\n        Gets a conversation based on the given ID.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getConversationbyId\n      parameters:\n        - description: The ID of the conversation which should be updated\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Gets the conversation object\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/archive\":\n    delete:\n      description: |-\n        The conversation will no longer be archived but active again\n        OauthScopes: WRITE_CONVERSATIONS\n      operationId: undoArchiveConversation\n      parameters:\n        - description: The ID of the conversation which will be unmarked as muted\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The conversation was successfully unmarked\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003cli\u003ethe conversation was not marked before\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n      summary: Unmute conversation\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Archives a conversation by muting it\n        OauthScopes: WRITE_CONVERSATIONS\n      operationId: archiveConversation\n      parameters:\n        - description: The ID of the conversation which will be archived\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The conversation was successfully archived\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n      summary: Archives conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/conversationdetails\":\n    get:\n      description: |-\n        Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getJoinDetails\n      parameters:\n        - description: The ID of the conversation for which the join details should be returned\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationDetails\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationDetails\"\n          description: The join details.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets the conference details of a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/favorite\":\n    delete:\n      description: |-\n        Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations.\n        OauthScopes: WRITE_CONVERSATIONS\n      operationId: deleteFavorite\n      parameters:\n        - description: The ID of the conversation which will be unmarked as favorite\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The conversation was successfully unmarked\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003cli\u003ethe conversation was not marked before\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n      summary: Removes a conversation from favorites\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations.\n        OauthScopes: WRITE_CONVERSATIONS\n      operationId: addFavorite\n      parameters:\n        - description: The ID of the conversation which will be marked as favorite\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The conversation was successfully marked\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n      summary: Adds a conversation to the favorites\n      tags:\n        - Conversations\n  \"/conversations/{convId}/items\":\n    get:\n      description: |-\n        Gets a list of conversation items.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getConversationItems\n      parameters:\n        - description: The ID of the conversation to which the items belong\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned\n          in: query\n          name: modTime\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER\n          in: query\n          name: direction\n          required: false\n          schema:\n            default: BEFORE\n            enum:\n              - BEFORE\n              - AFTER\n            maxLength: 2048\n            type: string\n        - description: The maximum number of returned results (default 25). The maximum allowed value is 100.\n          in: query\n          name: results\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n          description: The matching conversation items\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Gets a list of conversation items\n      tags:\n        - Conversations\n  \"/conversations/{convId}/label\":\n    post:\n      description: |-\n        Adds a label to a conversation, you can search and organize your conversations based on these labels\n        OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS\n      operationId: assignLabel\n      parameters:\n        - description: The ID of the conversation to which the label is added\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                label:\n                  description: \"The actual label \"\n                  maxLength: 2048\n                  type: string\n              required:\n                - label\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n          description: The label was successfully added\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003cli\u003eyou reached the maximum of 250 labels\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - ORGANIZE_CONVERSATIONS\n      summary: Adds a label to a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/label/{labelId}\":\n    delete:\n      description: |-\n        Removes a label from a conversation, you can search and organize your conversations based on these labels\n        OauthScopes: WRITE_CONVERSATIONS\n      operationId: unassignLabel\n      parameters:\n        - description: The ID of the conversation from which the label is removed\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: \"The actual label \"\n          in: path\n          name: labelId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n          description: The label was successfully removed\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003cli\u003ethe label was not assigned to the conversation\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n      summary: Removes a label from a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/messages\":\n    post:\n      description: |-\n        Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation.\n        OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT\n      operationId: addTextItem\n      parameters:\n        - description: The ID of the conversation to which the new item has to be added\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: A comma separated list of attachment IDs from the file API.\n                  items:\n                    maxLength: 16000\n                    type: string\n                  type: array\n                content:\n                  description: The actual content of the item, is mandatory unless an attachment is added\n                  maxLength: 16384\n                  type: string\n                formMetaData:\n                  description: The form meta data of the new text item\n                  maxLength: 32768\n                  type: string\n                subject:\n                  description: The subject (headline) of the new text item\n                  maxLength: 255\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n          description: Gets the new text item object\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - CREATE_CONVERSATIONS_CONTENT\n      summary: Adds a message to a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/messages/flag\":\n    get:\n      description: |-\n        Gets a list of all the flagged messages in the given conversation.\n        OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS\n      operationId: getFlagItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n          description: Gets the list of flagged items\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - ORGANIZE_CONVERSATIONS\n      summary: Gets a list of the flagged messages of a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/messages/{itemId}\":\n    delete:\n      description: |-\n        Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message's creator.\n        OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT\n      operationId: deleteTextItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item that will be deleted\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n          description: Gets the deleted text item object\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe item does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - DELETE_CONVERSATIONS_CONTENT\n      summary: Deletes a message from a conversation\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds a message to the existing item. The added message will be a child item of the message with the given itemId.\n        OauthScopes: WRITE_CONVERSATIONS\n      operationId: addTextItemWithParent\n      parameters:\n        - description: The ID of the conversation to which the new item has to be added\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item to which the new one has to be added as child\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: A comma separated list of attachment IDs from the file API.\n                  items:\n                    maxLength: 4096\n                    type: string\n                  type: array\n                content:\n                  description: The actual content of the item\n                  maxLength: 16384\n                  type: string\n                formMetaData:\n                  description: The form meta data of the new text item\n                  maxLength: 32768\n                  type: string\n                subject:\n                  description: The subject (headline) of the new text item\n                  maxLength: 255\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n          description: Gets the new text item object\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe parent item does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n      summary: Adds a message to an item\n      tags:\n        - Conversations\n    put:\n      description: |-\n        Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation.\n        OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT\n      operationId: updateTextItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item to update\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: A comma separated list of attachment IDs from the file API.\n                  items:\n                    maxLength: 16000\n                    type: string\n                  type: array\n                content:\n                  description: The actual content of the item\n                  maxLength: 16384\n                  type: string\n                formMetaData:\n                  description: The form meta data of the new text item\n                  maxLength: 32768\n                  type: string\n                subject:\n                  description: The subject (headline) of the new text item\n                  maxLength: 255\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ConversationItem\"\n          description: Gets the modified text item object\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - UPDATE_CONVERSATION_CONTENT\n      summary: Updates a message\n      tags:\n        - Conversations\n  \"/conversations/{convId}/messages/{itemId}/flag\":\n    delete:\n      description: |-\n        Removes the flag from a given message that is posted to the given conversation.\n        OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS\n      operationId: unFlagItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item that will be flagged\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The flagged state of item was successfully removed\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe item does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - ORGANIZE_CONVERSATIONS\n      summary: Removes the flag from a message\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds a flag to the given message in the given conversation.\n        OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS\n      operationId: flagItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item that will be flagged\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                itemCreationTime:\n                  description: The time when the item was created\n                  maxLength: 2048\n                  type: string\n                parentId:\n                  description: The ID of the item's parent\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          description: The item was successful flagged\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe item does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - ORGANIZE_CONVERSATIONS\n      summary: Adds a flag to a message in a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/messages/{itemId}/like\":\n    delete:\n      description: |-\n        Removes a \"like\" from the given message in the given conversation\n        OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT\n      operationId: unlikeItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item that will be unliked\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The item was successful unliked\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe item does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - UPDATE_CONVERSATION_CONTENT\n      summary: Removes a \"like\" from a message\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds a \"like\" to the given message in the given conversation\n        OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT\n      operationId: likeItem\n      parameters:\n        - description: The ID of the conversation to which the item belongs\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the item that will be liked\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The item was successful liked\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe conversation does not exist\u003c/li\u003e\u003cli\u003ethe item does not exist\u003c/li\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - UPDATE_CONVERSATION_CONTENT\n      summary: Adds a \"like\" to a message\n      tags:\n        - Conversations\n  \"/conversations/{convId}/moderators\":\n    delete:\n      description: |-\n        Removes a list of moderators from a conversation\n        OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS\n      operationId: removeModerators\n      parameters:\n        - description: The ID of the conversation where the moderators are removed\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                moderators:\n                  description: The list of moderator ids to remove\n                  items:\n                    maxLength: 6500\n                    type: string\n                  type: array\n              required:\n                - moderators\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: The moderators were successfully removed\n        \"400\":\n          description: Failure in moderators list\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MODERATE_CONVERSATIONS\n      summary: Remove moderators\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Adds a list of moderators to a conversation\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: addModerators\n      parameters:\n        - description: The ID of the conversation to which the moderators are added\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                moderators:\n                  description: \"The list of moderator ids to add \"\n                  items:\n                    maxLength: 6500\n                    type: string\n                  type: array\n              required:\n                - moderators\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: The moderators were successfully added\n        \"400\":\n          description: Error reading list of moderators to add\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Add moderators\n      tags:\n        - Conversations\n  \"/conversations/{convId}/participants\":\n    get:\n      description: |-\n        Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls.\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getParticipantsByConvId\n      parameters:\n        - description: The id of the conversation the participants are searched for.\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The page size of the hit list\n          in: query\n          name: pageSize\n          required: true\n          schema:\n            format: int32\n            maximum: 25\n            minimum: 1\n            type: number\n        - description: Part of name to filter the results\n          in: query\n          name: name\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Type of participant to filter the results\n          in: query\n          name: type\n          required: false\n          schema:\n            default: REGULAR\n            enum:\n              - REGULAR\n              - MODERATOR\n              - GUEST\n              - FORMER\n              - BOT\n            maxLength: 2048\n            type: string\n        - description: Pointer for paged output. Add to consecutive request to get next page\n          in: query\n          name: searchPointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationParticipantsList\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationParticipantsList\"\n                type: array\n          description: A list of conversations and items that match the term\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe user is no participant of the conversation\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Performs a list of participants\n      tags:\n        - Conversations\n  \"/conversations/{convId}/pins\":\n    get:\n      description: |-\n        Returns pinned topics of a conversation\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getPinnedConversations\n      parameters:\n        - description: ID of the conversation\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PinnedTopic\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PinnedTopic\"\n                type: array\n          description: The pinned topics\n        \"400\":\n          description: The request cannot be fulfilled due to bad syntax\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Returns pinned topics of a conversation\n      tags:\n        - Conversations\n  \"/conversations/{convId}/pins/{itemId}\":\n    delete:\n      description: |-\n        Unpins a topic of a conversation\n        OauthScopes: READ_CONVERSATIONS\n      operationId: unPinAConversation\n      parameters:\n        - description: The ID of the conversation\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the topic\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Returns the pinned conversation conversation after unpinning a topic\n        \"400\":\n          description: The request cannot be fulfilled due to bad syntax\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Unpins a topic of a conversation\n      tags:\n        - Conversations\n    post:\n      description: |-\n        Pins a topic of a conversation\n        OauthScopes: READ_CONVERSATIONS\n      operationId: pinAConversation\n      parameters:\n        - description: The ID of the conversation\n          in: path\n          name: convId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The ID of the topic\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Conversation\"\n          description: Returns the pinned conversation conversation after pinning a topic\n        \"400\":\n          description: The request cannot be fulfilled due to bad syntax\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Pins a topic of a conversation\n      tags:\n        - Conversations\n  /rtc/sessions:\n    get:\n      description: |-\n        Gets a list of active RTCsessions\n        OauthScopes: CALLS\n      operationId: getActiveSessions\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Label\"\n          description: The list of active RTCsessions was returned\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - CALLS\n      summary: Gets a list of active sessions\n      tags:\n        - RTC\n  /spaces:\n    get:\n      description: |-\n        Get the spaces\n        OauthScopes: READ_SPACE\n      operationId: getSpaces\n      parameters:\n        - description: a beautiful timestamp\n          in: query\n          name: timestamp\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: the number of results you want\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetSpacesResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/GetSpacesResult\"\n          description: Spaces successfully retrieved.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get the spaces\n      tags:\n        - Spaces\n  /spaces/create:\n    post:\n      description: |-\n        Create a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT\n      operationId: createSpace\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                accessModeType:\n                  default: INTERNAL_ONLY\n                  description: Access mode\n                  enum:\n                    - INTERNAL_ONLY\n                    - INTERNAL_EXTERNAL\n                  maxLength: 2048\n                  type: string\n                description:\n                  description: description of the space\n                  maxLength: 2048\n                  type: string\n                largePictureBase64:\n                  description: large picture\n                  maxLength: 256000\n                  type: string\n                name:\n                  description: name of the space\n                  maxLength: 2048\n                  type: string\n                role:\n                  default: AUTHOR\n                  description: role\n                  enum:\n                    - MODERATOR\n                    - AUTHOR\n                    - PARTICIPANT\n                    - READER\n                  maxLength: 2048\n                  type: string\n                smallPictureBase64:\n                  description: small picture\n                  maxLength: 256000\n                  type: string\n                status:\n                  default: ENABLED\n                  description: status\n                  enum:\n                    - ENABLED\n                    - DISABLED\n                  maxLength: 2048\n                  type: string\n                tags:\n                  description: tags of the space\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                type:\n                  default: SECRET\n                  description: type\n                  enum:\n                    - OPEN\n                    - CLOSED\n                    - SECRET\n                  maxLength: 2048\n                  type: string\n              required:\n                - name\n                - accessModeType\n                - status\n                - role\n                - type\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantSpaceWrapper\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantSpaceWrapper\"\n          description: Space successfully created.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - CREATE_SPACE_CONTENT\n      summary: Create a space\n      tags:\n        - Spaces\n  /spaces/directory:\n    get:\n      description: |-\n        Get the directory by a search query in ordered way\n        OauthScopes: READ_SPACE\n      operationId: getDirectory\n      parameters:\n        - description: sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE\n          in: query\n          name: sortBy\n          required: true\n          schema:\n            default: LAST_CONTENT\n            enum:\n              - LAST_CONTENT\n              - NAME\n              - NUMBER_OF_USERS\n              - CREATION_DATE\n            maxLength: 2048\n            type: string\n        - description: ascending or descending\n          in: query\n          name: sortOrder\n          required: true\n          schema:\n            default: ASCENDING\n            enum:\n              - ASCENDING\n              - DESCENDING\n            maxLength: 2048\n            type: string\n        - description: filter for spaces (JOINED, REQUESTED, OPEN, CLOSED or NOT_JOINED_REQUESTED)\n          in: query\n          name: filter\n          required: true\n          schema:\n            default: NONE\n            enum:\n              - NONE\n              - JOINED\n              - REQUESTED\n              - OPEN\n              - CLOSED\n              - NOT_JOINED_REQUESTED\n            maxLength: 2048\n            type: string\n        - description: some sort of query\n          in: query\n          name: query\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: page pointer, start with nothing and for next query use returned pointer\n          in: query\n          name: pagePointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: number of results to return, 25 by default.\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DirectoryResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/DirectoryResult\"\n          description: Spaces successfully retrieved.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get the directory\n      tags:\n        - Spaces\n  \"/spaces/exists/{name}\":\n    get:\n      description: |-\n        Find out if a space name already exists for non-secret spaces.\n        OauthScopes: READ_SPACE\n      operationId: existsSpaceName\n      parameters:\n        - description: The name to check for existence.\n          in: path\n          name: name\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Check performed successfully, returning true if found, false if not found.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Space name exists\n      tags:\n        - Spaces\n  \"/spaces/flag/{itemId}\":\n    put:\n      description: |-\n        flag a space item\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: flagSpaceItem\n      parameters:\n        - description: the id of the item you want to flag\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Space item successfully flagged\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: flag a space item\n      tags:\n        - Spaces\n  /spaces/flagged:\n    get:\n      description: |-\n        Get flagged items\n        OauthScopes: READ_SPACE\n      operationId: getFlaggedItems\n      parameters:\n        - description: before or after the time stamp\n          in: query\n          name: searchDirection\n          required: true\n          schema:\n            default: BEFORE\n            enum:\n              - BEFORE\n              - AFTER\n            maxLength: 2048\n            type: string\n        - description: The timestamp according to which you want to retrieve the flagged items\n          in: query\n          name: timestamp\n          required: true\n          schema:\n            format: date-time\n            type: string\n        - description: The searchpointer for the search (initially not set).\n          in: query\n          name: searchPointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The number of results you want to retrieve.\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FlaggedItemsResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/FlaggedItemsResult\"\n          description: Flagged items successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get flagged items\n      tags:\n        - Spaces\n  /spaces/ids:\n    get:\n      description: |-\n        Get the spaces by their ids\n        OauthScopes: READ_SPACE\n      operationId: getSpacesByIds\n      parameters:\n        - description: an array of ids\n          explode: true\n          in: query\n          name: ids\n          required: true\n          schema:\n            items:\n              maxLength: 2048\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetSpacesResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/GetSpacesResult\"\n          description: Spaces successfully retrieved.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get the spaces by their ids\n      tags:\n        - Spaces\n  \"/spaces/item/{itemId}\":\n    delete:\n      description: |-\n        deletes a space item\n        OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT\n      operationId: deleteSpaceItem\n      parameters:\n        - description: the id of the spaceItem\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: the deletion was a success\n        \"400\":\n          description: invalid itemid\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - DELETE_SPACE_CONTENT\n      summary: deletes a space item\n      tags:\n        - Spaces\n  \"/spaces/like/{itemId}\":\n    put:\n      description: |-\n        Like a space item\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: likeSpaceItem\n      parameters:\n        - description: The id of the item you want to like\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Space item successfully liked\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Like a space item\n      tags:\n        - Spaces\n  \"/spaces/likes/{itemId}\":\n    get:\n      description: |-\n        Get the likes of an item\n        OauthScopes: READ_SPACE\n      operationId: getLikes\n      parameters:\n        - description: The id of the item to retrieve the likes from\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The searchpointer for the search (initially not set).\n          in: query\n          name: searchPointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The number of results you want to retrieve.\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsLikeResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsLikeResult\"\n          description: Likes successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get the likes of an item\n      tags:\n        - Spaces\n  /spaces/search/add/recent:\n    put:\n      description: |-\n        Add recent search of a client to search controller.\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE\n      operationId: addRecentSpaceSearch\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                endTime:\n                  description: The end time.\n                  format: date-time\n                  type: string\n                scope:\n                  description: The scope of the search.\n                  enum:\n                    - ALL\n                    - SPACES\n                    - TOPICBY\n                    - FILES\n                    - TAGS\n                    - LABELS\n                    - DATE\n                  maxLength: 2048\n                  type: string\n                searchTerm:\n                  description: The term to search for.\n                  maxLength: 2048\n                  type: string\n                startTime:\n                  description: The start time.\n                  format: date-time\n                  type: string\n              required:\n                - scope\n                - searchTerm\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Search successfully added.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - ORGANIZE_SPACE\n      summary: \"Add recent search \"\n      tags:\n        - Spaces\n  \"/spaces/search/cancel/{searchId}\":\n    put:\n      description: |-\n        Cancels a space search of a client.\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: cancelSpaceSearch\n      parameters:\n        - description: The id of the search to cancel\n          in: path\n          name: searchId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Search successfully cancelled.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: Cancels a space search of a client.\n      tags:\n        - Spaces\n  /spaces/search/recent:\n    get:\n      description: |-\n        Retrieve recent space searches for a user.\n        OauthScopes: READ_SPACE\n      operationId: getRecentSearches\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpacesSearchTermResult\"\n                type: array\n          description: Recent searches successfully retrieved (or none available).\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Retrieve recent space searches\n      tags:\n        - Spaces\n  /spaces/search/startBasic:\n    get:\n      description: |-\n        starts a basic search in spaces\n        OauthScopes: READ_SPACE\n      operationId: startBasicSpacesSearch\n      parameters:\n        - description: the scope of the search\n          in: query\n          name: scope\n          required: true\n          schema:\n            enum:\n              - ALL\n              - SPACES\n              - TOPICBY\n              - FILES\n              - TAGS\n              - LABELS\n              - DATE\n            maxLength: 2048\n            type: string\n        - description: the term to search for\n          in: query\n          name: searchTerm\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: the starttime\n          in: query\n          name: startTime\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: the end time\n          in: query\n          name: endTime\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: list of prioritized spaces\n          explode: true\n          in: query\n          name: prioritySpaces\n          required: false\n          schema:\n            items:\n              maxLength: 2048\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BasicSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/BasicSearchResult\"\n          description: search successfully executed\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: starts a basic search in spaces\n      tags:\n        - Spaces\n  /spaces/search/startDetailed:\n    get:\n      description: |-\n        starts a detailed search in a space\n        OauthScopes: READ_SPACE\n      operationId: startDetailedSpaceSearch\n      parameters:\n        - description: the scope of the search\n          in: query\n          name: scope\n          required: true\n          schema:\n            enum:\n              - ALL\n              - SPACES\n              - TOPICBY\n              - FILES\n              - TAGS\n              - LABELS\n              - DATE\n            maxLength: 2048\n            type: string\n        - description: the term to search for\n          in: query\n          name: searchTerm\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: the starttime\n          in: query\n          name: startTime\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: the end time\n          in: query\n          name: endTime\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: missing documentation\n          in: query\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: missing documentation\n          in: query\n          name: searchId\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpaceSearchResultDetailedBack\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpaceSearchResultDetailedBack\"\n                type: array\n          description: search successfully executed\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: starts a detailed search in a space\n      tags:\n        - Spaces\n  \"/spaces/topic/{topicId}/updateTags\":\n    put:\n      description: |-\n        Update the tags of a topic  \n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: updateTopicTags\n      parameters:\n        - description: The id of the topic\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                tags:\n                  description: The tags to update\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              required:\n                - tags\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopic\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopic\"\n          description: tags successfully updated\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Update tags\n      tags:\n        - Spaces\n  \"/spaces/unflag/{itemId}\":\n    put:\n      description: |-\n        Unflag a space item\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: unflagSpaceItem\n      parameters:\n        - description: the id of the item you want to unflag\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Space item successfully unflagged.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Unflag a space item\n      tags:\n        - Spaces\n  \"/spaces/unlike/{itemId}\":\n    put:\n      description: |-\n        Unlike a space item\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: unlikeSpaceItem\n      parameters:\n        - description: The id of the item you want to unlike\n          in: path\n          name: itemId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Space item successfully unliked.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Unlike a space item\n      tags:\n        - Spaces\n  \"/spaces/{id}\":\n    delete:\n      description: |-\n        Delete a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT\n      operationId: deleteSpace\n      parameters:\n        - description: id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Space successfully deleted.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - DELETE_SPACE_CONTENT\n      summary: Delete a space\n      tags:\n        - Spaces\n    put:\n      description: |-\n        Update a space\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: updateSpace\n      parameters:\n        - description: id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                accessModeType:\n                  default: NO_CHANGE\n                  description: Access mode\n                  enum:\n                    - INTERNAL_ONLY\n                    - INTERNAL_EXTERNAL\n                    - NO_CHANGE\n                  maxLength: 2048\n                  type: string\n                description:\n                  description: description of the space\n                  maxLength: 2048\n                  type: string\n                largePictureBase64:\n                  description: large picture\n                  maxLength: 256000\n                  type: string\n                name:\n                  description: name of the space\n                  maxLength: 2048\n                  type: string\n                ownerId:\n                  description: ownerid of the space\n                  maxLength: 2048\n                  type: string\n                role:\n                  default: NO_CHANGE\n                  description: role\n                  enum:\n                    - MODERATOR\n                    - AUTHOR\n                    - PARTICIPANT\n                    - READER\n                    - NO_CHANGE\n                  maxLength: 2048\n                  type: string\n                smallPictureBase64:\n                  description: small picture\n                  maxLength: 256000\n                  type: string\n                status:\n                  default: ENABLED\n                  description: status\n                  enum:\n                    - ENABLED\n                    - DISABLED\n                  maxLength: 2048\n                  type: string\n                tags:\n                  description: tags of the space\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                type:\n                  default: NO_CHANGE\n                  description: type\n                  enum:\n                    - OPEN\n                    - CLOSED\n                    - SECRET\n                    - NO_CHANGE\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantSpaceWrapper\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantSpaceWrapper\"\n          description: Space successfully updated.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Update a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/join\":\n    post:\n      description: |-\n        Join a space\n        OauthScopes: WRITE_SPACE\n      operationId: joinSpace\n      parameters:\n        - description: The id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantSpaceWrapper\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantSpaceWrapper\"\n          description: Space successfully joined\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n      summary: Join a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/labels/assign\":\n    post:\n      description: |-\n        Assign labels to space\n        OauthScopes: WRITE_SPACE, ORGANIZE_SPACE\n      operationId: assignLabels\n      parameters:\n        - description: The id of the space.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                labels:\n                  description: The labels to assign to the space\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              required:\n                - labels\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/LabelIds\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/LabelIds\"\n                type: array\n          description: Labels successfully assigned\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - ORGANIZE_SPACE\n      summary: Assign labels\n      tags:\n        - Spaces\n  \"/spaces/{id}/labels/unassign\":\n    delete:\n      description: |-\n        Unassign labels from a space\n        OauthScopes: WRITE_SPACE, ORGANIZE_SPACE\n      operationId: unassignLabels\n      parameters:\n        - description: The id of the space.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                labelIds:\n                  description: missing documentation\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              required:\n                - labelIds\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/LabelIds\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/LabelIds\"\n                type: array\n          description: Labels successfully unassigned\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - ORGANIZE_SPACE\n      summary: Unassign labels\n      tags:\n        - Spaces\n  \"/spaces/{id}/leave\":\n    post:\n      description: |-\n        Leave a space\n        OauthScopes: WRITE_SPACE\n      operationId: leaveSpace\n      parameters:\n        - description: The id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Space successfully left\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n      summary: Leave a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/participant\":\n    post:\n      description: |-\n        Add a participant to a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: addParticipantsToSpace\n      parameters:\n        - description: The id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                role:\n                  default: DEFAULT\n                  description: The name of the role of the participant\n                  enum:\n                    - DEFAULT\n                    - MODERATOR\n                    - AUTHOR\n                    - PARTICIPANT\n                    - READER\n                  maxLength: 2048\n                  type: string\n                userId:\n                  description: The user id of the participant\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              required:\n                - userId\n                - role\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ParticipantAddResult\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ParticipantAddResult\"\n                type: array\n          description: Successfully added participant.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: Add Participant to Space\n      tags:\n        - Spaces\n  \"/spaces/{id}/participant/remove\":\n    post:\n      description: |-\n        removes Participants from a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE\n      operationId: v2RemoveParticipantsFromSpace\n      parameters:\n        - description: The id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                userIds:\n                  description: \"The ids of the participants to remove \"\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              required:\n                - userIds\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: participants successfully removed\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - ORGANIZE_SPACE\n      summary: Removes participants from a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/participants\":\n    get:\n      description: |-\n        Get the participants of a space\n        OauthScopes: READ_SPACE\n      operationId: getSpaceParticipants\n      parameters:\n        - description: The id of the space.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE\n          in: query\n          name: sortBy\n          required: true\n          schema:\n            default: NAME\n            enum:\n              - DISPLAY_NAME\n              - NAME\n              - FIRST_NAME\n            maxLength: 2048\n            type: string\n        - description: ascending or descending\n          in: query\n          name: sortOrder\n          required: true\n          schema:\n            default: ASCENDING\n            enum:\n              - ASCENDING\n              - DESCENDING\n            maxLength: 2048\n            type: string\n        - description: filtertype for participants (ACCESS_TYPE, ROLE or STATE)\n          in: query\n          name: filterType\n          required: true\n          schema:\n            enum:\n              - NONE\n              - ACCESS_TYPE\n              - ROLE\n              - STATE\n            maxLength: 2048\n            type: string\n        - description: value for the filter\n          in: query\n          name: filterValue\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: some sort of query\n          in: query\n          name: query\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The search pointer (leave empty initially).\n          in: query\n          name: searchPointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: number of results to return, 25 by default.\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsSearchResult\"\n          description: Participants successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get the participants of a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/participants/pending\":\n    get:\n      description: |-\n        Get the pending participants of a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: getPendingParticipants\n      parameters:\n        - description: The id of the space.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The search pointer (leave empty initially).\n          in: query\n          name: searchPointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: number of results to return, 25 by default.\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsSearchResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsSearchResult\"\n          description: Pending participants successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: Get the pending participants of a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/pinnedTopics\":\n    get:\n      description: |-\n        Retrieve pinned topics of a space\n        OauthScopes: READ_SPACE\n      operationId: getPinnedTopics\n      parameters:\n        - description: The id of the space.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpacePinnedTopic\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpacePinnedTopic\"\n                type: array\n          description: \"Pinned topics successfully retrieved (or none available). \"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Retrieve pinned topics\n      tags:\n        - Spaces\n  \"/spaces/{id}/searchParticipantsToAdd\":\n    get:\n      description: |-\n        Finds participants to add to a space \n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE\n      operationId: searchParticipantsToAdd\n      parameters:\n        - description: The id of the space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: \"The query \"\n          in: query\n          name: query\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AddParticipantsSearchResult\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AddParticipantsSearchResult\"\n                type: array\n          description: participants successfully found\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - ORGANIZE_SPACE\n      summary: \"Finds participants to add to add to a space \"\n      tags:\n        - Spaces\n  \"/spaces/{id}/searchSpaceParticipants\":\n    get:\n      description: |-\n        Get the participants of a space\n        OauthScopes: READ_SPACE\n      operationId: searchSpaceParticipants\n      parameters:\n        - description: The id of the space.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The query to search with. If searchpointer/hasMotre is returned, refine query.\n          in: query\n          name: query\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ParticipantsSearchResultLarge\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ParticipantsSearchResultLarge\"\n                type: array\n          description: Participants successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Get the participants of a space\n      tags:\n        - Spaces\n  \"/spaces/{id}/updateTimestamp\":\n    put:\n      description: |-\n        Update read timestamp\n        OauthScopes: READ_SPACE, WRITE_SPACE\n      operationId: updateReadTimestamp\n      parameters:\n        - description: Id of a space\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                timestamp:\n                  description: The new timestamp\n                  format: date-time\n                  type: string\n              required:\n                - timestamp\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Read timestamp successfully updated.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n            - WRITE_SPACE\n      summary: Update read timestamp\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/participant\":\n    put:\n      description: |-\n        Update participant in space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE\n      operationId: updateParticipantInSpace\n      parameters:\n        - description: Id of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                role:\n                  description: updated role of participant\n                  enum:\n                    - MODERATOR\n                    - AUTHOR\n                    - PARTICIPANT\n                    - READER\n                  maxLength: 2048\n                  type: string\n                userId:\n                  description: The id of the participant to update\n                  maxLength: 2048\n                  type: string\n              required:\n                - userId\n                - role\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Role successfully updated\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - ORGANIZE_SPACE\n      summary: Update participant\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/participant/import/\":\n    get:\n      description: |-\n        missing documentation\n        OauthScopes: READ_SPACE\n      operationId: getParticipantsImportData\n      parameters:\n        - description: missing documentation\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsImportDataResult\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/ParticipantsImportDataResult\"\n          description: missing documentation\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: missing documentation\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/participant/request\":\n    post:\n      description: |-\n        request access for a space\n        OauthScopes: READ_SPACE\n      operationId: requestSpaceAcces\n      parameters:\n        - description: Id of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                reason:\n                  description: Reason why the Access has been requested\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          description: request is recieved\n        \"400\":\n          description: invalid parameter\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: request access for a space\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/participant/{participantId}/deny\":\n    post:\n      description: |-\n        Deny access for a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: denySpaceAcces\n      parameters:\n        - description: Id of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Id of the participant\n          in: path\n          name: participantId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                reason:\n                  description: Reason why the request has been denied\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          description: Access denied\n        \"400\":\n          description: Invalid parameter\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: Deny access for a space\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/participant/{participantId}/grant\":\n    post:\n      description: |-\n        grant access for a space\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: grantSpaceAcces\n      parameters:\n        - description: Id of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Id of the participant\n          in: path\n          name: participantId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: access granted\n        \"400\":\n          description: invalid parameter\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: grant access for a space\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/topic\":\n    post:\n      description: |-\n        creates a new space topic\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT\n      operationId: createSpaceTopic\n      parameters:\n        - description: The ID of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: the attached files\n                  items:\n                    maxLength: 16000\n                    type: string\n                  type: array\n                complex:\n                  description: complex or not\n                  type: boolean\n                content:\n                  description: The content of this topic\n                  maxLength: 200000\n                  type: string\n                contentTags:\n                  description: the content tags\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                formMetaData:\n                  description: The formMetaData\n                  maxLength: 2048\n                  type: string\n                mentionedUser:\n                  description: A list of mentioned users\n                  maxLength: 2048\n                  type: string\n                subject:\n                  description: The subject of the topic\n                  maxLength: 2048\n                  type: string\n                tags:\n                  description: the tags\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              required:\n                - subject\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopic\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopic\"\n          description: returns the created topic\n        \"400\":\n          description: something went wrong\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n            - CREATE_SPACE_CONTENT\n      summary: creates a new space topic\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/topic/{topicId}\":\n    get:\n      description: |-\n        Gets a number of Space replies with a matching topic\n        OauthScopes: READ_SPACE\n      operationId: v2GetTopicWithReplies\n      parameters:\n        - description: Id of the topic\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: ID of the topic\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The number of replies\n          in: query\n          name: numberOfReplies\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopicWithReplies\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopicWithReplies\"\n          description: Returns the replies with a topic\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Gets space replies and a topic\n      tags:\n        - Spaces\n    put:\n      description: |-\n        Updates a topic\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: updateSpaceTopic\n      parameters:\n        - description: ID of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Id of the topic to update\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: the attached files\n                  items:\n                    maxLength: 16000\n                    type: string\n                  type: array\n                complex:\n                  description: complex or not\n                  type: boolean\n                content:\n                  description: content of the topic\n                  maxLength: 200000\n                  type: string\n                contentTags:\n                  description: the content tags\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                formMetaData:\n                  description: formMetaData to update\n                  maxLength: 2048\n                  type: string\n                mentionedUsers:\n                  description: the updated mentioned users\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n                subject:\n                  description: the subject of the topic\n                  maxLength: 2048\n                  type: string\n                tags:\n                  description: the tags\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopic\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceTopic\"\n          description: Returns the updated space topic\n        \"400\":\n          description: Http_bad_request\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Updates a topic\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/topic/{topicId}/reply\":\n    get:\n      description: |-\n        Gets a number of Space replies\n        OauthScopes: READ_SPACE\n      operationId: getSpaceReplies\n      parameters:\n        - description: Id of the containing space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Id of the topic\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Search before or after a certain timestamp\n          in: query\n          name: searchDirection\n          required: true\n          schema:\n            default: BEFORE\n            enum:\n              - BEFORE\n              - AFTER\n            maxLength: 2048\n            type: string\n        - description: Timestamp to start the search from\n          in: query\n          name: timestamp\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: The number of results that should be returned\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceReply\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceReply\"\n          description: Returns the replies\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Gets space replies\n      tags:\n        - Spaces\n    post:\n      description: |-\n        creates a reply to a topic\n        OauthScopes: WRITE_SPACE\n      operationId: createReply\n      parameters:\n        - description: ID of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: ID of the topic\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: the attached files\n                  items:\n                    maxLength: 16000\n                    type: string\n                  type: array\n                complex:\n                  description: complex or not\n                  type: boolean\n                content:\n                  description: Content of the reply\n                  maxLength: 200000\n                  type: string\n                formMetaData:\n                  description: formMetaData used in the reply\n                  maxLength: 2048\n                  type: string\n                mentionedUser:\n                  description: the user mentioned in the reply\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceReply\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceReply\"\n          description: returns the created reply\n        \"400\":\n          description: invalid input\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n      summary: creates a reply to a topic\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/topic/{topicId}/reply/{replyId}\":\n    put:\n      description: |-\n        Updates a space reply\n        OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT\n      operationId: updateSpaceReply\n      parameters:\n        - description: ID of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: ID of the topic\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: id of the reply\n          in: path\n          name: replyId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                attachments:\n                  description: the attached files\n                  items:\n                    maxLength: 16000\n                    type: string\n                  type: array\n                complex:\n                  description: complex or not\n                  type: boolean\n                content:\n                  description: the content of the reply\n                  maxLength: 200000\n                  type: string\n                formMetaData:\n                  description: formMetaData of the reply\n                  maxLength: 2048\n                  type: string\n                mentionedUsers:\n                  description: the mentioned users in the reply\n                  items:\n                    maxLength: 2048\n                    type: string\n                  type: array\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceReply\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/SpaceReply\"\n          description: The updated space reply\n        \"400\":\n          description: Invalid input\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - UPDATE_SPACE_CONTENT\n      summary: Updates a space reply\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/topics\":\n    get:\n      description: |-\n        Gets a number of Space topics\n        OauthScopes: READ_SPACE\n      operationId: getSpaceTopics\n      parameters:\n        - description: Id of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Search before or after a certain timestamp\n          in: query\n          name: searchDirection\n          required: true\n          schema:\n            default: BEFORE\n            enum:\n              - BEFORE\n              - AFTER\n            maxLength: 2048\n            type: string\n        - description: Timestamp to start the search from\n          in: query\n          name: timestamp\n          required: false\n          schema:\n            format: date-time\n            type: string\n        - description: The number of results that should be returned\n          in: query\n          name: numberOfResults\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 255\n            minimum: 0\n            type: number\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpaceTopic\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SpaceTopic\"\n                type: array\n          description: Returns the the topics\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_SPACE\n      summary: Gets space topics\n      tags:\n        - Spaces\n  \"/spaces/{spaceId}/welcomebox/{content}\":\n    put:\n      description: |-\n        Update content of the welcome box of a space\n        OauthScopes: MANAGE_SPACE, WRITE_SPACE\n      operationId: v2UpdateWelcomeBoxContent\n      parameters:\n        - description: Id of the space\n          in: path\n          name: spaceId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The new content\n          in: path\n          name: content\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                displayWelcomeBox:\n                  default: false\n                  description: True, false, default:false\n                  type: boolean\n              type: object\n      responses:\n        \"200\":\n          description: missing documentation\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - MANAGE_SPACE\n            - WRITE_SPACE\n      summary: Update content of welcome box\n      tags:\n        - Spaces\n  \"/spaces/{topicId}/pin\":\n    put:\n      description: |-\n        Pin a topic\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: pinTopic\n      parameters:\n        - description: The id of the topic\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                position:\n                  description: The position to pin to\n                  format: int32\n                  maximum: 255\n                  minimum: 0\n                  type: number\n              required:\n                - position\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Topic successfully pinned.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: Pin a topic\n      tags:\n        - Spaces\n  \"/spaces/{topicId}/unpin\":\n    put:\n      description: |-\n        Unpin a topic\n        OauthScopes: WRITE_SPACE, MANAGE_SPACE\n      operationId: unpinTopic\n      parameters:\n        - description: The id of the topic to unpin\n          in: path\n          name: topicId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: Topic successfully unpinned.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_SPACE\n            - MANAGE_SPACE\n      summary: Unpin a topic\n      tags:\n        - Spaces\n  /telephony/deviceInfos:\n    get:\n      description: |-\n        Get the device infos of the requesting user\n        OauthScopes: READ_USER_PROFILE\n      operationId: v2GetDeviceInfos\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/V2DistributedClientInfo\"\n                type: array\n          description: Device infos successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER_PROFILE\n      summary: Get devices infos\n      tags:\n        - Telephony\n  /telephony/telephonyConversationId:\n    get:\n      description: |-\n        Get telephony conversation id for requesting client\n        OauthScopes: READ_CONVERSATIONS\n      operationId: v2GetTelephonyConversationId\n      responses:\n        \"200\":\n          description: Telephony conversation id successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Get telephony conversation id\n      tags:\n        - Telephony\n  \"/telephony/{telephonyConversationId}/journal\":\n    get:\n      description: |-\n        Get telephony journal\n        OauthScopes: READ_CONVERSATIONS\n      operationId: getJournalEntries\n      parameters:\n        - description: The id of the telephony conversation\n          in: path\n          name: telephonyConversationId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: A timestamp, default = 0\n          in: query\n          name: timestamp\n          required: false\n          schema:\n            default: 0\n            format: int64\n            maximum: 9223372036854776000\n            minimum: 0\n            type: number\n        - description: The number of entries, between 1 and 100, default = 25\n          in: query\n          name: numberOfEntries\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: number\n        - description: The direction (BEFORE||AFTER||BOTH), default = AFTER\n          in: query\n          name: direction\n          required: false\n          schema:\n            default: AFTER\n            enum:\n              - AFTER\n              - BEFORE\n              - BOTH\n            maxLength: 2048\n            type: string\n        - description: The filter, ALL||MISSED||DIALED||RECEIVED||DIVERTED||VOICEMAILS||UNHERAD_VOICEMAILS. default = ALL\n          in: query\n          name: journalFilter\n          required: false\n          schema:\n            default: ALL\n            enum:\n              - ALL\n              - MISSED\n              - DIALED\n              - RECEIVED\n              - DIVERTED\n              - VOICEMAILS\n              - UNHERAD_VOICEMAILS\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ConversationItem\"\n                type: array\n          description: Journal successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n      summary: Get journal\n      tags:\n        - Telephony\n  /users:\n    get:\n      description: |-\n        Search for users based on an email address or username\n        OauthScopes: READ_USER\n      operationId: searchUser\n      parameters:\n        - description: Search for a user by name\n          in: query\n          name: name\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: The users which match the search criteria\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: The search term did not much any results\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Search for users\n      tags:\n        - Users\n  /users/labels:\n    get:\n      description: |-\n        Returns all labels of the user that were defined either explicit or implicit via assignment to conversations.\n        OauthScopes: READ_USER_PROFILE, ORGANIZE_CONVERSATIONS\n      operationId: getLabel\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Label\"\n                type: array\n          description: List of labels\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER_PROFILE\n            - ORGANIZE_CONVERSATIONS\n      summary: Returns all user labels\n      tags:\n        - Users\n    post:\n      description: |-\n        Add a label to the list of user labels\n        OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS\n      operationId: addLabel\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                label:\n                  description: The label value to add\n                  maxLength: 2048\n                  type: string\n              required:\n                - label\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n          description: The label was successfully added\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_USER_PROFILE\n            - ORGANIZE_CONVERSATIONS\n      summary: Add a user label\n      tags:\n        - Conversations\n  \"/users/labels/{labelId}\":\n    delete:\n      description: |-\n        Remove a label from the list of user labels\n        OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS\n      operationId: removeLabel\n      parameters:\n        - description: The label value to remove, either the unique ID or the label value\n          in: path\n          name: labelId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Label\"\n          description: The label was successfully removed\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003cli\u003ethe label does not exist\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_USER_PROFILE\n            - ORGANIZE_CONVERSATIONS\n      summary: Remove a user label\n      tags:\n        - Conversations\n  /users/list:\n    get:\n      description: |-\n        Search multiple users given by id or email address.\n        OauthScopes: READ_USER\n      operationId: searchUsersList\n      parameters:\n        - description: Multiple email addresses or UUIDs.\n          explode: true\n          in: query\n          name: name\n          required: true\n          schema:\n            items:\n              maxLength: 2048\n              type: string\n            type: array\n        - description: Boolean, return full user info?\n          in: query\n          name: returnFullUserInfo\n          required: false\n          schema:\n            default: false\n            type: boolean\n        - description: Boolean, lookup secondary email?\n          in: query\n          name: secondaryLookup\n          required: false\n          schema:\n            default: false\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: At least one user was found and returned in a list\n        \"400\":\n          description: Bad Request\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: No user was found\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Search multiple users.\n      tags:\n        - Users\n  /users/presence:\n    get:\n      description: |-\n        Gets the presence status of the users whose IDs or email addresses are given.\n        OauthScopes: READ_USER\n      operationId: getPresence\n      parameters:\n        - description: A list of unique user IDs or email addresses of the users you want to query the presence state for\n          explode: true\n          in: query\n          name: userIds\n          required: true\n          schema:\n            items:\n              maxLength: 6500\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Presence\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Presence\"\n                type: array\n          description: The presence states\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe userIds passed as parameter are not provided in the correct format\u003c/li\u003e\u003cli\u003e or a valid email address\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: One or more of the users do not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Gets the presence status\n      tags:\n        - Users\n    put:\n      description: |-\n        Updates the presence status of the authenticated user.\n        OauthScopes: WRITE_USER_PROFILE, MANAGE_PRESENCE\n      operationId: setUserPresence\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                clearDND:\n                  default: false\n                  description: Clear the DND of the user.\n                  type: boolean\n                dndUntil:\n                  description: Timestamp until the DND state of the user is active. This field is mandatory when the state is set to DND.\n                  format: date-time\n                  type: string\n                state:\n                  description: The user's presence.\n                  maxLength: 2048\n                  type: string\n                statusMessage:\n                  description: An optional status message that is displayed instead of the location\n                  maxLength: 2048\n                  type: string\n              required:\n                - state\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Presence\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Presence\"\n          description: The presence states\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe presence state is DND and the data format of the passed dndUntil is missing \u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_USER_PROFILE\n            - MANAGE_PRESENCE\n      summary: Updates the presence status\n      tags:\n        - Users\n  /users/profile:\n    get:\n      description: |-\n        Gets the authenticated user's profile information.\n        OauthScopes: READ_USER_PROFILE\n      operationId: getProfile\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: Gets the authenticated user's profile information\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER_PROFILE\n      summary: Gets the authenticated user's profile information\n      tags:\n        - Users\n    put:\n      description: |-\n        Updates the user profile of the authenticated user\n        OauthScopes: WRITE_USER_PROFILE\n      operationId: updateProfile\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                firstname:\n                  description: The new firstname of the user\n                  maxLength: 128\n                  type: string\n                jobTitle:\n                  description: The new job title of the user\n                  maxLength: 128\n                  type: string\n                lastname:\n                  description: The new lastname of the user\n                  maxLength: 128\n                  type: string\n                locale:\n                  description: The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN.\n                  enum:\n                    - EN_US\n                    - DE_DE\n                    - EN_GB\n                    - ES_ES\n                    - FR_FR\n                    - IT_IT\n                    - RU_RU\n                    - ZH_HANS_CN\n                    - PT_BR\n                    - NL_NL\n                    - CA_ES\n                  maxLength: 5\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: The modified user object.\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe user does not exist\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_USER_PROFILE\n      summary: Updates the user profile\n      tags:\n        - Conversations\n  /users/supportinfo:\n    get:\n      description: |-\n        Gets the support information for the tenant of the requesting user\n        OauthScopes: READ_USER_PROFILE\n      operationId: getSupportInfo\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/SupportInfo\"\n          description: The operation was successful, the support information returned\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER_PROFILE\n      summary: Gets the support information\n      tags:\n        - Users\n  \"/users/{emailAddress}/getUserByEmail\":\n    get:\n      description: |-\n        Get user by first or secondary email address\n        OauthScopes: READ_USER_PROFILE\n      operationId: getUserByEmailAddress\n      parameters:\n        - description: The main or secondary email address of a user.\n          in: path\n          name: emailAddress\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: secondaryLookup enabled (default = false)\n          in: query\n          name: secondaryLookup\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: User successfully retrieved\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: \"User not found or not a session guest. \"\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER_PROFILE\n      summary: Get user by email\n      tags:\n        - Users\n  \"/users/{id}\":\n    get:\n      description: |-\n        Gets the profile information of the user with the given ID.\n        OauthScopes: READ_USER\n      operationId: getUserById\n      parameters:\n        - description: The unique ID or the email address of the user to fetch\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: The operation was successful, the user profile is returned\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe data format of the passed user does not match either a UUID (user primary key)\u003c/li\u003e\u003cli\u003e or an valid email address\u003c/li\u003e\u003cli\u003eor a field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: The user does not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Gets the user's profile information\n      tags:\n        - Users\n  \"/users/{id}/presence\":\n    get:\n      description: |-\n        Gets the presence status of the users whose ID or email address is given.\n        OauthScopes: READ_USER\n      operationId: getUserPresence\n      parameters:\n        - description: The unique ID or the email address of the user to fetch.\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Presence\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Presence\"\n          description: The presence state\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe data format of the passed user does not match either a UUID (user primary key)\u003c/li\u003e\u003cli\u003e or a valid email address\u003c/li\u003e\u003cli\u003eor a field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: The user does not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Gets the presence status\n      tags:\n        - Users\n  /webhooks:\n    delete:\n      description: |-\n        Unregisters all webHooks of the authenticated user\n        OauthScopes: READ_CONVERSATIONS, READ_USER\n      operationId: removeWebHooks\n      responses:\n        \"204\":\n          description: The operation was successful\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - READ_USER\n      summary: Removes all webHooks\n      tags:\n        - Outgoing Webhooks\n    get:\n      description: |-\n        Gets the list of webHooks registered for this user or API.\n        OauthScopes: READ_CONVERSATIONS, READ_USER\n      operationId: getWebHook\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/WebHook\"\n                type: array\n          description: The list of registered webHooks\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - READ_USER\n      summary: Gets a list of webHooks\n      tags:\n        - Outgoing Webhooks\n    post:\n      description: |-\n        Registers the webHook with the given filter and callback URL.\n        OauthScopes: READ_CONVERSATIONS, READ_USER\n      operationId: addWebHook\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                filter:\n                  description: \"A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE\"\n                  items:\n                    enum:\n                      - CONVERSATION.CREATE\n                      - CONVERSATION.UPDATE\n                      - CONVERSATION.ADD_ITEM\n                      - CONVERSATION.UPDATE_ITEM\n                      - USER.INCOMING_CALL\n                      - USER.USER_UPDATED\n                      - USER.USER_SETTING_UPDATED\n                      - USER.SUBMIT_FORM_DATA\n                    maxLength: 2048\n                    type: string\n                  type: array\n                url:\n                  description: WebHook callback URL\n                  maxLength: 2048\n                  type: string\n              required:\n                - url\n                - filter\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n          description: The webHook was successfully registered\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ean invalid URL\u003c/li\u003e\u003cli\u003ean invalid event filter\u003c/li\u003e\u003cli\u003ean unsupported event filter\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"403\":\n          description: The maximum number of allowed webHook is reached\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - READ_USER\n      summary: Registers a WebHook\n      tags:\n        - Outgoing Webhooks\n  \"/webhooks/incoming/create/{conversationId}\":\n    post:\n      description: |-\n        Create a new webhook. Conversation must exist and creater has to be participant.\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: createIncomingWebhook\n      parameters:\n        - description: The id of the conversation.\n          in: path\n          name: conversationId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The name of the webhook\n          in: query\n          name: name\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: The id of the user of the webhook\n          in: query\n          name: userId\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n        - description: A short description of the webhook\n          in: query\n          name: description\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/IncomingWebhook\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/IncomingWebhook\"\n          description: The created webhook object as JSON string.\n        \"400\":\n          description: Could not create webhook.\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Create a new webhook for existing conversation.\n      tags:\n        - Incoming Webhooks\n  \"/webhooks/incoming/user/{userId}\":\n    get:\n      description: |-\n        Get all webhooks of a special user.\n        OauthScopes: READ_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: getIncomingWebhookByUser\n      parameters:\n        - description: The id of the user.\n          in: path\n          name: userId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n        - description: Max number of hooks per request. Default is 25\n          in: query\n          name: pagesize\n          required: false\n          schema:\n            default: 25\n            format: int32\n            maximum: 100\n            minimum: 1\n            type: number\n        - description: Start of search if consequtive call.\n          in: query\n          name: searchpointer\n          required: false\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/IncomingWebhook\"\n                type: array\n            application/xml:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/IncomingWebhook\"\n                type: array\n          description: Result successful\n        \"400\":\n          description: The request cannot be fulfilled due to bad syntax\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Get all webhooks of a special user.\n      tags:\n        - Incoming Webhooks\n  \"/webhooks/incoming/{webhookId}\":\n    delete:\n      description: |-\n        Delete a new webhook. Webhook must exist\n        OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS\n      operationId: deleteIncomingWebhook\n      parameters:\n        - description: The id of the webhook\n          in: path\n          name: webhookId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          description: The webhook was deleted\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: Could not find webhook\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - WRITE_CONVERSATIONS\n            - MANAGE_CONVERSATIONS\n      summary: Delete an existing webhook\n      tags:\n        - Incoming Webhooks\n    post:\n      description: Post text items to conversations via slack apps.\n      operationId: postWebhookAsSlackMessage\n      parameters:\n        - description: The id of the webhook.\n          in: path\n          name: webhookId\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: \"#/components/schemas/IncomingWebhookSlackMessage\"\n        description: Attached JSON object in slack format.\n        required: true\n      responses:\n        \"200\":\n          description: Message was posted to conversation\n        \"400\":\n          description: The request cannot be fulfilled due to bad syntax\n        \"401\":\n          description: The authentication was not successful\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      summary: Post text item for conversation via webhook.\n      tags:\n        - Incoming Webhooks\n  /webhooks/presence:\n    post:\n      description: |-\n        Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed\n        OauthScopes: READ_USER\n      operationId: addPresenceWebHook\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                url:\n                  description: WebHook callback URL\n                  maxLength: 2048\n                  type: string\n                userIds:\n                  description: The IDs of the users to subscribe for their presence\n                  items:\n                    maxLength: 6500\n                    type: string\n                  type: array\n              required:\n                - url\n                - userIds\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n          description: The webHook was successfully registered\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ean invalid URL\u003c/li\u003e\u003cli\u003eone or more invalid userIds\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"403\":\n          description: The maximum number of allowed userIds is reached or the maximum number of allowed webHook is reached\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Registers Presence WebHook registration\n      tags:\n        - Outgoing Webhooks\n  \"/webhooks/presence/{id}\":\n    put:\n      description: |-\n        Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds.\n        OauthScopes: READ_USER\n      operationId: updatePresenceWebHook\n      parameters:\n        - description: The unique ID of the webHook to update\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                url:\n                  description: WebHook callback URL\n                  maxLength: 2048\n                  type: string\n                userIds:\n                  description: The IDs of the users to subscribe for their presence\n                  items:\n                    maxLength: 6500\n                    type: string\n                  type: array\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n          description: The webHook registration was successfully updated\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ean invalid URL\u003c/li\u003e\u003cli\u003eone or more invalid userIds\u003c/li\u003e\u003cli\u003eno input parameter is provided\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"403\":\n          description: The maximum number of allowed userIds is reached\n        \"404\":\n          description: The webHook does not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_USER\n      summary: Updates a Presence WebHook registration\n      tags:\n        - Outgoing Webhooks\n  \"/webhooks/{id}\":\n    delete:\n      description: |-\n        Unregisters the webHook with the given ID.\n        OauthScopes: READ_CONVERSATIONS, READ_USER\n      operationId: removeWebHook\n      parameters:\n        - description: The unique ID of the webHook to remove\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"204\":\n          description: The operation was successful\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe data format of the given id does not match a UUID\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: The webHook does not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - READ_USER\n      summary: Removes a registered webHook\n      tags:\n        - Outgoing Webhooks\n    get:\n      description: |-\n        Gets the registered webHook with the given ID.\n        OauthScopes: READ_CONVERSATIONS, READ_USER\n      operationId: getWebHookById\n      parameters:\n        - description: The unique ID of the webHook to fetch\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n          description: The registered webHook with the given ID\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ethe data format of the given id does not match a UUID\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: The webHook does not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - READ_USER\n      summary: Gets a webHook\n      tags:\n        - Outgoing Webhooks\n    put:\n      description: |-\n        Updates a webHook registration with the given filter and callback URL.\n        OauthScopes: READ_CONVERSATIONS, READ_USER\n      operationId: updateWebHook\n      parameters:\n        - description: The unique ID of the webHook to update\n          in: path\n          name: id\n          required: true\n          schema:\n            maxLength: 2048\n            type: string\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                filter:\n                  description: \"A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE\"\n                  items:\n                    enum:\n                      - CONVERSATION.CREATE\n                      - CONVERSATION.UPDATE\n                      - CONVERSATION.ADD_ITEM\n                      - CONVERSATION.UPDATE_ITEM\n                      - USER.INCOMING_CALL\n                      - USER.USER_UPDATED\n                      - USER.USER_SETTING_UPDATED\n                      - USER.SUBMIT_FORM_DATA\n                    maxLength: 2048\n                    type: string\n                  type: array\n                url:\n                  description: WebHook callback URL\n                  maxLength: 2048\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/WebHook\"\n          description: The webHook registration was successfully updated\n        \"400\":\n          description: \"The request cannot be fulfilled due to bad syntax: \u003cul\u003e\u003cli\u003ean invalid URL\u003c/li\u003e\u003cli\u003ean invalid event filter\u003c/li\u003e\u003cli\u003ean unsupported event filter\u003c/li\u003e\u003cli\u003eno input parameter is provided\u003c/li\u003e\u003cli\u003ea field constraint is violated\u003c/li\u003e\u003c/ul\u003e\"\n        \"401\":\n          description: The authentication was not successful\n        \"404\":\n          description: The webHook does not exist\n        \"500\":\n          description: The server encountered an internal error and the operation could not be completed.\n        \"503\":\n          description: The server is currently unable to receive requests.\n      security:\n        - oauth:\n            - ALL\n            - READ_CONVERSATIONS\n            - READ_USER\n      summary: Updates a WebHook registration\n      tags:\n        - Outgoing Webhooks\ncomponents:\n  requestBodies:\n    addParticipantCommunity:\n      content:\n        application/x-www-form-urlencoded:\n          schema:\n            properties:\n              participants:\n                description: The IDs or the unique email addresses of the Circuit users that should to be added.\n                items:\n                  maxLength: 6500\n                  type: string\n                type: array\n            required:\n              - participants\n            type: object\n      required: true\n  schemas:\n    AddParticipantsSearchResult:\n      properties:\n        department:\n          description: The department of the participant\n          type: string\n        firstName:\n          description: The first name of the participant\n          type: string\n        isMember:\n          description: is the participant a member, true or false\n          type: boolean\n        jobTitle:\n          description: The job title of the participant\n          type: string\n        lastName:\n          description: The last name of the participant\n          type: string\n        smallImageUri:\n          description: The uri of the small picture of the participant\n          type: string\n        tenantId:\n          description: the tenant id of the participant\n          type: string\n        userId:\n          description: The id of the participant\n          type: string\n    Attachment:\n      properties:\n        creationTime:\n          description: The creation time of the attachment.\n          format: int64\n          type: number\n        creatorId:\n          description: The id of the creator of the attachment.\n          type: string\n        deleteUrl:\n          description: The delete URL of the attachment.\n          type: string\n        fileId:\n          description: The id of the attachment file.\n          type: string\n        fileName:\n          description: The name of the attachment file.\n          type: string\n        itemId:\n          description: The item id to which the attachment is attached.\n          type: string\n        mimeType:\n          description: The mime type of the attachment file.\n          type: string\n        modificationTime:\n          description: The modification time of the attachment.\n          format: int64\n          type: number\n        size:\n          description: The size of the attachment file.\n          format: int64\n          type: number\n        url:\n          description: The URL of the attachment.\n          type: string\n    BasicSearchResult:\n      properties:\n        spaces:\n          description: List of spaces\n          items:\n            $ref: \"#/components/schemas/Space\"\n          type: array\n        status:\n          description: The status of the search (NORESULT, ERROR, TIMEOUT, MORERESULT)\n          type: string\n    BridgeNumber:\n      properties:\n        bridgeNumber:\n          description: The number that has to be called to join the real time session of a conversation\n          type: string\n        country:\n          description: The country where the bridge is hosted\n          type: string\n        isMostUsed:\n          description: Is most used\n          type: boolean\n        locale:\n          description: The locale of the bridge\n          type: string\n        name:\n          description: The name / identifier of the bridge\n          type: string\n        type:\n          description: Information of the billing for the call, i.e. if the caller has to pay or not for the call\n          type: string\n    Conversation:\n      properties:\n        avatar:\n          description: The URL of the small avatar image of the conversation\n          type: string\n        avatarLarge:\n          description: The URL of the large avatar image of the conversation\n          type: string\n        convId:\n          description: The ID of the conversation\n          type: string\n        creationTime:\n          description: UTC timestamp when the conversation was created\n          format: int64\n          type: number\n        creatorId:\n          description: The ID of the user who created the conversation\n          type: string\n        creatorTenantId:\n          description: The ID of the Circuit domain (tenant) where the creator of the conversation belongs to\n          type: string\n        description:\n          description: The description of the conversation. This field is available only for conversations with type COMMUNITY\n          type: string\n        isGuestAccessDisabled:\n          description: Indicates whether guest access to the conversation is disabled or not\n          type: boolean\n        isModerated:\n          description: Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation\n          type: boolean\n        modificationTime:\n          description: UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited\n          format: int64\n          type: number\n        participants:\n          description: Array of active participants\n          items:\n            type: string\n          type: array\n        topic:\n          description: The title of the conversation. Conversations of type DIRECT cannot have a title\n          type: string\n        topicPlaceholder:\n          description: The title of the conversation. Conversations of type DIRECT cannot have a title\n          type: string\n        type:\n          description: \"The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE\"\n          type: string\n    ConversationDetails:\n      properties:\n        bridgeNumbers:\n          description: A list of bridge numbers which can be used to dial in to the real time session via phone\n          items:\n            $ref: \"#/components/schemas/BridgeNumber\"\n          type: array\n        convId:\n          description: missing documentation\n          type: string\n        conversationCreatorId:\n          description: The user ID of the conversation creator\n          type: string\n        isModerationAllowed:\n          description: Indicates if the conversation is allowed to be moderated\n          type: boolean\n        isRecordingAllowed:\n          description: Indicates if the conversation is allowed to be recorded\n          type: boolean\n        link:\n          description: A link that can be used in a browser to join the session\n          type: string\n        pin:\n          description: The PIN to join a real time session via phone\n          type: string\n    ConversationItem:\n      properties:\n        attachments:\n          description: Array of files attached to the item\n          items:\n            $ref: \"#/components/schemas/Attachment\"\n          type: array\n        convId:\n          description: The ID of the conversation the item belongs to\n          type: string\n        creationTime:\n          description: UTC timestamp when the item was created\n          format: int64\n          type: number\n        creatorId:\n          description: The ID of the user who created the conversation item\n          type: string\n        includeInUnreadCount:\n          description: Indicates whether the item is included in the unread message count\n          type: boolean\n        itemId:\n          description: The ID of the item\n          type: string\n        modificationTime:\n          description: UTC timestamp when the conversation was modified\n          format: int64\n          type: number\n        rtc:\n          $ref: \"#/components/schemas/RtcItem\"\n        system:\n          $ref: \"#/components/schemas/SystemItem\"\n        text:\n          $ref: \"#/components/schemas/ConversationTextItem\"\n        type:\n          description: The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC\n          type: string\n    ConversationParticipant:\n      properties:\n        displayName:\n          description: The display name of the participant.\n          type: string\n        firstName:\n          description: The first name of the participant.\n          type: string\n        isDeleted:\n          description: If the participant is deleted.\n          type: boolean\n        largeImageUri:\n          description: The large image uri of the participant.\n          type: string\n        lastName:\n          description: The last name of the participant.\n          type: string\n        smallImageUri:\n          description: The small image uri of the participant;\n          type: string\n        type:\n          description: The type of the participant\n          type: string\n        userId:\n          description: The unique user id of the participant.\n          type: string\n    ConversationParticipantsList:\n      properties:\n        hasMore:\n          description: are more results available, then start another search with finer query\n          type: boolean\n        participantList:\n          description: list of participants\n          items:\n            $ref: \"#/components/schemas/ConversationParticipant\"\n          type: array\n        searchPointer:\n          description: \"pointer for stored search \"\n          type: string\n    ConversationSearchResult:\n      properties:\n        matchingConversations:\n          description: A list of result items for conversations that match the search term.\n          items:\n            $ref: \"#/components/schemas/ConversationSearchResultItem\"\n          type: array\n    ConversationSearchResultItem:\n      properties:\n        convId:\n          description: The ID of the conversation to which the matching items belong.\n          type: string\n        itemIds:\n          description: The conversation items which contain the search result. The list maybe empty in case a hit was found for the conversation related data like topic or participants.\n          items:\n            type: string\n          type: array\n    ConversationTextItem:\n      properties:\n        content:\n          description: The content of the text item\n          type: string\n        contentType:\n          description: \"The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)\"\n          type: string\n        formMetaData:\n          description: The meta data form\n          type: string\n        isWebhookMessage:\n          description: Is this a webhook message?\n          type: boolean\n        likedUserIds:\n          description: Array of IDs of the users who liked the item\n          items:\n            type: string\n          type: array\n        parentId:\n          description: The ID of the parent item of the text item. This field is optional and can be used for thread views\n          type: string\n        preview:\n          $ref: \"#/components/schemas/Preview\"\n        state:\n          description: \"The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)\"\n          type: string\n        subject:\n          description: TThe subject of the text item. This field is optional and maybe filled when creating the text item\n          type: string\n    ConversationsPage:\n      properties:\n        conversationList:\n          description: List of conversations\n          items:\n            $ref: \"#/components/schemas/Conversation\"\n          type: array\n        hasMore:\n          description: Has more pages of conversations\n        nextPagePointer:\n          description: Pointer to the next set page of conversations\n          type: string\n    DirectoryResult:\n      properties:\n        hasMore:\n          description: are more results available, than start another search\n          type: boolean\n        searchPointer:\n          description: \"pointer for stored search \"\n          type: string\n        spaces:\n          description: list of spaces\n          items:\n            $ref: \"#/components/schemas/Space\"\n          type: array\n    FlaggedItem:\n      properties:\n        item:\n          $ref: \"#/components/schemas/SpaceItem\"\n        parentItem:\n          $ref: \"#/components/schemas/SpaceItem\"\n    FlaggedItemsResult:\n      properties:\n        flaggedItems:\n          description: A list of flagged items\n          items:\n            $ref: \"#/components/schemas/FlaggedItem\"\n          type: array\n        hasMore:\n          description: More results available (true-use searchpointer for next search/false)\n          type: boolean\n        searchPointer:\n          description: The searchpointer\n          type: string\n    GetSpacesResult:\n      properties: {}\n    IncomingWebhook:\n      properties:\n        conversationId:\n          description: The conversation where the posts go to\n          type: string\n        creationTime:\n          description: Milliseconds since 1.1.1900 when the hook was created\n          format: int64\n          type: number\n        creatorId:\n          description: Th e user who created the webhook\n          type: string\n        description:\n          description: A short plain text to describe the webhook\n          type: string\n        modificationTime:\n          description: Milliseconds since 1.1.1900 when the hook was modified\n          format: int64\n          type: number\n        name:\n          description: A name to identify the webhook\n          type: string\n        status:\n          description: Status may be ENABLED or DISABLED. A disabled hook cannot be used\n          type: string\n        tenantId:\n          description: The tenant where the conversation and users belong to\n          type: string\n        url:\n          description: The url where the webhokk can be used\n          type: string\n        userId:\n          description: The user who will occur as author of the posts\n          type: string\n        webhookId:\n          description: Unique id of the webhook\n          type: string\n    IncomingWebhookSlackMessage:\n      properties:\n        fileURL:\n          description: missing documentation\n          type: string\n        filename:\n          description: missing documentation\n          type: string\n        markdown:\n          description: missing documentation\n          type: boolean\n        subject:\n          description: missing documentation\n          type: string\n        text:\n          description: The text which will occur in the conversation. May contain formats like *bold* or _italic_\n          type: string\n    Label:\n      properties:\n        labelId:\n          description: The unique ID of the label\n          type: string\n        value:\n          description: The clear text value\n          type: string\n    LabelIds:\n      properties:\n        labelIds:\n          description: A list of label ids.\n          items:\n            type: string\n          type: array\n    Participant:\n      properties:\n        creationTime:\n          description: Time when the participant was added to the space\n          format: int64\n          type: number\n        labelIds:\n          description: The list of label IDs of all the labels assigned to the space.\n          items:\n            type: string\n          type: array\n        lastContentCreationTime:\n          description: Time stamp when user last created content in the space.\n          format: int64\n          type: number\n        lastReadTimestamp:\n          description: Last time stamp when the user read content in this space.\n          format: int64\n          type: number\n        modificationTime:\n          description: Time when the participant was changed last.\n          format: int64\n          type: number\n        numberOfReplies:\n          description: Number of replies in the space created by this participant.\n          format: int32\n          type: number\n        numberOfTopics:\n          description: Number of topics in the space created by this participant.\n          format: int32\n          type: number\n        role:\n          description: The name of the role of the participant.\n          type: string\n        spaceId:\n          description: The unique ID of the space to which the participant.\n          type: string\n        state:\n          description: The name of the state of the participant;\n          type: string\n        tenantId:\n          description: The unique tenant id of the participant.\n          type: string\n        userId:\n          description: The unique user id of the participant.\n          type: string\n    ParticipantAddResult:\n      properties: {}\n    ParticipantSearchResult:\n      properties:\n        creationTime:\n          description: Time when the participant was added to the space\n          format: int64\n          type: number\n        firstName:\n          description: The first name of the participant\n          type: string\n        lastName:\n          description: The last name of the participant\n          type: string\n        modificationTime:\n          description: Time when the participant was changed last.\n          format: int64\n          type: number\n        numberOfReplies:\n          description: Number of replies in the space created by this participant.\n          format: int32\n          type: number\n        numberOfTopics:\n          description: Number of topics in the space created by this participant.\n          format: int32\n          type: number\n        role:\n          description: The name of the role of the participant\n          type: string\n        smallImageUri:\n          description: The uri of the small picture of the participant\n          type: string\n        state:\n          description: The name of the state of the participant\n          type: string\n        tenantId:\n          description: the tenant id of the participant\n          type: string\n        userId:\n          description: The id of the participant\n          type: string\n    ParticipantSearchResultLarge:\n      properties:\n        creationTime:\n          description: Time when the participant was added to the space\n          format: int64\n          type: number\n        department:\n          description: The department of the participant\n          type: string\n        firstName:\n          description: The first name of the participant\n          type: string\n        isMember:\n          description: Is the participant a member of the space\n          type: boolean\n        jobDescription:\n          description: The job description of the participant\n          type: string\n        lastContentCreationTime:\n          description: The last time the participant created content.\n          format: int64\n          type: number\n        lastName:\n          description: The last name of the participant\n          type: string\n        modificationTime:\n          description: Time when the participant was changed last.\n          format: int64\n          type: number\n        numberOfReplies:\n          description: The number of replies\n          format: int32\n          type: number\n        numberOfTopics:\n          description: The number of topics\n          format: int32\n          type: number\n        reason:\n          description: The reason of it all (42)\n          type: string\n        role:\n          description: The name of the role of the participant\n          type: string\n        smallImageUri:\n          description: The uri of the small picture of the participant\n          type: string\n        spaceId:\n          description: The id of the space\n          type: string\n        state:\n          description: \"The name of the state \"\n          type: string\n        tenantId:\n          description: the tenant id of the participant\n          type: string\n        userId:\n          description: The id of the participant\n          type: string\n    ParticipantSpaceWrapper:\n      properties: {}\n    ParticipantsImportDataResult:\n      properties:\n        actualNumberOfImportedParticipants:\n          description: Actual number of imported participants\n          format: int32\n          type: number\n        estimatedImportDuration:\n          description: Estimated import duration\n          format: int64\n          type: number\n        importEndDate:\n          description: Import end date\n          format: int64\n          type: number\n        importFileId:\n          description: The file id of the import\n          type: string\n        importFileName:\n          description: The name of the import file\n          type: string\n        importProgress:\n          description: The progress of the import\n          format: int32\n          type: number\n        importStartDate:\n          description: Import start date\n          format: int64\n          type: number\n        importStatus:\n          description: The status of the import\n          type: string\n        plannedNumberOfImportedParticipants:\n          description: Planned number of imported participants\n          format: int32\n          type: number\n        resultFileId:\n          description: The file id of the result file\n          type: string\n        resultFileName:\n          description: The name of the result file\n          type: string\n    ParticipantsLike:\n      properties:\n        firstName:\n          description: The first name of the user\n          type: string\n        largeImageUri:\n          description: The large image uri of the user\n          type: string\n        lastName:\n          description: The last name of the user\n          type: string\n        smallImageUri:\n          description: The small image uri of the user\n          type: string\n        userId:\n          description: The id of the user\n          type: string\n    ParticipantsLikeResult:\n      properties:\n        hasMore:\n          description: More results available (true-use searchpointer for next search/false)\n          type: boolean\n        participants:\n          description: A list of participants who like the topic\n          items:\n            $ref: \"#/components/schemas/ParticipantsLike\"\n          type: array\n        searchPointer:\n          description: The searchpointer\n          type: string\n    ParticipantsSearchResult:\n      properties:\n        hasMore:\n          description: are more results available, than start another search\n          type: boolean\n        participants:\n          description: list of participants\n          items:\n            $ref: \"#/components/schemas/ParticipantSearchResult\"\n          type: array\n        searchPointer:\n          description: \"pointer for stored search \"\n          type: string\n    ParticipantsSearchResultLarge:\n      properties:\n        hasMore:\n          description: are more results available, then start another search with finer query\n          type: boolean\n        participants:\n          description: list of participants\n          items:\n            $ref: \"#/components/schemas/ParticipantSearchResultLarge\"\n          type: array\n        searchPointer:\n          description: \"pointer for stored search \"\n          type: string\n    PinnedTopic:\n      properties:\n        conversationId:\n          description: '\"ID of the conversation\"'\n          type: string\n        conversationItemId:\n          description: '\"ID of the pinned topic\"'\n          type: string\n        pinnedTime:\n          description: '\"The exact moment the Pinning was happening\"'\n          format: int64\n          type: number\n    Presence:\n      properties:\n        dndUntil:\n          description: Timestamp until the DND state of the user is active\n          format: int64\n          type: number\n        isOptedOut:\n          description: Indicates whether the user has opted out of their presence\n          type: boolean\n        latitude:\n          description: The latitude of the geo location of the user\n          format: float\n          type: number\n        locationText:\n          description: The geo location of the user in clear text\n          type: string\n        longitude:\n          description: The longitude of the geo location of the user\n          format: float\n          type: number\n        mobile:\n          description: Identifies whether the presence state is based on the state information of a mobile device or not\n          type: boolean\n        poor:\n          description: n/a\n          type: boolean\n        state:\n          description: \"The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)\"\n          type: string\n        statusMessage:\n          description: A free formed status message of the user\n          type: string\n        timeZoneOffset:\n          description: The timezone offset of the user compared to UTC\n          format: int32\n          type: number\n        userId:\n          description: The ID of the user\n          type: string\n    Preview:\n      properties:\n        imageURI:\n          description: n/a\n          type: string\n        srcURL:\n          description: n/a\n          type: string\n        title:\n          description: n/a\n          type: string\n        type:\n          description: n/a\n          type: string\n    RtcEnded:\n      properties:\n        duration:\n          description: The duration of the call.\n          format: int64\n          type: number\n        maxNumberOfAttendees:\n          description: The maximum number of attendees during a call.\n          format: int32\n          type: number\n        pickFromParticipant:\n          description: UserID of the pick from participant.\n          type: string\n    RtcItem:\n      properties:\n        ended:\n          $ref: \"#/components/schemas/RtcEnded\"\n        missed:\n          description: Indicates a missed call.\n          type: string\n        moved:\n          $ref: \"#/components/schemas/RtcMoved\"\n        rtcParticipants:\n          description: Participants of the call.\n          items:\n            $ref: \"#/components/schemas/RtcParticipant\"\n          type: array\n        type:\n          description: The type of the RTC item.\n          type: string\n    RtcMoved:\n      properties:\n        conversationId:\n          description: ID of the conversation moved from or to.\n          type: string\n        direction:\n          description: Moved from or to conversation.\n          type: string\n    RtcParticipant:\n      properties:\n        displayName:\n          description: The display name of the participant.\n          type: string\n        fullyQualifiedNumber:\n          description: missing documentation\n          type: string\n        phoneNumber:\n          description: missing documentation\n          type: string\n        resolvedUser:\n          description: missing documentation\n        type:\n          description: The RTC type of the participant.\n          type: string\n        userId:\n          description: The ID of the participant.\n          type: string\n    SharedItem:\n      properties:\n        containerId:\n          description: The Id of the container\n          type: string\n        containerName:\n          description: Name of the container\n          type: string\n        containerType:\n          description: Type of the container\n          type: string\n        creationTime:\n          description: The time this Item has been created\n          format: int64\n          type: number\n        creatorId:\n          description: The Id of the creator\n          type: string\n        itemId:\n          description: Id of the item\n          type: string\n        parentTopicId:\n          description: The Id of the parent topic\n          type: string\n        subType:\n          description: The subtype\n          type: string\n    Space:\n      properties:\n        accessModeType:\n          description: The name of the access mode type of the space.\n          type: string\n        creationTime:\n          description: The space creation time.\n          format: int64\n          type: number\n        creatorId:\n          description: The ID of the space creator.\n          type: string\n        defaultRole:\n          description: The name of the default role of a new participant.\n          type: string\n        description:\n          description: The space description.\n          type: string\n        largePictureBase64:\n          description: Base64 encoded image that can be set during the creation and the update of a space.\n          type: string\n        largePictureContentType:\n          description: The content type of the image.\n          type: string\n        largePictureId:\n          description: The file id of the large version of the picture.\n          type: string\n        lastContentCreationTime:\n          description: Time stamp when the last content (topic / reply) was created within this space.\n          format: int64\n          type: number\n        lastContentCreatorId:\n          description: User ID of the user which created the last content.\n          type: string\n        modificationTime:\n          description: The space modification time.\n          format: int64\n          type: number\n        name:\n          description: The unique space name.\n          type: string\n        numberOfExternalParticipants:\n          description: Number of external participants in the space.\n          format: int32\n          type: number\n        numberOfParticipants:\n          description: Number of participants in the space.\n          format: int32\n          type: number\n        numberOfPinnedTopics:\n          description: Number of pinned topics in the space.\n          format: int32\n          type: number\n        numberOfReplies:\n          description: Number of replies in the space.\n          format: int32\n          type: number\n        numberOfTopics:\n          description: Number of topics in the space.\n          format: int32\n          type: number\n        ownerId:\n          description: The ID of the space owner.\n          type: string\n        smallPictureBase64:\n          description: Base64 encoded image that can be set during the creation and the update of a space.\n          type: string\n        smallPictureContentType:\n          description: The content type of the image.\n          type: string\n        smallPictureId:\n          description: The file id of the small version of the picture.\n          type: string\n        spaceId:\n          description: The unique space ID generated by the backend during the creation of the space.\n          type: string\n        status:\n          description: The name of the status of the space.\n          type: string\n        tags:\n          description: The list of space tags.\n          items:\n            type: string\n          type: array\n        tenantId:\n          description: The ID of the space tenant.\n          type: string\n        type:\n          description: The name of the space type.\n          type: string\n    SpaceAttachment:\n      properties:\n        creationTime:\n          description: time this item has been created\n          format: int64\n          type: number\n        creatorId:\n          description: the id of the creator\n          type: string\n        fileId:\n          description: the id of the field\n          type: string\n        fileName:\n          description: name of the file\n          type: string\n        inlineUsage:\n          description: is inline usage allowed\n          type: boolean\n        itemId:\n          description: id of the item\n          type: string\n        layout:\n          description: layout\n          type: string\n        mimeType:\n          description: the media type\n          type: string\n        modificationTime:\n          description: the time this item has been ben modified\n          format: int64\n          type: number\n        size:\n          description: size of this file\n          format: int64\n          type: number\n        spaceId:\n          description: id of the space\n          type: string\n        thumbnailId:\n          description: the id of the tumbnail\n          type: string\n    SpaceExternalAttachment:\n      properties:\n        attachment:\n          $ref: \"#/components/schemas/SpaceAttachment\"\n        downloadLocation:\n          description: the location of the download\n          type: string\n        previewLocation:\n          description: the location of the preview\n          type: string\n        shareLinkToken:\n          description: The share link token\n          type: string\n        type:\n          description: the type\n          type: string\n    SpaceItem:\n      properties:\n        Status:\n          description: The Status of this item\n          type: string\n        attachments:\n          description: The list of attachments\n          items:\n            $ref: \"#/components/schemas/SpaceAttachment\"\n          type: array\n        complex:\n          description: Is this item complex\n          type: boolean\n        content:\n          description: The content of this item\n          type: string\n        creationTime:\n          description: The time this item got created\n          format: int64\n          type: number\n        creatorId:\n          description: The Id of the creator\n          type: string\n        deletedBy:\n          description: Incase this item got deleted, the id of the deletor\n          type: string\n        externalAttachments:\n          description: A list of external attachments\n          items:\n            $ref: \"#/components/schemas/SpaceExternalAttachment\"\n          type: array\n        formMetaData:\n          description: Incase there is FormMetaData\n          type: string\n        itemId:\n          description: the Id of this item\n          type: string\n        mentionedUsers:\n          description: A list of userIds who have been mentioned in this item\n          items:\n            type: string\n          type: array\n        modificationTime:\n          description: the time this item got modified\n          format: int64\n          type: number\n        numberOfLikes:\n          description: The number of likes\n          format: int32\n          type: number\n        previews:\n          description: A list of previews\n          items:\n            $ref: \"#/components/schemas/SpaceItemPreview\"\n          type: array\n        sharedItems:\n          description: missing documentation\n          items:\n            $ref: \"#/components/schemas/SharedItem\"\n          type: array\n        spaceId:\n          description: the Id of the space containing this item\n          type: string\n        tenantId:\n          description: the Id of the tenant\n          type: string\n    SpaceItemPreview:\n      properties:\n        description:\n          description: The description of this preview\n          type: string\n        html:\n          description: Html code\n          type: string\n        imageURI:\n          description: The URI of the image\n          type: string\n        provider:\n          description: the provider\n          type: string\n        srcURL:\n          description: The URL of the source\n          type: string\n        title:\n          description: The title of this preview\n          type: string\n        type:\n          description: The type of this preview\n          type: string\n    SpacePinnedTopic:\n      properties:\n        position:\n          description: The position of a pinned topic\n          format: int32\n          type: number\n        subject:\n          description: The subject of a pinned topic\n          type: string\n        topicId:\n          description: The id of a pinned topic\n          type: string\n    SpaceReply:\n      properties:\n        parentTopicId:\n          description: The Id of the parent topic\n          type: string\n        spaceItem:\n          $ref: \"#/components/schemas/SpaceItem\"\n    SpaceSearchResultDetailed:\n      properties:\n        fileIds:\n          description: =The list of file ids\n          items:\n            type: string\n          type: array\n        itemIds:\n          description: =The list of items ids\n          items:\n            type: string\n          type: array\n        spaceId:\n          description: The id of the space\n          type: string\n        status:\n          description: The status of the search (NORESULT, ERROR, TIMEOUT, MORERESULT)\n          type: string\n    SpaceSearchResultDetailedBack:\n      properties:\n        resList:\n          description: A list of v2restspacesearchresultdetailedback containing spaceId, item ids and file ids\n          items:\n            $ref: \"#/components/schemas/SpaceSearchResultDetailed\"\n          type: array\n    SpaceTopic:\n      properties:\n        lastContentCreationTime:\n          description: The last time new content was created\n          format: int64\n          type: number\n        lastContentCreatorId:\n          description: The Id of the last content creator\n          type: string\n        numberOfReplies:\n          description: The number of replies this topic has\n          format: int32\n          type: number\n        pinned:\n          description: Is this topic pinned\n          type: boolean\n        spaceItem:\n          $ref: \"#/components/schemas/SpaceItem\"\n        subject:\n          description: The subject of this topic\n          type: string\n        tags:\n          description: \"The tags \"\n          items:\n            type: string\n          type: array\n    SpaceTopicWithReplies:\n      properties:\n        replies:\n          description: A List holding the replies for a topic\n          items:\n            $ref: \"#/components/schemas/SpaceReply\"\n          type: array\n        topic:\n          $ref: \"#/components/schemas/SpaceTopic\"\n    SpacesSearchTerm:\n      properties:\n        endTime:\n          description: The end time\n        scope:\n          description: The scope of the search\n          type: string\n        searchTerm:\n          description: The search term\n          type: string\n        startTime:\n          description: The start time\n    SpacesSearchTermResult:\n      properties:\n        resList:\n          description: A list of space search terms.\n          items:\n            $ref: \"#/components/schemas/SpacesSearchTerm\"\n          type: array\n    String:\n      properties:\n        CASE_INSENSITIVE_ORDER: {}\n    SupportInfo:\n      properties:\n        supportEmailAddress:\n          description: The email address of the support\n          type: string\n        supportType:\n          description: The type of support (a number)\n    SystemItem:\n      properties:\n        affectedParticipants:\n          description: List off affected participants (user ID of the Circuit user) in case the item type PARTICIPANT_ADDED or PARTICIPANT_REMOVED\n          items:\n            type: string\n          type: array\n        newTopic:\n          description: Filled with the new topic of a conversation if the type of the item is CONVERSATION_RENAMED.\n          type: string\n        oldTopic:\n          description: Filled with the previous topic of a conversation if the type of the item is CONVERSATION_RENAMED.\n          type: string\n        type:\n          description: The type of the system item\n          type: string\n    User:\n      properties:\n        avatar:\n          description: The URL of the small avatar picture.\n          type: string\n        avatarLarge:\n          description: The URL of the large avatar picture.\n          type: string\n        company:\n          description: The name of the user's company\n          type: string\n        department:\n          description: missing documentation\n          type: string\n        displayName:\n          description: The user's display name\n          type: string\n        emailAddress:\n          description: The primary email address of the user\n          type: string\n        emailAddresses:\n          description: additional email addresses of the user\n          items:\n            $ref: \"#/components/schemas/UserEmailAddress\"\n          type: array\n        firstName:\n          description: The first name of the user\n          type: string\n        jobTitle:\n          description: The job title of the user\n          type: string\n        lastName:\n          description: The last name of the user\n          type: string\n        locale:\n          description: The locale of the user. (E.g. en-US, de-DE)\n          type: string\n        phoneNumber:\n          description: provisioned phone number of the user\n          type: string\n        phoneNumbers:\n          description: additional phone numbers of the user\n          items:\n            $ref: \"#/components/schemas/UserPhoneNumber\"\n          type: array\n        primaryTenantId:\n          description: The primary tenant id\n          type: string\n        secondaryEmailAddress:\n          description: The secondary email address\n          type: string\n        secondaryTenantId:\n          description: The secondary tenant id\n          type: string\n        userId:\n          description: The ID of the user\n          type: string\n        userState:\n          description: The state of the user, e.g. deleted\n          type: string\n        userType:\n          description: the type of the user\n          type: string\n    UserEmailAddress:\n      properties:\n        address:\n          description: the email address\n          type: string\n        type:\n          description: the type of the email address\n          type: string\n    UserPhoneNumber:\n      properties:\n        phoneNumber:\n          description: the phone number\n          type: string\n        type:\n          description: the type of the phone number\n          type: string\n    V2DistributedClientInfo:\n      properties:\n        clientId:\n          description: The client id\n          type: string\n        clientVersion:\n          description: The version of the client\n          type: string\n        deviceSubtype:\n          description: The device sub type\n          type: string\n        deviceType:\n          description: The devicetype\n          type: string\n        hardwareModel:\n          description: The hardware model\n          type: string\n        homeNode:\n          description: The home node name\n          type: string\n        manufacturer:\n          description: The manufacturer\n          type: string\n        osVersion:\n          description: The version of the operating system\n          type: string\n        userId:\n          description: The user id\n          type: string\n    WebHook:\n      properties:\n        creationTime:\n          description: The time when this WebHook was created. This does not necessary mean the time when an manifest file was created.\n          format: int64\n          type: number\n        filter:\n          description: An optional list of filter parameters for this webhook.\n          items:\n            type: string\n          type: array\n        id:\n          description: The unique identifier for this webhook. Can be used later to unregister the webhook.\n          type: string\n        subscriptionIds:\n          description: The optional list of userids for which this webhook is subscribed, i.e. presence events for the user are forwarded to the WebHook callback URL.\n          items:\n            type: string\n          type: array\n        type:\n          description: The type of a WebHook. This can either be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development only use, permanent ones (EXTENSION) will bemanaged by the system.\n          type: string\n        url:\n          description: The callback URL of this webhook.\n          type: string\n        userId:\n          description: The user ID for which this webhook is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.\n          type: string\n  securitySchemes:\n    oauth:\n      flows:\n        implicit:\n          authorizationUrl: https://circuitsandbox.net/oauth/authorize\n          scopes:\n            ALL: allows full access to all functionalities of the REST API\n            CALLS: allows to start or join real time collaboration session\n            CALL_RECORDING: allows to record a call\n            CREATE_CONVERSATIONS_CONTENT: Create content of conversations\n            CREATE_SPACE_CONTENT: \"*Originally missing*\"\n            DELETE_CONVERSATIONS_CONTENT: Delete content of conversations\n            DELETE_SPACE_CONTENT: \"*Originally missing*\"\n            MANAGE_CONVERSATIONS: Manage conversations\n            MANAGE_PRESENCE: Manage presence state\n            MANAGE_SPACE: \"*Originally missing*\"\n            MENTION_EVENT: allows to receive text item events in which the user was mentioned\n            MODERATE_CONVERSATIONS: MOderate conversations\n            ORGANIZE_CONVERSATIONS: Organize conversations\n            ORGANIZE_SPACE: \"*Originally missing*\"\n            READ_CONVERSATIONS: allows to read conversations of the authenticated user\n            READ_SPACE: \"*Originally missing*\"\n            READ_USER: allows to read user information for all users that belong to the tenant of the authenticated user\n            READ_USER_PROFILE: allows to read the user profile of the authenticated user\n            SEARCH_CONVERSATIONS: Search conversations\n            UPDATE_CONVERSATION_CONTENT: Update content of conversations\n            UPDATE_SPACE_CONTENT: \"*Originally missing*\"\n            USER_MANAGEMENT: allows to create, update and delete users\n            USER_TO_USER: User2User\n            WRITE_CONVERSATIONS: allows to create and update conversations of the authenticated user or to post messages\n            WRITE_SPACE: \"*Originally missing*\"\n            WRITE_USER_PROFILE: allows to update the user profile of the authenticated user\n      type: oauth2\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@297a6aabc26a26ce6a88a81c8a82120430c15265/-/blob/APIs/circuitsandbox.net/2.9.233/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/297a6aabc26a26ce6a88a81c8a82120430c15265/APIs/circuitsandbox.net/2.9.233/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:146268: duplicate path: \"/spaces/{spaceId}/participant\""
}