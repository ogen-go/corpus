{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/fchmainy/nginx-aks-demo"
		},
		"file": {
			"name": "oas_generator_v0.1.yaml",
			"size": 0,
			"path": "k8s/apigw/oas_generator_v0.1.yaml",
			"byteSize": 11072,
			"content": "openapi: 3.0.1\ninfo:\n  title: generator\n  description: list of attributes\n  version: '0.1'\nservers:\n  - url: 'http://gw_attributes:8080'\npaths:\n  /:\n    get:\n      description: generate composed name\n      operationId: generateName\n      tags:\n        - generator\n      responses:\n        '200':\n          description: a randomly composed name\n\n      servers:\n        - url: 'http://generator:80'\n  /name:\n    get:\n      description: generate composed name for FrontEnd App\n      operationId: generateName\n      tags:\n        - generator\n      responses:\n        '200':\n          description: a randomly composed name\n      servers:\n        - url: 'http://generator:80'\n  /colors:\n    get:\n      description: List all colors\n      operationId: listColors\n      tags:\n        - colors\n      responses:\n        '200':\n          description: a list of colors with their index\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Colors\"\n              #examples: {\"adjectives\": [{\"id\":1,\"name\":\"blue\"}]}\n      servers:\n        - url: 'http://colors:8080'\n    post:\n      description: create a color\n      operationId: createColor\n      tags:\n        - colors\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                id:\n                  type: integer\n            examples:\n              '0':\n                value: '{\"name\":\"yellow\"}'\n              '1':\n                value: '{\"id\":4}'\n      responses:\n        '201':\n          description: color created\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://colors:8080'\n    delete:\n      description: delete a color\n      operationId: deleteColor\n      tags:\n        - colors      \n      responses:\n        '404':\n          description: Auto generated using Swagger Inspector\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://colors:8080'\n    servers:\n      - url: 'http://colors:8080'\n  /colors/{id}:\n    get:\n      description: get a specific color\n      operationId: showColorById\n      tags:\n        - colors\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of the color to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Color\"\n              # examples: {\"adjectives\": [{\"id\":1,\"name\":\"blue\"}]}\n      servers:\n        - url: 'http://colors:8080'\n  /adjectives:\n    get:\n      description: List all adjectives\n      operationId: listAdjectives\n      tags:\n        - adjectives\n      responses:\n        '200':\n          description: a list of adjectives with their index\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Adjectives\"\n              #examples: {\"adjectives\": [{\"id\":1,\"name\":\"blue\"}]}\n      servers:\n        - url: 'http://adjectives:8080'\n    post:\n      description: create an adjective\n      operationId: createAdjective\n      tags:\n        - adjectives\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                id:\n                  type: integer\n            examples:\n              '0':\n                value: '{\"name\":\"calm\"}'\n              '1':\n                value: '{\"id\":2}'\n      responses:\n        '201':\n          description: adjective created\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://adjectives:8080'\n    delete:\n      description: delete an adjective\n      operationId: deleteAdjective\n      tags:\n        - adjectives\n      responses:\n        '404':\n          description: Delete an Adjective\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://adjectives:8080'\n    servers:\n      - url: 'http://adjectives:8080'\n  /adjectives/{id}:\n    get:\n      description: get a specific adjective\n      operationId: showAdjectiveById\n      tags:\n        - adjectives\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of the adjective to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Color\"\n              # examples: {\"adjectives\": [{\"id\":1,\"name\":\"blue\"}]}\n      servers:\n        - url: 'http://adjectives:8080'\n\n\n\n  /animals:\n    get:\n      description: List all animals\n      operationId: listAnimals\n      tags:\n        - animals\n      responses:\n        '200':\n          description: a list of animals with their index\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Animals\"\n              #examples: {\"animals\": [{\"id\":1,\"name\":\"lion\"}]}\n      servers:\n        - url: 'http://animals:8080'\n    post:\n      description: create an animal\n      operationId: createAnimal\n      tags:\n        - animals\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                id:\n                  type: integer\n            examples:\n              '0':\n                value: '{\"name\":\"cat\"}'\n              '1':\n                value: '{\"id\":2}'\n      responses:\n        '201':\n          description: animal created\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://animals:8080'\n    delete:\n      description: delete an adjective\n      operationId: deleteAnimal\n      tags:\n        - adjectives\n      responses:\n        '404':\n          description: Delete an Adjective\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://animals:8080'\n    servers:\n      - url: 'http://animals:8080'\n  /animals/{id}:\n    get:\n      description: get a specific adjective\n      operationId: showAnimalsById\n      tags:\n        - animals\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of the animal to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Animal\"\n              # examples: {\"adjectives\": [{\"id\":1,\"name\":\"lion\"}]}\n      servers:\n        - url: 'http://animals:8080'\n\n\n  /locations:\n    get:\n      description: List all locations\n      operationId: listlocations\n      tags:\n        - locations\n      responses:\n        '200':\n          description: a list of locations with their index\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Locations\"\n              #examples: {\"animals\": [{\"id\":1,\"name\":\"mountain\"}]}\n      servers:\n        - url: 'http://locations:8080'\n    post:\n      description: create an location\n      operationId: createLocation\n      tags:\n        - locations\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                id:\n                  type: integer\n            examples:\n              '0':\n                value: '{\"name\":\"lake\"}'\n              '1':\n                value: '{\"id\":2}'\n      responses:\n        '201':\n          description: location created\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://locations:8080'\n    delete:\n      description: delete a location\n      operationId: deleteLocation\n      tags:\n        - locations\n      responses:\n        '404':\n          description: Delete a Location\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: string\n              examples: {}\n      servers:\n        - url: 'http://locations:8080'\n    servers:\n      - url: 'http://locations:8080'\n  /locations/{id}:\n    get:\n      description: get a specific location\n      operationId: showLocationById\n      tags:\n        - locations\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: id of the location to retrieve\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Successful\n          content:\n            application/json; charset=utf-8:\n              schema:\n                $ref: \"#/components/schemas/Location\"\n              # examples: {\"locations\": [{\"id\":1,\"name\":\"mountain\"}]}\n      servers:\n        - url: 'http://locations:8080'\n\n\n        \ncomponents:\n  schemas:\n    Color:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Colors:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Color\"\n        \n        \n    Adjective:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  #      tag:\n  #        type: string\n    Adjectives:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Adjective\"\n        \n    Animal:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  #      tag:\n  #        type: string\n    Animals:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Animal\"\n        \n\n    Location:\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n  #      tag:\n  #        type: string\n    Locations:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Location\"\n        \n \n\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /name: get: duplicate operationId: \"generateName\""
}