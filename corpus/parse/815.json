{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/DataBiosphere/consent"
		},
		"file": {
			"name": "api-docs.yaml",
			"path": "src/main/resources/assets/api-docs.yaml",
			"content": "openapi: 3.0.3\n\ninfo:\n  title: Consent\n  description: |\n    The primary API layer for the Data Use Oversight System DUOS\n    ## Data Use Oversight System\n    A semi-automated management service for compliant secondary use of\n    human genomics data There are restrictions on researching human genomics data.\n    For example: “Data can only be used for breast cancer research with non-commercial\n    purpose”. The Data Use Oversight system ensures that researchers using genomics\n    data honor these restrictions.\n  version: 1.0.1\n  license:\n    name: BSD\n    url: http://opensource.org/licenses/BSD-3-Clause\n  termsOfService: https://github.com/DataBiosphere/consent\n\nservers:\n  - url: /\n\nsecurity:\n  - googleoauth:\n      - email\n      - profile\n\npaths:\n  /api/approvalExpirationTime:\n    get:\n      summary: Get the approval expiration time\n      description: |\n        Get the approval expiration time. If no existing time exists, a\n        default time of 7 days is returned.\n      tags:\n        - Election\n      responses:\n        200:\n          description: The approval expiration time\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApprovalExpirationTime'\n    post:\n      summary: Create approval expiration time\n      description: Create approval expiration time\n      tags:\n        - Election\n      requestBody:\n        description: Approval Expiration Time\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApprovalExpirationTime'\n      responses:\n        201:\n          description: Successfully created\n        400:\n          description: Bad Request\n  /api/approvalExpirationTime/{id}:\n    get:\n      summary: Get the approval expiration time\n      description: Get the approval expiration time\n      tags:\n        - Election\n      parameters:\n        - name: id\n          in: path\n          description: Approval Expiration Time id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: The approval expiration time\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApprovalExpirationTime'\n        400:\n          description: ApprovalExpirationTime not found\n    put:\n      summary: Update approval expiration time\n      description: Update approval expiration time\n      tags:\n        - Election\n      parameters:\n        - name: id\n          in: path\n          description: Approval Expiration Time id\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        description: Approval Expiration Time\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ApprovalExpirationTime'\n      responses:\n        200:\n          description: Successfully updated\n        400:\n          description: Bad Request\n    delete:\n      summary: Delete approval expiration time\n      description: Delete approval expiration time\n      tags:\n        - Election\n      parameters:\n        - name: id\n          in: path\n          description: Approval Expiration Time id\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Successfully deleted\n  /api/collections:\n    $ref: './paths/collections.yaml'\n  /api/collections/{collectionId}:\n    $ref: './paths/collection.yaml'\n  /api/collections/dar/{referenceId}:\n    $ref: './paths/collectionByReferenceId.yaml'\n  /api/collections/role/{roleName}/paginated:\n    $ref: './paths/collectionsByToken.yaml'\n  /api/collections/role/{roleName}/query:\n    $ref: './paths/collectionsByQuery.yaml'\n  /api/collections/role/{roleName}:\n    $ref: './paths/collectionsByRoleName.yaml'\n  /api/collections/{collectionId}/cancel:\n    $ref: './paths/cancelCollectionByCollectionId.yaml'\n  /api/collections/{collectionId}/election:\n    $ref: './paths/createCollectionElectionsByCollectionId.yaml'\n  /api/collections/{collectionId}/resubmit:\n    $ref: './paths/resubmitCollectionByCollectionId.yaml'\n  /api/ontology:\n    get:\n      summary: List Ontology Files\n      description: Returns description of the current ontology files that are indexed and stored.\n      tags:\n        - Ontology\n      responses:\n        200:\n          description: Returns the collection of current ontology file information.\n        400:\n          description: There was a problem retrieving the files\n    post:\n      summary: Upload Ontology File\n      description: Uploads and indexes an ontology file\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      parameters:\n        - name: metadata\n          schema:\n            type: string\n          in: formData\n          description: |\n            JSON object specifying the ontology file metadata. Prefix is \"DUOS\" or \"DOID\" and type is \"Organization\" or \"Disease\"\n            Examples:\n              `{ \"ontology_file\": { \"prefix\": \"DUOS\", \"type\": \"Organization\" } }`\n              `{ \"ontology_file\": { \"prefix\": \"DOID\", \"type\": \"Disease\" } }`\n          required: true\n        - name: ontology_file\n          schema:\n            type: file\n          in: formData\n          description: The uploaded ontology file\n          required: true\n      tags:\n        - Ontology\n      responses:\n        200:\n          description: Returns the result of the upload operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OntologyFile'\n        400:\n          description: There was a problem indexing the file and the results were not uploaded or indexed\n    put:\n      summary: Delete Indexed File\n      description: Delete an indexed ontology file.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      tags:\n        - Ontology\n      responses:\n        200:\n          description: Successful file deletion\n        400:\n          description: There was a problem deleting the file.\n      parameters:\n        - name: fileURL\n          in: formData\n          description: Storage URL of the file to delete.\n          required: true\n          schema:\n            type: string\n  /api/ontology/file:\n    get:\n      summary: Get Ontology File\n      description: Get the specified ontology file by storage url\n      parameters:\n        - name: fileUrl\n          in: query\n          description: File URL\n          required: true\n          schema:\n            type: string\n        - name: fileName\n          in: query\n          description: File Name\n          required: true\n          schema:\n            type: string\n      tags:\n        - Ontology\n      responses:\n        200:\n          description: Specified file.\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /api/ontology/types:\n    get:\n      summary: Get Ontology Types\n      description: Get the allowed types for ontology file indexing purposes\n      tags:\n        - Ontology\n      responses:\n        200:\n          description: List of allowed types.\n  /api/consent/{consentId}/association:\n    $ref: './paths/consentByIdAssociation.yaml'\n  /api/consent/cases/summary:\n    get:\n      summary: Get Consent Summary Cases\n      description: Returns number of denied, approved and pending cases.\n      tags:\n        - Consent Summary\n      responses:\n        200:\n          description: Returns the summary of cases.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Summary'\n  /api/consent/cases/summary/file:\n    $ref: './paths/consentCasesSummaryFile.yaml'\n  /api/consent/cases/closed:\n    get:\n      summary: Describe Closed Elections\n      description: Returns number of denied, approved and pending cases.\n      tags:\n        - Election\n        - Consent\n      responses:\n        200:\n          description: Returns the list of closed consent cases.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Election'\n        404:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n               $ref: '#/components/schemas/ErrorResponse'\n  /api/consent/{consentId}/election:\n    post:\n      summary: Create Consent Election\n      description: Creates a consent election\n      parameters:\n        - name: consentId\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n        - name: election\n          in: body\n          description: Election to be created\n          required: true\n          schema:\n            $ref: '#/components/schemas/Election'\n      tags:\n        - Election\n        - Consent\n      responses:\n        201:\n          description: Returns the URI to access the newly created election.\n        400:\n          description: There is an existing open election for the consent.\n        404:\n          description: The consent sent as a parameter does not exist.\n  /api/consent/{consentId}/election/dac/{dacId}:\n    post:\n      summary: Create Consent Election For Dac\n      description: |\n        Creates a consent election for a data access committee. Assigns the consent to the provided\n        Data Access Committee.\n      parameters:\n        - name: consentId\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n        - name: dacId\n          in: path\n          description: DAC ID\n          required: true\n          schema:\n            type: integer\n        - name: election\n          in: body\n          description: Election to be created\n          required: true\n          schema:\n            $ref: '#/components/schemas/Election'\n      tags:\n        - Election\n        - Consent\n      responses:\n        201:\n          description: Returns the URI to access the newly created election.\n        400:\n          description: |\n            There is an existing open election for the consent, or the consent is already\n            associated to an existing dac.\n        404:\n          description: The consent or dac does not exist.\n  /api/consent/{consentId}/election/{id}:\n    put:\n      summary: Update Consent Election\n      description: Updates the election for the consent ID sent as parameter.\n      parameters:\n        - name: consentId\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Election ID\n          required: true\n          schema:\n            type: integer\n        - name: rec\n          in: body\n          description: Election to be created\n          required: true\n          schema:\n            $ref: '#/components/schemas/Election'\n      tags:\n        - Election\n        - Consent\n      responses:\n        200:\n          description: Returns the updated election.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        404:\n          description: \"The Election/Consent doesn't exist.\"\n    delete:\n      summary: Delete Election\n      description: Deletes the election identified by the IDs.\n      parameters:\n        - name: consentId\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Election ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Election\n        - Consent\n      responses:\n        200:\n          description: The election was deleted.\n        404:\n          description: \"The Election/Consent doesn't exist.\"\n  /api/consent/manage:\n    get:\n      summary: Manage Consents\n      description: Returns the list of consents available to be managed.\n      tags:\n        - Consent\n      responses:\n        200:\n          description: The list of consents available to be managed.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsentManage'\n  /api/consent/unreviewed:\n    get:\n      summary: Get total unreviewed DULs\n      description: Retrieves the amount of unreviewed DUL elections.\n      tags:\n        - Consent\n      responses:\n        200:\n          description: 'Returns an integer corresponding to the amount of unreviewed DULs'\n  /api/consent:\n    $ref: './paths/consent.yaml'\n  /api/consent/{id}:\n    get:\n      summary: Get Consent by ID\n      description: Returns the consent identified by the ID.\n      parameters:\n        - name: id\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n      tags:\n        - Consent\n      responses:\n        200:\n          description: Returns the requested consent.\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Consent.yaml'\n        404:\n          description: The consent associated with the ID couldn't be found.\n    put:\n      summary: Update Consent by ID\n      description: Updates the consent identified by the ID.\n      parameters:\n        - name: id\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n        - name: updated\n          in: body\n          description: Object that represents the consent to be updated\n          required: true\n          schema:\n            $ref: './schemas/Consent.yaml'\n      tags:\n        - Consent\n      responses:\n        200:\n          description: Returns the requested consent.\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Consent.yaml'\n        400:\n          description:\n            Consent updates are only allowed when\n              1-There have been no previous elections created for this consent\n              2-The most recent election has been closed/cancelled AND archived\n        404:\n          description: The consent associated with the ID couldn't be found.\n        500:\n          description: Internal server error\n  /api/consent/{id}/matches:\n    get:\n      summary: getMatches\n      description: Returns the matches that are related to this consent.\n      parameters:\n        - name: id\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n      tags:\n        - Match\n        - Consent\n      responses:\n        200:\n          description: Returns a list of matches.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Match'\n        404:\n          description: The consent for the id couldn't be found.\n  /api/consent/{consentId}/vote/{id}:\n    post:\n      summary: firstVoteUpdate\n      description: Returns the created vote.\n      parameters:\n        - name: consentId\n          in: path\n          description: The consent ID.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The vote ID.\n          required: true\n          schema:\n            type: integer\n        - name: rec\n          in: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/Vote'\n      tags:\n        - Vote\n      responses:\n        200:\n          description: Returns the created vote.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n        400:\n          description: 'Bad Request, malformed entity, etc'\n        404:\n          description: The association type wasn't send, or the application couldn't find any consents that matched the search criteria.\n    put:\n      summary: updateConsentVote\n      description: Returns the updated vote.\n      parameters:\n        - name: consentId\n          in: path\n          description: The consent ID.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The vote ID.\n          required: true\n          schema:\n            type: integer\n        - name: rec\n          in: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/Vote'\n      tags:\n        - Vote\n      responses:\n        200:\n          description: Returns the created vote.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n        400:\n          description: Bad Request, malformed entity, etc.\n    get:\n      summary: describe\n      description: Returns the required vote.\n      parameters:\n        - name: consentId\n          in: path\n          description: The consent ID.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The vote ID.\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n      responses:\n        200:\n          description: Returns the required vote.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n    delete:\n      summary: deleteVote\n      description: Deletes the required vote.\n      parameters:\n        - name: consentId\n          in: path\n          description: The consent ID.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The vote ID.\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n      responses:\n        200:\n          description: Response = Vote was deleted\n          content:\n            application/json:\n              schema:\n                type: string\n        404:\n          description: The vote couldn't be found\n  /api/consent/{consentId}/vote:\n    delete:\n      summary: deleteVotes\n      description: Deletes the votes present for the consent sent as a parameter.\n      parameters:\n        - name: consentId\n          in: path\n          description: The consent ID.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Vote\n        - Consent\n      responses:\n        200:\n          description: Response = Votes for specified consent have been deleted\n          content:\n            application/json:\n              schema:\n                type: string\n        404:\n          description: The votes for the consent ID couldn't be found\n  /api/dac:\n    post:\n      summary: Create a DAC\n      operationId: createDac\n      description: Create a Data Access Committee\n      parameters:\n        - name: dac\n          in: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/Dac'\n      tags:\n        - DAC\n      responses:\n        200:\n          description: Successfully created a DAC\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dac'\n        400:\n          description: Bad Request. DAC Name and Description are required.\n        403:\n          description: User not authorized to request all dacs.\n        500:\n          description: Internal Server Error\n    put:\n      summary: Update a DAC\n      operationId: updateDac\n      description: Update a Data Access Committee\n      parameters:\n        - name: dac\n          in: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/Dac'\n      tags:\n        - DAC\n      responses:\n        200:\n          description: Successfully upated a DAC\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dac'\n        400:\n          description: Bad Request. DAC ID, Name, and Description are required.\n        500:\n          description: Internal Server Error\n    get:\n      summary: Get all DACs\n      description: All Data Access Committees with a list of chairpersons and members\n      parameters:\n        - name: withUsers\n          in: query\n          required: false\n          schema:\n            type: boolean\n      tags:\n        - DAC\n      responses:\n        200:\n          description: All Data Access Committees with chairpersons and members\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Dac'\n        500:\n          description: Internal Server Error\n  /api/dac/{dacId}:\n    get:\n      summary: Get DAC by ID\n      operationId: getDacById\n      description: Get Data Access Committee by Id\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: The Data Access Committee matching the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dac'\n        404:\n          description: No DAC found with the given ID\n        500:\n          description: Internal Server Error\n    delete:\n      summary: Delete DAC by ID\n      operationId: deleteDac\n      description: Delete Data Access Committee by Id\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: The Data Access Committee matching the provided ID was deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Dac'\n        404:\n          description: No DAC found with the given ID\n        500:\n          description: Internal Server Error\n  /api/dac/{dacId}/member/{userId}:\n    post:\n      summary: Add DAC Member\n      operationId: addDacMember\n      description: Adds a User as a Member to a Data Access Committee\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n        - name: userId\n          in: path\n          description: The User ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: The added DAC Member\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: No DAC or User found with the provided ID\n        409:\n          description: User is already a member of the DAC\n        500:\n          description: Internal Server Error\n    delete:\n      summary: Remove DAC Member\n      operationId: removeDacMember\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n        - name: userId\n          in: path\n          description: The User ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: Dac member successfully removed\n        404:\n          description: No DAC or User found with the provided ID\n        500:\n          description: Internal Server Error\n  /api/dac/{dacId}/chair/{userId}:\n    post:\n      summary: Add DAC Chair\n      operationId: addDacChair\n      description: Adds a User as a Chairperson to a Data Access Committee\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n        - name: userId\n          in: path\n          description: The User ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: The added DAC Chairperson\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: No DAC or User found with the provided ID\n        409:\n          description: User is already a member of the DAC\n        500:\n          description: Internal Server Error\n    delete:\n      summary: Remove DAC Chairperson\n      operationId: removeDacChair\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n        - name: userId\n          in: path\n          description: The User ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: Dac chairperson successfully removed\n        400:\n          description: Dacs require at least one chair.\n        404:\n          description: No DAC or User found with the provided ID\n        500:\n          description: Internal Server Error\n  /api/dac/{dacId}/datasets:\n    get:\n      summary: Get All Datasets for DAC\n      operationId: getDacDatasets\n      description: List all Datasets of a DAC\n      parameters:\n        - name: dacId\n          in: path\n          description: The DAC ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - DAC\n      responses:\n        200:\n          description: The list of datasets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: './schemas/Dataset.yaml'\n        404:\n          description: No DAC found with the provided ID\n        500:\n          description: Internal Server Error\n  /api/dac/users/{term}:\n    get:\n      summary: Find Users by Search Term\n      operationId: findUsersByTerm\n      description: Find all users that match the search term. Matches on name and email address.\n      parameters:\n        - name: term\n          in: path\n          description: The Search Term\n          required: true\n          schema:\n            type: string\n      tags:\n        - DAC\n      responses:\n        200:\n          description: The list of users matching the term\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                 $ref: '#/components/schemas/User'\n        500:\n          description: Internal Server Error\n  /api/dacuser:\n    post:\n      summary: Create User\n      description: Creates a User\n      parameters:\n        - name: dac\n          in: body\n          required: true\n          schema:\n            $ref: '#/components/schemas/User'\n      tags:\n        - User\n      responses:\n        200:\n          description: Returns the created user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Malformed user entity.\n  /api/dacuser/{email}:\n    get:\n      summary: describe\n      description: Returns the user identified by the email.\n      parameters:\n        - name: email\n          in: path\n          description: The email of the user.\n          required: true\n          schema:\n            type: string\n      tags:\n        - User\n      responses:\n        200:\n          description: Returns the user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  /api/dacuser/{id}:\n    put:\n      summary: update\n      description: |\n        Updates the user identified by the ID. Requires the authenticated user to have the same id\n        as that of the user being updated except in the admin case - admins can update information\n        for other users. A user's email cannot be updated. Role changes are not allowed for Chairperson\n        and Member roles using this endpoint. All Chairperson and Member changes (additions or removals)\n        are ignored. See [DAC](/#!/DAC) endpoints for **POST/DELETE** endpoints for\n        **/api/dac/{dacId}/chair/{userId}** and **/api/dac/{dacId}/member/{userId}** calls.\n        Users with the \"Signing Official\" are not permitted to change their institution. Such calls\n        will result in a \"Bad Request\". \"Signing Official\" users are, however, allowed to save their\n        institution if it is not already set.\n      parameters:\n        - name: id\n          in: path\n          description: The id of the updated user\n          required: true\n          schema:\n            type: string\n        - name: user\n          in: body\n          description: The updated user information\n          required: true\n          schema:\n            type: object\n            properties:\n              updatedUser:\n                $ref: '#/components/schemas/User'\n      tags:\n        - User\n      responses:\n        200:\n          description: Returns the updated user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Malformed user entity or improper institution update\n        403:\n          description: User must have appropriate roles to update different users' information.\n\n  /api/dar/v2:\n    post:\n      summary: Create Data Access Request, version 2\n      description: Creates a Data Access Request\n      parameters:\n        - name: dar\n          in: body\n          description: The fields that represent a DAR in json format.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the created Data Access Request.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: './schemas/DataAccessRequest.yaml'\n        500:\n          description: Internal Server Error.\n    get:\n      summary: Get all Data Access Requests\n      description: Returns the list of all Data Access Requests\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns a list of Data Access Requests\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: './schemas/DataAccessRequest.yaml'\n        403:\n          description: The user is not authorized to see all DARs\n        500:\n          description: Server Error\n  /api/dar/v2/{referenceId}:\n    get:\n      summary: Get a Data Access Request by Reference Id\n      description: Returns the created Data Access Request.\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns a Data Access Request\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/DataAccessRequest.yaml'\n        400:\n          description: The provided Reference Id is not a valid DAR identifier\n        404:\n          description: No DAR can be found with the provided identifier\n        500:\n          description: Server Error\n    put:\n      summary: Update a Data Access Request by Reference Id\n      description: Returns the updated Data Access Request.\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n        - name: dar\n          in: body\n          description: The fields that represent a DAR in json format.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns a Data Access Request\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/DataAccessRequest.yaml'\n        403:\n          description: Updates are restricted to the create user.\n        500:\n          description: Internal Server Error.\n    delete:\n      summary: delete\n      description: Deletes the DAR by reference id\n      parameters:\n        - name: referenceId\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Data Access Request was deleted\n          content:\n            application/json:\n              schema:\n                type: string\n        403:\n          description: Forbidden\n        404:\n          description: The requested DAR couldn't be found.\n        406:\n          description: There are existing resources that reference this Data Access Request\n  /api/dar/v2/draft:\n    post:\n      summary: Create Draft Data Access Request\n      description: Create Draft Data Access Request\n      parameters:\n        - name: dar\n          in: body\n          description: The fields that represent a Data Access Request, json format.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        201:\n          description: Returns the created draft Data Access Request.\n        500:\n          description: Internal Server Error.\n    get:\n      summary: Get all Draft Data Access Requests\n      description: Returns a list of all Draft Data Access Request\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns a list of Draft Data Access Requests\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: './schemas/DataAccessRequest.yaml'\n        500:\n          description: Internal Server Error.\n  /api/dar/v2/draft/{referenceId}:\n    put:\n      summary: Update Draft Data Access Request\n      description: Update Draft Data Access Request\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n        - name: dar\n          in: body\n          description: The fields that represent a Data Access Request, json format.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        201:\n          description: Returns the upated draft Data Access Request.\n        403:\n          description: Updates are restricted to the create user.\n        500:\n          description: Internal Server Error.\n    get:\n      summary: Get a Draft Data Access Request\n      description: Returns the Draft Data Access Request specified by the referencId\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        201:\n          description: Returns the draft Data Access Request.\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/DataAccessRequest.yaml'\n        500:\n          description: Internal Server Error.\n  /api/dar/v2/draft/manage:\n    get:\n      summary: Get all Draft Data Access Request Manage Objects\n      description: Returns a list of information (Dar Manage Objects) on Draft DARs\n      tags:\n        - Data Access Request\n      responses:\n        201:\n          description: Returns the draft Data Access Request Manage objects.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DataAccessRequestManage'\n        500:\n          description: Internal Server Error.\n  /api/dar/v2/{referenceId}/irbDocument:\n    get:\n      summary: Retrieve DAR IRB Document\n      description: Retrieve the IRB Document for a Data Access Request\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the document\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      summary: Store DAR IRB Document\n      description: |\n        Store an IRB Document for a Data Access Request.\n        Previous document is deleted.\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Stores the document and returns the updated Data Access Request\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/DataAccessRequest.yaml'\n  /api/dar/v2/{referenceId}/collaborationDocument:\n    get:\n      summary: Retrieve DAR Collaboration Document\n      description: Retrieve the Collaboration Document for a Data Access Request\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the document\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n    post:\n      summary: Store DAR Collaboration Document\n      description: |\n        Store a Collaboration Document for a Data Access Request.\n        Previous document is deleted.\n      parameters:\n        - name: referenceId\n          in: path\n          description: The referenceId of the Data Access Request\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Stores the document and returns the updated Data Access Request\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/DataAccessRequest.yaml'\n\n  /api/dar:\n    post:\n      summary: createdDataAccessRequest\n      description: |\n        DEPRECATED: Use POST /api/dar/v2\n        Creates a Data Access Request\n      parameters:\n        - name: dar\n          in: body\n          description: The fields that represent a DAR, json format.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the created Data Access Request, json file.\n        500:\n          description: Internal Server Error.\n  /api/dar/cancel/{id}:\n    put:\n      summary: Cancel a Data Access Request\n      description: Cancel a Data Access Request\n      parameters:\n        - name: id\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Successful cancelation of the Data Access Request\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/DataAccessRequest.yaml'\n        403:\n          description: Forbidden\n        404:\n          description: Unable to find the Data Access Request with the provided id\n        500:\n          description: Internal error\n  /api/dar/modalSummary/{id}:\n    get:\n      summary: getDataAcessRequestModalSummary\n      description: Retrieves a DARModalDetails.\n      parameters:\n        - name: id\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: 'Returns a DARModalDetails initialized with the DAR associated with the provided Id.'\n  /api/dar/find/{id}/consent:\n    get:\n      summary: describeConsentForDAR\n      description: Returns the consent related to this DAR.\n      parameters:\n        - name: id\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n        - Consent\n      responses:\n        200:\n          description: Returns the Consent.\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Consent.yaml'\n        404:\n          description: The requested couldn't be found or the DAR doesn't exist.\n  /api/dar/manage/v2:\n    get:\n      summary: Manage Data Access Requests V2\n      description: |\n        Returns all the elections created for Data Access Requests relevant to the current user.\n      parameters:\n        - name: roleName\n          in: query\n          description: An optional roleName that the user is making the request as. A user can have multiple roles, so adding this parameter will filter the list accordingly.\n          required: false\n          schema:\n            type: String\n            nullable: true\n            enum:\n              - SigningOfficial\n              - Researcher\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: A list of DAR elections.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DataAccessRequestManage'\n        500:\n          description: Server error.\n  /api/dar/cases/unreviewed:\n      get:\n        summary: getTotalUnReviewedDAR\n        description: Retrieves the amount of unreviewed DAR.\n        tags:\n          - Data Access Request\n        responses:\n         200:\n           description: 'Returns an integer corresponding to the amount of unreviewed DARs'\n  /api/dar/partial:\n    post:\n      summary: Create Partial Data Access Request\n      description: |\n        DEPRECATED: Use POST /api/dar/v2/draft\n        Create Partial Data Access Request\n      parameters:\n        - name: dar\n          in: body\n          description: The fields that represent a DAR, json format.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the created partial Data Access Requests\n        500:\n          description: Internal Server Error.\n    put:\n      summary: Update Partial Data Access Request\n      description: |\n        DEPRECATED: Use PUT /api/dar/v2/draft/{referenceId}:\n        Update Partial Data Access Request\n      parameters:\n        - name: dar\n          in: body\n          description: |\n            The fields that represent a DAR, json format.\n            Must contain a `referenceId` for the updated DAR.\n            User must be the creator of the DAR.\n          required: true\n          schema:\n            $ref: './schemas/DataAccessRequest.yaml'\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the updated partial Data Access Request, json file.\n        403:\n          description: Forbidden\n        404:\n          description: DAR or User Not Found\n        500:\n          description: Internal Server Error.\n  /api/dar/partial/{id}:\n    delete:\n      summary: Delete Partial Data Access Request\n      description: Delete Partial Data Access Request\n      parameters:\n        - name: id\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: Data Access Request was deleted\n        403:\n          description: Forbidden\n        500:\n          description: Internal Server Error.\n  /api/dataRequest/cases/pending:\n    get:\n      summary: Get Data Access Request Pending Cases\n      description: Retrieves the pending cases for open/final elections the user has access to\n      tags:\n        - Data Access Request\n        - Pending Case\n      responses:\n        200:\n          description: A list of Data Access Request Pending Cases\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PendingCase'\n  /api/dataRequest/cases/summary/DataAccess:\n    get:\n      summary: getConsentSummaryCases\n      description: Retrieves the Summary of DAR cases\n      tags:\n        - Summary\n        - Data Access Request\n      responses:\n        200:\n          description: A summary of cases\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Summary'\n  /api/dataRequest/cases/summary/RP:\n    get:\n      summary: getConsentSummaryCases\n      description: Retrieves the Summary of Research Purposes cases\n      tags:\n        - Summary\n        - Research Purpose\n      responses:\n        200:\n          description: A summary of cases\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Summary'\n  /api/dataRequest/cases/closed:\n    get:\n      summary: describeClosedElections\n      description: Retrieves the closed DAR elections\n      tags:\n        - Data Access Request\n        - Election\n      responses:\n        200:\n          description: A list of closed DAR elections.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Election'\n        404:\n          description: Election was not found.\n  /api/dataRequest/{requestId}/election:\n    get:\n      summary: describe\n      description: Returns the election for the sent DAR, if it exists.\n      parameters:\n        - name: requestId\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n        - Election\n      responses:\n        200:\n          description: Returns the requested election\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        404:\n          description: The election or the DAR couldn't be found.\n    post:\n      deprecated: true\n      summary: createDataRequestElection\n      description: Creates an Access and RP Election for the DAR identified by the ID.\n      parameters:\n        - name: requestId\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n        - name: rec\n          in: body\n          description: The election to be created\n          schema:\n            $ref: '#/components/schemas/Election'\n      tags:\n        - Data Access Request\n        - Election\n      responses:\n        200:\n          description: The created election\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        400:\n          description: Bad Request.\n        404:\n          description: The DAR couldn't be found.\n  /api/dataRequest/{requestId}/election/{id}:\n    delete:\n      deprecated: true\n      summary: deleteElection\n      description: Deletes the election identified by the id.\n      parameters:\n        - name: requestId\n          in: path\n          description: The id of the DAR\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: The id of the election\n          required: true\n          schema:\n            type: string\n      tags:\n        - Data Access Request\n        - Election\n      responses:\n        200:\n          description: Response = Election was deleted\n          content:\n            application/json:\n              schema:\n                type: string\n        404:\n          description: The DAR or the election couldn't be found.\n  /api/dataRequest/approved:\n    get:\n      summary: Get a list of approved DARs\n      description: Get a list of approved DARs\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: A list of approved DARs\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /api/dataRequest/reviewed:\n    get:\n      summary: Get a list of reviewed DARs\n      description: Get a list of reviewed DARs\n      tags:\n        - Data Access Request\n      responses:\n        200:\n          description: A list of reviewed DARs\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n  /api/consent/{id}/dul:\n    get:\n      summary: getDUL\n      description: Returns Data Use Letter file specified by consentId.\n      parameters:\n        - name: id\n          in: path\n          description: Id of the consent at which belongs the Data Use Letter.\n          required: true\n          schema:\n            type: string\n        - name: electionId\n          in: query\n          required: false\n          description: Optional election id for the consent election\n          schema:\n            type: integer\n      tags:\n        - Consent\n      responses:\n        200:\n          description: Data Use Letter file\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n          headers:\n            Content-Disposition:\n              schema:\n                type: string\n              description: attachment; filename= targetFile name\n        404:\n          description: Could not find consent with the specified Id\n    post:\n      summary: createDUL\n      description: Persists the loaded file in the CloudStorage and update the related Consent.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      parameters:\n        - name: data\n          in: formData\n          description: Data Use Letter file.\n          required: true\n          schema:\n            type: file\n        - name: id\n          in: path\n          description: Id of the consent at which belongs the Data Use Letter.\n          required: true\n          schema:\n            type: string\n        - name: fileName\n          in: query\n          description: File name.\n          required: false\n          schema:\n            type: string\n      tags:\n        - Consent\n      responses:\n        200:\n          description: The modified Consent with dataUseLetter field empty\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Consent.yaml'\n        404:\n          description: Could not find consent with the specified Id\n    put:\n      summary: updateDUL\n      description: Updates the Consent's Data Use Letter in the CloudStorage and the related Consent.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n      parameters:\n        - name: data\n          in: formData\n          description: new Data Use Letter file.\n          required: true\n          schema:\n            type: file\n        - name: id\n          in: path\n          description: Id of the consent at which belongs the Data Use Letter.\n          required: true\n          schema:\n            type: string\n        - name: fileName\n          in: query\n          description: File name.\n          required: false\n          schema:\n            type: string\n      tags:\n        - Consent\n      responses:\n        200:\n          description: The updated Consent\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Consent.yaml'\n        404:\n          description: Could not find consent with the specified Id\n    delete:\n      summary: deleteDUL\n      description: Deletes the Data Use Letter of the Consent specified by Id and updates the Consent's dataUseLetter property.\n      parameters:\n        - name: id\n          in: path\n          description: Id of the consent at which belongs the Data Use Letter.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Consent\n      responses:\n        200:\n          description: The updated Consent with empty dataUseLetter property.\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Consent.yaml'\n        404:\n          description: Could not find consent with the specified Id\n  /api/dataRequest/{requestId}/vote:\n    get:\n      summary: Find all Data Access Request votes\n      description: Returns the votes of the election with the specified referenceId.\n      parameters:\n        - name: requestId\n          in: path\n          description: Reference Id of Data Access Request the Elections are on\n          required: true\n          schema:\n            type: string\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the list of votes.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Vote'\n    delete:\n      summary: Delete votes for the Data Access Request election\n      description: Deletes the votes of the election with the specified reference Id\n      parameters:\n        - name: requestId\n          in: path\n          description: referenceId of the Election of the Votes\n          required: true\n          schema:\n            type: string\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        200:\n          description: The Votes were deleted.\n        404:\n          description: The Election doesn't exist.\n  /api/dataRequest/{requestId}/vote/{id}:\n    get:\n      summary: Find the vote for the Data Access Request and Vote ID\n      description: Returns the Vote with the specified Id.\n      parameters:\n        - name: requestId\n          in: path\n          description: Reference Id of the Election of the requested Vote (this value is not used in the search, its only to complete the path)\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Vote ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the requested Vote.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n        404:\n          description: The Vote doesn't exist.\n    post:\n      summary: Create a Data Access Request Vote\n      description: update a Vote specified by VoteId of a DataRequest Election.\n      requestBody:\n        description: Vote to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Vote'\n      parameters:\n        - name: requestId\n          in: path\n          description: referenceId of the Election of the requested Vote (this value is not used in the create process, its only to complete the path)\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Vote ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        201:\n          description: Returns the updated Vote.\n        400:\n          description: Required parameter is null\n        404:\n          description: The vote id doesn't exist.\n    put:\n      summary: Update Data Access Request Vote\n      description: update an edited Vote specified by VoteId of a DataRequest Election.\n      requestBody:\n        description: Vote to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Vote'\n      parameters:\n        - name: requestId\n          in: path\n          description: referenceId of the Election of the requested Vote ( this value is not used in the create process , its only to complete the path)\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Vote ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        201:\n          description: Returns the updated Vote.\n        400:\n          description: Required parameter is null\n        404:\n          description: The vote doesn't exist.\n    delete:\n      summary: Delete Vote by id\n      description: Deletes the vote specified by the requestId and the VoteId.\n      parameters:\n        - name: requestId\n          in: path\n          description: referenceId of the Election at which the vote belongs.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Vote ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        200:\n          description: The Vote was deleted.\n        404:\n          description: Could not find vote with this Vote ID.\n  /api/dataRequest/{requestId}/vote/{id}/final:\n    post:\n      summary: Update Final Access Consent Vote\n      description: update a the FinalAccessVote specified by VoteId of a DataRequest Election and set finalAccessVote Election property to TRUE.\n      requestBody:\n        description: Vote to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Vote'\n      parameters:\n        - name: requestId\n          in: path\n          description: referenceId of the Election of the requested Vote ( this value is not used in the process , its only to complete the path)\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Vote ID\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Vote\n        - Data Access Request\n      responses:\n        200:\n          description: Returns the updated Vote.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Vote'\n        400:\n          description: Required parameter is null\n        404:\n          description: Election for specified id does not exist OR\n           Data Access Request for specified id does not exist OR\n           No Library cards exist for the researcher on this DAR\n  /api/dataset:\n    get:\n      summary: Get Datasets\n      description: Returns Dataset list filtered by authenticated user.\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: A list of Datasets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: './schemas/Dataset.yaml'\n\n  /api/dataset/v2:\n    post:\n      summary: Creates the Dataset from JSON\n      description: Creates the Dataset from JSON\n      requestBody:\n        description: Submitted dataset registration form. Dataset must contain the property Dataset Name with a unique value and a valid DataUse object.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: './schemas/Dataset.yaml'\n      tags:\n        - Datasets\n      responses:\n        201:\n          description: Successfully created Dataset\n          content:\n            application/json:\n              schema:\n                $ref: './schemas/Dataset.yaml'\n        400:\n          description: External Error (invalid input)\n        409:\n          description: Dataset Name given is already in use by another dataset\n        500:\n          description: Internal Error (something went wrong processing a valid input)\n  /api/dataset/validate:\n    get:\n      summary: validateDatasetName\n      description: Returns the dataset id if one exists for the given name (ignores case).\n      parameters:\n        - name: name\n          in: query\n          description: The name of the dataset to search for.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: dataset id\n          content:\n            application/json:\n              schema:\n                type: integer\n        404:\n          description: Dataset not found\n  /api/dataset/sample:\n    get:\n      summary: getDataSetSample\n      description: Returns a Dataset sample .tsv file.\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: .tsv sample\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            Content-type:\n              schema:\n                type: string\n              description: text/plain\n            Content-Disposition:\n              schema:\n                type: string\n              description: attachment; filename=DataSetSample.tsv\n        500:\n          description: Server error.\n  /api/dataset/dictionary:\n    get:\n      summary: describeDictionary\n      description: Return all the values that compound the dictionary , this values are the attributes of a Dataset.\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: An array of the existent dictionaries\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Dictionary'\n        500:\n          description: Server error.\n  /api/dataset/{id}:\n    $ref: './paths/datasetById.yaml'\n  /api/dataset/{id}/approved/users:\n    get:\n      summary: Dataset Approved Users\n      description: Dataset Approved Users\n      parameters:\n        - name: id\n          in: path\n          description: The dataset id\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: Dataset Approved Users\n          content:\n            text/plain:\n              schema:\n                type: string\n          headers:\n            Content-type:\n              schema:\n                type: string\n              description: text/plain\n            Content-Disposition:\n              schema:\n                type: string\n              description: attachment; filename=DatasetApprovedUsers.tsv\n        500:\n          description: Server error.\n  /api/dataset/download:\n    post:\n      summary: downloadDataSets\n      description: Returns the dataset Properties of the datasets whose Ids are in the idList\n      parameters:\n        - name: idList\n          in: body\n          description: List of DatasetIds.\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: The Dataset was deleted.\n        500:\n          description: Server error.\n  /api/dataset/autocomplete/{partial}:\n    get:\n      summary: datasetAutocomplete\n      description: Returns Dataset list with the Datasets whose objectsIds matches with the partial string.\n      parameters:\n        - name: partial\n          in: path\n          description: the value to autocomplete.\n          required: true\n          schema:\n            type: string\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: An array of Dataset objectIds\n          content:\n            text/plain:\n              schema:\n                type: array\n                items:\n                  type: string\n        500:\n          description: Server error.\n  /api/dataset/disable/{id}/{active}:\n    $ref: './paths/datasetDisableById.yaml'\n  /api/datasetAssociation/{datasetId}:\n    get:\n      summary: Get Dataset Associations\n      description: Get all dataset associations\n      parameters:\n        - name: datasetId\n          in: path\n          description: dataset id\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: Map of associated and non-associated users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetAssociationMap'\n    post:\n      summary: Create Dataset Associations\n      operationId: Create dataset associations for the provided dataset and users\n      parameters:\n        - name: datasetId\n          in: path\n          description: dataset id\n          required: true\n          schema:\n            type: integer\n        - name: userIdList\n          in: body\n          description: list of user ids\n          required: true\n          schema:\n            type: array\n            items:\n              type: integer\n      tags:\n        - Datasets\n      responses:\n        201:\n          description: An array of created dataset associations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DatasetAssociation'\n    put:\n      summary: Update Dataset Associations\n      operationId: Update dataset associations for the provided dataset and users\n      parameters:\n        - name: datasetId\n          in: path\n          description: dataset id\n          required: true\n          schema:\n            type: integer\n        - name: userIdList\n          in: body\n          description: list of user ids\n          required: true\n          schema:\n            type: array\n            items:\n              type: integer\n      tags:\n        - Datasets\n      responses:\n        200:\n          description: An array of updated dataset associations\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DatasetAssociation'\n  /api/election/{id}:\n    get:\n      summary: describeElectionById\n      description: Returns the Election identified by Id.\n      parameters:\n        - name: id\n          in: path\n          description: Election Id\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Election\n      responses:\n        200:\n          description: Election\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        400:\n          description: Could not find Election with the specified Id\n  /api/election/{electionId}/votes:\n    get:\n      summary: get the votes on the election specified by the electionId\n      description: Returns the list of votes associated with the election identified by Id\n      parameters:\n        - name: electionId\n          in: path\n          description: Election Id\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Election\n      responses:\n        200:\n          description: List of votes\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        404:\n          description: Could not find Election with the specified Id\n        500:\n          description: Internal Server Error\n    put:\n      summary: updateElection\n      description: \"Updates the election specified by Id.\"\n      parameters:\n        - name: id\n          in: path\n          description: Id of the Election to Update\n          required: true\n          schema:\n            type: integer\n        - name: rec\n          in: body\n          description: Updated Election.\n          required: true\n          schema:\n            $ref: '#/components/schemas/Election'\n      tags:\n        - Election\n      responses:\n        200:\n          description: updated Election\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Election'\n        400:\n          description: Illegal Argument Exception\n  /api/election/{referenceId}/advance/{vote}:\n    post:\n      summary: Advance Elections\n      description: Advance all incomplete votes in any elections on the reference.\n      operationId: advanceElections\n      parameters:\n        - name: referenceId\n          in: path\n          description: referenceId for the Elections\n          required: true\n          schema:\n            type: string\n        - name: vote\n          in: path\n          description: Vote value for all votes in the Elections\n          required: true\n          schema:\n            type: string\n            enum:\n              - Yes\n              - No\n      tags:\n        - Election\n      responses:\n        200:\n          description: All incomplete votes for the elections have been advanced.\n        500:\n          description: Server error.\n  /api/electionReview:\n    get:\n      summary: getCollectElectionReview\n      description: Returns the ElectionReview from an Open Election identified by reference Id.\n      parameters:\n        - name: referenceId\n          in: query\n          description: referenceId of the Election\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: Type of the Election\n          required: true\n          schema:\n            type: string\n            enum:\n              - TranslateDUL\n              - DataAccess\n              - DataSet\n              - RP\n      tags:\n        - ElectionReview\n      responses:\n        200:\n          description: ElectionReview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElectionReview'\n  /api/electionReview/openElection:\n    get:\n      summary: describeElectionById\n      description: Endpoint to verify the existence of Open elections.\n      tags:\n        - Election\n      responses:\n        200:\n          description: Returns TRUE if there is at least one Open election otherwise return FALSE.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /api/electionReview/{electionId}:\n    get:\n      summary: describeElectionReviewByElectionId\n      description: \"Returns the ElectionReview from an Election identified by ElectionId. This endpoint doesn't filter votes by isFinalAccess attribute so the reviewVote array of the retrieved ElectionReview will contain the isFinalAccess = TRUE Vote.\"\n      parameters:\n        - name: electionId\n          in: path\n          description: Election Id\n          required: true\n          schema:\n            type: integer\n      tags:\n        - ElectionReview\n      responses:\n        200:\n          description: ElectionReview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElectionReview'\n  /api/electionReview/access/{electionId}:\n    get:\n      summary: get ElectionReview for access election identified by electionId\n      description: Returns the ElectionReview from an Election identified by ElectionId. This endpoint can be used only for DataAccess elections.\n      parameters:\n        - name: electionId\n          in: path\n          description: Election Id\n          required: true\n          schema:\n            type: integer\n        - name: isFinalAccess\n          in: query\n          description: Defines if the reviewVote array of the retrieved ElectionReview will contain or not the isFinalAccess = TRUE Vote.\n          required: true\n          schema:\n            type: boolean\n      tags:\n        - ElectionReview\n      responses:\n        200:\n          description: ElectionReview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElectionReview'\n  /api/electionReview/rp/{electionId}:\n    get:\n      summary: get ElectionReview for rp election identified by electionId\n      description: Returns the ElectionReview from an Election identified by ElectionId. This endpoint can be used only for Research Purpose elections.\n      parameters:\n        - name: electionId\n          in: path\n          description: |\n            Election Id for the associated Data Access Election\n            (and not the associated RP Election, this is legacy behavior).\n          required: true\n          schema:\n            type: integer\n        - name: isFinalAccess\n          in: query\n          description: Defines if the reviewVote array of the retrieved ElectionReview will contain or not the isFinalAccess = TRUE Vote.\n          required: true\n          schema:\n            type: boolean\n      tags:\n        - ElectionReview\n      responses:\n        200:\n          description: ElectionReview\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ElectionReview'\n  /api/emailNotifier/reminderMessage/{voteId}:\n    post:\n      summary: Send Reminder Email\n      description: Send a reminder email to the owner of a vote\n      parameters:\n        - name: voteId\n          in: path\n          description: String value of the vote id for a user's vote in an election\n          required: true\n          schema:\n            type: string\n      tags:\n        - Notifier\n      responses:\n        200:\n          description: Email successfully sent\n        500:\n          description: Server error.\n\n  /api/institutions:\n    get:\n      summary: Institution INDEX resource\n      description: Fetches all institutions\n      tags:\n        - Institutions\n      responses:\n        200:\n          description: Returns all institutions, along with their create user, update user, and signing official users if there are any.\n            If no results are found, an empty array is returned.\n            Admin will see all details while non-Admins will only see a subset.\n        500:\n          description: Internal Server Error\n    post:\n      summary: Institution CREATE resource\n      description: Creates new institution record based on json payload\n      tags:\n        - Institutions\n      requestBody:\n        description: Required JSON payload representing updated Institution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Institution'\n      responses:\n        201:\n          description: Creates and returns newly created record.\n        400:\n          description: Bad Request\n        500:\n          description: Internal Server Error\n  /api/institutions/{id}:\n    get:\n      summary: Institution GET\n      description: Fetches Institution based on id param\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: Institution ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns target institution.\n            Admin will see all details while non-Admins will only see a subset.\n        404:\n          description: Institution not found\n        500:\n          description: Internal Server Error\n    put:\n      summary: Institution UPDATE\n      description: Updates institution based on id and json payload\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: Institution ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Required JSON payload representing updated Institution\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Institution'\n      responses:\n        200:\n          description: Updates and returns target institution\n        400:\n          description: Bad Request\n        404:\n          description: Institution not found\n        500:\n          description: Internal Server Error\n    delete:\n      summary: Institution DELETE\n      description: Deletes institution based on id\n      tags:\n        - Institutions\n      parameters:\n        - name: id\n          in: path\n          description: Institution ID\n          required: True\n          schema:\n            type: string\n      responses:\n        204:\n          description: Deletes target institution (no return entity)\n        404:\n          description: Institution not found\n        500:\n          description: Internal Server Error\n  /api/libraryCards:\n    get:\n      summary: Library Card INDEX resource\n      description: Returns all saved library cards\n      tags:\n        - Library Card\n        - Admin\n      responses:\n        200:\n          description: Library Card INDEX request success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LibraryCard'\n        401:\n          description: User not authorized\n        500:\n          description: Internal server error\n    post:\n      summary: Library Card CREATE resource\n      description: Creates a new Library Card based on user-provided json\n      requestBody:\n        description: JSON representation of libraryCard payload\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LibraryCard'\n      tags:\n        - Library Card\n        - Admin\n      responses:\n        201:\n          description: Library Card CREATE success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LibraryCard'\n        400:\n          description: Bad request (Issues with json payload)\n        401:\n          description: User not authorized\n        409:\n          description: Library Card payload conflicts with an existing record\n        500:\n          description: Internal server error\n  /api/libraryCards/{id}:\n    get:\n      summary: Library Card GET Resource\n      description: Fetch library card bases on id parameter\n      tags:\n        - Library Card\n        - Admin\n      parameters:\n      - name: id\n        in: path\n        description: Library Card ID\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Library Card GET success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LibraryCard'\n        401:\n          description: User not authorized\n        404:\n          description: Library Card not found\n        500:\n          description: Internal server error\n    put:\n      summary: Library Card PUT resource\n      description: Update target Library Card based on id parameter and user provided json\n      tags:\n        - Library Card\n        - Admin\n      parameters:\n      - name: id\n        in: path\n        description: Library Card ID\n        required: true\n        schema:\n          type: integer\n      requestBody:\n          description: 'JSON representation of updated Library Card state'\n          required: true\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LibraryCard'\n      responses:\n        200:\n          description: Library Card PUT request success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LibraryCard'\n        400:\n          description: Bad request (Issues with json payload)\n        401:\n          description: User not authorized\n        404:\n          description: Library Card not found\n        409:\n          description: Library Card payload conflicts with an existing record\n        500:\n          description: Internal server error\n    delete:\n      summary: Library Card DELETE resource\n      description: Delete target Library Card based on id parameter\n      tags:\n        - Library Card\n        - Admin\n      parameters:\n      - name: id\n        in: path\n        description: Library Card ID\n        required: true\n        schema:\n          type: integer\n      responses:\n        204:\n          description: Library Card DELETE request success\n        401:\n          description: User not authorized\n        404:\n          description: Library Card not found\n        500:\n          description: Internal server error\n  /api/libraryCards/institution/{id}:\n    get:\n      summary: Library Card GET based on Institution ID\n      description: Returns all Library Cards with institution_id equal to provided id\n      tags:\n        - Library Card\n        - Institutions\n      parameters:\n      - name: id\n        in: path\n        description: Institution ID\n        required: true\n        schema:\n          type: integer\n      responses:\n        200:\n          description: Library Card GET request success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LibraryCard'\n        401:\n          description: User not authorized\n        404:\n          description: Institution not found\n        500:\n          description: Internal server error\n  /api/match/{consentId}/{purposeId}:\n    get:\n      summary: getMatches\n      description: Returns the match results between a Consent and a Data Access Request.\n      parameters:\n        - name: consentId\n          in: path\n          description: Consent ID\n          required: true\n          schema:\n            type: string\n        - name: purposeId\n          in: path\n          description: Data Access Request (or research purpose) ID\n          required: true\n          schema:\n            type: string\n      tags:\n        - Consent\n        - Data Access Request\n        - Match\n      responses:\n        200:\n          description: Returns a match result of the stuctured use restrictions of the Consent\n            and Data Access Request. If no results are found, no data is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatchResult'\n        404:\n          description: No match exists for the provided Consent and Data Access Request\n        500:\n          description: Server error.\n\n  /api/match/reprocess/purpose/{purposeId}:\n    post:\n      summary: Process all matches for this research purpose (DAR) id\n      description: Process all matches for this research purpose (DAR) id\n      tags:\n        - Data Access Request\n        - Match\n      parameters:\n        - name: purposeId\n          in: path\n          description: Data Access Request (or research purpose) ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns a list of reprocessed match results of the Data Access Request. If no results are found, no data is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MatchResult'\n        500:\n          description: Server error.\n\n  /api/match/consent/{consentId}:\n    get:\n      summary: Get all matches for this consent id\n      description: Get all matches for this consent id\n      tags:\n        - Consent\n        - Match\n      parameters:\n        - name: consentId\n          in: path\n          description: Consent Id\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns a list of match results of the Consent. If no results are found, no data is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MatchResult'\n        500:\n          description: Server error.\n\n  /api/match/purpose/{purposeId}:\n    get:\n      summary: Get all matches for this research purpose (DAR) id\n      description: Get all matches for this research purpose (DAR) id\n      tags:\n        - Data Access Request\n        - Match\n      parameters:\n        - name: purposeId\n          in: path\n          description: Data Access Request (or research purpose) ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns a list of match results of the Data Access Request. If no results are found, no data is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MatchResult'\n        500:\n          description: Server error.\n\n  /api/user:\n    post:\n      summary: Create User\n      description: Create a user with RESEARCHER role using the user's current authentication status.\n      tags:\n        - User\n      responses:\n        200:\n          description: Returns the created user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Unable to validate the user's google identity.\n        409:\n          description: User should be unique\n        500:\n          description: Server error.\n  /api/user/me:\n    get:\n      summary: Find currently authenticated user\n      description: Find currently authenticated user\n      tags:\n        - User\n      responses:\n        200:\n          description: The user, along with researcher properties and library cards\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: User not found\n        500:\n          description: Server error.\n  /api/user/institution/{institutionId}:\n    $ref: './paths/userInstitutionByInstitutionId.yaml'\n  /api/user/institution/unassigned:\n    get:\n      summary: Find users that do not belong to an institution\n      description: Find users that do not belong to an institution\n      tags:\n        - User\n      responses:\n        200:\n          description: An array of users that do not belong to an institution\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        500:\n          description: Internal Server Error\n  /api/user/signing-officials:\n    get:\n      summary: Find SOs for currently authenticated user's institution\n      description: Return list of SOs belonging to the same institution as currently authenticated user\n      tags:\n        - User\n      responses:\n        200:\n          description: The users with the same institutionId and SO Role\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SimplifiedUser'\n        404:\n          description: User not found\n        500:\n          description: Server error.\n  /api/user/{userId}:\n    get:\n      summary: Find user by id\n      description: Finds user by the user id. Available to Admin, Chair, and Member roles\n      parameters:\n        - name: userId\n          in: path\n          description: The id of the user\n          required: true\n          schema:\n            type: number\n      tags:\n        - User\n      responses:\n        200:\n          description: The user, along with researcher properties and library cards\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        404:\n          description: User not found\n        500:\n          description: Server error.\n  /api/user/profile:\n    post:\n      summary: Create user properties.\n      description: Create properties for the current user.\n      requestBody:\n        description: Map\u003cString, String\u003e for user properties.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserProperties'\n      tags:\n        - User\n      responses:\n        201:\n          description: The user properties were created.\n        400:\n          description: Malformed entity.\n        409:\n          description: Unsupported operation.\n        500:\n          description: Server error.\n    put:\n      summary: Update user properties\n      description: Updates a user.\n      requestBody:\n        description: Map\u003cString, String\u003e for user properties.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserProperties'\n      parameters:\n        - name: validate\n          in: query\n          description: Defines if the endpoint should validate if all the required fields are present. If not, it will fail.\n          required: true\n          schema:\n            type: boolean\n      tags:\n        - User\n      responses:\n        200:\n          description: The user was updated, and returns the properties.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Malformed researcher entity.\n        404:\n          description: The requested user doesn't exist in the system.\n        500:\n          description: Server error.\n  /api/user/role/{roleName}:\n    get:\n      summary: Get a list of users that you have access to based on your role\n      description: Finds users based on the user role and permissions\n      parameters:\n        - name: roleName\n          in: path\n          description: The name of the role of the user\n          schema:\n            type: string\n            required: true\n            enum: [Admin, SigningOfficial]\n      tags:\n        - User\n      responses:\n        200:\n          description: The list of users, along with their roles, does not include properties\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        400:\n          description: Unsupported or Invalid role name\n        404:\n          description: The user does not have the given role, or role is SO and the user does not have an Institution\n        500:\n          description: Server error.\n  /api/user/{userId}/{roleId}:\n    put:\n      summary: Add a role to a user\n      description: Add a role to a user id. Available to Admin roles\n      parameters:\n        - name: userId\n          in: path\n          description: The id of the user\n          required: true\n          schema:\n            type: number\n        - name: roleId\n          in: path\n          description: |\n            The id of the role. Members and Chairpersons cannot be added this way.\n            See DAC endpoints for those roles.\n            ALUMNI: 3\n            ADMIN: 4\n            RESEARCHER: 5\n            DATAOWNER: 6\n            SIGNINGOFFICIAL: 7\n          required: true\n          schema:\n            type: number\n      tags:\n        - User\n      responses:\n        200:\n          description: Updated user along with researcher properties and library cards\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        304:\n          description: Not modified\n        400:\n          description: Bad Request\n        404:\n          description: User not found\n        500:\n          description: Server error.\n    delete:\n      summary: Delete a role from a user\n      description: Delete a role from a user, specified by given userId. Available to Admin roles\n      parameters:\n        - name: userId\n          in: path\n          description: The id of the user\n          required: true\n          schema:\n            type: number\n        - name: roleId\n          in: path\n          description: |\n            The id of the role. Members and Chairpersons cannot be deleted this way.\n            See DAC endpoints for those roles.\n            ALUMNI: 3\n            ADMIN: 4\n            RESEARCHER: 5\n            DATAOWNER: 6\n            SIGNINGOFFICIAL: 7\n          required: true\n          schema:\n            type: number\n            nullable: false\n            enum:\n              - 3\n              - 4\n              - 5\n              - 6\n              - 7\n      tags:\n        - User\n      responses:\n        200:\n          description: Updated user along with researcher properties and library cards\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        400:\n          description: Bad Request\n        404:\n          description: User not found\n        500:\n          description: Server error.\n  /api/user/{email}:\n    delete:\n      summary: Delete User by email\n      description: Deletes the user identified by the email.\n      parameters:\n        - name: email\n          in: path\n          description: The email of the user.\n          required: true\n          schema:\n            type: string\n      tags:\n        - User\n      responses:\n        200:\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n  /api/researcher:\n    post:\n      deprecated: true\n      summary: Create researcher properties.\n      description: |\n        Deprecated - use POST /api/user/{userId}\n        Create researcher properties for the current user.\n      parameters:\n        - name: researcherProperties\n          in: body\n          required: true\n          description: Map\u003cString, String\u003e for user properties.\n          schema:\n            $ref: '#/components/schemas/UserProperties'\n      tags:\n        - Researcher\n      responses:\n        201:\n          description: The researcher properties were created.\n        400:\n          description: Malformed researcher entity.\n        409:\n          description: Unsupported operation.\n        500:\n          description: Server error.\n    put:\n      deprecated: true\n      summary: Update researcher.\n      description: |\n        Deprecated - use PUT /api/user/{userId}\n        Updates a researcher user.\n      parameters:\n        - name: validate\n          in: query\n          description: Defines if the endpoint should validate if all the required fields are present. If not, it will fail.\n          required: true\n          schema:\n            type: boolean\n        - name: researcherProperties\n          in: body\n          required: true\n          description: Map\u003cString, String\u003e for user properties.\n          schema:\n            $ref: '#/components/schemas/UserProperties'\n      tags:\n        - Researcher\n      responses:\n        200:\n          description: The researcher was updated, and returns the properties.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProperties'\n        400:\n          description: Malformed researcher entity.\n        404:\n          description: The requested user doesn't exist in the system.\n        500:\n          description: Server error.\n  /api/researcher/{userId}:\n    get:\n      deprecated: true\n      summary: Return researcher properties.\n      description: |\n        DEPRECATED: Use /api/user/me or /api/user/{id}\n        Describes all the properties for a reseacher user.\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: integer\n      tags:\n        - User\n        - Researcher\n      responses:\n        200:\n          description: Returns the user properties. Map\u003cString, Object\u003e format.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserProperties'\n        404:\n          description: The requested user doesn't exist in the system.\n    delete:\n      summary: Delete Researcher properties\n      description: Deletes all the properties for the related user.\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          schema:\n            type: integer\n      tags:\n        - User\n        - Researcher\n      responses:\n        200:\n          description: The properties were deleted. No response object, just 200 response.\n        404:\n          description: The requested user doesn't exist in the system\n  /api/nih:\n    delete:\n      summary: Delete Era Commons Account\n      description: Removes only Era Commons Account related information from the logued user, requesting this action\n      tags:\n        - User\n        - eRA Commons\n        - Nih\n      responses:\n        200:\n          description: Returns an empty response if the operation was successful\n    post:\n      summary: Store NIH information\n      description: Save user's eRA Commons account\n      parameters:\n        - name: nihAccount\n          in: body\n          description: NIH Account information\n          required: true\n          schema:\n            $ref: '#/components/schemas/NIHUserAccount'\n      tags:\n        - User\n        - Researcher\n        - eRA Commons\n        - Nih\n      responses:\n        200:\n          description: Returns eRA Commons Account information. Map\u003cString, String\u003e format\n        404:\n          description: The user doesn't exist in the system\n  /api/sam/register/self:\n    $ref: './paths/samRegisterSelf.yaml'\n  /api/sam/register/self/diagnostics:\n    $ref: './paths/samRegisterSelfDiagnostics.yaml'\n  /api/sam/register/self/info:\n    $ref: './paths/samRegisterSelfInfo.yaml'\n  /api/sam/resource-types:\n    $ref: './paths/samResourceTypes.yaml'\n  /api/votes:\n    $ref: './paths/votes.yaml'\n  /metrics/dac/decision:\n    get:\n      summary: Dac Decision Metrics\n      description: Dac Decision Metrics\n      tags:\n        - Metrics\n      responses:\n        200:\n          description: Dac Decision Metrics\n          content:\n            text/plain:\n              schema:\n                type: string\n        500:\n          description: Internal Server Error\n  /metrics/dar/decision:\n    get:\n      summary: DAR Decision Metrics\n      description: DAR Decision Metrics\n      tags:\n        - Metrics\n      responses:\n        200:\n          description: DAR Decision Metrics\n          content:\n            text/plain:\n              schema:\n                type: string\n        500:\n          description: Internal Server Error\n  /metrics/dataset/{datasetId}:\n    get:\n      summary: Dataset Metrics\n      description: get dars and elections associated with datasetId\n      parameters:\n        - name: datasetId\n          in: path\n          required: true\n          schema:\n            type: integer\n      tags:\n        - Metrics\n      responses:\n        200:\n          description: Dataset Metrics\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schema/DatasetMetrics'\n        404:\n          description: Dataset with specified ID does not exist\n        500:\n          description: Internal Server Error\n  /status:\n    get:\n      summary: System Health Status\n      description: |\n        A detailed description of the various subsystem statuses that Consent relies upon.\n        Current systems include:\n          * Elastic Search\n          * GCS\n          * Ontology\n          * Postgres DB\n          * Sam\n          * Sendgrid\n      tags:\n        - Status\n      responses:\n        200:\n          description: All systems are OK\n        500:\n          description: Some number of subsystems are not OK.\n  /tos/text:\n    $ref: './paths/tosText.yaml'\n  /tos/text/duos:\n    $ref: './paths/tosTextDuos.yaml'\n  /version:\n    get:\n      summary: Current application version\n      description: The current short hash and version of the application.\n      tags:\n        - Status\n      responses:\n        200:\n          description: Successful Response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n        500:\n          description: Internal Server Error\n\ncomponents:\n  securitySchemes:\n    googleoauth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: https://accounts.google.com/o/oauth2/auth\n          scopes:\n            email: email authorization\n            profile: profile authorization\n  schemas:\n    Collaborator:\n      $ref: './schemas/Collaborator.yaml'\n    Consent:\n      $ref: './schemas/Consent.yaml'\n    ConsentAssociation:\n      $ref: './schemas/ConsentAssociation.yaml'\n    DarCollection:\n      $ref: './schemas/DarCollection.yaml'\n    DataAccessRequest:\n      $ref: './schemas/DataAccessRequest.yaml'\n    Dataset:\n      $ref: './schemas/Dataset.yaml'\n    DatasetProperty:\n      $ref: './schemas/DatasetProperty.yaml'\n    Election:\n      $ref: './schemas/Election.yaml'\n    Institution:\n      $ref: './schemas/Institution.yaml'\n    LibraryCard:\n      $ref: './schemas/LibraryCard.yaml'\n    PaginationResponse:\n      $ref: './schemas/PaginationResponse.yaml'\n    User:\n      $ref: './schemas/User.yaml'\n    UserProperty:\n      $ref: './schemas/UserProperty.yaml'\n    UserProperties:\n      $ref: './schemas/UserProperties.yaml'\n    UserRole:\n      $ref: './schemas/UserRole.yaml'\n    NIHUserAccount:\n      type: object\n      properties:\n        nihUsername:\n          type: string\n          description: Nih account associated name.\n        datasetPermissions:\n          type: array\n          items:\n            type: string\n          description: NIH dataset access permissions.\n        status:\n          type: string\n          description: Flag to determine if a user is authorized.\n        eraExpiration:\n          type: string\n          description: Contains the eRA account expiration date in miliseconds. This will be 30 days from the user's authentication.\n    Vote:\n      $ref: './schemas/Vote.yaml'\n    MatchResult:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The id of the stored match result\n        consent:\n          type: string\n          description: The Consent ID\n        purpose:\n          type: string\n          description: The Data Access Request ID\n        match:\n          type: boolean\n          description: The match condition between the Consent and Data Access Request\n        failed:\n          type: boolean\n          description: Indicates a system failure or not. If true, the system was not able to\n            perform a logic match between the two objects due to a server error.\n        createDate:\n          type: string\n          description: A string representation of the date that this match result was created.\n    Match:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: The ID of the entity.\n        consent:\n          type: string\n          description: The matched consent.\n        purpose:\n          type: string\n          description: The matched research purpose.\n        match:\n          type: boolean\n          description: True if the entities match, false otherwise.\n        failed:\n          type: boolean\n          description: True if the matching process failed, for any reason.\n        createDate:\n          type: string\n          format: date\n          description: Describes the date the match was created.\n    PendingCase:\n      type: object\n      properties:\n        referenceId:\n          type: string\n          description: The reference ID that identifies the case\n        frontEndId:\n          type: string\n          description: The front end ID for the case\n        logged:\n          type: string\n          description: Describes the logged votes vs. total votes required.\n        alreadyVoted:\n          type: boolean\n          description: Describes if the user already voted on this case\n        isReminderSent:\n          type: boolean\n          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.\n        isFinalVote:\n          type: boolean\n          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.\n        status:\n          type: string\n          description: Status of the vote. Pending or editable.\n        electionStatus:\n          type: string\n          description: Describes the status of the election related to this pending case. Open, closed or cancelled.\n        electionId:\n          type: integer\n          format: int32\n          description: Describes the id of the election related to this pending  case.\n        voteId:\n          type: integer\n          format: int32\n          description: Describes the id of the users vote, related to this particular pending case.\n        createDate:\n          type: string\n          format: date\n          description: 'Defines the type of the association. Possible values: sample, sampleSet.'\n        totalVotes:\n          type: integer\n          format: int32\n          description: Describes the total votes(users) required to vote for this election.\n        votesLogged:\n          type: integer\n          format: int32\n          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.\n        rpElectionId:\n          type: integer\n          format: int32\n          description: Describes the id of the research purpose election related to this pending case, if it exists\n        rpVoteId:\n          type: integer\n          format: int32\n          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists\n    Summary:\n      type: object\n      properties:\n        reviewedPositiveCases:\n          type: integer\n          format: int32\n          description: Describes the number of cases that were denied.\n        reviewedNegativeCases:\n          type: integer\n          format: int32\n          description: Describes the number of cases that were approved.\n        pendingCases:\n          type: integer\n          format: int32\n          description: Describes the number of cases that are opened and have to be reviewed.\n    ConsentManage:\n      type: object\n      properties:\n        consentId:\n          type: string\n          description: The consent ID of the case.\n        consentName:\n          type: string\n          description: The consent name of the case.\n        editable:\n          type: boolean\n          description: If the consent manage is editable.\n        electionStatus:\n          type: string\n          description: The status of the election related to the consent.\n        electionId:\n          type: integer\n          description: The electionId of the election related to the consent.\n        createDate:\n          type: string\n          format: date-time\n          description: The datetime the election was created.\n        sortDate:\n          type: string\n          format: date-time\n          description: The datetime the election was created/updated (the last updated).\n        updateStatus:\n          type: boolean\n          description: Indicates if a consent has been updated from orsp\n    DataAccessRequestManage:\n      type: object\n      properties:\n        dar:\n          type: object\n          description: The Data Access Request\n        election:\n          type: object\n          description: The Election\n        votes:\n          type: array\n          description: The Votes for the Election\n        dac:\n          type: object\n          description: The DAC for the Election\n        researcher:\n          type: object\n          description: The Researcher for the Data Access Request\n        referenceId:\n          type: string\n          description: The reference ID that identifies the case\n          deprecated: true\n        logged:\n          type: string\n          description: Describes the logged votes vs. total votes required.\n          deprecated: true\n        alreadyVoted:\n          type: boolean\n          description: Describes if the user already voted on this case\n          deprecated: true\n        isReminderSent:\n          type: boolean\n          description: Describes if the user recieved a reminder by the chairperson to log the vote on the case.\n          deprecated: true\n        isFinalVote:\n          type: boolean\n          description: If the user is chairperson, this will be false if the final vote is not logged yet, true otherwise.\n          deprecated: true\n        status:\n          type: string\n          description: Status of the vote. Pending or editable.\n          deprecated: true\n        voteId:\n          type: integer\n          format: int32\n          description: Describes the id of the users vote, related to this particular pending case.\n          deprecated: true\n        totalVotes:\n          type: integer\n          format: int32\n          description: Describes the total votes(users) required to vote for this election.\n          deprecated: true\n        votesLogged:\n          type: integer\n          format: int32\n          description: Votes already logged in this pending case. Equal to the total of users that voted minus the ones that didnt.\n          deprecated: true\n        rpElectionId:\n          type: integer\n          format: int32\n          description: Describes the id of the research purpose election related to this pending case, if it exists\n          deprecated: true\n        rpVoteId:\n          type: integer\n          format: int32\n          description: Describes the id of the research purpose vote, related to this particular pending case, if it exists\n          deprecated: true\n        electionStatus:\n          type: string\n          description: The status of the election.\n          deprecated: true\n        rus:\n          type: string\n          description: The rus of the Data Access Request.\n          deprecated: true\n        dataRequestId:\n          type: string\n          description: The ID of the Data Access Request.\n          deprecated: true\n        projectTitle:\n          type: string\n          description: The title of the project, in the Data Access Request\n          deprecated: true\n        frontEndId:\n          type: string\n          description: The front end ID for the case\n          deprecated: true\n        electionId:\n          type: integer\n          format: int32\n          description: The ID of the election related to the DAR.\n          deprecated: true\n        createDate:\n          type: string\n          format: date-time\n          description: The Date the election was created.\n          deprecated: true\n        sortDate:\n          type: string\n          format: date\n          description: The datetime the election was created/updated (the last one).\n          deprecated: true\n        electionVote:\n          type: boolean\n          description: Result of the election\n          deprecated: true\n        isCanceled:\n          type: boolean\n          description: The DAR is canceled\n          deprecated: true\n        needsApproval:\n          type: boolean\n          description: The DAR requires Data Owners approval\n          deprecated: true\n        dataSetElectionResult:\n          type: string\n          description: Result of the Data Owners elections.\n          deprecated: true\n        datasetId:\n          type: integer\n          format: int32\n          description: The ID of the dataset for this DAR.\n          deprecated: true\n        dacId:\n          type: integer\n          format: int32\n          description: The ID of the DAC for this DAR's dataset.\n          deprecated: true\n        errors:\n          type: array\n          items:\n            type: string\n          description: List of any structural errors with this DAR\n          deprecated: true\n        ownerUser:\n          description: The owner of the DAR\n          deprecated: true\n          type: object\n          items:\n            $ref: '#/components/schemas/User'\n    DatasetAssociation:\n      type: object\n      properties:\n        datasetId:\n          type: integer\n          description: The dataset id\n        dacuserId:\n          type: integer\n          description: The user id\n        createDate:\n          type: string\n          description: Association creation date\n    DatasetAssociationMap:\n      type: object\n      properties:\n        associated_users:\n          description: Associated Users\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        not_associated_users:\n          description: Non-associated Users\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    Dictionary:\n      type: object\n      properties:\n        keyId:\n          type: integer\n          format: int32\n          description: Id of the key.\n        key:\n          type: integer\n          format: int32\n          description: Value of the key.\n        required:\n          type: boolean\n          description: Defines if this attribute is required to create a Dataset\n        displayOrder:\n          type: integer\n          format: int32\n          description: Defines the position of the attribute in the .tsv file\n        createDate:\n          type: string\n          format: date\n          description: Describes the date the Dictionary was created.\n        receiveOrder:\n          type: integer\n          format: int32\n          description: The display order of the properties.\n    ElectionReview:\n      type: object\n      properties:\n        reviewVote:\n          type: array\n          items:\n            $ref: '#/components/schemas/ElectionReviewVote'\n          description: Votes related to the Election.\n        election:\n          $ref: '#/components/schemas/Election'\n        consent:\n          $ref: './schemas/Consent.yaml'\n        voteAgreement:\n          $ref: '#/components/schemas/Vote'\n        finalVote:\n          $ref: '#/components/schemas/Vote'\n        rpElectionId:\n          type: integer\n          description: The research purpose ID.\n    ElectionReviewVote:\n      type: object\n      properties:\n        Vote:\n          $ref: '#/components/schemas/Vote'\n        displayName:\n          type: string\n          description: Name of the voter.\n        email:\n          type: string\n          description: Email of the voter.\n    Dac:\n      type: object\n      properties:\n        dacId:\n          type: integer\n          description: The DAC Id\n        name:\n          type: string\n          description: The DAC Name\n        description:\n          type: string\n          description: The DAC Description\n        createDate:\n          type: string\n          format: date\n          description: Date created\n        updateDate:\n          type: string\n          format: date\n          description: Date last updated\n        chairpersons:\n          description: List of Chairpersons\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        members:\n          description: List of Members\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n    SimplifiedUser:\n      type: object\n      properties:\n        dacUserId:\n          type: integer\n          description: ID of the user\n        displayName:\n          type: string\n          description: Name of the user\n    SamSelfDiagnostics:\n      $ref: './schemas/SamSelfDiagnostics.yaml'\n    SamUserInfo:\n      $ref: './schemas/SamUserInfo.yaml'\n    ErrorResponse:\n      properties:\n        message:\n          type: string\n          description: The error message\n        code:\n          type: integer\n          description: The response status code\n    OntologyFileMetaData:\n      type: object\n      properties:\n        prefix:\n          type: string\n          description: The prefix of the ontology file, i.e. \"DUOS\", \"DOID\", etc.\n        type:\n          type: string\n          description: The allowed type of ontology file, i.e. \"Organization\" or \"Disease\"\n    OntologyFile:\n      type: object\n      properties:\n        ontology_file:\n          $ref: '#/components/schemas/OntologyFileMetaData'\n    Version:\n      type: object\n      properties:\n        hash:\n          type: string\n          description: Current short hash of this version\n        version:\n          type: string\n          description: Current version\n"
		}
	},
	"Error": "json: cannot unmarshal bool into Go struct field Schema.paths.get.parameters.schema.required of type []string"
}