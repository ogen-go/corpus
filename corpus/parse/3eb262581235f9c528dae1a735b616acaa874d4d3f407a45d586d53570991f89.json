{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/disit/snap4city"
		},
		"file": {
			"name": "resourcemanagerapi-openapiv3.json",
			"size": 0,
			"path": "swagger/internal/resourcemanagerapi-openapiv3.json",
			"byteSize": 23370,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"Resource Manager API v8\",\n    \"version\": \"2.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://processloader.snap4city.org/processloader/api\"\n    }\n  ],\n  \"paths\": {\n    \"/upload.php\": {\n      \"post\": {\n        \"tags\": [\n          \"Upload\"\n        ],\n        \"summary\": \"Upload a Resource\",\n        \"requestBody\": {\n          \"description\": \"A JSON should be submitted for uploading resources of type IoTApp, AMMA, DevDash, ResDash. A multipart body should be submitted for uploading resources of type IoTBlocks, MicroService.\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"name\",\n                  \"user\",\n                  \"resource_type\",\n                  \"nature\",\n                  \"sub_nature\",\n                  \"licence\",\n                  \"description\",\n                  \"data\"\n                ],\n                \"properties\": {\n                  \"name\": {\n                    \"description\": \"Resource title (that appears in the loader home page).\",\n                    \"type\": \"string\",\n                    \"example\": \"NodereRed_weather_sensor\"\n                  },\n                  \"user\": {\n                    \"description\": \"A valid access token.\",\n                    \"type\": \"string\"\n                  },\n                  \"resource_type\": {\n                    \"description\": \"Resource type.\",\n                    \"type\": \"string\",\n                    \"enum\": [\n                      \"IoTApp\",\n                      \"ResDash\",\n                      \"DevDash\",\n                      \"AMMA\"\n                    ],\n                    \"example\": \"IoTApp\"\n                  },\n                  \"nature\": {\n                    \"description\": \"Resource KM4City Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m\u0026format=json).\",\n                    \"type\": \"string\",\n                    \"example\": \"Environment\"\n                  },\n                  \"sub_nature\": {\n                    \"description\": \"Resource KM4City Sub Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c\u0026format=json).\",\n                    \"type\": \"string\",\n                    \"example\": \"Weather_sensor\"\n                  },\n                  \"format\": {\n                    \"description\": \"Format of the source file (original data).\",\n                    \"type\": \"string\",\n                    \"example\": \"xml\"\n                  },\n                  \"licence\": {\n                    \"description\": \"Licence of use. Is an URL to a licence.\",\n                    \"type\": \"string\",\n                    \"format\": \"url\",\n                    \"enum\": [\n                      \"https://creativecommons.org/licenses/by/4.0\"\n                    ],\n                    \"example\": \"https://creativecommons.org/licenses/by/4.0\"\n                  },\n                  \"description\": {\n                    \"description\": \"Description\",\n                    \"type\": \"string\",\n                    \"example\": \"A flow coming from NodeRed\"\n                  },\n                  \"data\": {\n                    \"description\": \"Data\",\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"$ref\": \"#components/schemas/data\"\n                    }\n                  }\n                }\n              }\n            },\n            \"multipart/form-data\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"resource\",\n                  \"request\"\n                ],\n                \"properties\": {\n                  \"resource\": {\n                    \"description\": \"A compressed file (ZIP, or RAR).\",\n                    \"type\": \"string\",\n                    \"format\": \"binary\"\n                  },\n                  \"request\": {\n                    \"type\": \"object\",\n                    \"required\": [\n                      \"name\",\n                      \"user\",\n                      \"resource_type\",\n                      \"nature\",\n                      \"sub_nature\",\n                      \"licence\",\n                      \"description\"\n                    ],\n                    \"properties\": {\n                      \"name\": {\n                        \"description\": \"Resource title (that appears in the loader home page).\",\n                        \"type\": \"string\",\n                        \"example\": \"NodereRed_weather_sensor\"\n                      },\n                      \"user\": {\n                        \"description\": \"A valid access token.\",\n                        \"type\": \"string\"\n                      },\n                      \"resource_type\": {\n                        \"description\": \"Resource type.\",\n                        \"type\": \"string\",\n                        \"enum\": [\n                          \"IoTBlocks\",\n                          \"MicroService\"\n                        ],\n                        \"example\": \"MicroService\"\n                      },\n                      \"nature\": {\n                        \"description\": \"Resource KM4City Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m\u0026format=json).\",\n                        \"type\": \"string\",\n                        \"example\": \"Environment\"\n                      },\n                      \"sub_nature\": {\n                        \"description\": \"Resource KM4City Sub Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c\u0026format=json).\",\n                        \"type\": \"string\",\n                        \"example\": \"Weather_sensor\"\n                      },\n                      \"format\": {\n                        \"description\": \"Format of the source file (original data).\",\n                        \"type\": \"string\",\n                        \"example\": \"xml\"\n                      },\n                      \"licence\": {\n                        \"description\": \"Licence of use. Is an URL to a licence.\",\n                        \"type\": \"string\",\n                        \"format\": \"url\",\n                        \"enum\": [\n                          \"https://creativecommons.org/licenses/by/4.0\"\n                        ],\n                        \"example\": \"https://creativecommons.org/licenses/by/4.0\"\n                      },\n                      \"description\": {\n                        \"description\": \"Description\",\n                        \"type\": \"string\",\n                        \"example\": \"A flow coming from NodeRed\"\n                      },\n                      \"url\": {\n                        \"description\": \"Mandatory for the resources of type __MicroService__.\",\n                        \"type\": \"string\"\n                      },\n                      \"method\": {\n                        \"description\": \"Mandatory for the resources of type __MicroService__.\",\n                        \"type\": \"string\"\n                      },\n                      \"help\": {\n                        \"description\": \"Mandatory for the resources of type __MicroService__.\",\n                        \"type\": \"string\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success.\"\n          },\n          \"401\": {\n            \"description\": \"App type (__resource_type__) not recognised.\"\n          },\n          \"402\": {\n            \"description\": \"Insert NOT done due to lack of mandatory data.\"\n          },\n          \"500\": {\n            \"description\": \"DB connection error.\"\n          },\n          \"501\": {\n            \"description\": \"DB problem.\"\n          },\n          \"502\": {\n            \"description\": \"Upload failed.\"\n          },\n          \"503\": {\n            \"description\": \"File not compressed.\"\n          },\n          \"504\": {\n            \"description\": \"Missing input __resource__.\"\n          },\n          \"505\": {\n            \"description\": \"Cannot decode JSON.\"\n          },\n          \"506\": {\n            \"description\": \"Request (POST) not set.\"\n          }\n        }\n      }\n    },\n    \"/download.php\": {\n      \"get\": {\n        \"tags\": [\n          \"Download\"\n        ],\n        \"summary\": \"Download a Resource via Resource ID\",\n        \"description\": \"\\nA remarkable note about the __user__ and __status__ parameters:\\n\\n* If the access token is submitted through the __user__ parameter, but the __status__ is not specified, then details are returned about all the resources created by the user (both _Private_ and _Public_);\\n* If the access token is submitted through the __user__ parameter, and the __status__ is also submitted and set to _Private_, then details are returned about all the _Private_ resources created by user;\\n* If the access token is submitted through the __user__ parameter, and the __status__ is also submitted and set to _Public_, then details are returned about all the _Public_ resources created by user; \\n* If the access token is submitted through the __user__ parameter, and the __status__ is also submitted and set to _All_, then details are returned about all the resources created by user, and about all the _Public_ resources created by other users;\\n* If nor the __user__ neither the __status__ parameters are submitted, all the _Public_ resources are returned that have been created by users other than the requester.\\n\",\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"query\",\n            \"description\": \"Resource ID\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"example\": 300\n          },\n          {\n            \"name\": \"user\",\n            \"in\": \"query\",\n            \"description\": \"User access token. Required for accessing a private resource by ID.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"resource_type\",\n            \"in\": \"query\",\n            \"description\": \"Resource type. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"IoTApp\",\n                \"ResDash\",\n                \"DevDash\",\n                \"AMMA\",\n                \"IoTBlocks\",\n                \"MicroService\",\n                \"ETL\",\n                \"R\",\n                \"Java\"\n              ]\n            },\n            \"example\": \"IoTApp\"\n          },\n          {\n            \"name\": \"nature\",\n            \"in\": \"query\",\n            \"description\": \"Resource KM4City Category. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m\u0026format=json).\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"example\": \"Environment\"\n          },\n          {\n            \"name\": \"sub_nature\",\n            \"in\": \"query\",\n            \"description\": \"Resource KM4City Sub Category. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c\u0026format=json).\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"example\": \"Weather_sensor\"\n          },\n          {\n            \"name\": \"format\",\n            \"in\": \"query\",\n            \"description\": \"Format of the source file (original data). It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"example\": \"xml\"\n          },\n          {\n            \"name\": \"licence\",\n            \"in\": \"query\",\n            \"description\": \"Licence of use. Is an URL to a licence. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"url\",\n              \"enum\": [\n                \"https://creativecommons.org/licenses/by/4.0\"\n              ]\n            },\n            \"example\": \"https://creativecommons.org/licenses/by/4.0\"\n          },\n          {\n            \"name\": \"access\",\n            \"in\": \"query\",\n            \"description\": \"Access. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"method\",\n            \"in\": \"query\",\n            \"description\": \"Method. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"status\",\n            \"in\": \"query\",\n            \"description\": \"The resource status. It is meaningfull only if the access token is submitted, through the __user__ parameter. It is a filter that can be submitted in those requests where the ID of the resource of interest is not specified.\",\n            \"required\": false,\n            \"schema\": {\n              \"type\": \"string\",\n              \"enum\": [\n                \"All\",\n                \"Public\",\n                \"Private\"\n              ]\n            },\n            \"example\": \"All\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"A JSON is returned that contains the resource data (also including the attached compressed file if it can be found).\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"code\": {\n                      \"description\": \"The HTTP response status code.\",\n                      \"type\": \"integer\",\n                      \"format\": \"int32\",\n                      \"enum\": [\n                        200\n                      ]\n                    },\n                    \"result\": {\n                      \"description\": \"The textual description of the HTTP response status code.\",\n                      \"type\": \"string\",\n                      \"enum\": [\n                        \"Ok\"\n                      ]\n                    },\n                    \"file_link\": {\n                      \"description\": \"An URL from where the resource can be downloaded.\",\n                      \"type\": \"string\",\n                      \"format\": \"uri\"\n                    },\n                    \"file_metadata\": {\n                      \"$ref\": \"#components/schemas/metadata\"\n                    },\n                    \"files\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#components/schemas/metadata\"\n                      }\n                    },\n                    \"file_data\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"$ref\": \"#components/schemas/data\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"DB connection errors, invalid tokens, invalid input (one or more parameters not recognized), resource type not recognized or not yet implemented.\"\n          },\n          \"501\": {\n            \"description\": \"Database error.\"\n          }\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"metadata\": {\n        \"description\": \"Metadata about the resource of interest, identified through its unique identifier.\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"description\": \"Resource title (that appears in the loader home page).\",\n            \"type\": \"string\",\n            \"example\": \"NodereRed_weather_sensor\"\n          },\n          \"downloads\": {\n            \"type\": \"string\"\n          },\n          \"creation_date\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"average_stars\": {\n            \"type\": \"string\"\n          },\n          \"votes\": {\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"description\": \"Description\",\n            \"type\": \"string\",\n            \"example\": \"A flow coming from NodeRed\"\n          },\n          \"resource_type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"IoTApp\",\n              \"ResDash\",\n              \"DevDash\",\n              \"AMMA\",\n              \"IoTBlocks\",\n              \"MicroService\"\n            ]\n          },\n          \"nature\": {\n            \"description\": \"Resource KM4City Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20filter%20exists%20{?c%20rdfs:subClassOf%20?m}%20}%20order%20by%20?m\u0026format=json).\",\n            \"type\": \"string\",\n            \"example\": \"Environment\"\n          },\n          \"sub_nature\": {\n            \"description\": \"Resource KM4City Sub Category. The full list of the permitted values can be retrieved through a [SPARQL query](http://servicemap.disit.org/WebAppGrafo/sparql?query=%20select%20distinct%20substr(str(?m),37)%20as%20?macroClass%20substr(str(?c),37)%20as%20?subClass%20{%20?m%20rdfs:subClassOf%20km4c:Service.%20?c%20rdfs:subClassOf+%20?m.%20}%20order%20by%20?m%20?c\u0026format=json).\",\n            \"type\": \"string\",\n            \"example\": \"Weather_sensor\"\n          },\n          \"format\": {\n            \"description\": \"Format of the source file (original data).\",\n            \"type\": \"string\",\n            \"example\": \"xml\"\n          },\n          \"licence\": {\n            \"description\": \"Licence of use. Is an URL to a licence.\",\n            \"type\": \"string\",\n            \"format\": \"url\",\n            \"enum\": [\n              \"https://creativecommons.org/licenses/by/4.0\"\n            ],\n            \"example\": \"https://creativecommons.org/licenses/by/4.0\"\n          },\n          \"url\": {\n            \"description\": \"Expected to be found for the resources of type __MicroService__.\",\n            \"type\": \"string\"\n          },\n          \"method\": {\n            \"description\": \"Expected to be found for the resources of type __MicroService__.\",\n            \"type\": \"string\"\n          },\n          \"help\": {\n            \"description\": \"Expected to be found for the resources of type __MicroService__.\",\n            \"type\": \"string\"\n          },\n          \"access\": {\n            \"type\": \"string\"\n          },\n          \"public\": {\n            \"type\": \"string\",\n            \"enum\": [\n              0,\n              1\n            ]\n          }\n        }\n      },\n      \"data\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"example\": \"355d95d.ba7306a\"\n          },\n          \"type\": {\n            \"type\": \"string\",\n            \"example\": \"inject\"\n          },\n          \"tags\": {\n            \"type\": \"string\"\n          },\n          \"z\": {\n            \"type\": \"string\",\n            \"example\": \"1fbdd2b9.847dad\"\n          },\n          \"user\": {\n            \"type\": \"boolean\",\n            \"example\": false\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"filename\": {\n            \"type\": \"string\"\n          },\n          \"format\": {\n            \"type\": \"string\",\n            \"example\": \"utf8\"\n          },\n          \"chunk\": {\n            \"type\": \"boolean\",\n            \"example\": false\n          },\n          \"sendError\": {\n            \"type\": \"boolean\",\n            \"example\": false\n          },\n          \"server\": {\n            \"type\": \"string\",\n            \"example\": \"smtp.gmail.com\"\n          },\n          \"port\": {\n            \"type\": \"string\",\n            \"example\": 465\n          },\n          \"secure\": {\n            \"type\": \"boolean\",\n            \"example\": true\n          },\n          \"dname\": {\n            \"type\": \"string\"\n          },\n          \"topic\": {\n            \"type\": \"string\",\n            \"example\": \"tweets\"\n          },\n          \"payload\": {\n            \"type\": \"string\"\n          },\n          \"payloadType\": {\n            \"type\": \"string\",\n            \"example\": \"date\"\n          },\n          \"repeat\": {\n            \"type\": \"string\"\n          },\n          \"crontab\": {\n            \"type\": \"string\"\n          },\n          \"once\": {\n            \"type\": \"string\"\n          },\n          \"onceDelay\": {\n            \"type\": \"string\"\n          },\n          \"inputs\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 0\n          },\n          \"x\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 150\n          },\n          \"y\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\",\n            \"example\": 120\n          },\n          \"wires\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\",\n                \"example\": \"c648a579.645268\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"externalDocs\": {\n    \"description\": \"Process Loader home page\",\n    \"url\": \"http://processloader.snap4city.org\"\n  }\n}"
		}
	},
	"Error": "parse: parse spec: paths: /download.php: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: file_metadata: parse schema: reference \"#components/schemas/metadata\": resolve reference \"#components/schemas/metadata\": invalid schema reference \"#components/schemas/metadata\""
}