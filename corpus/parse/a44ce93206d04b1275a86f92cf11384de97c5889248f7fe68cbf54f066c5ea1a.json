{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Podcastindex-org/docs-api"
		},
		"file": {
			"name": "pi_api.json",
			"size": 0,
			"path": "docs/pi_api.json",
			"byteSize": 140376,
			"content": "{\n  \"openapi\": \"3.0.2\",\n  \"info\": {\n    \"version\": \"1.7.2\",\n    \"title\": \"PodcastIndex.org API\",\n    \"termsOfService\": \"https://github.com/Podcastindex-org/legal/blob/main/TermsOfService.md\",\n    \"contact\": {\n      \"email\": \"info@podcastindex.org\",\n      \"url\": \"https://podcastindex.org/\"\n    },\n    \"license\": {\n      \"name\": \"MIT\",\n      \"url\": \"https://github.com/Podcastindex-org/docs-api/blob/master/LICENSE\"\n    },\n    \"x-logo\": {\n      \"url\": \"logo.svg\",\n      \"href\": \"/\"\n    },\n    \"description\": \"Download the openapi spec in [json](pi_api.json) or [yaml](pi_api.yaml) format.\\n# Overview\\nThe Podcast Index (Podcast Index LLC) is a software developer focused partnership that provides tools and data to anyone who aspires to create new and exciting Podcast experiences without the heavy lifting of indexing, aggregation and data management.\\n# Example Code\\nUsers have provided example code for working the API in the following languages:\\n\\n  - [AWS Lambda - python](https://github.com/tbowers/python-podcastindex-org-lambda)\\n  - [Bash](https://github.com/suorcd/Bash-podcastindex-org-example)\\n  - [C#](https://github.com/ComicStrip/csharp-podcastindex-org-example)\\n  - [Elisp](https://github.com/sabexx/elisp-example)\\n  - [Flutter/Dart](https://github.com/crediblecreative/flutter-dart-podcastindex-org-example)\\n  - [Go](https://github.com/ComicStrip/Go-podcastindex-org-example)\\n  - [Go](https://github.com/kilobit/podcast-index-client)\\n  - [Java](https://github.com/ComicStrip/Java-podcastindex-org-example)\\n  - [Java](https://github.com/stucoates/PodcastIndexJavaClient)\\n  - [Node.js](https://github.com/ComicStrip/node.js-podcastindex-org-example)\\n  - [PHP](https://github.com/Podcastindex-org/example-code)\\n  - [Python](https://github.com/tbowers/python-podcastindex-org-example)\\n  - [Swift](https://github.com/ComicStrip/Swift-podcastindex-org-example)\\n  - ... [More](https://github.com/Podcastindex-org-Examples)\\n\\nDon't see your desired language, create an example repo and create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to your example code project!\\n# Libraries\\nUser created libraries for working with the API:\\n\\n  - Node.js/npm/yarn\\n      - [podcast-index-api](https://www.npmjs.com/package/podcast-index-api)\\n      - [podcastdx-client](https://www.npmjs.com/package/podcastdx-client)\\n  - Python/pip\\n      - [python-podcastindex](https://pypi.org/project/python-podcastindex/)\\n  - .NET\\n      - [PodcastIndexSharp](https://www.nuget.org/packages/PodcastIndexSharp)\\n\\nAre we missing a library? Did you create one for a different language? Create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to the new library!\\n# Postman\\nA collection file for use in the [Postman](https://www.postman.com/) application is available for this API.\\n\\n  1. Download the contents of the [Postman Docs](https://github.com/Podcastindex-org/docs-api/tree/master/Postman%20Docs) folder.\\n  2. Import the `PodcastIndex.postman_collection.json` collection to Postman\\n  3. Import the `PodcastIndexOrgEnvironment.postman_environment.json` to Postman\\n  4. Set the `AuthKey` environment variable\\n  5. Set the `SecretKey` environment variable\\n  6. Hit the Send button (⌘ + return)\\n\\n# Contributing\\nThe source for this API documentation is available at [https://github.com/Podcastindex-org/docs-api](https://github.com/Podcastindex-org/docs-api). Submit an Issue or create a Pull Request.\\n# Authentication Details\\nSending an API request is easy. We use an Amazon-style request authorization token to secure each request.\\n\\nRegister for a free API key at https://api.podcastindex.org/\\n\\nThese headers parameters are required for each request: `User-Agent`, `X-Auth-Date`, `X-Auth-Key`, `Authorization`\\n\\nSee [Authentication](#auth) for description of parameters.\\n# Legal\\nLegal\\n\\n  - [Privacy Policy](https://github.com/Podcastindex-org/legal/blob/main/PrivacyPolicy.md)\\n  - [Terms of Service](https://github.com/Podcastindex-org/legal/blob/main/TermsOfService.md)\\n  - [License](https://github.com/Podcastindex-org/docs-api/blob/master/LICENSE)\\n\"\n  },\n  \"tags\": [\n    {\n      \"name\": \"Search\",\n      \"description\": \"Search the index\\n\"\n    },\n    {\n      \"name\": \"Podcasts\",\n      \"description\": \"Find details about a Podcast and its feed.\\n\"\n    },\n    {\n      \"name\": \"Episodes\",\n      \"description\": \"Find details about one or more episodes of a podcast or podcasts.\\n\"\n    },\n    {\n      \"name\": \"Recent\",\n      \"description\": \"Find recent additions to the index\\n\"\n    },\n    {\n      \"name\": \"Value\",\n      \"description\": \"The podcast's \\\"Value for Value\\\" information\\n\"\n    },\n    {\n      \"name\": \"Stats\",\n      \"description\": \"Statistics for items in the Podcast Index\\n\"\n    },\n    {\n      \"name\": \"Categories\",\n      \"description\": \"Categories used by the Podcast Index\\n\"\n    },\n    {\n      \"name\": \"Hub\",\n      \"description\": \"Notify the index that a feed has changed\\n\"\n    },\n    {\n      \"name\": \"Add\",\n      \"description\": \"Add new podcast feeds to the index.\\n\\n**NOTE**: To add to the index, the API Key must have write or publisher permissions.\\n\"\n    }\n  ],\n  \"servers\": [\n    {\n      \"url\": \"https://api.podcastindex.org/api/1.0\"\n    }\n  ],\n  \"components\": {\n    \"securitySchemes\": {\n      \"User Agent\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"User-Agent\",\n        \"description\": \"Please identify the system/product you are using to make this request.\\n\\n*Example*: `SuperPodcastPlayer/1.3`\\n\"\n      },\n      \"API Key\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"X-Auth-Key\",\n        \"description\": \"Your API key string\\n\\n*Example*: `UXKCGDSYGUUEVQJSYDZH`\\n\"\n      },\n      \"Date\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"X-Auth-Date\",\n        \"description\": \"The current UTC unix epoch time as a string. 3 minute window.\\n\\nThis value is an integer; round down if needed. The value shall not include a decimal point.\\n\\nValue generated should match the value shown on the website https://www.epochconverter.com/.\\n\\n*Example*: `1613713388`\\n\"\n      },\n      \"Authorization\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"Authorization\",\n        \"description\": \"A SHA-1 hash of the `X-Auth-Key`, the corresponding secret and the `X-Auth-Date` value concatenated as a string. The resulting hash should be encoded as a hexadecimal value, two digits per byte, using lower case letters for the hex digits \\\"a\\\" through \\\"f\\\".\\n\\nThe Authorization header is computed with something like this (pseudo-code):\\n\\n    authHeader = sha1(apiKey+apiSecret+unixTime)\\n\\nExample value, uses example values of `X-Auth-Key` and `X-Auth-Date` and an api secret of `yzJe2eE7XV-3eY576dyRZ6wXyAbndh6LUrCZ8KN|`\\n\\n*Example*: `UXKCGDSYGUUEVQJSYDZH`\\n\"\n      }\n    },\n    \"parameters\": {\n      \"q\": {\n        \"name\": \"q\",\n        \"in\": \"query\",\n        \"description\": \"Terms to search for\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"batman university\"\n      },\n      \"val\": {\n        \"name\": \"val\",\n        \"in\": \"query\",\n        \"description\": \"Only returns feeds with a `value` block of the specified type. Use `any` to return feeds with any `value` block.\\n\",\n        \"schema\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"any\",\n            \"lightning\",\n            \"hive\",\n            \"webmonetization\"\n          ]\n        },\n        \"example\": \"\"\n      },\n      \"clean\": {\n        \"name\": \"clean\",\n        \"in\": \"query\",\n        \"description\": \"If present, only non-explicit feeds will be returned. Meaning, feeds where the `itunes:explicit` flag is set to `false`.\\n\\nParameter shall not have a value\\n\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        },\n        \"allowEmptyValue\": true\n      },\n      \"fulltext\": {\n        \"name\": \"fulltext\",\n        \"in\": \"query\",\n        \"description\": \"If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\\n\\nParameter shall not have a value\\n\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        },\n        \"allowEmptyValue\": true\n      },\n      \"pretty\": {\n        \"name\": \"pretty\",\n        \"in\": \"query\",\n        \"description\": \"If present, makes the output “pretty” to help with debugging.\\n\\nParameter shall not have a value\\n\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        },\n        \"allowEmptyValue\": true\n      },\n      \"q_person\": {\n        \"name\": \"q\",\n        \"in\": \"query\",\n        \"description\": \"Person search for\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"adam curry\"\n      },\n      \"id_feed_podcast_pi\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The PodcastIndex Feed ID\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 75075\n      },\n      \"url\": {\n        \"name\": \"url\",\n        \"in\": \"query\",\n        \"description\": \"Podcast feed URL\\n\",\n        \"required\": true,\n        \"allowReserved\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"https://feeds.theincomparable.com/batmanuniversity\"\n      },\n      \"id_feed_podcast_itunes\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The iTunes Feed ID to search for\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"examples\": {\n          \"id_only\": {\n            \"value\": 1441923632,\n            \"description\": \"iTunes ID without any prefix\"\n          },\n          \"prefix\": {\n            \"value\": \"id1441923632\",\n            \"description\": \"iTunes ID with optional \\\"id\\\" prefix\"\n          }\n        }\n      },\n      \"guid_feed_podcast\": {\n        \"name\": \"guid\",\n        \"in\": \"query\",\n        \"description\": \"The GUID from the `podcast:guid` tag in the feed. This value is a unique, global identifier for the podcast.\\n\\nSee the namespace spec for [guid](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#guid) for details.\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"9b024349-ccf0-5f69-a609-6b82873eab3c\"\n      },\n      \"podcast-value\": {\n        \"name\": \"podcast-value\",\n        \"in\": \"query\",\n        \"description\": \"Get feeds supporting the `value` tag.\\n\\nParameter shall not have a value\\n\",\n        \"schema\": {\n          \"type\": \"boolean\"\n        },\n        \"allowEmptyValue\": true,\n        \"required\": true\n      },\n      \"max\": {\n        \"name\": \"max\",\n        \"in\": \"query\",\n        \"description\": \"Maximum number of results to return.\\n\",\n        \"schema\": {\n          \"type\": \"integer\",\n          \"minimum\": 1,\n          \"maximum\": 1000\n        },\n        \"example\": 10\n      },\n      \"since\": {\n        \"name\": \"since\",\n        \"in\": \"query\",\n        \"description\": \"Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\\n\",\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"examples\": {\n          \"timestamp\": {\n            \"value\": 1612125785,\n            \"description\": \"Unix timestamp\"\n          },\n          \"seconds\": {\n            \"value\": -100000,\n            \"description\": \"Seconds from now\"\n          }\n        }\n      },\n      \"lang\": {\n        \"name\": \"lang\",\n        \"in\": \"query\",\n        \"description\": \"Specifying a language code (like \\\"en\\\") will return only episodes having that specific language.\\n\\nYou can specify multiple languages by separating them with commas.\\n\\nIf you also want to return episodes that have no language given, use the token \\\"unknown\\\". (ex. en,es,ja,unknown).\\n\\nValues are not case sensitive.\\n\",\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"examples\": {\n          \"single\": {\n            \"value\": \"en\",\n            \"description\": \"Single ID\"\n          },\n          \"multiple\": {\n            \"value\": \"en,es\",\n            \"description\": \"Multiple IDs\"\n          }\n        }\n      },\n      \"cat\": {\n        \"name\": \"cat\",\n        \"in\": \"query\",\n        \"description\": \"Use this argument to specify that you **ONLY** want episodes with these categories in the results.\\n\\nSeparate multiple categories with commas.\\n\\nYou may specify either the Category ID and/or the Category Name.\\n\\nValues are not case sensitive.\\n\\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\\n\\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\\n\",\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"examples\": {\n          \"single_name\": {\n            \"value\": \"News\",\n            \"description\": \"Single Category Name\"\n          },\n          \"single_id\": {\n            \"value\": 65,\n            \"description\": \"Single Category ID\"\n          },\n          \"multiple_name\": {\n            \"value\": \"News,Religion\",\n            \"description\": \"Multiple Category Names\"\n          },\n          \"multiple_id_\": {\n            \"value\": \"55,65\",\n            \"description\": \"Multiple Category IDs\"\n          },\n          \"multiple_mixed\": {\n            \"value\": \"News,65\",\n            \"description\": \"Multiple Categories Mixed Format\"\n          }\n        }\n      },\n      \"notcat\": {\n        \"name\": \"notcat\",\n        \"in\": \"query\",\n        \"description\": \"Use this argument to specify categories of episodes to **NOT** show in the results.\\n\\nSeparate multiple categories with commas.\\n\\nYou may specify either the Category ID and/or the Category Name.\\n\\nValues are not case sensitive.\\n\\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\\n\\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\\n\",\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"examples\": {\n          \"single_name\": {\n            \"value\": \"News\",\n            \"description\": \"Single Category Name\"\n          },\n          \"single_id\": {\n            \"value\": 65,\n            \"description\": \"Single Category ID\"\n          },\n          \"multiple_name\": {\n            \"value\": \"News,Religion\",\n            \"description\": \"Multiple Category Names\"\n          },\n          \"multiple_id_\": {\n            \"value\": \"55,65\",\n            \"description\": \"Multiple Category IDs\"\n          },\n          \"multiple_mixed\": {\n            \"value\": \"News,65\",\n            \"description\": \"Multiple Categories Mixed Format\"\n          }\n        }\n      },\n      \"id_feed_episode_pi\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The PodcastIndex Feed ID or IDs to search for.\\n\\nIf searching for multiple IDs, separate values with a comma. A maximum of 200 IDs can be provided.\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"examples\": {\n          \"single\": {\n            \"value\": 75075,\n            \"description\": \"Single ID\"\n          },\n          \"multiple\": {\n            \"value\": \"41504,920666\",\n            \"description\": \"Multiple IDs\"\n          }\n        }\n      },\n      \"id_episode_pi\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The PodcastIndex episode ID to search for.\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 16795089\n      },\n      \"guid_episode\": {\n        \"name\": \"guid\",\n        \"in\": \"query\",\n        \"description\": \"The guid value for the episode to retrieve.\\n\\n\\n  This value is the value specified in the feed's `\u003cguid\u003e` field.\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"PC2084\"\n      },\n      \"feedurl\": {\n        \"name\": \"feedurl\",\n        \"in\": \"query\",\n        \"description\": \"The Feed URL\\n\",\n        \"required\": false,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"http://mp3s.nashownotes.com/pc20rss.xml\"\n      },\n      \"feedid\": {\n        \"name\": \"feedid\",\n        \"in\": \"query\",\n        \"description\": \"The PodcastIndex Feed ID\\n\",\n        \"required\": false,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"920666\"\n      },\n      \"max_random\": {\n        \"name\": \"max\",\n        \"in\": \"query\",\n        \"description\": \"Maximum number of results to return.\\n\",\n        \"schema\": {\n          \"type\": \"integer\",\n          \"default\": 1,\n          \"minimum\": 1,\n          \"maximum\": 1000\n        },\n        \"example\": 2\n      },\n      \"max_recent_episodes\": {\n        \"name\": \"max\",\n        \"in\": \"query\",\n        \"description\": \"Maximum number of results to return.\\n\",\n        \"schema\": {\n          \"type\": \"integer\",\n          \"default\": 10,\n          \"minimum\": 1,\n          \"maximum\": 1000\n        },\n        \"example\": 7\n      },\n      \"excludeString\": {\n        \"name\": \"excludeString\",\n        \"in\": \"query\",\n        \"description\": \"Any item containing this string will be discarded from the result set.\\n\\nThis may, in certain cases, reduce your set size below your `max` value.\\n\\nMatches against the `title` and URL properties.\\n\",\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"religion\"\n      },\n      \"before\": {\n        \"name\": \"before\",\n        \"in\": \"query\",\n        \"description\": \"If you pass a PodcastIndex Episode ID, you will get recent episodes before that ID, allowing you to walk back through the episode history sequentially.\\n\",\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 1721351091\n      },\n      \"max_recent_feeds\": {\n        \"name\": \"max\",\n        \"in\": \"query\",\n        \"description\": \"Maximum number of results to return.\\n\",\n        \"schema\": {\n          \"type\": \"integer\",\n          \"default\": 40,\n          \"minimum\": 1,\n          \"maximum\": 1000\n        },\n        \"example\": 20\n      },\n      \"max_recent_soundbites\": {\n        \"name\": \"max\",\n        \"in\": \"query\",\n        \"description\": \"Maximum number of soundbites to return.\\n\",\n        \"schema\": {\n          \"type\": \"integer\",\n          \"default\": 60,\n          \"minimum\": 1,\n          \"maximum\": 1000\n        },\n        \"example\": 20\n      },\n      \"id_feed_episode_pi_single\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The PodcastIndex Feed ID to search for.\\n\",\n        \"required\": true,\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 75075\n      },\n      \"id_feed_podcast_pi_pubnotify\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The PodcastIndex Feed ID\\n\\nThe `id` or the `url` is required.\\n\",\n        \"required\": false,\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 75075\n      },\n      \"url_pubnotify\": {\n        \"name\": \"url\",\n        \"in\": \"query\",\n        \"description\": \"Podcast feed URL\\n\\nThe `id` or the `url` is required.\\n\",\n        \"required\": false,\n        \"allowReserved\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"https://feeds.theincomparable.com/batmanuniversity\"\n      },\n      \"chash\": {\n        \"name\": \"chash\",\n        \"in\": \"query\",\n        \"description\": \"The md5 hash of the following feed items in hex format. If known, allows for easier duplicate checking.\\n\\n  - `title`\\n  - `link`\\n  - `feedLanguage`\\n  - `generator`\\n  - `author`\\n  - `ownerName`\\n  - `ownerEmail` (note: not exposed via the API)\\n\\nPseudo-code:\\n\\n      chash = md5(title+link+feedLanguage+generator+author+ownerName+ownerEmail)\\n\",\n        \"required\": true,\n        \"allowReserved\": true,\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"ad651c60eaaf3344595c0dd0bd787993\"\n      },\n      \"itunesid\": {\n        \"name\": \"itunesid\",\n        \"in\": \"query\",\n        \"description\": \"If this parameter is given, and the existing feed has no associated iTunes ID, it will be associated with this ID. If an existing iTunes ID is already associated with this feed it will **NOT** be changed.\\n\",\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 1441923632\n      },\n      \"id_itunes_add\": {\n        \"name\": \"id\",\n        \"in\": \"query\",\n        \"description\": \"The iTunes ID to add\\n\",\n        \"schema\": {\n          \"type\": \"integer\"\n        },\n        \"example\": 1441923632\n      }\n    },\n    \"schemas\": {\n      \"status\": {\n        \"description\": \"Indicates API request status\\n\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"true\",\n          \"false\"\n        ],\n        \"example\": \"true\"\n      },\n      \"id_feed\": {\n        \"description\": \"The internal PodcastIndex.org Feed ID.\\n\",\n        \"type\": \"integer\",\n        \"example\": 75075\n      },\n      \"title_feed\": {\n        \"description\": \"Name of the feed\\n\",\n        \"type\": \"string\",\n        \"example\": \"Batman University\"\n      },\n      \"url_feed\": {\n        \"description\": \"Current feed URL\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://feeds.theincomparable.com/batmanuniversity\"\n      },\n      \"originalUrl\": {\n        \"description\": \"The URL of the feed, before it changed to the current `url` value.\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://feeds.theincomparable.com/batmanuniversity\"\n      },\n      \"link_feed\": {\n        \"description\": \"The channel-level link in the feed\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://www.theincomparable.com/batmanuniversity/\"\n      },\n      \"description_feed\": {\n        \"description\": \"The channel-level description\\n\",\n        \"type\": \"string\",\n        \"example\": \"Batman University is a seasonal podcast about you know who. It began with an analysis of episodes of “Batman: The Animated Series” but has now expanded to cover other series, movies, and media. Your professor is Tony Sindelar.\"\n      },\n      \"author\": {\n        \"description\": \"The channel-level author element.\\n\\nUsually iTunes specific, but could be from another namespace if not present.\\n\",\n        \"type\": \"string\",\n        \"example\": \"Tony Sindelar\"\n      },\n      \"ownerName\": {\n        \"description\": \"The channel-level owner:name element.\\n\\nUsually iTunes specific, but could be from another namespace if not present.\\n\",\n        \"type\": \"string\",\n        \"example\": \"The Incomparable\"\n      },\n      \"image_feed\": {\n        \"description\": \"The channel-level image element.\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://www.theincomparable.com/imgs/logos/logo-batmanuniversity-3x.jpg?cache-buster=2019-06-11\"\n      },\n      \"artwork\": {\n        \"description\": \"The seemingly best artwork we can find for the feed.\\nMight be the same as `image` in most instances.\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://www.theincomparable.com/imgs/logos/logo-batmanuniversity-3x.jpg?cache-buster=2019-06-11\"\n      },\n      \"lastUpdateTime\": {\n        \"description\": \"The channel-level pubDate for the feed, if it’s sane.\\nIf not, this is a heuristic value, arrived at by analyzing other parts of the feed, like item-level pubDates.\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1613394044\n      },\n      \"lastCrawlTime\": {\n        \"description\": \"The last time we attempted to pull this feed from its url.\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1613394034\n      },\n      \"lastParseTime\": {\n        \"description\": \"The last time we tried to parse the downloaded feed content.\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1613394045\n      },\n      \"lastGoodHttpStatusTime\": {\n        \"description\": \"Timestamp of the last time we got a \\\"good\\\", meaning non-4xx/non-5xx, status code when pulling this feed from its url.\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1613394034\n      },\n      \"lastHttpStatus\": {\n        \"description\": \"The last http status code we got when pulling this feed from its url.\\n\\nYou will see some made up status codes sometimes. These are what we use to track state within the feed puller. These all start with 9xx.\\n\",\n        \"type\": \"integer\",\n        \"example\": 200\n      },\n      \"contentType\": {\n        \"description\": \"The Content-Type header from the last time we pulled this feed from its url.\\n\",\n        \"type\": \"string\",\n        \"example\": \"application/rss+xml\"\n      },\n      \"itunesId_feed\": {\n        \"description\": \"The iTunes ID of this feed if there is one, and we know what it is.\\n\",\n        \"type\": \"integer\",\n        \"example\": 1441923632\n      },\n      \"generator\": {\n        \"description\": \"The channel-level generator element if there is one.\\n\",\n        \"type\": \"string\",\n        \"example\": \"my podcast host\"\n      },\n      \"language\": {\n        \"description\": \"The channel-level language specification of the feed.\\nLanguages accord with the [RSS Language Spec](https://www.rssboard.org/rss-language-codes).\\n\",\n        \"type\": \"string\",\n        \"example\": \"en-us\"\n      },\n      \"type\": {\n        \"description\": \"Type of source feed where:\\n\\n  - 0: RSS\\n  - 1: Atom\\n\",\n        \"type\": \"integer\",\n        \"enum\": [\n          0,\n          1\n        ],\n        \"example\": 0\n      },\n      \"dead\": {\n        \"description\": \"At some point, we give up trying to process a feed and mark it as dead. This is usually after 1000 errors without a successful pull/parse cycle. Once the feed is marked dead, we only check it once per month.\\n\",\n        \"type\": \"integer\",\n        \"example\": 0\n      },\n      \"crawlErrors\": {\n        \"description\": \"The number of errors we’ve encountered trying to pull a copy of the feed. Errors are things like a 500 or 404 response, a server timeout, bad encoding, etc.\\n\",\n        \"type\": \"integer\",\n        \"example\": 0\n      },\n      \"parseErrors\": {\n        \"description\": \"The number of errors we’ve encountered trying to parse the feed content. Errors here are things like not well-formed xml, bad character encoding, etc.\\n\\nWe fix many of these types of issues on the fly when parsing. We only increment the errors count when we can’t fix it.\\n\",\n        \"type\": \"integer\",\n        \"example\": 0\n      },\n      \"categories\": {\n        \"description\": \"An array of categories, where the index is the Category ID and the value is the Category Name.\\n\\nAll Category numbers and names are returned by the `categories/list` endpoint.\\n\",\n        \"type\": \"object\",\n        \"example\": {\n          \"104\": \"Tv\",\n          \"105\": \"Film\",\n          \"107\": \"Reviews\"\n        }\n      },\n      \"locked\": {\n        \"description\": \"Tell other podcast platforms whether they are allowed to import this feed. A value of 1 means that any attempt to import this feed into a new platform should be rejected.\\nContains the value of the feed's channel-level `podcast:locked` tag where:\\n\\n  - 0: 'no'\\n  - 1: 'yes'\\n\",\n        \"type\": \"integer\",\n        \"enum\": [\n          0,\n          1\n        ],\n        \"example\": 0\n      },\n      \"imageUrlHash\": {\n        \"description\": \"A CRC32 hash of the `image` URL with the protocol (`http://`, `https://`) removed. Can be used to retrieve a resized/converted version of the image specified by `image` from https://podcastimages.com/.\\n\\nUsing the format: `https://podcastimages.com/\u003chash\u003e_\u003csize\u003e.jpg` Replace `\u003chash\u003e` with the value in this field. The `\u003csize\u003e` is the desired image width/height. Ex: `https://podcastimages.com/1011338142_600.jpg`\\n\\n**Work in Progress**: the `podcastimages.com` system is currently not working.\\n\",\n        \"type\": \"integer\",\n        \"example\": 1639321931\n      },\n      \"feed_search\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          },\n          \"originalUrl\": {\n            \"$ref\": \"#/components/schemas/originalUrl\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_feed\"\n          },\n          \"author\": {\n            \"$ref\": \"#/components/schemas/author\"\n          },\n          \"ownerName\": {\n            \"$ref\": \"#/components/schemas/ownerName\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"artwork\": {\n            \"$ref\": \"#/components/schemas/artwork\"\n          },\n          \"lastUpdateTime\": {\n            \"$ref\": \"#/components/schemas/lastUpdateTime\"\n          },\n          \"lastCrawlTime\": {\n            \"$ref\": \"#/components/schemas/lastCrawlTime\"\n          },\n          \"lastParseTime\": {\n            \"$ref\": \"#/components/schemas/lastParseTime\"\n          },\n          \"lastGoodHttpStatusTime\": {\n            \"$ref\": \"#/components/schemas/lastGoodHttpStatusTime\"\n          },\n          \"lastHttpStatus\": {\n            \"$ref\": \"#/components/schemas/lastHttpStatus\"\n          },\n          \"contentType\": {\n            \"$ref\": \"#/components/schemas/contentType\"\n          },\n          \"itunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"generator\": {\n            \"$ref\": \"#/components/schemas/generator\"\n          },\n          \"language\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"type\": {\n            \"$ref\": \"#/components/schemas/type\"\n          },\n          \"dead\": {\n            \"$ref\": \"#/components/schemas/dead\"\n          },\n          \"crawlErrors\": {\n            \"$ref\": \"#/components/schemas/crawlErrors\"\n          },\n          \"parseErrors\": {\n            \"$ref\": \"#/components/schemas/parseErrors\"\n          },\n          \"categories\": {\n            \"$ref\": \"#/components/schemas/categories\"\n          },\n          \"locked\": {\n            \"$ref\": \"#/components/schemas/locked\"\n          },\n          \"imageUrlHash\": {\n            \"$ref\": \"#/components/schemas/imageUrlHash\"\n          }\n        }\n      },\n      \"feeds\": {\n        \"description\": \"List of feeds matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/feed_search\"\n        }\n      },\n      \"count\": {\n        \"description\": \"Number of items returned in request\\n\",\n        \"type\": \"integer\",\n        \"example\": 1\n      },\n      \"query_search\": {\n        \"description\": \"Search terms passed to request\\n\",\n        \"type\": \"string\",\n        \"example\": \"batman university\"\n      },\n      \"description_response\": {\n        \"description\": \"Description of the response\\n\",\n        \"type\": \"string\",\n        \"example\": \"Found matching feed\"\n      },\n      \"id_episode\": {\n        \"description\": \"The internal PodcastIndex.org episode ID.\\n\",\n        \"type\": \"integer\",\n        \"example\": 16795088\n      },\n      \"description_episode\": {\n        \"description\": \"The item-level description of the episode\\n\",\n        \"type\": \"string\",\n        \"example\": \"Batman University is back in session! James Thomson and Nathan Alderman join Tony for a discussion of Fox’s “Gotham.” Tune in to hear our thoughts on how a half-baked comic book show was reborn into an unmissable train wreck.\"\n      },\n      \"guid\": {\n        \"description\": \"The unique identifier for the episode\\n\",\n        \"type\": \"string\",\n        \"example\": \"incomparable/batman/19\"\n      },\n      \"datePublished\": {\n        \"description\": \"The date and time the episode was published\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1546399813\n      },\n      \"dateCrawled\": {\n        \"description\": \"The time this episode was found in the feed\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1598369047\n      },\n      \"enclosureUrl\": {\n        \"description\": \"URL/link to the episode file\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://www.theincomparable.com/podcast/batmanuniversity302.mp3\"\n      },\n      \"enclosureType\": {\n        \"description\": \"The Content-Type for the item specified by the `enclosureUrl`\\n\",\n        \"type\": \"string\",\n        \"example\": \"audio/mp3\"\n      },\n      \"enclosureLength\": {\n        \"description\": \"The length of the item specified by the `enclosureUrl` in bytes\\n\",\n        \"type\": \"integer\",\n        \"format\": \"bytes\",\n        \"example\": 26385472\n      },\n      \"duration\": {\n        \"description\": \"The estimated length of the item specified by the `enclosureUrl` in seconds\\n\",\n        \"type\": \"integer\",\n        \"format\": \"seconds\",\n        \"example\": 54\n      },\n      \"explicit\": {\n        \"description\": \"Is episode marked as explicit\\n\\n  - 0: not marked explicit\\n  - 1: marked explicit\\n\",\n        \"type\": \"integer\",\n        \"enum\": [\n          0,\n          1\n        ],\n        \"example\": 0\n      },\n      \"episode_number\": {\n        \"description\": \"Episode number\\n\",\n        \"type\": \"integer\",\n        \"example\": 19\n      },\n      \"episodeType\": {\n        \"description\": \"The type of episode\\n\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"full\",\n          \"trailer\",\n          \"bonus\"\n        ],\n        \"example\": \"full\"\n      },\n      \"season\": {\n        \"description\": \"Season number\\n\",\n        \"type\": \"integer\",\n        \"example\": 3\n      },\n      \"image_episode\": {\n        \"description\": \"The item-level image for the episode\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://www.theincomparable.com/imgs/logos/logo-batmanuniversity-3x.jpg?cache-buster=2019-06-11\"\n      },\n      \"chaptersUrl\": {\n        \"description\": \"Link to the JSON file containing the episode chapters\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://studio.hypercatcher.com/chapters/podcast/http:feed.nashownotes.comrss.xml/episode/http:1322.noagendanotes.com\"\n      },\n      \"transcript\": {\n        \"description\": \"This tag is used to link to a transcript or closed captions file. Multiple tags can be present for multiple transcript formats.\\nDetailed file format information and example files are [here](https://github.com/Podcastindex-org/podcast-namespace/blob/main/transcripts/transcripts.md).\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"url\": {\n            \"description\": \"URL of the podcast transcript.\",\n            \"type\": \"string\",\n            \"format\": \"URL\",\n            \"example\": \"https://mp3s.nashownotes.com/NA-1385-Captions.srt\"\n          },\n          \"type\": {\n            \"description\": \"Mime type of the file such as `text/plain`, `text/html`, `application/srt`, `text/vtt`, `application/json`\\n\",\n            \"type\": \"string\",\n            \"enum\": [\n              \"application/json\",\n              \"application/srt\",\n              \"text/html\",\n              \"text/plain\",\n              \"text/srt\",\n              \"text/vtt\"\n            ],\n            \"example\": \"application/srt\"\n          }\n        }\n      },\n      \"transcripts\": {\n        \"description\": \"List of transcripts for the episode.\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/transcript\"\n        }\n      },\n      \"item_search_byperson\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_episode\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_episode\"\n          },\n          \"guid\": {\n            \"$ref\": \"#/components/schemas/guid\"\n          },\n          \"datePublished\": {\n            \"$ref\": \"#/components/schemas/datePublished\"\n          },\n          \"dateCrawled\": {\n            \"$ref\": \"#/components/schemas/dateCrawled\"\n          },\n          \"enclosureUrl\": {\n            \"$ref\": \"#/components/schemas/enclosureUrl\"\n          },\n          \"enclosureType\": {\n            \"$ref\": \"#/components/schemas/enclosureType\"\n          },\n          \"enclosureLength\": {\n            \"$ref\": \"#/components/schemas/enclosureLength\"\n          },\n          \"duration\": {\n            \"$ref\": \"#/components/schemas/duration\"\n          },\n          \"explicit\": {\n            \"$ref\": \"#/components/schemas/explicit\"\n          },\n          \"episode\": {\n            \"$ref\": \"#/components/schemas/episode_number\"\n          },\n          \"episodeType\": {\n            \"$ref\": \"#/components/schemas/episodeType\"\n          },\n          \"season\": {\n            \"$ref\": \"#/components/schemas/season\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_episode\"\n          },\n          \"feedItunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"feedImage\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"feedId\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"feedUrl\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          },\n          \"feedAuthor\": {\n            \"$ref\": \"#/components/schemas/author\"\n          },\n          \"feedTitle\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"feedLanguage\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"chaptersUrl\": {\n            \"$ref\": \"#/components/schemas/chaptersUrl\"\n          },\n          \"transcripts\": {\n            \"$ref\": \"#/components/schemas/transcripts\"\n          }\n        }\n      },\n      \"items_byperson\": {\n        \"description\": \"List of episodes matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/item_search_byperson\"\n        }\n      },\n      \"id_query\": {\n        \"description\": \"Value passed to request in the `id` field\\n\",\n        \"type\": \"string\",\n        \"example\": \"920666\"\n      },\n      \"query_id\": {\n        \"description\": \"Object containing the input query data\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_query\"\n          }\n        }\n      },\n      \"podcastGuid\": {\n        \"description\": \"The GUID from the `podcast:guid` tag in the feed. This value is a unique, global identifier for the podcast.\\n\\nSee the namespace spec for [guid](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#guid) for details.\\n\",\n        \"type\": \"string\",\n        \"example\": \"9b024349-ccf0-5f69-a609-6b82873eab3c\"\n      },\n      \"chash\": {\n        \"description\": \"The md5 hash of the following feed items in hex format.\\n\\n  - `title`\\n  - `link`\\n  - `feedLanguage`\\n  - `generator`\\n  - `author`\\n  - `ownerName`\\n  - `ownerEmail` (note: not exposed via the API)\\n\\nPseudo-code:\\n\\n      chash = md5(title+link+feedLanguage+generator+author+ownerName+ownerEmail)\\n\",\n        \"type\": \"string\",\n        \"example\": \"ad651c60eaaf3344595c0dd0bd787993\"\n      },\n      \"episodeCount\": {\n        \"description\": \"Number of episodes for this feed known to the index.\\n\",\n        \"type\": \"integer\",\n        \"example\": 19\n      },\n      \"type_v4v\": {\n        \"description\": \"Payment type\\n\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"lightning\",\n          \"hive\",\n          \"webmonetization\"\n        ],\n        \"example\": \"lightning\"\n      },\n      \"method_v4v\": {\n        \"description\": \"Method for sending payment\\n\",\n        \"type\": \"string\",\n        \"example\": \"keysend\"\n      },\n      \"suggested_v4v\": {\n        \"description\": \"Suggested amount per second of playback to send. Unit is specific to the `type`.\\n\",\n        \"type\": \"string\",\n        \"example\": \"0.00000020000\"\n      },\n      \"model_v4v\": {\n        \"description\": \"Description of the method for providing \\\"Value for Value\\\" payments\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"type\": {\n            \"$ref\": \"#/components/schemas/type_v4v\"\n          },\n          \"method\": {\n            \"$ref\": \"#/components/schemas/method_v4v\"\n          },\n          \"suggested\": {\n            \"$ref\": \"#/components/schemas/suggested_v4v\"\n          }\n        }\n      },\n      \"name_destination\": {\n        \"description\": \"Name for the destination\\n\",\n        \"type\": \"string\",\n        \"example\": \"podcaster\"\n      },\n      \"address_destination\": {\n        \"description\": \"Address of node to receive payment\\n\",\n        \"type\": \"string\",\n        \"example\": \"03ae9f91a0cb8ff43840e3c322c4c61f019d8c1c3cea15a25cfc425ac605e61a4a\"\n      },\n      \"type_destination\": {\n        \"description\": \"Type of destination\\n\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"node\"\n        ],\n        \"example\": \"node\"\n      },\n      \"split_destination\": {\n        \"description\": \"Share of payment the destination should receive\\n\",\n        \"type\": \"integer\",\n        \"example\": 99\n      },\n      \"fee_destination\": {\n        \"description\": \"Indicates if destination is included due to a fee being charged\\n\",\n        \"type\": \"boolean\",\n        \"example\": true\n      },\n      \"customKey\": {\n        \"description\": \"The name of a custom record key to send along with the payment.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#value) and [value specification](https://github.com/Podcastindex-org/podcast-namespace/blob/main/value/value.md) for more information.\\n\",\n        \"type\": \"string\",\n        \"example\": \"112111100\"\n      },\n      \"customValue\": {\n        \"description\": \"A custom value to pass along with the payment. This is considered the value that belongs to the customKey.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#value) and [value specification](https://github.com/Podcastindex-org/podcast-namespace/blob/main/value/value.md) for more information.\\n\",\n        \"type\": \"string\",\n        \"example\": \"wal_ZmqFg13NB31oek\"\n      },\n      \"destination_v4v\": {\n        \"description\": \"Destination for \\\"Value for Value\\\" payment.\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"$ref\": \"#/components/schemas/name_destination\"\n          },\n          \"address\": {\n            \"$ref\": \"#/components/schemas/address_destination\"\n          },\n          \"type\": {\n            \"$ref\": \"#/components/schemas/type_destination\"\n          },\n          \"split\": {\n            \"$ref\": \"#/components/schemas/split_destination\"\n          },\n          \"fee\": {\n            \"$ref\": \"#/components/schemas/fee_destination\"\n          },\n          \"customKey\": {\n            \"$ref\": \"#/components/schemas/customKey\"\n          },\n          \"customValue\": {\n            \"$ref\": \"#/components/schemas/customValue\"\n          }\n        }\n      },\n      \"destinations_v4v\": {\n        \"description\": \"List of destinations where \\\"Value for Value\\\" payments should be sent.\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/destination_v4v\"\n        }\n      },\n      \"value\": {\n        \"description\": \"Information for supporting the podcast via one of the \\\"Value for Value\\\" methods.\\n\\nExamples:\\n  - `lightning` value type: https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=169991\u0026pretty\\n  - `webmonetization` value type: https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=779873\u0026pretty\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"model\": {\n            \"$ref\": \"#/components/schemas/model_v4v\"\n          },\n          \"destinations\": {\n            \"$ref\": \"#/components/schemas/destinations_v4v\"\n          }\n        }\n      },\n      \"url_funding\": {\n        \"description\": \"URL to site to fund the podcast\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#funding) for more information.\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://patreon.com/johnchidgey\"\n      },\n      \"message\": {\n        \"description\": \"Description of `url`\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#funding) for more information.\\n\",\n        \"type\": \"string\",\n        \"example\": \"Pragmatic on Patreon\"\n      },\n      \"funding\": {\n        \"description\": \"Information for donation/funding the podcast.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#funding) for more information.\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_funding\"\n          },\n          \"message\": {\n            \"$ref\": \"#/components/schemas/message\"\n          }\n        }\n      },\n      \"feed_podcast\": {\n        \"description\": \"Known details of podcast feed\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"podcastGuid\": {\n            \"$ref\": \"#/components/schemas/podcastGuid\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          },\n          \"originalUrl\": {\n            \"$ref\": \"#/components/schemas/originalUrl\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_feed\"\n          },\n          \"author\": {\n            \"$ref\": \"#/components/schemas/author\"\n          },\n          \"ownerName\": {\n            \"$ref\": \"#/components/schemas/ownerName\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"artwork\": {\n            \"$ref\": \"#/components/schemas/artwork\"\n          },\n          \"lastUpdateTime\": {\n            \"$ref\": \"#/components/schemas/lastUpdateTime\"\n          },\n          \"lastCrawlTime\": {\n            \"$ref\": \"#/components/schemas/lastCrawlTime\"\n          },\n          \"lastParseTime\": {\n            \"$ref\": \"#/components/schemas/lastParseTime\"\n          },\n          \"lastGoodHttpStatusTime\": {\n            \"$ref\": \"#/components/schemas/lastGoodHttpStatusTime\"\n          },\n          \"lastHttpStatus\": {\n            \"$ref\": \"#/components/schemas/lastHttpStatus\"\n          },\n          \"contentType\": {\n            \"$ref\": \"#/components/schemas/contentType\"\n          },\n          \"itunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"generator\": {\n            \"$ref\": \"#/components/schemas/generator\"\n          },\n          \"language\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"type\": {\n            \"$ref\": \"#/components/schemas/type\"\n          },\n          \"dead\": {\n            \"$ref\": \"#/components/schemas/dead\"\n          },\n          \"chash\": {\n            \"$ref\": \"#/components/schemas/chash\"\n          },\n          \"episodeCount\": {\n            \"$ref\": \"#/components/schemas/episodeCount\"\n          },\n          \"crawlErrors\": {\n            \"$ref\": \"#/components/schemas/crawlErrors\"\n          },\n          \"parseErrors\": {\n            \"$ref\": \"#/components/schemas/parseErrors\"\n          },\n          \"categories\": {\n            \"$ref\": \"#/components/schemas/categories\"\n          },\n          \"locked\": {\n            \"$ref\": \"#/components/schemas/locked\"\n          },\n          \"imageUrlHash\": {\n            \"$ref\": \"#/components/schemas/imageUrlHash\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/value\"\n          },\n          \"funding\": {\n            \"$ref\": \"#/components/schemas/funding\"\n          }\n        }\n      },\n      \"url_query\": {\n        \"description\": \"Value passed to request in the `url` field\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://feeds.theincomparable.com/batmanuniversity\"\n      },\n      \"query_url\": {\n        \"description\": \"Object containing the input query data\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_query\"\n          }\n        }\n      },\n      \"feed_itunes\": {\n        \"description\": \"Known details of podcast feed\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          },\n          \"originalUrl\": {\n            \"$ref\": \"#/components/schemas/originalUrl\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_feed\"\n          },\n          \"author\": {\n            \"$ref\": \"#/components/schemas/author\"\n          },\n          \"ownerName\": {\n            \"$ref\": \"#/components/schemas/ownerName\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"artwork\": {\n            \"$ref\": \"#/components/schemas/artwork\"\n          },\n          \"lastUpdateTime\": {\n            \"$ref\": \"#/components/schemas/lastUpdateTime\"\n          },\n          \"lastCrawlTime\": {\n            \"$ref\": \"#/components/schemas/lastCrawlTime\"\n          },\n          \"lastParseTime\": {\n            \"$ref\": \"#/components/schemas/lastParseTime\"\n          },\n          \"lastGoodHttpStatusTime\": {\n            \"$ref\": \"#/components/schemas/lastGoodHttpStatusTime\"\n          },\n          \"lastHttpStatus\": {\n            \"$ref\": \"#/components/schemas/lastHttpStatus\"\n          },\n          \"contentType\": {\n            \"$ref\": \"#/components/schemas/contentType\"\n          },\n          \"itunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"generator\": {\n            \"$ref\": \"#/components/schemas/generator\"\n          },\n          \"language\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"type\": {\n            \"$ref\": \"#/components/schemas/type\"\n          },\n          \"dead\": {\n            \"$ref\": \"#/components/schemas/dead\"\n          },\n          \"crawlErrors\": {\n            \"$ref\": \"#/components/schemas/crawlErrors\"\n          },\n          \"parseErrors\": {\n            \"$ref\": \"#/components/schemas/parseErrors\"\n          },\n          \"locked\": {\n            \"$ref\": \"#/components/schemas/locked\"\n          },\n          \"funding\": {\n            \"$ref\": \"#/components/schemas/funding\"\n          }\n        }\n      },\n      \"podcastGuid_query\": {\n        \"description\": \"Value passed to request in the `guid` field\\n\\nThe GUID from the `podcast:guid` tag in the feed. This value is a unique, global identifier for the podcast. See the namespace spec for [guid](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#guid) for details.\\n\",\n        \"type\": \"string\",\n        \"example\": \"9b024349-ccf0-5f69-a609-6b82873eab3c\"\n      },\n      \"id_guid_query\": {\n        \"description\": \"The Podcast Index feed ID for the feed specified by the `guid` field passed to the request\\n\",\n        \"type\": \"string\",\n        \"example\": \"9b024349-ccf0-5f69-a609-6b82873eab3c\"\n      },\n      \"query_guid\": {\n        \"description\": \"Object containing the input query data\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"guid\": {\n            \"$ref\": \"#/components/schemas/podcastGuid_query\"\n          },\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_guid_query\"\n          }\n        }\n      },\n      \"feed_bytag\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          },\n          \"originalUrl\": {\n            \"$ref\": \"#/components/schemas/originalUrl\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_feed\"\n          },\n          \"author\": {\n            \"$ref\": \"#/components/schemas/author\"\n          },\n          \"ownerName\": {\n            \"$ref\": \"#/components/schemas/ownerName\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"artwork\": {\n            \"$ref\": \"#/components/schemas/artwork\"\n          },\n          \"lastUpdateTime\": {\n            \"$ref\": \"#/components/schemas/lastUpdateTime\"\n          },\n          \"lastCrawlTime\": {\n            \"$ref\": \"#/components/schemas/lastCrawlTime\"\n          },\n          \"lastParseTime\": {\n            \"$ref\": \"#/components/schemas/lastParseTime\"\n          },\n          \"lastGoodHttpStatusTime\": {\n            \"$ref\": \"#/components/schemas/lastGoodHttpStatusTime\"\n          },\n          \"lastHttpStatus\": {\n            \"$ref\": \"#/components/schemas/lastHttpStatus\"\n          },\n          \"contentType\": {\n            \"$ref\": \"#/components/schemas/contentType\"\n          },\n          \"itunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"generator\": {\n            \"$ref\": \"#/components/schemas/generator\"\n          },\n          \"language\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"type\": {\n            \"$ref\": \"#/components/schemas/type\"\n          },\n          \"dead\": {\n            \"$ref\": \"#/components/schemas/dead\"\n          },\n          \"crawlErrors\": {\n            \"$ref\": \"#/components/schemas/crawlErrors\"\n          },\n          \"parseErrors\": {\n            \"$ref\": \"#/components/schemas/parseErrors\"\n          },\n          \"categories\": {\n            \"$ref\": \"#/components/schemas/categories\"\n          },\n          \"locked\": {\n            \"$ref\": \"#/components/schemas/locked\"\n          },\n          \"imageUrlHash\": {\n            \"$ref\": \"#/components/schemas/imageUrlHash\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/value\"\n          },\n          \"funding\": {\n            \"$ref\": \"#/components/schemas/funding\"\n          }\n        }\n      },\n      \"feeds_bytag\": {\n        \"description\": \"List of feeds matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/feed_bytag\"\n        }\n      },\n      \"newestItemPublishedTime\": {\n        \"description\": \"The date and time the most recent episode in the feed was published\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1546399813\n      },\n      \"trendScore\": {\n        \"description\": \"The ranking for how the podcast is trending in the index\\n\",\n        \"type\": \"integer\",\n        \"example\": 1\n      },\n      \"feed_trending\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_feed\"\n          },\n          \"author\": {\n            \"$ref\": \"#/components/schemas/author\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"newestItemPublishedTime\": {\n            \"$ref\": \"#/components/schemas/newestItemPublishedTime\"\n          },\n          \"itunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"trendScore\": {\n            \"$ref\": \"#/components/schemas/trendScore\"\n          },\n          \"language\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"categories\": {\n            \"$ref\": \"#/components/schemas/categories\"\n          }\n        }\n      },\n      \"feeds_trending\": {\n        \"description\": \"List of feeds matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/feed_trending\"\n        }\n      },\n      \"max\": {\n        \"description\": \"Value of `max` parameter passed to request.\\n\",\n        \"type\": \"integer\",\n        \"example\": 2\n      },\n      \"since\": {\n        \"description\": \"Value of `since` parameter passed to request.\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1613805249\n      },\n      \"feed_dead\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"url\": {\n            \"$ref\": \"#/components/schemas/url_feed\"\n          }\n        }\n      },\n      \"feeds_dead\": {\n        \"description\": \"List of feeds matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/feed_dead\"\n        }\n      },\n      \"datePublishedPretty\": {\n        \"description\": \"The date and time the episode was published formatted as a human readable string.\\n\\nNote: uses the PodcastIndex server local time to do conversion.\\n\",\n        \"type\": \"string\",\n        \"example\": \"January 01, 2019 9:30pm\"\n      },\n      \"startTime\": {\n        \"description\": \"The time where the soundbite begins in the item specified by the `enclosureUrl`\\n\",\n        \"type\": \"integer\",\n        \"format\": \"seconds\",\n        \"example\": 1123\n      },\n      \"duration_soundbite\": {\n        \"description\": \"The length to play the item specified by the `enclosureUrl`\\n\",\n        \"type\": \"integer\",\n        \"format\": \"seconds\",\n        \"example\": 40\n      },\n      \"title_soundbite\": {\n        \"description\": \"Name of the soundbite\\n\",\n        \"type\": \"string\",\n        \"example\": \"Why the Podcast Namespace Matters\"\n      },\n      \"soundbite\": {\n        \"description\": \"Soundbite for episode\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"startTime\": {\n            \"$ref\": \"#/components/schemas/startTime\"\n          },\n          \"duration\": {\n            \"$ref\": \"#/components/schemas/duration_soundbite\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_soundbite\"\n          }\n        }\n      },\n      \"soundbites\": {\n        \"description\": \"Soundbites for episode\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/soundbite\"\n        }\n      },\n      \"id_person\": {\n        \"description\": \"The internal PodcastIndex.org person ID.\\n\",\n        \"type\": \"integer\",\n        \"example\": 411960\n      },\n      \"name_person\": {\n        \"description\": \"The name of the person.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.\\n\",\n        \"type\": \"string\",\n        \"example\": \"Dave Jones\"\n      },\n      \"role\": {\n        \"description\": \"Used to identify what role the person serves on the show or episode.\\n\\nValue should be an official role within the Podcast Taxonomy Project [list](https://github.com/Podcastindex-org/podcast-namespace/blob/main/taxonomy.json).\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.\\n\",\n        \"type\": \"string\",\n        \"example\": \"Host\"\n      },\n      \"group\": {\n        \"description\": \"The group the person's role is in.\\n\\nValue should be an official group within the Podcast Taxonomy Project [list](https://github.com/Podcastindex-org/podcast-namespace/blob/main/taxonomy.json).\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.\\n\",\n        \"type\": \"string\",\n        \"example\": \"Cast\"\n      },\n      \"href\": {\n        \"description\": \"The url to a relevant resource of information about the person, such as a homepage or third-party profile platform.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://engineered.network/img/people/dave-jones.jp\"\n      },\n      \"img\": {\n        \"description\": \"URL to a picture or avatar of the person.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.\\n\",\n        \"type\": \"string\",\n        \"format\": \"URL\",\n        \"example\": \"https://engineered.network/img/people/dave-jones.jp\"\n      },\n      \"person\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_person\"\n          },\n          \"name\": {\n            \"$ref\": \"#/components/schemas/name_person\"\n          },\n          \"role\": {\n            \"$ref\": \"#/components/schemas/role\"\n          },\n          \"group\": {\n            \"$ref\": \"#/components/schemas/group\"\n          },\n          \"href\": {\n            \"$ref\": \"#/components/schemas/href\"\n          },\n          \"img\": {\n            \"$ref\": \"#/components/schemas/img\"\n          }\n        }\n      },\n      \"persons\": {\n        \"description\": \"List of people with an interest in this episode.\\n\\nSee the [podcast namespace spec](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#person) for more information.\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/person\"\n        }\n      },\n      \"item_podcast\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_episode\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_episode\"\n          },\n          \"guid\": {\n            \"$ref\": \"#/components/schemas/guid\"\n          },\n          \"datePublished\": {\n            \"$ref\": \"#/components/schemas/datePublished\"\n          },\n          \"datePublishedPretty\": {\n            \"$ref\": \"#/components/schemas/datePublishedPretty\"\n          },\n          \"dateCrawled\": {\n            \"$ref\": \"#/components/schemas/dateCrawled\"\n          },\n          \"enclosureUrl\": {\n            \"$ref\": \"#/components/schemas/enclosureUrl\"\n          },\n          \"enclosureType\": {\n            \"$ref\": \"#/components/schemas/enclosureType\"\n          },\n          \"enclosureLength\": {\n            \"$ref\": \"#/components/schemas/enclosureLength\"\n          },\n          \"duration\": {\n            \"$ref\": \"#/components/schemas/duration\"\n          },\n          \"explicit\": {\n            \"$ref\": \"#/components/schemas/explicit\"\n          },\n          \"episode\": {\n            \"$ref\": \"#/components/schemas/episode_number\"\n          },\n          \"episodeType\": {\n            \"$ref\": \"#/components/schemas/episodeType\"\n          },\n          \"season\": {\n            \"$ref\": \"#/components/schemas/season\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_episode\"\n          },\n          \"feedItunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"feedImage\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"feedId\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"feedLanguage\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"chaptersUrl\": {\n            \"$ref\": \"#/components/schemas/chaptersUrl\"\n          },\n          \"transcripts\": {\n            \"$ref\": \"#/components/schemas/transcripts\"\n          },\n          \"soundbite\": {\n            \"$ref\": \"#/components/schemas/soundbite\"\n          },\n          \"soundbites\": {\n            \"$ref\": \"#/components/schemas/soundbites\"\n          },\n          \"persons\": {\n            \"$ref\": \"#/components/schemas/persons\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/value\"\n          }\n        }\n      },\n      \"items_podcast\": {\n        \"description\": \"List of episodes matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/item_podcast\"\n        }\n      },\n      \"query_podcast_id_single\": {\n        \"title\": \"Single ID\",\n        \"description\": \"Single ID passed to request\\n\",\n        \"type\": \"string\",\n        \"example\": \"75075\"\n      },\n      \"query_podcast_id_multiple\": {\n        \"title\": \"Multiple IDs\",\n        \"description\": \"IDs passed to request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"description\": \"Podcast ID passed to request\\n\",\n          \"type\": \"string\"\n        },\n        \"example\": [\n          \"75075\",\n          \"920666\"\n        ]\n      },\n      \"episode_object\": {\n        \"description\": \"Episode data\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_episode\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_episode\"\n          },\n          \"guid\": {\n            \"$ref\": \"#/components/schemas/guid\"\n          },\n          \"datePublished\": {\n            \"$ref\": \"#/components/schemas/datePublished\"\n          },\n          \"datePublishedPretty\": {\n            \"$ref\": \"#/components/schemas/datePublishedPretty\"\n          },\n          \"dateCrawled\": {\n            \"$ref\": \"#/components/schemas/dateCrawled\"\n          },\n          \"enclosureUrl\": {\n            \"$ref\": \"#/components/schemas/enclosureUrl\"\n          },\n          \"enclosureType\": {\n            \"$ref\": \"#/components/schemas/enclosureType\"\n          },\n          \"enclosureLength\": {\n            \"$ref\": \"#/components/schemas/enclosureLength\"\n          },\n          \"duration\": {\n            \"$ref\": \"#/components/schemas/duration\"\n          },\n          \"explicit\": {\n            \"$ref\": \"#/components/schemas/explicit\"\n          },\n          \"episode\": {\n            \"$ref\": \"#/components/schemas/episode_number\"\n          },\n          \"episodeType\": {\n            \"$ref\": \"#/components/schemas/episodeType\"\n          },\n          \"season\": {\n            \"$ref\": \"#/components/schemas/season\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_episode\"\n          },\n          \"feedItunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"feedImage\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"feedId\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"feedTitle\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"feedLanguage\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"chaptersUrl\": {\n            \"$ref\": \"#/components/schemas/chaptersUrl\"\n          },\n          \"transcripts\": {\n            \"$ref\": \"#/components/schemas/transcripts\"\n          },\n          \"persons\": {\n            \"$ref\": \"#/components/schemas/persons\"\n          },\n          \"value\": {\n            \"$ref\": \"#/components/schemas/value\"\n          },\n          \"soundbite\": {\n            \"$ref\": \"#/components/schemas/soundbite\"\n          },\n          \"soundbites\": {\n            \"$ref\": \"#/components/schemas/soundbites\"\n          }\n        }\n      },\n      \"feedid_query\": {\n        \"description\": \"Value passed to request in the `feedid` parameter\\n\",\n        \"type\": \"string\",\n        \"example\": \"920666\"\n      },\n      \"feedurl_query\": {\n        \"description\": \"Value passed to request in the `feedurl` parameter. If no `feedurl` passed, value will be null.\\n\",\n        \"type\": \"string\",\n        \"example\": \"http://mp3s.nashownotes.com/pc20rss.xml\"\n      },\n      \"guid_query\": {\n        \"description\": \"Value passed to request in the `guid` parameter.\\n\",\n        \"type\": \"string\",\n        \"example\": \"PC2084\"\n      },\n      \"item_podcast_random\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_episode\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_episode\"\n          },\n          \"guid\": {\n            \"$ref\": \"#/components/schemas/guid\"\n          },\n          \"datePublished\": {\n            \"$ref\": \"#/components/schemas/datePublished\"\n          },\n          \"datePublishedPretty\": {\n            \"$ref\": \"#/components/schemas/datePublishedPretty\"\n          },\n          \"dateCrawled\": {\n            \"$ref\": \"#/components/schemas/dateCrawled\"\n          },\n          \"enclosureUrl\": {\n            \"$ref\": \"#/components/schemas/enclosureUrl\"\n          },\n          \"enclosureType\": {\n            \"$ref\": \"#/components/schemas/enclosureType\"\n          },\n          \"enclosureLength\": {\n            \"$ref\": \"#/components/schemas/enclosureLength\"\n          },\n          \"explicit\": {\n            \"$ref\": \"#/components/schemas/explicit\"\n          },\n          \"episode\": {\n            \"$ref\": \"#/components/schemas/episode_number\"\n          },\n          \"episodeType\": {\n            \"$ref\": \"#/components/schemas/episodeType\"\n          },\n          \"season\": {\n            \"$ref\": \"#/components/schemas/season\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_episode\"\n          },\n          \"feedItunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"feedImage\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"feedId\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"feedTitle\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"feedLanguage\": {\n            \"$ref\": \"#/components/schemas/language\"\n          },\n          \"categories\": {\n            \"$ref\": \"#/components/schemas/categories\"\n          },\n          \"chaptersUrl\": {\n            \"$ref\": \"#/components/schemas/chaptersUrl\"\n          }\n        }\n      },\n      \"episodes_random_array\": {\n        \"description\": \"List of episodes matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/item_podcast_random\"\n        }\n      },\n      \"item_podcast_recent\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_episode\"\n          },\n          \"title\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"link\": {\n            \"$ref\": \"#/components/schemas/link_feed\"\n          },\n          \"description\": {\n            \"$ref\": \"#/components/schemas/description_episode\"\n          },\n          \"guid\": {\n            \"$ref\": \"#/components/schemas/guid\"\n          },\n          \"datePublished\": {\n            \"$ref\": \"#/components/schemas/datePublished\"\n          },\n          \"datePublishedPretty\": {\n            \"$ref\": \"#/components/schemas/datePublishedPretty\"\n          },\n          \"dateCrawled\": {\n            \"$ref\": \"#/components/schemas/dateCrawled\"\n          },\n          \"enclosureUrl\": {\n            \"$ref\": \"#/components/schemas/enclosureUrl\"\n          },\n          \"enclosureType\": {\n            \"$ref\": \"#/components/schemas/enclosureType\"\n          },\n          \"enclosureLength\": {\n            \"$ref\": \"#/components/schemas/enclosureLength\"\n          },\n          \"explicit\": {\n            \"$ref\": \"#/components/schemas/explicit\"\n          },\n          \"episode\": {\n            \"$ref\": \"#/components/schemas/episode_number\"\n          },\n          \"episodeType\": {\n            \"$ref\": \"#/components/schemas/episodeType\"\n          },\n          \"season\": {\n            \"$ref\": \"#/components/schemas/season\"\n          },\n          \"image\": {\n            \"$ref\": \"#/components/schemas/image_episode\"\n          },\n          \"feedItunesId\": {\n            \"$ref\": \"#/components/schemas/itunesId_feed\"\n          },\n          \"feedImage\": {\n            \"$ref\": \"#/components/schemas/image_feed\"\n          },\n          \"feedId\": {\n            \"$ref\": \"#/components/schemas/id_feed\"\n          },\n          \"feedTitle\": {\n            \"$ref\": \"#/components/schemas/title_feed\"\n          },\n          \"feedLanguage\": {\n            \"$ref\": \"#/components/schemas/language\"\n          }\n        }\n      },\n      \"items_recent\": {\n        \"description\": \"List of episodes matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/item_podcast_recent\"\n        }\n      },\n      \"oldestItemPublishTime\": {\n        \"description\": \"The date and time the oldest episode in the feed/index\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1546399813\n      },\n      \"feeds_recent\": {\n        \"description\": \"List of feeds matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"$ref\": \"#/components/schemas/id_feed\"\n            },\n            \"url\": {\n              \"$ref\": \"#/components/schemas/url_feed\"\n            },\n            \"title\": {\n              \"$ref\": \"#/components/schemas/title_feed\"\n            },\n            \"newestItemPublishedTime\": {\n              \"$ref\": \"#/components/schemas/newestItemPublishedTime\"\n            },\n            \"oldestItemPublishTime\": {\n              \"$ref\": \"#/components/schemas/oldestItemPublishTime\"\n            },\n            \"itunesId\": {\n              \"$ref\": \"#/components/schemas/itunesId_feed\"\n            },\n            \"language\": {\n              \"$ref\": \"#/components/schemas/language\"\n            },\n            \"categories\": {\n              \"$ref\": \"#/components/schemas/categories\"\n            }\n          }\n        }\n      },\n      \"timeAdded\": {\n        \"description\": \"The date and time the feed was added to the index\\n\",\n        \"type\": \"integer\",\n        \"format\": \"Unix Epoch\",\n        \"example\": 1613786624\n      },\n      \"status_feed\": {\n        \"description\": \"Status of feed after being added to index\\n\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"unconfirmed\",\n          \"confirmed\"\n        ],\n        \"example\": \"confirmed\"\n      },\n      \"contentHash\": {\n        \"description\": \"Hash of the entire feed body\\n\",\n        \"type\": \"string\",\n        \"example\": \"a652d25b56f3e2f0e069c0cc72145a85\"\n      },\n      \"feeds_recent_new\": {\n        \"description\": \"List of feeds matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"$ref\": \"#/components/schemas/id_feed\"\n            },\n            \"url\": {\n              \"$ref\": \"#/components/schemas/url_feed\"\n            },\n            \"image\": {\n              \"$ref\": \"#/components/schemas/image_feed\"\n            },\n            \"timeAdded\": {\n              \"$ref\": \"#/components/schemas/timeAdded\"\n            },\n            \"status\": {\n              \"$ref\": \"#/components/schemas/status_feed\"\n            },\n            \"contentHash\": {\n              \"$ref\": \"#/components/schemas/contentHash\"\n            },\n            \"language\": {\n              \"$ref\": \"#/components/schemas/language\"\n            }\n          }\n        }\n      },\n      \"title_episode\": {\n        \"description\": \"Name of the episode\\n\",\n        \"type\": \"string\",\n        \"example\": \"Gotham\"\n      },\n      \"items_soundbites\": {\n        \"description\": \"List of soundbites matching request\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"enclosureUrl\": {\n              \"$ref\": \"#/components/schemas/enclosureUrl\"\n            },\n            \"title\": {\n              \"$ref\": \"#/components/schemas/title_soundbite\"\n            },\n            \"startTime\": {\n              \"$ref\": \"#/components/schemas/startTime\"\n            },\n            \"duration\": {\n              \"$ref\": \"#/components/schemas/duration_soundbite\"\n            },\n            \"episodeId\": {\n              \"$ref\": \"#/components/schemas/id_episode\"\n            },\n            \"episodeTitle\": {\n              \"$ref\": \"#/components/schemas/title_episode\"\n            },\n            \"feedTitle\": {\n              \"$ref\": \"#/components/schemas/title_feed\"\n            },\n            \"feedUrl\": {\n              \"$ref\": \"#/components/schemas/url_feed\"\n            },\n            \"feedId\": {\n              \"$ref\": \"#/components/schemas/id_feed\"\n            }\n          }\n        }\n      },\n      \"stats\": {\n        \"description\": \"An array statistic properties\\n\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"feedCountTotal\": {\n            \"description\": \"Total podcast feeds in the index.\",\n            \"type\": \"integer\",\n            \"example\": 1383751\n          },\n          \"episodeCountTotal\": {\n            \"description\": \"Total individual podcast episodes in the index.\",\n            \"type\": \"integer\",\n            \"example\": 16987920\n          },\n          \"feedsWithNewEpisodes3days\": {\n            \"description\": \"Podcast feeds with a new episode released in the last 3 days.\",\n            \"type\": \"integer\",\n            \"example\": 63942\n          },\n          \"feedsWithNewEpisodes10days\": {\n            \"description\": \"Podcast feeds with a new episode released in the last 10 days.\",\n            \"type\": \"integer\",\n            \"example\": 176435\n          },\n          \"feedsWithNewEpisodes30days\": {\n            \"description\": \"Podcast feeds with a new episode released in the last 30 days.\",\n            \"type\": \"integer\",\n            \"example\": 264845\n          },\n          \"feedsWithNewEpisodes90days\": {\n            \"description\": \"Podcast feeds with a new episode released in the last 90 days.\",\n            \"type\": \"integer\",\n            \"example\": 362248\n          }\n        }\n      },\n      \"id_category\": {\n        \"description\": \"The internal PodcastIndex.org category ID.\\n\",\n        \"type\": \"integer\",\n        \"example\": 2\n      },\n      \"name_category\": {\n        \"description\": \"The category name.\\n\",\n        \"type\": \"string\",\n        \"example\": \"Books\"\n      },\n      \"feed_categories\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"$ref\": \"#/components/schemas/id_category\"\n          },\n          \"name\": {\n            \"$ref\": \"#/components/schemas/name_category\"\n          }\n        }\n      },\n      \"feeds_categories\": {\n        \"description\": \"List of categories\\n\",\n        \"type\": \"array\",\n        \"items\": {\n          \"$ref\": \"#/components/schemas/feed_categories\"\n        }\n      },\n      \"existed\": {\n        \"description\": \"Indicates if feed already exists in the index\\n\",\n        \"type\": \"string\",\n        \"enum\": [\n          \"true\",\n          \"false\"\n        ],\n        \"example\": \"true\"\n      }\n    },\n    \"responses\": {\n      \"400\": {\n        \"description\": \"Invalid request\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            },\n            \"example\": {\n              \"status\": \"false\",\n              \"description\": \"Invalid parameters\"\n            }\n          }\n        }\n      },\n      \"401\": {\n        \"description\": \"Not authenticated\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"example\": \"Authorization header value either not set or blank.\"\n          }\n        }\n      },\n      \"search_byterm\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_search\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"search_byperson\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/items_byperson\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_search\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_byfeedid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_id\"\n                },\n                \"feed\": {\n                  \"$ref\": \"#/components/schemas/feed_podcast\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_byfeedurl\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_url\"\n                },\n                \"feed\": {\n                  \"$ref\": \"#/components/schemas/feed_podcast\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_byitunesid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_id\"\n                },\n                \"feed\": {\n                  \"$ref\": \"#/components/schemas/feed_itunes\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_byguid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_guid\"\n                },\n                \"feed\": {\n                  \"$ref\": \"#/components/schemas/feed_podcast\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_bytag\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds_bytag\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_trending\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds_trending\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"max\": {\n                  \"$ref\": \"#/components/schemas/max\"\n                },\n                \"since\": {\n                  \"$ref\": \"#/components/schemas/since\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"podcasts_dead\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds_dead\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"episodes_byfeedid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/items_podcast\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"query\": {\n                  \"oneOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/query_podcast_id_single\"\n                    },\n                    {\n                      \"$ref\": \"#/components/schemas/query_podcast_id_multiple\"\n                    }\n                  ]\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"episodes_byfeedurl\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/items_podcast\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_url\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"episodes_byitunesid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/items_podcast\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/id_query\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"episodes_byid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"id\": {\n                  \"$ref\": \"#/components/schemas/id_episode\"\n                },\n                \"episode\": {\n                  \"$ref\": \"#/components/schemas/episode_object\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"episodes_byguid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"id\": {\n                  \"$ref\": \"#/components/schemas/feedid_query\"\n                },\n                \"url\": {\n                  \"$ref\": \"#/components/schemas/feedurl_query\"\n                },\n                \"guid\": {\n                  \"$ref\": \"#/components/schemas/guid_query\"\n                },\n                \"episode\": {\n                  \"$ref\": \"#/components/schemas/episode_object\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"episodes_random\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"episodes\": {\n                  \"$ref\": \"#/components/schemas/episodes_random_array\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"max\": {\n                  \"$ref\": \"#/components/schemas/max\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"recent_episodes\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/items_recent\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"max\": {\n                  \"$ref\": \"#/components/schemas/max\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"recent_feeds\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds_recent\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"max\": {\n                  \"$ref\": \"#/components/schemas/max\"\n                },\n                \"since\": {\n                  \"$ref\": \"#/components/schemas/since\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"recent_newfeeds\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds_recent_new\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"max\": {\n                  \"$ref\": \"#/components/schemas/max\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"recent_soundbites\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"items\": {\n                  \"$ref\": \"#/components/schemas/items_soundbites\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"value_byfeedid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_id\"\n                },\n                \"value\": {\n                  \"$ref\": \"#/components/schemas/value\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"value_byfeedurl\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"query\": {\n                  \"$ref\": \"#/components/schemas/query_url\"\n                },\n                \"value\": {\n                  \"$ref\": \"#/components/schemas/value\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"stats_current\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"stats\": {\n                  \"$ref\": \"#/components/schemas/stats\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"categories_list\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feeds\": {\n                  \"$ref\": \"#/components/schemas/feeds_categories\"\n                },\n                \"count\": {\n                  \"$ref\": \"#/components/schemas/count\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"hub_pubnotify\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"add_byfeedurl\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"feedId\": {\n                  \"$ref\": \"#/components/schemas/id_feed\"\n                },\n                \"existed\": {\n                  \"$ref\": \"#/components/schemas/existed\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      },\n      \"add_byitunesid\": {\n        \"description\": \"Success\",\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"status\": {\n                  \"$ref\": \"#/components/schemas/status\"\n                },\n                \"description\": {\n                  \"$ref\": \"#/components/schemas/description_response\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"paths\": {\n    \"/search/byterm\": {\n      \"get\": {\n        \"tags\": [\n          \"Search\"\n        ],\n        \"summary\": \"Search Podcasts\",\n        \"description\": \"This call returns all of the feeds that match the search terms in the `title`, `author` or `owner` of the feed.\\n\\nExample: https://api.podcastindex.org/api/1.0/search/byterm?q=batman+university\u0026pretty\\n\",\n        \"operationId\": \"search/byterm\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/q\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/val\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/clean\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/search_byterm\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        },\n        \"x-codeSamples\": [\n          {\n            \"lang\": \"PHP\",\n            \"source\": \"//Required values\\n$apiKey = \\\"UXKCGDSYGUUEVQJSYDZH\\\";\\n$apiSecret = \\\"yzJe2eE7XV-3eY576dyRZ6wXyAbndh6LUrCZ8KN|\\\";\\n$apiHeaderTime = time();\\n\\n//Hash them to get the Authorization token\\n$hash = sha1($apiKey.$apiSecret.$apiHeaderTime);\\n\\n//Set the required headers\\n$headers = [\\n  \\\"User-Agent: SuperPodcastPlayer/1.3\\\",\\n  \\\"X-Auth-Key: $apiKey\\\",\\n  \\\"X-Auth-Date: $apiHeaderTime\\\",\\n  \\\"Authorization: $hash\\\"\\n];\\n\\n//Make the request to an API endpoint\\n$ch = curl_init();\\ncurl_setopt($ch, CURLOPT_URL,\\\"https://api.podcastindex.org/api/1.0/search/byterm?q=bastiat\\\");\\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\\ncurl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\\n\\n//Collect and show the results\\n$response = curl_exec ($ch);\\ncurl_close ($ch);\\necho print_r(json_decode($response), TRUE);\\n\"\n          },\n          {\n            \"lang\": \"C#\",\n            \"source\": \"//Required values\\nstring apiKey = \\\"UXKCGDSYGUUEVQJSYDZH\\\";\\nstring apiSecret = \\\"yzJe2eE7XV-3eY576dyRZ6wXyAbndh6LUrCZ8KN|\\\";\\nTimeSpan t = DateTime.UtcNow - new DateTime(1970, 1, 1);\\nint apiHeaderTime = (int)t.TotalSeconds;\\n\\n//Hash them to get the Authorization token\\nstring hash = \\\"\\\";\\nusing (SHA1Managed sha1 = new SHA1Managed())\\n{\\n    var hashed = sha1.ComputeHash(Encoding.UTF8.GetBytes(apiKey + apiSecret + apiHeaderTime));\\n    var sb = new StringBuilder(hashed.Length * 2);\\n\\n    foreach (byte b in hashed)\\n    {\\n        // can be \\\"x2\\\" if you want lowercase\\n        sb.Append(b.ToString(\\\"x2\\\"));\\n    }\\n\\n    hash = sb.ToString();\\n}\\n\\n//Create the web request and add the required headers\\nHttpWebRequest request = (HttpWebRequest)WebRequest.Create(\\\"https://api.podcastindex.org/api/1.0/search/byterm?q=bastiat\\\");\\nrequest.Headers.Add(\\\"User-Agent\\\", \\\"SuperPodcastPlayer/1.3\\\");\\nrequest.Headers.Add(\\\"X-Auth-Date\\\", apiHeaderTime.ToString());\\nrequest.Headers.Add(\\\"X-Auth-Key\\\", apiKey);\\nrequest.Headers.Add(\\\"Authorization\\\", hash);\\n\\n//Send the request and collect/show the results\\ntry\\n{\\n    WebResponse webResponse2 = request.GetResponse();\\n    Stream stream2 = webResponse2.GetResponseStream();\\n    StreamReader reader2 = new StreamReader(stream2);\\n\\n    Console.WriteLine(reader2.ReadToEnd());\\n\\n    webResponse2.Close();\\n}\\ncatch (Exception e)\\n{\\n    Console.WriteLine(\\\"Error.\\\");\\n}\\n\"\n          },\n          {\n            \"lang\": \"Swift\",\n            \"source\": \"import Foundation\\nimport CommonCrypto\\n\\nextension String {\\n  func sha1() -\u003e String {\\n  let data = Data(self.utf8)\\n  var digest = [UInt8](repeating: 0, count:Int(CC_SHA1_DIGEST_LENGTH))\\n      data.withUnsafeBytes {\\n      _ = CC_SHA1($0.baseAddress, CC_LONG(data.count), \u0026digest)\\n  }\\n  let hexBytes = digest.map { String(format: \\\"%02hhx\\\", $0) }\\n      return hexBytes.joined()\\n  }\\n}\\n\\nlet apiKey = \\\"UXKCGDSYGUUEVQJSYDZH\\\"\\nlet apiSecret = \\\"yzJe2eE7XV-3eY576dyRZ6wXyAbndh6LUrCZ8KN|\\\"\\nlet apiHeaderTime = String(Int(Date().timeIntervalSince1970))\\nlet hash = (apiKey + apiSecret + apiHeaderTime).sha1()\\n\\nvar semaphore = DispatchSemaphore (value: 0)\\nvar request = URLRequest(url: URL(string: \\\"https://api.podcastindex.org/api/1.0/search/byterm?q=bastiat\\\")!,timeoutInterval: Double.infinity)\\nrequest.addValue(\\\"SuperPodcastPlayer/1.3\\\", forHTTPHeaderField: \\\"User-Agent\\\")\\nrequest.addValue(apiKey, forHTTPHeaderField: \\\"X-Auth-Key\\\")\\nrequest.addValue(apiHeaderTime, forHTTPHeaderField: \\\"X-Auth-Date\\\")\\nrequest.addValue(hash, forHTTPHeaderField: \\\"Authorization\\\")\\n\\nrequest.httpMethod = \\\"GET\\\"\\n\\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in\\n    guard let data = data else {\\n        print(String(describing: error))\\n        return\\n    }\\n    print(String(data: data, encoding: .utf8)!)\\n    semaphore.signal()\\n}\\n\\ntask.resume()\\nsemaphore.wait()\\n\"\n          }\n        ]\n      }\n    },\n    \"/search/bytitle\": {\n      \"get\": {\n        \"tags\": [\n          \"Search\"\n        ],\n        \"summary\": \"Search Podcasts by Title\",\n        \"description\": \"This call returns all of the feeds where the `title` of the feed matches the search term (ignores case).\\n\\nExample \\\"everything everywhere daily\\\" will match the podcast [Everything Everywhere Daily](https://podcastindex.org/podcast/437685) by \\\"everything everywhere\\\" will not.\\n\\nExample: https://api.podcastindex.org/api/1.0/search/bytitle?q=everything+everywhere+daily\u0026pretty\\n\",\n        \"operationId\": \"search/bytitle\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/q\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/val\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/clean\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/search_byterm\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/search/byperson\": {\n      \"get\": {\n        \"tags\": [\n          \"Search\"\n        ],\n        \"summary\": \"Search Episodes by Person\",\n        \"description\": \"This call returns all of the episodes where the specified person is mentioned.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/search/byperson?q=adam%20curry\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/search/byperson?q=Martin+Mouritzen\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/search/byperson?q=Klaus+Schwab\u0026pretty\\n\",\n        \"operationId\": \"search/byperson\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/q_person\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/search_byperson\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/byfeedid\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"By Feed ID\",\n        \"description\": \"This call returns everything we know about the feed from the PodcastIndex ID\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=75075\u0026pretty\\n  - Includes `value` and `funding`: https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=169991\u0026pretty\\n\",\n        \"operationId\": \"podcasts/byfeedid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_feed_podcast_pi\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_byfeedid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/byfeedurl\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"By Feed URL\",\n        \"description\": \"This call returns everything we know about the feed from the feed URL\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/podcasts/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity\u0026pretty\\n  - Includes `value` and `funding`: https://api.podcastindex.org/api/1.0/podcasts/byfeedurl?url=https://engineered.network/pragmatic/feed/index.xml\u0026pretty\\n\",\n        \"operationId\": \"podcasts/byfeedurl\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/url\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_byfeedurl\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/byitunesid\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"By iTunes ID\",\n        \"description\": \"This call returns everything we know about the feed from the iTunes ID\\n\\nExample: https://api.podcastindex.org/api/1.0/podcasts/byitunesid?id=1441923632\u0026pretty\\n\",\n        \"operationId\": \"podcasts/byitunesid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_feed_podcast_itunes\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_byitunesid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/byguid\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"By GUID\",\n        \"description\": \"This call returns everything we know about the feed from the feed's GUID.\\n\\nThe GUID is a unique, global identifier for the podcast. See the namespace spec for [guid](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#guid) for details.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/podcasts/byguid?guid=9b024349-ccf0-5f69-a609-6b82873eab3c\u0026pretty\\n  - Includes `value` and `funding`: https://api.podcastindex.org/api/1.0/podcasts/byguid?guid=9b024349-ccf0-5f69-a609-6b82873eab3c\u0026pretty\\n\",\n        \"operationId\": \"podcasts/byguid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/guid_feed_podcast\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_byguid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/bytag\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"By Tag\",\n        \"description\": \"This call returns all feeds that support the specified [podcast namespace](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md) tag.\\n\\nExample: https://api.podcastindex.org/api/1.0/podcasts/bytag?podcast-value\u0026pretty\\n\",\n        \"operationId\": \"podcasts/bytag\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/podcast-value\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_bytag\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/trending\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"Trending\",\n        \"description\": \"This call returns the podcasts/feeds that in the index that are trending.\\n\\nExample: https://api.podcastindex.org/api/1.0/podcasts/trending?pretty\\n\",\n        \"operationId\": \"podcasts/trending\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/max\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/since\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/lang\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/cat\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/notcat\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_trending\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/podcasts/dead\": {\n      \"get\": {\n        \"tags\": [\n          \"Podcasts\"\n        ],\n        \"summary\": \"Dead\",\n        \"description\": \"This call returns all feeds that have been marked dead (`dead` == 1)\\n\\nExample: https://api.podcastindex.org/api/1.0/podcasts/dead?pretty\\n\",\n        \"operationId\": \"podcasts/dead\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/podcasts_dead\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/episodes/byfeedid\": {\n      \"get\": {\n        \"tags\": [\n          \"Episodes\"\n        ],\n        \"summary\": \"By Feed ID\",\n        \"description\": \"This call returns all the episodes we know about for this feed from the PodcastIndex ID. Episodes are in reverse chronological order.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=75075\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=41504,920666\u0026pretty\\n  - Includes `persons`: https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=169991\u0026pretty\\n  - Includes `value`: https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=4058673\u0026pretty\\n\",\n        \"operationId\": \"episodes/byfeedid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_feed_episode_pi\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/since\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/max\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/episodes_byfeedid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/episodes/byfeedurl\": {\n      \"get\": {\n        \"tags\": [\n          \"Episodes\"\n        ],\n        \"summary\": \"By Feed URL\",\n        \"description\": \"This call returns all the episodes we know about for this feed from the feed URL. Episodes are in reverse chronological order.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity\u0026pretty\\n  - Includes `persons`: https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=https://engineered.network/pragmatic/feed/index.xml\u0026pretty\\n  - Includes `value`: https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=https://closing-the-loop.github.io/feed.xml\u0026pretty\\n\",\n        \"operationId\": \"episodes/byfeedurl\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/url\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/since\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/max\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/episodes_byfeedurl\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/episodes/byitunesid\": {\n      \"get\": {\n        \"tags\": [\n          \"Episodes\"\n        ],\n        \"summary\": \"By iTunes ID\",\n        \"description\": \"This call returns all the episodes we know about for this feed from the iTunes ID. Episodes are in reverse chronological order.\\n\\nExample: https://api.podcastindex.org/api/1.0/episodes/byitunesid?id=1441923632\u0026pretty\\n\",\n        \"operationId\": \"episodes/byitunesid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_feed_podcast_itunes\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/since\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/max\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/episodes_byitunesid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/episodes/byid\": {\n      \"get\": {\n        \"tags\": [\n          \"Episodes\"\n        ],\n        \"summary\": \"By ID\",\n        \"description\": \"Get all the metadata for a single episode by passing its id.\\n\\nExample: https://api.podcastindex.org/api/1.0/episodes/byid?id=16795090\u0026pretty\\n\",\n        \"operationId\": \"episodes/byid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_episode_pi\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/episodes_byid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/episodes/byguid\": {\n      \"get\": {\n        \"tags\": [\n          \"Episodes\"\n        ],\n        \"summary\": \"By GUID\",\n        \"description\": \"Get all the metadata for a single episode by passing its guid and the feed id or URL.\\n\\nThe `feedid` or the `feedurl` is required.\\n\\nExamples: \\n\\n  - Search using Podcast Index feed ID: https://api.podcastindex.org/api/1.0/episodes/byguid?guid=PC2084\u0026feedid=920666\u0026pretty\\n  - Search using feed URL: https://api.podcastindex.org/api/1.0/episodes/byguid?guid=PC2084\u0026feedurl=http://mp3s.nashownotes.com/pc20rss.xml\u0026pretty\\n\",\n        \"operationId\": \"episodes/byguid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/guid_episode\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/feedurl\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/feedid\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/episodes_byguid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/episodes/random\": {\n      \"get\": {\n        \"tags\": [\n          \"Episodes\"\n        ],\n        \"summary\": \"Random\",\n        \"description\": \"This call returns a random batch of episodes, in no specific order.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/episodes/random?notcat=News,Religion\u0026lang=en,es\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/episodes/random?max=2\u0026pretty\\n\",\n        \"operationId\": \"episodes/random\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/max_random\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/lang\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/cat\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/notcat\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/episodes_random\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/recent/episodes\": {\n      \"get\": {\n        \"tags\": [\n          \"Recent\"\n        ],\n        \"summary\": \"Episodes\",\n        \"description\": \"This call returns the most recent `max` number of episodes globally across the whole index, in reverse chronological order.\\n\\nExample: https://api.podcastindex.org/api/1.0/recent/episodes?max=7\u0026pretty\\n\",\n        \"operationId\": \"recent/episodes\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/max_recent_episodes\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/excludeString\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/before\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/fulltext\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/recent_episodes\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/recent/feeds\": {\n      \"get\": {\n        \"tags\": [\n          \"Recent\"\n        ],\n        \"summary\": \"Feeds\",\n        \"description\": \"This call returns the most recent `max` feeds, in reverse chronological order.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/recent/feeds?pretty\\n  - https://api.podcastindex.org/api/1.0/recent/feeds?max=20\u0026cat=102,health\u0026lang=de,ja\u0026pretty\\n\",\n        \"operationId\": \"recent/feeds\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/max_recent_feeds\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/since\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/lang\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/cat\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/notcat\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/recent_feeds\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/recent/newfeeds\": {\n      \"get\": {\n        \"tags\": [\n          \"Recent\"\n        ],\n        \"summary\": \"New Feeds\",\n        \"description\": \"This call returns every new feed added to the index over the past 24 hours in reverse chronological order.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/recent/newfeeds?pretty\\n  - https://api.podcastindex.org/api/1.0/recent/newfeeds?pretty\u0026since=1613805000\\n\",\n        \"operationId\": \"recent/newfeeds\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/max_recent_feeds\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/since\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/recent_newfeeds\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/recent/soundbites\": {\n      \"get\": {\n        \"tags\": [\n          \"Recent\"\n        ],\n        \"summary\": \"Soundbites\",\n        \"description\": \"This call returns the most recent `max` soundbites that the index has discovered.\\n\\nA soundbite consists of an enclosure url, a start time and a duration. It is documented in the [podcast namespace](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#soundbite).\\n\\nExample: https://api.podcastindex.org/api/1.0/recent/soundbites?pretty\\n\",\n        \"operationId\": \"recent/soundbites\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/max_recent_soundbites\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/recent_soundbites\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/value/byfeedid\": {\n      \"get\": {\n        \"tags\": [\n          \"Value\"\n        ],\n        \"summary\": \"By Feed ID\",\n        \"description\": \"This call returns the information for supporting the podcast via one of the \\\"Value for Value\\\" methods from the PodcastIndex ID.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/value/byfeedid?id=920666\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/value/byfeedid?id=779873\u0026pretty\\n\",\n        \"operationId\": \"value/byfeedid\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_feed_episode_pi_single\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/value_byfeedid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/value/byfeedurl\": {\n      \"get\": {\n        \"tags\": [\n          \"Value\"\n        ],\n        \"summary\": \"By Feed URL\",\n        \"description\": \"This call returns the information for supporting the podcast via one of the \\\"Value for Value\\\" methods from feed URL.\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/value/byfeedurl?url=https://mp3s.nashownotes.com/pc20rss.xml\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/value/byfeedurl?url=https://lespoesiesdheloise.fr/@heloise/feed.xml\u0026pretty\\n\",\n        \"operationId\": \"value/byfeedurl\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/url\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/value_byfeedurl\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/stats/current\": {\n      \"get\": {\n        \"tags\": [\n          \"Stats\"\n        ],\n        \"summary\": \"Current\",\n        \"description\": \"Return the most recent index statistics.\\n\\nExample: https://api.podcastindex.org/api/1.0/stats/current?pretty\\n\",\n        \"operationId\": \"stats/current\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/stats_current\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/categories/list\": {\n      \"get\": {\n        \"tags\": [\n          \"Categories\"\n        ],\n        \"summary\": \"List\",\n        \"description\": \"Return all the possible categories supported by the index.\\n\\nExample: https://api.podcastindex.org/api/1.0/categories/list?pretty\\n\",\n        \"operationId\": \"categories/list\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/categories_list\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/hub/pubnotify\": {\n      \"get\": {\n        \"tags\": [\n          \"Hub\"\n        ],\n        \"summary\": \"Pub Notify\",\n        \"description\": \"Notify the index that a feed has changed\\n\\nExamples:\\n\\n  - https://api.podcastindex.org/api/1.0/hub/pubnotify?id=920666\u0026pretty\\n  - https://api.podcastindex.org/api/1.0/hub/pubnotify?url=https://feeds.theincomparable.com/batmanuniversity\u0026pretty\\n\",\n        \"operationId\": \"hub/pubnotify\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_feed_podcast_pi_pubnotify\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/url_pubnotify\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/hub_pubnotify\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/add/byfeedurl\": {\n      \"get\": {\n        \"tags\": [\n          \"Add\"\n        ],\n        \"summary\": \"By Feed URL\",\n        \"description\": \"This call adds a podcast to the index using its feed url. If a feed already exists, you will get its existing Feed ID returned.\\n\\n**NOTE**: this endpoint requires an API Key with the **write** permission.\\n\\nExample: https://api.podcastindex.org/api/1.0/add/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity\u0026pretty\\n\",\n        \"operationId\": \"add/byfeedurl:get\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/url\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/chash\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/itunesid\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/add_byfeedurl\"\n          },\n          \"302\": {\n            \"$ref\": \"#/components/responses/add_byfeedurl\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Add\"\n        ],\n        \"summary\": \"By Feed URL\",\n        \"description\": \"This call adds a podcast to the index using its feed url. If a feed already exists, you will get its existing Feed ID returned.\\n\\n**NOTE**: this endpoint requires an API Key with the **write** permission.\\n\\nExample: https://api.podcastindex.org/api/1.0/add/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity\u0026pretty\\n\",\n        \"operationId\": \"add/byfeedurl:post\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/url\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/itunesid\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/add_byfeedurl\"\n          },\n          \"302\": {\n            \"$ref\": \"#/components/responses/add_byfeedurl\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    },\n    \"/add/byitunesid\": {\n      \"get\": {\n        \"tags\": [\n          \"Add\"\n        ],\n        \"summary\": \"By iTunes ID\",\n        \"description\": \"This call adds a podcast to the index using its iTunes ID. If a feed already exists, it will be noted in the response.\\n\\n**NOTE**: this endpoint requires an API Key with the **write** permission.\\n\\nExample: https://api.podcastindex.org/api/1.0/add/byitunesid?id=1441923632\u0026pretty\\n\",\n        \"operationId\": \"add/byitunesid:get\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_itunes_add\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/add_byitunesid\"\n          },\n          \"302\": {\n            \"$ref\": \"#/components/responses/add_byitunesid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      },\n      \"post\": {\n        \"tags\": [\n          \"Add\"\n        ],\n        \"summary\": \"By iTunes ID\",\n        \"description\": \"This call adds a podcast to the index using its iTunes ID. If a feed already exists, it will be noted in the response.\\n\\n**NOTE**: this endpoint requires an API Key with the **write** permission.\\n\\nExample: https://api.podcastindex.org/api/1.0/add/byitunesid?id=1441923632\u0026pretty\\n\",\n        \"operationId\": \"add/byitunesid:post\",\n        \"security\": [\n          {\n            \"API Key\": [],\n            \"User Agent\": [],\n            \"Date\": [],\n            \"Authorization\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/id_itunes_add\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/pretty\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/add_byitunesid\"\n          },\n          \"302\": {\n            \"$ref\": \"#/components/responses/add_byitunesid\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"401\": {\n            \"$ref\": \"#/components/responses/401\"\n          }\n        }\n      }\n    }\n  }\n}",
			"canonicalURL": "/github.com/Podcastindex-org/docs-api@9001e7c04a72cd542d2b6b234a2ea94a7612fbcf/-/blob/docs/pi_api.json",
			"externalURLs": [
				{
					"url": "https://github.com/Podcastindex-org/docs-api/blob/9001e7c04a72cd542d2b6b234a2ea94a7612fbcf/docs/pi_api.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: securitySchemes: at 66:7: invalid name: \"User Agent\" doesn't match \"^[a-zA-Z0-9.\\\\-_]+$\""
}