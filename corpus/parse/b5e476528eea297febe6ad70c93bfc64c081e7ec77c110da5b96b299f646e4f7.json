{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Etimo/etimo-achievements"
		},
		"file": {
			"name": "openapi.json",
			"size": 0,
			"path": "packages/api/src/openapi.json",
			"byteSize": 75756,
			"content": "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Etimo Achievements\",\n    \"version\": \"1.0.0\",\n    \"license\": {\n      \"name\": \"Swagger spec\",\n      \"url\": \"openapi.json\"\n    },\n    \"contact\": {\n      \"name\": \"Etimo AB\",\n      \"url\": \"https://etimo.se\"\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"http://localhost:3000\",\n      \"description\": \"Development server\"\n    },\n    {\n      \"url\": \"http://45.77.89.90:4000\",\n      \"description\": \"Etimo server\"\n    },\n    {\n      \"url\": \"https://achievements-test.staging.etimo-test.live/api\",\n      \"description\": \"Staging server\"\n    },\n    {\n      \"url\": \"https://achievements-live.staging.etimo-test.live/api\",\n      \"description\": \"Production server\"\n    }\n  ],\n  \"components\": {\n    \"securitySchemes\": {\n      \"jwtCookie\": {\n        \"type\": \"apiKey\",\n        \"in\": \"cookie\",\n        \"name\": \"ea-jwt\"\n      },\n      \"refreshTokenCookie\": {\n        \"type\": \"apiKey\",\n        \"in\": \"cookie\",\n        \"name\": \"ea-rt\"\n      },\n      \"ApiKeyParameter\": {\n        \"type\": \"apiKey\",\n        \"in\": \"query\",\n        \"name\": \"apiKey\"\n      }\n    },\n    \"schemas\": {\n      \"AccessToken\": {\n        \"title\": \"AccessToken\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"access_token\": {\n            \"type\": \"string\",\n            \"description\": \"Bearer access token used for authorization.\",\n            \"example\": \"U2FsdGVkX1/Vvv89nfMwgfO/CG24SnP9LIvf/h8VkbmiRIWa0dDraOuDSAEILlI3+ZvZ...\"\n          },\n          \"token_type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of token issued.\",\n            \"example\": \"bearer\"\n          },\n          \"expires_in\": {\n            \"type\": \"integer\",\n            \"description\": \"In how many seconds the token will expire.\",\n            \"example\": 3600\n          },\n          \"rt_expires_in\": {\n            \"type\": \"integer\",\n            \"description\": \"In how many seconds the refresh token will expire.\",\n            \"example\": 2592000\n          },\n          \"refresh_token\": {\n            \"type\": \"string\",\n            \"description\": \"The refresh token that can be used to get a new access token.\",\n            \"example\": \"U2FsdGVkX18fnSqv0NhgmH4gkUT+f4VYynZD5WA2hALnLluoop4wa98soXGxUVPcrHMa...\"\n          },\n          \"scopes\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"The scopes assigned to the access token.\",\n            \"example\": \"r:achievements rw:awards r:users\"\n          }\n        }\n      },\n      \"NewAward\": {\n        \"title\": \"NewAward\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"userIds\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          \"achievementId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"awardedByUserId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          }\n        },\n        \"required\": [\n          \"userIds\",\n          \"achievementId\"\n        ]\n      },\n      \"NewBadgeAward\": {\n        \"title\": \"NewBadgeAward\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"userIds\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          \"badgeId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          }\n        },\n        \"required\": [\n          \"userIds\",\n          \"badgeId\"\n        ]\n      },\n      \"Role\": {\n        \"title\": \"Role\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"key\": {\n            \"type\": \"string\",\n            \"example\": \"user\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"example\": \"User\"\n          },\n          \"description\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"TokenInfo\": {\n        \"title\": \"TokenInfo\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"active\": {\n            \"type\": \"boolean\",\n            \"description\": \"If the token is active\",\n            \"example\": true\n          },\n          \"scope\": {\n            \"type\": \"string\",\n            \"description\": \"The scopes assigned to the token.\",\n            \"example\": \"r:achievements rw:awards r:users\"\n          },\n          \"username\": {\n            \"type\": \"string\",\n            \"description\": \"The username of the owner of the token.\",\n            \"example\": \"niclas.lindstedt@etimo.se\"\n          },\n          \"token_type\": {\n            \"type\": \"string\",\n            \"description\": \"The type of token.\",\n            \"example\": \"bearer\"\n          },\n          \"jti\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"A unique identifier for the token.\",\n            \"example\": \"fe893f86-4107-472e-b34e-c4a9abb06fc5\"\n          },\n          \"sub\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"description\": \"The subject of the token (usually the userId).\",\n            \"example\": \"572c51c0-6dd4-4ef8-90da-b7aac0ef6846\"\n          },\n          \"iss\": {\n            \"type\": \"string\",\n            \"description\": \"The issuer of the token.\",\n            \"example\": \"etimo-achievements\"\n          },\n          \"aud\": {\n            \"type\": \"string\",\n            \"description\": \"The audience of the token.\",\n            \"example\": \"etimo-achievements\"\n          },\n          \"exp\": {\n            \"type\": \"number\",\n            \"description\": \"The unix timestamp when the token expires.\",\n            \"example\": 1647954723\n          },\n          \"iat\": {\n            \"type\": \"number\",\n            \"description\": \"The unix timestamp when the token was issued.\",\n            \"example\": 1647951123\n          }\n        }\n      },\n      \"TokenRequest\": {\n        \"title\": \"TokenRequest\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"grant_type\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"client_credentials\"\n            ]\n          },\n          \"client_id\": {\n            \"type\": \"string\",\n            \"description\": \"The client id\",\n            \"example\": \"eb64a4dc-02fa-44dd-aa55-026160dcdc6b\"\n          },\n          \"client_secret\": {\n            \"type\": \"string\",\n            \"description\": \"The client secret\",\n            \"example\": \"2e7f1d2b-3ac8-45da-b18f-d12bd52b5f48\"\n          }\n        }\n      },\n      \"TokenValidation\": {\n        \"title\": \"TokenValidation\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"expires_in\": {\n            \"type\": \"integer\",\n            \"description\": \"In how many seconds the token will expire.\",\n            \"example\": 3600\n          }\n        }\n      },\n      \"UserInfo\": {\n        \"title\": \"UserInfo\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"The user's id.\",\n            \"example\": \"238ec288-ffc2-41ad-918b-7aa1f4f855dd\"\n          },\n          \"email\": {\n            \"type\": \"string\",\n            \"description\": \"The user's e-mail.\",\n            \"example\": \"niclas.lindstedt@etimo.se\"\n          },\n          \"verified_email\": {\n            \"type\": \"boolean\",\n            \"description\": \"Whether the e-mail has been verified or not.\",\n            \"example\": true\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The user's full name.\",\n            \"example\": \"Niclas Lindstedt\"\n          },\n          \"given_name\": {\n            \"type\": \"string\",\n            \"description\": \"The user's given name.\",\n            \"example\": \"Niclas\"\n          },\n          \"family_name\": {\n            \"type\": \"string\",\n            \"description\": \"The user's family name.\",\n            \"example\": \"Lindstedt\"\n          },\n          \"picture\": {\n            \"type\": \"string\",\n            \"description\": \"An url to the user's picture.\",\n            \"example\": \"https://picsum.photos/200\"\n          },\n          \"hd\": {\n            \"type\": \"string\",\n            \"description\": \"The hosted domain of the user.\",\n            \"example\": \"etimo.se\"\n          }\n        }\n      },\n      \"Achievement\": {\n        \"title\": \"Achievement\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the achievement\",\n            \"maxLength\": 255,\n            \"example\": \"Coffee Achievement\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of when the achievement should be awarded\",\n            \"maxLength\": 255,\n            \"example\": \"Put on coffee for the gang.\"\n          },\n          \"achievementPoints\": {\n            \"type\": \"integer\",\n            \"description\": \"How many achievement points that should be awarded when this achievement is achieved\",\n            \"example\": 500\n          },\n          \"cooldownMinutes\": {\n            \"type\": \"integer\",\n            \"description\": \"Minutes until the this achievement becomes available again after awarding it\",\n            \"example\": 15,\n            \"default\": 0\n          },\n          \"selfAwardable\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is it possible to give the achievement to yourself?\",\n            \"example\": true,\n            \"default\": true\n          },\n          \"globalCooldowns\": {\n            \"type\": \"boolean\",\n            \"description\": \"Is the cooldown for this achievement applied globally? I.e. the award cannot be given to anyone when the cooldown is still active\",\n            \"example\": false,\n            \"default\": false\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"description\",\n          \"achievementPoints\"\n        ]\n      },\n      \"AchievementFavorite\": {\n        \"title\": \"AchievementFavorite\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"userId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"achievementId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          }\n        },\n        \"required\": [\n          \"achievementId\"\n        ]\n      },\n      \"Award\": {\n        \"title\": \"Award\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"userId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"awardedByUserId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"achievementId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": [\n          \"userId\",\n          \"achievementId\"\n        ]\n      },\n      \"BadgeAward\": {\n        \"title\": \"BadgeAward\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"userId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"awardedByUserId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"badgeId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"createdAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          }\n        },\n        \"required\": [\n          \"userId\",\n          \"badgeId\"\n        ]\n      },\n      \"Badge\": {\n        \"title\": \"Badge\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the badge\",\n            \"maxLength\": 255,\n            \"example\": \"Åre 2022\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of when the badge should be awarded\",\n            \"maxLength\": 255,\n            \"example\": \"Åk med Etimo till Åre\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"description\"\n        ]\n      },\n      \"Highscore\": {\n        \"title\": \"Highscore\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"userId\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"achievements\": {\n            \"type\": \"integer\",\n            \"description\": \"How many achievements have been awarded to the user\",\n            \"example\": 25\n          },\n          \"points\": {\n            \"type\": \"integer\",\n            \"description\": \"How many achievement points have been awarded to the user\",\n            \"example\": 12000\n          },\n          \"kickback\": {\n            \"type\": \"integer\",\n            \"description\": \"How many kickback achievement points have been awarded to the user\",\n            \"example\": 1200\n          },\n          \"pointsPerAchievement\": {\n            \"type\": \"integer\",\n            \"description\": \"Total score divided by amount of achievements\",\n            \"example\": 528\n          },\n          \"totalPoints\": {\n            \"type\": \"integer\",\n            \"description\": \"Total points\",\n            \"example\": 13200\n          },\n          \"givenAchievements\": {\n            \"type\": \"integer\",\n            \"description\": \"How many achievements the user have given other users\",\n            \"example\": 5\n          },\n          \"kickbackPerAchievement\": {\n            \"type\": \"integer\",\n            \"description\": \"Total kickback divided by amount of achievements\",\n            \"example\": 48\n          },\n          \"rank\": {\n            \"type\": \"integer\",\n            \"description\": \"Rank of user\",\n            \"example\": 1\n          }\n        }\n      },\n      \"Season\": {\n        \"title\": \"Season\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 3,\n            \"example\": \"November 2022\"\n          },\n          \"startsAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"When the season starts\",\n            \"example\": \"2017-01-01T00:00:00Z\"\n          },\n          \"endsAt\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"description\": \"When the season ends\",\n            \"example\": \"2017-02-01T00:00:00Z\"\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"startsAt\"\n        ]\n      },\n      \"User\": {\n        \"title\": \"User\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"readOnly\": true\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"minLength\": 3,\n            \"example\": \"Niclas Lindstedt\"\n          },\n          \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n            \"example\": \"niclas.lindstedt@etimo.se\"\n          },\n          \"slackHandle\": {\n            \"type\": \"string\",\n            \"description\": \"The @slack handle of the user\",\n            \"example\": \"@niclas\"\n          },\n          \"role\": {\n            \"type\": \"string\",\n            \"description\": \"The role of the user\",\n            \"example\": \"user\"\n          },\n          \"image\": {\n            \"type\": \"string\",\n            \"description\": \"The url to the user's image\",\n            \"example\": \"https://lh3.googleusercontent.com/a/AItbvmmjI2iBhkmtsdRhooDvMuW25VgaZGBA5avYuM9h\",\n            \"readOnly\": true\n          }\n        },\n        \"required\": [\n          \"name\",\n          \"email\"\n        ]\n      }\n    }\n  },\n  \"paths\": {\n    \"/auth/logout\": {\n      \"get\": {\n        \"summary\": \"Logout\",\n        \"operationId\": \"authLogout\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Logout success.\",\n            \"headers\": {\n              \"Set-Cookie\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"ea-jwt=deleted; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT, ea-rt=deleted; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT\"\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/achievements\": {\n      \"get\": {\n        \"summary\": \"Get a list of achievements\",\n        \"operationId\": \"getAchievements\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Achievement\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      },\n      \"post\": {\n        \"summary\": \"Create an achievement\",\n        \"operationId\": \"createAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Achievement\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"format\": \"uuid\",\n                      \"description\": \"ID of the created resource.\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"GetAchievementById\": {\n                \"operationId\": \"getAchievement\",\n                \"parameters\": {\n                  \"achievementId\": \"$response.body#/id\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      }\n    },\n    \"/achievements/list\": {\n      \"post\": {\n        \"summary\": \"Get many achievements by list of ids\",\n        \"operationId\": \"listAchievements\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\",\n                  \"format\": \"uuid\",\n                  \"description\": \"ID of the desired resources.\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Achievement\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      }\n    },\n    \"/achievements/favorites\": {\n      \"get\": {\n        \"summary\": \"Get user's favorite achievements\",\n        \"operationId\": \"getFavoriteAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      },\n      \"post\": {\n        \"summary\": \"Add an achievement to your favorites\",\n        \"operationId\": \"createFavoriteAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/AchievementFavorite\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      }\n    },\n    \"/achievements/favorites/{achievementId}\": {\n      \"delete\": {\n        \"summary\": \"Remove an achievement from favorites\",\n        \"operationId\": \"removeFavoriteAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"achievementId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      }\n    },\n    \"/achievements/{achievementId}\": {\n      \"get\": {\n        \"summary\": \"Get a single achievement\",\n        \"operationId\": \"getAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"achievementId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Achievement\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      },\n      \"put\": {\n        \"summary\": \"Update an achievement\",\n        \"operationId\": \"updateAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"achievementId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Achievement\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      },\n      \"delete\": {\n        \"summary\": \"Delete an achievement\",\n        \"operationId\": \"deleteAchievement\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"achievementId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Achievements\"\n        ]\n      }\n    },\n    \"/auth/login/{provider}\": {\n      \"get\": {\n        \"summary\": \"Start a login request\",\n        \"operationId\": \"authLogin\",\n        \"security\": [],\n        \"parameters\": [\n          {\n            \"name\": \"provider\",\n            \"in\": \"path\",\n            \"description\": \"The OAuth provider to use for login.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"state\",\n            \"in\": \"query\",\n            \"description\": \"The state to return to the client after authentication.\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"301\": {\n            \"description\": \"Redirection to OAuth2 service.\",\n            \"headers\": {\n              \"Location\": {\n                \"description\": \"URI to OAuth2 token endpoint.\",\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"format\": \"uri\"\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/auth/refresh\": {\n      \"get\": {\n        \"summary\": \"Renew access token\",\n        \"operationId\": \"authRefresh\",\n        \"security\": [\n          {\n            \"refreshTokenCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Authentication success.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AccessToken\"\n                }\n              }\n            },\n            \"headers\": {\n              \"Set-Cookie\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"ea-jwt=abcde12345; Path=/; Secure; HttpOnly, ea-rt=abcde12345; Path=/; Secure; HttpOnly\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/auth/token\": {\n      \"post\": {\n        \"summary\": \"Get a token\",\n        \"operationId\": \"authToken\",\n        \"security\": [],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/x-www-form-urlencoded\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/TokenRequest\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Authentication success.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AccessToken\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/auth/callback/{provider}\": {\n      \"get\": {\n        \"summary\": \"Callback URL for OAuth2 code flow\",\n        \"operationId\": \"authCallback\",\n        \"security\": [],\n        \"x-allow-unknown-query-parameters\": true,\n        \"parameters\": [\n          {\n            \"name\": \"provider\",\n            \"in\": \"path\",\n            \"description\": \"The OAuth provider to use for login.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"name\": \"code\",\n            \"in\": \"query\",\n            \"description\": \"The OAuth2 code to exchange for an access token.\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"allowReserved\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Authentication success.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/AccessToken\"\n                }\n              }\n            },\n            \"headers\": {\n              \"Set-Cookie\": {\n                \"schema\": {\n                  \"type\": \"string\",\n                  \"example\": \"ea-jwt=abcde12345; Path=/; Secure; HttpOnly, ea-rt=abcde12345; Path=/; Secure; HttpOnly\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/auth/userinfo\": {\n      \"get\": {\n        \"summary\": \"Get userinfo from token\",\n        \"operationId\": \"authUserInfo\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/UserInfo\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/auth/validate\": {\n      \"get\": {\n        \"summary\": \"Validate JWT token\",\n        \"operationId\": \"authValidate\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/TokenValidation\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/auth/introspect\": {\n      \"get\": {\n        \"summary\": \"Token introspection\",\n        \"operationId\": \"authIntrospect\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/TokenInfo\"\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Auth\"\n        ]\n      }\n    },\n    \"/awards\": {\n      \"get\": {\n        \"summary\": \"Get a list of awards\",\n        \"operationId\": \"getAwards\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"name\": \"achievementId\",\n            \"in\": \"query\",\n            \"description\": \"Only return data with this achievementId\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          {\n            \"name\": \"awardedByUserId\",\n            \"in\": \"query\",\n            \"description\": \"Only return awards with this awardedByUserId\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          {\n            \"name\": \"userId\",\n            \"in\": \"query\",\n            \"description\": \"Only return data with the value of provided userId\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Award\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Awards\"\n        ]\n      },\n      \"post\": {\n        \"summary\": \"Give awards to users\",\n        \"operationId\": \"createAward\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/NewAward\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"string\",\n                    \"format\": \"uuid\",\n                    \"description\": \"ID of the desired resources.\"\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"GetAwardById\": {\n                \"operationId\": \"getAward\",\n                \"parameters\": {\n                  \"userId\": \"$response.body#/id\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The user/achievement could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Awards\"\n        ]\n      }\n    },\n    \"/awards/{awardId}\": {\n      \"get\": {\n        \"summary\": \"Get a single award\",\n        \"operationId\": \"getAward\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"awardId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/NewAward\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Awards\"\n        ]\n      },\n      \"delete\": {\n        \"summary\": \"Delete an award\",\n        \"operationId\": \"deleteAward\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"awardId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Awards\"\n        ]\n      }\n    },\n    \"/badge-awards\": {\n      \"post\": {\n        \"summary\": \"Give a user a badge\",\n        \"operationId\": \"createBadgeAward\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/NewBadgeAward\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"format\": \"uuid\",\n                      \"description\": \"ID of the created resource.\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"GetAwardById\": {\n                \"operationId\": \"getBadgeAward\",\n                \"parameters\": {\n                  \"userId\": \"$response.body#/id\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The user/badge could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Badge Awards\"\n        ]\n      },\n      \"get\": {\n        \"summary\": \"Get a list of badge awards\",\n        \"operationId\": \"getBadgeAwards\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"name\": \"userId\",\n            \"in\": \"query\",\n            \"description\": \"Only return data with the value of provided userId\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          },\n          {\n            \"name\": \"badgeId\",\n            \"in\": \"query\",\n            \"description\": \"Only return data with this badgeId\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/BadgeAward\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Badge Awards\"\n        ]\n      }\n    },\n    \"/badge-awards/{badgeAwardId}\": {\n      \"get\": {\n        \"summary\": \"Get a single badge award\",\n        \"operationId\": \"getBadgeAward\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"badgeAwardId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/BadgeAward\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Badge Awards\"\n        ]\n      },\n      \"delete\": {\n        \"summary\": \"Delete a badge award\",\n        \"operationId\": \"deleteBadgeAward\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"badgeAwardId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Badge Awards\"\n        ]\n      }\n    },\n    \"/badges\": {\n      \"post\": {\n        \"summary\": \"Create a badge\",\n        \"operationId\": \"createBadge\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Badge\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The badge was created.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"format\": \"uuid\",\n                      \"description\": \"ID of the created resource.\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"GetAchievementById\": {\n                \"operationId\": \"getBadge\",\n                \"parameters\": {\n                  \"achievementId\": \"$response.body#/id\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Badges\"\n        ]\n      },\n      \"get\": {\n        \"summary\": \"Get a list of badges\",\n        \"operationId\": \"getBadges\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Badge\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Badges\"\n        ]\n      }\n    },\n    \"/badges/{badgeId}\": {\n      \"get\": {\n        \"summary\": \"Get a single badge\",\n        \"operationId\": \"getBadge\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"badgeId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Badge\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Badges\"\n        ]\n      },\n      \"put\": {\n        \"summary\": \"Update a badge\",\n        \"operationId\": \"updateBadge\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"badgeId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Badge\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Badges\"\n        ]\n      },\n      \"delete\": {\n        \"summary\": \"Delete a badge\",\n        \"operationId\": \"deleteBadge\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"badgeId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Badges\"\n        ]\n      }\n    },\n    \"/badges/list\": {\n      \"post\": {\n        \"summary\": \"Get many badges by list of ids\",\n        \"operationId\": \"listBadges\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\",\n                  \"format\": \"uuid\",\n                  \"description\": \"ID of the desired resources.\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Badge\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Badges\"\n        ]\n      }\n    },\n    \"/feature/{featureName}\": {\n      \"get\": {\n        \"summary\": \"Get feature flag status\",\n        \"operationId\": \"getFeature\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"featureName\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          }\n        },\n        \"tags\": [\n          \"Features\"\n        ]\n      }\n    },\n    \"/highscores/{seasonId}\": {\n      \"get\": {\n        \"summary\": \"Get a list of awards\",\n        \"operationId\": \"getHighscores\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          },\n          {\n            \"name\": \"seasonId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Highscore\"\n                  }\n                }\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Highscores\"\n        ]\n      }\n    },\n    \"/probes/readiness\": {\n      \"get\": {\n        \"summary\": \"Readiness probe\",\n        \"operationId\": \"getReadiness\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          }\n        },\n        \"tags\": [\n          \"Probes\"\n        ]\n      }\n    },\n    \"/probes/liveness\": {\n      \"get\": {\n        \"summary\": \"Liveness probe\",\n        \"operationId\": \"getLiveness\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          }\n        },\n        \"tags\": [\n          \"Probes\"\n        ]\n      }\n    },\n    \"/seasons\": {\n      \"get\": {\n        \"summary\": \"Get a list of seasons\",\n        \"operationId\": \"getSeasons\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Season\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"Seasons\"\n        ]\n      },\n      \"post\": {\n        \"summary\": \"Create a season\",\n        \"operationId\": \"createSeason\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Season\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The season was created.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"format\": \"uuid\",\n                      \"description\": \"ID of the created resource.\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"GetSeasonById\": {\n                \"operationId\": \"getSeason\",\n                \"parameters\": {\n                  \"seasonId\": \"$response.body#/id\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Seasons\"\n        ]\n      }\n    },\n    \"/seasons/active\": {\n      \"get\": {\n        \"summary\": \"Get a list of active seasons\",\n        \"operationId\": \"getActiveSeasons\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Season\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"Seasons\"\n        ]\n      }\n    },\n    \"/seasons/{seasonId}\": {\n      \"put\": {\n        \"summary\": \"Update a season\",\n        \"operationId\": \"updateSeason\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"seasonId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Season\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Seasons\"\n        ]\n      }\n    },\n    \"/slack/list-achievements\": {\n      \"post\": {\n        \"summary\": \"Display achievement list modal in Slack\",\n        \"security\": [\n          {\n            \"ApiKeyParameter\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The modal was created.\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Slack\"\n        ]\n      }\n    },\n    \"/slack/award-achievement\": {\n      \"post\": {\n        \"summary\": \"Show award achievement list modal in Slack\",\n        \"security\": [\n          {\n            \"ApiKeyParameter\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The modal was created.\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Slack\"\n        ]\n      }\n    },\n    \"/slack/interact\": {\n      \"post\": {\n        \"summary\": \"Endpoint for slack to respond to interact messages (modals etc...)\",\n        \"security\": [\n          {\n            \"ApiKeyParameter\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The modal was created.\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Slack\"\n        ]\n      }\n    },\n    \"/slack/create-achievement\": {\n      \"post\": {\n        \"summary\": \"Display achievement creation modal in Slack\",\n        \"security\": [\n          {\n            \"ApiKeyParameter\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The modal was created.\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Slack\"\n        ]\n      }\n    },\n    \"/slack/sync-users\": {\n      \"post\": {\n        \"summary\": \"Sync slack users with the database\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Users were synced.\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Slack\"\n        ]\n      }\n    },\n    \"/users\": {\n      \"get\": {\n        \"summary\": \"Get a list of users\",\n        \"operationId\": \"getUsers\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"skip\",\n            \"in\": \"query\",\n            \"description\": \"The number of items to skip before starting to collect the result set.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 0\n            }\n          },\n          {\n            \"name\": \"take\",\n            \"in\": \"query\",\n            \"description\": \"The numbers of items to return.\",\n            \"schema\": {\n              \"type\": \"integer\",\n              \"minimum\": 1,\n              \"maximum\": 50\n            }\n          },\n          {\n            \"name\": \"orderBy\",\n            \"in\": \"query\",\n            \"description\": \"The order of the result set.\",\n            \"example\": [\n              \"id~desc\"\n            ],\n            \"schema\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/User\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      },\n      \"post\": {\n        \"summary\": \"Create a user\",\n        \"operationId\": \"createUser\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"The user was created.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"id\": {\n                      \"type\": \"string\",\n                      \"format\": \"uuid\",\n                      \"description\": \"ID of the created resource.\"\n                    }\n                  }\n                }\n              }\n            },\n            \"links\": {\n              \"GetUserById\": {\n                \"operationId\": \"getUser\",\n                \"parameters\": {\n                  \"userId\": \"$response.body#/id\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      }\n    },\n    \"/users/list\": {\n      \"post\": {\n        \"summary\": \"Get many users by list of ids\",\n        \"operationId\": \"listAchievements\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\",\n                  \"format\": \"uuid\",\n                  \"description\": \"ID of the desired resources.\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/User\"\n                  }\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      }\n    },\n    \"/users/roles\": {\n      \"get\": {\n        \"summary\": \"Get all roles\",\n        \"operationId\": \"getRoles\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Role\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      }\n    },\n    \"/users/{userId}\": {\n      \"get\": {\n        \"summary\": \"Get a single user\",\n        \"operationId\": \"getUser\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"userId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      },\n      \"put\": {\n        \"summary\": \"Update a user\",\n        \"operationId\": \"updateUser\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"userId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      },\n      \"delete\": {\n        \"summary\": \"Delete a user\",\n        \"operationId\": \"deleteUser\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"parameters\": [\n          {\n            \"name\": \"userId\",\n            \"in\": \"path\",\n            \"required\": true,\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      }\n    },\n    \"/profile\": {\n      \"get\": {\n        \"summary\": \"Get your profile\",\n        \"operationId\": \"getProfile\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/User\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          },\n          \"404\": {\n            \"description\": \"The requested resource could not be found.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      },\n      \"put\": {\n        \"summary\": \"Update your profile\",\n        \"operationId\": \"updateProfile\",\n        \"security\": [\n          {\n            \"jwtCookie\": []\n          }\n        ],\n        \"requestBody\": {\n          \"required\": true,\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/User\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"204\": {\n            \"description\": \"The request was successful\"\n          },\n          \"400\": {\n            \"description\": \"The request was invalid and could/would not be processed.\"\n          },\n          \"401\": {\n            \"description\": \"The request was unauthorized.\"\n          }\n        },\n        \"tags\": [\n          \"Users\"\n        ]\n      }\n    },\n    \"/version\": {\n      \"get\": {\n        \"summary\": \"Get application version information\",\n        \"security\": [],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"The request was successful\"\n          }\n        },\n        \"tags\": [\n          \"Version\"\n        ]\n      }\n    }\n  },\n  \"tags\": []\n}",
			"canonicalURL": "/github.com/Etimo/etimo-achievements@fac496b114907bb94d5f8ed46231e21e49221460/-/blob/packages/api/src/openapi.json",
			"externalURLs": [
				{
					"url": "https://github.com/Etimo/etimo-achievements/blob/fac496b114907bb94d5f8ed46231e21e49221460/packages/api/src/openapi.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/users/list\": post: at packages/api/src/openapi.json:2643:24: duplicate operationId: \"listAchievements\""
}