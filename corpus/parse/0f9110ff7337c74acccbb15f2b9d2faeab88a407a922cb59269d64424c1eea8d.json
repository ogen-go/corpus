{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/topcoder-platform/submissions-api"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/swagger.yaml",
			"byteSize": 78086,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e\n    REST API for Topcoder Submissions.\n\n    ### Pagination\n      Requests that return multiple items will be paginated to 20 items by default. You can specify\n      further pages with the `page` parameter. You can also set a custom page\n      size up to 100 with the `perPage` parameter.\n\n      Pagination response data is included in http headers. By Default, the response header contains links with `next`, `last`, `first`, `prev` resource links.\n  version: 5.0.0\n  title: Topcoder Submissions REST API\n  termsOfService: http://topcoder.com/terms/\n  contact:\n    url: http://www.topcoder.com/support\n    email: support@topcoder.com\ntags:\n  - name: Submissions\n    description: Everything about submissions.\n  - name: Review summations\n    description: Everything about review summations.\n  - name: Reviews\n    description: Everything about reviews.\n  - name: Review types\n    description: Everything about review types.\nsecurity:\n  - Bearer: []\npaths:\n  /submissions:\n    get:\n      summary: Get all submissions.\n      description: \u003e\n        Get all submissions. Link headers are sent back and they have rel set to\n        prev, next, first, last and contain the relevant URL.\n\n\n        Resulted collection of submissions can be filtered using filter parameters `type`, `url`, `memberId`, `challengeId` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.\n      tags:\n        - Submissions\n      operationId: getSubmissions\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/orderBy\"\n        - $ref: \"#/components/parameters/sortBy\"\n        - $ref: \"#/components/parameters/filterSubmissionType\"\n        - $ref: \"#/components/parameters/filterSubmissionUrl\"\n        - $ref: \"#/components/parameters/filterSubmissionMemberId\"\n        - $ref: \"#/components/parameters/filterSubmissionChallengeId\"\n        - $ref: \"#/components/parameters/filterSubmissionLegacySubmissionId\"\n        - $ref: \"#/components/parameters/filterSubmissionLegacyUploadId\"\n        - $ref: \"#/components/parameters/filterSubmissionSubmissionPhaseId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewScore\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewTypeId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewReviewerId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewScoreCardId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewSubmissionId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewStatus\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewSummationScoreCardId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewSummationSubmissionId\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewSummationAggregateScore\"\n        - $ref: \"#/components/parameters/filterSubmissionReviewSummationIsPassing\"\n      responses:\n        \"200\":\n          description: OK - the request was successful, the submissions resource are\n            returned.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Submission\"\n                example:\n                  - id: a12a4180-65aa-42ec-a945-5fd21dec0503\n                    type: ContestSubmission\n                    url: https://software.topcoder.com/review/actions/DownloadContestSubmission?uid=123456\n                    memberId: a12a4180-65aa-42ec-a945-5fd21dec0501\n                    challengeId: a12a4180-65aa-42ec-a945-5fd21dec0502\n                    legacySubmissionId: a12a4180-65aa-42ec-a945-5fd21dec0502\n                    legacyUploadId: a12a4180-65aa-42ec-a945-5fd21dec0502\n                    submissionPhaseId: 764567\n                    submittedDate: 2018-05-20T07:00:30.123Z\n                    created: 2018-05-20T07:00:30.123Z\n                    updated: 2018-06-01T07:36:28.178Z\n                    createdBy: topcoder user\n                    updatedBy: topcoder user\n                  - id: a12a4180-65aa-42ec-a945-5fd21dec0513\n                    type: ContestSubmission\n                    url: https://software.topcoder.com/review/actions/DownloadContestSubmission?uid=123457\n                    memberId: a12a4180-65aa-42ec-a945-5fd21dec0552\n                    challengeId: a12a4180-65aa-42ec-a945-5fd21dec0502\n                    legacySubmissionId: a12a4180-65aa-42ec-a945-5fd21dec0502\n                    legacyUploadId: a12a4180-65aa-42ec-a945-5fd21dec0502\n                    submissionPhaseId: 764567\n                    submittedDate: 2018-05-20T08:00:30.000Z\n                    created: 2018-05-20T08:00:30.000Z\n                    updated: 2018-06-01T09:23:00.178Z\n                    createdBy: topcoder user\n                    updatedBy: topcoder user\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. Link\n        headers are sent back and they have rel set to prev, next, first, last\n        and contain the relevant URL.\n\n\n        Requested submissions can be filtered using filter parameters `type`, `url`, `memberId`, `challengeId` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.\n      tags:\n        - Submissions\n      operationId: headSubmissions\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/filterSubmissionType\"\n        - $ref: \"#/components/parameters/filterSubmissionUrl\"\n        - $ref: \"#/components/parameters/filterSubmissionMemberId\"\n        - $ref: \"#/components/parameters/filterSubmissionChallengeId\"\n        - $ref: \"#/components/parameters/filterSubmissionLegacySubmissionId\"\n        - $ref: \"#/components/parameters/filterSubmissionLegacyUploadId\"\n        - $ref: \"#/components/parameters/filterSubmissionSubmissionPhaseId\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    post:\n      summary: Create a submission.\n      description: \u003e\n        Create a new submission.\n\n\n        **Authorization:** Submission creation is accessible by roles `topcoder user`, `admin` and `copilot`.\n\n        **Note** Value for `submittedDate` attribute can only be provided by users with `admin` role\n      tags:\n        - Submissions\n      operationId: createSubmission\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                submission:\n                  description: The submission file to upload.\n                  type: string\n                  format: binary\n                url:\n                  description: Submission file url.\n                  type: string\n                fileType:\n                  description: File type of uploaded file or URL provided, Defaults to zip\n                    if not provided\n                  type: string\n                type:\n                  description: Submission type.\n                  type: string\n                  enum:\n                    - ContestSubmission\n                memberId:\n                  description: Member Id.\n                  type: string\n                challengeId:\n                  description: Challenge Id.\n                  type: string\n                legacySubmissionId:\n                  description: Legacy Submission Id\n                  type: string\n                legacyUploadId:\n                  description: Legacy Submission Id\n                  type: string\n                submissionPhaseId:\n                  description: Submission Phase Id\n                  type: integer\n                submittedDate:\n                  description: Date of submission (defaults to submission creation date if\n                    none passed)\n                  type: string\n                  format: date-time\n              required:\n                - type\n                - memberId\n                - challengeId\n      responses:\n        \"201\":\n          description: Created - The request was successful and the resource is returned.\n          headers:\n            Location:\n              description: The Location response header indicates the URL to redirect a\n                page to or created resource. It only provides a meaning when\n                served with a 3xx (redirection) or 201 (created) status\n                response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"409\":\n          $ref: \"#/components/schemas/Conflict\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/submissions/{submissionId}\":\n    get:\n      summary: Get the submission.\n      description: \u003e\n        Get the submission by id.\n\n\n        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.\n      tags:\n        - Submissions\n      operationId: getSubmission\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      responses:\n        \"200\":\n          description: OK - the request was successful and the submission is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. It does\n        not contain response body.\n\n\n        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.\n      tags:\n        - Submissions\n      operationId: headSubmission\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    put:\n      summary: Update the submission.\n      description: |\n        Update the submission by id.\n\n        **Authorization:** Submission update is accessible only by `admin` role.\n      tags:\n        - Submissions\n      operationId: updateSubmission\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdatableSubmission\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    patch:\n      summary: Partially update the submission.\n      description: \u003e\n        Allows to partially modify the submission with the provided request body\n        properties.\n\n\n        **Authorization:** Partially modify of submission is accessible only by `admin` role.\n      tags:\n        - Submissions\n      operationId: partiallyUpdateSubmission\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PartiallySubmission\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Submission\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    delete:\n      summary: Delete the submission.\n      description: \u003e\n        Delete the submission.\n\n\n        **Authorization:** Submission deletion is accessible only by `admin` role.\n      tags:\n        - Submissions\n      operationId: deleteSubmission\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      responses:\n        \"204\":\n          $ref: \"#/components/schemas/NoContent\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/submissions/{submissionId}/download\":\n    get:\n      summary: Download the Submission from S3\n      description: \u003e\n        Download the submission from S3 using id.\n\n\n        **Authorization:** Submission is accessible by roles `topcoder user`, `admin` and `copilot`.\n      tags:\n        - Submissions\n      operationId: downloadSubmission\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      responses:\n        \"200\":\n          description: Submission downloaded successfully\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/submissions/{submissionId}/artifacts\":\n    post:\n      summary: Create artifact for the given submission ID\n      description: \u003e\n        Create artifact in S3\n\n\n        **Authorization:** Create artifact follows the same authorization rules as Create submission\n      tags:\n        - Submissions\n      operationId: createArtifact\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                artifact:\n                  description: Artifact to be uploaded. Pass the name of the artifact along\n                    with the data\n                  type: string\n                  format: binary\n              required:\n                - artifact\n      responses:\n        \"200\":\n          description: Artifact created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  artifact:\n                    type: string\n                    description: Uploaded artifact name\n                    example: c56a4180-65aa-42ec-a945-5fd21dec0503.json\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    get:\n      summary: List artifacts for the given Submission ID\n      description: \u003e\n        List artifacts for given Submission ID from S3\n\n\n        **Authorization:** List artifact follows the same authorization rules as Get submission\n      tags:\n        - Submissions\n      operationId: listArtifacts\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n      responses:\n        \"200\":\n          description: Artifacts from S3 listed successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  artifacts:\n                    type: array\n                    description: Artifact IDs list\n                    items:\n                      type: string\n                      example: c56a4180-65aa-42ec-a945-5fd21dec0503\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/submissions/{submissionId}/artifacts/{file}/download\":\n    get:\n      summary: Download artifact from S3\n      description: \u003e\n        Download artifact from S3 using Submission ID and Artifact ID\n\n\n        **Authorization:** Download artifact follows same authorization rules as Download submission\n      tags:\n        - Submissions\n      operationId: downloadArtifact\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n        - $ref: \"#/components/parameters/fileParam\"\n      responses:\n        \"200\":\n          description: Artifact from S3 downloaded successfully\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/submissions/{submissionId}/artifacts/{file}\":\n    delete:\n      summary: Delete artifact from S3\n      description: \u003e\n        Delete artifact from S3 using Submission ID and Artifact ID\n\n\n        **Authorization:** Delete artifact follows same authorization rules as Delete submission\n      tags:\n        - Submissions\n      operationId: deleteArtifact\n      parameters:\n        - $ref: \"#/components/parameters/submissionIdParam\"\n        - $ref: \"#/components/parameters/fileParam\"\n      responses:\n        \"204\":\n          description: Artifact from S3 deleted successfully\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  /reviewSummations:\n    get:\n      summary: Get all review summations.\n      description: \u003e\n        Get all review summations. Link headers are sent back and they have rel\n        set to prev, next, first, last and contain the relevant URL.\n\n\n        Resulted collection of review summations can be filtered using filter parameters `submissionId`, `aggregateScore`, `scoreCardId`, `isPassing` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review summations\n      operationId: getReviewSummations\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/orderBy\"\n        - $ref: \"#/components/parameters/sortBy\"\n        - $ref: \"#/components/parameters/filterReviewSummationSubmissionId\"\n        - $ref: \"#/components/parameters/filterReviewSummationAaggregateScore\"\n        - $ref: \"#/components/parameters/filterReviewSummationScoreCardId\"\n        - $ref: \"#/components/parameters/filterReviewSummationIsPassing\"\n        - $ref: \"#/components/parameters/filterReviewSummationIsFinal\"\n      responses:\n        \"200\":\n          description: OK - the request was successful, the resource are returned.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ReviewSummation\"\n                example:\n                  - id: a12a4180-65aa-42ec-a945-5fd21dec1503\n                    submissionId: a12a4180-65aa-42ec-a945-5fd21dec1567\n                    aggregateScore: 17.8\n                    scoreCardId: 123456789\n                    isPassing: false\n                    isFinal: false\n                    reviewedDate: 2018-05-20T07:00:30.123Z\n                    created: 2018-05-20T07:00:30.123Z\n                    updated: 2018-06-01T07:36:28.178Z\n                    createdBy: copilot\n                    updatedBy: copilot\n                  - id: a12a4180-65aa-42ec-a945-5fd21dec1504\n                    submissionId: a12a4180-65aa-42ec-a945-5fd21dec1568\n                    aggregateScore: 97.8\n                    scoreCardId: 123456789\n                    isPassing: true\n                    isFinal: true\n                    reviewedDate: 2018-05-20T07:00:30.123Z\n                    created: 2018-05-20T07:00:30.123Z\n                    updated: 2018-06-01T07:36:28.178Z\n                    createdBy: copilot\n                    updatedBy: copilot\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. Link\n        headers are sent back and they have rel set to prev, next, first, last\n        and contain the relevant URL.\n\n\n        Requested review summations can be filtered using filter parameters `submissionId`, `aggregateScore`, `scoreCardId`, `isPassing` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review summations\n      operationId: headReviewSummations\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/filterReviewSummationSubmissionId\"\n        - $ref: \"#/components/parameters/filterReviewSummationAaggregateScore\"\n        - $ref: \"#/components/parameters/filterReviewSummationScoreCardId\"\n        - $ref: \"#/components/parameters/filterReviewSummationIsPassing\"\n        - $ref: \"#/components/parameters/filterReviewSummationIsFinal\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    post:\n      summary: Create a review summation.\n      description: \u003e\n        Create a new review summation.\n\n\n        **Authorization:** Review summation creation is accessible by roles `admin` and `copilot`.\n\n\n        **Note** Value for `reviewedDate` attribute can only be provided by users with `admin` role\n      tags:\n        - Review summations\n      operationId: createReviewSummation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ReviewSummation\"\n        required: true\n      responses:\n        \"201\":\n          description: Created - The request was successful and the resource is returned.\n          headers:\n            Location:\n              description: The Location response header indicates the URL to redirect a\n                page to or created resource. It only provides a meaning when\n                served with a 3xx (redirection) or 201 (created) status\n                response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewSummation\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"409\":\n          $ref: \"#/components/schemas/Conflict\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/reviewSummations/{reviewSummationId}\":\n    get:\n      summary: Get the review summation.\n      description: \u003e\n        Get the review summation by id.\n\n\n        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review summations\n      operationId: getReviewSummation\n      parameters:\n        - $ref: \"#/components/parameters/reviewSummationIdParam\"\n      responses:\n        \"200\":\n          description: OK - the request was successful and the review summation is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewSummation\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. It does\n        not contain response body.\n\n\n        **Authorization:** Review summation is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review summations\n      operationId: headReviewSummation\n      parameters:\n        - $ref: \"#/components/parameters/reviewSummationIdParam\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    put:\n      summary: Update the review summation.\n      description: \u003e\n        Update the review summation by id.\n\n\n        **Authorization:** Review summation update is accessible only by `admin` role.\n      tags:\n        - Review summations\n      operationId: updateReviewSummation\n      parameters:\n        - $ref: \"#/components/parameters/reviewSummationIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdatableReviewSummation\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewSummation\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    patch:\n      summary: Partially update the review summation.\n      description: \u003e\n        Allows to partially modify the review summation with the provided\n        request body properties.\n\n\n        **Authorization:** Partially modify of review summation is accessible only by `admin` role.\n      tags:\n        - Review summations\n      operationId: partiallyUpdateReviewSummation\n      parameters:\n        - $ref: \"#/components/parameters/reviewSummationIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PartiallyReviewSummation\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewSummation\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    delete:\n      summary: Delete the review summation.\n      description: \u003e\n        Delete the review summation.\n\n\n        **Authorization:** Review summation deletion is accessible only by `admin` role.\n      tags:\n        - Review summations\n      operationId: deleteReviewSummation\n      parameters:\n        - $ref: \"#/components/parameters/reviewSummationIdParam\"\n      responses:\n        \"204\":\n          $ref: \"#/components/schemas/NoContent\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  /reviews:\n    get:\n      summary: Get all reviews.\n      description: \u003e\n        Get all reviews. Link headers are sent back and they have rel set to\n        prev, next, first, last and contain the relevant URL.\n\n\n        Resulted collection of reviews can be filtered using filter parameters `score`, `typeId`, `reviewerId`, `scoreCardId`, `status` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Review is accessible by roles `admin` and `copilot`.\n      tags:\n        - Reviews\n      operationId: getReviews\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/orderBy\"\n        - $ref: \"#/components/parameters/sortBy\"\n        - $ref: \"#/components/parameters/filterReviewScore\"\n        - $ref: \"#/components/parameters/filterReviewTypeId\"\n        - $ref: \"#/components/parameters/filterReviewReviewerId\"\n        - $ref: \"#/components/parameters/filterReviewScoreCardId\"\n        - $ref: \"#/components/parameters/filterReviewSubmissionId\"\n        - $ref: \"#/components/parameters/filterReviewStatus\"\n      responses:\n        \"200\":\n          description: OK - the request was successful, the resource are returned.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Review\"\n                example:\n                  - id: a12a4180-65aa-42ec-a945-5fd21dec0503\n                    score: 95.5\n                    typeId: c56a4180-65aa-42ec-a945-5fd21dec0503\n                    reviewerId: c23a4180-65aa-42ec-a945-5fd21dec0503\n                    scoreCardId: 123456789\n                    submissionId: d67a4180-65aa-42ec-a945-5fd21dec0503\n                    status: queued\n                    reviewedDate: 2018-05-20T07:00:30.123Z\n                    created: 2018-05-20T07:00:30.123Z\n                    updated: 2018-06-01T07:36:28.178Z\n                    createdBy: admin\n                    updatedBy: admin\n                  - id: a23c4180-65aa-42ec-a945-5fd21dec0503\n                    score: 73.2\n                    typeId: c56a4180-65aa-42ec-a945-5fd21dec0503\n                    reviewerId: c23a4180-65aa-42ec-a945-5fd21dec0503\n                    scoreCardId: 123456789\n                    submissionId: d23a4180-65aa-42ec-a945-5fd21dec0503\n                    status: completed\n                    reviewedDate: 2018-05-20T07:00:30.123Z\n                    created: 2018-05-20T07:00:30.123Z\n                    updated: 2018-06-01T07:36:28.178Z\n                    createdBy: admin\n                    updatedBy: admin\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. Link\n        headers are sent back and they have rel set to prev, next, first, last\n        and contain the relevant URL.\n\n\n        Requested reviews can be filtered using filter parameters `score`, `typeId`, `reviewerId`, `scoreCardId`, `status` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Review is accessible by roles `admin` and `copilot`.\n      tags:\n        - Reviews\n      operationId: headReviews\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/filterReviewScore\"\n        - $ref: \"#/components/parameters/filterReviewTypeId\"\n        - $ref: \"#/components/parameters/filterReviewReviewerId\"\n        - $ref: \"#/components/parameters/filterReviewScoreCardId\"\n        - $ref: \"#/components/parameters/filterReviewStatus\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    post:\n      summary: Create a review.\n      description: \u003e\n        Create a new review.\n\n\n        **Authorization:** Review creation is accessible by roles `admin` and `copilot`.\n\n\n        **Note** Value for `reviewedDate` attribute can only be provided by users with `admin` role\n      tags:\n        - Reviews\n      operationId: createReview\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Review\"\n        required: true\n      responses:\n        \"200\":\n          description: The request was successful and the resource is returned.\n          headers:\n            Location:\n              description: The Location response header indicates the URL to redirect a\n                page to or created resource. It only provides a meaning when\n                served with a 3xx (redirection) or 201 (created) status\n                response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Review\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"409\":\n          $ref: \"#/components/schemas/Conflict\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/reviews/{reviewId}\":\n    get:\n      summary: Get the review.\n      description: |\n        Get the review by id.\n\n        **Authorization:** Review is accessible by roles `admin` and `copilot`.\n      tags:\n        - Reviews\n      operationId: getReview\n      parameters:\n        - $ref: \"#/components/parameters/reviewIdParam\"\n      responses:\n        \"200\":\n          description: OK - the request was successful and the review is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Review\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. It does\n        not contain response body.\n\n\n        **Authorization:** Review is accessible by roles `admin` and `copilot`.\n      tags:\n        - Reviews\n      operationId: headReview\n      parameters:\n        - $ref: \"#/components/parameters/reviewIdParam\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    put:\n      summary: Update the review.\n      description: |\n        Update the review by id.\n\n        **Authorization:** Review update is accessible only by `admin` role.\n      tags:\n        - Reviews\n      operationId: updateReview\n      parameters:\n        - $ref: \"#/components/parameters/reviewIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdatableReview\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Review\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    patch:\n      summary: Partially update the review.\n      description: \u003e\n        Allows to partially modify the review with the provided request body\n        properties.\n\n\n        **Authorization:** Partially modify of review is accessible only by `admin` role.\n      tags:\n        - Reviews\n      operationId: partiallyUpdateReview\n      parameters:\n        - $ref: \"#/components/parameters/reviewIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PartiallyReview\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Review\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    delete:\n      summary: Delete the review.\n      description: |\n        Delete the review.\n\n        **Authorization:** Review deletion is accessible only by `admin` role.\n      tags:\n        - Reviews\n      operationId: deleteReview\n      parameters:\n        - $ref: \"#/components/parameters/reviewIdParam\"\n      responses:\n        \"204\":\n          $ref: \"#/components/schemas/NoContent\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  /reviewTypes:\n    get:\n      summary: Get all review types.\n      description: \u003e\n        Get all review types. Link headers are sent back and they have rel set\n        to prev, next, first, last and contain the relevant URL.\n\n\n        Resulted collection of review types can be filtered using filter parameters `name`, `isActive` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Review types is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review types\n      operationId: getReviewTypes\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/orderBy\"\n        - $ref: \"#/components/parameters/sortBy\"\n        - $ref: \"#/components/parameters/filterReviewTypeName\"\n        - $ref: \"#/components/parameters/filterReviewTypeIsActive\"\n      responses:\n        \"200\":\n          description: OK - the request was successful, the resource are returned.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ReviewType\"\n                example:\n                  - id: a12bc180-65ab-42ec-a945-5fd2dec1567\n                    name: Iterative Review\n                    isActive: true\n                  - id: a12bc180-65ab-42ec-a945-5fd2dec1568\n                    name: Screening\n                    isActive: true\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. Link\n        headers are sent back and they have rel set to prev, next, first, last\n        and contain the relevant URL.\n\n\n        Requested review types can be filtered using filter parameters `name`, `isActive` (all filter parameters are optional and combined by the logical operation `AND`).\n\n\n        **Authorization:** Review types is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review types\n      operationId: headReviewTypes\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/perPage\"\n        - $ref: \"#/components/parameters/filterReviewTypeName\"\n        - $ref: \"#/components/parameters/filterReviewTypeIsActive\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n          headers:\n            X-Next-Page:\n              description: The index of the next page\n              schema:\n                type: integer\n            X-Page:\n              description: The index of the current page (starting at 1)\n              schema:\n                type: integer\n            X-Per-Page:\n              description: The number of items to list per page\n              schema:\n                type: integer\n            X-Prev-Page:\n              description: The index of the previous page\n              schema:\n                type: integer\n            X-Total:\n              description: The total number of items\n              schema:\n                type: integer\n            X-Total-Pages:\n              description: The total number of pages\n              schema:\n                type: integer\n            Link:\n              description: Pagination link header.\n              schema:\n                type: string\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    post:\n      summary: Create a review type.\n      description: \u003e\n        Create a new review type.\n\n\n        **Authorization:** Review type creation is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review types\n      operationId: createReviewType\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdatableReviewType\"\n      responses:\n        \"201\":\n          description: Created - The request was successful and the resource is returned.\n          headers:\n            Location:\n              description: The Location response header indicates the URL to redirect a\n                page to or created resource. It only provides a meaning when\n                served with a 3xx (redirection) or 201 (created) status\n                response.\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewType\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"409\":\n          $ref: \"#/components/schemas/Conflict\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n  \"/reviewTypes/{reviewTypeId}\":\n    get:\n      summary: Get the review type.\n      description: \u003e\n        Get the review type by id.\n\n\n        **Authorization:** Review type is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review types\n      operationId: getReviewType\n      parameters:\n        - $ref: \"#/components/parameters/reviewTypeIdParam\"\n      responses:\n        \"200\":\n          description: OK - the request was successful and the review is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewType\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    head:\n      summary: \u003e\n        Get only response status and headers information but no response body\n        for the endpoint.\n      description: \u003e\n        Get response status and headers information for the endpoint. It does\n        not contain response body.\n\n\n        **Authorization:** Review type is accessible by roles `admin` and `copilot`.\n      tags:\n        - Review types\n      operationId: headReviewType\n      parameters:\n        - $ref: \"#/components/parameters/reviewTypeIdParam\"\n      responses:\n        \"200\":\n          description: OK - The request was successful.\n        \"400\":\n          $ref: \"#/components/schemas/BadRequestWithoutBody\"\n        \"401\":\n          $ref: \"#/components/schemas/UnauthorizedWithoutBody\"\n        \"403\":\n          $ref: \"#/components/schemas/ForbiddenWithoutBody\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerErrorWithoutBody\"\n    put:\n      summary: Update the review type.\n      description: \u003e\n        Update the review type by id.\n\n\n        **Authorization:** Review type update is accessible only by `admin` role.\n      tags:\n        - Review types\n      operationId: updateReviewType\n      parameters:\n        - $ref: \"#/components/parameters/reviewTypeIdParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/UpdatableReviewType\"\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewType\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    patch:\n      summary: Partially update the review type.\n      description: \u003e\n        Allows to partially modify the review type with the provided request\n        body properties.\n\n\n        **Authorization:** Partially modify of review type is accessible only by `admin` role.\n      tags:\n        - Review types\n      operationId: partiallyUpdateReviewType\n      parameters:\n        - $ref: \"#/components/parameters/reviewTypeIdParam\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PartiallyReviewType\"\n        required: true\n      responses:\n        \"200\":\n          description: OK - The request was successful and the updated resource is returned.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ReviewType\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\n    delete:\n      summary: Delete the review type.\n      description: \u003e\n        Delete the review type.\n\n\n        **Authorization:** Review type deletion is accessible only by `admin` role.\n      tags:\n        - Review types\n      operationId: deleteReviewType\n      parameters:\n        - $ref: \"#/components/parameters/reviewTypeIdParam\"\n      responses:\n        \"204\":\n          $ref: \"#/components/schemas/NoContent\"\n        \"400\":\n          $ref: \"#/components/schemas/BadRequest\"\n        \"401\":\n          $ref: \"#/components/schemas/Unauthorized\"\n        \"403\":\n          $ref: \"#/components/schemas/Forbidden\"\n        \"404\":\n          $ref: \"#/components/schemas/NotFound\"\n        \"500\":\n          $ref: \"#/components/schemas/ServerError\"\ncomponents:\n  parameters:\n    page:\n      name: page\n      in: query\n      description: The page number.\n      required: false\n      schema:\n        type: integer\n        default: 1\n    perPage:\n      name: perPage\n      in: query\n      description: The number of items to list per page.\n      required: false\n      schema:\n        type: integer\n        maximum: 100\n        default: 20\n    orderBy:\n      name: orderBy\n      in: query\n      description: The sorting order (asc/desc).\n      required: false\n      schema:\n        type: string\n        enum:\n          - asc\n          - desc\n          - ASC\n          - DESC\n    sortBy:\n      name: sortBy\n      in: query\n      description: The field to sort the result by.\n      required: false\n      schema:\n        type: string\n    filterSubmissionType:\n      in: query\n      name: type\n      description: The type filter for submissions.\n      required: false\n      schema:\n        type: string\n    filterSubmissionUrl:\n      in: query\n      name: url\n      description: The url filter for submissions.\n      required: false\n      schema:\n        type: string\n    filterSubmissionMemberId:\n      in: query\n      name: memberId\n      description: The member id filter for submissions.\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - type: integer\n    filterSubmissionChallengeId:\n      in: query\n      name: challengeId\n      description: The challenge id filter for submissions.\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - type: integer\n    filterSubmissionLegacySubmissionId:\n      in: query\n      name: legacySubmissionId\n      description: The legacy submission id filter for submissions.\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - type: integer\n    filterSubmissionLegacyUploadId:\n      in: query\n      name: legacyUploadId\n      description: The legacy upload id filter for submissions.\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - type: integer\n    filterSubmissionSubmissionPhaseId:\n      in: query\n      name: submissionPhaseId\n      description: The submission phase id filter for submissions.\n      required: false\n      schema:\n        type: integer\n    filterSubmissionReviewScore:\n      in: query\n      name: review.score\n      description: The score filter of the reviews associated with the submission.\n      required: false\n      schema:\n        type: integer\n    filterSubmissionReviewTypeId:\n      in: query\n      name: review.typeId\n      description: The typeId filter of the reviews associated with the submission.\n      required: false\n      schema:\n        type: string\n    filterSubmissionReviewReviewerId:\n      in: query\n      name: review.reviewerId\n      description: The reviewerId filter of the reviews associated with the submission.\n      required: false\n      schema:\n        type: string\n    filterSubmissionReviewScoreCardId:\n      in: query\n      name: review.scoreCardId\n      description: The scoreCardId filter of the reviews associated with the submission.\n      required: false\n      schema:\n        oneOf:\n          - type: integer\n          - type: string\n    filterSubmissionReviewSubmissionId:\n      in: query\n      name: review.submissionId\n      description: The submissionId filter of the reviews associated with the submission.\n      required: false\n      schema:\n        type: string\n    filterSubmissionReviewStatus:\n      in: query\n      name: review.status\n      description: The status of the reviews associated with the submission.\n      required: false\n      schema:\n        type: string\n        enum:\n          - queued\n          - completed\n    filterSubmissionReviewSummationScoreCardId:\n      in: query\n      name: reviewSummation.scoreCardId\n      description: The scoreCardId filter of the review summaions associated with the\n        submission.\n      required: false\n      schema:\n        type: integer\n    filterSubmissionReviewSummationSubmissionId:\n      in: query\n      name: reviewSummation.submissionId\n      description: The submissionId filter of the review summaions associated with the\n        submission.\n      required: false\n      schema:\n        type: string\n    filterSubmissionReviewSummationAggregateScore:\n      in: query\n      name: reviewSummation.aggregateScore\n      description: The aggregateScore filter of the review summaions associated with the\n        submission.\n      required: false\n      schema:\n        type: integer\n    filterSubmissionReviewSummationIsPassing:\n      in: query\n      name: reviewSummation.isPassing\n      description: The isPassing filter of the review summaions associated with the\n        submission.\n      required: false\n      schema:\n        type: string\n    filterReviewSummationSubmissionId:\n      in: query\n      name: submissionId\n      description: The submission id filter for review summations.\n      required: false\n      schema:\n        type: string\n    filterReviewSummationAaggregateScore:\n      in: query\n      name: aggregateScore\n      description: Theaggregate score filter for review summations.\n      required: false\n      schema:\n        type: number\n        format: double\n    filterReviewSummationScoreCardId:\n      in: query\n      name: scoreCardId\n      description: The score card id filter for review summations.\n      required: false\n      schema:\n        type: integer\n    filterReviewSummationIsPassing:\n      in: query\n      name: isPassing\n      description: The passing boolean flag filter for review summations.\n      required: false\n      schema:\n        type: boolean\n    filterReviewSummationIsFinal:\n      in: query\n      name: isFinal\n      description: The final boolean flag filter for review summations.\n      required: false\n      schema:\n        type: boolean\n    filterReviewScore:\n      in: query\n      name: score\n      description: The score filter for reviews.\n      required: false\n      schema:\n        type: number\n        format: double\n    filterReviewTypeId:\n      in: query\n      name: typeId\n      description: The type id filter for reviews.\n      required: false\n      schema:\n        type: string\n    filterReviewReviewerId:\n      in: query\n      name: reviewerId\n      description: The reviewer id filter for reviews.\n      required: false\n      schema:\n        type: string\n    filterReviewScoreCardId:\n      in: query\n      name: scoreCardId\n      description: The score card id filter for reviews.\n      required: false\n      schema:\n        oneOf:\n          - type: integer\n          - type: string\n    filterReviewSubmissionId:\n      in: query\n      name: submissionId\n      description: The submission id filter for reviews.\n      required: false\n      schema:\n        type: string\n    filterReviewStatus:\n      in: query\n      name: status\n      description: The status of the review, whether it queued or has been completed.\n      required: false\n      schema:\n        type: string\n        enum:\n          - queued\n          - completed\n    filterReviewTypeName:\n      in: query\n      name: name\n      description: The name filter for review types.\n      required: false\n      schema:\n        type: string\n    filterReviewTypeIsActive:\n      in: query\n      name: isActive\n      description: The active boolean flag filter for review types.\n      required: false\n      schema:\n        type: boolean\n    reviewIdParam:\n      name: reviewId\n      in: path\n      description: review id\n      required: true\n      schema:\n        type: string\n    reviewSummationIdParam:\n      name: reviewSummationId\n      in: path\n      description: review summation id\n      required: true\n      schema:\n        type: string\n    reviewTypeIdParam:\n      name: reviewTypeId\n      in: path\n      description: review type id\n      required: true\n      schema:\n        type: string\n    fileParam:\n      name: file\n      in: path\n      description: artifact id (its filename)\n      required: true\n      schema:\n        type: string\n    submissionIdParam:\n      name: submissionId\n      in: path\n      description: submission id\n      required: true\n      schema:\n        type: string\n  requestBodies:\n    UpdatableReviewType:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/UpdatableReviewType\"\n      required: true\n  securitySchemes:\n    Bearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    NoContent:\n      description: \u003e\n        No Content - The server has successfully fulfilled the request and that\n        there is no additional content to send in the response payload body.\n    BadRequestWithoutBody:\n      description: \u003e\n        Bad Request - Request validation error, unable to process the request\n        due to an error (e.g., malformed request syntax, size too large, invalid\n        request message framing, or deceptive request routing).\n    UnauthorizedWithoutBody:\n      description: \u003e\n        Unauthorized - Occurs when the JWT token provided is either expired or\n        invalid.\n    ForbiddenWithoutBody:\n      description: |\n        Forbidden - The request is not allowed.\n    ServerErrorWithoutBody:\n      description: \u003e\n        Server Error - While handling the request something went wrong\n        server-side.\n    Submission:\n      description: The submission entity.\n      type: object\n      required:\n        - id\n        - type\n        - url\n        - memberId\n        - challengeId\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n              description: The submission id.\n              example: a12a4180-65aa-42ec-a945-5fd21def1567'\n        - $ref: \"#/components/schemas/PartiallySubmission\"\n        - $ref: \"#/components/schemas/Auditable\"\n    PartiallySubmission:\n      description: The submission entity fields that can be partially updated.\n      type: object\n      properties:\n        type:\n          type: string\n          description: The submission type.\n          example: ContestSubmission\n        url:\n          type: string\n          description: The submission url.\n          example: http://content.topcoder.com/some/path\n        memberId:\n          oneOf:\n            - type: string\n            - type: integer\n          description: The submission member id.\n          example: a84a4180-65aa-42ec-a945-5fd21dec1567\n        challengeId:\n          oneOf:\n            - type: string\n            - type: integer\n          description: The submission challenge id.\n          example: a12bc180-65aa-42ec-a945-5fd21dec1567\n        legacySubmissionId:\n          oneOf:\n            - type: string\n            - type: integer\n          description: The legacy submission id.\n          example: 70b0e2e7-f824-4248-8398-54ee10ff0db9\n        legacyUploadId:\n          oneOf:\n            - type: string\n            - type: integer\n          description: The legacy upload id.\n          example: 5da27562-eaec-4c9f-ad1c-ddfbed6ffdbc\n        submissionPhaseId:\n          type: integer\n          description: The submission phase id.\n          example: 5dea6d9e-161a-4c7a-b316-597c73a7b8f4\n        submittedDate:\n          type: string\n          format: date-time\n          description: Date of submission (defaults to submission creation date if none\n            passed)\n          example: 2018-05-20T07:00:30.123Z\n    UpdatableSubmission:\n      description: The submission entity fields that updates whole entity.\n      type: object\n      required:\n        - url\n        - memberId\n        - challengeId\n      allOf:\n        - $ref: \"#/components/schemas/PartiallySubmission\"\n    ReviewSummation:\n      description: The review summation entity.\n      type: object\n      required:\n        - id\n        - submissionId\n        - aggregateScore\n        - scoreCardId\n        - isPassing\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n              description: The review summation id.\n              example: a12bc180-65aa-42ec-a945-7ad21dec1567\n        - $ref: \"#/components/schemas/PartiallyReviewSummation\"\n        - $ref: \"#/components/schemas/Auditable\"\n    PartiallyReviewSummation:\n      description: The review summation entity fields that can be partially updated.\n      type: object\n      properties:\n        submissionId:\n          type: string\n          description: The review summation submission id.\n          example: a12bc180-43aa-42ec-a945-5fd21dec1567\n        aggregateScore:\n          type: number\n          format: double\n          description: The review summation aggregate score.\n          example: 97.8\n        scoreCardId:\n          type: integer\n          description: The review summation score card id.\n          example: 123456789\n        isPassing:\n          type: boolean\n          description: The review summation passing boolean flag.\n          example: true\n        isFinal:\n          type: boolean\n          description: The review summation final boolean flag.\n          example: true\n        metadata:\n          type: object\n          description: Review summation metadata in JSON format\n        reviewedDate:\n          type: string\n          format: date-time\n          description: Date of review summation (defaults to review summation creation date\n            if none passed)\n          example: 2018-05-20T07:00:30.123Z\n    UpdatableReviewSummation:\n      description: The review summation entity fields that updates whole entity.\n      type: object\n      required:\n        - submissionId\n        - aggregateScore\n        - scoreCardId\n        - isPassing\n      allOf:\n        - $ref: \"#/components/schemas/PartiallyReviewSummation\"\n    Review:\n      description: The review entity.\n      type: object\n      required:\n        - id\n        - score\n        - typeId\n        - reviewerId\n        - scoreCardId\n        - submissionId\n        - status\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n              description: The review id.\n              example: a12bd180-65aa-42ec-a945-5fd21dec1567\n        - $ref: \"#/components/schemas/PartiallyReview\"\n        - $ref: \"#/components/schemas/Auditable\"\n    PartiallyReview:\n      description: The review entity fields that can be partially updated.\n      type: object\n      properties:\n        score:\n          type: number\n          format: double\n          description: The review score.\n          example: 95.5\n        typeId:\n          type: string\n          description: The review type id.\n          example: a12bc180-65ab-42ec-a945-5fd21dec1567\n        reviewerId:\n          type: string\n          example: a12bc280-65ab-42ec-a945-5fd21dec1567\n          description: The review reviewer id.\n        scoreCardId:\n          oneOf:\n            - type: integer\n            - type: string\n          description: The review score card id.\n          example: 123456789\n        submissionId:\n          type: string\n          description: The submission id.\n          example: a12bc180-65ab-42ec-a945-5fd2dec1567\n        status:\n          type: string\n          enum:\n            - queued\n            - completed\n          description: The status of the review, whether it is queued or has been completed.\n          example: queued\n        metadata:\n          type: object\n          description: Review Metadata in JSON format\n        reviewedDate:\n          type: string\n          format: date-time\n          description: Date of review (defaults to review creation date if none passed)\n          example: 2018-05-20T07:00:30.123Z\n    UpdatableReview:\n      description: The review entity fields that updates whole entity.\n      type: object\n      required:\n        - score\n        - typeId\n        - reviewerId\n        - scoreCardId\n        - submissionId\n        - status\n      allOf:\n        - $ref: \"#/components/schemas/PartiallyReview\"\n    ReviewType:\n      description: The review type entity.\n      type: object\n      required:\n        - id\n        - name\n        - isActive\n      allOf:\n        - type: object\n          properties:\n            id:\n              type: string\n              readOnly: true\n              description: The review type id.\n              example: a12bc180-65ab-42ec-a945-5fd2dec1567\n        - $ref: \"#/components/schemas/PartiallyReviewType\"\n    PartiallyReviewType:\n      description: The review type entity fields that can be partially updated.\n      type: object\n      properties:\n        name:\n          type: string\n          description: The review type name.\n          example: Iterative Review\n        isActive:\n          type: boolean\n          description: The review type activity boolean flag.\n          example: true\n    UpdatableReviewType:\n      description: The review entity type fields that updates whole entity.\n      type: object\n      required:\n        - name\n        - isActive\n      allOf:\n        - $ref: \"#/components/schemas/PartiallyReviewType\"\n    Auditable:\n      description: The entity used as mark to add audit fields.\n      type: object\n      readOnly: true\n      properties:\n        created:\n          type: string\n          format: date-time\n          readOnly: true\n          description: The entity creation date.\n          example: 2018-05-20T07:00:30.123Z\n        updated:\n          type: string\n          format: date-time\n          readOnly: true\n          description: The entity update date.\n          example: 2018-06-01T07:36:28.178Z\n        createdBy:\n          type: string\n          readOnly: true\n          description: The user who created the entity.\n          example: admin\n        updatedBy:\n          type: string\n          readOnly: true\n          description: The user who updated the entity.\n          example: admin\n    Unauthorized:\n      type: object\n      description: The unauthorized error entity.\n      properties:\n        message:\n          type: string\n          description: Access token is missing or invalid\n          example: Unable to authenticate the user.\n    NotFound:\n      type: object\n      description: The not found error entity.\n      properties:\n        message:\n          type: string\n          description: The not found error message.\n          example: A resource with the name could not be found.\n    ServerError:\n      type: object\n      description: The server error entity.\n      properties:\n        message:\n          type: string\n          description: The server error message.\n          example: Something went wrong while processing your request. We’re sorry for\n            the trouble. We’ve been notified of the error and will correct it as\n            soon as possible. Please try your request again in a moment.\n    BadRequest:\n      type: object\n      description: The bad request error entity.\n      properties:\n        message:\n          type: string\n          description: The bad request error message.\n          example: Invalid input.\n    Forbidden:\n      type: object\n      description: The permission error entity.\n      properties:\n        message:\n          type: string\n          description: The forbidden error message.\n          example: You are not allowed to access the request.\n    Conflict:\n      type: object\n      description: The conflict error entity.\n      required:\n        - message\n      properties:\n        message:\n          type: string\n          description: The conflict error message.\n          example: Creating a resource with a name already exists.\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /submissions/{submissionId}/artifacts/{file}/download: get: operation \"downloadArtifact\": responses: 400: resolve \"#/components/schemas/BadRequest\" reference: invalid response reference: \"#/components/schemas/BadRequest\""
}