{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zhad3/zrenderer"
		},
		"file": {
			"name": "1.3.yaml",
			"size": 0,
			"path": "server/api-spec/1.3.yaml",
			"byteSize": 17184,
			"content": "openapi: 3.0.3\ninfo:\n  title: zrenderer API\n  version: '1.3'\n  description: API for the zrenderer service (https://github.com/zhad3/zrenderer).\nservers:\n  - url: http://localhost:{port}\n    variables:\n      port:\n        default: '11011'\npaths:\n  /render:\n    summary: Endpoint for requesting to render sprites\n    post:\n      requestBody:\n        $ref: '#/components/requestBodies/RenderRequestBody'\n      parameters:\n        - deprecated: false\n          name: downloadimage\n          description: If provided, the request will return the first rendered image.\n          schema:\n            type: boolean\n          in: query\n          required: false\n          allowEmptyValue: true\n          example: false\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RenderResponse'\n            image/png:\n              schema:\n                format: binary\n                description: Returns image/png.\n                type: string\n                example: \u003cimage data\u003e\n            application/zip:\n              schema:\n                format: binary\n                description: Returns application/zip.\n                type: string\n                example: \u003czip data\u003e\n          description: 'Ok'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n      operationId: render\n      summary: Send a request to render sprites\n      tags:\n        - Rendering\n  /token/info:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenInfoResponse'\n                example:\n                  capabilities:\n                    createAccessTokens: false\n                    revokeAccessTokens: false\n                    modifyAccessTokens: false\n                    readAccessTokens: false\n                    readHealth: false\n                  properties:\n                    maxJobIdsPerRequest: 5\n                    maxRequestsPerHour: 100\n          description: 'Ok'\n        '401':\n          $ref: '#/components/responses/401'\n      operationId: getTokenInfo\n      summary: Get requesting access token info\n      description: Returns the capabilities and properties of the requesting access token\n      tags:\n        - Token\n\n  /admin/tokens:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessToken'\n                example:\n                  - id: 4\n                    token: knlw2e6mppf5f49b7hrolypta8gjmp3g\n                    isAdmin: false\n                    description: Fred's token\n                    capabilities:\n                      createAccessTokens: false\n                      revokeAccessTokens: false\n                      modifyAccessTokens: false\n                      readAccessTokens: false\n                      readHealth: true\n                    properties:\n                      maxJobIdsPerRequest: 5\n                      maxRequestsPerHour: 100\n                  - id: 5\n                    token: 7k2sfh10cu1dio5l0pt9tig7aate9h9g\n                    isAdmin: false\n                    description: Unknown's Bot\n                    capabilities:\n                      createAccessTokens: false\n                      revokeAccessTokens: false\n                      modifyAccessTokens: false\n                      readAccessTokens: false\n                      readHealth: true\n                    properties:\n                      maxJobIdsPerRequest: 10\n                      maxRequestsPerHour: 500\n          description: 'Ok'\n        '401':\n          $ref: '#/components/responses/401'\n      operationId: getTokens\n      summary: Get all access tokens\n      description: Only the admin may retrieve the admin token\n      tags:\n        - Admin\n        - Token\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseToken'\n              example:\n                description: Fred's token\n                capabilities:\n                  readHealth: true\n                properties:\n                  maxJobIdsPerRequest: 5\n                  maxRequestsPerHour: 100\n        description: 'Description is required.'\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenCreateResponse'\n                example:\n                  id: 4\n                  token: knlw2e6mppf5f49b7hrolypta8gjmp3g\n          description: 'Ok'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '500':\n          $ref: '#/components/responses/500'\n      operationId: createToken\n      description: Request body for token settings will only be used when the requester has the capability to modify access tokens.\n      summary: Create new access token\n      tags:\n        - Admin\n        - Token\n  /admin/tokens/{id}:\n    description: Modify existing access token identified by the id given in the path.\n    parameters:\n      - deprecated: false\n        name: id\n        description: Id of the access token\n        schema:\n          type: integer\n          format: int32\n        in: path\n        required: true\n        allowEmptyValue: false\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BaseToken'\n            example:\n              description: Fred's token\n              capabilities:\n                readHealth: true\n              properties:\n                maxJobIdsPerRequest: 5\n                maxRequestsPerHour: 100\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n      operationId: modifyToken\n      description: ''\n      summary: Modify existing access token\n      tags:\n        - Admin\n        - Token\n    delete:\n      responses:\n        '200':\n          $ref: '#/components/responses/200'\n        '400':\n          $ref: '#/components/responses/400'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          $ref: '#/components/responses/404'\n        '500':\n          $ref: '#/components/responses/500'\n      operationId: deleteToken\n      description: Admin tokens cannot be deleted.\n      summary: Delete existing access token\n      tags:\n        - Admin\n        - Token\n  /admin/health:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthResponse'\n          description: Ok\n      operationId: getHealth\n      summary: Retrieve status of service\n      description: Returns health data about the service. GC data is only returned for admins.\n      tags:\n        - Admin\n        - Token\ncomponents:\n  schemas:\n    GenericResponse:\n      required:\n        - statusMessage\n      type: object\n      properties:\n        statusMessage:\n          type: string\n          example: Response message\n    TokenCreateResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n          description: Id of the newly created access token\n          example: 4\n        token:\n          type: string\n          description: Token value of the newly created access token\n          example: knlw2e6mppf5f49b7hrolypta8gjmp3g\n    TokenInfoResponse:\n      type: object\n      properties:\n        capabilities:\n          $ref: '#/components/schemas/TokenCapabilities'\n        properties:\n          $ref: '#/components/schemas/TokenProperties'\n    RenderResponse:\n      type: object\n      properties:\n        output:\n          type: array\n          items:\n            type: string\n      example:\n        output:\n          - output/1002/0-0.png\n          - output/1002/0-1.png\n          - output/1002/0-2.png\n          - output/1002/0-3.png\n          - output/1002/0.png\n    RenderRequest:\n      required:\n        - job\n      type: object\n      properties:\n        job:\n          description: \u003e-\n            Job id(s) which should be rendered. Can contain multiple comma\n            separated values as well as ranges (e.g. \"1001-1999\").\n          type: array\n          items:\n            type: string\n          example: 1001,1002,1005-1010,2122\n        action:\n          format: int32\n          description: Action of the job which should be drawn.\n          minimum: 0\n          type: integer\n          example: 5\n        frame:\n          format: int32\n          description: \u003e-\n            Frame of the action which should be drawn. Set to -1 to draw all\n            frames.\n          minimum: -1\n          type: integer\n          example: -1\n        gender:\n          format: int32\n          description: \u003e-\n            Gender of the player character. Possible values are: 1=male or\n            0=female.\n          enum:\n            - 0\n            - 1\n          example: 1\n        head:\n          format: int32\n          description: Head id which should be used when drawing a player.\n          minimum: 0\n          type: integer\n          example: 2\n        outfit:\n          format: int32\n          description: \u003e-\n            The alternative outfit for player characters. Not all characters\n            have alternative outfits. In these cases the default character will\n            be rendered instead.\n          minimum: 0\n          type: integer\n          example: 0\n        headgear:\n          description: Headgears which should be attached to the players head.\n          type: array\n          items:\n            format: int32\n            minimum: 0\n            type: integer\n          example: [1, 24, 15]\n        garment:\n          format: int32\n          description: Garment which should be attached to the players body.\n          minimum: 0\n          type: integer\n          example: 0\n        weapon:\n          format: int32\n          description: Weapon which should be attached to the players body.\n          minimum: 0\n          type: integer\n          example: 1\n        shield:\n          format: int32\n          description: Shield which should be attached to the players body.\n          minimum: 0\n          type: integer\n          example: 0\n        bodyPalette:\n          format: int32\n          description: Palette for the body sprite. Set to -1 to use the standard palette.\n          minimum: -1\n          type: integer\n          example: -1\n        headPalette:\n          format: int32\n          description: Palette for the head sprite. Set to -1 to use the standard palette.\n          minimum: -1\n          type: integer\n          example: -1\n        headdir:\n          format: int32\n          description: \u003e-\n            Direction in which the head should turn. This is only applied to\n            player sprites and only to the stand and sit action. Possible values\n            are: 0=straight, 1=left, 2=right or 3=all. If 'all' is set then this\n            direction system is ignored and all frames are interpreted like any\n            other one.\n          enum:\n            - 0\n            - 1\n            - 2\n            - 3\n          example: 0\n        enableShadow:\n          description: Draw shadow underneath the sprite.\n          type: boolean\n          example: true\n        canvas:\n          description: \u003e-\n            Sets a canvas onto which the sprite should be rendered. The canvas\n            requires two options: its size and an origin point inside the canvas\n            where the sprite should be placed. The format is as following:\n            {width}x{height}±{x}±{y}. An origin point of +0+0 is equal to the\n            top left corner. Example: 200x250+100+125. This would create a\n            canvas and place the sprite in the center.\n          type: string\n          example: 200x250+100+125\n        outputFormat:\n          format: int32\n          description: \u003e-\n            Defines the output format. Possible values are 0=png or 1=zip. If\n            zip is chosen the zip will contain png files.\n          enum:\n            - 0\n            - 1\n          example: 0\n    TokenCapabilities:\n      type: object\n      description: Contains a list of capabilities that this token has.\n      properties:\n        createAccessTokens:\n          description: Can use the endpoint to create new access tokens.\n          type: boolean\n          example: false\n        revokeAccessTokens:\n          description: Can use the endpoint to revoke/delete access tokens.\n          type: boolean\n          example: false\n        modifyAccessTokens:\n          description: Can use the endpoint to modify existing access tokens.\n          type: boolean\n          example: false\n        readAccessTokens:\n          description: Can use the endpoint to return a list of existing access tokens.\n          type: boolean\n          example: false\n        readHealth:\n          description: Can use the endpoint to retrieve health status.\n          type: boolean\n          example: true\n    TokenProperties:\n      type: object\n      description: Contains a list of properties that this token has.\n      properties:\n        maxJobIdsPerRequest:\n          description: How many job ids this token may provide per request\n          type: integer\n          format: int32\n          example: 5\n        maxRequestsPerHour:\n          description: Unused\n          type: integer\n          format: int32\n          example: 100\n    BaseToken:\n      type: object\n      properties:\n        description:\n          description: \u003e-\n            The name/description of the access token to easily identify the\n            owner/purpose of it.\n          type: string\n          example: Webservice foo.server.com\n        capabilities:\n          $ref: '#/components/schemas/TokenCapabilities'\n        properties:\n          $ref: '#/components/schemas/TokenProperties'\n    AccessToken:\n      allOf:\n        - $ref: '#/components/schemas/BaseToken'\n        - type: object\n          properties:\n            id:\n              format: int32\n              description: The identifier of this access token.\n              type: integer\n              example: 4\n            token:\n              description: The actual token value that is used to make requests.\n              type: string\n              example: knlw2e6mppf5f49b7hrolypta8gjmp3g\n            isAdmin:\n              description: \u003e-\n                Whether this token has admin privileges. Will only be returned if\n                requested with an admin token.\n              type: boolean\n              example: false\n    HealthResponse:\n      type: object\n      properties:\n        up:\n          type: boolean\n          description: Whether the service is up and running\n        gc:\n          type: object\n          properties:\n            usedSize:\n              type: integer\n              format: int32\n              description: The size of bytes allocated on the GC heap\n            freeSize:\n              type: integer\n              format: int32\n              description: The size of bytes freed on the GC heap\n      example:\n        up: true\n        gc:\n          usedSize: 2488464\n          freeSize: 2754352\n  responses:\n    '200':\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericResponse'\n            example:\n              statusMessage: Ok\n      description: Ok.\n    '400':\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericResponse'\n            example:\n              statusMessage: Expected json input\n      description: Illegal input for operation.\n    '401':\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericResponse'\n            example:\n              statusMessage: Unauthorized\n      description: Unauthorized.\n    '404':\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericResponse'\n            example:\n              statusMessage: Token doesn't exist\n      description: Not found.\n    '500':\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/GenericResponse'\n            example:\n              statusMessage: Couldn't write to file\n      description: Server Error.\n  requestBodies:\n    RenderRequestBody:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RenderRequest'\n      required: true\n  securitySchemes:\n    accessToken:\n      type: apiKey\n      description: Access token required to make requests.\n      name: accesstoken\n      in: query\nsecurity:\n  - accessToken: []\n",
			"canonicalURL": "/github.com/zhad3/zrenderer@9eb500d7ac57556e8e720f9bdd519766465fbbd3/-/blob/server/api-spec/1.3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zhad3/zrenderer/blob/9eb500d7ac57556e8e720f9bdd519766465fbbd3/server/api-spec/1.3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"RenderRequest\": resolve \"#/components/schemas/RenderRequest\": property \"gender\": at server/api-spec/1.3.yaml:316:13: parse enum values: parse value \"0\": unexpected type: \"\""
}