{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaddleCV-SIG/PP-Label"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "pplabel/openapi.yml",
			"byteSize": 38324,
			"content": "openapi: 3.0.0\ninfo:\n  title: PP-Label API Spec\n  version: 0.1.0\n  description: Back end APIs for PP-Label\n  contact:\n    name: PP-Label Team\n    url: 'https://github.com/PaddleCV-SIG/PP-Label/issues'\n    email: me@linhan.email\nservers:\n  - url: /api\n    description: Same origion\n  - url: 'http://localhost:17995/api'\n    description: Local server\n  - url: 'https://pplabel.herokuapp.com/api'\n    description: heroku\npaths:\n  /projects:\n    parameters:\n      - $ref: '#/components/parameters/request_id'\n    get:\n      tags:\n        - Project\n      summary: 'Read all projects, sort by last modify date'\n      description: ''\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Project'\n      operationId: getAll\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: order_by\n    post:\n      tags:\n        - Project\n      summary: Create a new project\n      description: ''\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n      responses:\n        '201':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n      operationId: create\n  '/projects/{project_id}':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n      - $ref: '#/components/parameters/request_id'\n    get:\n      tags:\n        - Project\n      summary: Get info of a specific project\n      description: ''\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        '404':\n          description: Project not fond\n      operationId: get\n    delete:\n      summary: Delete a project record and ALL TASKS RECORDS under the project.\n      description: Delete a project record and ALL TASKS RECORDS under the project. Won't delete file on file system\n      tags:\n        - Project\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: No project with such project id\n      operationId: remove\n    put:\n      tags:\n        - Project\n      summary: Edit multiple project properties\n      description: Edit multiple project properties. Empty strings will be set. Properties not in request body won't be changed\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Project'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n        '404':\n          description: 'Project with project id not fond, or project dont have requested property'\n      operationId: update\n  '/projects/{project_id}/tasks':\n    parameters:\n      - name: project_id\n        in: path\n        schema:\n          type: string\n        description: Id of a project\n        required: true\n    get:\n      summary: Get all tasks under a project\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Task'\n      operationId: getTasks\n      description: ''\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: order_by\n  '/projects/{project_id}/labels':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    get:\n      summary: Get all labels under a project\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n      operationId: getLabels\n      description: ''\n    post:\n      summary: 'Set all labels under a project, will delete previous labels'\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n      operationId: setLabels\n      description: ''\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Label'\n    delete:\n      summary: Delete all labels under a project\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n      operationId: removeLabels\n      description: ''\n  '/projects/{project_id}/annotations':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    get:\n      summary: Get all annotations under a project\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Annotation'\n      operationId: getAnnotations\n      description: ''\n  '/projects/{project_id}/tags':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    get:\n      summary: Get all tags under a project\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n      operationId: getTags\n      description: ''\n  '/projects/{project_id}/progress':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    get:\n      summary: Get project progress\n      tags:\n        - Project\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  finished:\n                    type: integer\n                  total:\n                    type: integer\n      operationId: getProgress\n      description: ''\n  '/projects/{project_id}/split':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    post:\n      summary: 'Split this project''s data into train, validation and test dataset.'\n      tags:\n        - Project\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  train:\n                    type: integer\n                  val:\n                    type: integer\n                  test:\n                    type: integer\n      operationId: splitDataset\n      description: ''\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                train:\n                  type: number\n                val:\n                  type: number\n                test:\n                  type: number\n        description: ''\n  '/projects/{project_id}/export':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    post:\n      summary: Export dataset to specified directory\n      tags:\n        - Project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                export_dir:\n                  type: string\n      responses:\n        '200':\n          description: success\n      operationId: exportDataset\n      description: ''\n  '/projects/{project_id}/import':\n    parameters:\n      - schema:\n          type: string\n        name: project_id\n        in: path\n        required: true\n    post:\n      summary: ''\n      operationId: importDataset\n      tags:\n        - Project\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                import_dir:\n                  type: string\n        description: ''\n  '/projects/{project_id}/predict':\n    parameters:\n      - $ref: '#/components/parameters/project_id'\n    post:\n      summary: Run prediction on all data in the dataset\n      tags:\n        - Project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ml_backend_url:\n                  type: string\n                model:\n                  type: string\n                same_server:\n                  type: boolean\n                  description: |-\n                    Default false. Will b64 encode image and send to ml backend in this case. Images are directly encoded as file.\n                    If the ml backend has read access to project data dir, set same_server to true. This case web backend will send file path to ml backend. Reduce b64 en/decode overhead.\n                create_label:\n                  type: boolean\n                  description: Default false. Create label if model prediction not in current labels. Won't save prediction result in db if prediciont label not present in current labels\n              required:\n                - ml_backend_url\n                - model\n      responses:\n        '200':\n          description: success\n      operationId: predict\n      description: ''\n  /labels:\n    get:\n      tags:\n        - Label\n      summary: 'Get all labels, sort by last modify'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n      operationId: getAll\n    post:\n      tags:\n        - Label\n      summary: Create a new label\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n      responses:\n        '201':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n      parameters:\n        - $ref: '#/components/parameters/request_id'\n      operationId: create\n  '/labels/{label_id}':\n    parameters:\n      - $ref: '#/components/parameters/label_id'\n    get:\n      tags:\n        - Label\n      summary: Get info about a specific label\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        '404':\n          description: Label not fond\n      operationId: get\n    delete:\n      summary: Delete a label\n      description: Delete a label. Labels in use (have annotation pointing at them) are not allowed to be deleted.\n      tags:\n        - Label\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: The label specified is not found\n      operationId: remove\n    put:\n      tags:\n        - Label\n      summary: Edit label info\n      description: Edit label info. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Label'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Label'\n        '404':\n          description: 'Label with specified label id not fond, or project dont have requested property'\n      operationId: update\n  /tasks:\n    get:\n      summary: Your GET endpoint\n      tags:\n        - Task\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Task'\n      operationId: getAll\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: order_by\n    post:\n      tags:\n        - Task\n      summary: Create a new task\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n      operationId: create\n  '/tasks/{task_id}':\n    parameters:\n      - $ref: '#/components/parameters/task_id'\n    get:\n      tags:\n        - Task\n      summary: Get info of a specific task\n      parameters:\n        - name: task_id\n          in: path\n          description: Id of the task\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n        '404':\n          description: Task not fond\n      operationId: get\n    delete:\n      summary: Delete a task and ALL DATA and ANNOTATIONS under the task.\n      description: Delete a task and ALL DATA and ANNOTATIONS under the project. Won't delete file on file system\n      tags:\n        - Task\n      parameters:\n        - name: task_id\n          in: path\n          description: Id of the task to delete\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: The task specified is not found\n      operationId: remove\n    put:\n      tags:\n        - Task\n      summary: Edit task info\n      description: Edit task info. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.\n      parameters:\n        - name: task_id\n          in: path\n          description: Id of the task to edit\n          schema:\n            type: integer\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Task'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Task'\n        '404':\n          description: 'Task with task id not fond, or task dont have requested property'\n      operationId: update\n  '/tasks/{task_id}/tags':\n    parameters:\n      - $ref: '#/components/parameters/task_id'\n    get:\n      tags:\n        - Task\n      summary: Get all tags of the task\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n      operationId: getTags\n      description: ''\n    post:\n      tags:\n        - Task\n      summary: Add a new tag to the task\n      responses:\n        '201':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n      parameters:\n        - $ref: '#/components/parameters/request_id'\n      description: 'Add a tag to a task, the tag has to exist.'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                tag_id:\n                  type: integer\n      operationId: addTag\n  '/tasks/{task_id}/datas':\n    parameters:\n      - $ref: '#/components/parameters/task_id'\n    get:\n      tags:\n        - Task\n      summary: Get all datas of a task\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Data'\n      operationId: getDatas\n      description: ''\n  '/tasks/{task_id}/annotations':\n    parameters:\n      - $ref: '#/components/parameters/task_id'\n    get:\n      tags:\n        - Task\n      summary: Get all annotations of a task\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Annotation'\n      operationId: getAnnotations\n      description: ''\n  /datas/:\n    get:\n      tags:\n        - Data\n      summary: 'Get all data, sort by last modified'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Data'\n      operationId: getAll\n    post:\n      tags:\n        - Data\n      summary: Create a new data record\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Data'\n      responses:\n        '201':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Data'\n      operationId: create\n  '/datas/{data_id}/':\n    parameters:\n      - $ref: '#/components/parameters/data_id'\n    get:\n      tags:\n        - Data\n      summary: Get info of a specific data record\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Data'\n        '404':\n          description: Data record not fond\n      operationId: get\n    delete:\n      summary: Delete a data record\n      description: 'Delete a data record, file on file system will not be deleted'\n      tags:\n        - Data\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: The data record specified is not found\n      operationId: remove\n    put:\n      tags:\n        - Data\n      summary: Edit data record\n      description: Edit data record. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Data'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Data'\n        '404':\n          description: 'Data record with data id not fond, or data dont have requested property'\n      operationId: update\n  '/datas/{data_id}/image':\n    parameters:\n      - name: data_id\n        in: path\n        required: true\n        schema:\n          type: string\n        description: Id of a data record\n    get:\n      summary: Get the image of a data record\n      tags:\n        - Data\n      responses:\n        '200':\n          description: success\n      operationId: getImage\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: sault\n  '/datas/{data_id}/annotations':\n    parameters:\n      - name: data_id\n        in: path\n        required: true\n        schema:\n          type: string\n        description: Id of a data record\n    get:\n      summary: Get the annotations of a data record\n      tags:\n        - Data\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Annotation'\n      operationId: getAnnotations\n    delete:\n      summary: Delete all annotations of a data record\n      tags:\n        - Data\n      operationId: deleteAnnotations\n      responses:\n        '200':\n          description: OK\n    post:\n      summary: Set the annotations of a data record\n      tags:\n        - Data\n      operationId: setAnnotations\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/Annotation'\n  /annotations/:\n    get:\n      tags:\n        - Annotation\n      summary: 'Get all annotations, sort by last modified'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Annotation'\n      operationId: getAll\n    post:\n      tags:\n        - Annotation\n      summary: Create a new annotation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Annotation'\n      responses:\n        '201':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n      parameters:\n        - $ref: '#/components/parameters/request_id'\n      operationId: create\n  '/annotations/{annotation_id}':\n    get:\n      tags:\n        - Annotation\n      summary: Get info of a specific annotation\n      parameters:\n        - name: annotation_id\n          in: path\n          description: Id of the annotation\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n        '404':\n          description: Annotation not fond\n      operationId: get\n    delete:\n      summary: Delete an annotation\n      description: Delete an annotation\n      tags:\n        - Annotation\n      parameters:\n        - name: annotation_id\n          in: path\n          description: Id of the annotation to delete\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: The annotation record specified is not found\n      operationId: remove\n    put:\n      tags:\n        - Annotation\n      summary: Edit annotation\n      description: Edit annotation. Provide key value pair to change one value only. Provide all changed values to change multiple. Empty string will be set. Leave values don't intend to change out of request body.\n      parameters:\n        - name: annotation_id\n          in: path\n          description: Id of the annotation to edit\n          schema:\n            type: integer\n          required: true\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Annotation'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n        '404':\n          description: 'Annotation record with data id not fond, or data dont have requested property'\n      operationId: update\n    parameters:\n      - name: annotation_id\n        in: path\n        required: true\n        schema:\n          type: string\n        description: Id of an annotation record\n  /tags:\n    get:\n      tags:\n        - Tag\n      summary: 'Get all tags, sort by last modify date'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Tag'\n      operationId: getAll\n    post:\n      tags:\n        - Tag\n      summary: Create a new tag\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n      responses:\n        '201':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n      parameters:\n        - $ref: '#/components/parameters/request_id'\n      description: ''\n      operationId: create\n  '/tags/{tag_id}':\n    parameters:\n      - $ref: '#/components/parameters/tag_id'\n    get:\n      tags:\n        - Tag\n      summary: Get info of a specific tag\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '404':\n          description: Tag not fond\n      operationId: get\n    delete:\n      summary: Delete a tag and ALL TAGGING RECORDS under this tag.\n      description: Delete a tag and ALL TAGGING RECORDS under this tag.\n      tags:\n        - Tag\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: The tag specified is not found\n      operationId: remove\n    put:\n      tags:\n        - Tag\n      summary: Edit tag properties\n      description: Edit tag properties. Empty strings will be set. Properties not in request body won't be changed\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '404':\n          description: 'Tag with tag id not fond, or tag dont have requested property'\n      operationId: update\n  /users:\n    get:\n      summary: Get all users\n      tags:\n        - User\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n      operationId: getAll\n    post:\n      tags:\n        - User\n      summary: Add a new user\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n      description: ''\n      operationId: create\n  '/users/{uuid}':\n    parameters:\n      - $ref: '#/components/parameters/uuid'\n    get:\n      tags:\n        - User\n      summary: Get info of a specific user\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: User not fond\n      description: ''\n      operationId: get\n    delete:\n      summary: Delete a user\n      description: Delete a user\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n        '404':\n          description: The task specified is not found\n      operationId: remove\n    put:\n      tags:\n        - User\n      summary: Edit user info\n      description: Edit user info.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: 'Use with user id not fond, or user dont have requested property'\n      operationId: update\n  /users/login:\n    post:\n      tags:\n        - User\n      summary: Login and get JWT\n      operationId: pplabel.api.controller.user.login\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                password:\n                  type: string\n              required:\n                - username\n                - password\n  /rpc/folders:\n    post:\n      summary: ''\n      tags:\n        - rpc\n      operationId: getFolders\n      responses:\n        '200':\n          description: OK\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                path:\n                  type: string\n  /rpc/seg/polygon2points:\n    post:\n      summary: ''\n      tags:\n        - rpc\n      operationId: polygon2points\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                polygon:\n                  type: string\n  /rpc/seg/points2polygon:\n    post:\n      summary: ''\n      operationId: points2polygon\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                points:\n                  type: string\n        description: ''\n  /version:\n    get:\n      summary: Get backend version\n      tags:\n        - manage\n      operationId: getVersion\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /samples:\n    post:\n      summary: Download and import sample project\n      tags:\n        - manage\n      operationId: loadSample\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                task_category:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  project_id:\n                    type: integer\ncomponents:\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: pplabel.api.decode_token\n  schemas:\n    Project:\n      type: object\n      description: Contains project details and settings\n      x-examples:\n        Classification_Example:\n          project_id: null\n          name: Classification Example\n          description: Example Project Descreption\n          task_category: 1\n          data_dir: ~/pplabel/project_name/data\n          label_dir: ~/pplabel/project_name/label\n          label_config: '[''class1'', ''class2'', ''class3'']'\n          created: null\n          modified: null\n          other_settings: '{''multiclass_classification'':true}'\n      additionalProperties: false\n      title: ''\n      properties:\n        project_id:\n          type: integer\n          readOnly: true\n        name:\n          type: string\n          maxLength: 64\n          description: Project name\n        description:\n          type: string\n          description: Optional project description\n        task_category_id:\n          type: integer\n          description: 'Top level annotation task category, see TODO for int \u003c-\u003e category map'\n        task_category:\n          type: string\n          readOnly: true\n        data_dir:\n          type: string\n          description: Absolute directory path where all the data file is stored\n        label_dir:\n          type: string\n          description: Absolute directory path where all the label files are stored\n        labels:\n          type: array\n          items:\n            $ref: '#/components/schemas/Label'\n        label_format:\n          type: string\n          description: 'eg: single_class/multi_class for classification'\n        created:\n          type: string\n          description: Project creation timestamp in UTC\n          format: timestamp\n          nullable: true\n          readOnly: true\n        modified:\n          type: string\n          description: Last time the project detail or ANY TASK of the project is modified\n          format: timestamp\n          nullable: true\n          readOnly: true\n        other_settings:\n          type: object\n          properties:\n            mlBackendUrl:\n              type: string\n            perviousModel:\n              type: string\n            models:\n              type: object\n    Task:\n      title: Task\n      type: object\n      description: An annotation task\n      additionalProperties: false\n      properties:\n        task_id:\n          type: integer\n          readOnly: true\n        project_id:\n          type: integer\n        data_paths:\n          type: array\n          items:\n            type: string\n        annotations:\n          type: array\n          items:\n            $ref: '#/components/schemas/Annotation'\n        project:\n          $ref: '#/components/schemas/Project'\n        set:\n          type: integer\n        modified:\n          type: string\n          format: timestamp\n          readOnly: true\n        created:\n          type: string\n          format: timestamp\n          readOnly: true\n      required:\n        - project_id\n    Data:\n      title: Data\n      type: object\n      properties:\n        data_id:\n          type: integer\n          readOnly: true\n        task_id:\n          type: integer\n        size:\n          type: string\n        task:\n          $ref: '#/components/schemas/Task'\n        created:\n          type: string\n          readOnly: true\n        modified:\n          type: string\n          readOnly: true\n        sault:\n          type: string\n    Annotation:\n      type: object\n      title: Annotation\n      description: ''\n      additionalProperties: false\n      properties:\n        annotation_id:\n          type: integer\n          readOnly: true\n        frontend_id:\n          type: integer\n        task_id:\n          type: integer\n        label_id:\n          type: integer\n        label:\n          $ref: '#/components/schemas/Label'\n        project_id:\n          type: integer\n        data_id:\n          type: integer\n        result:\n          type: string\n        type:\n          type: string\n        created:\n          type: string\n          readOnly: true\n        modified:\n          type: string\n          readOnly: true\n      required:\n        - data_id\n    Label:\n      title: Label\n      type: object\n      description: ''\n      properties:\n        label_id:\n          type: integer\n        project_id:\n          type: integer\n        name:\n          type: string\n        color:\n          type: string\n        comment:\n          type: string\n        created:\n          type: string\n          readOnly: true\n        modified:\n          type: string\n          readOnly: true\n        super_category_id:\n          type: integer\n      required:\n        - name\n    Tag:\n      title: Tag\n      type: object\n      properties:\n        tag_id:\n          type: integer\n        project_id:\n          type: integer\n        name:\n          type: string\n        color:\n          type: string\n        comment:\n          type: string\n    TagTask:\n      title: TagTask\n      type: object\n      properties:\n        tag_task_id:\n          type: integer\n        project_id:\n          type: integer\n        tag_id:\n          type: integer\n        task_id:\n          type: integer\n    User:\n      title: User\n      type: object\n      description: ''\n      properties:\n        user_id:\n          type: integer\n          readOnly: true\n        name:\n          type: string\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n        role_id:\n          type: integer\n    ProjectOtherSettings:\n      title: ProjectOtherSettings\n      type: object\n      properties:\n        label_names_path:\n          type: string\n        split_file_paths:\n          type: array\n          items:\n            type: string\n  parameters:\n    request_id:\n      name: request_id\n      in: header\n      required: false\n      schema:\n        type: string\n        maxLength: 30\n      description: 'Assign a unique random string each request, backend will reject requests with same request_id within several seconds. Prevent critical operations (mostly post) from executing multiple times'\n    project_id:\n      name: project_id\n      in: path\n      schema:\n        type: string\n      description: Id of a project\n      required: true\n    label_id:\n      name: label_id\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Id of a label\n    task_id:\n      name: task_id\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Id of a task\n    data_id:\n      name: data_id\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Id of a data record\n    annotation_id:\n      name: annotation_id\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Id of an annotation record\n    frontend_id:\n      name: frontend_id\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Id of a frontend-annotation record\n    tag_id:\n      name: tag_id\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Id of a tag\n    uuid:\n      name: uuid\n      in: path\n      required: true\n      schema:\n        type: string\n      description: Unique id of user\n",
			"canonicalURL": "/github.com/PaddleCV-SIG/PP-Label@5efe694090131dec534a5b16229210e04f3ed88e/-/blob/pplabel/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/PaddleCV-SIG/PP-Label/blob/5efe694090131dec534a5b16229210e04f3ed88e/pplabel/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /tasks/{task_id}/tags: get: duplicate operationId: \"getTags\""
}