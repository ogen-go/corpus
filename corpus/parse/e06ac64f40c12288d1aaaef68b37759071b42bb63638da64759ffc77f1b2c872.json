{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dadrus/heimdall"
		},
		"file": {
			"name": "specification.yaml",
			"size": 0,
			"path": "docs/openapi/specification.yaml",
			"byteSize": 19785,
			"content": "openapi: 3.1.0\n\ninfo:\n  title: Heimdall\n  version: x-current-version\n  description: The API of heimdall\n  license:\n    name: Apache 2.0\n    identifier: Apache-2.0\n    url: https://github.com/dadrus/heimdall/blob/main/LICENSE\n\nservers:\n  - url: http://heimdall.management.local\n    description: Management Server\n\ntags:\n  - name: Well-Known\n    description: |\n      Operations/resources which fall under the `.well-known` (see [RFC 8615](https://www.rfc-editor.org/rfc/rfc8615))\n      category, like health endpoints, etc. \n      \n      This functionality is only available on heimdall's **management port**.\n  - name: Decision API\n    description: |\n      Decision API is an operation mode of heimdall, in which heimdall can be integrated with most probably all modern\n      API gateways and reverse proxies as a so-called \"authentication middleware\". Here the reverse proxy, respectively\n      API gateway, will forward requests to heimdall by making use of its decisions service endpoint for authentication\n      and authorization purposes. Upon reception, heimdall will check if these requests satisfy the conditions defined\n      in pipeline definition rules. If not, heimdall returns an error (here to API gateway/reverse proxy). Otherwise,\n      the response to the API gateway/reverse proxy may contain additional headers, set by the used pipeline, which\n      should then be forwarded to the upstream service.\n      \n      This functionality is only available on heimdall's **decision port**.\n  - name: Proxy\n    description: |\n      Proxy is an operation mode of heimdall, in which heimdall forwards requests to the upstream service, if these\n      satisfy the conditions defined in pipeline definition rules. Otherwise, heimdall returns an error to the client.\n      If the pipeline execution was successful, it also forwards additional headers, specified in the used pipeline \n      to the upstream service.\n      \n      This functionality is only available on heimdall's **proxy port**.\n\nx-tagGroups:\n  - name: Management\n    tags:\n      - Well-Known\n  - name: Decision\n    tags:\n      - Decision API\n  - name: Proxy\n    tags:\n      - Proxy\n\ncomponents:\n  schemas:\n    ETag:\n      description: |\n        The ETag (or entity tag) HTTP response header is an identifier for a specific version of a resource. \n        It lets caches be more efficient and save bandwidth, as a web server does not need to resend a full response\n        if the content was not changed. Example: `ETag: \"33a64df551425fcc55e4d42a148795d9f25f89d4\"`.\n      type: string\n\n    If-None-Match:\n      description: |\n        Carries the `ETag` value from the previous response. Enables the client to check whether there is a change\n        to the server side resource. Example: `If-None-Match: \"33a64df551425fcc55e4d42a148795d9f25f89d4\"`.\n      type: string\n\n    HealthStatus:\n      title: Health status\n      description: Simple information about the health status of a heimdall instance\n      type: object\n      properties:\n        status:\n          description: The health status\n          type: string\n\n    JWKS:\n      title: JSON Web Key Set\n      description: JSON Web Key Set to validate JSON Web Token.\n      type: object\n      required:\n        - keys\n      properties:\n        keys:\n          description: |\n            The value of the 'keys' parameter is an array of JWK values. By default, the order of the JWK values\n            within the array does not imply an order of preference among them, although applications of JWK Sets\n            can choose to assign a meaning to the order for their purposes, if desired.\n          type: array\n          items:\n            type: object\n            required:\n              - kty\n            properties:\n              crv:\n                description: |\n                  The name of the curve, if the entry represents an EC key (see \n                  [RFC 7518](https://www.rfc-editor.org/rfc/rfc7518) for more details)\n                type: string\n              x:\n                description: X parameter of the elliptic curve, if the entry represents an EC key\n                type: string\n              y:\n                description: Y parameter of the elliptic curve, if the entry represents an EC key\n                type: string\n              n:\n                description: |\n                  Modulus parameter of an RSA public key, if the entry represents an RSA public key (see \n                  [RFC 7518](https://www.rfc-editor.org/rfc/rfc7518) for more details)\n                type: string\n              e:\n                description: Exponent parameter of an RSA public key, if the entry represents an RSA public key\n                type: string\n              kty:\n                description: Identifies the cryptographic algorithm family used with the key, such as 'RSA' or 'EC'\n                type: string\n              use:\n                description: Identifies the intended use of the public key, such as 'sig', or 'enc'\n                type: string\n              key_ops:\n                description: Identifies the operation(s) for which the key is intended to be used\n                type: string\n              alg:\n                description: Identifies the algorithm intended for use with the key\n                type: string\n              kid:\n                description: The identifier of the key\n                type: string\n              x5u:\n                description: |\n                  X.509 URL parameter is a URI [RFC3986](https://www.rfc-editor.org/rfc/rfc3986) that refers to a\n                  resource for an X.509 public key certificate or certificate chain \n                  [RFC5280](https://www.rfc-editor.org/rfc/rfc5280).\n                type: string\n                format: uri\n              x5c:\n                description: |\n                  Stands for an X.509 certificate chain. This parameter contains a chain of one or more PKIX \n                  certificates [RFC5280](https://www.rfc-editor.org/rfc/rfc5280). The certificate chain is \n                  represented as a JSON array of certificate value strings. Each string in the array is base64-encoded\n                type: array\n                items:\n                  type: string\n              x5t:\n                description: |\n                  Stands for X.509 certificate SHA-1 thumbprint. This parameter is a base64url-encoded SHA-1 thumbprint\n                  (a.k.a. digest) of the DER encoding of an X.509 certificate \n                  [RFC5280](https://www.rfc-editor.org/rfc/rfc5280)\n                type: string\n              x5t#S256:\n                description: Stands for X.509 certificate SHA-256 thumbprint. This parameter is a base64url-encoded\n                  SHA-256 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate \n                  [RFC5280](https://www.rfc-editor.org/rfc/rfc5280)\n                type: string\n\n  responses:\n    NotModified:\n      description: Not Modified. Returned if the resource has not been changed for the given `ETag` value\n    InternalServerError:\n      description: Internal Server Error. Returned if the service run in a bad condition and cannot serve the request.\n\npaths:\n  /.well-known/health:\n    servers:\n      - url: http://heimdall.management.local\n        description: Management Server\n    get:\n      description: |\n        Offers functionality to see the health status of a heimdall instance.\n      tags:\n        - Well-Known\n      operationId: well_known_health\n      summary: Get health status\n      responses:\n        '200':\n          description: Health status of a heimdall instance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthStatus'\n              example:\n                status: ok\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /.well-known/jwks:\n    servers:\n      - url: http://heimdall.management.local\n        description: Management Server\n    get:\n      description: |\n        Exposes the keys for the verification purposes of the issued JWTs in the format of JWKS as described\n        in [RFC7517](https://www.rfc-editor.org/rfc/rfc7517). This key set contains the key material configured\n        for signing JWTs and makes use of [ETag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag)\n        for caching purposes.\n\n        The contents served by this endpoint directly depend on the configuration for heimdall's key store. So, if\n        nothing has been configured, the response will contain the JWKS with a single JWK for the key material heimdall\n        generated on start up. Otherwise, the response will contain the JWKS with as many JWK entries, as\n        specified via the aforesaid key store. If certificates have been configured together with the keys, \n        the corresponding `x5c` entries will be present as well.\n      tags:\n        - Well-Known\n      summary: Get JWT verification keys (aka JWKS endpoint)\n      operationId: well_known_jwks\n      parameters:\n        - name: If-None-Match\n          in: header\n          required: false\n          schema:\n            $ref: '#/components/schemas/If-None-Match'\n      responses:\n        '200':\n          description: JWKS with keys ans certificates\n          headers:\n            ETag:\n              schema:\n                $ref: '#/components/schemas/ETag'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JWKS'\n              example:\n                keys:\n                  - use: sig\n                    kty: EC\n                    kid: foo\n                    crv: P-384\n                    alg: ES384\n                    x: 0WuRhXd8TpGy8Xn3zDT3xkkS7Ua66QQSK69gWxPHw7k1tZyQXsUuEudYDb_vwN9f\n                    y: _CBaqh43zjEowNq1wZcrMr-bdeDHdz17iVSkJKYonUzDFeyuiHETAQrYcqDT_8mG\n                    x5c:\n                      - \"MIIBwzCCAUmgAwIBAgIBATAKBggqhkjOPQQDAzA0MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTAeFw0yMjA4MjYxNDE2MzlaFw0yMjA4MjcxNDE2MzlaMDAxCzAJBgNVBAYTAkVVMQ0wCwYDVQQKEwRUZXN0MRIwEAYDVQQDEwlUZXN0IEVFIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATRa5GFd3xOkbLxeffMNPfGSRLtRrrpBBIrr2BbE8fDuTW1nJBexS4S51gNv+/A31/8IFqqHjfOMSjA2rXBlysyv5t14Md3PXuJVKQkpiidTMMV7K6IcRMBCthyoNP/yYajMzAxMA4GA1UdDwEB/wQEAwIHgDAfBgNVHSMEGDAWgBTnmalbrDGB9vYp3pgrWMsuekT/lTAKBggqhkjOPQQDAwNoADBlAjB6Ww6YNcOc2/b5nEWMNIS65pdaKWmOUzlf0kObTngLy/K+CGR7URSpgebN+l66KT4CMQDx2zCwZ/nm3k66q1y+7xROvb1Ex8/lMu9PR6pUB6ly6Km5NR49jvNPD2y30jVYwYQ=\"\n                      - \"MIIB9zCCAX6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODI2MTQxNjM5WhcNMjIwODI3MTQxNjM5WjA0MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEWMBQGA1UEAxMNVGVzdCBJbnQgQ0EgMTB2MBAGByqGSM49AgEGBSuBBAAiA2IABN7hGog6/ITGXjAQMgI9SK5o8cQD7S1nY3KeL/E7X8nA9rRn7ypoa3MLRsvqbaTUo0UDQ+1SHiggx6sPZuMFbEEFuNogppwT+FipiRO7STPgl3tzN56ujPbS7zA1Idl8GqNjMGEwDgYDVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFOeZqVusMYH29inemCtYyy56RP+VMB8GA1UdIwQYMBaAFChI/FlLwR+/sRpsUDoo/09yXQyyMAoGCCqGSM49BAMDA2cAMGQCMACiNY17Rb4ODRcQHPEkXm7ASwgG7LC4qFojACWyOoIYUMsdToVf9qLNEr+VMDFxcwIwMkBU1B49EAuQfw6KjVyRL3eWqjf968J+fZl98JhbBEIiXSZH+QZ1o4Wr3uF1dvPg\"\n                      - \"MIIB2TCCAV6gAwIBAgIBATAKBggqhkjOPQQDAzA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwHhcNMjIwODI2MTQxNjM5WhcNMjIwODI3MTQxNjM5WjA1MQswCQYDVQQGEwJFVTENMAsGA1UEChMEVGVzdDEXMBUGA1UEAxMOVGVzdCBSb290IENBIDEwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARA9OvlJEV3H6utejUDh04NI4dia5vPD0kA1hBmljoxwv1QmfT3jbkXRqSs59X+tmElmbv5ZEZjrlYzf5w2H2P7RwenUPI0btI/OYtP6Rb7+uSmeHJ2da+fHMU7G48qWVSjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQoSPxZS8Efv7EabFA6KP9Pcl0MsjAKBggqhkjOPQQDAwNpADBmAjEA9c3JZ4zGlCG+ZDHL6uy/pGL2kbk6qS4H4cYfIMse+vbovIcvow+EZ+i0q0cPeTQRAjEAmafGSmd+xfH++ET8S9Xy6ldml6l3zObqi1/FrrUN2BxpVdnud/EoQMgJkGOX70rs\"\n                  - use: sig\n                    kty: EC\n                    kid: bar\n                    crv: P-384\n                    alg: ES384\n                    x: F47uZNn_QtqKXcxsYsJSc5asaqEPxVuc2sIVLzR2dRDi29tdA_X7phRX9kGhDnOO\n                    y: elcChdCImsIaRT7xVLslehBpVaWKlNnCSTPhJLYXwcB1dS24bpUkwAiVijejZ0J0\n        '304':\n          $ref: '#/components/responses/NotModified'\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n\n  /{decision_path_and_query_params}:\n    servers:\n      - url: http://heimdall.decision.local\n        description: Decision Service\n    get:\n      summary: Decision endpoint\n      description: This endpoint accepts any subpaths, headers, cookies, etc. Also, all methods can be used as well.\n      tags:\n        - Decision API\n      operationId: get_decision_api\n      parameters:\n        - name: decision_path_and_query_params\n          in: path\n          description: The path and query parameter to match a rule and to work on.\n          schema:\n            type: string\n        - name: X-Forwarded-Method\n          in: header\n          description: The HTTP method to use to for the url to verify access to. If not present defaults to the method used for sending the request to heimdall.\n          schema:\n            type: string\n        - name: X-Forwarded-Proto\n          in: header\n          description: Schema to use to build the url to verify access to. If not present defaults to the schema used to operate heimdall.\n          schema:\n            type: string\n        - name: X-Forwarded-Host\n          in: header\n          description: Host to use to build the url to verify access to.\n          schema:\n            type: string\n        - name: X-Forwarded-Path\n          in: header\n          description: Path to use to build the url to verify access to. If not present the `Path` of the request is used.\n          schema:\n            type: string\n        - name: X-Forwarded-Uri\n          in: header\n          description: The Uri to use to build the url to verify access to.\n          schema:\n            type: string\n        - name: X-Forwarded-For\n          in: header\n          description: A list with IPs of the clients (from heimdall perspective), the request has been passed through.\n          schema:\n            type: string\n        - name: Forwarded\n          in: header\n          description: A list with IPs of the clients (from heimdall perspective), the request has been passed through.\n          schema:\n            type: string\n        - name: \u003cApplication Specific\u003e\n          in: header\n          description: Placeholder for other headers, the defined rules make use of.\n          schema:\n            type: string\n        - name: \u003cApplication Specific\u003e\n          in: cookie\n          description: Placeholder for cookies, the defined rules make use of.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Request has been accepted and is allowed to be forwarded to the upstream service.\n          headers:\n            \u003cApplication Specific\u003e:\n              description: |\n                Placeholder for the headers, created as a result of successful execution of application specific rules.\n                E.g. a rule can create an `Authorization` header with a bearer token in a JWT format to be forwarded to\n                the upstream service by an API-Gateway.\n              schema:\n                type: string\n        '401':\n          description: Unauthorized. Returned if a matching rule could not verify the authentication status of the subject related to the request.\n        '403':\n          description: Forbidden. Returned if a matching rule could not verify the authorization status of the subject related to the request.\n        '404':\n          description: Not Found. Returned if there was no rule found, which could be used to verify the request.\n        '405':\n          description: Method not allowed. Returned if the patched rule doesn't allow the usage of a particular HTTP method.\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '502':\n          description: |\n            Bad Gateway. Returned if the communication with any of the systems, the handlers in a matching rule are \n            using, failed due to DNS, timeout etc. errors.\n\n  /{proxy_path_and_query_params}:\n    servers:\n      - url: http://heimdall.proxy.local\n        description: Decision Service\n    get:\n      summary: Proxy endpoint\n      description: This endpoint accepts any subpaths, headers, cookies, etc. Also, all methods can be used as well.\n      tags:\n        - Proxy\n      operationId: get_proxy\n      parameters:\n        - name: proxy_path_and_query_params\n          in: path\n          description: The path and query parameter to match a rule and to work on.\n          schema:\n            type: string\n        - name: X-Forwarded-Method\n          in: header\n          description: The HTTP method to use to for the url to verify access to. If not present defaults to the method used for sending the request to heimdall.\n          schema:\n            type: string\n        - name: X-Forwarded-Proto\n          in: header\n          description: Schema to use to build the url to verify access to. If not present defaults to the schema used to operate heimdall.\n          schema:\n            type: string\n        - name: X-Forwarded-Host\n          in: header\n          description: Host to use to build the url to verify access to.\n          schema:\n            type: string\n        - name: X-Forwarded-Path\n          in: header\n          description: Path to use to build the url to verify access to. If not present the `Path` of the request is used.\n          schema:\n            type: string\n        - name: X-Forwarded-Uri\n          in: header\n          description: The Uri to use to build the url to verify access to.\n          schema:\n            type: string\n        - name: X-Forwarded-For\n          in: header\n          description: A list with IPs of the clients (from heimdall perspective), the request has been passed through.\n          schema:\n            type: string\n        - name: Forwarded\n          in: header\n          description: A list with IPs of the clients (from heimdall perspective), the request has been passed through.\n          schema:\n            type: string\n        - name: \u003cApplication Specific\u003e\n          in: header\n          description: Placeholder for other headers, the defined rules make use of.\n          schema:\n            type: string\n        - name: \u003cApplication Specific\u003e\n          in: cookie\n          description: Placeholder for cookies, the defined rules make use of.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: |\n            If the request has been accepted, it will be forwarded to the upstream service. In that case the\n            response comes from the upstream service.\n        '401':\n          description: Unauthorized. Returned if a matching rule could not verify the authentication status of the subject related to the request.\n        '403':\n          description: Forbidden. Returned if a matching rule could not verify the authorization status of the subject related to the request.\n        '404':\n          description: Not Found. Returned if there was no rule found, which could be used to verify the request.\n        '405':\n          description: Method not allowed. Returned if the patched rule doesn't allow the usage of a particular HTTP method.\n        '500':\n          $ref: '#/components/responses/InternalServerError'\n        '502':\n          description: |\n            Bad Gateway. Returned if the communication with any of the systems, the handlers in a matching rule are \n            using, failed due to DNS, timeout etc. errors.\n",
			"canonicalURL": "/github.com/dadrus/heimdall@4ca9a9d3ddb2f5cf723cbc1b729c8017622b3524/-/blob/docs/openapi/specification.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dadrus/heimdall/blob/4ca9a9d3ddb2f5cf723cbc1b729c8017622b3524/docs/openapi/specification.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/{decision_path_and_query_params}\": get: operation \"get_decision_api\": parameters: parse parameter \"decision_path_and_query_params\": at docs/openapi/specification.yaml:260:11: path parameters must be required"
}