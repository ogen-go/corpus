{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tatumio/tatum-blockchain-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "scrypta-connector/module/openapi.yaml",
			"byteSize": 32016,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://api-eu1.tatum.io'\ninfo:\n  version: 1.0.5\n  title: Tatum Scrypta API\ntags:\n  - description: |\n      \u003cp\u003eScrypta Blockchain is a public, permissioned blockchain. With Scrypta Blockchain you will be able to manage any kind of data, read or update them (in an append only mode), create tokens and smart contracts. Scrypta application layer is managed by IdaNodes and Tatum calls are based on a small network of them.\u003cbr/\u003e\n      Currently we support only basic transactions but every IdaNode endpoint will be available soon.\n      \u003cbr/\u003e\u003cbr/\u003e\n      If you need to better understand how Scrypta works please read even our \u003ca href=\"https://en.scrypta.wiki\"\u003ewiki\u003c/a\u003e.\n      \u003cbr/\u003e\u003cbr/\u003e\n      Tatum supports 2 chains:\n      \u003cul\u003e\u003cli\u003eMainnet - is regular live chain\u003c/li\u003e\n      \u003cli\u003eTestnet - test chain used for testing purposes.\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\n    name: Blockchain / Scrypta\npaths:\n  /v3/scrypta/wallet:\n    get:\n      summary: Generate Scrypta wallet\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eTatum supports BIP44 HD wallets. It is very convenient and secure, since it can generate 2^31 addresses from 1 mnemonic phrase. Mnemonic phrase consists of 24 special words in defined order and can restore access to all generated addresses and private keys.\u003cbr/\u003eEach address is identified by 3 main values:\u003cul\u003e\u003cli\u003ePrivate Key - your secret value, which should never be revealed\u003c/li\u003e\u003cli\u003ePublic Key - public address to be published\u003c/li\u003e\u003cli\u003eDerivation index - index of generated address\u003c/li\u003e\u003c/ul\u003e\u003c/p\u003e\u003cp\u003eTatum follows BIP44 specification and generates for Scrypta wallet with derivation path m'/44'/0'/0'/0. More about BIP44 HD wallets can be found here - \u003ca target=\"_blank\" href=\"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\"\u003ehttps://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki\u003c/a\u003e.\n        Generate BIP44 compatible Scrypta wallet.\u003c/p\u003e\n      operationId: GenerateScryptawallet\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ScryptaWallet\"\n          description: OK\n        400: \u0026API400\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error400\"\n          description: Bad Request. Validation failed for the given object in the HTTP Body or Request parameters.\n        401: \u0026API401\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error401NotActive\"\n                  - $ref: \"#/components/schemas/Error401Invalid\"\n          description: Unauthorized. Not valid or inactive subscription key present in the HTTP Header.\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Error403\"\n        500: \u0026API500\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error500\"\n          description: Internal server error. There was an error on the server during the processing of the request.\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  /v3/scrypta/wallet/priv:\n    post:\n      summary: Generate Scrypta private key\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate private key for address from mnemonic for given derivation path index. Private key is generated for the concrete index - each mnemonic\n        can generate up to 2^32 private keys starting from index 0 until 2^31.\u003c/p\u003e\n      operationId: GenerateScryptaprivatekey\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PrivKeyRequest\"\n        required: true\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PrivKeyScrypta\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403BlockchainPrivateFailed\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/block/hash/{i}':\n    get:\n      summary: Get Block hash\n      description: \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Scrypta Block hash. Returns hash of the block to get the block detail.\u003c/p\u003e\n      operationId: GetScryptaBlockhash\n      parameters:\n        - name: i\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: \"1\"\n          description: The number of blocks preceding a particular block on a block chain.\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  hash:\n                    type: string\n                    description: Block hash\n                    example: \"0000000053f225e202cf27fe3046e06719efd3b31b5ab75fc5ef7f853c8b246f\"\n          description: OK\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/block/{hash}':\n    get:\n      summary: Get Block by hash or height\n      description: \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Scrypta Block detail by block hash or height.\u003c/p\u003e\n      operationId: GetScryptaBlockbyhashorheight\n      parameters:\n        - name: hash\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n          description: Block hash or height.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScryptaBlock'\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  /v3/scrypta/transaction:\n    post:\n      summary: Send LYRA to blockchain addresses\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eSend Scrypta to blockchain addresses. It is possible to build a blockchain transaction in 2 ways:\n        \u003cul\u003e\n        \u003cli\u003e\u003cb\u003efromAddress\u003c/b\u003e - assets will be sent from the list of addresses. For each of the addresses last 100 transactions will be scanned for any unspent UTXO and will be included in the transaction.\u003c/li\u003e\n        \u003cli\u003e\u003cb\u003efromUTXO\u003c/b\u003e - assets will be sent from the list of unspent UTXOs. Each of the UTXO will be included in the transaction.\u003c/li\u003e\n        \u003c/ul\u003e\n        In scrypta-like blockchains, the transaction is created from the list of previously not spent UTXO. Every UTXO contains the number of funds, which can be spent.\n        When the UTXO enters into the transaction, the whole amount is included and must be spent. For example, address A receives 2 transactions, T1 with 1 LYRA and T2 with 2 LYRA.\n        The transaction, which will consume UTXOs for T1 and T2, will have available amount to spent 3 LYRA = 1 LYRA (T1) + 2 LYRA(T2).\u003cbr/\u003e\u003cbr/\u003e\n        There can be multiple recipients of the transactions, not only one. In the \u003cb\u003eto\u003c/b\u003e section, every recipient address has it's corresponding amount.\n        When the amount of funds, that should receive the recipient is lower than the number of funds from the UTXOs, the difference is used as a transaction fee.\u003cbr/\u003e\u003cbr/\u003e\n        This operation needs the private key of the blockchain address. Every time the funds are transferred, the transaction must be signed with the corresponding private key.\n        No one should ever send it's own private keys to the internet because there is a strong possibility of stealing keys and losing funds. In this method, it is possible to enter privateKey\n        or signatureId. PrivateKey should be used only for quick development on testnet versions of blockchain when there is no risk of losing funds. In production,\n        \u003ca href=\"https://github.com/tatumio/tatum-kms\" target=\"_blank\"\u003eTatum KMS\u003c/a\u003e should be used for the highest security standards, and signatureId should be present in the request.\n        Alternatively, using the Tatum client library for supported languages.\n        \u003c/p\u003e\n      operationId: SendLYRAtoblockchainaddresses\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/TransactionHashKMS\"\n                  - $ref: \"#/components/schemas/SignatureId\"\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScryptaTransaction\"\n        required: true\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/transaction/{hash}':\n    get:\n      summary: Get Scrypta Transaction by hash\n      description: \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Scrypta Transaction detail by transaction hash.\u003c/p\u003e\n      operationId: GetScryptaTransactionbyhash\n      parameters:\n        - name: hash\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: 980fa9cb468f93c6cb6b672e1b062a16507a1a9a7903a83bf3f10e1059b25341\n          description:  Transaction hash\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScryptaTx'\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/transaction/address/{address}':\n    get:\n      summary: Get Transactions by address\n      description: \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Scrypta Transactions by address.\u003c/p\u003e\n      operationId: GetScryptaTransactionsbyaddress\n      parameters:\n        - name: pageSize\n          in: query\n          required: true\n          style: form\n          schema:\n            type: number\n            example: 50\n          description: Max number of items per page is 50.\n        - name: offset\n          in: query\n          required: true\n          style: form\n          schema:\n            type: number\n            example: 100\n          description: Offset to obtain next page of the data.\n        - name: address\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: LPcLKgbdwmDkdNFYfv1VX1k3gUuQgS7Au6\n          description: Address\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScryptaTx'\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/utxo/{address}':\n    get:\n      summary: Get Scrypta spendable UTXO\n      description: \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Scrypta spendable UTXO.\u003c/p\u003e\n      operationId: GetScryptaspendableUTXO\n      parameters:\n        - name: pageSize\n          in: query\n          required: true\n          style: form\n          schema:\n            type: number\n            example: 50\n          description: Max number of items per page is 50.\n        - name: offset\n          in: query\n          required: true\n          style: form\n          schema:\n            type: number\n            example: 100\n          description: Offset to obtain next page of the data.\n        - name: address\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: 2ac9175db66a9e646034a9663870743d177175ceff6c25231528cb7690900a78\n          description: Address\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScryptaUTXO'\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/utxo/{hash}/{index}':\n    get:\n      summary: Get UTXO of Transaction\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGet UTXO of given transaction and output index. UTXO means Unspent Transaction Output, which is in blockchain terminology assets, that user\n        received on the concrete address and does not spend it yet.\u003cbr/\u003e\n        In scrypta-like blockchains (LYRA, LTC, BCH), every transaction is built from the list of previously\n        not spent transactions connected to the address. If user owns address A, receives in transaciont T1 10 LYRA, he can spend in the next transaction\n        UTXO T1 of total value 10 LYRA. User can spend multiple UTXOs from different addresses in 1 transaction.\u003cbr/\u003e\n        If UTXO is not spent, data are returned, otherwise 404 error code.\u003c/p\u003e\n      operationId: GetScryptaUTXOofTransaction\n      parameters:\n        - name: hash\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: 980fa9cb468f93c6cb6b672e1b062a16507a1a9a7903a83bf3f10e1059b25341\n          description: TX Hash\n        - name: index\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: \"0\"\n          description: Index of tx output to check if spent or not\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScryptaUTXO'\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  '/v3/scrypta/address/{xpub}/{index}':\n    get:\n      summary: Generate Scrypta deposit address from Extended public key\n      description: |\n        \u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eGenerate Scrypta deposit address from Extended public key. Deposit address is generated for the concrete index - each extended public key can generate\n        up to 2^32 addresses starting from index 0 until 2^31.\u003c/p\u003e\n      operationId: GenerateScryptadepositaddressfromExtendedpublickey\n      parameters:\n        - name: xpub\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: xpub6FL6yNcaXSaJaLoe2e5a1AGWUARpC5bTLKrGLHqN3qFGeBQBYdCFsdYzgoWHMruUcBJrQ1jCpoXvqduqchuHGEvuGm9gC4JR5ZttscVxa3y\n          description: Extended public key of wallet.\n        - name: index\n          in: path\n          required: true\n          style: simple\n          schema:\n            type: string\n            example: \"0\"\n          description: Derivation index of desired address to be generated.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  address:\n                    type: string\n                    example: LebwFwyEaPhnsvv7my8drgU9myev6DpdPV\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  /v3/scrypta/info:\n    get:\n      summary: Get Blockchain Information\n      description: '\u003ch4\u003e1 credit per API call.\u003c/h4\u003e\u003cbr/\u003e\u003cp\u003eGet Scrypta Blockchain Information. Obtain basic info like testnet / mainent version of the chain, current block number and it''s hash.\u003c/p\u003e'\n      operationId: GetScryptaBlockchainInformation\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScryptaInfo'\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\n  /v3/scrypta/broadcast:\n    post:\n      summary: Broadcast signed Scrypta transaction\n      description: |\n        \u003ch4\u003e2 credits per API call.\u003c/h4\u003e\u003cbr/\u003e\n        \u003cp\u003eBroadcast signed transaction to Scrypta blockchain. This method is used internally from Tatum KMS or Tatum client libraries.\n        It is possible to create custom signing mechanism and use this method only for broadcasting data to the blockchian.\u003c/p\u003e\n      operationId: BroadcastsignedScryptatransaction\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TransactionHashKMS\"\n        400:\n          \u003c\u003c: *API400\n        401:\n          \u003c\u003c: *API401\n        403:\n          description: Forbidden. The request is authenticated, but it is not possible to required perform operation due to logical error or invalid permissions.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error403\"\n        500:\n          \u003c\u003c: *API500\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BroadcastKMS\"\n        required: true\n      security:\n        - X-Api-Key: []\n      x-code-samples:\n      tags:\n        - Blockchain / Scrypta\ncomponents:\n  securitySchemes:\n    X-Api-Key:\n      description: |\n        To maintain the highest security level, Tatum requires X-API-Key HTTP header.\n        This X-API-Key represents identification of the plan and can be used by 1 developer or per environment.\n        Each X-API-Key is bound to the test or production blockchains.\n      in: header\n      name: x-api-key\n      type: apiKey\n  schemas:\n    PrivKeyScrypta:\n      type: object\n      properties:\n        key:\n          description: Generated private key.\n          example: cTmS2jBWXgFaXZ2xG9jhn67TiyTshnMp3UedamzEhGm6BZV1vLgQ\n          type: string\n    ScryptaTx:\n      type: object\n      properties:\n        hash:\n          type: string\n          example: 1151f9cf33b677a5dd21343af657fc5aa5c9139fd62c59fc13da2a774d98f154\n        inputs:\n          type: array\n          items:\n            type: object\n            properties:\n              txid:\n                type: string\n                example: b7fcc06374f6982f4ddecaef522c96402e2d10179ad33942019cbbad4b0209bd\n              vout:\n                type: number\n                example: 1\n              scriptSig:\n                type: object\n                properties:\n                  asm:\n                    type: string\n                    example: 304402207c9fbe24e5dbb54450a7e207adcafe0ee2f3ec81ad2e33d3a8cc70404835060b02207c1e7788c3f5c907932e28b3ae34cd02d2e1f95d8e2f1eb3bbb0b5c706293e0401\n                  hex:\n                    type: string\n                    example: 47304402207c9fbe24e5dbb54450a7e207adcafe0ee2f3ec81ad2e33d3a8cc70404835060b02207c1e7788c3f5c907932e28b3ae34cd02d2e1f95d8e2f1eb3bbb0b5c706293e0401\n              sequence:\n                type: number\n                example: 4294967295\n        outputs:\n          type: array\n          items:\n            type: object\n            properties:\n              value:\n                type: number\n                example: 8.5\n              n:\n                type: number\n                example: 2\n              scriptPubKey:\n                type: object\n                properties:\n                  asm:\n                    type: string\n                    example: OP_DUP OP_HASH160 c7684a5c941825336e45a9276c05de1d34929f6b OP_EQUALVERIFY OP_CHECKSIG\n                  hex:\n                    type: string\n                    example: 76a914c7684a5c941825336e45a9276c05de1d34929f6b88ac\n                  reqSigs:\n                    type: number\n                    example: 1\n                  type:\n                    type: string\n                    example: pubkeyhash\n                  addresses:\n                    type: array\n                    items:\n                      type: string\n                      example: LdQKfciCwd2rPsPCfggErpD6GMvRhB2Eak\n        time:\n          type: number\n          example: 1545994896\n        blockhash:\n          type: string\n          example: 3f18205d5884fdcbf95f2adc7a933b28fd6ec4a474b7dffb41c7a2733d0c4c2d\n    ScryptaUTXO:\n      type: object\n      properties:\n        txid:\n          type: string\n          example: 8f227111c1f807b0bd3b05c0fe9d722f75571b3a80c873f1573f976c63eddcf4\n        vout:\n          type: number\n          example: 2\n        amount:\n          type: number\n          example: 5.265\n        scriptPubKey:\n          type: string\n          example: 76a91489d3d564f322dee485e3f38a332fa3f63cb641a588ac\n        block:\n          type: number\n          example: 1025140\n    ScryptaTransaction:\n      type: object\n      required:\n        - to\n      properties:\n        fromAddress:\n          description: Array of addresses and corresponding private keys. Tatum will automatically scan last 100 transactions for each address and will use all of the unspent values. We advise to use this option if you have 1 address per 1 transaction only.\n          type: array\n          items:\n            type: object\n            required:\n              - address\n            properties:\n              signatureId:\n                type: string\n                minimum: 36\n                maximum: 36\n                format: uuid\n                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n                description: Identifier of the private key associated in signing application. Private key, or signature Id must be present.\n              address:\n                description: Address to send assets from.\n                type: string\n                example: 2N9bBiH2qrTDrPCzrNhaFGdkNKS86PJAAAS\n                minimum: 30\n                maximum: 50\n              privateKey:\n                description: Private key of the address to send assets from. Private key, or signature Id must be present.\n                type: string\n                minimum: 52\n                maximum: 52\n                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf\n        fromUTXO:\n          description: Array of transaction hashes, index of UTXO in it and corresponding private keys. Use this option if you want to calculate amount to send manually. Either fromUTXO or fromAddress must be present.\n          type: array\n          items:\n            type: object\n            required:\n              - txHash\n              - index\n            properties:\n              txHash:\n                description: Transaction hash of the UTXO to be spent.\n                type: string\n                example: 53faa103e8217e1520f5149a4e8c84aeb58e55bdab11164a95e69a8ca50f8fcc\n                minLength: 64\n                maxLength: 64\n              index:\n                description: Index of the UTXO to be spent.\n                type: string\n                example: \"0\"\n              privateKey:\n                description: Private key of the UTXO to be spent.\n                type: string\n                example: cVX7YtgL5muLTPncHFhP95oitV1mqUUA5VeSn8HeCRJbPqipzobf\n                minLength: 52\n                maxLength: 52\n              signatureId:\n                type: string\n                minimum: 36\n                maximum: 36\n                format: uuid\n                example: 1f7f7c0c-3906-4aa1-9dfe-4b67c43918f6\n                description: Identifier of the private key associated in signing application.\n        to:\n          description: Array of addresses and values to send bitcoins to. Values must be set in BTC. Difference between from and to is transaction fee.\n          type: array\n          items:\n            type: object\n            required:\n              - address\n              - value\n            properties:\n              address:\n                description: Destination address.\n                type: string\n                example: 2MzNGwuKvMEvKMQogtgzSqJcH2UW3Tc5oc7\n                minimum: 30\n                maximum: 60\n              value:\n                description: Amount to be sent, in BTC.\n                type: number\n                minimum: 0\n                example: 0.02969944\n    ScryptaBlock:\n      type: object\n      properties:\n        hash:\n          type: string\n          example: 3f18205d5884fdcbf95f2adc7a933b28fd6ec4a474b7dffb41c7a2733d0c4c2d\n        confirmations:\n          type: number\n          example: 1015465\n        size:\n          type: number\n          example: 428\n        height:\n          type: number\n          example: 10000\n        version:\n          type: number\n          example: 3\n        merkleroot:\n          type: string\n          example: bcb013dc62d59f01baca55f1d264e7b0574ce45821e44dbd1b52758657a09947\n        tx:\n          type: array\n          items:\n            type: string\n            example: 705e9918f8cb302b9c498396b89f61ce111830512a2809ef2febc315797f777f\n        time:\n          type: number\n          example: 1545994896\n        nonce:\n          type: number\n          example: 0\n        bits:\n          type: string\n          example: 1c051271\n        difficulty:\n          type: number\n          example: 50.47205032\n        chainwork:\n          type: string\n          example: 00000000000000000000000000000000000000000000000000055d4cc172571a\n        previousblockhash:\n          type: string\n          example: 8614cb01c9c97c7424e2ada9ca726700804feedb80e7a730676752e8ea1e7be2\n        nextblockhash:\n          type: string\n          example: fefd0d4201cf42624ccab4b2a385f8aa6921ce41ec11c17f971708ee497b52b6\n        txs:\n          type: array\n          items:\n            $ref: '#/components/schemas/ScryptaTx'\n    ScryptaInfo:\n      type: object\n      properties:\n        version:\n          type: string\n          example: 2.8.0\n        protocolversion:\n          type: number\n          example: 70920\n        walletversion:\n          type: number\n          example: 61000\n        balance:\n          type: number\n          example: 0.03838996\n        obfuscation_balance:\n          type: number\n          example: 0\n        blocks:\n          type: number\n          example: 1025447\n        timeoffset:\n          type: number\n          example: 0\n        connections:\n          type: number\n          example: 26\n        proxy:\n          type: string\n          example: ''\n        difficulty:\n          type: number\n          example: 28341.14251401\n        testnet:\n          type: boolean\n          example: false\n        keypoololdest:\n          type: number\n          example: 1569837461\n        keypoolsize:\n          type: number\n          example: 1001\n        paytxfee:\n          type: number\n          example: 0\n        relayfee:\n          type: number\n          example: 0.0001\n        'staking status':\n          type: string\n          example: Staking Active\n        errors:\n          type: string\n          example: ''\n        indexed:\n          type: number\n          example: 1025447\n        toindex:\n          type: number\n          example: 0\n        checksum:\n          type: string\n          example: 19cf8c6af570a7bef7f01b5295bc0bebb659b2a3d6666c41e551be5502621313\n        node:\n          type: string\n          example: 'https://idanodejs04.scryptachain.org'\n    ScryptaWallet:\n      type: object\n      required:\n        - mnemonic\n        - xpub\n      properties:\n        mnemonic:\n          type: string\n          description: Mnemonic seed for the generated wallet\n          example: plunge setup measure permit junior cheese tortoise olive fly asset merit steak flight paper layer glass sure march confirm rhythm enroll kitchen future ridge\n        xpub:\n          type: string\n          description: Extended public key to generate addresses from the wallet.\n          example: xpub6FL6yNcaXSaJaLoe2e5a1AGWUARpC5bTLKrGLHqN3qFGeBQBYdCFsdYzgoWHMruUcBJrQ1jCpoXvqduqchuHGEvuGm9gC4JR5ZttscVxa3y\n"
		}
	},
	"Error": "parse: parse spec: paths: /v3/scrypta/block/hash/{i}: get: operation \"GetScryptaBlockhash\": responses: 400: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Error400\": resolve reference \"#/components/schemas/Error400\": schema not found"
}