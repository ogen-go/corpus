{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/molit-korea/main"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "Pages/공간 데이터 분석 프로젝트/geoserver-master/src/community/ogcapi/ogcapi-styles/src/main/resources/org/geoserver/api/styles/openapi.yaml",
			"byteSize": 47349,
			"content": "openapi: 3.0.1\n# Revisions:\n# 2019-04-28 initial version\n# 2019-05-01 added support for symbols/sprites\n# 2019-05-02 added support for style validation\n# 2019-05-03 updated API definition based on the discussion in \n#            the weekly call\n# 2019-05-09 updates to align queryables and style-set with the\n#            Feature/Tile API extensions; use SwaggerHub domains\n# 2019-05-11 add PATCH semantics\n# 2019-06-07 add validate parameter on PUT /styles/{styleId}\n# 2019-07-05 add descriptions how clients interact with the APIs\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/cportele/opf-style-api/1.0.0\ninfo:\n  title: |-\n    Open Portrayal Framework Style API (DRAFT)\n  description: |-\n    # Overview\n\n    This is a draft of the OGC Testbed-15 Style API in the Open \n    Portrayal Framework task. The Style API is a Web API for \n    fetching and managing styles. \n\n    The main consumers of this API in Testbed-15 are the \n    following components.\n\n    * **Visual style editors** create, update and delete styles \n    for datasets that are shared by other Web APIs implementing \n    OGC API Features, OGC API Coverages or OGC API Tiles;\n    * **Web APIs implementing OGC API Maps** fetch styles and \n    render spatial data (features or coverages) on the server;\n    * **Map clients** fetch styles and render spatial data \n    (features or coverages) on the client.\n\n    Feature data is either accessed directly or organised in \n    spatial partitions (\"vector tiles\").\n\n    This API uses the following style-related terms and concepts.\n\n    * **Styles** organize a sequence of rules of symbolizing \n    instructions to be applied by a rendering engine on one \n    or more features and/or coverages.\n    * **Style encodings** are specifications to express a style\n    as one or more files. In Testbed-15 Mapbox Styles, OGC SLD\n    versions 1.0 and 1.1 are used.\n    * **Stylesheets** are representations of a style in a style \n    encoding.\n    * **Style metadata** is essential information about a style\n    in order to support users to discover and select styles for\n    rendering their data and for visual style editors to create\n    user interfaces for editing a style.\n\n    Stylesheets often reference external resources, especially \n    symbols and fonts to be used in the rendering process.\n\n    Symbols are either managed as a single file for each symbol\n    or they are organised in a sprite - all symbols combined in\n    a single bitmap image to reduce memory and the number of \n    http requests. Single symbols and sprites are supported\n    by this API and they may be stored on this server, for example,\n    to avoid issues with cross-origin requests. Of course,\n    existing external symbol libraries may also be referenced \n    from stylesheets.\n\n    This API does not support font resources and if you want to\n    reference fonts / glyphs from a stylesheet, please reference\n    an existing font library.\n\n    Currently no media types have been registered for Mapbox \n    Styles or OGC SLD. Temporary media types in the vnd-branch\n    are used for now.\n\n    For more background information see [the Vector Tiles Pilot Extension \n    Engineering Report](http://docs.opengeospatial.org/per/18-101.html#StylesAPI).\n\n    The API is consistent with the emerging OGC API family of \n    standards and could be a starting point for a future \n    \"OGC API - Styles\" standard. API components that are used\n    by more than one of the draft API specifications are not\n    defined in this document, but are defined in a \n    [domain for OGC API building blocks on Swaggerhub](https://app.swaggerhub.com/domains/cportele/ogc-api/1.0.0) \n    and are referenced.\n\n    This document is also available in [GitHub](https://github.com/cportele/t15-opf/blob/master/style-api.yaml).\n\n    # Conformance classes\n\n    The Style API specifies the following conformance classes.\n\n    * **'core'** supports the basic GET operations on `/`, `/conformance`, `/styles`, `/styles/{styleId}`, and `/styles/{styleId}/metadata`\n    * **'json'** supports `application/json` as a response to the GET operations on `/`, `/conformance`, `/styles`, and `/styles/{styleId}/metadata`\n    * **'html'** supports `text/html` as a response to the GET operations on `/`, `/conformance`, `/styles`, and `/styles/{styleId}/metadata`\n    * **'manage-styles'** adds POST/PUT/DELETE/PATCH methods on `/styles`, `/styles/{styleId}`, and `/styles/{styleId}/metadata`\n    * **'style-validation'** adds the `validate` parameter on POST requests to `/styles`\n    * **'resources'** adds the basic GET operations on `/resources`, and `/resources/{resourceId}`\n    * **'manage-resources'** adds POST/PUT/DELETE/PATCH methods on `/resources`, and `/resources/{resourceId}`\n    * **'mapbox-styles'** supports Mapbox Styles as a style encoding on `/styles` and `/styles/{styleId}`\n    * **'sld-10'** supports SLD 1.0 as a style encoding on `/styles` and `/styles/{styleId}`\n    * **'sld-11'** supports SLD 1.1 as a style encoding on `/styles` and `/styles/{styleId}`\n\n    # Examples how clients are expected to interact with the API\n\n    A dataset with topographic data according to the TDS specification \n    is avaiable via an API that implements the OGC API Features and Tiles specification \n    ([landing page of the dataset](`https://services.interactive-instruments.de/t15/daraa`)).\n    The dataset covers the region of Daraa, Syria. The URI of the landing page is used as \n    `{data}` in the descriptions below.\n\n    In addition, a style repository is avaiable via an API that implements the Styles API \n    specified in Testbed-15 \n    ([landing page of the repository](`https://services.interactive-instruments.de/t15/daraa`)).\n    The URI of the landing page is used as `{styles}` in the descriptions below.\n\n\n    NOTE: The referenced API does not yet implement the specifications\n    drafted in Testbed-15. This is work in progress. A template \n    for the updated specification of the Feature API is available\n    [here](https://app.swaggerhub.com/apis/cportele/opf-features-api/1.0.0). \n    **TODO: update URIs once Testbed-15 implementations are available.**\n\n    Roads are included in the data in the collection `transportationgroundcrv`\n    as [features with a property `f_code` with a value of `AP030`](https://services.interactive-instruments.de/t15/daraa/collections/transportationgroundcrv/items?f_code=AP030).\n\n    ## A visual style editor creating a new style\n\n    A user wants to create a new style for TDS roads using her visual style editor. \n    She knows the Daraa dataset and the data access API.\n\n    After creating a new style, selecting the native stylesheet language for the style  \n    and identifying the `transportationgroundcrv` collection\n    in the Daraa dataset as a sample data source, the visual style editor executes a request\n    to `{data}/conformance` of the data access API to determine the API capabilities. Note that\n    alternatively also the API definition may be inspected, but for a client that\n    supports the OGC API standards in general, using the conformance declaration is simpler \n    and, therefore, used in this example.\n\n    If the editor supports both styling of GeoJSON features or Mapbox Vector Tile data,\n    the editor requires support for at least one of the two following sets of conformance \n    classes:\n\n    * `http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/core` and `http://www.opengis.net/spec/ogcapi-features-1/1.0/conf/geojson` \n    or \n    * `http://www.opengis.net/t15/ogcapi-tiles-1/1.0/conf/core` and `http://www.opengis.net/t15/ogcapi-tiles-1/1.0/conf/mvt`.\n\n    The first one provides access to GeoJSON features via `{data}/collections/transportationgroundcrv/items`,\n    the second one provides access to MVT tiles via `{data}/collections/transportationgroundcrv/tiles`.\n\n    NOTE: For conformance classes that have not yet been specified hypothetical URIs with \"t15\" \n    instead of \"spec\" are used.\n\n    In addition, the visual style editor will look for the following conformance classes:\n\n    * `http://www.opengis.net/t15/ogcapi-features-n/1.0/conf/queryables`: If this conformance \n    class is supported, the visual style editor can specify styling rules that make use of\n    feature properties. Otherwise all styling rules will apply to all features in each \n    collection.\n    * `http://www.opengis.net/t15/ogcapi-features-m/1.0/conf/style-links`: If this conformance \n    class is supported, the visual style editor will be able to create a link from the collection \n    to the newly created style.\n\n    The editor will also request information about the features in the collection via a \n    request to `{data}/collections/transportationgroundcrv`.\n\n    If `http://www.opengis.net/t15/ogcapi-features-n/1.0/conf/queryables` is supported \n    the queryables are retrieved via a request to `{data}/collections/transportationgroundcrv/queryables`.\n\n    Based on this information, the visual style editor is able to configure its user interface\n    and guide the user through the creation of the style for road features and visualize \n    the draft style using the Daraa data. Once she has finished the style, the style will be\n    published on a Style repository that supports the Style API.\n\n    If the user request the use of a Style repository that the editor interacts with for the \n    first time, the editor will again inspect the capabilities of the repository by fetching \n    the conformance declaration at `{styles}/conformance`. \n\n    At least the following conformance classes must be supported in order for sharing \n    the new style via the repository.\n\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/core`\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/json`\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/manage-styles`\n\n    In addition, if the style includes symbols or sprites, the repository also has to \n    support the following conformance classes:\n\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/resources`\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/manage-resources`\n\n    Finally, the repository has to support the native stylesheet language that the user \n    has selected for the style definition, i.e. one of:\n\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/mapbox-styles`\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/sld-10`\n    * `http://www.opengis.net/t15/opf-styles-1/1.0/conf/sld-11`\n\n    The visual style editor will ask the user for her credentials (username and password)\n    in the style repository and use the credentials in any of the following POST/PUT/PATCH \n    requests.  \n\n    If `http://www.opengis.net/t15/opf-styles-1/1.0/conf/style-validation` is supported,\n    the visual style editor can also offer validation of the draft style any time during the \n    drafting process using POST requests with the draft stylesheet to `{styles}/styles?validate=only`.\n\n    To create the new style either a POST request with the stylesheet to `{styles}/styles`\n    or a PUT request to `{styles}/styles/{stylename}` (where `{stylename}` is the name of \n    the style specified by the user) is sent. `?validate=true` may be added to the request \n    URI to trigger validation in this step, too, if the style validation conformance class \n    is supported. If PUT is used, the visual style editor should check that no existing \n    style `{stylename}` exists.\n\n    After a succesful creation of the style (in case of a POST request, the URI of the \n    new style `{styles}/styles/{stylename}` is returned in a HTTP header `Location`), \n    the visual style editor will update the style metadata using a PUT or PATCH request to \n    `{styles}/styles/{stylename}/metadata`. \n\n    If the data access API supports the conformance class \n    `http://www.opengis.net/t15/ogcapi-features-m/1.0/conf/style-links`, the visual style editor \n    will add a link to the new style using a PATCH request to `{data}/collections/transportationgroundcrv`.\n\n    ## A visual style editor updating an existing style\n\n    The process is quite similar to the previous example with the following changes:\n\n    * The user will start from an existing style, not with a new style. I.e., the user \n    will open/load the style from the style repository and the editor will fetch it \n    from `{styles}/styles/{stylename}` (using the stylesheet language of choice) \n    and its metadata from `{styles}/styles/{stylename}/metadata`.\n    * If the style metadata includes links to sample data \n    (e.g., `{data}/collections/transportationgroundcrv`), the editor may use that data for \n    sample visualizations and perhaps to determine changes to queryables. \n    The user may also select other data sources for these purposes.\n    * Since an existing style is updated, the style definition will always be updated with \n    a PUT request to `{styles}/styles/{stylename}` (no POST request to `{styles}/styles`, which\n    would create a new style).\n\n    ## A map client\n\n    A map client that wants to visualize data for features or vector tiles for the collection\n    `{data}/collections/transportationgroundcrv` will look for a `styles` member in the \n    response. It will probably select one of the styles from the list taking the media types\n    of the supported stylesheets into account and provide a capability so that users \n    can change the style. The stylesheet returned based on the `href` member of the link \n    will be used to render the data.\n\n\n\n\n  version: \"1.0.0\"\n  contact:\n    name: Clemens Portele\n    email: portele@interactive-instruments.de\n  license:\n    name: OGC License\n    url: 'https://raw.githubusercontent.com/opengeospatial/WFS_FES/master/LICENSE'\ntags:\n  - name: Capabilities\n    description: |-\n      Information about this API\n  - name: Use styles\n    description: |-\n      Discover and fetch styles\n  - name: Manage styles\n    description: |-\n      Create, update and delete styles; only for style authors\n  - name: Fetch resources\n    description: |-\n      Fetch symbols/sprites\n  - name: Manage resources\n    description: |-\n      Create, update and delete symbols/sprites; only for style authors\npaths:\n  '/':\n    get:\n      tags:\n        - Capabilities\n      summary: landing page\n      description: |-\n        The landing page provides links to the API definition, \n        the Conformance statements and the available styles.\n      operationId: getLandingPage\n      parameters:\n        - $ref: '#/components/parameters/f-html-json'\n      responses:\n        '200':\n          description: |-\n            Links to the API capabilities and the style set \n            shared by this API.\n          content:\n            application/json:\n              schema:\n                $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/landing-page'\n              example:\n                - href: 'https://example.org/catalog/1.0/?f=json'\n                  rel: self\n                  type: application/json\n                  title: this document\n                - href: 'https://example.org/catalog/1.0/?f=html'\n                  rel: alternate\n                  type: text/html\n                  title: this document\n                - href: 'https://example.org/catalog/1.0/api?f=json'\n                  rel: service\n                  type: application/vnd.oai.openapi+json;version=3.0\n                  title: the API definition in JSON\n                - href: 'https://example.org/catalog/1.0/api?f=html'\n                  rel: service\n                  type: text/html\n                  title: the API definition in HTML\n                - href: 'https://example.org/catalog/1.0/conformance'\n                  rel: conformance\n                  type: application/json\n                  title: list of conformance classes implemented by this API\n                - href: 'https://example.org/catalog/1.0/styles'\n                  rel: data\n                  type: application/json\n                  title: the set of styles shared via this API\n            text/html:\n              schema:\n                type: string\n        '400':\n          description: |-\n            invalid or unknown query parameters\n        '406':\n          description: |-\n            The media types accepted by the client are not \n            supported for this resource\n  '/conformance':\n    get:\n      tags:\n        - Capabilities\n      summary: |-\n        information about conformance classes that this API \n        conforms to\n      description: |-\n        List of all conformance classes specified in a specification \n        that the server conforms to.\n      operationId: getConformanceClasses\n      parameters:\n        - $ref: '#/components/parameters/f-json'\n      responses:\n        '200':\n          description: |-\n            the URIs of all conformance classes supported by \n            this API\n          content:\n            application/json:\n              schema:\n                $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/conf-classes'\n              example:\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/core'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/html'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/json'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/manage-styles'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/style-validation'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/resources'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/manage-resources'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/mapbox-styles'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/sld-10'\n                - 'http://www.opengis.net/t15/opf-styles-1/1.0/conf/sld-11'\n\n        '400':\n          description: |-\n            invalid or unknown query parameters\n        '406':\n          description: |-\n            The media types accepted by the client are not \n            supported for this resource\n  '/styles':\n    get:\n      tags:\n        - Use styles\n      summary: |-\n        information about the available styles\n      operationId: getStyleSet\n      description: |-\n        This operation fetches the set of styles available. For\n        each style the id, a title, links to the stylesheet of\n        the style in each supported encoding, and the link to the \n        metadata is provided.\n\n        Testbed-15 only requires support for a small number of the\n        styles. Therefore, the currently simple approach is sufficient,\n        but in general the operation should support paging (using a \n        parameter `limit` and links to the `next` page in responses).\n      parameters:\n        - $ref: '#/components/parameters/f-json'\n      responses:\n        '200':\n          description: the set of available styles\n          content:\n            application/json:\n              schema:\n                $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/style-set'\n        '400':\n          description: |-\n            invalid or unknown query parameters\n        '406':\n          description: |-\n            The media types accepted by the client are not \n            supported for this resource\n    post:\n      tags:\n        - Manage styles\n      summary: |-\n        adds a new style\n      operationId: addStyle\n      description: |-\n        Adds a style to the style repository or just validates\n        a style.\n\n        If the parameter `validate` is set to `yes`, the\n        style will be validated before adding the style to\n        the server. If the parameter `validate` is set to \n        `only`, the server will not be changed and only the\n        validation result will be returned.\n\n        In case, a new style is created, the following rules\n        apply.\n\n        If the style submitted in the request body includes an\n        identifier (this depends on the style encoding), that \n        identifier will be used. If a style with that identifier \n        already exists, an error is returned.\n\n        If no identifier can be determined from the submitted \n        style, the server will assign a new identifier to the \n        style.\n\n        A minimal style metadata resource is created at \n        `/styles/{styleId}/metadata`. Please update the metadata \n        using a PUT request to keep the style metadata consistent \n        with the style definition.\n\n        The URI of the new style is returned in the header \n        `Location`.\n\n        This operation is only available to registered style \n        authors.\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/validate'\n      responses:\n        '201':\n          description: |-\n            style created\n          headers:\n            Location:\n              schema:\n                type: string\n              description: |-\n                URI of the new style\n        '204':\n          description: |-\n            style validated successfully, no style has been created\n        '400':\n          description: |-\n            invalid input, the style is invalid\n        '401':\n          description: |-\n            unauthorized access\n        '409':\n          description: |-\n            a style with that id already exists\n      requestBody:\n        description: |-\n          Stylesheet to be added\n        content:\n          application/vnd.mapbox.style+json:\n            schema:\n              $ref: '#/components/schemas/mb-style'\n          application/vnd.ogc.sld+xml;version=1.0:\n            schema:\n              $ref: '#/components/schemas/sld-10'\n          application/vnd.ogc.sld+xml;version=1.1:\n            schema:\n              $ref: '#/components/schemas/sld-11'\n  '/styles/{styleId}':\n    get:\n      tags:\n        - Use styles\n      summary: |-\n        fetch a style by id\n      description: |-\n        Fetches the style with identifier `styleId`. The set of \n        available styles can be retrieved at `/styles`.\n\n        Not all styles are available in all style encodings.\n      operationId: getStyle\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n        - $ref: '#/components/parameters/f-style'\n      responses:\n        '200':\n          description: |-\n            The style\n          content:\n            application/vnd.mapbox.style+json:\n              schema:\n                $ref: '#/components/schemas/mb-style'\n            application/vnd.ogc.sld+xml;version=1.0:\n              schema:\n                $ref: '#/components/schemas/sld-10'\n            application/vnd.ogc.sld+xml;version=1.1:\n              schema:\n                $ref: '#/components/schemas/sld-11'\n        '404':\n          description: |-\n            style not found\n        '406':\n          description: |-\n            The requested style encoding is not supported \n            for this style\n    put:\n      tags:\n        - Manage styles\n      summary: |-\n        replace a style or add a new style\n      description: |-\n        Replace an existing style with the id `styleId`. If no \n        such style exists, a new style with that id is added.\n\n        If the parameter `validate` is set to `yes`, the\n        style will be validated before adding/updating the \n        style. If the parameter `validate` is set to \n        `only`, the server will not be changed and only the\n        validation result will be returned.\n\n        For updated styles, the style metadata resource at \n        `/styles/{styleId}/metadata` is not updated. \n        For new styles a minimal style metadata resource is \n        created, too. Please update the metadata using a PUT \n        request to keep the style metadata consistent with \n        the style definition.\n\n        This operation is only available to registered style \n        authors.\n      operationId: updateStyle\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n        - $ref: '#/components/parameters/validate'\n      requestBody:\n        description: |-\n          A single style in one of the supported style encodings.\n        content:\n          application/vnd.mapbox.style+json:\n            schema:\n              $ref: '#/components/schemas/mb-style'\n          application/vnd.ogc.sld+xml;version=1.0:\n            schema:\n              $ref: '#/components/schemas/sld-10'\n          application/vnd.ogc.sld+xml;version=1.1:\n            schema:\n              $ref: '#/components/schemas/sld-11'\n      responses:\n        '204':\n          description: |-\n            style updated, created or validated successfully\n        '400':\n          description: |-\n            invalid input, the style is invalid\n        '401':\n          description: |-\n            unauthorized access\n    delete:\n      tags:\n        - Manage styles\n      summary: |-\n        delete a style\n      description: |-\n        Delete an existing style with the id `styleId`. If no \n        such style exists, an error is returned.\n\n        Deleting a style also deletes the subordinate resources,\n        i.e., the style metadata.\n\n        This operation is only available to registered style \n        authors.\n      operationId: deleteStyle\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n      responses:\n        '204':\n          description: |-\n            style deleted\n        '401':\n          description: |-\n            unauthorized access\n        '404':\n          description: |-\n            style not found\n  '/styles/{styleId}/metadata':\n    get:\n      tags:\n        - Use styles\n      summary: |-\n        fetch the metadata about a style\n      description: |-\n        Style metadata is essential information about a style\n        in order to support users to discover and select styles\n        for rendering their data and for visual style editors \n        to create user interfaces for editing a style.\n\n        This operations returns the metadata for the requested\n        style as a single document.\n\n        The stylesheet of the style will typically include some\n        the metadata, too.\n      operationId: getStyleMetadata\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n        - $ref: '#/components/parameters/f-json'\n      responses:\n        '200':\n          description: |-\n            The metdata for the style.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/style-metadata'\n        '404':\n          description: |-\n            style not found\n    put:\n      tags:\n        - Manage styles\n      summary: |-\n        update the metadata document of a style\n      description: |-\n        Update the style metadata for the style with the \n        id `styleId`. This operation updates the complete\n        metadata document.\n\n        This operation is only available to registered style \n        authors.\n      operationId: updateStyleMetadata\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n      requestBody:\n        description: |-\n          The metadata of a style.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/style-metadata'\n      responses:\n        '204':\n          description: |-\n            style metadata updated\n        '401':\n          description: |-\n            unauthorized access\n        '404':\n          description: |-\n            style not found\n    patch:\n      tags:\n        - Manage styles\n      summary: |-\n        update parts of the style metadata\n      description: |-\n        Update selected elements of the style metadata for \n        the style with the id `styleId`.\n\n        The PATCH semantics in this operation are defined by \n        RFC 7396 (JSON Merge Patch). From the specification:\n\n        _\"A JSON merge patch document describes changes to be \n        made to a target JSON document using a syntax that \n        closely mimics the document being modified. Recipients\n        of a merge patch document determine the exact set of \n        changes being requested by comparing the content of \n        the provided patch against the current content of the \n        target document. If the provided merge patch contains \n        members that do not appear within the target, those \n        members are added. If the target does contain the \n        member, the value is replaced. Null values in the \n        merge patch are given special meaning to indicate \n        the removal of existing values in the target.\"_\n\n        Some examples:\n\n        To add or update the point of contact, the access\n        constraint and the revision date, just send\n\n        ```\n        {\n          \"pointOfContact\": \"Jane Doe\"\n          \"accessConstraints\": \"restricted\"\n          \"dates\": {\n            \"revision\": \"2019-05-17T11:46:12Z\"\n          }\n        }\n        ```\n\n        To remove the point of contact, the access \n        constraint and the revision date, send \n\n        ```\n        {\n          \"pointOfContact\": null\n          \"accessConstraints\": null\n          \"dates\": {\n            \"revision\": null\n          }\n        }\n        ```\n\n        For arrays the complete array needs to be sent.\n        To add a keyword to the example style metadata object, send\n\n        ```\n        {\n          \"keywords\": [ \"basemap\", \"TDS\", \"TDS 6.1\", \"OGC API\", \"new keyword\" ]\n        }\n        ```\n\n        To remove the \"TDS\" keyword, send\n\n        ```\n        {\n          \"keywords\": [ \"basemap\", \"TDS 6.1\", \"OGC API\", \"new keyword\" ]\n        }\n        ```\n\n        To remove the keywords, send\n\n        ```\n        {\n          \"keywords\": null\n        }\n        ```\n\n        The same applies to `stylesheets` and `layers`. To update \n        these members, you have to send the complete new array value.\n\n        This operation is only available to registered style \n        authors.\n      operationId: patchStyleMetadata\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/styleId'\n      requestBody:\n        description: |-\n          The members of the style metadata object that are updated.\n        content:\n          application/merge-patch+json:\n            schema:\n              $ref: '#/components/schemas/style-metadata'\n      responses:\n        '204':\n          description: |-\n            style metadata updated\n        '400':\n          description: |-\n            malformed patch document\n        '401':\n          description: |-\n            unauthorized access\n        '404':\n          description: |-\n            style not found\n        '415':\n          description: |-\n            unsupported patch document\n          headers:\n            Accept-Patch:\n              description: |-\n                supported patch document media types\n              schema:\n                type: string\n        '422':\n          description: |-\n            unprocessable request, the patch document appears \n            to be valid, but the server is incapable of processing \n            the request\n  '/resources':\n    get:\n      tags:\n        - Fetch resources\n      summary: |-\n        information about the available resources (symbols, sprites)\n      operationId: getResources\n      description: |-\n        This operation fetches the set of resources that have been\n        created and that may be used by reference in stylesheets. \n        Resources in this Style API are symbols and sprites.\n\n        For each resource the id and a link to the resource is provided.\n\n        Testbed-15 only requires support for a limited number of the\n        resources. Therefore, the currently simple approach is sufficient,\n        but in general the operation should support paging (using a \n        parameter `limit` and links to the `next` page in responses).\n      parameters:\n        - $ref: '#/components/parameters/f-json'\n      responses:\n        '200':\n          description: the set of available resources\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/resource-set'\n        '400':\n          description: |-\n            invalid or unknown query parameters\n        '406':\n          description: |-\n            The media types accepted by the client are not \n            supported for this resource\n  '/resources/{resourceId}':\n    get:\n      tags:\n        - Fetch resources\n      summary: |-\n        fetch a symbol resource by id\n      description: |-\n        Fetches the resource with identifier `resourceId`. The set of \n        available resources can be retrieved at `/resources`.\n      operationId: getResource\n      parameters:\n        - $ref: '#/components/parameters/resourceId'\n      responses:\n        '200':\n          description: |-\n            The symbol resource\n          content:\n            image/png:\n              schema:\n                $ref: '#/components/schemas/bitmap'\n            image/svg+xml:\n              schema:\n                $ref: '#/components/schemas/svg'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/mb-sprite-index'\n        '404':\n          description: |-\n            resource not found\n        '406':\n          description: |-\n            The requested style encoding is not supported \n            for this style\n    put:\n      tags:\n        - Manage resources\n      summary: |-\n        replace a symbol resource or add a new one\n      description: |-\n        Replace an existing resource with the id `resourceId`. If no \n        such resource exists, a new resource with that id is added.\n\n        A sprite used in a Mapbox Style stylesheet consists of\n        three resources. Each of the resources needs to be created \n        (and eventually deleted) separately.\n        The PNG bitmap image (resourceId ends in '.png'), the JSON \n        index file (resourceId of the same name, but ends in '.json' \n        instead of '.png') and the PNG  bitmap image for \n        high-resolution displays (the file ends in '.@2x.png').\n\n        The resource will only by available in the native format in \n        which the resource is posted. There is no support for\n        automated conversions to other representations.\n\n        This operation is only available to registered style \n        authors.\n      operationId: updateResource\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/resourceId'\n      requestBody:\n        description: |-\n          A single symbol or sprite resource.\n        content:\n          image/png:\n            schema:\n              $ref: '#/components/schemas/bitmap'\n          image/svg+xml:\n            schema:\n              $ref: '#/components/schemas/svg'\n          application/json:\n            schema:\n              $ref: '#/components/schemas/mb-sprite-index'\n      responses:\n        '204':\n          description: |-\n            symbol resource updated or created\n        '401':\n          description: |-\n            unauthorized access\n    delete:\n      tags:\n        - Manage resources\n      summary: |-\n        delete a symbol resource\n      description: |-\n        Delete an existing resource with the id `resourceId`. If no \n        such resource exists, an error is returned.\n\n        This operation is only available to registered style \n        authors.\n      operationId: deleteResource\n      security:\n        - BasicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/resourceId'\n      responses:\n        '204':\n          description: |-\n            symbol resource deleted\n        '401':\n          description: |-\n            unauthorized access\n        '404':\n          description: |-\n            resource not found\ncomponents:\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n  parameters:\n    f-html-json:\n      name: f\n      in: query\n      description: |-\n        (informative) \\\n        The content type of the response. If no value is provided, \n        the standard http rules apply, i.e., the accept header \n        will be used to determine the format.\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n          - json\n          - html\n      example: json\n    f-json:\n      name: f\n      in: query\n      description: |-\n        (informative) \\\n        The content type of the response. If no value is provided, \n        the standard http rules apply, i.e., the accept header \n        will be used to determine the format.\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n          - json\n      example: json\n    f-style:\n      name: f\n      in: query\n      description: |-\n        (informative) \\\n        The content type of the response. If no value is provided, \n        the standard http rules apply, i.e., the accept header \n        will be used to determine the format.\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n          - mapbox\n          - sld10\n          - sld11\n      example: mapbox\n    validate:\n      name: validate\n      in: query\n      description: |-\n        (part of conformance class 'style-validation') \\\n        'yes' creates a new style after successful validation\n        and returns 400, if validation fails,\n        ’no' creates the style without validation and \n        'only' just validates the style without creating a\n        new style and returns 400, if validation fails,\n        otherwise 204.\n      required: false\n      style: form\n      explode: false\n      schema:\n        type: string\n        enum:\n          - 'yes'\n          - 'no'\n          - 'only'\n      example: 'only'\n    styleId:\n      name: styleId\n      in: path\n      description: |-\n        Local identifier of a style. \\\n        A list of all available styles can be found \n        under the /styles path.\n      required: true\n      schema:\n        type: string\n    resourceId:\n      name: resourceId\n      in: path\n      description: |-\n        Local identifier of a symbol resource. \\\n        A list of all available resource can be found \n        under the /resources path.\n      required: true\n      schema:\n        type: string\n  schemas:\n    mb-style:\n      required:\n        - layers\n        - sources\n        - version\n      type: object\n      properties:\n        version:\n          type: number\n          example: 8\n        name:\n          type: string\n          example: night\n        sources:\n          type: object\n          properties:\n            daraa:\n              type: object\n              properties:\n                type:\n                  type: string\n                  example: vector\n                url:\n                  type: string\n                  example: 'https://services.interactive-instruments.de/vtp/daraa/tiles/default/{z}/{y}/{x}?f=mvt'\n        sprite:\n          type: string\n          example: 'http://vtp2018.s3-eu-west-1.amazonaws.com/static/mapstorestyle/sprites/sprites'\n        glyphs:\n          type: string\n          example: 'http://fonts.openmaptiles.org/{fontstack}/{range}.pbf'\n        layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/layers-array'\n    layers-array:\n      required:\n        - id\n        - type\n      type: object\n      properties:\n        id:\n          type: string\n          example: '1'\n        type:\n          type: string\n          example: fill\n          enum:\n            - fill\n            - line\n            - symbol\n            - circle\n            - heatmap\n            - fill-extrusion\n            - raster\n            - hillshade\n            - background\n        source:\n          type: string\n          example: daraa\n        source-layer:\n          type: string\n          example: vegetationsrf\n        layout:\n          type: object\n        paint:\n          type: object\n          properties:\n            fill-color:\n              type: string\n              example: '#11083b'\n    mb-sprite-index:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/mb-sprite-index-symbol'\n    mb-sprite-index-symbol:\n      type: object\n      required:\n        - width\n        - height\n        - x\n        - y\n        - pixelRatio\n      properties:\n        width:\n          type: integer\n          example: 32\n        height:\n          type: integer\n          example: 32\n        x:\n          type: integer\n          example: 0\n        y:\n          type: integer\n          example: 0\n        pixelRatio:\n          type: number\n          example: 1\n    sld-10:\n      type: string\n    sld-11:\n      type: string\n    svg:\n      type: string\n    bitmap:\n      type: string\n      format: binary\n      example: 'M-^IPNG^M^Z^@^@^@^MIHDR^@^@^@^C^@^@^@^C^H^B^@^@^@?J\"?^@^@^@  pHYs^@^@^K^R^@^@^K^R^A??~?^@^@^@^PIDATxM-^\\cM-^X??^OA^LXX^@?^O1M-^K??A^@^@^@^@IEND?B`M-^B'\n    resource-set:\n      required:\n        - resources\n      type: object\n      properties:\n        resources:\n          type: array\n          items:\n            $ref: '#/components/schemas/resource-set-entry'\n          example:\n            - id: 'sprite.json'\n              link:\n                href: 'sprite.json'\n                type: 'application/json'\n                rel: '???'\n            - id: 'sprite.png'\n              link:\n                href: 'sprite.png'\n                type: 'image/png'\n                rel: '???'\n            - id: 'sprite.@2x.png'\n              link:\n                href: 'sprite.@2x.png'\n                type: 'image/png'\n                rel: '???'\n            - id: 'mosque.svg'\n              link:\n                href: 'mosque.svg'\n                type: 'image/svg+xml'\n                rel: '???'\n    resource-set-entry:\n      required:\n        - id\n      type: object\n      properties:\n        id:\n          type: string\n        link:\n          $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/link'\n    style-metadata:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          example: night\n        title:\n          type: string\n          nullable: true\n          example: Topographic night style\n        description:\n          type: string\n          nullable: true\n          example: |-\n            This topographic basemap style is designed to be \n            used in situations with low ambient light. \n\n            The style supports datasets based on the TDS 6.1\n            specification.\n        keywords:\n          type: array\n          nullable: true\n          items:\n            type: string\n          example:\n            - basemap\n            - TDS\n            - TDS 6.1\n            - OGC API\n        pointOfContact:\n          type: string\n          nullable: true\n          example: John Doe\n        accessConstraints:\n          type: string\n          nullable: true\n          example: unclassified\n          enum:\n            - unclassified\n            - confidential\n            - restricted\n            - secret\n            - topSecret\n        dates:\n          $ref: '#/components/schemas/dates'\n        scope:\n          type: string\n          nullable: true\n          example: style\n          enum:\n            - style\n        version:\n          type: string\n          nullable: true\n          example: 1.0.0\n        stylesheets:\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/stylesheet'\n          example:\n            - title: 'Mapbox Style'\n              version: '8'\n              specification: 'https://docs.mapbox.com/mapbox-gl-js/style-spec/'\n              native: true\n              tilingScheme: 'GoogleMapsCompatible'\n              link:\n                href: 'https://example.org/catalog/1.0/styles/night?f=mapbox'\n                rel: 'stylesheet'\n                type: 'application/vnd.mapbox.style+json'\n            - title: 'OGC SLD'\n              version: '1.0'\n              native: false\n              link:\n                href: 'https://example.org/catalog/1.0/styles/night?f=sld10'\n                rel: 'stylesheet'\n                type: 'application/vnd.ogc.sld+xml;version=1.0'\n        layers:\n          type: array\n          nullable: true\n          items:\n            $ref: '#/components/schemas/style-layer'\n          example:\n            - id: 'vegetationsrf'\n              type: 'polygon'\n              sampleData:\n                href: 'https://services.interactive-instruments.de/vtp/daraa/collections/vegetationsrf/items?f=json\u0026limit=100'\n                rel: 'data'\n                type: 'application/geo+json'\n            - id: 'hydrographycrv'\n              type: 'line'\n              sampleData:\n                href: 'https://services.interactive-instruments.de/vtp/daraa/collections/hydrographycrv/items?f=json\u0026limit=100'\n                rel: 'data'\n                type: 'application/geo+json'\n              attributes:\n                - id: 'f_code'\n                  type: 'string'\n    dates:\n      type: object\n      nullable: true\n      properties:\n        creation:\n          type: string\n          format: date-time\n          nullable: true\n        publication:\n          type: string\n          format: date-time\n          nullable: true\n        revision:\n          type: string\n          format: date-time\n          nullable: true\n        validTill:\n          type: string\n          format: date-time\n          nullable: true\n        receivedOn:\n          type: string\n          format: date-time\n          nullable: true\n      example:\n        creation: \"2019-01-01T10:05:00Z\"\n        publication: \"2019-01-01T11:05:00Z\"\n        revision: \"2019-02-01T11:05:00Z\"\n        validTill: \"2019-02-01T11:05:00Z\"\n        receivedOn: \"2019-02-01T11:05:00Z\"\n    stylesheet:\n      type: object\n      nullable: true\n      required:\n        - link\n      properties:\n        title:\n          type: string\n          nullable: true\n        version:\n          type: string\n          nullable: true\n        specification:\n          type: string\n          format: url\n          nullable: true\n        native:\n          type: boolean\n          nullable: true\n        tilingScheme:\n          type: string\n          nullable: true\n        link:\n          $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/link'\n    style-layer:\n      type: object\n      nullable: true\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          example: vegetationsrf\n        description:\n          type: string\n          nullable: true\n        type:\n          type: string\n          nullable: true\n          example: polygon\n          enum:\n            - point\n            - line\n            - polygon\n            - geometry\n            - raster\n        attributes:\n          $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/queryables'\n        sampleData:\n          $ref: 'https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/link'",
			"canonicalURL": "/github.com/molit-korea/main@8c80528804d2b97b01831b054e5b91cc229bb567/-/blob/Pages/%EA%B3%B5%EA%B0%84%20%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EB%B6%84%EC%84%9D%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/geoserver-master/src/community/ogcapi/ogcapi-styles/src/main/resources/org/geoserver/api/styles/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/molit-korea/main/blob/8c80528804d2b97b01831b054e5b91cc229bb567/Pages/공간 데이터 분석 프로젝트/geoserver-master/src/community/ogcapi/ogcapi-styles/src/main/resources/org/geoserver/api/styles/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"stylesheet\": resolve \"#/components/schemas/stylesheet\": property \"link\": at Pages/공간 데이터 분석 프로젝트/geoserver-master/src/community/ogcapi/ogcapi-styles/src/main/resources/org/geoserver/api/styles/openapi.yaml:1327:17: $ref: resolve \"https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0#/components/schemas/link\": get \"https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0\": https: do: Get \"https://api.swaggerhub.com/domains/cportele/ogc-api/1.0.0\": host \"api.swaggerhub.com\" is not allowed"
}