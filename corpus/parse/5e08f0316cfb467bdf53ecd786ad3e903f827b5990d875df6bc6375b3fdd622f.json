{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/datarobot/datarobot-user-models"
		},
		"file": {
			"name": "drum_server_api.yaml",
			"size": 0,
			"path": "custom_model_runner/drum_server_api.yaml",
			"byteSize": 13208,
			"content": "openapi: 3.0.1\ninfo:\n  title: DRUM prediction server.\n  description: DRUM prediction server.\n  version: \"1.5.3\"\npaths:\n  /URL_PREFIX/:\n    $ref: \"#/paths/~1URL_PREFIX~1ping~1\"\n  /URL_PREFIX/ping/:\n    get:\n      description: Check whether server is alive.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Status message.\n              example: \n                message: OK\n  /URL_PREFIX/health/:\n    get:\n      description: Get functional health status, e.g. whether model is loaded and functioning properly.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Status message.\n              example:\n                message: OK\n        513:\n          description: 'Not healthy. Requires DRUM server has to be started with --with-error-server option'\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Status message\n              example:\n                message: \"ERROR: \\n\\nRunning environment language: Python.\\n Failed loading hooks from [/tmp/model/python3_sklearn/custom.py] : No module named 'andas'\"\n  /URL_PREFIX/info/:\n    get:\n      description: Get information about running model (metadata, paths, predictor type, etc.).\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  codeDir:\n                    type: string\n                    description: Custom code (model) location.\n                  drumServer:\n                    type: string\n                    description: DRUM server backend.\n                  drumVersion:\n                    type: string\n                    description: DRUM version.\n                  language:\n                    type: string\n                    description: Custom code (model) language.\n                  modelMetadata:\n                    type: object\n                    description: Model metadata taken from model-metadata.yaml, if exists in the code dir. May have arbitrary structure.\n                  predictor:\n                    type: string\n                    description: Internal predictor used to load a model.\n                  targetType:\n                    type: string\n                    description: Model target type\n              example:\n                codeDir: /tmp/model/python3_sklearn\n                drumServer: flask\n                drumVersion: 1.5.3\n                language: python\n                modelMetadata:\n                  environmentID: 5e8c889607389fe0f466c72d\n                  inferenceModel:\n                    targetName: Grade 2014\n                  modelId: 5f1f15a4d6111f01cb7f91fd\n                  name: regression model\n                  targetType: regression\n                  type: inference\n                  validation:\n                    input: ../../../tests/testdata/juniors_3_year_stats_regression.csv\n                predictor: scikit-learn\n                targetType: regression\n  /URL_PREFIX/stats/:\n    get:\n      description: Shows running model statistics (memory).\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  drum_info:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        cmdline:\n                          type: array\n                          items:\n                            type: string\n                        cpu_percent:\n                          type: number\n                          description: CPU persent used by DRUM or its child(in case when DRUM is running as nginx + uwsgi server).\n                        mem:\n                          type: number\n                          description: Memory used by DRUM.\n                        pid:\n                          type: number\n                          description: DRUM server process PID.\n                  mem_info:\n                    type: object\n                    properties:\n                      avail:\n                        type: number\n                        description: Total available memory on the system.\n                      container_limit:\n                        type: number\n                        description: Value is not null when starting DRUM server in container, using --docker argument.\n                      container_max_used:\n                        type: number\n                        description: Value is not null when starting DRUM server in container, using --docker argument.\n                      container_used:\n                        type: number\n                      drum_rss:\n                        type: number\n                        description: Resident memory occupied by DRUM.\n                      free:\n                        type: number\n                        description: Free memory in system.\n                      nginx_rss:\n                        type: number\n                        description: Resident memory occupied by nginx. Meaningfull when running DRUM with --production option, which enables to use nginx as backend server.\n                      total:\n                        type: number\n                        description: DRUM server process PID.\n                  time_info:\n                    type: object\n                    properties:\n                      run_predictor_total:\n                        type: object\n                        properties:\n                          avg:\n                            type: number\n                            description: Average requeest time (s)\n                          max:\n                            type: number\n                            description: Maximum request time (s)\n                          min:\n                            type: number\n                            description: Minimum request time (s)\n              example:\n                drum_info: [ cmdline: [ \"/tmp/drum_tests_virtual_environment/bin/python3\",\n                                        \"/tmp/drum_tests_virtual_environment/bin/drum\",\n                                        \"server\",\n                                        \"--code-dir\",\n                                        \"/tmp/model/python3_sklearn\",\n                                        \"--target-type\",\n                                        \"regression\",\n                                        \"--address\",\n                                        \"localhost:6789\",\n                                        \"--with-error-server\",\n                                        \"--show-perf\" ], mem: 256.71484375, pid: 342391 ]\n                mem_info:\n                  avail: 17670.828125\n                  container_limit: null\n                  container_max_used: null\n                  container_used: null\n                  drum_rss: 256.71484375\n                  free: 312.33203125\n                  nginx_rss: 0\n                  total: 31442.73046875\n                time_info:\n                  run_predictor_total:\n                    avg: 0.0165\n                    max: 0.023\n                    min: 0.013\n  /URL_PREFIX/capabilities/:\n    get:\n      description: Get payload formats supported by the internal predictor in use. Predictor selection depends on the model.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  supported_payload_formats:\n                    type: object\n                    description: If format is supported, property present in the object. Property's value is a package version. If version is not pinned, value is null.\n                    properties:\n                      arrow:\n                        type: string\n                      csv:\n                        type: string\n                      mtx:\n                        type: string\n              example:\n                supported_payload_formats:\n                  arrow: 2.0.0\n                  csv: null\n                  mtx: null\n  /URL_PREFIX/predict/:\n    post:\n      description: Make predictions on regression, binary or multiclassification models.\n      requestBody:\n        description: Scoring data to predict on.\n        content:\n          text/plain:\n            schema:\n              description: Scoring data.\n              type: string\n              format: text\n          text/csv:\n            schema:\n              description: Scoring data.\n              type: string\n              format: text\n          text/mtx:\n            schema:\n              description: Scoring data.\n              type: string\n              format: text\n          application/x-apache-arrow-stream:\n            schema:\n              description: Scoring data.\n              type: string\n              format: binary\n          multipart/form-data:\n            schema:\n              description: Scoring data.\n              type: object\n              properties:\n                X:\n                  type: string\n                  format: filename\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/regression\"\n                  - $ref: \"#/components/schemas/binary\"\n                  - $ref: \"#/components/schemas/multiclass\"\n        422:\n          description: \"Unprocessable entity\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Status message\n              example:\n                message: \"ERROR: Samples should be provided as:   - a csv, mtx, or arrow file under `X` form-data param key.  - binary data.\"\n  /URL_PREFIX/predictions/:\n    $ref: \"#/paths/~1URL_PREFIX~1predict~1\"\n                  \n  /URL_PREFIX/predictUnstructured/:\n    post:\n      description: Make unstructured predictions on arbitrary data.\n      requestBody:\n        description: Scoring data to predict on.\n        content:\n          text/*:\n            schema:\n              description: Any textual scoring data.\n              type: string\n              format: text\n          application/json:\n            schema:\n              description: Scoring data in json format.\n              type: string\n              format: text\n          \u003cother\u003e:\n            schema:\n              description: Any other mimetype provided assumes binary data is sent.\n              type: string\n              format: binary\n      responses:\n        200:\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n                format: text\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n            \u003cother\u003e:\n              schema:\n                description: Any other mimetype returned assumes user returns data in a proper format.\n                type: string\n        422:\n          description: \"Unprocessable entity\"\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  message:\n                    type: string\n                    description: Status message\n  /URL_PREFIX/predictionsUnstructured/:\n    $ref: \"#/paths/~1URL_PREFIX~1predictUnstructured~1\"\ncomponents:\n  schemas:\n    regression:\n      type: object\n      properties:\n        predictions:\n          type: array\n          description: List of regression predictions.\n          items:\n            type: number\n      example:\n        predictions: [2.4, 3.2, 6.1]\n    binary:\n      type: object\n      properties:\n        predictions:\n          type: array\n          description: List of binary classification predictions.\n          items:\n            type: object\n      example:\n        predictions: [{positiveClassLabel: 0.85, negativeClassLabel: 0.15}, {positiveClassLabel: 0.25, negativeClassLabel: 0.75}]\n    multiclass:\n      type: object\n      properties:\n        predictions:\n          type: array\n          description: List of multiclass classification predictions.\n          items:\n            type: object\n      example:\n        predictions: [{classLabel1: 0.75, classLabel2: 0.15, classLabel3: 0.1}, {classLabel1: 0.2, classLabel2: 0.5, classLabel3: 0.3}]\n"
		}
	},
	"Error": "parse: parse spec: parse operations: /URL_PREFIX/predictionsUnstructured/: referenced pathItem not supported"
}