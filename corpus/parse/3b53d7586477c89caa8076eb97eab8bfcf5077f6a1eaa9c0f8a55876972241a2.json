{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RepreZen/KaiZen-OpenAPI-Editor"
		},
		"file": {
			"name": "RequestBody.yaml",
			"size": 0,
			"path": "com.reprezen.swagedit.openapi3.tests/resources/code-assist/references/RequestBody.yaml",
			"byteSize": 4687,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Headers Object\n  version: \"1.0.0\"\nservers:\n  - url: https://api.uber.com/v1\n  \npaths: \n\n  /pets:\n    post:\n      summary: Create\n      description: Create a new item\n      requestBody:\n        #KZOE-ref name=\"requestBody in path item operation\", value=\"components/requestBodies\"\n        $ref: \"#/components/requestBodies/forPost\"\n      responses:\n        '200':\n          description: OK\n          \ncomponents: \n\n  callbacks:\n    myWebhook:\n      '$request.body#/url':\n        post:\n          requestBody:\n            #KZOE-ref name=\"requestBody in callback\", value=\"components/requestBodies\"\n            $ref: \"#/components/requestBodies/www-form-urlencoded\"\n          responses:\n            201:\n              description: Null response\n              \n  requestBodies:\n    refed:\n      #KZOE-ref name=\"requestBody in components/requestBodies\", value=\"components/requestBodies\"\n      $ref: \"#/components/requestBodies/www-form-urlencoded\"\n  \n    forPost:\n      content:\n        application/octet-stream:\n          # any media type is accepted, functionally equivalent to `*/*`\n          schema:\n            # a binary file of any type\n            type: string\n            format: binary\n        'image/png, image/jpeg':\n          # a binary file of type png or jpeg\n          schema:\n            type: string\n            format: binary        \n        \n    www-form-urlencoded:\n      content:\n        x-www-form-urlencoded:\n          schema:\n            type: object\n            properties:\n              id:\n                type: string\n                format: uuid\n              address:\n                # complex types are stringified to support RFC 1866\n                type: object\n                properties: {}\n\n    multipart:\n       content: \n         multipart/form-data:\n           schema:\n             type: object\n             properties:\n                id:\n                  type: string\n                  format: uuid\n                address:\n                  # default Content-Type for objects is `application/json`\n                  type: object\n                  properties: {}\n                profileImage:\n                  # default Content-Type for string/binary is `application/octet-stream`\n                  type: string\n                  format: binary\n                children:\n                  # default Content-Type for arrays is based on the `inner` type (text/plain here)\n                  type: array\n                  items:\n                    type: string\n                addresses:\n                  # default Content-Type for arrays is based on the `inner` type (object shown, so `application/json` in this example)\n                  type: array\n                  items:\n                    type: '#/components/schemas/Address'    \n                    \n    withEncoding:\n      content:\n        multipart/mixed:\n          schema:\n            type: object\n            properties:\n              id:\n                # default is text/plain\n                type: string\n                format: uuid\n              address:\n                # default is application/json\n                type: object\n                properties: {}\n              historyMetadata:\n                # need to declare XML format!\n                description: metadata in XML format\n                type: object\n                properties: {}\n              profileImage:\n                # default is application/octet-stream, need to declare an image type only!\n                type: string\n                format: binary\n          encoding:\n            historyMetadata:\n              # require XML Content-Type in utf-8 encoding\n              contentType: application/xml; charset=utf-8\n            profileImage:\n              # only accept png/jpeg\n              contentType: image/png, image/jpeg\n              headers:\n                X-Rate-Limit-Limit:\n                  description: The number of allowed requests in the current period\n                  schema:\n                    type: integer\n                \n    # FIXME: fix examples in requestBody\n    withExamples:\n  # in a request body, note the plural `examples` as the Content-Type is set to `*`:\n      content:\n        'application/json':\n          schema:\n            $ref: '#/components/schemas/Address'\n#          examples: \n#            - {\"foo\": \"bar\"}\n#            - {\"bar\": \"baz\"}\n#        'application/xml':\n#          examples: \n#            - $ref: 'http://foo.bar#/examples/address-example.xml' \n#        'text/plain':\n#          examples: \n#            - $ref: 'http://foo.bar#/examples/address-example.txt'                 \n                    \n                    "
		}
	},
	"Error": "parse: parse spec: parse components: requestBodies: \"multipart\": content: \"multipart/form-data\": parse schema: parse schema: property \"addresses\": parse schema: item: parse schema: unexpected schema type: \"#/components/schemas/Address\""
}