{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/decentraland/catalyst-api-specs"
		},
		"file": {
			"name": "content.yaml",
			"size": 0,
			"path": "openapi/content.yaml",
			"byteSize": 3383,
			"content": "openapi: 3.0.3\ninfo:\n  title: API Specification for the Decentraland Catalyst Content Service\n  version: '1.0'\n  description: \u003e-      \n     The current specification details the Content service\n  x-logo:\n    url: 'https://cryptologos.cc/logos/decentraland-mana-logo.png'\n  license:    \n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n \nservers:\n  - url: 'https://peer.decentraland.zone/content'\n    description: Catalyst Development instance\n  - url: 'https://peer-testing.decentraland.org/content'\n    description: Catalyst Staging instance\n  - url: 'https://peer.decentraland.org/content'\n    description: First production Catalyst node\n  - url: 'http://localhost'\n    description: Catalyst instance for local development\ntags:\n  - name: Content Server\n    description: \u003e-\n     Decentraland is a virtual world that is owned by its users. One of the biggest differentiators about \n     Decentraland is its level of decentralization. Users can own LAND, wearables, and probably other types of \n     items in the future. Each of these items is an NFT in itself, and therefore ownership is determined by the \n     Ethereum (or EVM-compatible) blockchain.\n     \u003cbr/\u003e\u003cbr/\u003eNow, when a new wearable is created, or when a user uploads a scene to their LAND/parcel, all \n     necessary files (3d models, textures, music, etc) are uploaded to a \"content server\". Why are we using \n     these servers instead of the blockchain? Mainly because it would be prohibitively expensive to store files as \n     big as 3d models in the blockchain. Users would have to pay fees so high to upload content to their parcels \n     that nobody would do it.\n     \u003cbr/\u003e\u003cbr/\u003eSo this is where content servers come into play. The content server is mainly a server where users \n     can upload these files we mentioned before. Each server will verify against the blockchain that the user making \n     the upload is actually allowed to do so. For example, in the case of scenes, the server will check that the \n     deployer owns all the parcels they are trying to modify.\n     \u003cbr/\u003e\u003cbr/\u003eAnd the most important part is that all content servers will then sync with each other. \n     So, for example, if a scene is modified in one server, the update itself will be broadcasted to the other ones. \n     Then, in the case a content server goes down for some reason, all content will still be present in the other ones.\n\npaths:\n  /audit/{entityType}/{entityId}:\n    $ref: 'paths/content/content@audit@{entityType}@{entityId}.yaml'\n  /challenge:\n    $ref: paths/content/content@challenge.yaml\n  /contents/{hashId}:\n    $ref: 'paths/content/content@contents@{hashId}.yaml'\n  /contents/{hashId}/active-entities:\n    $ref: 'paths/content/content@contents@{hashId}@active-entities.yaml'\n  /available-content:\n    $ref: paths/content/content@available-content.yaml\n  /entities:\n    $ref: paths/content/content@entities.yaml\n  /entities/active/collections/{collectionUrn}:\n    $ref: paths/content/content@entities@active@collections@{collectionUrn}.yaml\n  /entities/active:\n    $ref: 'paths/content/content@entities@active.yaml'\n  /failed-deployments:\n    $ref: paths/content/content@failed-deployments.yaml\n  /pointer-changes:\n    $ref: paths/content/content@pointer-changes.yaml\n  /snapshot:\n    $ref: 'paths/content/content@snapshot.yaml'\n  /status:\n    $ref: paths/content/content@status.yaml\n",
			"canonicalURL": "/github.com/decentraland/catalyst-api-specs@65500dc7b048416dbc5c58d3bab68fc84f407596/-/blob/openapi/content.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/decentraland/catalyst-api-specs/blob/65500dc7b048416dbc5c58d3bab68fc84f407596/openapi/content.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: /available-content: referenced pathItem not supported"
}