{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "amazonaws.com-runtime.lex-2016-11-28-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/amazonaws.com-runtime.lex-2016-11-28-swagger.yaml",
			"byteSize": 45971,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2016-11-28\n  x-release: v4\n  title: Amazon Lex Runtime Service\n  description: 'Amazon Lex provides both build and runtime endpoints. Each endpoint\n    provides a set of operations (API). Your conversational bot uses the runtime\n    API to understand user utterances (user input text or voice). For example,\n    suppose a user says \"I want pizza\", your bot sends this input to Amazon Lex\n    using the runtime API. Amazon Lex recognizes that the user request is for\n    the OrderPizza intent (one of the intents defined in the bot). Then Amazon\n    Lex engages in user conversation on behalf of the bot to elicit required\n    information (slot values, such as pizza size and crust type), and then\n    performs fulfillment activity (that you configured when you created the\n    bot). You use the build-time API to create and manage your Amazon Lex bot.\n    For a list of build-time operations, see the build-time API, . '\n  x-logo:\n    url: https://twitter.com/awscloud/profile_image?size=original\n    backgroundColor: \"#FFFFFF\"\n  termsOfService: https://aws.amazon.com/service-terms/\n  contact:\n    name: Mike Ralphson\n    email: mike.ralphson@gmail.com\n    url: https://github.com/mermade/aws2openapi\n    x-twitter: PermittedSoc\n  license:\n    name: Apache 2.0 License\n    url: http://www.apache.org/licenses/\n  x-providerName: amazonaws.com\n  x-serviceName: runtime.lex\n  x-origin:\n    - contentType: application/json\n      url: https://raw.githubusercontent.com/aws/aws-sdk-js/master/apis/runtime.lex-2016-11-28.normal.json\n      converter:\n        url: https://github.com/mermade/aws2openapi\n        version: 1.0.0\n      x-apisguru-direct: true\n  x-apiClientRegistration:\n    url: https://portal.aws.amazon.com/gp/aws/developer/registration/index.html?nc2=h_ct\n  x-apisguru-categories:\n    - cloud\n  x-preferred: true\nexternalDocs:\n  description: Amazon Web Services documentation\n  url: https://docs.aws.amazon.com/lex/\nsecurity:\n  - hmac: []\npaths:\n  \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\":\n    delete:\n      operationId: DeleteSession\n      description: \"Removes session information for a specified bot, alias, and user ID. \"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteSessionResponse\"\n        \"480\":\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundException\"\n        \"481\":\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestException\"\n        \"482\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"483\":\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalFailureException\"\n        \"484\":\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictException\"\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the bot that contains the session data.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: The identifier of the user associated with the session data.\n          schema:\n            type: string\n            minLength: 2\n            maxLength: 100\n            pattern: \"[0-9a-zA-Z._:-]+\"\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n    get:\n      operationId: GetSession\n      description: Returns session information for a specified bot, alias, and user ID.\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetSessionResponse\"\n        \"480\":\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundException\"\n        \"481\":\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestException\"\n        \"482\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"483\":\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalFailureException\"\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the bot that contains the session data.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: \"The ID of the client application user. Amazon Lex uses this to\n            identify a user's conversation with your bot. \"\n          schema:\n            type: string\n            minLength: 2\n            maxLength: 100\n            pattern: \"[0-9a-zA-Z._:-]+\"\n    post:\n      operationId: PutSession\n      description: <p>Creates a new session or modifies an existing session with an Amazon\n        Lex bot. Use this operation to enable your application to set the state\n        of the bot.</p> <p>For more information, see <a\n        href=\"https://docs.aws.amazon.com/lex/latest/dg/how-session-api.html\">Managing\n        Sessions</a>.</p>\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PutSessionResponse\"\n        \"480\":\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundException\"\n        \"481\":\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestException\"\n        \"482\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"483\":\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalFailureException\"\n        \"484\":\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictException\"\n        \"485\":\n          description: NotAcceptableException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotAcceptableException\"\n        \"486\":\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DependencyFailedException\"\n        \"487\":\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadGatewayException\"\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the bot that contains the session data.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias in use for the bot that contains the session data.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: \"The ID of the client application user. Amazon Lex uses this to\n            identify a user's conversation with your bot. \"\n          schema:\n            type: string\n            minLength: 2\n            maxLength: 100\n            pattern: \"[0-9a-zA-Z._:-]+\"\n        - name: Accept\n          in: header\n          required: false\n          description: <p>The message that Amazon Lex returns in the response can be either\n            text or speech based depending on the value of this field.</p> <ul>\n            <li> <p>If the value is <code>text/plain; charset=utf-8</code>,\n            Amazon Lex returns text in the response.</p> </li> <li> <p>If the\n            value begins with <code>audio/</code>, Amazon Lex returns speech in\n            the response. Amazon Lex uses Amazon Polly to generate the speech in\n            the configuration that you specify. For example, if you specify\n            <code>audio/mpeg</code> as the value, Amazon Lex returns speech in\n            the MPEG format.</p> </li> <li> <p>If the value is\n            <code>audio/pcm</code>, the speech is returned as\n            <code>audio/pcm</code> in 16-bit, little endian format.</p> </li>\n            <li> <p>The following are the accepted values:</p> <ul> <li> <p>\n            <code>audio/mpeg</code> </p> </li> <li> <p> <code>audio/ogg</code>\n            </p> </li> <li> <p> <code>audio/pcm</code> </p> </li> <li> <p>\n            <code>audio/*</code> (defaults to mpeg)</p> </li> <li> <p>\n            <code>text/plain; charset=utf-8</code> </p> </li> </ul> </li> </ul>\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - dialogAction\n              properties:\n                sessionAttributes:\n                  description: Map of key/value pairs representing the session-specific\n                    context information. It contains application information\n                    passed between Amazon Lex and a client application.\n                  type: object\n                  additionalProperties:\n                    $ref: \"#/components/schemas/String\"\n                dialogAction:\n                  description: Describes the next action that the bot should take in its\n                    interaction with the user and provides information about the\n                    context in which the action takes place. Use the\n                    <code>DialogAction</code> data type to set the interaction\n                    to a specific state, or to return the interaction to a\n                    previous state.\n                  type: object\n                  properties:\n                    type:\n                      $ref: \"#/components/schemas/DialogActionType\"\n                    intentName:\n                      $ref: \"#/components/schemas/IntentName\"\n                    slots:\n                      $ref: \"#/components/schemas/StringMap\"\n                    slotToElicit:\n                      $ref: \"#/components/schemas/String\"\n                    fulfillmentState:\n                      $ref: \"#/components/schemas/FulfillmentState\"\n                    message:\n                      $ref: \"#/components/schemas/Text\"\n                    messageFormat:\n                      $ref: \"#/components/schemas/MessageFormatType\"\n        required: true\n  \"/bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type\":\n    post:\n      operationId: PostContent\n      description: '<p> Sends user input (text or speech) to Amazon Lex. Clients use this\n        API to send text and audio requests to Amazon Lex at runtime. Amazon Lex\n        interprets the user input using the machine learning model that it built\n        for the bot. </p> <p>The <code>PostContent</code> operation supports\n        audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher\n        speech recognition accuracy in telephone audio applications. </p> <p> In\n        response, Amazon Lex returns the next message to convey to the user.\n        Consider the following example messages: </p> <ul> <li> <p> For a user\n        input \"I would like a pizza,\" Amazon Lex might return a response with a\n        message eliciting slot data (for example, <code>PizzaSize</code>): \"What\n        size pizza would you like?\". </p> </li> <li> <p> After the user provides\n        all of the pizza order information, Amazon Lex might return a response\n        with a message to get user confirmation: \"Order the pizza?\". </p> </li>\n        <li> <p> After the user replies \"Yes\" to the confirmation prompt, Amazon\n        Lex might return a conclusion statement: \"Thank you, your cheese pizza\n        has been ordered.\". </p> </li> </ul> <p> Not all Amazon Lex messages\n        require a response from the user. For example, conclusion statements do\n        not require a response. Some messages require only a yes or no response.\n        In addition to the <code>message</code>, Amazon Lex provides additional\n        context about the message in the response that you can use to enhance\n        client behavior, such as displaying the appropriate client user\n        interface. Consider the following examples: </p> <ul> <li> <p> If the\n        message is to elicit slot data, Amazon Lex returns the following context\n        information: </p> <ul> <li> <p> <code>x-amz-lex-dialog-state</code>\n        header set to <code>ElicitSlot</code> </p> </li> <li> <p>\n        <code>x-amz-lex-intent-name</code> header set to the intent name in the\n        current context </p> </li> <li> <p>\n        <code>x-amz-lex-slot-to-elicit</code> header set to the slot name for\n        which the <code>message</code> is eliciting information </p> </li> <li>\n        <p> <code>x-amz-lex-slots</code> header set to a map of slots configured\n        for the intent with their current values </p> </li> </ul> </li> <li> <p>\n        If the message is a confirmation prompt, the\n        <code>x-amz-lex-dialog-state</code> header is set to\n        <code>Confirmation</code> and the <code>x-amz-lex-slot-to-elicit</code>\n        header is omitted. </p> </li> <li> <p> If the message is a clarification\n        prompt configured for the intent, indicating that the user intent is not\n        understood, the <code>x-amz-dialog-state</code> header is set to\n        <code>ElicitIntent</code> and the <code>x-amz-slot-to-elicit</code>\n        header is omitted. </p> </li> </ul> <p> In addition, Amazon Lex also\n        returns your application-specific <code>sessionAttributes</code>. For\n        more information, see <a\n        href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing\n        Conversation Context</a>. </p>'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostContentResponse\"\n        \"480\":\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundException\"\n        \"481\":\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestException\"\n        \"482\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"483\":\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalFailureException\"\n        \"484\":\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictException\"\n        \"485\":\n          description: UnsupportedMediaTypeException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnsupportedMediaTypeException\"\n        \"486\":\n          description: NotAcceptableException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotAcceptableException\"\n        \"487\":\n          description: RequestTimeoutException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RequestTimeoutException\"\n        \"488\":\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DependencyFailedException\"\n        \"489\":\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadGatewayException\"\n        \"490\":\n          description: LoopDetectedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LoopDetectedException\"\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: Name of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: Alias of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: <p>The ID of the client application user. Amazon Lex uses this to\n            identify a user's conversation with your bot. At runtime, each\n            request must contain the <code>userID</code> field.</p> <p>To decide\n            the user ID to use for your application, consider the following\n            factors.</p> <ul> <li> <p>The <code>userID</code> field must not\n            contain any personally identifiable information of the user, for\n            example, name, personal identification numbers, or other end user\n            personal information.</p> </li> <li> <p>If you want a user to start\n            a conversation on one device and continue on another device, use a\n            user-specific identifier.</p> </li> <li> <p>If you want the same\n            user to be able to have two independent conversations on two\n            different devices, choose a device-specific identifier.</p> </li>\n            <li> <p>A user can't have two independent conversations with two\n            different versions of the same bot. For example, a user can't have a\n            conversation with the PROD and BETA versions of the same bot. If you\n            anticipate that a user will need to have conversation with two\n            different versions, for example, while testing, include the bot\n            alias in the user ID to separate the two conversations.</p> </li>\n            </ul>\n          schema:\n            type: string\n            minLength: 2\n            maxLength: 100\n            pattern: \"[0-9a-zA-Z._:-]+\"\n        - name: x-amz-lex-session-attributes\n          in: header\n          required: false\n          description: <p>You pass this value as the\n            <code>x-amz-lex-session-attributes</code> HTTP header.</p>\n            <p>Application-specific information passed between Amazon Lex and a\n            client application. The value must be a JSON serialized and base64\n            encoded map with string keys and values. The total size of the\n            <code>sessionAttributes</code> and <code>requestAttributes</code>\n            headers is limited to 12 KB.</p> <p>For more information, see <a\n            href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting\n            Session Attributes</a>.</p>\n          schema:\n            type: string\n            format: password\n        - name: x-amz-lex-request-attributes\n          in: header\n          required: false\n          description: <p>You pass this value as the\n            <code>x-amz-lex-request-attributes</code> HTTP header.</p>\n            <p>Request-specific information passed between Amazon Lex and a\n            client application. The value must be a JSON serialized and base64\n            encoded map with string keys and values. The total size of the\n            <code>requestAttributes</code> and <code>sessionAttributes</code>\n            headers is limited to 12 KB.</p> <p>The namespace\n            <code>x-amz-lex:</code> is reserved for special attributes. Don't\n            create any request attributes with the prefix\n            <code>x-amz-lex:</code>.</p> <p>For more information, see <a\n            href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting\n            Request Attributes</a>.</p>\n          schema:\n            type: string\n            format: password\n        - name: Content-Type\n          in: header\n          required: true\n          description: \"<p> You pass this value as the <code>Content-Type</code> HTTP\n            header. </p> <p> Indicates the audio format or text. The header\n            value must start with one of the following prefixes: </p> <ul> <li>\n            <p>PCM format, audio data must be in little-endian byte order.</p>\n            <ul> <li> <p>audio/l16; rate=16000; channels=1</p> </li> <li>\n            <p>audio/x-l16; sample-rate=16000; channel-count=1</p> </li> <li>\n            <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;\n            channel-count=1; is-big-endian=false </p> </li> </ul> </li> <li>\n            <p>Opus format</p> <ul> <li> <p>audio/x-cbr-opus-with-preamble;\n            preamble-size=0; bit-rate=256000; frame-size-milliseconds=4</p>\n            </li> </ul> </li> <li> <p>Text format</p> <ul> <li> <p>text/plain;\n            charset=utf-8</p> </li> </ul> </li> </ul>\"\n          schema:\n            type: string\n        - name: Accept\n          in: header\n          required: false\n          description: <p> You pass this value as the <code>Accept</code> HTTP header. </p>\n            <p> The message Amazon Lex returns in the response can be either\n            text or speech based on the <code>Accept</code> HTTP header value in\n            the request. </p> <ul> <li> <p> If the value is <code>text/plain;\n            charset=utf-8</code>, Amazon Lex returns text in the response. </p>\n            </li> <li> <p> If the value begins with <code>audio/</code>, Amazon\n            Lex returns speech in the response. Amazon Lex uses Amazon Polly to\n            generate the speech (using the configuration you specified in the\n            <code>Accept</code> header). For example, if you specify\n            <code>audio/mpeg</code> as the value, Amazon Lex returns speech in\n            the MPEG format.</p> </li> <li> <p>If the value is\n            <code>audio/pcm</code>, the speech returned is\n            <code>audio/pcm</code> in 16-bit, little endian format. </p> </li>\n            <li> <p>The following are the accepted values:</p> <ul> <li>\n            <p>audio/mpeg</p> </li> <li> <p>audio/ogg</p> </li> <li>\n            <p>audio/pcm</p> </li> <li> <p>text/plain; charset=utf-8</p> </li>\n            <li> <p>audio/* (defaults to mpeg)</p> </li> </ul> </li> </ul>\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - inputStream\n              properties:\n                inputStream:\n                  description: <p> User input in PCM or Opus audio format or text format as\n                    described in the <code>Content-Type</code> HTTP header. </p>\n                    <p>You can stream audio data to Amazon Lex or you can create\n                    a local buffer that captures all of the audio data before\n                    sending. In general, you get better performance if you\n                    stream audio data rather than buffering the data\n                    locally.</p>\n                  type: string\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\n  \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\":\n    post:\n      operationId: PostText\n      description: '<p>Sends user input (text or SSML) to Amazon Lex. Client applications\n        can use this API to send requests to Amazon Lex at runtime. Amazon Lex\n        then interprets the user input using the machine learning model it built\n        for the bot. </p> <p> In response, Amazon Lex returns the next\n        <code>message</code> to convey to the user an optional\n        <code>responseCard</code> to display. Consider the following example\n        messages: </p> <ul> <li> <p> For a user input \"I would like a pizza\",\n        Amazon Lex might return a response with a message eliciting slot data\n        (for example, PizzaSize): \"What size pizza would you like?\" </p> </li>\n        <li> <p> After the user provides all of the pizza order information,\n        Amazon Lex might return a response with a message to obtain user\n        confirmation \"Proceed with the pizza order?\". </p> </li> <li> <p> After\n        the user replies to a confirmation prompt with a \"yes\", Amazon Lex might\n        return a conclusion statement: \"Thank you, your cheese pizza has been\n        ordered.\". </p> </li> </ul> <p> Not all Amazon Lex messages require a\n        user response. For example, a conclusion statement does not require a\n        response. Some messages require only a \"yes\" or \"no\" user response. In\n        addition to the <code>message</code>, Amazon Lex provides additional\n        context about the message in the response that you might use to enhance\n        client behavior, for example, to display the appropriate client user\n        interface. These are the <code>slotToElicit</code>,\n        <code>dialogState</code>, <code>intentName</code>, and\n        <code>slots</code> fields in the response. Consider the following\n        examples: </p> <ul> <li> <p>If the message is to elicit slot data,\n        Amazon Lex returns the following context information:</p> <ul> <li> <p>\n        <code>dialogState</code> set to ElicitSlot </p> </li> <li> <p>\n        <code>intentName</code> set to the intent name in the current context\n        </p> </li> <li> <p> <code>slotToElicit</code> set to the slot name for\n        which the <code>message</code> is eliciting information </p> </li> <li>\n        <p> <code>slots</code> set to a map of slots, configured for the intent,\n        with currently known values </p> </li> </ul> </li> <li> <p> If the\n        message is a confirmation prompt, the <code>dialogState</code> is set to\n        ConfirmIntent and <code>SlotToElicit</code> is set to null. </p> </li>\n        <li> <p>If the message is a clarification prompt (configured for the\n        intent) that indicates that user intent is not understood, the\n        <code>dialogState</code> is set to ElicitIntent and\n        <code>slotToElicit</code> is set to null. </p> </li> </ul> <p> In\n        addition, Amazon Lex also returns your application-specific\n        <code>sessionAttributes</code>. For more information, see <a\n        href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html\">Managing\n        Conversation Context</a>. </p>'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostTextResponse\"\n        \"480\":\n          description: NotFoundException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundException\"\n        \"481\":\n          description: BadRequestException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadRequestException\"\n        \"482\":\n          description: LimitExceededException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LimitExceededException\"\n        \"483\":\n          description: InternalFailureException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InternalFailureException\"\n        \"484\":\n          description: ConflictException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictException\"\n        \"485\":\n          description: DependencyFailedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DependencyFailedException\"\n        \"486\":\n          description: BadGatewayException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BadGatewayException\"\n        \"487\":\n          description: LoopDetectedException\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LoopDetectedException\"\n      parameters:\n        - name: botName\n          in: path\n          required: true\n          description: The name of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: botAlias\n          in: path\n          required: true\n          description: The alias of the Amazon Lex bot.\n          schema:\n            type: string\n        - name: userId\n          in: path\n          required: true\n          description: <p>The ID of the client application user. Amazon Lex uses this to\n            identify a user's conversation with your bot. At runtime, each\n            request must contain the <code>userID</code> field.</p> <p>To decide\n            the user ID to use for your application, consider the following\n            factors.</p> <ul> <li> <p>The <code>userID</code> field must not\n            contain any personally identifiable information of the user, for\n            example, name, personal identification numbers, or other end user\n            personal information.</p> </li> <li> <p>If you want a user to start\n            a conversation on one device and continue on another device, use a\n            user-specific identifier.</p> </li> <li> <p>If you want the same\n            user to be able to have two independent conversations on two\n            different devices, choose a device-specific identifier.</p> </li>\n            <li> <p>A user can't have two independent conversations with two\n            different versions of the same bot. For example, a user can't have a\n            conversation with the PROD and BETA versions of the same bot. If you\n            anticipate that a user will need to have conversation with two\n            different versions, for example, while testing, include the bot\n            alias in the user ID to separate the two conversations.</p> </li>\n            </ul>\n          schema:\n            type: string\n            minLength: 2\n            maxLength: 100\n            pattern: \"[0-9a-zA-Z._:-]+\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - inputText\n              properties:\n                sessionAttributes:\n                  description: <p>Application-specific information passed between Amazon\n                    Lex and a client application.</p> <p>For more information,\n                    see <a\n                    href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs\">Setting\n                    Session Attributes</a>.</p>\n                  type: object\n                  additionalProperties:\n                    $ref: \"#/components/schemas/String\"\n                requestAttributes:\n                  description: <p>Request-specific information passed between Amazon Lex\n                    and a client application.</p> <p>The namespace\n                    <code>x-amz-lex:</code> is reserved for special attributes.\n                    Don't create any request attributes with the prefix\n                    <code>x-amz-lex:</code>.</p> <p>For more information, see <a\n                    href=\"https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs\">Setting\n                    Request Attributes</a>.</p>\n                  type: object\n                  additionalProperties:\n                    $ref: \"#/components/schemas/String\"\n                inputText:\n                  description: The text that the user entered (Amazon Lex interprets this\n                    text).\n                  type: string\n                  minLength: 1\n                  maxLength: 1024\n                  format: password\n        required: true\n    parameters:\n      - $ref: \"#/components/parameters/X-Amz-Content-Sha256\"\n      - $ref: \"#/components/parameters/X-Amz-Date\"\n      - $ref: \"#/components/parameters/X-Amz-Algorithm\"\n      - $ref: \"#/components/parameters/X-Amz-Credential\"\n      - $ref: \"#/components/parameters/X-Amz-Security-Token\"\n      - $ref: \"#/components/parameters/X-Amz-Signature\"\n      - $ref: \"#/components/parameters/X-Amz-SignedHeaders\"\nservers:\n  - url: http://runtime.lex.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The Amazon Lex Runtime Service multi-region endpoint\n  - url: https://runtime.lex.{region}.amazonaws.com\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - us-east-1\n          - us-east-2\n          - us-west-1\n          - us-west-2\n          - us-gov-west-1\n          - us-gov-east-1\n          - ca-central-1\n          - eu-north-1\n          - eu-west-1\n          - eu-west-2\n          - eu-west-3\n          - eu-central-1\n          - ap-northeast-1\n          - ap-northeast-2\n          - ap-northeast-3\n          - ap-southeast-1\n          - ap-southeast-2\n          - ap-south-1\n          - sa-east-1\n        default: us-east-1\n    description: The Amazon Lex Runtime Service multi-region endpoint\n  - url: http://runtime.lex.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China\n      (Ningxia)\n  - url: https://runtime.lex.{region}.amazonaws.com.cn\n    variables:\n      region:\n        description: The AWS region\n        enum:\n          - cn-north-1\n          - cn-northwest-1\n        default: cn-north-1\n    description: The Amazon Lex Runtime Service endpoint for China (Beijing) and China\n      (Ningxia)\ncomponents:\n  parameters:\n    X-Amz-Content-Sha256:\n      name: X-Amz-Content-Sha256\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Date:\n      name: X-Amz-Date\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Algorithm:\n      name: X-Amz-Algorithm\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Credential:\n      name: X-Amz-Credential\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Security-Token:\n      name: X-Amz-Security-Token\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-Signature:\n      name: X-Amz-Signature\n      in: header\n      required: false\n      schema:\n        type: string\n    X-Amz-SignedHeaders:\n      name: X-Amz-SignedHeaders\n      in: header\n      required: false\n      schema:\n        type: string\n  securitySchemes:\n    hmac:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: Amazon Signature authorization v4\n      x-amazon-apigateway-authtype: awsSigv4\n  schemas:\n    DeleteSessionResponse:\n      type: object\n      properties:\n        botName:\n          $ref: \"#/components/schemas/BotName\"\n        botAlias:\n          $ref: \"#/components/schemas/BotAlias\"\n        userId:\n          $ref: \"#/components/schemas/UserId\"\n        sessionId:\n          $ref: \"#/components/schemas/String\"\n    NotFoundException: {}\n    BadRequestException: {}\n    LimitExceededException: {}\n    InternalFailureException: {}\n    ConflictException: {}\n    GetSessionResponse:\n      type: object\n      properties:\n        recentIntentSummaryView:\n          $ref: \"#/components/schemas/IntentSummaryList\"\n        sessionAttributes:\n          $ref: \"#/components/schemas/StringMap\"\n        sessionId:\n          $ref: \"#/components/schemas/String\"\n        dialogAction:\n          $ref: \"#/components/schemas/DialogAction\"\n    PostContentResponse:\n      type: object\n      properties:\n        audioStream:\n          $ref: \"#/components/schemas/BlobStream\"\n    UnsupportedMediaTypeException: {}\n    NotAcceptableException: {}\n    RequestTimeoutException: {}\n    DependencyFailedException: {}\n    BadGatewayException: {}\n    LoopDetectedException: {}\n    PostTextResponse:\n      type: object\n      properties:\n        intentName:\n          $ref: \"#/components/schemas/IntentName\"\n        slots:\n          $ref: \"#/components/schemas/StringMap\"\n        sessionAttributes:\n          $ref: \"#/components/schemas/StringMap\"\n        message:\n          $ref: \"#/components/schemas/Text\"\n        messageFormat:\n          $ref: \"#/components/schemas/MessageFormatType\"\n        dialogState:\n          $ref: \"#/components/schemas/DialogState\"\n        slotToElicit:\n          $ref: \"#/components/schemas/String\"\n        responseCard:\n          $ref: \"#/components/schemas/ResponseCard\"\n    String:\n      type: string\n    PutSessionResponse:\n      type: object\n      properties:\n        audioStream:\n          $ref: \"#/components/schemas/BlobStream\"\n    DialogActionType:\n      type: string\n      enum:\n        - ElicitIntent\n        - ConfirmIntent\n        - ElicitSlot\n        - Close\n        - Delegate\n    IntentName:\n      type: string\n    StringMap:\n      type: object\n      additionalProperties:\n        $ref: \"#/components/schemas/String\"\n    FulfillmentState:\n      type: string\n      enum:\n        - Fulfilled\n        - Failed\n        - ReadyForFulfillment\n    Text:\n      type: string\n      minLength: 1\n      maxLength: 1024\n      format: password\n    MessageFormatType:\n      type: string\n      enum:\n        - PlainText\n        - CustomPayload\n        - SSML\n        - Composite\n    Accept:\n      type: string\n    AttributesString:\n      type: string\n      format: password\n    BlobStream:\n      type: string\n    BotAlias:\n      type: string\n    BotName:\n      type: string\n    ButtonTextStringWithLength:\n      type: string\n      minLength: 1\n      maxLength: 15\n    ButtonValueStringWithLength:\n      type: string\n      minLength: 1\n      maxLength: 1000\n    Button:\n      type: object\n      required:\n        - text\n        - value\n      properties:\n        text:\n          $ref: \"#/components/schemas/ButtonTextStringWithLength\"\n        value:\n          $ref: \"#/components/schemas/ButtonValueStringWithLength\"\n      description: Represents an option to be shown on the client platform (Facebook,\n        Slack, etc.)\n    ConfirmationStatus:\n      type: string\n      enum:\n        - None\n        - Confirmed\n        - Denied\n    ContentType:\n      type: string\n      enum:\n        - application/vnd.amazonaws.card.generic\n    UserId:\n      type: string\n      pattern: \"[0-9a-zA-Z._:-]+\"\n      minLength: 2\n      maxLength: 100\n    DeleteSessionRequest:\n      type: object\n      properties: {}\n    DialogAction:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          $ref: \"#/components/schemas/DialogActionType\"\n        intentName:\n          $ref: \"#/components/schemas/IntentName\"\n        slots:\n          $ref: \"#/components/schemas/StringMap\"\n        slotToElicit:\n          $ref: \"#/components/schemas/String\"\n        fulfillmentState:\n          $ref: \"#/components/schemas/FulfillmentState\"\n        message:\n          $ref: \"#/components/schemas/Text\"\n        messageFormat:\n          $ref: \"#/components/schemas/MessageFormatType\"\n      description: Describes the next action that the bot should take in its interaction\n        with the user and provides information about the context in which the\n        action takes place. Use the <code>DialogAction</code> data type to set\n        the interaction to a specific state, or to return the interaction to a\n        previous state.\n    DialogState:\n      type: string\n      enum:\n        - ElicitIntent\n        - ConfirmIntent\n        - ElicitSlot\n        - Fulfilled\n        - ReadyForFulfillment\n        - Failed\n    StringWithLength:\n      type: string\n      minLength: 1\n      maxLength: 80\n    StringUrlWithLength:\n      type: string\n      minLength: 1\n      maxLength: 2048\n    listOfButtons:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Button\"\n      minItems: 0\n      maxItems: 5\n    GenericAttachment:\n      type: object\n      properties:\n        title:\n          $ref: \"#/components/schemas/StringWithLength\"\n        subTitle:\n          $ref: \"#/components/schemas/StringWithLength\"\n        attachmentLinkUrl:\n          $ref: \"#/components/schemas/StringUrlWithLength\"\n        imageUrl:\n          $ref: \"#/components/schemas/StringUrlWithLength\"\n        buttons:\n          $ref: \"#/components/schemas/listOfButtons\"\n      description: \"Represents an option rendered to the user when a prompt is shown. It\n        could be an image, a button, a link, or text. \"\n    GetSessionRequest:\n      type: object\n      properties: {}\n    IntentSummaryList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/IntentSummary\"\n      minItems: 0\n      maxItems: 3\n    HttpContentType:\n      type: string\n    IntentSummary:\n      type: object\n      required:\n        - dialogActionType\n      properties:\n        intentName:\n          $ref: \"#/components/schemas/IntentName\"\n        slots:\n          $ref: \"#/components/schemas/StringMap\"\n        confirmationStatus:\n          $ref: \"#/components/schemas/ConfirmationStatus\"\n        dialogActionType:\n          $ref: \"#/components/schemas/DialogActionType\"\n        fulfillmentState:\n          $ref: \"#/components/schemas/FulfillmentState\"\n        slotToElicit:\n          $ref: \"#/components/schemas/String\"\n      description: Provides information about the state of an intent. You can use this\n        information to get the current state of an intent so that you can\n        process the intent, or so that you can return the intent to its previous\n        state.\n    PostContentRequest:\n      type: object\n      required:\n        - inputStream\n      properties:\n        inputStream:\n          $ref: \"#/components/schemas/BlobStream\"\n    PostTextRequest:\n      type: object\n      required:\n        - inputText\n      properties:\n        sessionAttributes:\n          $ref: \"#/components/schemas/StringMap\"\n        requestAttributes:\n          $ref: \"#/components/schemas/StringMap\"\n        inputText:\n          $ref: \"#/components/schemas/Text\"\n    ResponseCard:\n      type: object\n      properties:\n        version:\n          $ref: \"#/components/schemas/String\"\n        contentType:\n          $ref: \"#/components/schemas/ContentType\"\n        genericAttachments:\n          $ref: \"#/components/schemas/genericAttachmentList\"\n      description: If you configure a response card when creating your bots, Amazon Lex\n        substitutes the session attributes and slot values that are available,\n        and then returns it. The response card can also come from a Lambda\n        function ( <code>dialogCodeHook</code> and\n        <code>fulfillmentActivity</code> on an intent).\n    PutSessionRequest:\n      type: object\n      properties:\n        sessionAttributes:\n          $ref: \"#/components/schemas/StringMap\"\n        dialogAction:\n          $ref: \"#/components/schemas/DialogAction\"\n    genericAttachmentList:\n      type: array\n      items:\n        $ref: \"#/components/schemas/GenericAttachment\"\n      minItems: 0\n      maxItems: 10\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/amazonaws.com-runtime.lex-2016-11-28-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/amazonaws.com-runtime.lex-2016-11-28-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type\": at 1:9799: post: operation \"PostContent\": at 1:10189: parse path \"/bot/{botName}/alias/{botAlias}/user/{userId}/content#Content-Type\": path MUST NOT contain a fragment"
}