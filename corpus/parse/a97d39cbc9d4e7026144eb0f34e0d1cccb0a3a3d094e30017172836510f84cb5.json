{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vert-x3/vertx-web"
		},
		"file": {
			"name": "validation_test.yaml",
			"size": 0,
			"path": "vertx-web-openapi/src/test/resources/specs/validation_test.yaml",
			"byteSize": 13154,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Test spec for OpenAPI3ValidationTest\n  license:\n    name: Apache 2.0 License\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Pet\"\n      responses:\n        201:\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /queryTests/anyOfTest:\n    get:\n      operationId: anyOfTest\n      parameters:\n        - name: parameter\n          in: query\n          required: true\n          explode: false\n          schema:\n            anyOf:\n              - type: boolean\n              - type: integer\n              - type: array\n                items:\n                  type: integer\n              - type: object\n                properties:\n                  a:\n                    type: integer\n      responses:\n        default:\n          description: ok\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /queryTests/arrayTests/formExploded:\n    get:\n      operationId: arrayTestFormExploded\n      parameters:\n        - name: parameter\n          in: query\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: integer\n              multipleOf: 2\n      responses:\n        default:\n          description: ok\n  /queryTests/objectTests/onlyAdditionalProperties:\n    get:\n      operationId: objectTestOnlyAdditionalProperties\n      parameters:\n        - name: params\n          in: query\n          schema:\n            type: object\n            additionalProperties:\n              type: integer\n          style: form\n          explode: true\n        - name: wellKnownParam\n          in: query\n          schema:\n            type: string\n            minLength: 2\n      responses:\n        default:\n          description: ok\n  /queryTests/defaultString:\n    get:\n      operationId: testDefaultString\n      parameters:\n        - name: parameter\n          in: query\n          required: false\n          schema:\n            type: string\n            default: aString\n      responses:\n        default:\n          description: ok\n  /queryTests/defaultInt:\n    get:\n      operationId: testDefaultInt\n      parameters:\n        - name: parameter\n          in: query\n          schema:\n            type: integer\n            default: 1\n      responses:\n        default:\n          description: ok\n  /queryTests/defaultFloat:\n    get:\n      operationId: testDefaultFloat\n      parameters:\n        - name: parameter\n          in: query\n          schema:\n            type: number\n            format: float\n            default: 1.0\n      responses:\n        default:\n          description: ok\n  /queryTests/defaultDouble:\n    get:\n      operationId: testDefaultDouble\n      parameters:\n        - name: parameter\n          in: query\n          schema:\n            type: number\n            format: double\n            default: 1.0\n      responses:\n        default:\n          description: ok\n  /queryTests/defaultBoolean:\n    get:\n      operationId: testDefaultBoolean\n      parameters:\n        - name: parameter\n          in: query\n          allowEmptyValue: true\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: ok\n  /queryTests/arrayTests/default:\n    get:\n      operationId: arrayTest\n      parameters:\n        - name: parameter\n          in: query\n          explode: false\n          required: true\n          schema:\n            type: array\n            items:\n              type: integer\n              multipleOf: 2\n      responses:\n        default:\n          description: ok\n  /formTests/arraytest:\n    post:\n      operationId: formArrayTest\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                values:\n                  # complex types are stringified to support RFC 1866\n                  type: array\n                  items:\n                    type: integer\n      responses:\n        default:\n          description: ok\n  /jsonBodyTest/sampleTest:\n    post:\n      operationId: jsonBodyTest\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                values:\n                  type: array\n                  items:\n                    type: integer\n          application/superapplication+json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                values:\n                  type: array\n                  items:\n                    type: integer\n      responses:\n        default:\n          description: ok\n  /jsonBodyWithDate:\n    post:\n      operationId: jsonBodyWithDate\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                date:\n                  type: string\n                  format: date\n                dateTime1:\n                  type: string\n                  format: date-time\n                dateTime2:\n                  type: string\n                  format: date-time\n                dateTime3:\n                  type: string\n                  format: date-time\n      responses:\n        default:\n          description: ok\n  /queryTests/allOfTest:\n    get:\n      operationId: alloftest\n      parameters:\n        - name: parameter\n          in: query\n          required: true\n          explode: false\n          schema:\n            allOf:\n              - type: object\n                properties:\n                  a:\n                    type: integer\n                required:\n                  - a\n              - type: object\n                properties:\n                  b:\n                    type: boolean\n                    default: false\n      responses:\n        default:\n          description: ok\n  /queryTests/byteFormat:\n    get:\n      operationId: byteFormatTest\n      parameters:\n        - name: parameter\n          in: query\n          required: true\n          schema:\n            type: string\n            format: byte\n      responses:\n        default:\n          description: ok\n  /cookieTests/objectTests/onlyAdditionalProperties:\n    get:\n      operationId: cookieObjectTestOnlyAdditionalProperties\n      parameters:\n        - name: params\n          in: cookie\n          schema:\n            type: object\n            additionalProperties:\n              type: integer\n          style: form\n          explode: true\n        - name: wellKnownParam\n          in: cookie\n          schema:\n            type: string\n      responses:\n        default:\n          description: ok\n  /multipart/complex:\n    post:\n      operationId: complexMultipartRequest\n      requestBody:\n        required: false\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                param1:\n                  type: string\n                param1Binary:\n                  type: string\n                  format: binary\n                param1NotRealBinary:\n                  type: string\n                  format: binary\n                param2:\n                  $ref: \"#/components/schemas/Pet\"\n                param3:\n                  type: string\n                param4:\n                  type: array\n                  items:\n                    type: number\n                    format: float\n                param5:\n                  type: integer\n                  format: int32\n                  enum:\n                    - 1\n                    - 2\n              required:\n                - param1\n                - param1Binary\n                - param1NotRealBinary\n                - param3\n            encoding:\n              param3:\n                contentType: text/csv\n              param1:\n                contentType: text/plain\n              param1NotRealBinary:\n                contentType: text/plain\n      responses:\n        default:\n          description: ok\n  /circularReferences:\n    post:\n      operationId: circularReferences\n      tags:\n        - pets\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SchemaRecursive\"\n      responses:\n        default:\n          description: Ok\n  /additionalProperties:\n    post:\n      operationId: additionalProperties\n      tags:\n        - pets\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              required:\n                - id\n                - name\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                name:\n                  type: string\n                tag:\n                  type: string\n      responses:\n        default:\n          description: Ok\n  '/query/form/explode/object':\n    get:\n      parameters:\n        - name: color\n          in: query\n          required: true\n          schema:\n            $ref: \"#/components/schemas/ColorObject\"\n          style: form\n          explode: true\n      operationId: 'query_form_explode_object'\n      responses:\n        200:\n          description: Ok\n        400:\n          description: Wrong validation\n        default:\n          description: Default response\n  /binaryTest:\n    post:\n      operationId: binary_test\n      requestBody:\n        description: The binary body\n        required: true\n        content:\n          \"application/octet-stream\":\n            schema:\n              type: string\n              format: binary\n      responses:\n        200:\n          description: Ok\n  /headerCaseInsensitive:\n    get:\n      operationId: headerCaseInsensitive\n      parameters:\n        - name: CaseInsensitive\n          in: header\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: ok\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n    SchemaRecursive:\n      type: object\n      properties:\n        a:\n          $ref: '#/components/schemas/SchemaInnerRecursive'\n        b:\n          type: string\n        c:\n          type: number\n    SchemaInnerRecursive:\n      type: object\n      properties:\n        a:\n          type: array\n          items:\n            $ref: '#/components/schemas/SchemaRecursive'\n    ColorObject:\n      type: object\n      properties:\n        R:\n          type: string\n        G:\n          type: string\n        B:\n          type: string\n        alpha:\n          type: number\n      required:\n        - R\n        - G\n        - B\n",
			"canonicalURL": "/github.com/vert-x3/vertx-web@2b7c705faf60b9b670549d25b06479308b358289/-/blob/vertx-web-openapi/src/test/resources/specs/validation_test.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vert-x3/vertx-web/blob/2b7c705faf60b9b670549d25b06479308b358289/vertx-web-openapi/src/test/resources/specs/validation_test.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/cookieTests/objectTests/onlyAdditionalProperties\": get: operation \"cookieObjectTestOnlyAdditionalProperties\": parameters: parse parameter \"params\": at 1:1993: invalid schema:style:explode combination: (\"object\":\"form\":true)"
}