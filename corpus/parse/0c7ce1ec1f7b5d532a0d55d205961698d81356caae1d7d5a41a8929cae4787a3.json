{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/City-of-Helsinki/smbackend"
		},
		"file": {
			"name": "specification.swagger.yaml",
			"size": 0,
			"path": "specification.swagger.yaml",
			"byteSize": 61059,
			"content": "openapi: 3.0.0\ninfo:\n  title: Servicemap API\n  description: \u003e-\n    The Servicemap API provides categorized data on services, both public and\n    private, and service locations within a city or metropolitan area.\n\n\n    The API provides data in the JSON format, in a RESTful fashion.\n\n\n    The two most important resources provided by the API are\n\n\n    1. **units**, concrete physical locations which provide services to citizens, and\n\n    2. **services**, which are the categories of services that can be provided by units.\n\n\n    There are several more supporting resources linked to units in one way or another, and they are all specified in this documentation.\n\n\n    Several fields are multilingual. These are implemented as objects with each language variant as property.\n  termsOfService: https://hri.fi/data/fi/dataset/paakaupunkiseudun-palvelukartan-rest-rajapinta\n  version: v2\ntags:\n  - name: unit\n    description: Retrieve units (service points) filtered by various criteria\n  - name: service\n    description: Get categories of services that can be provided by units\n  - name: organization\n    description: Retrieve information about organizations providing services\n  - name: search\n    description: Full text search through units, services, and also street addresses\n  - name: accessibility\n    description: Get rules for calculating accessibility shortcomings of a unit\n  - name: geography\n    description: Spatial information about municipalities where the services are located\n  - name: observation\n    description: A measured or observed value of a property of a unit at a certain time.\n\npaths:\n  \"/unit/{id}/\":\n    get:\n      summary: Retrieve single unit by id\n      operationId: Retrieve unit\n      tags:\n        - unit\n      responses:\n        \"200\":\n          description: Single unit object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/unit\"\n      parameters:\n        - name: id\n          in: path\n          description: Unit identifier as defined in unit schema\n          required: true\n          schema:\n            type: integer\n          example: 58520\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - $ref: \"#/components/parameters/geometry_param\"\n  /unit/:\n    get:\n      operationId: Retrieve unit list\n      summary: Return a list of units\n      description: |\n        Without parameters, return a list of all units. With query\n        parameters, the set of returned units is filtered and the\n        structure of returned units can be fine tuned.\n      tags:\n        - unit\n      parameters:\n        - $ref: \"#/components/parameters/page_param\"\n        - $ref: \"#/components/parameters/pagesize_param\"\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - name: service\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of service ids to be used as a filter\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 868,873\n        - name: id\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of one or more unit ids to be used as a filter\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 58532, 58533\n        - name: lat\n          in: query\n          description: A latitude coordinate to be used as part of a location filter\n          required: false\n          schema:\n            type: number\n          example: 60.1695096\n        - name: lon\n          in: query\n          description: A longitude coordinate to be used as part of a location filter\n          required: false\n          schema:\n            type: number\n          example: 24.9405559\n        - name: distance\n          in: query\n          description: A distance radius filter to be used as part of a location filter\n            along with lat and lon\n          required: false\n          schema:\n            type: number\n          example: 20.20\n        - name: municipality\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of one or more municipality ids. The returned\n            units will be located within the municipalities\\' boundaries. The\n            municipality ids are either municipality names in Finnish, or full\n            OCD IDs of the form ocd-division/country\\:fi/kunta\\:helsinki (URL\n            encoded) See the [OpenCivicData\n            Site](http://opencivicdata.readthedocs.io/en/latest/ocdids.html) for\n            more information\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: helsinki,espoo\n        - name: city_as_department\n          in: query\n          style: form\n          explode: false\n          description: Retrieve units which are _either_ owned/provided by the desired\n            cities _or_ contained within the city's geographical boundaries. The\n            parameter value must be an UUID identifying a top-level department\n            which is a city.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: 83e74666-0836-4c1d-948a-4b34a8b90301,520a4492-cb78-498b-9c82-86504de88dce\n        - name: provider_type\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of unit provider types to be used as a filter\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 1,8\n        - name: provider_type__not\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of unit provider types to be used as an\n            exclusion filter\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 2,3\n        - name: level\n          in: query\n          description: \u003e\n            A string value from a predefined list, which acts as a shorthand\n            filter that aggregates several thematic services together, for\n            example \\\"most common public services\\\". Accepted values are 'common' and 'customer_service'\n          required: false\n          schema:\n            type: string\n          example: common\n        - name: service_node\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of service node ids to be used as a filter.\n            Prefer the *services* parameter unless service nodes are\n            specifically needed.\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 2125,1090\n        - name: exclude_service_nodes\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of service node ids to be used as an\n            exclusion filter\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 2125,1090\n        - name: division\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of administrative divisions to be used as a\n            filter. Use either full division ids or shorthands of the form\n            muni/type\\:id\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: helsinki/kaupunginosa:kallio\n        - $ref: \"#/components/parameters/unit_bbox_param\"\n        - name: bbox_srid\n          in: query\n          description: An SRID coordinate reference system identifier which specifies the\n            coordinate system used in the bbox parameter. Currently supported values are 4326 and 3046.\n          schema:\n            type: integer\n          example: 3046\n        - $ref: \"#/components/parameters/geometry_param\"\n        - name: maintenance_organization\n          in: query\n          description: \u003e\n            A lowercase municipality name in Finnish specifying which\n            organization is responsible for maintenance of this unit.\n            Needed mainly because of skiing trails near the border of\n            two municipalities where the maintaining municipality is\n            not always the same as the municipality (location) of the\n            unit.\n          schema:\n            type: string\n          example: helsinki\n        - name: category\n          in: query\n          style: form\n          explode: false\n          description: \u003e\n            Comma-separated value specifying which services or service\n            nodes to filter units by. The values are of the form\n            [category_type]:[id] where category_type is either\n            \"service\" or \"service_node\" and id is the primary id of a\n            resource of the corresponding type. Eg. \"service:234\".\n          schema:\n            type: array\n            items:\n              type: string\n          example: service:234,service:863\n      responses:\n        \"200\":\n          description: List of units, paginated\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/unit\"\n                  - $ref: \"#/components/schemas/common_collection\"\n  \"/service/{id}/\":\n    get:\n      summary: Retrieve single service by id\n      operationId: Retrieve service\n      tags:\n        - service\n      responses:\n        \"200\":\n          description: Single service object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/service\"\n      parameters:\n        - name: id\n          in: path\n          description: Service identifier as defined in service schema\n          required: true\n          schema:\n            type: integer\n          example: 811\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - $ref: \"#/components/parameters/geometry_param\"\n  /service/:\n    get:\n      operationId: Retrieve service list\n      summary: Return a list of services\n      description: |\n        Without parameters, return a list of all services.\n      tags:\n        - service\n      parameters:\n        - $ref: \"#/components/parameters/page_param\"\n        - $ref: \"#/components/parameters/pagesize_param\"\n        - name: id\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of service ids to filter by\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 811,663\n      responses:\n        \"200\":\n          description: List of services, paginated\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/service\"\n                  - $ref: \"#/components/schemas/common_collection\"\n  \"/service_node/{id}/\":\n    get:\n      summary: Retrieve single service node by id. Always prefer the **service**\n        endpoint unless service nodes are specifically required.\n      operationId: Retrieve service node\n      tags:\n        - service\n      responses:\n        \"200\":\n          description: Single service node object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/service_node\"\n      parameters:\n        - name: id\n          in: path\n          description: Service identifier as defined in service_node schema\n          required: true\n          schema:\n            type: integer\n          example: 2125\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - $ref: \"#/components/parameters/geometry_param\"\n  /service_node/:\n    get:\n      operationId: Retrieve service node list\n      summary: Return a list of service nodes. Always prefer the **service** endpoint\n        unless service nodes are specifically required.\n      description: |\n        Without parameters, return a list of all service nodes.\n      tags:\n        - service\n      parameters:\n        - $ref: \"#/components/parameters/page_param\"\n        - $ref: \"#/components/parameters/pagesize_param\"\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - name: id\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of service_node ids to filter by\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 2125,1090\n        - name: ancestor\n          in: query\n          description: The id of a service_node whose descendants are to be returned in the\n            response\n          schema:\n            type: integer\n          example: 870\n      responses:\n        \"200\":\n          description: List of service nodes, paginated\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/service_node\"\n                  - $ref: \"#/components/schemas/common_collection\"\n  \"/department/{id}/\":\n    get:\n      operationId: Retrieve a single department\n      summary: Return a single department\n      description: Return a single department\n      tags:\n        - organization\n      parameters:\n        - name: id\n          in: path\n          description: Department uuid\n          required: true\n          schema:\n            type: string\n          example: 520a4492-cb78-498b-9c82-86504de88dce\n        - name: include_hierarchy\n          in: query\n          description: With an empty value or any value other than *no*, *false*, or *0*,\n            include the whole descendant hierarchy beginning at this department\n            in the response. Omitting this parameter, or including it with the\n            value *no*, *false*, or *0*, disables expanding the hierarchy.\n          schema:\n            type: string\n          example: 1\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - $ref: \"#/components/parameters/geometry_param\"\n      responses:\n        \"200\":\n          description: The requested department\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/department\"\n  /department/:\n    get:\n      operationId: Retrieve list of departments\n      summary: Return a list of departments\n      description: Return a list of all departments\n      tags:\n        - organization\n      parameters:\n        - $ref: \"#/components/parameters/page_param\"\n        - $ref: \"#/components/parameters/pagesize_param\"\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n      responses:\n        \"200\":\n          description: List of departments, paginated\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/department\"\n                  - $ref: \"#/components/schemas/common_collection\"\n  /search/:\n    get:\n      operationId: Full text search\n      summary: Full text search through units, services, service nodes, and addresses\n      description: Return a heterogeneous list of full text matches for given queries.\n        Supports both full queries and autosuggest queries with partial input.\n        If the parameter *q* is used, a complete search will be performed. If\n        the parameter *input* is used, an autosuggest search will be performed.\n      tags:\n        - search\n      parameters:\n        - name: type\n          in: query\n          description: If present, this parameter will restrict the types of resources\n            returned in the results. Possible values are *service_node*,\n            *service*, *unit*, *address*. If not present, the default types are\n            *service*, *unit*, *address*.\n          schema:\n            type: string\n          example: service_node\n        - name: language\n          in: query\n          description: The two-character ISO 639-1 language code to be used in the search.\n            If missing, the search will use the default language Finnish.\n          schema:\n            type: string\n          example: fi\n        - name: q\n          in: query\n          description: The complete search query to be used.\n          schema:\n            type: string\n          example: sairaala helsinki\n        - name: input\n          in: query\n          description: A partial user input to be used in an autosuggest search\n          schema:\n            type: string\n          example: sairaal\n        - name: municipality\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of municipalities to be used to filter units.\n            Uses the simple format of lowercase municipality name in Finnish\n            instead of an OCD id.\n          schema:\n            type: array\n            items:\n              type: string\n          example: helsinki,espoo\n        - name: service\n          in: query\n          style: form\n          explode: false\n          description: A comma-separated list of service ids to be used to filter units.\n          schema:\n            type: array\n            items:\n              type: integer\n          example: 456,567\n        - name: include\n          in: query\n          style: form\n          explode: false\n          description: Embed the complete content of given reference-type fields directly\n            into the response, otherwise they are returned as identifiers.\n            Separate field names by commas. In the search endpoint, you must\n            qualify the field names with the resource names because many kinds\n            of resources are searched through. For example, instead of\n            **include=department** you must specify **include=unit.department**.\n            The set of valid prefixes is the same as the set of valid values in\n            the type field of the search endpoint.\n          schema:\n            type: array\n            items:\n              type: string\n            example: unit.department\n        - name: only\n          in: query\n          style: form\n          explode: false\n          description: \u003e\n            Restrict the field returned in the results. Separate field\n            names by commas. In the search endpoint, you must qualify\n            the field names with the resource names using the format\n            [resource].[field] because the endpoint contains resources\n            of several kinds.\n          schema:\n            type: array\n            items:\n              type: string\n            example: unit.organizer_name\n        - $ref: \"#/components/parameters/page_param\"\n        - $ref: \"#/components/parameters/pagesize_param\"\n      responses:\n        \"200\":\n          description: List of search results, paginated\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          type: object\n                          description: An object of type *unit*, *service*, *address*, or\n                            *service_node*. The field *object_type* reveals the\n                            type of the resource. **Note that in this field\n                            only, service_node is spelled servicenode**.\n                  - $ref: \"#/components/schemas/common_collection\"\n  /accessibility_rule/:\n    get:\n      operationId: Retrieve accessibility rule list\n      summary: Retrieve the rule database for calculating the accessibility\n        shortcomings of any unit\n      deprecated: true\n      tags:\n        - accessibility\n      responses:\n        \"200\":\n          description: List of accessibility rules and shortcoming messages\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/accessibility_rule\"\n  /observation/:\n    get:\n      operationId: Retrieve list of observations\n      summary: Retrieve list of observations\n      description: Retrieve list of observations\n      tags:\n        - observation\n      parameters:\n        - $ref: \"#/components/parameters/page_param\"\n        - $ref: \"#/components/parameters/pagesize_param\"\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n      responses:\n        \"200\":\n          description: List of all observations made about units\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/observation\"\n  \"/administrative_division/{id}/\":\n    get:\n      operationId: Retrieve a single administrative division\n      summary: Retrieve a single administrative division\n      description: Retrieve a single administrative division\n      tags:\n        - geography\n      responses:\n        \"200\":\n          description: The requested administrative division\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/administrative_division\"\n      parameters:\n        - name: id\n          in: path\n          description: Administrative division identifier as defined in administrative\n            division schema\n          required: true\n          schema:\n            type: string\n          example: 222\n        - $ref: \"#/components/parameters/include_param\"\n        - $ref: \"#/components/parameters/only_param\"\n        - $ref: \"#/components/parameters/geometry_param\"\n  /administrative_division/:\n    get:\n      operationId: Retrieve list of administrative divisions\n      summary: Retrieve list of administrative divisions\n      description: Retrieve list of administrative divisions\n      tags:\n        - geography\n      parameters:\n        - name: input\n          in: query\n          description: A partial user input to be used in an autosuggest search, matching names of administrative divisions\n          schema:\n            type: string\n          example: hel\n        - name: ocd_id\n          in: query\n          style: form\n          explode: false\n          description: Comma-separated list of ocd_ids of administrative divisions to match\n          schema:\n            type: array\n            items:\n              type: string\n          example: vantaa/äänestysalue:5\n        - $ref: \"#/components/parameters/only_param\"\n        - name: origin_id\n          in: query\n          description: Filter by origin_id, which is usually a primary id used in the original data source\n          schema:\n            type: string\n          example: 694\n        - name: date\n          in: query\n          description: \u003e\n            Some administrative divisions such as school districts are\n            only valid during a specified period of time, eg. from\n            August 2019 to May 2020. The date filter is used to return only\n            the divisions whose associated time period contain the requested\n            date.\n          schema:\n            type: string\n          example: 2020-02-22\n      responses:\n        \"200\":\n          description: List of administrative divisions, paginated\n          content:\n            application/json:\n              schema:\n                type: object\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/administrative_division\"\n                  - $ref: \"#/components/schemas/common_collection\"\n  /street/:\n    get:\n      operationId: Retrieve list of streets\n      summary: Retrieve list of streets\n      tags:\n        - geography\n      parameters:\n        - name: language\n          in: query\n          description: The two-character ISO 639-1 language code to be used in the street\n            names. If missing, the street name parameter will use the default\n            language Finnish.\n          schema:\n            type: string\n          example: fi\n        - name: municipality\n          in: query\n          description: A municipality id. The returned addresses will be located within the\n            municipalitie\\'s boundaries. The municipality id is either a\n            municipality name in Finnish, or a full OCD ID of the form\n            ocd-division/country\\:fi/kunta\\:helsinki (URL encoded) See the\n            [OpenCivicData\n            Site](http://opencivicdata.readthedocs.io/en/latest/ocdids.html) for\n            more information\n          schema:\n            type: string\n          example: ocd-division/country\\:fi/kunta\\:helsinki\n        - name: input\n          in: query\n          description: An autosuggest search for street names, resulting in a prefix search.\n          schema:\n            type: string\n          example: siltasaar\n      responses:\n        \"200\":\n          description: A list of street resources\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/street\"\n                  - $ref: \"#/components/schemas/common_collection\"\n  \"/street/{id}/\":\n    get:\n      operationId: Retrieve a single street resource\n      summary: Retrieve a single street resource\n      tags:\n        - geography\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Internal id of street. Notice, not persistent. Should only be used\n            when resolving street ids from address resources.\n          schema:\n            type: integer\n          example: 2\n      responses:\n        \"200\":\n          description: A single street resource\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/street\"\n  /address/:\n    get:\n      operationId: Retrieve a list of addresses\n      summary: Retrieve a list of addresses\n      parameters:\n        - name: lat\n          in: query\n          description: The latitude coordinate to be used in reverse geocoding\n          schema:\n            type: number\n          example: 60.1695096\n        - name: lon\n          in: query\n          description: The longitude coordinate to be used in reverse geocoding\n          schema:\n            type: number\n          example: 24.9405559\n        - name: language\n          in: query\n          description: The two-character ISO 639-1 language code to be used in the street\n            names of the addresses. If missing, the street name parameter will\n            use the default language Finnish.\n          schema:\n            type: string\n          example: fi\n        - name: municipality\n          in: query\n          description: A municipality id. The returned addresses will be located within the\n            municipalitie\\'s boundaries. The municipality id is either a\n            municipality name in Finnish, or a full OCD ID of the form\n            ocd-division/country\\:fi/kunta\\:helsinki (URL encoded) See the\n            [OpenCivicData\n            Site](http://opencivicdata.readthedocs.io/en/latest/ocdids.html) for\n            more information\n          schema:\n            type: string\n          example: espoo\n        - name: municipality_name\n          in: query\n          description: \u003e\n            A municipality name to be used as a filter, in the\n            language specified by the language parameter. This is\n            mainly used to support UIs in different languages - the\n            municipality filter should be used in most cases.\n          schema:\n            type: string\n          example: helsinki\n        - name: street\n          in: query\n          description: Filter address by street. If a numeric identifier, the parameter is\n            interpreted as a street resource identifier (id field). If not, it\n            is interpreted as the exact street name, case insensitive.\n          schema:\n            type: string\n          example: siltasaarenkatu\n        - name: number\n          in: query\n          description: Filter by the number field of addresses.\n          schema:\n            type: integer\n          example: 1\n      tags:\n        - geography\n      responses:\n        \"200\":\n          description: List of address resources\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/address\"\n                  - $ref: \"#/components/schemas/common_collection\"\nservers:\n  - url: https://api.hel.fi/servicemap/v2\ncomponents:\n  parameters:\n    page_param:\n      name: page\n      in: query\n      description: Request particular page in paginated results\n      required: false\n      schema:\n        type: integer\n      example: 1\n    pagesize_param:\n      name: page_size\n      in: query\n      description: Request that server delivers page_size results in response\n      required: false\n      schema:\n        type: integer\n      example: 10\n    include_param:\n      name: include\n      in: query\n      style: form\n      explode: false\n      description: Embed the complete content of given reference-type fields directly into\n        the response, otherwise they are returned as identifiers. Separate field\n        names by commas.\n      schema:\n        type: array\n        items:\n          type: string\n    only_param:\n      name: only\n      in: query\n      style: form\n      explode: false\n      description: Restrict the field returned in the results. Separate field names by\n        commas.\n      schema:\n        type: array\n        items:\n          type: string\n    unit_bbox_param:\n      name: bbox\n      in: query\n      style: form\n      explode: false\n      description: Search for events that are within this bounding box. Decimal coordinates\n        are given in order west, south, east, north. Period is used as decimal\n        separator.\n      schema:\n        type: array\n        items:\n          type: number\n      example: 24.9405559,60.1695096,24.9805559,60.1895096\n    geometry_param:\n      name: geometry\n      in: query\n      description: If parameter value is either true or 1, return the complex geometry\n        of the unit in the field \"geometry\". Most units only have point type\n        geometries, which are returned in the location field. Some however\n        have polygon type geometries, eg. skiing tracks or outdoor areas.\n        These complex geometries must be explicitly requested with this\n        parameter.\n      schema:\n        oneOf:\n        - type: boolean\n          example: true\n        - type: integer\n          example: 1\n      example: true\n  schemas:\n    unit:\n      type: object\n      title: Unit\n      description: Units are physical locations where organizations provide services for\n        patrons. Please note that the observations field is only displayed in the unit\n        endpoint if \"observations\" is supplied as a value to the \"include\" parameter.\n      required:\n        - id\n        - name\n        - last_modified_time\n        - service_nodes\n        - services\n      allOf:\n        - $ref: \"#/components/schemas/common_single\"\n        - properties:\n            id:\n              description: The primary, unique and persistent identifier of the unit\n              type: integer\n            name:\n              description: The name of the unit [multilingual]\n              type: object\n            location:\n              type: object\n              properties:\n                type:\n                  type: string\n                  description: Currently always \\\"Point\\\"\n                coordinates:\n                  type: array\n                  description: The unit\\'s coordinates in WGS84.\n                  items:\n                    type: number\n                    description: a coordinate\n            services:\n              $ref: \"#/components/schemas/service\"\n            service_nodes:\n              $ref: \"#/components/schemas/service_node\"\n            root_service_nodes:\n              type: array\n              description: The unique roots of the service node hierarchy for this unit\\'s\n                service nodes, as integer identifiers\n              items:\n                type: integer\n            street_address:\n              description: The first part of the street address, containing the street name\n                and building number. This address should be used for locating\n                the unit geographically, not for sending mail.\n              type: string\n            address_zip:\n              description: The postal code for the street address\n              type: string\n            municipality:\n              type: integer\n              description: The municipality in which the unit is located\n            address_postal_full:\n              description: The full postal address, which should be used for sending mail,\n                not for locating the unit.\n              type: string\n            email:\n              description: The main email address\n              type: string\n            phone:\n              description: The phone number or numbers for contacting the unit\n              type: string\n            call_charge_info:\n              description: Information about the fees accumulated when calling the unit\n              type: string\n            fax:\n              description: The fax number\n              type: string\n            www:\n              description: The main home page, or the most relevant site available for the\n                unit\n              type: string\n            description:\n              type: string\n              description: A textual description of the unit, provided for the end user\n            short_description:\n              type: string\n              description: A rarely used field containing a shorter description of the unit\n            connections:\n              type: array\n              items:\n                $ref: \"#/components/schemas/unit_connection\"\n            keywords:\n              type: object\n              description: A collection of multilingual additional keywords that are mainly\n                used to make the full text search match relevant additional\n                words for the unit.\n              properties:\n                language_key:\n                  type: array\n                  items:\n                    type: string\n                    description: A search keyword\n            department:\n              $ref: \"#/components/schemas/department\"\n            root_department:\n              $ref: \"#/components/schemas/department\"\n            provider_type:\n              type: string\n              description: \u003e\n                A description of how the service is provided by the organization\n                providing it. One of a predefined set of values:\n\n                1. SELF_PRODUCED\n\n                2. MUNICIPALITY\n\n                3. ASSOCIATION\n\n                4. PRIVATE_COMPANY\n\n                5. OTHER_PRODUCTION_METHOD\n\n                6. PURCHASED_SERVICE\n\n                7. UNKNOWN_PRODUCTION_METHOD\n\n                8. CONTRACT_SCHOOL\n\n                9. SUPPORTED_OPERATIONS\n\n                10. PAYMENT_COMMITMENT\n\n                11. VOUCHER_SERVICE\n            organizer_type:\n              type: string\n              description: The type or sector of the organization which immediately is\n                responsible for the unit. Can differ from the department, which\n                can eg. be a municipality buying the service\n            organizer_name:\n              type: string\n              description: If the organization providing the service is different from the\n                owning organization in the department field, eg. when a\n                municipality purchases the service from a private business, the\n                organizer name is provided here\n            organizer_business_id:\n              type: string\n              description: If the organization providing the service is different from the\n                owning organization in the department field, eg. when a\n                municipality purchases the service from a private business, the\n                organizer\\'s business id is provided here\n            picture_url:\n              type: string\n              description: A picture, usually a photograph of the unit or the building it\n                is located in\n            picture_caption:\n              type: string\n              description: A caption describing the picture in picture_url. May contain\n                important copyright information about the picture.\n            picture_entrance_url:\n              type: string\n              description: A separate photograph of the entrance to the unit\n            streetview_entrance_url:\n              type: string\n              description: A link to a Google StreetView where the entrance to the unit is\n                visible\n            contract_type:\n              description: A summarized description of how the service is provided in\n                relation to the owning organizational department. Combines data\n                from both provider_type and organizer_type.\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: A predefined type of contract type\n                description:\n                  type: object\n                  description: An end-user facing description of the contract type,\n                    [multilingual]\n            accessibility_phone:\n              type: string\n              description: The telephone number through which patrons can ask about the\n                unit\\'s accessibility\n            accessibility_email:\n              type: string\n              description: An email address number through which patrons can ask about the\n                unit\\'s accessibility\n            accessibility_www:\n              type: string\n              description: A link to a site providing details about the unit\\'s\n                accessibility\n            accessibility_properties:\n              type: array\n              items:\n                type: object\n                description: List of accessibility properties of unit. These are the low\n                  level primitive measurements, from which the high level\n                  accessibility descriptions and especially shortcomings are\n                  derived.\n                properties:\n                  variable:\n                    type: integer\n                  value:\n                    type: string\n            accessibility_viewpoints:\n              type: object\n              description: A summary of the unit\\'s accessibility for different\n                accessibility viewpoints. The accessibility viewpoints are user\n                profiles, eg. \"using a wheelchair\", \"using a hearing aid\". If\n                the value for a coded viewpoint is red, the unit is not\n                accessible for a user with the specified profile.\n            created_time:\n              type: string\n              description: The date and time when the entry for the unit was created in the\n                master database, in ISO 8601.\n            data_source:\n              type: string\n              description: An identifier for the master database for the unit data\n            identifiers:\n              type: array\n              items:\n                type: object\n                properties:\n                  namespace:\n                    type: string\n                  value:\n                    type: string\n            observations:\n              type: array\n              items:\n                type: object\n                allOf:\n                  - $ref: \"#/components/schemas/observation\"\n\n    unit_connection:\n      title: Unit connection\n      type: object\n      description: A flexible, structured piece of information, which can contain contact\n        details, links, textual notices, and opening hours.\n      properties:\n        section_type:\n          type: string\n          description: \u003e\n            Specifies, which type of data this item represents. Different\n            section types are\n\n            1. PHONE_OR_EMAIL\n\n            2. LINK\n\n            3. TOPICAL\n\n            4. OTHER_INFO\n\n            5. OPENING_HOURS\n\n            6. SOCIAL_MEDIA_LINK\n\n            7. OTHER_ADDRESS\n\n            8. HIGHLIGHT\n\n            9. ESERVICE_LINK\n        name:\n          type: string\n          description: User-readable label or description of the data\n        email:\n          type: string\n        phone:\n          type: string\n        contact_person:\n          type: string\n    service:\n      title: Service\n      type: object\n      description: The primary category of services that the units can provide. A single\n        service can be provided by 1..n units, and a single unit can provide\n        1..n services.\n      properties:\n        name:\n          type: object\n          description: Multilingual name of the service, keyed by language code\n        id:\n          type: integer\n          description: Primary, unique and persistent id for the service\n        period_enabled:\n          type: boolean\n          description: Some units provide some services only during specified periods of\n            time. This is currently used for schools, which may provide the\n            service of teaching a specific language only during one school year,\n            but not during the next. If this attribute is true, this\n            unit--service relationship can have a period specification connected\n            to it.\n        clarification_enabled:\n          type: boolean\n          description: Some units provide some services in a variation that is specified in\n            a clarification. If this attribute is true, the unit--service\n            relationship can have a clarification connected to it.\n        keywords:\n          type: object\n          description: A multilingual field containing additional words which match this\n            service in a full text search.\n        unit_count:\n          type: object\n          description: How many units provide this service\n          properties:\n            total:\n              type: integer\n              description: The total number of units, without any filters\n    service_node:\n      title: Service Node\n      type: object\n      description: \u003e\n        Service nodes provide a browsable hierarchy of service categories for\n        user interfaces. **Instead of service nodes, services should almost\n        always be used as the primary categories for filtering units. Only when\n        a forest hierarchy of service categories is needed, use service nodes.**\n\n        The service nodes of a particular unit are always derived from the services of the unit. The way a particular service node is derived from services is revealed in the service_reference field of service node.\n      allOf:\n        - $ref: \"#/components/schemas/common_single\"\n        - properties:\n            id:\n              type: integer\n              description: Primary identifier\n            parent:\n              type: integer\n              description: The service node\\'s immediate ancestor in the browsable hierarchy\n            children:\n              type: array\n              description: The service node\\'s immediate descendants in the browsable\n                hierarchy\n              items:\n                type: integer\n                description: A reference to a service node\n            level:\n              type: integer\n              description: The level of the service node in the hierarchy. Root nodes have\n                level 0, roots\\' children have level 1, and so on.\n            root:\n              type: integer\n              description: The root node of the service node at level 0 in the hierarchy.\n            service_reference:\n              type: string\n              description: \u003e\n                An expression of set theory or propositional calculus which\n                describes the conditions a unit\\'s services must satisfy in\n                order for this service node to apply to the unit. Thus, the set\n                of services of a unit is always the primary data and the service\n                nodes are derived from that set.\n\n                In the expression,\n\n                - numbers are service ids,\n\n                - the * token is the AND operator or a set theoretical intersection, and\n\n                - the + token is the OR operator or a set theoretical union, and\n\n                - the AND operator has a higher precedence than the OR operator.\n\n\n                The expression is interpreted as follows. Iff the set of services of unit U satisfies the service_reference expression of a service node N, then the unit has the service node N in its service_node field. Also, filtering all units by the service node N will return the unit U as part of the result set.\n\n                For example, if the service node 1 has the value \"1\\*2+3\\*4\" as the service_reference, and unit 1 provides the services 2, 3, and 4, then the unit has the service node 1 in its service_node field, because the unit provides the services (1 AND 2) OR (3 AND 4), because the unit provides the services (3 AND 4), because the unit has both services 3 and 4 associated with it.\n            related_services:\n              type: array\n              description: An array which provides all the services which are part of the\n                service_reference expression. Use query parameter\n                include=related_services to get the full service objects instead\n                of id references.\n              items:\n                type: integer\n            unit_count:\n              type: object\n              description: An object with information on how many units are associated with\n                this service node in total, and when filtered using various\n                criteria (currently municipalities).\n              properties:\n                municipality:\n                  type: object\n                  description: An object with key-value pairs of (municipality id, number\n                    of units with this service node within the municipality).\n                total:\n                  type: integer\n                  description: How many units there are with this service node in total\n            period_enabled:\n              type: boolean\n              description: true if period_enabled is true for any of the related_services\n            keywords:\n              type: array\n              description: An array of multilingual additional keywords for matching common\n                search terms\n              items:\n                type: object\n    department:\n      title: Department\n      type: object\n      description: A subdivision of a hierarchical organisation, or the root of the\n        hierarchy, representing the whole organization\n      properties:\n        id:\n          type: string\n          description: A UUID primary identifier\n        name:\n          type: object\n          description: The department name [multilingual]\n        abbr:\n          type: string\n          description: An abbreviated name\n        street_address:\n          type: string\n          description: A street address used to physically locate the department\n        address_city:\n          type: string\n          description: The city where the street address is situated\n        address_zip:\n          type: string\n          description: The postal code of the street address\n        address_postal_full:\n          type: string\n          description: The address used for sending mail to the department\n        www:\n          type: string\n          description: The WWW address as a URL for a home page or other main web site of\n            the department\n        phone:\n          type: string\n          description: Telephone number\n        parent:\n          type: string\n          description: The parent of this department in the organizational hierarchy\n        business_id:\n          type: string\n          description: A Business Identity Code from the Business Information System,\n            provided by the Finnish Patent and Registration Office with the\n            Finnish Tax Administration\n        oid:\n          type: string\n          description: A secondary identifier for the organization\n        organization_type:\n          type: string\n          description: Whether this department is part of a private enterprice, public\n            organization, or other kind of organization.\n        level:\n          type: integer\n          description: The depth of the department inside the organizational hierarchy.\n            Level 0 means that the department identifies the main organization,\n            or is the root of the organizations hierarchy. Level 1 means that\n            the department is one level down in the hierarchy and so on.\n        municipality:\n          type: integer\n          description: If the department is part of a municipal organization, this fields\n            specifies the municipality\n    observable_property:\n      title: Observable Property\n      type: object\n      description: Specifies the detailed interpretation of observations.\n        Includes the unit of measurement.\n        Observations can only be made on units which have a service that\n        is linked to an ObservableProperty.  For example, only units which\n        are ice-skating fields can have observations with the property\n        \"ice condition\" or something similar.\n      properties:\n        id:\n          type: string\n          description: Primary identifier\n        name:\n          type: string\n          description: Name of observable property\n        measurement_unit:\n          type: string\n          description: Measurement unit e.g. celsius degrees\n        services:\n          $ref: \"#/components/schemas/service\"\n          description: Latest observations for units\n        observation_type:\n          type: string\n          description: Categorical or descriptive type of observation\n    allowed_value:\n      title: Allowed Value\n      type: object\n      description: Predefined value for categorical observation type\n      properties:\n        identifier:\n          type: string\n          description: Internal identifier of observed condition\n        quality:\n          type: string\n          description: Value describing the quality of observed unit\n        name:\n          type: string\n          description: Name of the allowed value\n        description:\n          type: string\n          description: Clearifying description for value\n        property:\n          $ref: \"#/components/schemas/observable_property\"\n    observation:\n      title: Observation\n      type: object\n      description: An observaton on conditions of an outdoor exercise unit\n        such as water temperature of swimming beach or condition of skating field\n      properties:\n        value:\n          type: object\n          description: The measured value of the observation. Can be of any type.\n        primary:\n          type: boolean\n          description: Whether the observation is of the type that primarily determines\n            if the unit can be used for the sports activity.\n        quality:\n          type: string\n          desription: One of good, satisfactory, and unusable. Determines\n            how well the unit can be used for the sports activity.\n        id:\n          type: integer\n          description: The id of the observation\n        time:\n          type: string\n          description: The exact date and time when the observation was made in ISO 8601.\n        expiration_time:\n          type: string\n          description: Some observable properties are valid only for a pre-specified time period\n            after which they disappear from the unit endpoint's observations field. This is the exact\n            date and time the oveservation will expire and be removed from this field.\n        unit:\n          $ref: \"#/components/schemas/unit\"\n          description:\n        property:\n          $ref: \"#/components/schemas/observable_property\"\n          description:\n    administrative_division:\n      title: Administrative division\n      type: object\n      description: A geographic administrative division, such as a municipality, a\n        neighborhood/district, or an area for which a specific unit provides\n        services\n      properties:\n        id:\n          type: integer\n          description: Internal id of the division (prefer the ocd id)\n        origin_id:\n          type: string\n          description: The id of the division in the master database it was imported from\n        ocd_id:\n          type: string\n          description: A full OCD ID of the form ocd-division/country\\:fi/kunta\\:helsinki\n            (URL encoded) See the [OpenCivicData\n            Site](http://opencivicdata.readthedocs.io/en/latest/ocdids.html) for\n            more information\n        service_point_id:\n          type: string\n          description: An id of a service point which provides services for or is otherwise\n            connected to this division\n        start:\n          type: string\n          description: Some divisions might be only valid during some time period. (E.g.\n            yearly school districts in Helsinki). The \"start\" and \"end\" fields\n            provide the (approximate) time period for which this division is\n            valid.\n        end:\n          type: string\n          description: See \"start\"\n        type:\n          type: string\n          description: A reference to the type of the division\n        parent:\n          type: string\n          description: Some divisions form a hierarchy, where smaller divisions are\n            administratively part of larger ones. This field gives the parent of\n            the division in such a hierarchy.\n        municipality:\n          type: string\n          description: A reference to the municipality, if any, this division belongs to\n        name:\n          type: object\n          description: A multilingual field giving the name of the division\n    administrative_division_type:\n      title: Administrative division type\n      type: object\n      description: All the administrative divisions have types, which are represented as a\n        separate resource\n      properties:\n        id:\n          type: integer\n          description: Internal id of the division type\n        type:\n          type: string\n          description: A mnemonic identifier used for eg. filtering administrative divisions\n        name:\n          type: string\n          description: A human-readable name for the division type\n    address:\n      title: Address\n      type: object\n      properties:\n        number:\n          type: string\n          description: The building number in the street address\n        number_end:\n          type: string\n          description: If the address is a combination of two or more old addressess (a\n            larger building where several smaller ones used to be), the address\n            numbers are given as a range of number - number_end\n        letter:\n          type: string\n          description: If a single old address has been divided into two or more new\n            addresses (several small buildings where a large one used to be),\n            the parts are denoted with different letters after the address\n            number\n        modified_at:\n          type: string\n          description: Datetime of last modification in this API\n        location:\n          type: object\n          description: A GeoJSON coordinate for this address\n          properties:\n            type:\n              type: string\n              description: Usually Point, the type of the coordinates\n            coordinates:\n              type: array\n              description: An array of floats forming the coordinates\n              items:\n                type: integer\n                description: A single term of the coordinate\n        street:\n          $ref: \"#/components/schemas/street\"\n    street:\n      title: Street\n      type: object\n      properties:\n        id:\n          type: integer\n          description: An internal id of the street\n        modified_at:\n          type: string\n          description: A datetime of last modification in this API\n        municipality:\n          type: string\n          description: The municipality where this street is located\n        name:\n          type: object\n          description: The name of the street, multilingual\n    accessibility_rule:\n      title: Accessibility rules\n      type: object\n      properties:\n        rules:\n          type: object\n          description: \u003e\n            An object consisting of boolean expressions that are used to\n            calculate whether a given unit satisfies the accessibility\n            requirements of a given user. The same set of rules are used for any\n            unit: a unit\\'s accessibility properties are used as values when\n            evaluating the rules for the given unit.\n\n\n            The **top level keys** of the object encode users\\' accessibility profiles, which consist of a number and a letter. The numbers represent\n\n\n            1. A wheelchair user\n\n            2. Someone with reduced mobility\n\n            3. A rollator user\n\n            4. Someone pushing a stroller\n\n            5. Someone who is visually impaired\n\n            6. Someone who is using a hearing aid\n\n\n            The letters represent the person\\'s mode of transportation\n\n\n            A. Without a vehicle or using public transportation\n\n            B. With their own car\n\n            C. With a car and a separate driver\n\n\n            The values of the object form a boolean expression tree, which is evaluated using the accessibility properties data of a unit. Whenever a primitive boolean expression or a compound one with a non-null **msg** field is evaluated as **true**, we have found a shortcoming or problem for this user when accessing this unit. The corresponding message from the **messages** array (see below) must be displayed to the user. A primitive exporession is evaluated by comparing the relevant accessibility property value using the operator to the value given in the expression. Usually this is an equality comparison between the first operand (a unit accessibility property identifier, and a second one (a possible value for the property)).\n        messages:\n          type: array\n          description: An array of UI message strings (multilingual) referred to in the\n            rules section above (messages are referred to using array indices).\n          items:\n            type: object\n            description: A multilingual object\n    common_collection:\n      title: Common fields in all list responses\n      type: object\n      description: These fields are part of all responses returning a collection / list of\n        resources\n      properties:\n        count:\n          type: integer\n          description: Total amount of returned units\n        next:\n          type: string\n          description: A link to the next page of results\n        previous:\n          type: string\n    common_single:\n      title: Common fields in all resources\n      type: object\n      description: These fields are part of all resources\n      properties:\n        last_modified_time:\n          type: string\n          description: The date and time when the resource data was last modified in the\n            API, in ISO 8601.\n"
		}
	},
	"Error": "parse: parse spec: paths: /unit/{id}/: get: operation \"Retrieve unit\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/unit\": parse schema: allOf: [1]: parse schema: observations: parse schema: item: parse schema: allOf: [0]: parse schema: reference \"#/components/schemas/observation\": parse schema: unit: parse schema: reference \"#/components/schemas/unit\": infinite recursion: \"#/components/schemas/unit\""
}