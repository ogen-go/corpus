{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Dcsyhi1998/dcsyhi1998.github.io"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 21208,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    # Introduction\n    **Airaw API** serves to facilitate the creation of widgets for CarPlay.\n    It can be used within HTML or JavaScript.If you have a request, please contact us on Twitter:[Dcsyhi(@linux_n1)](https://twitter.com/linux_n1).\n\n    **Airaw API** provides the following information:\n      - CarPlay Information\n      - Battery Information\n      - Statusbar Information\n      - System Information\n      - Music Information\n      - Weather Information\n\n    I am very grateful for the source code of [XenInfo](http://www.junesiphone.com/xeninfo/).\n    Airaw API would have been difficult to implement.\n    I am very grateful to the developer [@JunesiPhone](https://twitter.com/junesiphone).\n\n    Airaw API author [Dcsyhi(@linux_n1)](https://twitter.com/linux_n1)\n\n    # Function types\n\n    **Airaw API** will call the mainUpdate merge when the device information is updated.\n    The argument of mainUpdate is type.The type argument provides the following information.\n\n    - if (type == \"CarPlay\")\n    - if (type == \"battery\")\n    - if (type == \"statusbar\")\n    - if (type == \"system\")\n    - if (type == \"music\")\n    - if (type == \"weather\")\n\n    \u003cSecurityDefinitions /\u003e\n  version: 1.5.3\n  title: Airaw API\n  contact:\n    name: API Support\n    email: dcsyhi1998@gmail.com\n    url: https://chariz.com/buy/airaw\n  x-logo:\n    # url: 'https://dcsyhi1998.github.io/Banners/AirawBanner.png'\n    altText: Airaw API\nx-tagGroups:\n  - name: Information\n    tags:\n      - CarPlay Information\n      - Battery Information\n      - Statusbar Information\n      - System Information\n      - Music Information\n      - Weather Information\npaths:\n  #CarPlayの情報取得\n  /CarPlay:\n    get:\n      tags:\n        - CarPlay Information\n      summary: How to get CarPlay information\n      description: How to use acquired variables.\n      parameters:\n        - name: pageIndex\n          in: query\n          description: After scrolling on the CarPlay screen, the page number is returned.\n          required: false\n          style: form\n          schema:\n            type: integer\n            items:\n              type: string\n              default: available\n      x-codeSamples:\n        - lang: 'JavaScript(pageIndex)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"CarPlay\"){\n                //page number\n                if(pageIndex == 1){\n                  //widget animation\n                }\n              }\n            }\n  #バッテリー情報\n  /Battery:\n    get:\n      tags:\n        - Battery Information\n      summary: How to get battery information\n      description: How to use acquired variables.\n      parameters:\n        - name: batteryPercent\n          in: query\n          description: Returns the device current percentage.(0~100)\n          required: false\n          style: form\n          schema:\n            type: integer\n            items:\n              type: string\n              default: available\n        - name: batteryCharging\n          in: query\n          description: Returns whether the device is charging.true/false\n          required: false\n          style: form\n          schema:\n            type: boolean\n            items:\n              type: string\n              default: available\n        - name: batteryLowPowerMode\n          in: query\n          description: Returns whether the device is in low power mode.true/false\n          required: false\n          style: form\n          schema:\n            type: boolean\n            items:\n              type: string\n              default: available\n      x-codeSamples:\n        - lang: 'JavaScript(Percent)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"battery\"){\n                myElement.innerHTML = batteryPercent;\n              }\n            }\n        - lang: 'JavaScript(Charging)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"battery\"){\n                myElement.innerHTML = batteryCharging;\n              }\n            }\n        - lang: 'JavaScript(LowPowerMode)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"battery\"){\n                myElement.innerHTML = batteryLowPowerMode;\n              }\n            }\n  #ステータスバー情報\n  /Statusbar:\n    get:\n      tags:\n        - Statusbar Information\n      summary: How to get statusbar information\n      description: How to use acquired variables.\n      parameters:\n        - name: signalBars\n          in: query\n          description: Returns amount of signal bars.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: signalName\n          in: query\n          description: Returns operator name.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: wifiBars\n          in: query\n          description: Returns amount of wifi bars.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: wifiName\n          in: query\n          description: Returns current wifi name.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: signalNetworkType\n          in: query\n          description: Returns 5G, LTE, 3G, 2G, etc..\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n      x-codeSamples:\n        - lang: 'JavaScript(signalBars)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"statusbar\"){\n                myElement.innerHTML = signalBars;\n              }\n            }\n        - lang: 'JavaScript(signalName)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"statusbar\"){\n                myElement.innerHTML = signalName;\n              }\n            }\n        - lang: 'JavaScript(wifiBars)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"statusbar\"){\n                myElement.innerHTML = wifiBars;\n              }\n            }\n        - lang: 'JavaScript(wifiName)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"statusbar\"){\n                myElement.innerHTML = wifiName;\n              }\n            }\n        - lang: 'JavaScript(signalNetworkType)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"statusbar\"){\n                myElement.innerHTML = signalNetworkType;\n              }\n            }\n  #システム情報\n  /System:\n    get:\n      tags:\n        - System Information\n      summary: How to get system information\n      description: How to use acquired variables.\n      parameters:\n        - name: deviceName\n          in: query\n          description: Returns name set in General/About\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: deviceType\n          in: query\n          description: Returns the type of device Example (iPhone X)\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: systemVersion\n          in: query\n          description: Returns firmware version\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: ipAddress\n          in: query\n          description: Returns device local ip\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: ramFree\n          in: query\n          description: Returns free ram\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: ramUsed\n          in: query\n          description: Returns current ram used\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: ramTotal\n          in: query\n          description: Returns current ram total\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n      x-codeSamples:\n        - lang: 'JavaScript(deviceName)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = deviceName;\n              }\n            }\n        - lang: 'JavaScript(deviceType)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = deviceType;\n              }\n            }\n        - lang: 'JavaScript(systemVersion)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = systemVersion;\n              }\n            }\n        - lang: 'JavaScript(ipAddress)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = ipAddress;\n              }\n            }\n        - lang: 'JavaScript(ramFree)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = ramFree;\n              }\n            }\n        - lang: 'JavaScript(ramUsed)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = ramUsed;\n              }\n            }\n        - lang: 'JavaScript(ramTotal)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"system\"){\n                myElement.innerHTML = ramTotal;\n              }\n            }\n  #天気の情報\n  /Weather:\n    get:\n      tags:\n        - Weather Information\n      summary: How to get weather information\n      description: How to use acquired variables.to get the weather information use libPDDokdo. To get the information correctly you need to have the native weather app installed.\n      parameters:\n        - name: weather.temperature\n          in: query\n          description: Returns current temperature.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.conditions\n          in: query\n          description: Returns current weather conditions.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.location\n          in: query\n          description: Returns current weather location.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.conditioncode\n          in: query\n          description: Returns current condition code.[Reference source](https://github.com/schneelittchen/Nita/blob/e5504a411f493f71d38945597ad1b5d843cc1d26/Tweak/Nita.x)\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.hightemperature\n          in: query\n          description: Returns current high temperature.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.lowtemperature\n          in: query\n          description: Returns current low temperature.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.sunrise\n          in: query\n          description: Returns current sunrise.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n        - name: weather.sunset\n          in: query\n          description: Returns current sunset.\n          required: false\n          style: form\n          schema:\n            type: string\n            items:\n              type: string\n              default: available\n      x-codeSamples:\n        - lang: 'JavaScript(temperature)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.temperature;\n              }\n            }\n        - lang: 'JavaScript(conditions)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.conditions;\n              }\n            }\n        - lang: 'JavaScript(location)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.location;\n              }\n            }\n        - lang: 'JavaScript(Duration)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.currentDuration;\n              }\n            }\n        - lang: 'JavaScript(conditioncode)'\n          source: |\n            function mainUpdate(type){\n              var weatherString;\n              if(type == \"weather\"){\n                if (weather.conditioncode \u003c= 2)\n                  weatherString = @\"🌪\";\n                else if (weather.conditioncode \u003c= 4)\n                  weatherString = @\"⛈\";\n                else if (weather.conditioncode \u003c= 8)\n                  weatherString = @\"🌨\";\n                else if (weather.conditioncode == 9)\n                  weatherString = @\"🌧\";\n                else if (weather.conditioncode == 10)\n                  weatherString = @\"🌨\";\n                else if (weather.conditioncode \u003c= 12)\n                  weatherString = @\"🌧\";\n                else if (weather.conditioncode \u003c= 18)\n                  weatherString = @\"🌨\";\n                else if (weather.conditioncode \u003c= 22)\n                  weatherString = @\"🌫\";\n                else if (weather.conditioncode \u003c= 24)\n                  weatherString = @\"💨\";\n                else if (weather.conditioncode == 25)\n                  weatherString = @\"❄️\";\n                else if (weather.conditioncode == 26)\n                  weatherString = @\"☁️\";\n                else if (weather.conditioncode \u003c= 28)\n                  weatherString = @\"🌥\";\n                else if (weather.conditioncode \u003c= 30)\n                  weatherString = @\"⛅️\";\n                else if (weather.conditioncode \u003c= 32 \u0026\u0026 (hour \u003e= 18 || hour \u003c= 6))\n                  weatherString = @\"🌙\";\n                else if (weather.conditioncode \u003c= 32)\n                  weatherString = @\"☀️\";\n                else if (weather.conditioncode \u003c= 34)\n                  weatherString = @\"🌤\";\n                else if (weather.conditioncode == 35)\n                  weatherString = @\"🌧\";\n                else if (weather.conditioncode == 36)\n                  weatherString = @\"🔥\";\n                else if (weather.conditioncode \u003c= 38)\n                  weatherString = @\"🌩\";\n                else if (weather.conditioncode == 39)\n                  weatherString = @\"🌦\";\n                else if (weather.conditioncode == 40)\n                  weatherString = @\"🌧\";\n                else if (weather.conditioncode \u003c= 43)\n                  weatherString = @\"🌨\";\n                else\n                  weatherString = @\"N/A\";\n                myElement.innerHTML = weatherString;\n              }\n            }\n        - lang: 'JavaScript(hightemperature)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.hightemperature;\n              }\n            }\n        - lang: 'JavaScript(lowtemperature)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.lowtemperature;\n              }\n            }\n        - lang: 'JavaScript(sunrise)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.sunrise;\n              }\n            }\n        - lang: 'JavaScript(sunset)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"weather\"){\n                myElement.innerHTML = weather.sunset;\n              }\n            }\n  #再生中の音楽情報情報\n  /Music:\n    get:\n      tags:\n        - Music Information\n      summary: How to get Music information\n      description: How to use acquired variables.\n      parameters:\n        - name: artist\n          in: query\n          description: Returns current artist\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: album\n          in: query\n          description: Returns current album.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: title\n          in: query\n          description: Returns current title\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: currentDuration\n          in: query\n          description: Returns the playback time.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: currentElapsedTime\n          in: query\n          description: Returns the elapsed time.\n          required: false\n          style: form\n          schema:\n            type: strings\n            items:\n              type: string\n              default: available\n        - name: isplaying\n          in: query\n          description: Returns true/false\n          required: false\n          style: form\n          schema:\n            type: boolean\n            items:\n              type: string\n              default: available\n        - name: Artwork\n          in: query\n          description: The music image can be obtained in the following path '/var/mobile/Documents/MusicArt.png'\n          required: false\n          style: form\n          schema:\n            type: directory\n            items:\n              type: string\n              default: available\n      x-codeSamples:\n        - lang: 'JavaScript(artist)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.innerHTML = artist;\n              }\n            }\n        - lang: 'JavaScript(album)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.innerHTML = album;\n              }\n            }\n        - lang: 'JavaScript(title)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.innerHTML = title;\n              }\n            }\n        - lang: 'JavaScript(Duration)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.innerHTML = currentDuration;\n              }\n            }\n        - lang: 'JavaScript(ElapsedTime)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.innerHTML = currentElapsedTime;\n              }\n            }\n        - lang: 'JavaScript(isplaying)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.innerHTML = isplaying;\n              }\n            }\n        - lang: 'JavaScript(Artwork)'\n          source: |\n            function mainUpdate(type){\n              if(type == \"music\"){\n                myElement.src = \"/var/mobile/Documents/MusicArt.png?\"+ (new Date()).getTime();\n              }\n            }",
			"canonicalURL": "/github.com/Dcsyhi1998/dcsyhi1998.github.io@5534426c983ea67e65226f8245424b0caafb6726/-/blob/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Dcsyhi1998/dcsyhi1998.github.io/blob/5534426c983ea67e65226f8245424b0caafb6726/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/Battery\": get: at 1:1385: responses: no responses"
}