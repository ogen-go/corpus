{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "dataaccess.yaml",
			"size": 0,
			"path": "src/doc/yaml/dataaccess.yaml",
			"byteSize": 13972,
			"content": "\n# (c) Secure Identity Alliance\n\nopenapi: 3.0.0\ninfo:\n  description: |\n    The OSIA Data Access Interface.\n    \n    Change log:\n\n    - 1.3.0:\n      - Add errors 400 and return error details\n      - Force additionalProperties to false when extension is not allowed\n      - Add pagination for query service. limit parameter replaces the max parameter.\n    - 1.2.0: addition of security\n    - 1.1.0: extended queryPersonUIN/queryPersonList operation to return a list of attributes, and not only a list of UIN\n    - 1.0.0: first version proposed in OSIA.\n\n  version: 1.3.0\n  title: OSIA Data Access Interface\n  license:\n    name: SIA\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\nservers:\n  - url: https://pr.com/\n  - url: https://cr.com/\ntags:\n  - name: Person\n  - name: Document\npaths:\n  /v1/persons:\n    get:\n      description: |\n        Query for persons using a set of attributes. Retrieve the UIN or the person attributes.\n        This service is used when the UIN is unknown.\n        Example: http://registry.com/v1/persons?firstName=John\u0026lastName=Do\u0026names=firstName\n      operationId: queryPersonList\n      security:\n        - BearerAuth: [pr.person.read, cr.person.read]\n      tags:\n      - Person\n      parameters: \n        - name: attributes\n          in: query\n          description: The attributes (names and values) used to query\n          required: true\n          schema:\n            type: object\n            additionalProperties: true\n          style: form\n          explode: true\n          example:\n            firstName: John\n            lastName: Do\n        - name: names\n          in: query\n          description: The names of the attributes to return. If not provided, only the UIN is returned\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          style: form\n          explode: true\n          example:\n            - firstName\n            - lastName\n        - name: offset\n          in: query\n          description: The offset of the query (first item of the response)\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The maximum number of items to return\n          required: false\n          schema:\n            type: integer\n            default: 100\n\n      responses:\n        200:\n          description: \u003e\n            The requested attributes for all found persons (a list of at least one entry).\n            \n            If no names are given, a flat list of UIN is returned.\n            If at least one name is given, a list of dictionaries (one dictionary per record) is returned.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                - type: array\n                  minimum: 1\n                  items:\n                    type: string\n                  example:\n                    - \"1235567890\"\n                - type: array\n                  minimum: 1\n                  items:\n                    type: object\n                    additionalProperties:\n                      oneOf:\n                      - type: string\n                      - type: integer\n                      - type: number\n                      - type: boolean\n                      - $ref: '#/components/schemas/Error'\n                    example:\n                      firstName: John\n                      lastName: Doo\n                      dob:\n                        code: 1023\n                        message: Unknown attribute name\n                    \n        400:\n          description: Invalid parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Client must be authenticated\n        403:\n          description: Service forbidden\n        404:\n          description: No record found\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{uin}:\n    get:\n      description: \"Read attributes for a person. Example: http://registry.com/v1/persons/123456789?attributeNames=firstName\u0026attributeNames=lastName\u0026attributeNames=dob\"\n      operationId: readPersonAttributes\n      security:\n        - BearerAuth: [pr.person.read, cr.person.read]\n      tags:\n        - Person\n      parameters: \n        - name: uin\n          in: path\n          description: Unique Identity Number\n          required: true\n          schema:\n            type: string\n        - name: attributeNames\n          in: query\n          description: The names of the attributes requested for this person\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n            example:\n              - firstName\n              - lastName\n              - dob\n      responses:\n        200:\n          description: Requested attributes values or error description.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  oneOf:\n                  - type: string\n                  - type: integer\n                  - type: number\n                  - type: boolean\n                  - $ref: '#/components/schemas/Error'\n              example:\n                firstName: John\n                lastName: Doo\n                dob:\n                  code: 1023\n                  message: Unknown attribute name\n        400:\n          description: Invalid parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Client must be authenticated\n        403:\n          description: Service forbidden\n        404:\n          description: Unknown uin\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{uin}/match:\n    post:\n      description: |\n        Match person attributes.\n        This service is used to check the value of attributes without exposing private data.\n\n        The request body should contain a list of attributes and their value, formatted as a json dictionary.\n      operationId: matchPersonAttributes\n      security:\n        - BearerAuth: [pr.person.match, cr.person.match]\n      tags:\n        - Person\n      parameters: \n        - name: uin\n          in: path\n          description: Unique Identity Number\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: A set of attributes for the person\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Attributes'\n            example:\n              firstName: John\n              lastName: Doo\n              dateOfBirth: \"1984-11-19\"\n      responses:\n        200:\n          description: |\n            Information about non matching attributes. Returns a list of matching result.\n            An empty list indicates all attributes were matching.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MatchingError'\n              example:\n                - attributeName: firstName\n                  errorCode: 1\n        400:\n          description: Invalid parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Client must be authenticated\n        403:\n          description: Service forbidden\n        404:\n          description: Unknown uin\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{uin}/verify:\n    post:\n      description: |\n        Evaluate expressions on person attributes.\n        This service is used to evaluate simple expressions on\n        person's attributes without exposing private data\n\n        The request body should contain a list of expressions.\n      operationId: verifyPersonAttributes\n      security:\n        - BearerAuth: [pr.person.verify, cr.person.verify]\n      tags:\n        - Person\n      parameters: \n        - name: uin\n          in: path\n          description: Unique Identity Number\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: A set of expressions on attributes of the person\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Expressions'\n            example:\n              - attributeName: firstName\n                operator: \"=\"\n                value: John\n              - attributeName: dateOfBirth\n                operator: \"\u003c\"\n                value: \"1990-12-31\"\n      responses:\n        200:\n          description: The expressions are all true (true is returned) or one is false (false is returned)\n          content:\n            application/json:\n              schema:\n                type: boolean\n              example:\n                true\n        400:\n          description: Invalid parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Client must be authenticated\n        403:\n          description: Forbidden access. The service is forbidden or one of the attributes is forbidden.\n        404:\n          description: Unknown uin\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /v1/persons/{uin}/document:\n    get:\n      description: |\n        Read in an unstructured format (PDF, image) a document such as a marriage certificate.\n        Example: ``http://registry.com/v1/persons/123456789/document?doctype=marriage\u0026secondaryUin=234567890\u0026format=pdf``\n      operationId: readDocument\n      security:\n        - BearerAuth: [pr.document.read, cr.document.read]\n      tags:\n        - Document\n      parameters: \n        - name: uin\n          in: path\n          description: Unique Identity Number\n          required: true\n          schema:\n            type: string\n        - name: secondaryUin\n          in: query\n          description: |\n            Unique Identity Number of a second person linked to the requested document.\n            Example: wife, husband\n          required: false\n          schema:\n            type: string\n        - name: doctype\n          in: query\n          description: The type of document\n          required: true\n          schema:\n            type: string\n        - name: format\n          in: query\n          description: |\n            The expected format of the document.\n            If the document is not available at this format, it must be converted.\n            TBD: one format for certificate data.\n          required: true\n          schema:\n            type: string\n            enum: ['pdf', 'jpeg', 'png', 'TBD'] \n      responses:\n        200:\n          description: The document(s) is/are found and returned, as binary data in a MIME multipart structure.\n          content:\n            multipart/mixed:\n              schema:\n                type: object\n                properties:\n                  documents:\n                    type: array\n                    items:\n                      type: string\n                      format: binary\n                additionalProperties: false\n              encoding:\n                documents:\n                  contentType: application/pdf, image/jpeg, image/png\n        400:\n          description: Invalid parameter\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        401:\n          description: Client must be authenticated\n        403:\n          description: Service forbidden\n        404:\n          description: Unknown uin\n        415:\n          description: Unsupported format\n        500:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n      additionalProperties: false\n    Attributes:\n      type: object\n      additionalProperties:\n        oneOf:\n        - type: string\n        - type: integer\n        - type: number\n        - type: boolean\n      # Or ?:\n      #additionalProperties: true\n    Expression:\n      type: object\n      required:\n        - attributeName\n        - operator\n        - value\n      properties:\n        attributeName:\n          type: string\n        operator:\n          type: string\n          enum: ['\u003c', '\u003e', '=', '\u003e=', '\u003c=']\n        value:\n          oneOf:\n          - type: string\n          - type: integer\n          - type: number\n          - type: boolean\n      additionalProperties: false\n    Expressions:\n      type: array\n      items:\n        $ref: '#/components/schemas/Expression'\n    MatchingError:\n      type: array\n      items:\n        type: object\n        properties:\n          attributeName:\n            type: string\n          errorCode:\n            type: integer\n            format: int32\n            enum: [0, 1]\n            description: 0=attribute does not exist; 1=attribute exists but does not match\n        additionalProperties: false\n        \n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@3985bcb9999ca644b07865dd7e1424cd0e47946e/-/blob/src/doc/yaml/dataaccess.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/3985bcb9999ca644b07865dd7e1424cd0e47946e/src/doc/yaml/dataaccess.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/v1/persons\": at 1:1804: get: operation \"queryPersonList\": at 1:1811: at 1:4012: security: list of scopes MUST be empty for \"type\" \"http\""
}