{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kartevonmorgen/openfairdb"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 50557,
			"content": "openapi: 3.0.3\ninfo:\n  title: OpenFairDB API\n  version: 0.10.5\n  contact:\n    name: slowtec GmbH\n    url: 'https://slowtec.de'\n  license:\n    name: AGPLv3\n    url: 'https://github.com/slowtec/openfairdb/blob/master/LICENSE'\nservers:\n  - url: 'https://api.ofdb.io/v0/'\n    description: Public production server\n  - url: 'https://dev.ofdb.io/v0/'\n    description: Public unstable development server\npaths:\n  /search:\n    get:\n      summary: Search for places\n      description: |\n        Query the database for entries/places according to the search criteria\n        and order the top matching results by their total rating in descending\n        order.\n\n        The default result contains up to 100 entries. Use the `limit` parameter\n        to customize the desired amount. The server may decide to deliver less\n        results than requested up to some internal upper limit (currently 2000).\n\n        If the review status list is empty or missing only visible places\n        (created, confirmed) are returned.\n      tags:\n        - Search\n      parameters:\n        - $ref: '#/components/parameters/BoundingBox'\n        - $ref: '#/components/parameters/OrgTagFilter'\n        - name: categories\n          in: query\n          schema:\n            type: string\n          description: |\n            Comma-separated list of category identifiers.\n            We currently use the following two:\n            - Initiative (non-commercial): `2cd00bebec0c48ba9db761da48678134`\n            - Company (commercial): `77b3c33a92554bcf8e8c2c86cedd6f6f`\n        - name: text\n          in: query\n          schema:\n            type: string\n        - $ref: '#/components/parameters/IdList'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/ReviewStatusList'\n        - $ref: '#/components/parameters/PaginationLimit'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResponse'\n  /search/duplicates:\n    post:\n      summary: Search for duplicate places\n      description: |\n        Search for similar places that might be duplicates of a\n        given place.\n\n        Currently only the geographical location and title and are\n        considered to find similar, already existing entries in\n        the database.\n\n        Returns a list of possible duplicates for the given place.\n      tags:\n        - Search\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewEntryWithLicense'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SearchEntry'\n  '/entries':\n    post:\n      summary: Create an entry\n      tags:\n        - Entries/Places\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewEntryWithLicense'\n      security:\n        - bearerAuth: []\n        - captchaCookieAuth: []\n        - jwtAuth: []\n        - userEmailCookieAuth: []\n      responses:\n        '200':\n          description: Successful response\n  '/entries/{ids}':\n    get:\n      summary: Get multiple entries\n      tags:\n        - Entries/Places\n      parameters:\n        - $ref: '#/components/parameters/IdListPath'\n        - $ref: '#/components/parameters/OrgTagFilter'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Entry'\n  '/entries/{id}':\n    put:\n      summary: Update an entry\n      description: |\n        The edited entry must include the *next version* of this entry\n        in the `version` field, where *next version* = *current version* + 1.\n      tags:\n        - Entries/Places\n      parameters:\n        - $ref: '#/components/parameters/IdPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewEntryWithVersion'\n      security:\n        - bearerAuth: []\n        - captchaCookieAuth: []\n        - jwtAuth: []\n        - userEmailCookieAuth: []\n      responses:\n        '200':\n          description: Successful response\n\n  /entries/recently-changed:\n    get:\n      summary: Get recently changed entries\n      description: |\n        Get recently changed entries that have been created/updated/archived between since and now.\n        Limitation: Only the most recent 1000 entries are returned and the change history is\n        restricted to the last 100 days.\n      tags:\n        - Entries/Places\n      parameters:\n        - name: since\n          in: query\n          required: false\n          description: Time stamp of the oldest change (inclusive)\n          schema:\n            $ref: '#/components/schemas/UnixTime'\n        - name: until\n          in: query\n          required: false\n          description: Time stamp of the most recent change (exclusive)\n          schema:\n            $ref: '#/components/schemas/UnixTime'\n        - name: with_ratings\n          in: query\n          description: Return entries including their ratings\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/PaginationLimit'\n        - $ref: '#/components/parameters/PaginationOffset'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n  /entries/most-popular-tags:\n    get:\n      summary: Get most popular tags for entries\n      description: |\n        Get most popular tags for entries with their total usage count.\n        Results are sorted in descending order of counts, i.e. most popular\n        tags appear first. A maximum of 1000 tag with their count is returned\n        if no limit is specified.\n      tags:\n        - Entries/Places\n      parameters:\n        - name: min_count\n          in: query\n          required: false\n          description: Minimum count per tag (inclusive)\n          schema:\n            type: integer\n            format: int64\n        - name: max_count\n          in: query\n          required: false\n          description: Maximum count per tag (inclusive)\n          schema:\n            type: integer\n            format: int64\n        - $ref: '#/components/parameters/PaginationLimit'\n        - $ref: '#/components/parameters/PaginationOffset'\n        - name: max_cache_age\n          in: query\n          required: false\n          description: |\n            By default, cached data is returned for performance, if the cache is not older than one hour.\n            If you need newer data, you can set the maximum tolerable age of the cache here, in seconds.\n            A value of 0 disables the cache and gets the newest state.\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TagCounts'\n\n  '/places/clearance':\n    get:\n      tags:\n        - Entries/Places\n      summary: List clearance of places\n      description: |\n        Returns a list of places with pending clearance on behalf\n        of the requesting organization in chronological order.\n\n        Requests must include the API token of the organization.\n      parameters:\n        - $ref: '#/components/parameters/PaginationLimit'\n        - $ref: '#/components/parameters/PaginationOffset'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PendingClearanceForPlace'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    post:\n      tags:\n        - Entries/Places\n      summary: Update clearance of places\n      description: |\n        Update the clearance of multiple places on behalf of the\n        requesting organization.\n\n        Returns the number of created/updated clearance records.\n\n        If the given revision matches the current revision of that place\n        then any pending clearance is deleted. Otherwise clearance will\n        remain pending with the given revision stored as the new last\n        cleared revision, i.e. any pending clearance is replaced.\n\n        Requests must include the API token of the organization.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ClearanceForPlace'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultCount'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/places/clearance/count':\n    get:\n      tags:\n        - Entries/Places\n      summary: Count clearance of places\n      description: |\n        Returns the total number places with pending clearance on behalf\n        of the requesting organization.\n\n        Requests must include the API token of the organization.\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResultCount'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/places/{id}/history/{revision}':\n    get:\n      tags:\n        - Entries/Places\n      summary: History of place revisions\n      description: |\n        Loads the history of all place revisions including status reviews.\n\n        Optionally the result can be restricted to a single revision. If no\n        particular revision is requested then all revisions are returned.\n\n        Results are sorted in descending chronological order of activity time stamps,\n        i.e. the most recent changes appear first.\n\n        Only users with the role scout or admin are entitled to invoke this function.\n        Organizations must provide their API token for authorization.\n      parameters:\n        - $ref: '#/components/parameters/IdPath'\n        - $ref: '#/components/parameters/OptionalRevisionPath'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PlaceHistory'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/places/{ids}/review':\n    post:\n      tags:\n        - Entries/Places\n      summary: Review multiple places\n      description: |\n        Reviews the latest revision of multiple places at once. An audit log\n        is written into the history of all place revisions.\n        Depending on the review status the affected places might be\n        hidden from search results (archived, rejected) or re-appear\n        (created, confirmed).\n        Only scouts and admins are entitled to invoke this function.\n      parameters:\n        - $ref: '#/components/parameters/IdListPath'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Review'\n      responses:\n        '201':\n          description: Created a review for all places.\n        '400':\n          $ref: '#/components/responses/ParameterError'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  '/ratings/{ids}':\n    get:\n      summary: Get multiple ratings\n      tags:\n        - Ratings\n      parameters:\n        - $ref: '#/components/parameters/IdListPath'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Rating'\n\n  /categories/:\n    get:\n      summary: Get available categories\n      tags:\n        - Categories\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n  '/categories/{ids}':\n    get:\n      summary: Get multiple categories\n      tags:\n        - Categories\n      parameters:\n        - $ref: '#/components/parameters/IdListPath'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Category'\n  /events:\n    get:\n      tags:\n        - Events\n      summary: Search events\n      parameters:\n        - $ref: '#/components/parameters/BoundingBox'\n        - $ref: '#/components/parameters/PaginationLimit'\n        - $ref: '#/components/parameters/EventTagList'\n        - $ref: '#/components/parameters/EventStartMin'\n        - $ref: '#/components/parameters/EventStartMax'\n        - $ref: '#/components/parameters/EventEndMin'\n        - $ref: '#/components/parameters/EventEndMax'\n        - $ref: '#/components/parameters/EventFilterText'\n        - $ref: '#/components/parameters/EventCreatedBy'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n    post:\n      tags:\n        - Events\n      summary: Create a new event\n      description: |\n        Creating new events is only allowed for registered organizations\n        by authorizing themselves with an API token. These organizations must\n        own reserved tags.\n\n        One or more reserved tags have to be provided upon creation. Otherwise\n        all of the organization's reserved tags are added implicitly to the event.\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Event'\n      responses:\n        '201':\n          description: Created a new event\n          content:\n            application/json:\n              schema:\n                description: The ID of the created event\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/events/{id}':\n    get:\n      summary: Get a single event\n      tags:\n        - Events\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n    put:\n      summary: Update an event\n      description: |\n        Events can only be updated by the organization that owns them.\n        Ownership is determined by the event's reserved tags.\n\n        The updated event must be assigned at least one of the organization's\n        reserved tags. Otherwise all reserved tags of the event are preserved\n        by implicitly re-adding them.\n      tags:\n        - Events\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Event'\n      responses:\n        '200':\n          description: Successfully updated the event\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    delete:\n      summary: Delete an event\n      description: |\n        Events can only be deleted by the organization that owns them.\n        Ownership is determined by the event's reserved tags.\n      tags:\n        - Events\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Successfully deleted the event\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  '/events/{ids}/archive':\n    post:\n      tags:\n        - Events\n      summary: Archive multiple events\n      description: |\n        Marks the given events as *archived* and excludes them from\n        all search results.\n\n        Only scouts and admins are entitled to invoke this function.\n      parameters:\n        - $ref: '#/components/parameters/IdListPath'\n      responses:\n        '204':\n          description: Archived the given events if not already archived.\n        '400':\n          $ref: '#/components/responses/ParameterError'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  '/login':\n    post:\n      summary: User login\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  $ref: '#/components/schemas/UserEmail'\n                password:\n                  type: string\n      responses:\n        '200':\n          description: Successful response - the JWT token\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JwtToken'\n  '/logout':\n    post:\n      summary: User logout\n      tags:\n        - Users\n      security:\n        - jwtAuth: []\n      responses:\n        '200':\n          description: Successful response\n  '/users/current':\n    get:\n      summary: Get the current user\n      tags:\n        - Users\n      security:\n        - jwtAuth: []\n      responses:\n        '200':\n          description: The current user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n  '/users/reset-password-request':\n    post:\n      summary: Request a password reset\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  $ref: '#/components/schemas/UserEmail'\n      responses:\n        '200':\n           description: Successful response\n  '/users/reset-password':\n    post:\n      summary: Request a users password\n      tags:\n        - Users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  $ref: '#/components/schemas/UserEmail'\n                token:\n                  type: string\n                new_password:\n                  type: string\n      responses:\n        '200':\n           description: Successful response\n  /subscribe-to-bbox:\n    post:\n      summary: Subscribe to a bounding box\n      tags:\n        - Subscriptions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/LatLonDeg'\n            example:\n             - lat: 45.3\n               lng: 8.6\n             - lat: 48.7\n               lng: 9.2\n      responses:\n        '200':\n          description: Successful response\n  /bbox-subscriptions:\n    get:\n      summary: Fetch subscriptions\n      tags:\n        - Subscriptions\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/BboxSubscription'\n  /unsubscribe-all-bboxes:\n    delete:\n      summary: Delete all subscriptions\n      tags:\n        - Subscriptions\n      responses:\n        '200':\n          description: Successful response\n  /tags:\n    get:\n      summary: Get tags\n      tags:\n        - Tags\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  /count/entries:\n    get:\n      summary: Get number of entries\n      tags:\n        - Stats\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: integer\n  /count/tags:\n    get:\n      summary: Get number of tags\n      tags:\n        - Stats\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                type: integer\n  /server/version:\n    get:\n      summary: Get current server version\n      tags:\n        - Stats\n      responses:\n        '200':\n          description: Successful response\n          content:\n            text/plain:\n              schema:\n                type: string\n  /server/openapi.yaml:\n    get:\n      summary: Download the current API documentation\n      tags:\n        - Stats\n      responses:\n        '200':\n          description: Successful response\n          content:\n            text/yaml:\n              schema:\n                type: string\n  /export/entries.csv:\n    get:\n      summary: Export places as CSV.\n      description: |\n        The CSV export is only available for logged in users with the role _Admin_ or _Scout_.\n\n        This request supports the same parameters as the corresponding search request.\n\n        Contact details (email/phone) are only visible for users with the role _Admin_ or _Scout_.\n\n        Information about who created the current version (created_by) is only visible for\n        users with the role _Admin_ or owners of this entry.\n\n        **Example**:\n\n        Export all entries in Germany:\n        `/export/entries.csv?bbox=47.49,0.79,54.63,18.30`\n      tags:\n        - Export\n      parameters:\n        - $ref: '#/components/parameters/BoundingBox'\n        - name: categories\n          in: query\n          schema:\n            type: string\n          description: |\n            Comma-separated list of category identifiers.\n            We currently use the following two:\n            - Initiative (non-commercial): `2cd00bebec0c48ba9db761da48678134`\n            - Company (commercial): `77b3c33a92554bcf8e8c2c86cedd6f6f`\n        - name: text\n          in: query\n          schema:\n            type: string\n        - $ref: '#/components/parameters/IdList'\n        - $ref: '#/components/parameters/TagList'\n        - $ref: '#/components/parameters/ReviewStatusList'\n        - $ref: '#/components/parameters/PaginationLimit'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            text/csv:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /export/events.csv:\n    get:\n      summary: Export events as CSV.\n      description: |\n        The CSV export is only available for logged in users with the role _Admin_ or _Scout_.\n\n        This request supports the same parameters as the corresponding search request.\n\n        **Example**:\n\n        Export all events in Germany:\n        `/export/events.csv?bbox=47.49,0.79,54.63,18.30`\n      tags:\n        - Export\n      parameters:\n        - $ref: '#/components/parameters/BoundingBox'\n        - $ref: '#/components/parameters/PaginationLimit'\n        - $ref: '#/components/parameters/EventTagList'\n        - $ref: '#/components/parameters/EventStartMin'\n        - $ref: '#/components/parameters/EventStartMax'\n        - $ref: '#/components/parameters/EventFilterText'\n        - $ref: '#/components/parameters/EventCreatedBy'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            text/csv:\n              schema:\n                type: string\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n  /captcha:\n    post:\n      summary: Request a new captcha challenge\n      tags:\n        - Captcha\n      responses:\n        '200':\n          $ref: '#/components/parameters/CaptchaToken'\n  '/captcha/{captcha-token}':\n    get:\n      summary: Get the captcha challenge\n      description: |\n        Returns an image with a captcha challenge for the given token.\n      tags:\n        - Captcha\n      parameters:\n        - $ref: '#/components/parameters/CaptchaToken'\n      responses:\n        '200':\n          $ref: '#/components/schemas/CaptchaImage'\n        '404':\n          description: Unknown or expired token\n  '/captcha/{captcha-token}/verify':\n    post:\n      summary: Verify a captcha answer for the given token\n      tags:\n        - Captcha\n      parameters:\n        - $ref: '#/components/parameters/CaptchaToken'\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              $ref: '#/components/schemas/CaptchaAnswer'\n      responses:\n        '200':\n          description: |\n            The answer to the capcha challenge was correct.\n\n            A token is returned in a cookie named `ofdb-captcha`.\n            You need to include this cookie in subsequent requests.\n          headers:\n            Set-Cookie:\n              schema:\n                type: string\n                example: ofdb-captcha=2f006JTvKBr5KJggwirdTzTssdzschIwThWF8LdqPZTr4wSY6r%2F79ayYNz46NTrKn4VR6KPxpkNeIOoGbA%3D%3D; HttpOnly; Path=/;\n        '400':\n          description: The answer to the capcha challenge was not correct\n\ncomponents:\n  schemas:\n    NewEntry:\n      properties:\n        title:\n          type: string\n        description:\n          type: string\n        lat:\n          $ref: '#/components/schemas/Latitude'\n        lng:\n          $ref: '#/components/schemas/Longitude'\n        street:\n          type: string\n        zip:\n          type: string\n        city:\n          type: string\n        country:\n          type: string\n        state:\n          type: string\n        contact_name:\n          $ref: '#/components/schemas/ContactName'\n        email:\n          $ref: '#/components/schemas/ContactEmail'\n        telephone:\n          $ref: '#/components/schemas/ContactPhone'\n        homepage:\n          $ref: '#/components/schemas/Url'\n        opening_hours:\n          $ref: '#/components/schemas/OpeningHours'\n        founded_on:\n          $ref: '#/components/schemas/FoundingDate'\n        categories:\n          type: array\n          items:\n            type: string\n        tags:\n          $ref: '#/components/schemas/TagArray'\n        image_url:\n          $ref: '#/components/schemas/ImageUrl'\n        image_link_url:\n          $ref: '#/components/schemas/ImageLink'\n        links:\n          $ref: '#/components/schemas/CustomLinkList'\n      required:\n        - title\n        - description\n        - lat\n        - lng\n    NewEntryWithLicense:\n      allOf:\n        - $ref: '#/components/schemas/NewEntry'\n        - type: object\n          properties:\n            license:\n              $ref: '#/components/schemas/License'\n    NewEntryWithVersion:\n      allOf:\n        - $ref: '#/components/schemas/NewEntry'\n        - type: object\n          properties:\n            version:\n              type: integer\n    Entry:\n      allOf:\n        - $ref: '#/components/schemas/NewEntryWithLicense'\n        - type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/Id'\n            version:\n              type: integer\n            created:\n              type: integer\n            ratings:\n              type: array\n              items:\n                type: string\n    ImageUrl:\n      description: |\n        The external URL for an image.\n      allOf:\n        - $ref: '#/components/schemas/Url'\n    ImageLink:\n      description: |\n        A hyperlink behind an image that is supposed to be opened when\n        clicking on the image.\n      allOf:\n        - $ref: '#/components/schemas/Url'\n    CustomLink:\n      description: |\n        A custom hyperlink with an optional title and description.\n      properties:\n        url:\n          $ref: '#/components/schemas/Url'\n        title:\n          type: string\n        description:\n          type: string\n      required:\n        - url\n    CustomLinkList:\n      description: |\n        An unordered list of custom links.\n\n        The ordering of list items may change between different\n        revisions even if this list has not been modified. Don't\n        make any assumptions about a particular ordering!\n      type: array\n      items:\n        $ref: '#/components/schemas/CustomLink'\n    Category:\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        created:\n          type: integer\n        version:\n          type: integer\n        name:\n          type: string\n    Rating:\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        title:\n          type: string\n        created:\n          type: integer\n        value:\n          type: integer\n        context:\n          type: string\n        source:\n          type: string\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/RatingComment'\n    RatingComment:\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        created:\n          $ref: '#/components/schemas/CreatedAt'\n        text:\n          type: string\n    BboxSubscription:\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        south_west_lat:\n          $ref: '#/components/schemas/Latitude'\n        south_west_lng:\n          $ref: '#/components/schemas/Longitude'\n        north_east_lat:\n          $ref: '#/components/schemas/Latitude'\n        north_east_lng:\n          $ref: '#/components/schemas/Longitude'\n    SearchResponse:\n      properties:\n        visible:\n          description: The entries that are in the given bounding box (bbox, area of the map).\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchEntry'\n        invisible:\n          description: Up to 5 entries outside the bbox.\n          type: array\n          items:\n            $ref: '#/components/schemas/SearchEntry'\n    SearchEntry:\n      description: The compact view of an entry as returned in search results.\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        status:\n          $ref: '#/components/schemas/ReviewStatus'\n        lat:\n          $ref: '#/components/schemas/Latitude'\n        lng:\n          $ref: '#/components/schemas/Longitude'\n        title:\n          type: string\n        description:\n          type: string\n        categories:\n          type: array\n          items:\n            type: string\n        tags:\n          $ref: '#/components/schemas/TagArray'\n        ratings:\n          $ref: '#/components/schemas/AvgRatings'\n    PlaceId:\n      description: |\n        The id of a place\n      allOf:\n        - $ref: '#/components/schemas/Id'\n    PendingClearanceForPlace:\n      description: |\n        The compact view of an entry as returned in search results.\n\n        The field `last_cleared_revision` is missing if no cleared revivision\n        is available, e.g. for newly created entries.\n      properties:\n        place_id:\n          $ref: '#/components/schemas/PlaceId'\n        created_at:\n          $ref: '#/components/schemas/CreatedAt'\n        last_cleared_revision:\n          $ref: '#/components/schemas/Revision'\n      required:\n        - place_id\n        - created_at\n    ClearanceForPlace:\n      description: |\n        Clearance for a selected revision of a place.\n\n        If the field `cleared_revision` is missing then the current revision\n        is cleared unconditionally.\n      properties:\n        place_id:\n          $ref: '#/components/schemas/PlaceId'\n        cleared_revision:\n          $ref: '#/components/schemas/Revision'\n      required:\n        - place_id\n    AvgRatings:\n      description: All average ratings of an entry.\n      properties:\n        total:\n          type: number\n        diversity:\n          type: number\n        fairness:\n          type: number\n        humanity:\n          type: number\n        renewable:\n          type: number\n        solidarity:\n          type: number\n        transparency:\n          type: number\n    Id:\n      type: string\n      minLength: 32\n      maxLength: 32\n      description: |\n        Identifier of a resource\n      example: 7cee99c287094a94acbdcf29ffff2e85\n    IdArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Id'\n    Revision:\n      type: integer\n      format: int64\n      minimum: 0\n      description: |\n        A revision number\n      example: 23\n    IdList:\n      type: string\n      description: |\n        Comma-separated list of identifiers\n      example: 7cee99c287094a94acbdcf29ffff2e85,0884c4e86e404072b6874b99b7e32640,ed8a2aef20054102b20950b1b78eb581\n    TagList:\n      type: string\n      description: |\n        Comma-separated list of tags\n      example: organic,non-profit\n    License:\n      type: string\n      minLength: 1\n      example: ODbL-1.0\n    Email:\n      type: string\n      minLength: 3\n      description: |\n        An e-mail address.\n      example: john.smith@example.com\n    UserEmail:\n      description: |\n        The e-mail address of a user account.\n      allOf:\n        - $ref: '#/components/schemas/Email'\n    ContactName:\n      description: |\n        The name of the contact person.\n      allOf:\n        - $ref: '#/components/schemas/PersonFullName'\n    ContactEmail:\n      description: |\n        An e-mail address to get in contact.\n      allOf:\n        - $ref: '#/components/schemas/Email'\n    PersonFullName:\n      type: string\n      description: |\n        The full name of a person.\n      example: John Smith\n    Title:\n      type: string\n      minLength: 1\n      example: A non-empty title\n    Description:\n      type: string\n      minLength: 1\n      example: A non-empty description\n    Street:\n      type: string\n      example: Friedrichsberg 55\n    City:\n      type: string\n      example: Stuttgart\n    ZipCode:\n      type: string\n      example: 70567\n    Country:\n      type: string\n      example: Germany\n    State:\n      type: string\n      example: Baden-Württemberg\n    Phone:\n      type: string\n      example: 001 123456789\n    ContactPhone:\n      description: |\n        An phone number to get in contact.\n      allOf:\n        - $ref: '#/components/schemas/Phone'\n    Tag:\n      type: string\n      minLength: 1\n      example: non-profit\n    TagArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tag'\n      example: [organic, non-profit]\n    Url:\n      type: string\n      minLength: 8\n      example: https://www.slowtec.de/\n    Activity:\n      properties:\n        at:\n          $ref: '#/components/schemas/CreatedAt'\n        by:\n          $ref: '#/components/schemas/UserEmail'\n      required:\n        - at\n    ActivityContext:\n      type: string\n      description: |\n        Implicitly recorded context of an activity\n    ActivityComment:\n      type: string\n      description: |\n        Free text that describes the motivation or trigger for an activity\n      example: Action performed, because ...\n    ActivityLog:\n      properties:\n        at:\n          $ref: '#/components/schemas/CreatedAt'\n        by:\n          $ref: '#/components/schemas/UserEmail'\n        ctx:\n          $ref: '#/components/schemas/ActivityContext'\n        comment:\n          $ref: '#/components/schemas/ActivityComment'\n      required:\n        - at\n    Location:\n      properties:\n        deg:\n          $ref: '#/components/schemas/LatLonDeg'\n        adr:\n          $ref: '#/components/schemas/Address'\n      required:\n        - deg\n    Contact:\n      properties:\n        name:\n          $ref: '#/components/schemas/ContactName'\n        phone:\n          $ref: '#/components/schemas/ContactPhone'\n        email:\n          $ref: '#/components/schemas/ContactEmail'\n    Address:\n      properties:\n        street:\n          $ref: '#/components/schemas/Street'\n        city:\n          $ref: '#/components/schemas/City'\n        zip:\n          $ref: '#/components/schemas/ZipCode'\n        country:\n          $ref: '#/components/schemas/Country'\n        state:\n          $ref: '#/components/schemas/State'\n    OpeningHours:\n      type: string\n      minLength: 4\n      description: |\n        The opening hours in OpenStreetMap format.\n\n        Specification: https://wiki.openstreetmap.org/wiki/Key:opening_hours\n\n        Reference implementations: https://github.com/opening-hours/\n\n        Generator tool: https://projets.pavie.info/yohours/\n\n        The service trims leading/trailing whitespaces and stores values as is.\n        Values are currently not validated against the OSM format syntax!\n      example: 24/7\n    PlaceLinks:\n      properties:\n        www:\n          $ref: '#/components/schemas/Url'\n        img:\n          $ref: '#/components/schemas/ImageUrl'\n        img_href:\n          $ref: '#/components/schemas/ImageLink'\n    FoundingDate:\n        description: |\n          The date on which an organization, initiative, or company has been founded or established.\n        type: string\n        format: date\n        example: 1945-10-24\n    LatLonDeg:\n      type: array\n      minLength: 2\n      maxLength: 2\n      items:\n        type: number\n        format: double\n      description: |\n        WGS 84 coordinates (latitude, longitude) in degrees\n      example: [48.720334,9.152239]\n    PlaceRoot:\n      description: |\n        Immutable properties of a place\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        lic:\n          $ref: '#/components/schemas/License'\n      required:\n        - id\n        - lic\n    PlaceRevision:\n      properties:\n        created:\n          $ref: '#/components/schemas/Activity'\n        rev:\n          $ref: '#/components/schemas/Revision'\n        tit:\n          $ref: '#/components/schemas/Title'\n        dsc:\n          $ref: '#/components/schemas/Description'\n        loc:\n          $ref: '#/components/schemas/Location'\n        cnt:\n          $ref: '#/components/schemas/Contact'\n        hrs:\n          $ref: '#/components/schemas/OpeningHours'\n        fnd:\n          $ref: '#/components/schemas/FoundingDate'\n        lnk:\n          $ref: '#/components/schemas/PlaceLinks'\n        tag:\n          $ref: '#/components/schemas/TagArray'\n      required:\n        - created\n        - rev\n        - tit\n        - dsc\n    PlaceRevisionLog:\n      type: array\n      minLength: 2\n      maxLength: 2\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/PlaceRevision'\n          - $ref: '#/components/schemas/ReviewStatusLogArray'\n    PlaceRevisionLogArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/PlaceRevisionLog'\n    ReviewStatusLog:\n      properties:\n        rev:\n          $ref: '#/components/schemas/Revision'\n        act:\n          $ref: '#/components/schemas/ActivityLog'\n        status:\n          $ref: '#/components/schemas/ReviewStatus'\n    ReviewStatusLogArray:\n      type: array\n      items:\n        $ref: '#/components/schemas/ReviewStatusLog'\n    PlaceHistory:\n      properties:\n        place:\n          $ref: '#/components/schemas/PlaceRoot'\n        revisions:\n          $ref: '#/components/schemas/PlaceRevisionLogArray'\n      required:\n        - place\n    ResultCount:\n      properties:\n        count:\n          type: integer\n          format: int64\n      required:\n        - count\n      additionalProperties: false\n    Review:\n      properties:\n        status:\n          $ref: '#/components/schemas/ReviewStatus'\n        comment:\n          $ref: '#/components/schemas/ActivityComment'\n      required:\n        - status\n    ReviewStatus:\n      type: string\n      enum:\n        - created\n        - confirmed\n        - rejected\n        - archived\n      description: |\n        * created = initial status of each revision\n        * confirmed/rejected = after positive/negative review\n        * archived = final status\n      example: rejected\n    ReviewStatusList:\n      type: string\n      description: |\n        Comma-separated list of multiple review status names\n      example: created,confirmed\n    UserRole:\n      type: string\n      enum:\n        - guest\n        - user\n        - scout\n        - admin\n      description: |\n        A user's role\n    User:\n      properties:\n        email:\n          $ref: '#/components/schemas/UserEmail'\n        email_confirmed:\n          type: boolean\n        role:\n          $ref: '#/components/schemas/UserRole'\n      required:\n        - email\n        - email_confirmed\n        - role\n    Event:\n      properties:\n        id:\n          $ref: '#/components/schemas/Id'\n        title:\n          type: string\n          example: A great event\n        description:\n          type: string\n          example: Detailed description of the event\n        start:\n          $ref: '#/components/schemas/EventTime'\n        end:\n          $ref: '#/components/schemas/EventTime'\n        created_at:\n          $ref: '#/components/schemas/CreatedAt'\n        created_by:\n          type: string\n          description: |\n            The email address of the user who is responsible for the content.\n            This information is only available for authorized organizations.\n        lat:\n          $ref: '#/components/schemas/Latitude'\n        lng:\n          $ref: '#/components/schemas/Longitude'\n        street:\n          type: string\n        zip:\n          type: string\n        city:\n          type: string\n        country:\n          type: string\n        state:\n          type: string\n        email:\n          $ref: '#/components/schemas/ContactEmail'\n        telephone:\n          $ref: '#/components/schemas/ContactPhone'\n        tags:\n          $ref: '#/components/schemas/TagArray'\n        homepage:\n          $ref: '#/components/schemas/Url'\n        registration:\n          type: string\n          enum:\n            - email\n            - telephone\n            - homepage\n          example: telephone\n          description: Type of registration\n        organizer:\n          type: string\n        image_url:\n          $ref: '#/components/schemas/ImageUrl'\n        image_link_url:\n          $ref: '#/components/schemas/ImageLink'\n    UnixTime:\n      type: integer\n      format: int64\n      description: |\n        Unix time (number of seconds since 00:00::00 1. January, 1970, UTC)\n      example: 1547403509\n    EventTime:\n      description: |\n        The start/end time of an event.\n\n        Event times are always specified in UTC, independent of the geographical\n        location and the actual time zone at this location at the given time.\n        Therefore these time stamps should be interpreted as a *naive* date time\n        without any time zone. The calculation of the actual, absolute point that\n        is needed for chronological ordering of events at different geographical\n        locations would require a time zone database to perform this conversion.\n\n        Frontends should display and edit event times as if the event is located\n        in the UTC time zone, neither taking into account the actual time at the\n        geographical location of the event nor the current local time zone of the\n        client itself!\n      allOf:\n        - $ref: '#/components/schemas/UnixTime'\n    UnixTimeMillis:\n      type: integer\n      format: int64\n      readOnly: true\n      description: |\n        Precise Unix time (number of milliseconds since 00:00::00.000 1. January, 1970, UTC)\n        for system-generated time stamps\n      example: 1547403509000\n    CreatedAt:\n      description: |\n        The time at which the corresponding entity or database record has been created,\n        i.e. the first time it has been written.\n\n        Most entities/records are immutable and never updated.\n      allOf:\n        - $ref: '#/components/schemas/UnixTimeMillis'\n    TagCounts:\n      type: array\n      items:\n        type: array\n        items:\n          oneOf:\n            - type: string\n            - type: integer\n              format: int64\n      example: [[\"tag1\", 52], [\"tag2\", 0]]\n    Latitude:\n      type: number\n      format: double\n      minimum: -90.0\n      maximum: 90.0\n      example: 37.2\n      description: Geographic latitude (in degrees)\n    Longitude:\n      type: number\n      format: double\n      minimum: -180.0\n      maximum: 180.0\n      example: 120.7\n      description: Geographic longitude (in degrees)\n    CaptchaAnswer:\n      type: string\n      description: The answer to a given captcha challenge\n    CaptchaImage:\n      description: The capcha image\n      type: string\n      format: binary\n    JwtToken:\n      description: A JWT bearer token to authorize requests - it is currently valid for 24 hours.\n      properties:\n        token:\n          type: string\n          example: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYWdudXMuaGVyb2xkQHNsb3d0ZWMuZGUiLCJleHAiOjE2MDY4MjIyMTZ9.3lO245XVvqZ16FuKfBtHP7ybSsZZTng6HmPIKK6UBLI\"\n  parameters:\n    IdPath:\n      name: id\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/Id'\n    IdListPath:\n      name: ids\n      in: path\n      required: true\n      schema:\n        $ref: '#/components/schemas/IdList'\n    OptionalRevisionPath:\n      name: revision\n      in: path\n      # TODO: Set required to false when supported by OpenAPI\n      # https://github.com/OAI/OpenAPI-Specification/issues/93\n      required: true\n      schema:\n        $ref: '#/components/schemas/Revision'\n    BoundingBox:\n      name: bbox\n      in: query\n      description: Bounding Box\n      schema:\n        type: string\n        example: '42.27,-7.97,52.58,38.25'\n    OrgTagFilter:\n      name: org_tag\n      in: query\n      required: false\n      schema:\n        type: string\n      description: |\n        A single hash tag that is moderated by an organization.\n\n        Results will be filtered according to the current clearance status.\n        Unclear revisions of entries will either be removed or replaced by older,\n        already cleared revisions. Unclear revisions of entries are expected to\n        only exist temporarily for a short time frame until a newer version has\n        been cleared.\n\n        If the provided hash tag is not moderated by any organization the results\n        will not be filtered by clearance status.\n\n        Only a single tag can be specified, because filtering according to\n        clearance by multiple organizations could produce ambiguous and\n        conflicting results.\n\n        Only when used in search requests: The hash tag will be included in the\n        query as a mandatory search criteria like any other tag. Omitting this\n        parameter and instead appending the moderated hash tag as a regular tag\n        to the `tags` parameter will also return unfiltered search results, i.e.\n        current revisions of entries independent of their clearance status.\n    IdList:\n      name: ids\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/IdList'\n    TagList:\n      name: tags\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/TagList'\n    EventStartMin:\n      name: start_min\n      in: query\n      description: Filter events by `event.start` \u003e= `start_min`\n      schema:\n        $ref: '#/components/schemas/EventTime'\n    EventStartMax:\n      name: start_max\n      in: query\n      description: Filter events by `event.start` \u003c= `start_max`\n      schema:\n        $ref: '#/components/schemas/EventTime'\n    EventEndMin:\n      name: end_min\n      in: query\n      description: Filter events by `event.end` \u003e= `end_min`\n      schema:\n        $ref: '#/components/schemas/EventTime'\n    EventEndMax:\n      name: end_max\n      in: query\n      description: Filter events by `event.end` \u003c= `end_max`\n      schema:\n        $ref: '#/components/schemas/EventTime'\n    EventFilterText:\n      name: text\n      in: query\n      description: |\n        Filter events by textual terms. Hashtags starting with '#' will\n        be extracted from the given text and handled as tag filters.\n      schema:\n        type: string\n    EventCreatedBy:\n      name: created_by\n      in: query\n      description: |\n        The email address of the event creator. Requests with this parameter\n        will be rejected without a valid API token!\n      schema:\n        $ref: '#/components/schemas/Email'\n    EventTagList:\n      name: tag\n      description: Filter events by tags\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/TagList'\n    ReviewStatusList:\n      name: status\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/ReviewStatusList'\n    PaginationLimit:\n      name: limit\n      description: Maximum number of items to return or implicit/unlimited if unspecified.\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: int64\n        example: 100\n    PaginationOffset:\n      name: offset\n      description: |\n        Number of items to skip in the result list or 0 if unspecified.\n\n        The pagination offset is only evaluated in conjunction with the\n        corresponding pagination limit parameter!\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: int64\n        example: 1000\n    CaptchaToken:\n      name: captcha-token\n      description: |\n        A unique captcha token\n      in: path\n      required: true\n      schema:\n        type: string\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n    captchaCookieAuth:\n      type: apiKey\n      in: cookie\n      name: ofdb-captcha\n    jwtAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    userEmailCookieAuth:\n      type: apiKey\n      in: cookie\n      name: ofdb-user-email\n  responses:\n    ParameterError:\n      description: Parameters are missing or invalid\n    UnauthorizedError:\n      description: Access token is missing or invalid or the user has insufficient permissions\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"EventEndMin\": invalid schema:style:explode combination"
}