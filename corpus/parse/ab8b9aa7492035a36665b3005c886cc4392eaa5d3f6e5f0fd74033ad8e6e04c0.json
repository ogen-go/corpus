{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/provectus/streaming-data-platform"
		},
		"file": {
			"name": "reporting.yaml",
			"size": 0,
			"path": "reporting.yaml",
			"byteSize": 7253,
			"content": "AWSTemplateFormatVersion: 2010-09-09\nTransform: AWS::Serverless-2016-10-31\nDescription: Reporting part of Streaming Data Platform solution\nMetadata:\n  Authors:\n    Description: German Osin (gosin@provectus.com), Rustam Gimadiev (rgimadiev@provectus.com), Andrew Saushkin (asaushkin@provectus.com), Astamur Kirillin (akirillin@provectus.com)\nParameters:\n  ServicePrefix:\n    AllowedPattern: '^[-a-zA-Z0-9]{4,61}$'\n    ConstraintDescription: Prefix should be DNS compliant\n    Default: testing\n    Type: String\n  AggregationDynamoTableName:\n    Type: String\nResources:\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Policies:\n        - PolicyName: !Sub '${ServicePrefix}KinesisAccessPolicy'\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Sid: dynamo\n                Effect: Allow\n                Action:\n                  - dynamodb:BatchGetItem\n                  - dynamoDB:Query\n                  - dynamoDB:Scan\n                Resource:\n                  - '*'\n  ApiGatewayRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - apigateway.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Policies:\n        - PolicyName: !Sub '${ServicePrefix}ReportingLambdaPolicy'\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Sid: ReportingLambdaAccess\n                Effect: Allow\n                Action:\n                  - lambda:InvokeFunction\n                  - lambda:GetFunctionConfiguration\n                Resource:\n                  - !GetAtt 'ReportingLambda.Arn'\n                  - !Sub '${ReportingLambda.Arn}:*'\n  CloudWatchRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - \"apigateway.amazonaws.com\"\n            Action: \"sts:AssumeRole\"\n      Path: \"/\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\"\n\n  ApiGatewayAccount:\n    Type: AWS::ApiGateway::Account\n    Properties:\n      CloudWatchRoleArn:\n        \"Fn::GetAtt\":\n          - CloudWatchRole\n          - Arn\n  # Reporting API\n  ReportingApi:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name: !Sub '${ServicePrefix}ReportingApi'\n      Description: API used for reporting requests\n      FailOnWarnings: false\n      Body:\n        openapi: 3.0.0\n        components:\n          schemas:\n            Aggregation:\n              title: Aggregation\n              type: object\n              properties:\n                campaign_item_id:\n                  required: true\n                  type: integer\n                period:\n                  type: integer\n                clicks:\n                  type: integer\n                imps:\n                  type: integer\n                bids:\n                  type: integer\n        info:\n          title: Reporting API\n          version: '2016-03-31T18:25:32Z'\n        paths:\n          /reports/campaigns/{campaign_item_id}:\n            get:\n              parameters:\n                - in: path\n                  name: campaign_item_id\n                  schema:\n                    type: integer\n                  required: true\n              responses:\n                '200':\n                  description: 200 response\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Aggregation'\n\n              x-amazon-apigateway-integration:\n                credentials: !GetAtt 'ApiGatewayRole.Arn'\n                httpMethod: POST\n                requestParameters:\n                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''\n                responses:\n                  default:\n                    statusCode: '200'\n                type: AWS_PROXY\n                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportingLambda.Arn}/invocations'\n          /reports/campaigns/{campaign_item_id}/period:\n            get:\n              parameters:\n                - in: path\n                  name: campaign_item_id\n                  schema:\n                    type: integer\n                  required: true\n                - in: query\n                  name: timezone\n                  schema:\n                    type: string\n                - in: query\n                  name: period\n                  schema:\n                    type: string\n                - in: query\n                  name: from\n                  schema:\n                    type: integer\n                - in: query\n                  name: to\n                  schema:\n                    type: integer\n              responses:\n                '200':\n                  description: 200 response\n                  content:\n                    application/json:\n                      schema:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Aggregation'\n              x-amazon-apigateway-integration:\n                credentials: !GetAtt 'ApiGatewayRole.Arn'\n                httpMethod: POST\n                requestParameters:\n                  integration.request.header.Content-Type: '''application/x-amz-json-1.1'''\n                responses:\n                  default:\n                    statusCode: '200'\n                type: AWS_PROXY\n                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReportingLambda.Arn}/invocations'\n  ReportingLambda:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: ./fds-lambda-reports/target/fds-lambda-reports-1.0-SNAPSHOT.jar\n      FunctionName: !Sub '${ServicePrefix}ReportsHandler'\n      Environment:\n        Variables:\n          DYNAMO_TABLE: !Ref 'AggregationDynamoTableName'\n      Handler: com.provectus.fds.reports.ApiHandler\n      MemorySize: 256\n      Timeout: 180\n      Role: !GetAtt 'LambdaExecutionRole.Arn'\n      Runtime: java8\n  LogGroupApi:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub '/aws/kinesisanalytics/${ServicePrefix}ReportingApi'\n  ReportingApiGatewayStage:\n    Type: AWS::ApiGateway::Deployment\n    Properties:\n      RestApiId: !Ref 'ReportingApi'\n      StageName: !Sub '${ServicePrefix}'\n      StageDescription:\n        AccessLogSetting:\n          DestinationArn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroupApi}'\nOutputs:\n  UrlForReports:\n    Description: Root URL of the reports gateway\n    Value: !Sub 'https://${ReportingApi}.execute-api.${AWS::Region}.amazonaws.com/${ServicePrefix}'\n",
			"canonicalURL": "/github.com/provectus/streaming-data-platform@eb8bb744adb962c3e8bda06d53f60bbbbae8f8da/-/blob/reporting.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/provectus/streaming-data-platform/blob/eb8bb744adb962c3e8bda06d53f60bbbbae8f8da/reporting.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at reporting.yaml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}