{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/uwblueprint/ccbc"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "backend/typescript/swagger.yml",
			"byteSize": 28828,
			"content": "openapi: 3.0.0\r\ninfo:\r\n  version: 1.0.0\r\n  title: UW Blueprint Starter Code TypeScript API\r\n  description: An API for the TypeScript Backend of Starter Code\r\n\r\n\r\n# Authentication \r\ncomponents:\r\n  securitySchemes:\r\n    bearerAuth:            # arbitrary name for the security scheme\r\n      type: http\r\n      scheme: bearer\r\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\r\n  schemas:\r\n    PasswordLogin:\r\n      type: object\r\n      required:\r\n        - email, password\r\n      properties:\r\n        email:\r\n          type: string\r\n        password:\r\n          type: string\r\n    OAuthLogin:\r\n      type: object\r\n      required:\r\n        - idToken\r\n      properties:\r\n        idToken:\r\n          type: string\r\n    AuthorRequest: \r\n      type: object\r\n      required:\r\n        - fullName\r\n      properties:\r\n        id:\r\n          type: number\r\n        fullName:\r\n          type: string\r\n        displayName:\r\n          type: string\r\n          nullable: true\r\n        attribution:\r\n          type: string\r\n          nullable: true\r\n    AuthorResponse: \r\n      type: object\r\n      required:\r\n        - id, fullName, displayName, attribution\r\n      properties:\r\n        id:\r\n          type: number\r\n        fullName:\r\n          type: string\r\n        displayName:\r\n          type: string\r\n          nullable: true\r\n        attribution:\r\n          type: string\r\n          nullable: true\r\n    PublisherRequest:\r\n      type: object\r\n      required:\r\n        - fullName, publishYear\r\n      properties:\r\n        id: \r\n          type: number\r\n        fullName:\r\n          type: string\r\n        publishYear:\r\n          type: string\r\n    PublisherResponse:\r\n      type: object\r\n      required:\r\n        - id, fullName, publishYear\r\n      properties:\r\n        id: \r\n          type: number\r\n        fullName:\r\n          type: string\r\n        publishYear:\r\n          type: string\r\n    Format:\r\n      type: object\r\n      required:\r\n        - format, price, isbn\r\n      properties:\r\n        format:\r\n          type: string\r\n        price:\r\n          type: string\r\n        isbn: \r\n          type: string\r\n    TagRequest:\r\n      type: object\r\n      required: \r\n        - name\r\n      properties:\r\n        id:\r\n          type: number\r\n        name:\r\n          type: string\r\n    TagResponse:\r\n      type: object\r\n      required: \r\n        - id, name\r\n      properties:\r\n        id:\r\n          type: number\r\n        name:\r\n          type: string\r\n    Series:\r\n      type: object\r\n      properties:\r\n        id:\r\n          type: number\r\n        name:\r\n          type: string\r\n          nullable: true\r\n    BookRequest:\r\n      type: object\r\n      required: \r\n        - title, coverImage, formats, minAge, maxAge, authors, publishers, series\r\n      properties:\r\n        id: \r\n          type: number\r\n        title:\r\n          type: string\r\n        coverImage:\r\n          type: string\r\n        titlePrefix:\r\n          type: string\r\n          nullable: true\r\n        seriesOrder:\r\n          type: number\r\n          nullable: true\r\n        illustrator:\r\n          type: string\r\n          nullable: true\r\n        translator: \r\n          type: string\r\n          nullable: true\r\n        formats:\r\n          type: array\r\n          items: \r\n            $ref: '#/components/schemas/Format'\r\n        minAge: \r\n          type: number\r\n        maxAge: \r\n          type: number\r\n        authors: \r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/AuthorRequest'\r\n        publishers:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/PublisherRequest'\r\n        series:\r\n            $ref: '#/components/schemas/Series'\r\n    BookResponse:\r\n      type: object\r\n      required: \r\n        - id, title, coverImage, titlePrefix, seriesOrder, illustrator, translator, formats, minAge, maxAge, authors, publishers, series\r\n      properties:\r\n        id: \r\n          type: number\r\n        title:\r\n          type: string\r\n        coverImage:\r\n          type: string\r\n        titlePrefix:\r\n          type: string\r\n          nullable: true\r\n        seriesOrder:\r\n          type: number\r\n          nullable: true\r\n        illustrator:\r\n          type: string\r\n          nullable: true\r\n        translator: \r\n          type: string\r\n          nullable: true\r\n        formats:\r\n          type: array\r\n          nullable: true\r\n          items: \r\n            $ref: '#/components/schemas/Format'\r\n        minAge: \r\n          type: number\r\n        maxAge: \r\n          type: number\r\n        authors: \r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/AuthorResponse'\r\n        publishers:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/PublisherResponse'\r\n        series:\r\n            $ref: '#/components/schemas/Series'\r\n    ReviewRequestDTO:\r\n      type: object\r\n      required:\r\n          - body, byline, featured, createdBy, publishedA, books, tags \r\n      properties:\r\n        body: \r\n          type: string\r\n        byline:\r\n          type: string\r\n        featured:\r\n          type: boolean\r\n        createdBy:\r\n          type: number\r\n        books:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BookRequest'\r\n        tags:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/TagRequest'\r\n        publishedAt: \r\n          type: number\r\n          nullable: true\r\n    ReviewResponseDTO:\r\n      type: object\r\n      required:\r\n          - reviewId, body, byline, featured, createdBy, publishedAt, books, tags, updatedAt, createdAt \r\n      properties:\r\n        reviewId:\r\n          type: number\r\n        body: \r\n          type: string\r\n        byline:\r\n          type: string\r\n        featured:\r\n          type: boolean\r\n        createdBy:\r\n          type: number\r\n        publishedAt: \r\n          type: number\r\n        books:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/BookRequest'\r\n        tags:\r\n          type: array\r\n          items:\r\n            $ref: '#/components/schemas/TagRequest'\r\n        updatedAt:\r\n          type: number\r\n        createdAt:\r\n          type: number\r\npaths:\r\n  /tags:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      description: Returns a list of existing tags\r\n      responses:\r\n        '200':\r\n          description: Successfully returned a list of existing tags. \r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    id:\r\n                      type: string\r\n                    name:\r\n                      type: string\r\n        \r\n        '401':\r\n          description: Unauthorized Request.\r\n        '404':\r\n          description: Not Found.\r\n        '500':\r\n          description: Invalid Request.\r\n    post:\r\n      description: Create a new tag\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            type: object\r\n            properties:\r\n              name:\r\n                type: string\r\n      responses:\r\n        '201':\r\n          description: Successfully created a new entity\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:\r\n                  id:\r\n                    type: string\r\n                  name:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n  /tags/{id}:\r\n    delete:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            type: string\r\n          description: The tag ID\r\n      description: Delete a tag based on its ID\r\n      responses:\r\n        '204':\r\n          description: Successfully deleted tag based on ID\r\n        '401':\r\n          description: Unauthorized Request\r\n        '500':\r\n          description: Invalid ID\r\n\r\n  /entities:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Entity\r\n      description: Returns a list of entities\r\n      responses:\r\n        '200':\r\n          description: Successfully returned a list of entities\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  required:\r\n                      - intField, stringField, boolField, enumField, stringArrayField\r\n                  properties:\r\n                    intField:\r\n                      type: integer\r\n                    stringField:\r\n                      type: string\r\n                    stringArrayField:\r\n                      type: array\r\n                      items:\r\n                        type: string\r\n                    enumField:\r\n                      type: string\r\n                      enum: [\"A\", \"B\", \"C\", \"D\"]\r\n                    boolField:\r\n                      type: boolean\r\n                    fileName:\r\n                      type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Entity\r\n      description: Create a new entity\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                body:\r\n                  type: string\r\n                file:\r\n                  type: string\r\n                  format: binary\r\n      responses:\r\n        '201':\r\n          description: Successfully created a new entity\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - intField, stringField, boolField, enumField, stringArrayField\r\n                properties:\r\n                  intField:\r\n                    type: integer\r\n                  stringField:\r\n                    type: string\r\n                  stringArrayField:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n                  enumField:\r\n                    type: string\r\n                    enum: [\"A\", \"B\", \"C\", \"D\"]\r\n                  boolField:\r\n                    type: boolean\r\n                  fileName:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /entities/{id}:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The entity ID\r\n      tags:\r\n        - Entity\r\n      description: Returns an entity based on its ID\r\n      responses:\r\n        '200':\r\n          description: Successfully returns entity based on ID\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - intField, stringField, boolField, enumField, stringArrayField\r\n                properties:\r\n                  intField:\r\n                    type: integer\r\n                  stringField:\r\n                    type: string\r\n                  stringArrayField:\r\n                    type: array\r\n                    items:\r\n                      type: string\r\n                  enumField:\r\n                    type: string\r\n                    enum: [\"A\", \"B\", \"C\", \"D\"]\r\n                  boolField:\r\n                    type: boolean\r\n                  fileName:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid ID\r\n\r\n\r\n    put:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The entity ID\r\n      tags:\r\n        - Entity\r\n      description: Edit an entity based on its ID\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          multipart/form-data:\r\n            schema:\r\n              type: object\r\n              properties:\r\n                body:\r\n                  type: string\r\n                file:\r\n                  type: string\r\n                  format: binary\r\n      responses:\r\n        '200':\r\n          description: Successfully edited entity based on ID\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n    delete:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The entity ID\r\n      tags:\r\n        - Entity\r\n      description: Delete an entity based on its ID\r\n      responses:\r\n        '204':\r\n          description: Successfully deleted entity based on ID\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid ID\r\n\r\n  /entities/files/{fileName}:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: fileName\r\n          required: true\r\n          schema:\r\n            type: string\r\n          description: The name of the file (UUID) associated with an entity\r\n      tags:\r\n        - Entity\r\n      description: Returns a signed URL to the file associated with an entity\r\n      responses:\r\n        '200':\r\n          description: Successfully returns the signed URL of the file\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - fileURL\r\n                properties:\r\n                  fileURL:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid fileName\r\n\r\n  /auth/login:\r\n    post:\r\n      tags:\r\n        - Auth\r\n      description: Login user. Supply either both email and password, or an Google OAuth idToken.\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              oneOf:\r\n                - $ref: '#/components/schemas/PasswordLogin'\r\n                - $ref: '#/components/schemas/OAuthLogin'\r\n      responses:\r\n        '200':\r\n          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:   \r\n                  accessToken:\r\n                    type: string\r\n                  id:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  roleType:\r\n                    type: string\r\n        '500':\r\n          description: Invalid request\r\n  \r\n  /auth/{uid}:\r\n      get:\r\n        parameters:\r\n          - in: path\r\n            name: uid\r\n            required: true\r\n            schema:\r\n              type: string\r\n            description: The firebase user id \r\n        tags:\r\n          - Auth\r\n        description: Returns a firebase User record given the user id (uid)\r\n        responses:\r\n          '200':\r\n            description: Successfully returns the firebase user\r\n          '500':\r\n            description: Invalid uid\r\n\r\n  /auth/register:\r\n    post:\r\n      tags:\r\n        - Auth\r\n      description: Register a new user\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              required:\r\n                - email, password, firstName, lastName\r\n              properties:\r\n                email:\r\n                  type: string\r\n                password:\r\n                  type: string\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n      responses:\r\n        '200':\r\n          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:   \r\n                  accessToken:\r\n                    type: string\r\n                  id:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  roleType:\r\n                    type: string\r\n        '500':\r\n          description: Invalid request\r\n\r\n  \r\n  /auth/forgotPassword:\r\n      post:\r\n        tags:\r\n          - Auth\r\n        description: Reset password if user forgets their password\r\n        requestBody:\r\n          required: true\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                  - email\r\n                properties:\r\n                  email:\r\n                    type: string\r\n        responses:\r\n          '200':\r\n            description: Successfully sent user a reset password email to change their password\r\n          '500':\r\n            description: Invalid request\r\n\r\n\r\n  /auth/refresh:\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Auth\r\n      description: Refresh auth credentials\r\n      responses:\r\n        '200':\r\n          description:  Returns access token in response body and sets refreshToken as an httpOnly cookie\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                properties:   \r\n                  accessToken:\r\n                    type: string\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n                  \r\n                \r\n  /auth/logout/{id}:\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n      tags:\r\n        - Auth\r\n      description: Logout as user\r\n      responses:\r\n        '204':\r\n          description: Revokes all of the specified user's refresh tokens\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /auth/resetPassword/{email}:\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: email\r\n          required: true\r\n          schema:\r\n            type: string\r\n      tags:\r\n        - Auth\r\n      description: Triggers password reset for user with specified email (reset link will be emailed)\r\n      responses:\r\n        '204':\r\n          description: Successfully sent password reset email\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /auth/verifyEmail/{uid}:\r\n      post:\r\n        security:\r\n          - bearerAuth: []\r\n        parameters:\r\n          - in: path\r\n            name: uid\r\n            required: true\r\n            schema:\r\n              type: string\r\n        tags:\r\n          - Auth\r\n        description: Verifies a user with the given uid\r\n        responses:\r\n          '200':\r\n            description: Successfully verified the user\r\n          '500':\r\n            description: Invalid request\r\n\r\n            \r\n  /users:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: query\r\n          name: id\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n        - in: query\r\n          name: email\r\n          schema:\r\n            type: string\r\n          description: The user's email\r\n      tags:\r\n        - User\r\n      description: Get all users, optionally filter by a userId or email query parameter to retrieve a single user\r\n      responses:\r\n        '200':\r\n          description: Successfully returned a list of users, or a user filtered by id or email\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  required:\r\n                      - id, authId, firstName, lastName, email, roleType, active\r\n                  properties:\r\n                    id:\r\n                      type: string\r\n                    authId:\r\n                      type: string\r\n                    firstName:\r\n                      type: string\r\n                    lastName:\r\n                      type: string\r\n                    email:\r\n                      type: string\r\n                    roleType:\r\n                      type: string\r\n                      enum: [\"Admin\", \"Subscriber\", \"Author\"]\r\n                    active:\r\n                      type: boolean\r\n                    \r\n        '400':\r\n          description: Cannot query by both user and email\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n    post:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - User\r\n      description: Create new user\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              required:\r\n                - firstName, lastName, roleType, email\r\n              properties:\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n                roleType:\r\n                  type: string\r\n                  enum: [\"Admin\", \"Subscriber\", \"Author\"]\r\n                email:\r\n                  type: string\r\n      responses:\r\n        '201':\r\n          description: Successfully created a new user\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                    - id, authId, firstName, lastName, email, roleType, active\r\n                properties:\r\n                  id:\r\n                    type: string\r\n                  authId:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  roleType:\r\n                    type: string\r\n                    enum: [\"Admin\", \"Subscriber\", \"Author\"]\r\n                  active:\r\n                    type: boolean\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n          \r\n    delete:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: query\r\n          name: id\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n        - in: query\r\n          name: email\r\n          schema:\r\n            type: string\r\n          description: The user's email\r\n      tags:\r\n        - User\r\n      description: Deletes a user by userId or email, specified through a query parameter\r\n      responses:\r\n        '204':\r\n          description: Succesfully deleted user\r\n        '400':\r\n          description: Cannot query by both userId and email, invalid userId or email, userId or email is not a string, userId or email not supplied\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n                \r\n  /users/{id}:\r\n    put:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            # type: integer (postgres)\r\n            # minimum: 1\r\n            type: string\r\n          description: The user ID\r\n      tags:\r\n        - User\r\n      description: Update the user with the specified userId\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n              type: object\r\n              required:\r\n                - firstName, lastName, roleType, email\r\n              properties:\r\n                firstName:\r\n                  type: string\r\n                lastName:\r\n                  type: string\r\n                roleType:\r\n                  type: string\r\n                  enum: [\"Admin\", \"Subscriber\", \"Author\"]\r\n                email:\r\n                  type: string\r\n      responses:\r\n        '200':\r\n          description: Successfully updated user\r\n          content:\r\n            application/json:\r\n              schema:\r\n                type: object\r\n                required:\r\n                    - id, authId, firstName, lastName, email, roleType, active\r\n                properties:\r\n                  id:\r\n                    type: string\r\n                  authId:\r\n                    type: string\r\n                  firstName:\r\n                    type: string\r\n                  lastName:\r\n                    type: string\r\n                  email:\r\n                    type: string\r\n                  roleType:\r\n                    type: string\r\n                    enum: [\"Admin\", \"Subscriber\", \"Author\"]\r\n                  active:\r\n                    type: boolean\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n\r\n  /reviews:\r\n    post:\r\n      summary: Create a review\r\n      tags: \r\n        - Review\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n                $ref: '#/components/schemas/ReviewRequestDTO'\r\n      responses:\r\n        '201':\r\n          description: Successfully created a new review\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ReviewResponseDTO'\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Review\r\n      description: Returns the list of all reviews\r\n      responses:\r\n        '200':\r\n          description: Successfully returned a list of reviews\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ReviewResponseDTO'\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n  \r\n  /reviews/{reviewId}:\r\n    get:\r\n      security:\r\n        - bearerAuth: []\r\n      tags:\r\n        - Review\r\n      description: Returns the review with the specified id\r\n      responses:\r\n        '200':\r\n          description: Successfully returned the review\r\n          content:\r\n            application/json:\r\n              schema:\r\n                $ref: '#/components/schemas/ReviewResponseDTO'\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n\r\n    put:\r\n      summary: Updates a review\r\n      tags: \r\n        - Review\r\n      requestBody:\r\n        required: true\r\n        content:\r\n          application/json:\r\n            schema:\r\n                $ref: '#/components/schemas/ReviewRequestDTO'\r\n      responses:\r\n        '201':\r\n          description: Successfully updated the review\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid request\r\n    delete:\r\n      security:\r\n        - bearerAuth: []\r\n      parameters:\r\n        - in: path\r\n          name: id\r\n          required: true\r\n          schema:\r\n            type: string\r\n          description: The review ID\r\n      tags:\r\n        - Review\r\n      description: Delete a Review based on its ID\r\n      responses:\r\n        '204':\r\n          description: Successfully deleted Review based on ID\r\n        '401':\r\n          description: Unauthorized\r\n        '500':\r\n          description: Invalid ID\r\n          \r\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /reviews/{reviewId}: get: parse path: path parameter not specified: \"reviewId\""
}