{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/input-output-hk/TreasuryCoin"
		},
		"file": {
			"name": "testApi.yaml",
			"size": 0,
			"path": "examples/src/main/resources/api/testApi.yaml",
			"byteSize": 11849,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n  version: \"0.1\"\n  title: Scorex Node API example\n  description: API docs for example Scorex project.\n  contact:\n    name: Scorex framework Team\n    email: kushi@protonmail.com\n    url: https://github.com/scorexfoundation/scorex\n  license:\n    name: CC0 1.0 Universal\n    url: https://raw.githubusercontent.com/ScorexFoundation/Scorex/master/COPYING\n\ncomponents:\n  schemas:\n    # Objects\n    ModifierId:\n      description: Base58-encoded 32 byte modifier id\n      type: object\n      required:\n        - modifierId\n      properties:\n        modifierId:\n          type: string\n          example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n\n    Digest32:\n      description: Base58-encoded 32 byte digest\n      type: object\n      required:\n        - digest\n      properties:\n        digest:\n          type: string\n          example: FjX5cPuwMc2ocDLPWzt6jq29BXjvU6d5w5XURDJ6dmoM\n    Peer:\n      type: object\n      required:\n        - address\n      properties:\n        address:\n          type: string\n          example: 127.0.0.1:5673\n        name:\n          type: string\n          example: mynode\n        nonce:\n          type: integer\n          # int32\n          format: int64\n          example: 123456\n        lastSeen:\n          type: integer\n          # int32\n          format: int64\n          example: 123456\n    BlacklistedPeers:\n      type: object\n      required:\n        - addresses\n      properties:\n        addresses:\n          type: array\n          items:\n            type: string\n            example: 127.0.0.1:27272\n\n    Treasury:\n      type: object\n      properties:\n        epoch:\n          type: integer\n          example: 1\n        committeeProxyKeys:\n          type: string\n        committeeSigningKeys:\n          type: string\n        expertsSigningKeys:\n          type: string\n        votersSigningKeys:\n          type: string\n        sharedPubKey:\n          type: string\n        votersBallots:\n          type: string\n        expertsBallots:\n          type: string\n        proposals:\n          type: string\n\n\npaths:\n\n  /nodeView/openSurface:\n    get:\n      summary: Get history open surface\n      operationId: getOpenSurface\n      tags:\n        - nodeView\n      responses:\n        200:\n          description: Array of modifier ids\n          content:\n            application/json:\n              schema:\n                type: array\n                example: [\"D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\"]\n                items:\n                  type: string\n                  example: D2bXMwWN8P9nWJ9qqwZJLauAdcZHX9n6s91QQ9vK6Zu4\n\n  /nodeView/persistentModifier/{modifierId}:\n    get:\n      summary: Get history open surface\n      operationId: getPersistentModifierById\n      tags:\n        - nodeView\n      parameters:\n        - in: path\n          name: modifierId\n          required: true\n          description: ID of a requested modifier\n          schema:\n            type: string\n      responses:\n        200:\n          description: Node view modifier\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - id\n\n  /nodeView/pool:\n    get:\n      summary: Get memory pool\n      operationId: getPool\n      tags:\n        - nodeView\n      responses:\n        200:\n          description: Memory pool\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - size\n                  - transactions\n\n  /peers/all:\n    get:\n      summary: Get all known peers\n      operationId: getAllPeers\n      tags:\n        - peers\n      responses:\n        200:\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Peer'\n\n  /peers/connected:\n    get:\n      summary: Get current connected peers\n      operationId: getConnectedPeers\n      tags:\n        - peers\n      responses:\n        200:\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Peer'\n\n  /peers/connect:\n    post:\n      summary: Add address to peers list\n      operationId: connectToPeer\n      tags:\n        - peers\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: 127.0.0.1:5673\n      responses:\n        200:\n          description: Attempt to connect to the peer\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  - invalid.peer.address\n                  - invalid.json\n\n  /peers/blacklisted:\n    get:\n      summary: Get blacklisted peers\n      operationId: getBlacklistedPeers\n      tags:\n        - peers\n      responses:\n        200:\n          description: Array of peer objects\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BlacklistedPeers'\n\n  /utils/seed:\n    get:\n      summary: Get random seed with 32 bytes size\n      operationId: getRandomSeed\n      tags:\n        - utils\n      responses:\n        200:\n          description: Base58-encoded 32 byte seed\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\n\n  /utils/seed/{length}:\n    get:\n      summary: Generate random seed of specified length in bytes\n      operationId: getRandomSeedWithLength\n      tags:\n        - utils\n      parameters:\n        - in: path\n          name: length\n          required: true\n          description: seed length in bytes\n          schema:\n            type: string\n      responses:\n        200:\n          description: Base58-encoded N byte seed\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\n\n  /utils/hash/blake2b:\n    post:\n      summary: Return Blake2b hash of specified message\n      operationId: hashBlake2b\n      tags:\n        - utils\n      requestBody:\n        required: true\n        content:\n          text/plain:\n            schema:\n              type: string\n              example: 7yaASMijGEGTbttYHg1MrXnWB8EbzjJnFLSWvmNoHrXV\n      responses:\n        200:\n          description: Base58-encoded 32 byte hash\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: 6QLZkR1RdHvF7gUw7oms1XdQM6kc9kxpmyHRADN5x7uQ\n\n  /debug/info:\n    get:\n      summary: Debug info about blockchain\n      operationId: infoRoute\n      tags:\n        - debug\n      responses:\n        200:\n          description: Json with debug info or error\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /debug/myblocks:\n    get:\n      summary: Blocks generated by this node\n      operationId: myblocks\n      tags:\n        - debug\n      responses:\n        200:\n          description: Json with my blocks or error\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /debug/generators:\n    get:\n      summary: Blocks generator distribution\n      operationId: generators\n      tags:\n        - debug\n      responses:\n        200:\n          description: Json with blocks generator distribution or error\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /debug/chain:\n    get:\n      summary: Print full chain\n      operationId: chain\n      tags:\n        - debug\n      responses:\n        200:\n          description: Json with full chain or error\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /treasury/info:\n      get:\n        summary: Info about current treasury epoch\n        operationId: infoRoute\n        tags:\n          - treasury\n        responses:\n          200:\n            description: Json with treasury info or error\n            content:\n              application/json:\n                schema:\n                  type: object\n                  items:\n                    $ref: '#/components/schemas/Treasury'\n\n  /treasury/info/{epochId}:\n    get:\n      summary: Info about specific treasury epoch\n      operationId: infoRoute\n      tags:\n        - treasury\n      parameters:\n        - in: path\n          name: epochId\n          required: true\n          description: epoch id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Json with treasury info or error\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Treasury'\n\n\n  /treasury/myregistrations:\n      get:\n        summary: Information about registered roles in the current epoch\n        operationId: myRegistrationInfoRoute\n        tags:\n          - treasury\n        responses:\n          200:\n            description: Json with treasury info or error\n            content:\n              application/json:\n                schema:\n                  type: object\n                  items:\n                    $ref: '#/components/schemas/Treasury'\n\n  /treasury/proposals:\n      get:\n        summary: Information about submitted proposals in the current epoch\n        operationId: proposalsInfoRoute\n        tags:\n          - treasury\n        responses:\n          200:\n            description: Json with treasury info or error\n            content:\n              application/json:\n                schema:\n                  type: object\n                  items:\n                    $ref: '#/components/schemas/Treasury'\n\n  /treasury/votingresults/{epochId}:\n    get:\n      summary: Info about voting results in a specified treasury epoch\n      operationId: votingResultsInfoRoute\n      tags:\n        - treasury\n      parameters:\n        - in: path\n          name: epochId\n          required: true\n          description: epoch id\n          schema:\n            type: string\n      responses:\n        200:\n          description: Json with treasury info or error\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/Treasury'\n\n  /treasury/ballot:\n    post:\n      summary: Casting the ballot transaction for all proposals\n      operationId: ballotCast\n      tags:\n        - treasury\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: {\"0\": \"Yes\", \"1\": \"No\", \"2\": \"Abstain\", \"3\": \"0\", 4: \"1\"}\n\n      responses:\n        200:\n          description: Status of the ballot transaction casting\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n\n\n  /treasury/proposal:\n    post:\n      summary: Casting the proposal transactions (distinct for each proposal)\n      operationId: proposalCast\n      tags:\n        - treasury\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: {\"ProposalName\": \"1000\", \"ProposalName2\": \"2000\"}\n\n      responses:\n        200:\n          description: Status of the proposal transaction casting\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /treasury/myregistrations: get: operation \"myRegistrationInfoRoute\": responses: 200: content: application/json: schema: parse schema: object cannot contain 'items' field"
}