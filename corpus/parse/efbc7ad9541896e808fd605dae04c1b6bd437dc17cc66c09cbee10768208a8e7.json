{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikimedia/eventgate"
		},
		"file": {
			"name": "spec.test.yaml",
			"size": 0,
			"path": "test/spec.test.yaml",
			"byteSize": 10828,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.4.0\n  title: EventGate Test Spec\n  description: \u003e\n    This spec is used for testing only. It specifies the same routes\n    as the main spec.yaml, but also includes many x-ample requests\n    and responses that can only be used witih test/utils/eventgate_test_factory.js.\n  termsOfService: https://wikimediafoundation.org/wiki/Terms_of_Use\n  license:\n    name: Apache2 License\n    url: http://www.apache.org/licenses/LICENSE-2.0\n\npaths:\n  # from routes/root.js\n  /robots.txt:\n    get:\n      tags:\n        - Root\n        - Robots\n      description: Gets robots.txt\n      responses:\n        200:\n          description: Success\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-amples:\n        - title: robots.txt check\n          request: {}\n          response:\n            status: 200\n  /:\n    get:\n      tags:\n        - Root\n      description: The root service end-point\n      responses:\n        200:\n          description: Success\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-amples:\n        - title: root with no query params\n          request: {}\n          response:\n            status: 404\n        - title: spec from root\n          request:\n            query:\n              spec: true\n          response:\n            status: 200\n        - title: doc from root\n          request:\n            query:\n              doc: true\n          response:\n            status: 200\n        - title: root with wrong query param\n          request:\n            query:\n              fooo: true\n          response:\n            status: 404\n\n  # from routes/events.js\n  /v1/events:\n    post:\n      summary: Produce events\n      responses:\n        201:\n          description: Success\n        207:\n          description: Partial Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        400:\n          description: Failure\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/problem'\n\n      x-amples:\n        - title: Produce a single valid event\n          request:\n            headers:\n              content-type: application/json\n            body:\n              $schema: test/0.0.1\n              meta:\n                stream: test.event\n                id: \"5e1dd101-641c-11e8-ab6c-b083fecf1287\"\n              test: test_value\n          response:\n            status: 201\n\n        - title: Produce a single invalid event\n          request:\n            headers:\n              content-type: application/json\n            body:\n              $schema: /test/0.0.1\n              meta:\n                stream: test.event\n                id: \"5e1dd101-641c-11e8-ab6c-b083fecf1287\"\n              test: 0.01\n          response:\n            status: 400\n            body:\n              invalid:\n                - context:\n                    errorsText: \"'.test' should be string\"\n\n        - title: Produce a single event that encounters an error that should not be produced as an event error\n          request:\n            headers:\n              content-type: application/json\n            body:\n              $schema: /test/0.0.1\n              meta:\n                stream: __throw_unproduceable_error__\n                id: \"5e1dd101-641c-11e8-ab6c-b083fecf1287\"\n              test: test_value\n          response:\n            status: 500\n            body:\n              error:\n                - context:\n                    message: \"Event's topic was __throw_unproduceable_error__. This error should be handled, but not produced as an error event\"\n\n        - title: Produce a single event that encounters an error that should be produced as an event error\n          request:\n            headers:\n              content-type: application/json\n            body:\n              $schema: /test/0.0.1\n              meta:\n                stream: __throw_produceable_error__\n                id: \"5e1dd101-641c-11e8-ab6c-b083fecf1287\"\n              test: test_value\n          response:\n            status: 500\n            body:\n              error:\n                - context:\n                    message: \"Event's topic was __throw_produceable_error__. This error should be handled, and should be produced as an error event\"\n\n        - title: Produce a single event that encounters an EventSchemaLoadError\n          request:\n            headers:\n              content-type: application/json\n            body:\n              $schema: bad/uri/right/here@@@\n              meta:\n                stream: test.event\n                id: \"5e1dd101-641c-11e8-ab6c-b083fecf1287\"\n              test: test_value\n          response:\n            status: 500\n            body:\n              error:\n                - context:\n                    message: \"Failed loading schema at bad/uri/right/here@@@\"\n\n\n        - title: Produce a batch valid events\n          request:\n            headers:\n              content-type: application/json\n            body:\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1280\"\n                test: test_value0\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n          response:\n            status: 201\n\n        - title: Produce batch events, one valid, one invalid\n          request:\n            headers:\n              content-type: application/json\n            body:\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1280\"\n                test: 12345\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n          response:\n            status: 207\n\n        - title: Produce batch events, one valid, one invalid, one error\n          request:\n            headers:\n              content-type: application/json\n            body:\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1280\"\n                test: 12345\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n              - $schema: /test/0.0.1\n                meta:\n                  stream: __throw_unproduceable_error__\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n          response:\n            status: 207\n            body:\n              invalid:\n                - context:\n                    errorsText: \"'.test' should be string\"\n              error:\n                - context:\n                    message: \"Event's topic was __throw_unproduceable_error__. This error should be handled, but not produced as an error event\"\n\n        - title: Produce batch events, all invalid\n          request:\n            headers:\n              content-type: application/json\n            body:\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1280\"\n                test: 12345\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n                test_default: 67890\n          response:\n            status: 400\n            body:\n              invalid:\n                - context:\n                    errorsText: \"'.test' should be string\"\n                - context:\n                    errorsText: \"'.test_default' should be string\"\n\n        - title: Produce batch events, all errored\n          request:\n            headers:\n              content-type: application/json\n            body:\n              - $schema: /test/0.0.1\n                meta:\n                  stream: __throw_unproduceable_error__\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1280\"\n                test: test_value\n              - $schema: /test/0.0.1\n                meta:\n                  stream: __throw_unproduceable_error__\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n                test_default: test_value\n          response:\n            status: 500\n            body:\n              error:\n                - context:\n                    message: \"Event's topic was __throw_unproduceable_error__. This error should be handled, but not produced as an error event\"\n                - context:\n                    message: \"Event's topic was __throw_unproduceable_error__. This error should be handled, but not produced as an error event\"\n\n        - title: Produce batch events, all invalid, fire and forget\n          request:\n            query:\n              hasty: true\n            headers:\n              content-type: application/json\n            body:\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1280\"\n                test: 12345\n              - $schema: /test/0.0.1\n                meta:\n                  stream: test.event\n                  id: \"5e1dd101-641c-11e8-ab6c-b083fecf1281\"\n                test: test_value1\n                test_default: 67890\n          response:\n            status: 202\n            body: \"\"\n\n        - title: Produce with an empty body\n          request:\n            headers:\n              content-type: application/json\n          response:\n            status: 400\n\n  # from routes/events.js\n  /v1/_test/events:\n    get:\n      description: Produce the configured test_events\n      responses:\n        201:\n          description: Success\n        207:\n          description: Partial Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        400:\n          description: Failure\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/problem'\n\n      x-amples:\n        - title: Produce a single valid test event\n          request:\n            headers:\n              content-type: application/json\n          response:\n            status: 201\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /: get: responses: default: content: application/json: schema: parse schema: resolve \"#/components/schemas/problem\": find schema: resolve \"#/components/schemas/problem\": can't find value for \"components/schemas/problem\""
}