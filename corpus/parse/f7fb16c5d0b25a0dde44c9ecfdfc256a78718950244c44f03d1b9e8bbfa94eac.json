{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SecureIdentityAlliance/osia"
		},
		"file": {
			"name": "abis.yaml",
			"size": 0,
			"path": "src/doc/yaml/abis.yaml",
			"byteSize": 99101,
			"content": "\n# (c) Secure Identity Alliance\n\nopenapi: 3.0.0\ninfo:\n  description:  |\n    The OSIA ABIS Interface.\n    \n    Change log:\n\n    - 1.5.1:\n      - Add missing values in BiometricSubType\n    - 1.5.0:\n      - Add service to update only the galleries of an encounter\n      - Change date to date-time\n      - Mark the encounterId as readOnly, add it to biometricData\n      - Add mimeType, template, templateRef, templateFormat to biometricData\n      - rename scoreList to scores in identification result\n      - Do not mix fixed properties and additional properties, use a subobject for the additional properties\n      - Add quality, qualityFormat, algorithm, vendor fields to biometricData\n      - The value 'ALL' is used in searches to represent a search against all the galleries.\n      - New service identifyFromEncounterId (identify using a single encounter present in the database)\n      - Use the taskId in the callbacks\n      - New service moveEncounter\n      - Mark some fields (ID, etc.) as readOnly\n    - 1.4.0:\n      - Add an entity (ExtendablePersonIds) used in the response of create \u0026 update operations\n      - Make 202 response more standard: returns an object with at least a taskId, additional properties allowed\n      - Add an entity (PersonIds) to factorize definition of the pair (personId, encounterId)\n      - Allow additional properties in object Candidate.\n      - Change path for updateEncounterStatus operation (added /v1)\n      - Clarify priority value\n      - Add error structure on 400 errors\n      - Add signature in biometricType\n      - Force additionalProperties to false when extension is not allowed\n      - Pagination when accessing gallery content\n      - Add fields on BiometricData: instance, metadata, comment, missing\n    - 1.3.0:\n      - Addition of security\n    - 1.2.2:\n      - Allow free string for template \u0026 quality format\n      - Allow additional properties along with the score\n    - 1.2.1:\n      - Change operation ID\n    - 1.2.0:\n      - Add service 'merge'\n      - Add a status in the encounter entity\n    - 1.1.0:\n      - Make transactionId mandatory\n      - Add 'encounters' in the path to reduce ambiguities\n      - Rename operationId to a consistent create/read/update/delete scheme\n      - Move gallery in the encounter entity\n      - Add ability to return errors in the callback\n      - Make the gallery mandatory\n      - Rename 'subject' to 'person'\n      - Remove array of encounters in request body for insert and update\n      - Add service 'readAllEncounters'\n    - 1.0.0: Initial version\n\n  version: 1.5.1\n  title: OSIA ABIS Interface\n  license:\n    name: SIA\n    url: \"https://raw.githubusercontent.com/SecureIdentityAlliance/osia/master/LICENSE\"\ntags:\n  - name: CRUD\n  - name: Search\n  - name: Gallery\nservers:\n  - url: https://abis.com/\npaths:\n  /v1/persons:\n    post:\n      tags:\n        - CRUD\n      summary: Create one encounter and generate ID for both the person and the encounter\n      operationId: createEncounterNoIds\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: algorithm\n          in: query\n          description: Hint about the algorithm to be used\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Encounter'\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendablePersonIds'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Operation not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        createResponse:\n          '${request.query.callback}':\n            post:\n              summary: Create one encounter and generate both IDs response callback\n              operationId: createEncounterNoIdsCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the creation\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/ExtendablePersonIds'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/encounters:\n    post:\n      tags:\n        - CRUD\n      summary: Create one encounter and generate its ID\n      description: |\n        Create one encounter in the person identified by his/her id.\n        If the person does not yet exist, it is created automatically.\n      operationId: createEncounterNoId\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: algorithm\n          in: query\n          description: Hint about the algorithm to be used\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Encounter'\n      responses:\n        '200':\n          description: creation successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendablePersonIds'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Creation not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        createResponse:\n          '${request.query.callback}':\n            post:\n              summary: Create one encounter and generate its ID response callback\n              operationId: createEncounterNoIdCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the creation\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/ExtendablePersonIds'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - CRUD\n      summary: Read all encounters of one person\n      operationId: readAllEncounters\n      security:\n        - BearerAuth: [abis.encounter.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Encounter'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        readAllResponse:\n          '${request.query.callback}':\n            post:\n              summary: Read all encounters response callback\n              operationId: readAllEncountersCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Encounter data\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Encounter'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n                        \n  /v1/persons/{personId}/encounters/{encounterId}:\n    post:\n      tags:\n        - CRUD\n      summary: Create one encounter\n      description: |\n        Create one encounter in the person identified by his/her id.\n        If the person does not yet exist, it is created automatically.\n        \n        If the encounter already exists, an error 403 is returned.\n      operationId: createEncounter\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: algorithm\n          in: query\n          description: Hint about the algorithm to be used\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Encounter'\n      responses:\n        '200':\n          description: Creation successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendablePersonIds'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Creation not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        createResponse:\n          '${request.query.callback}':\n            post:\n              summary: Create one encounter response callback\n              operationId: createEncounterCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the creation\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/ExtendablePersonIds'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n    get:\n      tags:\n        - CRUD\n      summary: Read one encounter\n      operationId: readEncounter\n      security:\n        - BearerAuth: [abis.encounter.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Read successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Encounter'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        readResponse:\n          '${request.query.callback}':\n            post:\n              summary: Read one encounter response callback\n              operationId: readEncounterCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Encounter data\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/Encounter'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n    put:\n      tags:\n        - CRUD\n      summary: Update one encounter\n      operationId: updateEncounter\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: algorithm\n          in: query\n          description: Hint about the algorithm to be used\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Encounter'\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExtendablePersonIds'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Update successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Update not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        updateResponse:\n          '${request.query.callback}':\n            post:\n              summary: Update one encounter response callback\n              operationId: updateEncounterCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the update\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/ExtendablePersonIds'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n    delete:\n      tags:\n        - CRUD\n      summary: Delete one encounter\n      description: |\n        Delete one encounter from the person identified by his/her id.\n        If this is the last encounter in the person, the person is also deleted.\n      operationId: deleteEncounter\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Delete successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Delete not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        deleteResponse:\n          '${request.query.callback}':\n            post:\n              summary: Delete one encounter response callback\n              operationId: deleteEncounterCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the deletion\n                content:\n                  application/json:\n                    schema:\n                      type: string\n                      enum: [OK]\n                      example: '\"OK\"'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personIdTarget}/merge/{personIdSource}:\n    post:\n      tags:\n        - CRUD\n      summary: Merge two sets of encounters\n      description: |\n        Merge two sets of encounters into a single set. Merging a set of *N* encounters with a set of *M* encounters\n        will result in a single set of *N+M* encounters. Encounter ID are preserved and in case of duplicates\n        an error is returned and no changes are done.\n      operationId: mergeEncounter\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personIdTarget\n          in: path\n          description: the id of the person receiving new encounters\n          required: true\n          schema:\n            type: string\n        - name: personIdSource\n          in: path\n          description: the id of the person giving the encounters\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Merge successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Merge not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        mergeResponse:\n          '${request.query.callback}':\n            post:\n              summary: Merge two persons response callback\n              operationId: mergeEncounterCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the merge\n                content:\n                  application/json:\n                    schema:\n                      type: string\n                      enum: [OK]\n                      example: '\"OK\"'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personIdTarget}/move/{personIdSource}/encounters/{encounterId}:\n    post:\n      tags:\n        - CRUD\n      summary: Move one encounter\n      description: |\n        Move one encounter from the source person to the target person.\n        Encounter ID is preserved and in case of duplicate an error is returned and no changes are done.\n      operationId: moveEncounter\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personIdTarget\n          in: path\n          description: the id of the person receiving the encounter\n          required: true\n          schema:\n            type: string\n        - name: personIdSource\n          in: path\n          description: the id of the person giving the encounter\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Move successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Move not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        mergeResponse:\n          '${request.query.callback}':\n            post:\n              summary: Merge two persons response callback\n              operationId: moveEncounterCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the move\n                content:\n                  application/json:\n                    schema:\n                      type: string\n                      enum: [OK]\n                      example: '\"OK\"'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/encounters/{encounterId}/status:\n    put:\n      tags:\n        - CRUD\n      summary: Update status of an encounter\n      operationId: updateEncounterStatus\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: New status of encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n      responses:\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Status has been updated\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Encounter status update not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        updateEncounterStatusResponse:\n          '${request.query.callback}':\n            post:\n              summary: Update encounter status response callback\n              operationId: updateEncounterStatusCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the status update\n                content:\n                  application/json:\n                    schema:\n                      type: string\n                      enum: [OK]\n                      example: '\"OK\"'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/encounters/{encounterId}/galleries:\n    put:\n      tags:\n        - CRUD\n      summary: Update the galleries of an encounter\n      description: |\n        This service is used to move one encounter from one gallery\n        to another one without updating the full encounter, which maybe\n        resource consuming in a biometric system.\n      operationId: updateEncounterGalleries\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              description: List of the new galleries for this encounter.\n              items:\n                type: string\n              example: [VIP, CRIMINAL]\n      responses:\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Galleries have been updated\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Encounter galleries update not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        updateEncounterGalleriesResponse:\n          '${request.query.callback}':\n            post:\n              summary: Update encounter galleries response callback\n              operationId: updateEncounterGalleriesCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the gallery update\n                content:\n                  application/json:\n                    schema:\n                      type: string\n                      enum: [OK]\n                      example: '\"OK\"'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}/encounters/{encounterId}/templates:\n    get:\n      tags:\n        - CRUD\n      summary: Read biometrics templates\n      operationId: readTemplate\n      security:\n        - BearerAuth: [abis.encounter.read]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: biometricType\n          in: query\n          description: the type of biometrics to return\n          required: false\n          schema:\n            $ref: '#/components/schemas/BiometricType'\n        - name: biometricSubType\n          in: query\n          description: the sub-type of biometrics to return\n          required: false\n          schema:\n            $ref: '#/components/schemas/BiometricSubType'\n        - name: instance\n          in: query\n          description: Used to separate two distincts biometric items of the same type and subtype\n          required: false\n          schema:\n            type: string\n        - name: templateFormat\n          in: query\n          description: the format of the template to return\n          required: false\n          schema:\n            $ref: '#/components/schemas/TemplateFormat'\n        - name: qualityFormat\n          in: query\n          description: the format of the quality to return\n          required: false\n          schema:\n            $ref: '#/components/schemas/QualityFormat'\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                description: |\n                  An array of computed data (template \u0026 quality) found in the system.\n                  If a record exists but has no computed value, nothing is returned.\n                  An empty array is possible if the biometrics exist but have not been encoded and analyzed.\n                type: array\n                items:\n                  $ref: '#/components/schemas/BiometricComputedData'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record or unkown biometrics\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        readTemplateResponse:\n          '${request.query.callback}':\n            post:\n              summary: Read biometrics templates response callback\n              operationId: readTemplateCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Biometric computed data\n                content:\n                  application/json:\n                    schema:\n                      description: |\n                        An array of computed data (template \u0026 quality) found in the system.\n                        If a record exists but has no computed value, nothing is returned.\n                        An empty array is possible if the biometrics exist but have not been encoded and analyzed.\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/BiometricComputedData'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/persons/{personId}:\n    delete:\n      tags:\n        - CRUD\n      summary: Delete a person and all its encounters\n      operationId: deleteAll\n      security:\n        - BearerAuth: [abis.encounter.write]\n      parameters:\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '204':\n          description: Delete successful\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Delete not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        deleteResponse:\n          '${request.query.callback}':\n            post:\n              summary: Delete a person response callback\n              operationId: deleteAllCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the deletion\n                content:\n                  application/json:\n                    schema:\n                      type: string\n                      enum: [OK]\n                      example: '\"OK\"'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/identify/{galleryId}:\n    post:\n      tags:\n        - Search\n      summary: Biometric identification\n      description: Identification based on biometric data from one gallery\n      operationId: identify\n      security:\n        - BearerAuth: [abis.identify]\n      parameters:\n        - name: galleryId\n          in: path\n          description: the id of the gallery. **The special value 'ALL' is used when the search is done against all galleries**\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: maxNbCand\n          in: query\n          description: the maximum number of candidates\n          required: false\n          schema:\n            type: integer\n        - name: threshold\n          in: query\n          description: the algorithm threshold\n          required: false\n          schema:\n            type: number\n        - name: accuracyLevel\n          in: query\n          description: the accuracy level expected for this request\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - filter\n                - biometricData\n              properties:\n                filter:\n                  $ref:  '#/components/schemas/Filter'\n                biometricData:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/BiometricData'\n              additionalProperties: false\n      responses:\n        '200':\n          description: Request executed. Identification result is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Candidate'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Identification not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        identifyResponse:\n          '${request.query.callback}':\n            post:\n              summary: Biometric identification response callback\n              operationId: identifyCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the identification (list of candidate)\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Candidate'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/identify/{galleryId}/{personId}:\n    post:\n      tags:\n        - Search\n      summary: Biometric identification based on existing data\n      description: Identification based on existing data from one gallery\n      operationId: identifyFromId\n      security:\n        - BearerAuth: [abis.identify]\n      parameters:\n        - name: galleryId\n          in: path\n          description: the id of the gallery. **The special value 'ALL' is used when the search is done against all galleries**\n          required: true\n          schema:\n            type: string\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: maxNbCand\n          in: query\n          description: the maximum number of candidates\n          required: false\n          schema:\n            type: integer\n        - name: threshold\n          in: query\n          description: the algorithm threshold\n          required: false\n          schema:\n            type: number\n        - name: accuracyLevel\n          in: query\n          description: the accuracy level expected for this request\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref:  '#/components/schemas/Filter'\n      responses:\n        '200':\n          description: Request executed. Identification result is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Candidate'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Identification not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        identifyResponse:\n          '${request.query.callback}':\n            post:\n              summary: Biometric identification based on existing data response callback\n              operationId: identifyFromIdCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the identification (list of candidate)\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Candidate'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/identify/{galleryId}/{personId}/encounters/{encounterId}:\n    post:\n      tags:\n        - Search\n      summary: Biometric identification based on an existing encounter\n      description: Identification based on an existing encounter from one gallery\n      operationId: identifyFromEncounterId\n      security:\n        - BearerAuth: [abis.identify]\n      parameters:\n        - name: galleryId\n          in: path\n          description: the id of the gallery. **The special value 'ALL' is used when the search is done against all galleries**\n          required: true\n          schema:\n            type: string\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: encounterId\n          in: path\n          description: the id of the encounter\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: maxNbCand\n          in: query\n          description: the maximum number of candidates\n          required: false\n          schema:\n            type: integer\n        - name: threshold\n          in: query\n          description: the algorithm threshold\n          required: false\n          schema:\n            type: number\n        - name: accuracyLevel\n          in: query\n          description: the accuracy level expected for this request\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref:  '#/components/schemas/Filter'\n      responses:\n        '200':\n          description: Request executed. Identification result is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Candidate'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Identification not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        identifyResponse:\n          '${request.query.callback}':\n            post:\n              summary: Biometric identification based on existing data response callback\n              operationId: identifyFromEncounterIdCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the identification (list of candidate)\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/Candidate'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/verify/{galleryId}/{personId}:\n    post:\n      tags:\n        - Search\n      summary: Biometric verification\n      description: Verification of one set of biometric data and a record in the system\n      operationId: verifyFromId\n      security:\n        - BearerAuth: [abis.verify]\n      parameters:\n        - name: galleryId\n          in: path\n          description: the id of the gallery. **The special value 'ALL' is used when the verification is done against all galleries**\n          required: true\n          schema:\n            type: string\n        - name: personId\n          in: path\n          description: the id of the person\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: threshold\n          in: query\n          description: the algorithm threshold\n          required: false\n          schema:\n            type: number\n        - name: accuracyLevel\n          in: query\n          description: the accuracy level expected for this request\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - biometricData\n              properties:\n                biometricData:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/BiometricData'\n              additionalProperties: false\n      responses:\n        '200':\n          description: Verification execution successful\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - decision\n                properties:\n                  decision:\n                    type: boolean\n                  scores:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ScoreDetail'\n                additionalProperties: false\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Unknown record\n        '403':\n          description: Verification not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        verifyResponse:\n          '${request.query.callback}':\n            post:\n              summary: Biometric verification response callback\n              operationId: verifyFromIdCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the verification\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      required:\n                        - decision\n                      properties:\n                        decision:\n                          type: boolean\n                        scores:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/ScoreDetail'\n                      additionalProperties: false\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/verify:\n    post:\n      tags:\n        - Search\n      summary: Biometric verification with two sets of data\n      description: Verification of two sets of biometric data\n      operationId: verifyFromBio\n      security:\n        - BearerAuth: [abis.verify]\n      parameters:\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: threshold\n          in: query\n          description: the algorithm threshold\n          required: false\n          schema:\n            type: number\n        - name: accuracyLevel\n          in: query\n          description: the accuracy level expected for this request\n          required: false\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - biometricData1\n                - biometricData2\n              properties:\n                biometricData1:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/BiometricData'\n                biometricData2:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/BiometricData'\n              additionalProperties: false\n      responses:\n        '200':\n          description: Verification execution successful\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - decision\n                properties:\n                  decision:\n                    type: boolean\n                  scores:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ScoreDetail'\n                additionalProperties: false\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Verification not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        verifyResponse:\n          '${request.query.callback}':\n            post:\n              summary: Biometric verification with two sets of data response callback\n              operationId: verifyFromBioCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: Result of the verification\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      required:\n                        - decision\n                      properties:\n                        decision:\n                          type: boolean\n                        scores:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/ScoreDetail'\n                      additionalProperties: false\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/galleries:\n    get:\n      tags:\n        - Gallery\n      summary: Read the ID of all the galleries\n      operationId: readGalleries\n      security:\n        - BearerAuth: [abis.gallery.read]\n      parameters:\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        readGalleriesResponse:\n          '${request.query.callback}':\n            post:\n              summary: Read the ID of all the galleries response callback\n              operationId: readGalleriesCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: List of gallery IDs\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        type: string\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\n  /v1/galleries/{galleryId}:\n    get:\n      tags:\n        - Gallery\n      summary: Read the content of one gallery\n      operationId: readGalleryContent\n      security:\n        - BearerAuth: [abis.gallery.read]\n      parameters:\n        - name: galleryId\n          in: path\n          description: the id of the gallery.\n          required: true\n          schema:\n            type: string\n        - name: transactionId\n          in: query\n          description: The id of the transaction\n          required: true\n          schema:\n            type: string\n        - name: callback\n          in: query\n          description: the callback address, where the result will be sent when available\n          required: false\n          schema:\n            type: string\n            format: uri\n            example: \"http://client.com/callback\"\n        - name: priority\n          in: query\n          description: \"the request priority (0: lowest priority; 9: highest priority)\"\n          required: false\n          schema:\n            type: integer\n        - name: offset\n          in: query\n          description: The offset of the query (first item of the response)\n          required: false\n          schema:\n            type: integer\n            default: 0\n        - name: limit\n          in: query\n          description: The maximum number of items to return\n          required: false\n          schema:\n            type: integer\n            default: 1000\n      responses:\n        '200':\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PersonIds'\n        '202':\n          description: |\n            Request received successfully and correct, result will be returned through the callback.\n            An internal task ID is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskId'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Read not allowed\n        '404':\n          description: Unknown record\n        '500':\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n      callbacks:\n        readGalleryContentResponse:\n          '${request.query.callback}':\n            post:\n              summary: Read the content of one gallery response callback\n              operationId: readGalleryContentCB\n              parameters:\n                # query parameters\n                - name: transactionId\n                  in: query\n                  required: true\n                  description: The id of the transaction\n                  schema:\n                    type: string\n                - name: taskId\n                  in: query\n                  required: true\n                  description: The id of the task, used to match this response with the request\n                  schema:\n                    type: string\n              requestBody:\n                required: true\n                description: List of encounters IDs\n                content:\n                  application/json:\n                    schema:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/PersonIds'\n                  application/error+json:\n                    schema:\n                      $ref: '#/components/schemas/Error'\n              responses:\n                '204':\n                  description: Response is received and accepted.\n                '403':\n                  description: Forbidden access to the service\n                '500':\n                  description: Unexpected error\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/Error'\n\ncomponents:\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          description: Error code\n          type: integer\n          format: int32\n        message:\n          description: Error message\n          type: string\n      additionalProperties: false\n    Encounter:\n      type: object\n      required:\n        - status\n        - encounterId\n        - encounterType\n        - biometricData\n      properties:\n        encounterId:\n          type: string\n          readOnly: true\n        status:\n          type: string\n          enum: [ACTIVE, INACTIVE]\n        encounterType:\n          type: string\n          description: Type of the encounter\n        galleries:\n          type: array\n          description: The list of galleries for this object.\n          items:\n            type: string\n          minItems: 1\n          uniqueItems: true\n        clientData:\n          type: string\n          format: byte\n        contextualData:\n          $ref: '#/components/schemas/ContextualData'\n        biographicData:\n          $ref: '#/components/schemas/BiographicData'\n        biometricData:\n          type: array\n          items:\n            $ref: '#/components/schemas/BiometricData'\n      additionalProperties: false\n    ContextualData:\n      type: object\n      additionalProperties: true\n      example:\n        enrollmentDate: \"2019-01-11\"\n    BiographicData:\n      type: object\n      description: The set of biographic data.\n      additionalProperties: true\n      example:\n        dateOfBirth: \"1985-11-30\"\n        gender: M\n        nationality: FRA\n    BiometricData:\n      type: object\n      required:\n        - biometricType\n      properties:\n        biometricType:\n          $ref: '#/components/schemas/BiometricType'\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        instance:\n          type: string\n          description: Used to separate two distincts biometric items of the same type and subtype\n        encounterId:\n          type: string\n          description: the id of the encounter owner of this biometric\n          readOnly: true\n        image:\n          type: string\n          format: byte\n          description: Base64-encoded image\n        imageRef:\n          type: string\n          format: uri\n          description: URI to an image\n          example: \"http://imageserver.com/image?id=00003\"\n        captureDate:\n          type: string\n          format: date-time\n          example: \"2019-05-21T12:00:00Z\"\n        captureDevice:\n          type: string\n          description: A string identifying the device used to capture the biometric\n        impressionType:\n          $ref: '#/components/schemas/ImpressionType'\n        width:\n          type: integer\n          description: the width of the image\n        height:\n          type: integer\n          description: the height of the image\n        bitdepth:\n          type: integer\n        mimeType:\n          type: string\n          description: the nature and format of the image. The mime type definitions should be in compliance with RFC 6838.\n        resolution:\n          type: integer\n          description: the image resolution (in DPI)\n        compression:\n          $ref: '#/components/schemas/CompressionType'\n        missing:\n          description: Optional properties indicating if a part of the biometric data is missing\n          type: array\n          items:\n            $ref: '#/components/schemas/MissingType'\n        metadata:\n          type: string\n          description: An optional string used to convey information vendor-specific\n        comment:\n          type: string\n          description: A comment about the biometric data\n        template:\n          type: string\n          format: byte\n          description: Base64-encoded template\n        templateRef:\n          type: string\n          format: uri\n          description: URI to the template when it is managed in a dedicated data server\n          example: \"http://dataserver.com/template?id=00014\"\n        templateFormat:\n          $ref: '#/components/schemas/TemplateFormat'\n        quality:\n          type: integer\n          format: int64\n          description: Quality, as a number, of the biometric\n        qualityFormat:\n          $ref: '#/components/schemas/QualityFormat'\n        algorithm:\n          type: string\n        vendor:\n          type: string\n      additionalProperties: false\n    TemplateFormat:\n      type: string\n      description: |\n        Format of the template.\n        One of ISO_19794_2, ISO_19794_2_NS, ISO_19794_2_CS, ISO_19794_2_2011, ANSI_378_2009 or ANSI_378.\n        Can be extended to include additional proprietary template format\n    MissingType:\n      type: object\n      properties:\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        presence:\n          type: string\n          enum: [BANDAGED, AMPUTATED, DAMAGED]\n      additionalProperties: false\n    BiometricComputedData:\n      type: object\n      required:\n        - biometricType\n        - template\n      properties:\n        biometricType:\n          $ref: '#/components/schemas/BiometricType'\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        instance:\n          type: string\n          description: Used to separate two distincts biometric items of the same type and subtype\n        template:\n          type: string\n          format: byte\n          description: Base64-encoded template\n        templateFormat:\n          $ref: '#/components/schemas/TemplateFormat'\n        quality:\n          type: integer\n          format: int64\n          description: Quality, as a number, of the biometric\n        qualityFormat:\n          $ref: '#/components/schemas/QualityFormat'\n        algorithm:\n          type: string\n        vendor:\n          type: string\n      additionalProperties: false\n    QualityFormat:\n      type: string\n      description: |\n        Format of the quality.\n        One of ISO_19794, NFIQ, or NFIQ2.\n        Can be extended to include additional proprietary quality format\n    CompressionType:\n      type: string\n      enum: [NONE, WSQ, JPEG, JPEG2000, PNG]\n      example: WSQ\n    ImpressionType:\n      type: string\n      enum:\n        - LIVE_SCAN_PLAIN\n        - LIVE_SCAN_ROLLED\n        - NONLIVE_SCAN_PLAIN\n        - NONLIVE_SCAN_ROLLED\n        - LATENT_IMPRESSION\n        - LATENT_TRACING\n        - LATENT_PHOTO\n        - LATENT_LIFT\n        - LIVE_SCAN_SWIPE\n        - LIVE_SCAN_VERTICAL_ROLL\n        - LIVE_SCAN_PALM\n        - NONLIVE_SCAN_PALM\n        - LATENT_PALM_IMPRESSION\n        - LATENT_PALM_TRACING\n        - LATENT_PALM_PHOTO\n        - LATENT_PALM_LIFT\n        - LIVE_SCAN_OPTICAL_CONTACTLESS_PLAIN\n        - OTHER\n        - UNKNOWN\n    BiometricType:\n      type: string\n      enum:\n        - FACE\n        - FINGER\n        - IRIS\n        - SIGNATURE\n        - UNKNOWN\n      example: FINGER\n    BiometricSubType:\n      type: string\n      enum:\n        - UNKNOWN\n        - RIGHT_THUMB\n        - RIGHT_INDEX\n        - RIGHT_MIDDLE\n        - RIGHT_RING\n        - RIGHT_LITTLE\n        - LEFT_THUMB\n        - LEFT_INDEX\n        - LEFT_MIDDLE\n        - LEFT_RING\n        - LEFT_LITTLE\n        - PLAIN_RIGHT_FOUR_FINGERS\n        - PLAIN_LEFT_FOUR_FINGERS\n        - PLAIN_THUMBS\n        \n        - UNKNOWN_PALM\n        - RIGHT_FULL_PALM\n        - RIGHT_WRITERS_PALM\n        - LEFT_FULL_PALM\n        - LEFT_WRITERS_PALM\n        - RIGHT_LOWER_PALM\n        - RIGHT_UPPER_PALM\n        - LEFT_LOWER_PALM\n        - LEFT_UPPER_PALM\n        - RIGHT_OTHER\n        - LEFT_OTHER\n        - RIGHT_INTERDIGITAL\n        - RIGHT_THENAR\n        - RIGHT_HYPOTHENAR\n        - LEFT_INTERDIGITAL\n        - LEFT_THENAR\n        - LEFT_HYPOTHENAR\n        \n        - RIGHT_INDEX_AND_MIDDLE\n        - RIGHT_MIDDLE_AND_RING\n        - RIGHT_RING_AND_LITTLE\n        - LEFT_INDEX_AND_MIDDLE\n        - LEFT_MIDDLE_AND_RING\n        - LEFT_RING_AND_LITTLE\n        - RIGHT_INDEX_AND_LEFT_INDEX\n        - RIGHT_INDEX_AND_MIDDLE_AND_RING\n        - RIGHT_MIDDLE_AND_RING_AND_LITTLE\n        - LEFT_INDEX_AND_MIDDLE_AND_RING\n        - LEFT_MIDDLE_AND_RING_AND_LITTLE\n        \n        - EYE_UNDEF\n        - EYE_RIGHT\n        - EYE_LEFT\n        - EYE_BOTH\n        \n        - PORTRAIT\n        - LEFT_PROFILE\n        - RIGHT_PROFILE\n      example: RIGHT_INDEX\n    Filter:\n      type: object\n      additionalProperties: true\n      example:\n        dateOfBirthMin: \"1980-01-01\"\n        dateOfBirthMax: \"2019-12-31\"\n    Candidate:\n      type: object\n      description: |\n        Identification of a candidate result of a biometric search.\n\n        This structure can be extended by vendors able to include additional information\n        to the three mandatory properties.\n      required:\n        - personId\n        - rank\n        - score\n      properties:\n        personId:\n          type: string\n          description: the identifier of the person\n        rank:\n          type: integer\n          format: int32\n          description: \u003e-\n            the rank of the candidate in relation to other candidates for the\n            same biometric identification operation\n        score:\n          type: number\n          format: float\n          description: \u003e-\n            the score of the candidate in relation to other candidates for\n            the same biometric identification operation\n          example: 3500\n        scores:\n          type: array\n          description: \u003e-\n            a list of comparison score(s) and optionally the type and subtype of\n            the relating biometric\n          items:\n            $ref: '#/components/schemas/ScoreDetail'\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n    ScoreDetail:\n      description: |\n        Scoring information calculated after a biometric search.\n        It includes at least the score (a float) and optionnally the encounterId,\n        type and subtype of the matching bometric item.\n        It can also be extended with proprietary information to better describe\n        the matching result (for instance: rotation needed to align\n        the probe and the candidate)\n      type: object\n      required:\n        - score\n      properties:\n        score:\n          type: number\n          format: float\n          description: the score\n          example: 3500\n        encounterId:\n          type: string\n        biometricType:\n          $ref: '#/components/schemas/BiometricType'\n        biometricSubType:\n          $ref: '#/components/schemas/BiometricSubType'\n        instance:\n          type: string\n          description: Used to separate two distincts biometric items of the same type and subtype\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n    PersonIds:\n      type: object\n      required:\n        - personId\n        - encounterId\n      properties:\n        personId:\n          type: string\n        encounterId:\n          type: string\n      additionalProperties: false\n    ExtendablePersonIds:\n      description: |\n        The IDs of a record (personId and encounterId) extendable with additional\n        properties if needed by an implementation.\n\n        This is used for the response of insert \u0026 update operations, when additional\n        properties (such as: quality evaluation, proof of record, etc.) might be returned\n        by the server.\n      required:\n        - personId\n        - encounterId\n      properties:\n        personId:\n          type: string\n        encounterId:\n          type: string\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n    TaskId:\n      description: |\n        Information about the asynchronous result. Only the taskId is mandatory but\n        the implementation is free to return additional details such as: expected\n        duration, URL to monitor the task, etc.\n      type: object\n      required:\n        - taskId\n      properties:\n        taskId:\n          type: string\n          example: '123e4567-e89b-12d3-a456-426655440000'\n        others:\n          type: object\n          additionalProperties: true\n      additionalProperties: false\n",
			"canonicalURL": "/github.com/SecureIdentityAlliance/osia@3985bcb9999ca644b07865dd7e1424cd0e47946e/-/blob/src/doc/yaml/abis.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/SecureIdentityAlliance/osia/blob/3985bcb9999ca644b07865dd7e1424cd0e47946e/src/doc/yaml/abis.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/v1/identify/{galleryId}\": post: operation \"identify\": security: at 1:20618: list of scopes MUST be empty for \"type\" \"http\""
}