{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/QuantConnect/AlphaStreams"
		},
		"file": {
			"name": "QuantConnect_Alpha_0.8_swagger.yaml",
			"size": 0,
			"path": "QuantConnect.API.Specification/QuantConnect_Alpha_0.8_swagger.yaml",
			"byteSize": 37687,
			"content": "#\n# QuantConnect Alpha Stream API v0.8\n#\nopenapi: 3.0.0\n\n#\n# Introduction\n#\ninfo:\n  description: 'QuantConnect Alpha Streams API accesses a database of algorithms (Alphas) designed by the QuantConnect community (Authors) for predicting market movements and volatility in the future. They are created and listed for licensing by members of QuantConnect from all over the world. The API provides a system for searching, subscribing and streaming predictions (Insights) from these algorithms.'\n  version: \"0.8\"\n  title: QuantConnect Alpha Stream API v0.8\n  termsOfService: 'https://www.quantconnect.com/terms'\n  contact:\n    name: QuantConnect\n    email: contact@quantconnect.com\n  license:\n    name: License For Use Granted Under QuantConnect Platform Services Agreement.\n    \n#\n# Servers Endpoints \n#\nservers:\n  # REST Endpoint for searching and subscribing to the Alpha insight streams:\n  - url: 'https://www.quantconnect.com/api/v2'\n    description: 'Core endpoint for RESTful services against the community alphas database.'\n    \n  # HTML Website for Streaming Administration:\n  - url: 'https://www.quantconnect.com:15672/api/v2/alpha/insights'\n    description: 'Endpoint for streaming socket administration.'\n    \n  # AMPQ Streaming Insights:  \n  - url: 'ampq://{client}.quantconnect.com:5672'\n    description: 'RMQ Streaming socket endpoint for receiving Insights from Alphas running in QuantConnect'\n    variables:\n      client:\n        default: democlient\n        description: 'Client name assigned on creation of the account'\n#\n# Security Protocol\n#\nsecurity:\n  - HttpApiKeyAuthentication: []\n  \n#\n# URL Paths for API\n#\npaths:\n  # Alpha -\u003e Read Single\n  '/alpha/{id}':\n    get:\n      summary: 'Retrieve Information on an Alpha Module.' \n      description: 'Read information about an individual Alpha from the database based on the Alpha id.'\n      parameters:\n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n      tags: \n        - Alpha Analysis\n      responses:\n        '200':\n          $ref: '#/components/responses/Alpha'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n          \n  # Alpha -\u003e Conversation: \n  '/alpha/{id}/conversation/create':\n      post:\n        summary: Create a conversation thread\n        description: 'Start a conversation with the author(s) of the alpha via email. Quickly solve reconciliation issues or design automated filter questions.'\n        parameters:\n          - name: id\n            in: path\n            description: 'Unique id hash of an Alpha published to the marketplace.'\n            schema:\n              type: string\n            required: true\n          - name: from\n            description: 'Email that is going to be used to send the replies from the author(s).'\n            in: query\n            schema:\n              type: string\n            required: true\n          - name: subject\n            description: 'The subject of the thread, this is going to be used for the email.'\n            in: query\n            schema:\n              type: string\n            required: true\n          - name: message\n            description: 'Message to be sent to the author(s)'\n            in: query\n            schema:\n              type: string\n            required: true\n          - name: cc\n            description: 'Comma separated list of emails that are going to be copied into the author(s) replies.'\n              \n            in: query\n            schema:\n              type: string\n            required: false\n        tags:\n          - Conversations\n        responses:\n          '200':\n            $ref: '#/components/schemas/Success'\n          '401':\n            $ref: '#/components/responses/UnauthorizedError'\n          default:\n            $ref: '#/components/responses/Error'\n  \n  # Alpha -\u003e Get the associated equity curve for the alpha\n  '/alpha/{id}/equity':\n    get:\n      summary: 'Alpha Equity Curve.'\n      description: 'Fetch the equity curve for the alpha in backtesting and live.'\n      parameters:\n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n      tags:\n        - Alpha Analysis\n      responses:\n        '200':\n          description: 'Successfully found alpha-id and returning an array of equity time-value results.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EquityPoint'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n  \n  # Alpha -\u003e List All Alphas Visible By Token\n  '/alpha/list':\n    get:\n      summary: 'List all alphas available in the market'\n      description: 'Listing all alpha ids so you can maintain a dictionary and detect programatically when a new alpha is added to the API.'\n      tags:\n        - Alpha Search\n      responses:\n        '200':\n          description: 'Successfully searched for passed query parameters; returns an array of Alpha objects.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  example: \"fd4bc7ce493c54b7453f2fd2a72eaa29\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  # Alpha -\u003e Subscribe\n  '/alpha/{id}/subscribe':\n    post:\n      summary: 'Subscribe to Alpha Module'\n      description: 'Subscribe to an Alpha given by `id` and charge the subscription the funds account. There is a minimum of 7 days subscription for a request.'\n      tags:\n        - Subscription Management\n      parameters: \n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n        - name: exclusive\n          in: query\n          description: 'Try and subscribe to the Alpha with an exclusive preference.'\n          schema:\n            type: boolean\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n\n  # Alpha -\u003e Unsubscribe\n  '/alpha/{id}/unsubscribe':\n    post:\n      summary: 'Unsubscribe from an Alpha Module.'\n      description: 'Unsubscribe to the Alpha given by the id in path. Pro-rate subscription billing for remainder of them billing cycle.'\n      tags:\n        - Subscription Management\n      parameters:\n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n  \n  \n  # Alpha -\u003e Search\n  '/alpha/search':\n    get:\n      summary: 'Search Alpha Modules.'\n      description: 'Search endpoint for locating Alphas matching search criteria. All input values are optional and are joined with a logical AND for the filtered results.'\n      tags:\n        - Alpha Search\n      parameters: \n        - name: accuracy-minimum\n          description: 'Search for Alphas which have a specific accuracy minimum.' \n          in: query\n          schema:\n            minimum: 0\n            type: number\n        - name: accuracy-maximum\n          description: 'Search for Alphas which have a specific accuracy maximum.' \n          in: query\n          schema:\n            type: number\n            maximum: 1\n        - name: asset-classes\n          description: 'Comma separated value array of asset classes to search.'\n          in: query\n          schema:\n            type: array\n            items:\n              enum: \n                - equity\n                - forex\n                - future\n                - option\n                - cfd\n                - crypto\n        - name: author\n          description: 'Hash author id identifier to locate.'\n          in: query\n          schema:\n            type: string\n        - name: estimated-value-minimum\n          description: 'Search for Alphas which have the specified minimum estimated-value.'\n          in: query\n          schema:\n            type: number\n            minimum: 0\n        - name: estimated-value-maximum\n          description: 'Search for Alphas which have the specified maximum estimated-value.'\n          in: query\n          schema:\n            type: number\n        - name: exclude\n          description: 'Comma separated list of tags to exclude from the search results.'\n          in: query\n          schema:\n            type: string\n        - name: fee-minimum\n          description: 'Fee minimum filter on the listed Alphas.'\n          in: query\n          schema:\n            type: number\n            minimum: 0\n        - name: fee-maximum\n          description: 'Fee maximum filter on the listed Alphas.'\n          in: query\n          schema:\n            type: number\n        - name: include\n          description: 'Comma separated list of tags to include in the search results.'\n          in: query\n          schema:\n            type: string\n        - name: project-id\n          description: 'Search for Alphas created by a specific Project.'\n          in: query\n          schema:\n            type: integer\n        - name: sharpe-minimum\n          description: 'Search for Alphas which have the specified maximum sharpe ratio.' \n          in: query\n          schema:\n            type: number\n        - name: sharpe-maximum\n          description: 'Search for Alphas which have the specified maximum sharpe ratio.' \n          in: query\n          schema:\n            type: number\n        - name: symbols\n          description: 'Search for Alphas which utilize specific symbols. QuantConnect symbol identifier code.'\n          in: query\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Insight'\n        - name: start\n          description: 'Starting position for the search query. With very large datasets the results can be paginated and fetched in chunks starting from start.'\n          in: query\n          schema:\n            type: number\n            default: 0\n        - name: uniqueness-minimum\n          description: 'Search for Alphas which meet the specified minimum uniqueness value relative to existing portfolio. Uniqueness is a measure of correlation of the return curve approximation.'\n          in: query\n          schema:\n            type: number\n            minimum: 0\n        - name: uniqueness-maximum\n          description: 'Search for Alphas which meet the specified maximum uniqueness value relative to existing portfolio. Uniqueness is a measure of correlation of the return curve approximation.'\n          in: query\n          schema:\n            type: number\n            minimum: 1\n        \n      responses:\n        '200':\n          description: 'Successfully searched for passed query parameters; returns an array of Alpha objects.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Alpha'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        'default':\n          $ref: '#/components/responses/Error'\n\n\n          \n  '/alpha/{id}/insights':\n    get:\n      summary: 'Alpha Backtest and Live Trading Insight History.'\n      description: 'Fetch the Alpha Insight list(backtest and live trading) track record since publication.'\n      parameters:\n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n        - name: start\n          description: 'Starting position for the search query. With very large datasets the results can be paginated and fetched in chunks starting from start.'\n          in: query\n          schema:\n            type: number\n            default: 0\n      tags:\n        - Alpha Analysis\n      responses:\n        '200':\n          description: 'Successfully searched for passed query parameters. Returns an array of Insight objects.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Insight'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n          \n          \n  '/alpha/{id}/prices':\n    get:\n      summary: 'Alpha Price History.'\n      description: 'Fetch Alpha historical listing prices.'\n      parameters:\n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n        - name: start\n          description: 'Starting position for the search query. With very large datasets the results can be paginated and fetched in chunks starting from start.'\n          in: query\n          schema:\n            type: number\n            default: 0\n      tags:\n        - Alpha Analysis\n      responses:\n        '200':\n          description: 'Successfully returned prices. Returns an array of Price objects.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Price'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        'default':\n          $ref: '#/components/responses/Error'\n          \n  # Alpha -\u003e Create a new Bid\n  '/alpha/{id}/prices/bids/create':\n    post:\n      summary: 'Post an offer to license an Alpha'\n      description: 'Create a new bid price for licensing an offer. The author will be notified of the price and allowed to accept the license price. The alpha public price will be set accordingly.'\n      tags:\n        - Subscription Management\n      parameters: \n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n        - name: good-until\n          in: query \n          required: true\n          description: 'Timestamp greater than 1 hour in the future when the bid expires'\n          schema:\n            type: number\n            format: double\n        - name: shared\n          in: query\n          description: 'Optional shared bid price for the alpha per month in USD'\n          schema:\n            type: number\n            format: integer\n            minimum: 0\n        - name: exclusive\n          in: query \n          description: 'Optional exclusive bid price for the alpha per month in USD'\n          schema:\n            type: number\n            format: integer\n            minimum: 0\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n    \n\n  '/alpha/{id}/errors':\n    get:\n      summary: 'Alpha Runtime Error History.'\n      description: 'Fetch Alpha runtime errors to help correlate unknown behavior or protect against exposure when an Alpha has a production issue.'\n      parameters:\n        - name: id\n          in: path\n          description: 'Unique id hash of an Alpha published to the marketplace.'\n          schema:\n            type: string\n          required: true\n        - name: start\n          description: 'Starting position for the search query. With very large datasets the results can be paginated and fetched in chunks starting from start.'\n          in: query\n          schema:\n            type: number\n            default: 0\n      tags:\n        - Alpha Analysis\n      responses:\n        '200':\n          description: 'Successfully returned errors. Returns an array of RuntimeError objects.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RuntimeError'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        'default':\n          $ref: '#/components/responses/Error'\n\n  # Author -\u003e Describe\n  '/alpha/author/{id}':\n    get:\n      summary: 'Specific Author Information.'\n      description: 'Fetch Author information by id to form models based around people.'\n      tags: \n        - Author Search\n      parameters:\n      - name: id\n        in: path\n        description: 'Unique id hash of an Author.'\n        schema:\n          type: string\n        required: true\n      responses:\n        '200':\n          $ref: '#/components/responses/Author'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFoundError'\n        'default':\n          $ref: '#/components/responses/Error'\n          \n  \n  \n  # Author -\u003e Search\n  '/alpha/author/search':\n    get:\n      summary: 'Search Author Database.'\n      description: 'Search Author database by query filters to locate researchers according to criteria.'\n      tags:\n        - Author Search\n      parameters: \n        - name: alphas-minimum\n          description: 'The minimum number of Alphas the Author has listed.'\n          in: query\n          schema:\n            type: integer\n            minimum: 0\n        - name: alphas-maximum\n          description: 'The maximum number of Alphas the Author has listed.'\n          in: query\n          schema:\n            type: integer\n        - name: biography\n          description: 'Search the Author biography information for this text.'\n          in: query\n          schema:\n            type: string\n        - name: forum-comments-minimum\n          description: 'Minimum number of comments created on QuantConnect.'\n          in: query\n          schema:\n            minimum: 0\n            type: integer\n        - name: forum-comments-maximum\n          description: 'Maximum number of comments created on QuantConnect.'\n          in: query\n          schema:\n            type: integer\n        - name: forum-discussions-minimum\n          description: 'Minimum number of discussions started on QuantConnect.'\n          in: query\n          schema:\n            minimum: 0\n            type: integer\n        - name: forum-discussions-maximum\n          description: 'Maximum number of discussions started on QuantConnect.'\n          in: query\n          schema:\n            type: integer\n        - name: last-login-minimum\n          description: 'Minimum of the unix timestamp of the Author last login on QuantConnect.'\n          in: query\n          schema:\n            type: integer\n            minimum: 0\n        - name: last-login-maximum\n          description: 'Maximum of the unix timestamp of the Author last login on QuantConnect.'\n          in: query\n          schema:\n            type: integer\n        - name: languages\n          description: 'Preferred programming language for the primary Author.'\n          in: query\n          schema:\n            type: array\n            items:\n              enum: \n                - C#\n                - Py\n        - name: location\n          description: 'Best guess geographic location of the Author based on the IP address.'\n          in: query\n          schema:\n            type: string\n        - name: projects-minimum\n          description: 'Minimum number of projects the user has created.'\n          in: query\n          schema:\n            type: integer\n            minimum: 0\n        - name: projects-maximum\n          description: 'Maximum number of projects the user has created.'\n          in: query\n          schema:\n            type: integer\n        - name: signed-up-minimum\n          description: 'The minimum unix timestamp of the Author registration on QuantConnect.'\n          in: query\n          schema:\n            type: integer \n        - name: signed-up-maximum\n          description: 'The maximum unix timestamp of the Author registration on QuantConnect.'\n          in: query\n          schema:\n            type: integer\n        - name: start\n          description: 'Starting position for the search query. With very large datasets the results can be paginated and fetched in chunks starting from start.'\n          in: query\n          schema:\n            type: number\n            default: 0\n        \n      responses:\n        '200':\n          description: 'Successfully searched Authors by query parameters; returns an array of Author objects.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Author'  \n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        'default':\n          $ref: '#/components/responses/Error'\n\n\n\n  # Alpha -\u003e Streaming EndPoint\n  '/': \n    get:\n      summary: 'Streaming Insights from Alpha Modules from Streaming AMPQ Server.'\n      description: 'Streaming endpoint for insight predictions from the community. All subscribed Insights will be piped to this web socket connection 24/7. The socket is AMPQ format for RabbitMQ -- *not* GET. This should be connected to with a RMQ client library.'\n      tags:\n        - Streaming RMQ Socket\n      responses:\n        '200':\n          description: 'Streaming, long running web socket endpoint with JSON insights streaming.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/InsightPacket'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        'default':\n          $ref: '#/components/responses/Error'\n\n      \n\n# Model Definitions\ncomponents:\n  # Common Responses -\u003e \n  responses:\n  \n    Alpha:\n      description: 'Single response of Alpha module from the API.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/Alpha'\n            \n    Author:\n      description: 'Single response of an Author model from the API.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Author'\n            \n    Success:\n      description: 'Generic success response message from the API.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/Success'\n            \n    Error:\n      description: 'Generic error response message from the API. '\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n            \n    RuntimeError:\n      description: 'Runtime error log entry for a running production Alpha.'\n      content: \n        application/json:\n          schema:\n            $ref: '#/components/schemas/RuntimeError'\n    \n    NotFoundError:\n      description: 'The requested item, index, page was not found.'\n    \n    UnauthorizedError:\n      description: 'Unauthorized response from the API. Key is missing or invalid.'\n      headers:\n        www_authenticate:\n          schema:\n            type: string\n            \n\n  # Base API Security -\u003e \n  securitySchemes:\n    HttpApiKeyAuthentication:\n      description: 'The standard QuantConnect API authentication scheme is used. This requires the current unix time and your api key to be hashed together and sent as the B64 password in a basic authentication. The user-name for the basic authentication is the UID on your QuantConnect account.'\n      type: http\n      scheme: basic\n    \n  # Common API Models -\u003e\n  schemas:\n  \n    # Alpha Object Model\n    Alpha:\n      description: 'Snapshot of a Project at the time it was deployed to the marketplace, written by an Author on QuantConnect, generating Insights about Assets.'\n      properties:\n        id:\n          type: string\n          description: 'Unique hash identifier for this published Alpha.'\n          example: '78fc2972b9ac597369d86a0f98d9316e'\n        authors:\n          description: 'Creators of the Alpha. Sometimes users collaborate on a Project or have one trader paired with a coder. Authors can be added and removed from projects.'\n          type: array\n          items:\n            $ref: '#/components/schemas/Author'\n        asset-classes:\n          description: 'Asset classes predicted in this stream.'\n          type: array\n          items:\n            type: string\n            enum: \n              - equity\n              - forex\n              - future\n              - option\n              - cfd\n              - crypto\n        accuracy:\n          description: 'Daily rolling accuracy of the Alpha module over the last 30 days of insight direction score.'\n          type: array\n          items:\n            $ref: '#/components/schemas/Point'\n        analyses-performed:\n          description: 'Number of backtests/analysis trials used to generate this Alpha model.'\n          type: number\n          format: integer\n        author-trading: \n          type: boolean\n          description: 'Boolean indicating whether the author is actively trading this alpha on their own account'\n        description:\n          type: string\n          description: 'Author supplied paragraph description of the Alpha behavior'\n        estimated-depth:\n          description: 'Estimated market depth available for this asset based on trading volumes at the time of Insights.'\n          type: number\n          format: double\n        exclusive-available:\n          description: 'Flag to indicate if the author is open to selling the signal exclusively.'\n          type: boolean\n        exclusive-subscription-fee:\n          description: 'Monthly fee for exclusive access to the Alpha signal.'\n          type: number\n          format: double\n        estimated-effort:\n          description: 'Estimated number of hours the user was working on this Alpha.'\n          type: number\n          format: double\n        listed-time:\n          description: 'Unix timestamp the Alpha was listed into the marketplace.'\n          type: number\n          format: double\n        project:\n          $ref: '#/components/schemas/Project'\n        uniqueness:\n          description: 'Indicator of uniqueness in in the QuantConnect marketplace based on the assets traded and the overlap of signal with other Alphas in the Client portfolio, where percentage of overlap with other Alphas (100% is identical).'\n          type: number\n          format: double\n        sharpe-ratio:\n          description: 'Sharpe ratio of the Alpha with a $1M portfolio, equal weighting portfolio construction and immediate execution models. NOTE: This is currently not implemented.'\n          type: number\n        subscription-fee:\n          description: 'Monthly fee levied by the author on the Alpha signal.'\n          type: number\n          format: double\n        status:\n          description: 'Alphas are forced-running by default but after 10 production runtime errors they are taken offline.'\n          type: string\n          enum: \n          - running\n          - stopped\n        tags:\n          description: 'Array of string tags to describe the alpha and its algorithm properties'\n          type: array\n          items:\n            type: string\n        version:\n          description: 'Version of the Alpha. The production version of the Alpha.'\n          type: string\n          example: '1.0.2'\n          \n    InsightPacket:\n      description: 'Wrapper packet to hold collection of Insight objects'\n      properties:\n        alpha-id:\n          description: 'Unique Alpha Id which generated this Insight'\n          example: '623b06b231eb1cc1aa3643a46'\n        algorithm-id:\n          description: 'Deploy id for this algorithm'\n          example: 'A-78fc2972b9ac597369d86a0f98d9316e'\n        insights:\n          description: 'Array of insights emitted at this timestep.'\n          type: array\n          items:\n            $ref: '#/components/schemas/Insight'\n            \n            \n    # Author Meta Data\n    Author:\n      description: 'Author user of QuantConnect responsible for creation of an Alpha.'\n      properties:\n        id:\n          type: string\n          description: 'Unique string hash id for Author.'\n          example: '623b06b231eb1cc1aa3643a46'\n        alphas:\n          description: 'String array of Alpha-Id hashes the Author has created.'\n          type: array\n          items:\n            type: string\n        alphas-listed:\n          type: integer\n          description: 'Number of Alphas Author has listed in the marketplace.'\n          example: 4\n        analysis-average-length:\n          type: integer\n          description: 'Number of days of the average analysis(backtest) length for the Author.'\n          example: 520\n        backtests:\n          type: integer\n          description: 'Lifetime number of analysis(backtests) conducted by the Author.'\n          example: 1300\n        biography:\n          type: string\n          description: 'Profile auto-biography (100-500 words).'\n          example: 'Physics professor from North East USA with background in nuclear fusion.'\n        forum-discussions:\n          type: integer\n          description: 'Number of forum discussions started by the Author.'\n          example: 5\n        forum-comments:\n          type: integer\n          description: 'Number of forum comments made by the Author.'\n          example: 34\n        language:\n          description: 'Author preferred programming language.'\n          type: string\n          enum: \n            - 'Py'\n            - 'C#'\n          example: 'Py'\n        last-online-time:\n          type: number\n          format: double\n          description: 'Unix timestamp of the last time the Author was online (Updated daily).'\n          example: 1520785125.21\n        location:\n          type: string\n          description: 'Best known estimate of the Author geographic location.'\n          example: 'Brooklyn, New York, US'\n        projects:\n          type: integer\n          description: 'Total count of the number of projects the Author has in account.'\n          example: 34\n        signup-time:\n          type: number\n          format: double\n          description: 'Unix timestamp of the user sign up.'\n          example: 1520785125.21\n        social-media:\n          type: array\n          description: 'Array of social media profile links.'\n          items:\n            type: string\n\n\n    # Insight Object returned from the stream\n    Insight:\n      description: 'Individual prediction from an Alpha.'\n      properties:\n        id: \n          description: 'Unique hash id of this Insight'\n          type: string\n          example: \"dd9527c4dfde4b54b4c46fd95fe39049\"\n        confidence:\n          description: 'Confidence of the Insight as a percentage.'\n          type: number\n          format: double\n          example: 0.21\n        created-time:\n          description: 'Unix timestamp for when the Alpha Insight was created.'\n          type: number\n          format: double\n          example: 1520785125.21\n        close-time:\n          description: 'Unix timestamp for when the Alpha Insight was closed (start + period).'\n          type: number\n          format: double\n          example: 1520785125.21\n        direction:\n          description: 'Direction of the insight; flat, up or down.'\n          type: string\n          enum:\n            - up\n            - down\n            - flat\n        type:\n          description: 'Insight prediction type category: price or volatility.'\n          type: string\n          enum:\n            - price\n            - volatility\n        source:\n          $ref: '#/components/schemas/AlphaMode'\n        period:\n          description: 'Prediction period of the insight in seconds.'\n          type: number\n          format: double\n          example: 600\n        reference-value:\n          description: 'Sample of the asset price at the time the insight was created'\n          type: number\n          format: double\n        symbol: \n          $ref: '#/components/schemas/Symbol'\n        ticker: \n          description: 'Current ticker for this asset'\n          type: string\n          example: \"AAPL\"\n          \n          \n    Price:\n      description: 'Record of the price of an Alpha or a bid made for it.'\n      properties:\n        time:\n          type: number\n          format: double\n          description: 'Unix timestamp of the last time the price was updated.'\n          example: 1520785125.21\n        price-type: \n          description: 'The type of price update. Can be bid, ask or trade. Only ask supported at this time.'\n          type: string\n          enum:\n            - bid\n            - ask\n            - trade\n        shared-price:\n          description: 'Shared price for this moment of time.'\n          type: number\n          format: double\n          example: 1300\n        exclusive-price:\n          description: 'Exclusive price for this moment of time.'\n          type: number\n          format: double\n          example: 4500\n          \n    \n    # Alpha Project Object\n    Project:\n      description: 'Project object where the Alpha source resides. One Project can have multiple generated Alphas.'\n      properties:\n        author:\n          $ref: '#/components/schemas/Author'\n        id:\n          description: 'Unique integer id for the Alpha Project.'\n          type: integer\n        name:\n          type: string\n          description: 'Author assigned project name.'\n        created-time: \n          type: number\n          format: double\n          example: 1520785125.21\n          description: 'Unix timestamp when the project was created.'\n        last-modified-time:\n          type: number\n          format: double\n          example: 1520785125.21\n          description: 'Unix timestamp last time the project was opened/modified.'\n        parent-id:\n          description: 'Id of the parent Project this was cloned from to start.'\n          type: number\n          format: integer\n          example: 1100012\n            \n            \n    # Generic success response from the API.\n    Success:\n      description: 'Generic success response message from the API.'\n      properties:\n        success:\n          type: boolean\n          example: true\n      \n      \n    # Generic error response from the API.\n    Error:\n      properties:\n        success:\n          description: 'Boolean indicating true-false; for error models this is always false.'\n          type: boolean\n          example: false\n        messages:\n          description: 'Array of error messages from the API.'\n          type: array\n          items:\n            type: string\n    \n    \n    # Production error recorded from an Alpha\n    RuntimeError:\n      properties:\n        time:\n          description: 'The unix timestamp of the production runtime error.'\n          type: number\n          format: double\n          example: 1520785125.21\n        error:\n          description: 'Error message string from the Alpha.'\n          type: string\n        stacktrace:\n          description: 'Stacktrace of the production error recorded from the Alpha.'\n          type: string\n\n\n    # Time Value Point\n    Point:\n      properties:\n        time:\n          description: 'Time value of a time-value pair.'\n          type: number\n          format: double\n          example: 1520785125.21\n        value:\n          description: 'Value of the point.'\n          type: number\n          format: double\n          \n    # Equity data point\n    EquityPoint: \n      description: 'An array of the time-value and sampling mode of the alpha data. Backtest and live samples are a continuous series in the result set.'\n      type: array\n      items: \n        oneOf:\n          - $ref: '#/components/schemas/TimeStamp'\n          - $ref: '#/components/schemas/Value'\n          - $ref: '#/components/schemas/AlphaMode'\n          \n    # Unique Symbol Identifier Class \n    TimeStamp:\n      description: 'Unixtimestamp in seconds since Jan 1st 1970; with milliseconds.'\n      type: number\n      example: 1520785125.2123\n      \n    # Unique Symbol Identifier Class \n    Value:\n      description: 'Numerical value for an array response (Alpha equity value in USD).'\n      type: number\n      example: 1120540.00\n      \n    # Enum property for the alphas state.\n    AlphaMode:\n      description: 'Description of the state of the model emissions (backtest, live or out of sample)'\n      type: string\n      enum:\n        - in sample\n        - out of sample\n        - live trading\n          \n    # Unique Symbol Identifier Class \n    Symbol:\n      description: 'Uniquely identified securities-contract based on QuantConnect.Symbol type. All information to uniquely identify a contract.'\n      type: string\n      example: \"AAPL R735QTJ8XC9X\"\n"
		}
	},
	"Error": "parse: parse spec: paths: /alpha/{id}/conversation/create: post: operation \"\": responses: 200: resolve \"#/components/schemas/Success\" reference: invalid response reference: \"#/components/schemas/Success\""
}