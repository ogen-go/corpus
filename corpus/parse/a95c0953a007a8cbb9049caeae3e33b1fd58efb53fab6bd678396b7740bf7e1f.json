{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "cpy.re-peertube-1.3.1-openapi.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/cpy.re-peertube-1.3.1-openapi.yaml",
			"byteSize": 67706,
			"content": "openapi: 3.0.0\nservers:\n  - description: Live Test Server (live data - stable version)\n    url: https://peertube.cpy.re/api/v1\n  - description: Live Test Server (live data - bleeding edge version)\n    url: https://peertube2.cpy.re/api/v1\n  - description: Live Test Server (live data - bleeding edge version)\n    url: https://peertube3.cpy.re/api/v1\ninfo:\n  contact:\n    name: PeerTube Community\n    url: https://joinpeertube.org\n  description: \u003e\n    # Introduction\n\n    The PeerTube API is built on HTTP(S). Our API is RESTful. It has predictable\n\n    resource URLs. It returns HTTP response codes to indicate errors. It also\n\n    accepts and returns JSON in the HTTP body. You can use your favorite\n\n    HTTP/REST library for your programming language to use PeerTube. No official\n\n    SDK is currently provided, but the spec API is fully compatible with\n\n    [openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)\n\n    which generates a client SDK in the language of your choice.\n\n\n    # Authentication\n\n    When you sign up for an account, you are given the possibility to generate\n\n    sessions, and authenticate using this session token. One session token can\n\n    currently be used at a time.\n\n\n    # Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure\n\n    of the API call. The body of the response will be JSON in the following\n\n    format.\n\n\n    ```\n\n    {\n      \"code\": \"unauthorized_request\", // example inner error code\n      \"error\": \"Token is invalid.\" // example exposed error message\n    }\n\n    ```\n  license:\n    name: AGPLv3.0\n    url: https://github.com/Chocobozzz/PeerTube/blob/master/LICENSE\n  title: PeerTube\n  version: 1.3.1\n  x-apisguru-categories:\n    - social\n  x-logo:\n    altText: PeerTube Project Homepage\n    url: https://joinpeertube.org/img/brand.png\n  x-origin:\n    - converter:\n        url: https://github.com/lucybot/api-spec-converter\n        version: 2.7.31\n      format: openapi\n      url: https://raw.githubusercontent.com/Chocobozzz/PeerTube/develop/support/doc/api/openapi.yaml\n      version: \"3.0\"\n  x-providerName: cpy.re\n  x-serviceName: peertube\nexternalDocs:\n  url: https://docs.joinpeertube.org/api-rest-reference.html\ntags:\n  - description: \u003e\n      Using some features of PeerTube require authentication, for which Accounts\n      provide different levels of permission as well as associated user\n      information. Accounts also encompass remote accounts discovered across the\n      federation.\n    name: Accounts\n  - description: \u003e\n      Each server exposes public information regarding supported videos and\n      options.\n    name: Config\n  - description: |\n      Feeds of videos and feeds of comments allow to see updates and get them in\n      an aggregator or script of your choice.\n    name: Feeds\n  - description: \u003e\n      Jobs are long-running tasks enqueued and processed by the instance itself.\n      No additional worker registration is currently available.\n    name: Job\n  - description: \u003e\n      Managing servers which the instance interacts with is crucial to the\n      concept of federation in PeerTube and external video indexation. The\n      PeerTube server then deals with inter-server ActivityPub operations and\n      propagates information across its social graph by posting activities to\n      actors' inbox endpoints.\n    name: Server Following\n  - description: |\n      Video abuses deal with reports of local or remote videos alike.\n    name: Video Abuse\n  - description: |\n      Operations dealing with listing, uploading, fetching or modifying videos.\n    name: Video\n  - description: |\n      The search helps to find _videos_ from within the instance and beyond.\n      Videos from other instances federated by the instance (that is, instances\n      followed by the instance) can be found via keywords and other criteria of\n      the advanced search.\n    name: Search\n  - description: \u003e\n      Operations dealing with comments to a video. Comments are organized in\n      threads.\n    name: Video Comment\n  - description: \u003e\n      Operations dealing with creation, modification and video listing of a\n      user's channels.\n    name: Video Channel\n  - description: \u003e\n      Operations dealing with blacklisting videos (removing them from view and\n      preventing interactions).\n    name: Video Blacklist\n  - description: |\n      Voting for a video.\n    name: Video Rate\npaths:\n  /accounts:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Account\"\n                type: array\n          description: successful operation\n      summary: Get all accounts\n      tags:\n        - Accounts\n  \"/accounts/{name}\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n          description: successful operation\n      summary: Get the account by name\n      tags:\n        - Accounts\n  \"/accounts/{name}/ratings\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n        - description: Optionaly filter which ratings to retrieve\n          in: query\n          name: rating\n          required: false\n          schema:\n            enum:\n              - like\n              - dislike\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoRating\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get ratings of an account by its name\n      tags:\n        - User\n  \"/accounts/{name}/video-channels\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoChannel\"\n                type: array\n          description: successful operation\n      summary: Get video channels of an account by its name\n      tags:\n        - Video Channel\n  \"/accounts/{name}/videos\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/name\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: Get videos for an account, provided the name of that account\n      tags:\n        - Accounts\n        - Video\n      x-code-samples:\n        - lang: JavaScript\n          source: |\n            fetch('https://peertube2.cpy.re/api/v1/accounts/{name}/videos')\n            .then(function(response) {\n              return response.json()\n            }).then(function(data) {\n              console.log(data)\n            })\n        - lang: Shell\n          source: |\n            # pip install httpie\n            http -b GET https://peertube2.cpy.re/api/v1/accounts/{name}/videos\n        - lang: Ruby\n          source: |\n            require 'uri'\n            require 'net/http'\n\n            url = URI(\"https://peertube2.cpy.re/api/v1/accounts/{name}/videos\")\n\n            http = Net::HTTP.new(url.host, url.port)\n            http.use_ssl = true\n            http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\n            request = Net::HTTP::Post.new(url)\n            request[\"content-type\"] = 'application/json'\n            response = http.request(request)\n            puts response.read_body\n        - lang: Python\n          source: \u003e\n            import http.client\n\n\n            conn = http.client.HTTPSConnection(\"https://peertube2.cpy.re/api/v1\")\n\n\n            headers = {\n              'content-type': \"application/json\"\n            }\n\n\n            conn.request(\"POST\", \"/accounts/{name}/videos\", None, headers)\n\n\n            res = conn.getresponse()\n\n            data = res.read()\n\n\n            print(data.decode(\"utf-8\"))\n  /config:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServerConfig\"\n          description: successful operation\n      summary: Get the public configuration of the server\n      tags:\n        - Config\n  /config/about:\n    get:\n      responses:\n        \"200\":\n          description: successful operation\n      summary: Get the instance about page content\n      tags:\n        - Config\n  /config/custom:\n    delete:\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Delete the runtime configuration of the server\n      tags:\n        - Config\n    get:\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Get the runtime configuration of the server\n      tags:\n        - Config\n    put:\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Set the runtime configuration of the server\n      tags:\n        - Config\n  \"/feeds/videos.{format}\":\n    get:\n      parameters:\n        - description: The format expected (xml defaults to RSS 2.0, atom to ATOM 1.0 and\n            json to JSON FEED 1.0\n          in: path\n          name: format\n          required: true\n          schema:\n            default: xml\n            enum:\n              - xml\n              - atom\n              - json\n            type: string\n        - description: The id of the local account to filter to (beware, users IDs and not\n            actors IDs which will return empty feeds\n          in: query\n          name: accountId\n          required: false\n          schema:\n            type: number\n        - description: The name of the local account to filter to\n          in: query\n          name: accountName\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n      summary: Get the feed of videos for the server, with optional filter by account\n        name or id\n      tags:\n        - Feeds\n  \"/jobs/{state}\":\n    get:\n      parameters:\n        - description: The state of the job\n          in: path\n          name: state\n          required: true\n          schema:\n            enum:\n              - active\n              - completed\n              - failed\n              - waiting\n              - delayed\n            type: string\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Job\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Get list of jobs\n      tags:\n        - Job\n  /search/videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videosSearchSort\"\n        - description: String to search\n          in: query\n          name: search\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: Get the videos corresponding to a given query\n      tags:\n        - Search\n  /server/followers:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Follow\"\n                type: array\n          description: successful operation\n      summary: Get followers of the server\n      tags:\n        - Server Following\n  /server/following:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Follow\"\n                type: array\n          description: successful operation\n      summary: Get servers followed by the server\n      tags:\n        - Server Following\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Follow\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2:\n            - admin\n      summary: Follow a server\n      tags:\n        - Server Following\n  \"/server/following/{host}\":\n    delete:\n      parameters:\n        - description: \"The host to unfollow \"\n          in: path\n          name: host\n          required: true\n          schema:\n            type: string\n      responses:\n        \"201\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Unfollow a server by hostname\n      tags:\n        - Server Following\n  /users:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/usersSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get a list of users\n      tags:\n        - User\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AddUser\"\n        description: User to create\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AddUserResponse\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n      summary: Creates user\n      tags:\n        - User\n  /users/me:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get current user information\n      tags:\n        - User\n    put:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateMe\"\n        required: true\n      responses:\n        \"204\":\n          description: Successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Update current user information\n      tags:\n        - User\n  /users/me/avatar/pick:\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            encoding:\n              profileImage:\n                contentType: image/png, image/jpeg\n            schema:\n              properties:\n                avatarfile:\n                  description: The file to upload.\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Avatar\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update current user avatar\n      tags:\n        - User\n  /users/me/subscriptions:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get subscriptions of the current user\n      tags:\n        - User\n    post:\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Add subscription to the current user\n      tags:\n        - User\n  /users/me/subscriptions/exist:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/subscriptionsUris\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get if subscriptions exist for the current user\n      tags:\n        - User\n  /users/me/subscriptions/videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get videos of subscriptions of the current user\n      tags:\n        - User\n  \"/users/me/subscriptions/{subscriptionHandle}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/subscriptionHandle\"\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Delete subscription of the current user for a given uri\n      tags:\n        - User\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/subscriptionHandle\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannel\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get subscription of the current user for a given uri\n      tags:\n        - User\n  /users/me/video-quota-used:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: number\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get current user used quota\n      tags:\n        - User\n  /users/me/videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      security:\n        - OAuth2:\n            - user\n      summary: Get videos of the current user\n      tags:\n        - User\n  \"/users/me/videos/{videoId}/rating\":\n    get:\n      parameters:\n        - description: \"The video id \"\n          in: path\n          name: videoId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetMeVideoRating\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get rating of video by its id, among those of the current user\n      tags:\n        - User\n  /users/register:\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RegisterUser\"\n        required: true\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      summary: Register a user\n      tags:\n        - User\n  \"/users/{id}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2:\n            - admin\n      summary: Delete a user by its id\n      tags:\n        - User\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get user by its id\n      tags:\n        - User\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UpdateUser\"\n        required: true\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Update user profile by its id\n      tags:\n        - User\n  /video-channels:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoChannel\"\n                type: array\n          description: successful operation\n      summary: Get list of video channels\n      tags:\n        - Video Channel\n    post:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VideoChannelCreate\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Creates a video channel for the current user\n      tags:\n        - Video Channel\n  \"/video-channels/{channelHandle}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Delete a video channel by its id\n      tags:\n        - Video Channel\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoChannel\"\n          description: successful operation\n      summary: Get a video channel by its id\n      tags:\n        - Video Channel\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/VideoChannelUpdate\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Update a video channel by its id\n      tags:\n        - Video Channel\n  \"/video-channels/{channelHandle}/videos\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/channelHandle\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: Get videos of a video channel by its id\n      tags:\n        - Video\n        - Video Channel\n  /videos:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/categoryOneOf\"\n        - $ref: \"#/components/parameters/tagsOneOf\"\n        - $ref: \"#/components/parameters/tagsAllOf\"\n        - $ref: \"#/components/parameters/licenceOneOf\"\n        - $ref: \"#/components/parameters/languageOneOf\"\n        - $ref: \"#/components/parameters/nsfw\"\n        - $ref: \"#/components/parameters/filter\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/videosSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoListResponse\"\n          description: successful operation\n      summary: Get list of videos\n      tags:\n        - Video\n  /videos/abuse:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/abusesSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoAbuse\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get list of reported video abuses\n      tags:\n        - Video Abuse\n  /videos/blacklist:\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/blacklistsSort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/VideoBlacklist\"\n                type: array\n          description: successful operation\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Get list of videos on blacklist\n      tags:\n        - Video Blacklist\n  /videos/categories:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: Get list of video licences known by the server\n      tags:\n        - Video\n  /videos/imports:\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                category:\n                  description: Video category\n                  type: string\n                channelId:\n                  description: Channel id that will contain this video\n                  type: number\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: string\n                description:\n                  description: Video description\n                  type: string\n                language:\n                  description: Video language\n                  type: string\n                licence:\n                  description: Video licence\n                  type: string\n                magnetUri:\n                  description: Magnet URI\n                  type: string\n                name:\n                  description: Video name\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: string\n                previewfile:\n                  description: Video preview file\n                  type: string\n                privacy:\n                  $ref: \"#/components/schemas/VideoPrivacySet\"\n                scheduleUpdate:\n                  $ref: \"#/components/schemas/VideoScheduledUpdate\"\n                support:\n                  description: Text describing how to support the video uploader\n                  type: string\n                tags:\n                  description: Video tags\n                  items:\n                    type: string\n                  type: array\n                targetUrl:\n                  description: HTTP target URL\n                  type: string\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                torrentfile:\n                  description: Torrent File\n                  format: binary\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: string\n              required:\n                - channelId\n                - name\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoUploadResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Import a torrent or magnetURI or HTTP ressource (if enabled by the\n        instance administrator)\n      tags:\n        - Video\n  /videos/languages:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: Get list of languages known by the server\n      tags:\n        - Video\n  /videos/licences:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: Get list of video licences known by the server\n      tags:\n        - Video\n  /videos/ownership:\n    get:\n      responses:\n        \"200\":\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Get list of video ownership changes requests\n      tags:\n        - Video\n  \"/videos/ownership/{id}/accept\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Refuse ownership change request for video by its id\n      tags:\n        - Video\n  \"/videos/ownership/{id}/refuse\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Accept ownership change request for video by its id\n      tags:\n        - Video\n  /videos/privacies:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: successful operation\n      summary: Get list of privacy policies supported by the server\n      tags:\n        - Video\n  /videos/upload:\n    post:\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                category:\n                  description: Video category\n                  type: string\n                channelId:\n                  description: Channel id that will contain this video\n                  type: number\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: string\n                description:\n                  description: Video description\n                  type: string\n                language:\n                  description: Video language\n                  type: string\n                licence:\n                  description: Video licence\n                  type: string\n                name:\n                  description: Video name\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: string\n                previewfile:\n                  description: Video preview file\n                  type: string\n                privacy:\n                  $ref: \"#/components/schemas/VideoPrivacySet\"\n                scheduleUpdate:\n                  $ref: \"#/components/schemas/VideoScheduledUpdate\"\n                support:\n                  description: Text describing how to support the video uploader\n                  type: string\n                tags:\n                  description: Video tags\n                  items:\n                    type: string\n                  type: array\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                videofile:\n                  description: Video file\n                  format: binary\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: string\n              required:\n                - videofile\n                - channelId\n                - name\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoUploadResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Upload a video file with its metadata\n      tags:\n        - Video\n      x-code-samples:\n        - lang: Shell\n          source: \u003e\n            ## DEPENDENCIES: httpie, jq\n\n            # pip install httpie\n\n            USERNAME=\"\u003cyour_username\u003e\"\n\n            PASSWORD=\"\u003cyour_password\u003e\"\n\n            FILE_PATH=\"\u003cyour_file_path\u003e\"\n\n            CHANNEL_ID=\"\u003cyour_channel_id\u003e\"\n\n            NAME=\"\u003cvideo_name\u003e\"\n\n\n            API_PATH=\"https://peertube2.cpy.re/api/v1\"\n\n            ## AUTH\n\n            client_id=$(http -b GET \"$API_PATH/oauth-clients/local\" | jq -r \".client_id\")\n\n            client_secret=$(http -b GET \"$API_PATH/oauth-clients/local\" | jq -r \".client_secret\")\n\n            token=$(http -b --form POST \"$API_PATH/users/token\" \\\n              client_id=\"$client_id\" client_secret=\"$client_secret\" grant_type=password response_type=code \\\n              username=$USERNAME \\\n              password=$PASSWORD \\\n              | jq -r \".access_token\")\n            ## VIDEO UPLOAD\n\n            http -b --form POST \"$API_PATH/videos/upload\" \\\n              videofile@$FILE_PATH \\\n              channelId=$CHANNEL_ID \\\n              name=$NAME \\\n              \"Authorization:Bearer $token\"\n  \"/videos/{id}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Delete a video by its id\n      tags:\n        - Video\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoDetails\"\n          description: successful operation\n      summary: Get a video by its id\n      tags:\n        - Video\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                category:\n                  description: Video category\n                  type: string\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: string\n                description:\n                  description: Video description\n                  type: string\n                language:\n                  description: Video language\n                  type: string\n                licence:\n                  description: Video licence\n                  type: string\n                name:\n                  description: Video name\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: string\n                previewfile:\n                  description: Video preview file\n                  type: string\n                scheduleUpdate:\n                  $ref: \"#/components/schemas/VideoScheduledUpdate\"\n                support:\n                  description: Text describing how to support the video uploader\n                  type: string\n                tags:\n                  description: Video tags (maximum 5 tags each between 2 and 30 characters)\n                  items:\n                    type: string\n                  type: array\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Video\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Update metadata for a video by its id\n      tags:\n        - Video\n  \"/videos/{id}/abuse\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Report an abuse, on a video by its id\n      tags:\n        - Video Abuse\n  \"/videos/{id}/blacklist\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Delete an entry of the blacklist of a video by its id\n      tags:\n        - Video Blacklist\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2:\n            - admin\n            - moderator\n      summary: Put on blacklist a video by its id\n      tags:\n        - Video Blacklist\n  \"/videos/{id}/captions\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    items:\n                      $ref: \"#/components/schemas/VideoCaption\"\n                    type: array\n                  total:\n                    type: integer\n                type: object\n          description: successful operation\n      summary: Get list of video's captions\n      tags:\n        - Video Caption\n  \"/videos/{id}/captions/{captionLanguage}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/captionLanguage\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      summary: Delete a video caption\n      tags:\n        - Video Caption\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/captionLanguage\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                captionfile:\n                  description: The file to upload.\n                  format: binary\n                  type: string\n              type: object\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      summary: Add or replace a video caption\n      tags:\n        - Video Caption\n  \"/videos/{id}/comment-threads\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/start\"\n        - $ref: \"#/components/parameters/count\"\n        - $ref: \"#/components/parameters/sort\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentThreadResponse\"\n          description: successful operation\n      summary: Get the comment threads of a video by its id\n      tags:\n        - Video Comment\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentThreadPostResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Creates a comment thread, on a video by its id\n      tags:\n        - Video Comment\n  \"/videos/{id}/comment-threads/{threadId}\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/threadId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VideoCommentThreadTree\"\n          description: successful operation\n      summary: Get the comment thread by its id, of a video by its id\n      tags:\n        - Video Comment\n  \"/videos/{id}/comments/{commentId}\":\n    delete:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/commentId\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Delete a comment in a comment thread by its id, of a video by its id\n      tags:\n        - Video Comment\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n        - $ref: \"#/components/parameters/commentId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentThreadPostResponse\"\n          description: successful operation\n      security:\n        - OAuth2: []\n      summary: Creates a comment in a comment thread by its id, of a video by its id\n      tags:\n        - Video Comment\n  \"/videos/{id}/description\":\n    get:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: string\n          description: successful operation\n      summary: Get a video description by its id\n      tags:\n        - Video\n  \"/videos/{id}/give-ownership\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                username:\n                  type: string\n              required:\n                - username\n              type: object\n        required: true\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n        \"400\":\n          description: Changing video ownership to a remote account is not supported yet\n      security:\n        - OAuth2: []\n      summary: Request change of ownership for a video you own, by its id\n      tags:\n        - Video\n  \"/videos/{id}/rate\":\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Vote for a video by its id\n      tags:\n        - Video Rate\n  \"/videos/{id}/views\":\n    post:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      summary: Add a view to the video by its id\n      tags:\n        - Video\n  \"/videos/{id}/watching\":\n    put:\n      parameters:\n        - $ref: \"#/components/parameters/idOrUUID\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserWatchingVideo\"\n        required: true\n      responses:\n        \"204\":\n          $ref: \"#/paths/~1users~1me/put/responses/204\"\n      security:\n        - OAuth2: []\n      summary: Set watching progress of a video by its id for a user\n      tags:\n        - Video\ncomponents:\n  parameters:\n    abusesSort:\n      description: Sort abuses by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -id\n          - -createdAt\n          - -state\n        type: string\n    blacklistsSort:\n      description: Sort blacklists by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -id\n          - -name\n          - -duration\n          - -views\n          - -likes\n          - -dislikes\n          - -uuid\n          - -createdAt\n        type: string\n    captionLanguage:\n      description: The caption language\n      in: path\n      name: captionLanguage\n      required: true\n      schema:\n        type: string\n    categoryOneOf:\n      description: category id of the video\n      explode: false\n      in: query\n      name: categoryOneOf\n      required: false\n      schema:\n        oneOf:\n          - type: number\n          - items:\n              type: number\n            type: array\n      style: form\n    channelHandle:\n      description: \"The video channel handle (example: 'my_username@example.com' or\n        'my_username')\"\n      in: path\n      name: channelHandle\n      required: true\n      schema:\n        type: string\n    commentId:\n      description: The comment id\n      in: path\n      name: commentId\n      required: true\n      schema:\n        type: number\n    count:\n      description: Number of items\n      in: query\n      name: count\n      required: false\n      schema:\n        type: number\n    filter:\n      description: \u003e\n        Special filters (local for instance) which might require special rights:\n         * `local` - only videos local to the instance\n         * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)\n      in: query\n      name: filter\n      required: false\n      schema:\n        enum:\n          - local\n          - all-local\n        type: string\n    id:\n      description: The user id\n      in: path\n      name: id\n      required: true\n      schema:\n        type: number\n    idOrUUID:\n      description: The video id or uuid\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    languageOneOf:\n      description: language id of the video\n      explode: false\n      in: query\n      name: languageOneOf\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - items:\n              type: string\n            type: array\n      style: form\n    licenceOneOf:\n      description: licence id of the video\n      explode: false\n      in: query\n      name: licenceOneOf\n      required: false\n      schema:\n        oneOf:\n          - type: number\n          - items:\n              type: number\n            type: array\n      style: form\n    name:\n      description: The name of the account (chocobozzz or chocobozzz@peertube.cpy.re for\n        example)\n      in: path\n      name: name\n      required: true\n      schema:\n        type: string\n    nsfw:\n      description: whether to include nsfw videos, if any\n      in: query\n      name: nsfw\n      required: false\n      schema:\n        enum:\n          - \"true\"\n          - \"false\"\n        type: string\n    sort:\n      description: Sort column (-createdAt for example)\n      in: query\n      name: sort\n      required: false\n      schema:\n        type: string\n    start:\n      description: Offset\n      in: query\n      name: start\n      required: false\n      schema:\n        type: number\n    subscriptionHandle:\n      description: \"The subscription handle (example: 'my_username@example.com' or\n        'my_username')\"\n      in: path\n      name: subscriptionHandle\n      required: true\n      schema:\n        type: string\n    subscriptionsUris:\n      description: list of uris to check if each is part of the user subscriptions\n      in: query\n      name: uris\n      required: true\n      schema:\n        items:\n          type: string\n        type: array\n    tagsAllOf:\n      description: tag(s) of the video, where all should be present in the video\n      explode: false\n      in: query\n      name: tagsAllOf\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - items:\n              type: string\n            type: array\n      style: form\n    tagsOneOf:\n      description: tag(s) of the video\n      explode: false\n      in: query\n      name: tagsOneOf\n      required: false\n      schema:\n        oneOf:\n          - type: string\n          - items:\n              type: string\n            type: array\n      style: form\n    threadId:\n      description: The thread id (root comment id)\n      in: path\n      name: threadId\n      required: true\n      schema:\n        type: number\n    usersSort:\n      description: Sort users by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -id\n          - -username\n          - -createdAt\n        type: string\n    videosSearchSort:\n      description: Sort videos by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -name\n          - -duration\n          - -createdAt\n          - -publishedAt\n          - -views\n          - -likes\n          - -match\n        type: string\n    videosSort:\n      description: Sort videos by criteria\n      in: query\n      name: sort\n      required: false\n      schema:\n        enum:\n          - -name\n          - -duration\n          - -createdAt\n          - -publishedAt\n          - -views\n          - -likes\n          - -trending\n        type: string\n  schemas:\n    Account:\n      allOf:\n        - $ref: \"#/components/schemas/Actor\"\n        - properties:\n            displayName:\n              type: string\n    Actor:\n      properties:\n        avatar:\n          $ref: \"#/components/schemas/Avatar\"\n        createdAt:\n          type: string\n        followersCount:\n          type: number\n        followingCount:\n          type: number\n        host:\n          type: string\n        id:\n          type: number\n        name:\n          type: string\n        updatedAt:\n          type: string\n        url:\n          type: string\n        uuid:\n          type: string\n    AddUser:\n      properties:\n        email:\n          description: \"The user email \"\n          type: string\n        password:\n          description: \"The user password \"\n          type: string\n        role:\n          description: The user role (Admin = 0, Moderator = 1, User = 2)\n          enum:\n            - 0\n            - 1\n            - 2\n          type: integer\n        username:\n          description: \"The user username \"\n          type: string\n        videoQuota:\n          description: \"The user videoQuota \"\n          type: string\n        videoQuotaDaily:\n          description: \"The user daily video quota \"\n          type: string\n      required:\n        - username\n        - password\n        - email\n        - videoQuota\n        - videoQuotaDaily\n        - role\n    AddUserResponse:\n      properties:\n        id:\n          type: number\n        uuid:\n          type: string\n    Avatar:\n      properties:\n        createdAt:\n          type: string\n        path:\n          type: string\n        updatedAt:\n          type: string\n    CommentThreadPostResponse:\n      properties:\n        comment:\n          $ref: \"#/components/schemas/VideoComment\"\n    CommentThreadResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/VideoComment\"\n          type: array\n        total:\n          type: number\n    Follow:\n      properties:\n        createdAt:\n          type: string\n        follower:\n          $ref: \"#/components/schemas/Actor\"\n        following:\n          $ref: \"#/components/schemas/Actor\"\n        id:\n          type: number\n        score:\n          type: number\n        state:\n          enum:\n            - pending\n            - accepted\n          type: string\n        updatedAt:\n          type: string\n    GetMeVideoRating:\n      properties:\n        id:\n          description: \"Id of the video \"\n          type: string\n        rating:\n          description: \"Rating of the video \"\n          type: number\n      required:\n        - id\n        - rating\n    Job:\n      properties:\n        category:\n          enum:\n            - transcoding\n            - activitypub-http\n          type: string\n        createdAt:\n          type: string\n        handlerInputData:\n          type: string\n        handlerName:\n          type: string\n        id:\n          type: number\n        state:\n          enum:\n            - pending\n            - processing\n            - error\n            - success\n          type: string\n        updatedAt:\n          type: string\n    PlaylistElement:\n      properties:\n        position:\n          type: number\n        startTimestamp:\n          type: number\n        stopTimestamp:\n          type: number\n    RegisterUser:\n      properties:\n        channel:\n          properties:\n            displayName:\n              description: The default channel display name\n              type: string\n            name:\n              description: The default channel name\n              type: string\n          type: object\n        displayName:\n          description: The user display name\n          type: string\n        email:\n          description: \"The email of the user \"\n          type: string\n        password:\n          description: \"The password of the user \"\n          type: string\n        username:\n          description: \"The username of the user \"\n          type: string\n      required:\n        - username\n        - password\n        - email\n    ServerConfig:\n      properties:\n        avatar:\n          properties:\n            extensions:\n              items:\n                type: string\n              type: array\n            file:\n              properties:\n                size:\n                  properties:\n                    max:\n                      type: number\n                  type: object\n              type: object\n          type: object\n        signup:\n          properties:\n            allowed:\n              type: boolean\n          type: object\n        transcoding:\n          properties:\n            enabledResolutions:\n              items:\n                type: number\n              type: array\n          type: object\n        video:\n          properties:\n            file:\n              properties:\n                extensions:\n                  items:\n                    type: string\n                  type: array\n              type: object\n          type: object\n    UpdateMe:\n      properties:\n        autoPlayVideo:\n          description: \"Your new autoPlayVideo \"\n          type: string\n        displayNSFW:\n          description: \"Your new displayNSFW \"\n          type: string\n        email:\n          description: \"Your new email \"\n          type: string\n        password:\n          description: \"Your new password \"\n          type: string\n      required:\n        - password\n        - email\n        - displayNSFW\n        - autoPlayVideo\n    UpdateUser:\n      properties:\n        email:\n          description: \"The updated email of the user \"\n          type: string\n        id:\n          description: \"The user id \"\n          type: string\n        role:\n          description: The user role (Admin = 0, Moderator = 1, User = 2)\n          enum:\n            - 0\n            - 1\n            - 2\n          type: integer\n        videoQuota:\n          description: \"The updated videoQuota of the user \"\n          type: string\n        videoQuotaDaily:\n          description: \"The updated daily video quota of the user \"\n          type: string\n      required:\n        - id\n        - email\n        - videoQuota\n        - videoQuotaDaily\n        - role\n    User:\n      properties:\n        account:\n          $ref: \"#/components/schemas/Account\"\n        autoPlayVideo:\n          type: boolean\n        createdAt:\n          type: string\n        displayNSFW:\n          type: boolean\n        email:\n          type: string\n        id:\n          type: number\n        role:\n          description: The user role (Admin = 0, Moderator = 1, User = 2)\n          enum:\n            - 0\n            - 1\n            - 2\n          type: integer\n        roleLabel:\n          enum:\n            - User\n            - Moderator\n            - Administrator\n          type: string\n        username:\n          type: string\n        videoChannels:\n          items:\n            $ref: \"#/components/schemas/VideoChannel\"\n          type: array\n        videoQuota:\n          type: number\n        videoQuotaDaily:\n          type: number\n    UserWatchingVideo:\n      properties:\n        currentTime:\n          type: number\n    Video:\n      properties:\n        account:\n          $ref: \"#/components/schemas/VideoAccountSummary\"\n        blacklisted:\n          nullable: true\n          type: boolean\n        blacklistedReason:\n          nullable: true\n          type: string\n        category:\n          $ref: \"#/components/schemas/VideoConstantNumber\"\n        channel:\n          $ref: \"#/components/schemas/VideoChannelSummary\"\n        createdAt:\n          type: string\n        description:\n          type: string\n        dislikes:\n          type: number\n        duration:\n          type: number\n        embedPath:\n          type: string\n        id:\n          type: number\n        isLocal:\n          type: boolean\n        language:\n          $ref: \"#/components/schemas/VideoConstantString\"\n        licence:\n          $ref: \"#/components/schemas/VideoConstantNumber\"\n        likes:\n          type: number\n        name:\n          type: string\n        nsfw:\n          type: boolean\n        originallyPublishedAt:\n          type: string\n        playlistElement:\n          $ref: \"#/components/schemas/PlaylistElement\"\n          nullable: true\n        previewPath:\n          type: string\n        privacy:\n          $ref: \"#/components/schemas/VideoPrivacyConstant\"\n        publishedAt:\n          type: string\n        scheduledUpdate:\n          $ref: \"#/components/schemas/VideoScheduledUpdate\"\n          nullable: true\n        state:\n          $ref: \"#/components/schemas/VideoStateConstant\"\n        thumbnailPath:\n          type: string\n        updatedAt:\n          type: string\n        userHistory:\n          nullable: true\n          properties:\n            currentTime:\n              type: number\n          type: object\n        uuid:\n          type: string\n        views:\n          type: number\n        waitTranscoding:\n          nullable: true\n          type: boolean\n    VideoAbuse:\n      properties:\n        createdAt:\n          type: string\n        id:\n          type: number\n        reason:\n          type: string\n        reporterAccount:\n          $ref: \"#/components/schemas/Account\"\n        video:\n          properties:\n            id:\n              type: number\n            name:\n              type: string\n            url:\n              type: string\n            uuid:\n              type: string\n          type: object\n    VideoAccountSummary:\n      properties:\n        avatar:\n          $ref: \"#/components/schemas/Avatar\"\n          nullable: true\n        displayName:\n          type: string\n        host:\n          type: string\n        id:\n          type: number\n        name:\n          type: string\n        url:\n          type: string\n    VideoBlacklist:\n      properties:\n        createdAt:\n          type: string\n        description:\n          type: string\n        dislikes:\n          type: number\n        duration:\n          type: number\n        id:\n          type: number\n        likes:\n          type: number\n        name:\n          type: string\n        nsfw:\n          type: boolean\n        updatedAt:\n          type: string\n        uuid:\n          type: string\n        videoId:\n          type: number\n        views:\n          type: number\n    VideoCaption:\n      properties:\n        captionPath:\n          type: string\n        language:\n          $ref: \"#/components/schemas/VideoConstantString\"\n    VideoChannel:\n      properties:\n        description:\n          type: string\n        displayName:\n          type: string\n        isLocal:\n          type: boolean\n        ownerAccount:\n          properties:\n            id:\n              type: number\n            uuid:\n              type: string\n          type: object\n    VideoChannelCreate:\n      properties:\n        description:\n          type: string\n        displayName:\n          type: string\n        name:\n          type: string\n        support:\n          type: string\n      required:\n        - name\n        - displayName\n    VideoChannelSummary:\n      properties:\n        avatar:\n          $ref: \"#/components/schemas/Avatar\"\n          nullable: true\n        displayName:\n          type: string\n        host:\n          type: string\n        id:\n          type: number\n        name:\n          type: string\n        url:\n          type: string\n    VideoChannelUpdate:\n      properties:\n        bulkVideosSupportUpdate:\n          description: Update all videos support field of this channel\n          type: boolean\n        description:\n          type: string\n        displayName:\n          type: string\n        support:\n          type: string\n    VideoComment:\n      properties:\n        account:\n          $ref: \"#/components/schemas/Account\"\n        createdAt:\n          type: string\n        id:\n          type: number\n        inReplyToCommentId:\n          type: number\n        text:\n          type: string\n        threadId:\n          type: number\n        totalReplies:\n          type: number\n        updatedAt:\n          type: string\n        url:\n          type: string\n        videoId:\n          type: number\n    VideoCommentThreadTree:\n      properties:\n        children:\n          items:\n            $ref: \"#/components/schemas/VideoCommentThreadTree\"\n          type: array\n        comment:\n          $ref: \"#/components/schemas/VideoComment\"\n    VideoConstantNumber:\n      properties:\n        id:\n          type: number\n        label:\n          type: string\n    VideoConstantString:\n      properties:\n        id:\n          type: string\n        label:\n          type: string\n    VideoDetails:\n      allOf:\n        - $ref: \"#/components/schemas/Video\"\n        - properties:\n            account:\n              $ref: \"#/components/schemas/Account\"\n            channel:\n              $ref: \"#/components/schemas/VideoChannel\"\n            commentsEnabled:\n              type: boolean\n            descriptionPath:\n              type: string\n            downloadEnabled:\n              type: boolean\n            files:\n              items:\n                $ref: \"#/components/schemas/VideoFile\"\n              type: array\n            streamingPlaylists:\n              items:\n                $ref: \"#/components/schemas/VideoStreamingPlaylists\"\n              type: array\n            support:\n              type: string\n            tags:\n              items:\n                type: string\n              type: array\n            trackerUrls:\n              items:\n                type: string\n              type: array\n          type: object\n    VideoFile:\n      properties:\n        fileDownloadUrl:\n          type: string\n        fileUrl:\n          type: string\n        fps:\n          type: number\n        magnetUri:\n          type: string\n        resolution:\n          $ref: \"#/components/schemas/VideoResolutionConstant\"\n        size:\n          description: Video file size in bytes\n          type: number\n        torrentDownaloadUrl:\n          type: string\n        torrentUrl:\n          type: string\n    VideoListResponse:\n      properties:\n        data:\n          items:\n            $ref: \"#/components/schemas/Video\"\n          type: array\n        total:\n          type: number\n    VideoPrivacyConstant:\n      properties:\n        id:\n          enum:\n            - 1\n            - 2\n            - 3\n          type: integer\n        label:\n          type: string\n    VideoPrivacySet:\n      description: The video privacy (Public = 1, Unlisted = 2, Private = 3)\n      enum:\n        - 1\n        - 2\n        - 3\n      type: integer\n    VideoRating:\n      properties:\n        rating:\n          description: Rating of the video\n          type: number\n        video:\n          $ref: \"#/components/schemas/Video\"\n      required:\n        - video\n        - rating\n    VideoResolutionConstant:\n      properties:\n        id:\n          description: Video resolution (240, 360, 720 ...)\n          type: integer\n        label:\n          type: string\n    VideoScheduledUpdate:\n      properties:\n        privacy:\n          $ref: \"#/components/schemas/VideoPrivacySet\"\n          description: Video privacy target\n        updateAt:\n          description: When to update the video\n          format: date\n          type: string\n      required:\n        - updateAt\n    VideoStateConstant:\n      properties:\n        id:\n          description: The video state (Published = 1, to transcode = 2, to import = 3)\n          enum:\n            - 1\n            - 2\n            - 3\n          type: integer\n        label:\n          type: string\n    VideoStreamingPlaylists:\n      properties:\n        id:\n          type: number\n        playlistUrl:\n          type: string\n        redundancies:\n          items:\n            properties:\n              baseUrl:\n                type: string\n            type: object\n          type: array\n        segmentsSha256Url:\n          type: string\n        type:\n          description: Playlist type (HLS = 1)\n          enum:\n            - 1\n          type: number\n    VideoUploadResponse:\n      properties:\n        video:\n          properties:\n            id:\n              type: number\n            uuid:\n              type: string\n          type: object\n  securitySchemes:\n    OAuth2:\n      description: \u003e\n        In the header: *Authorization: Bearer \u003ctoken\\\u003e*\n\n\n        Authenticating via OAuth requires the following steps:\n\n\n        - Have an account with sufficient authorization levels\n\n        - [Generate](https://docs.joinpeertube.org/#/api-rest-getting-started) a Bearer Token\n\n        - Make Authenticated Requests\n      flows:\n        password:\n          scopes:\n            admin: Admin scope\n            moderator: Moderator scope\n            user: User scope\n          tokenUrl: https://peertube.example.com/api/v1/users/token\n      type: oauth2\nx-tagGroups:\n  - name: Accounts\n    tags:\n      - Accounts\n      - User\n  - name: Videos\n    tags:\n      - Video\n      - Video Caption\n      - Video Channel\n      - Video Comment\n      - Video Following\n      - Video Rate\n  - name: Moderation\n    tags:\n      - Video Abuse\n      - Video Blacklist\n  - name: Instance Configuration\n    tags:\n      - Config\n      - Server Following\n  - name: Notifications\n    tags:\n      - Feeds\n  - name: Jobs\n    tags:\n      - Job\n  - name: Search\n    tags:\n      - Search\n"
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"tagsAllOf\": all oneOf schemas must be simple types"
}