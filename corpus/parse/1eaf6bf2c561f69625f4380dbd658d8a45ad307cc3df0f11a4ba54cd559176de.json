{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/acesso-bankly/open-api"
		},
		"file": {
			"name": "schema.yaml",
			"size": 0,
			"path": "apis/v1/cards/schema.yaml",
			"byteSize": 129402,
			"content": "openapi: 3.0.1\ninfo:\n  version: 1.0.0\n  title: Gestão de cartões\n  description: |\n    Solicite e gerencie cartões vinculados à conta do seu cliente em poucos\n    minutos. Consulte também nossa\n    [documentação](https://bankly.readme.io/v1.0/docs/) para mais detalhes sobre\n    os fluxos de negócio.\nservers:\n  - url: 'https://api-mtls.sandbox.bankly.com.br'\npaths:\n  /cards/batches/:\n    post:\n      tags:\n        - Cartões No Name\n      summary: Criação de cartão em lote\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eCrie um lote de cartões sem vínculo com uma conta (Cartão No Name).\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.create\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardCreateCardsInLot\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createCardsInLotRequest\"\n      responses:\n        '202':\n          description: A solicitação foi aceita e o cartão em lote está sendo criado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createCardInLotResponse\"\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ Program Id must not be empty. ], reasons: [] },\n                              { code: required, message: [ Quantity Cards must not be empty. ], reasons: [] },\n                              { code: required, message: [ Address must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '406':\n          description: A requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 115, message: [ Program does not belong to lot! ], reasons: [] }]\n        '409':\n          description: Requisição em conflito com as regras de negócio contratada.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n          uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/\n          passthroughBehavior: when_no_match\n          connectionType: VPC_LINK\n          connectionId: m116y5\n          httpMethod: POST\n          type: http\n          requestParameters:\n            integration.request.header.api-version: method.request.header.api-version\n            integration.request.header.Authorization: method.request.header.Authorization\n          responses:\n            '202':\n              statusCode: 202\n            '400':\n              statusCode: 400\n            '401':\n              statusCode: 401\n            '406':\n              statusCode: 406\n            '409':\n              statusCode: 409\n            '500':\n              statusCode: 500\n  \n  /cards/{authenticationCode}/bindNoName:\n    patch:\n      tags:\n        - Cartões No Name\n      summary: Vinculação do cartão com uma conta bancária\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eVincule um cartão a uma conta, para que ele seja ativado e para que seja possível definir uma senha para ele.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.update\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardbindNoName\n      parameters:\n        - name: authenticationCode\n          in: path\n          required: true\n          schema:\n            type: string\n            description: Código de autenticação do cartão (12 caracteres).\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/bindNoNameRequest\"\n      responses:\n        '200':\n          description: Vínculo realizado.\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters. ], reasons: [] },\n                            { code: required, message: [ Document must not be empty. ], reasons: [] },\n                            { code: required, message: [ Bank Agency must not be empty. ], reasons: [] },\n                            { code: required, message: [ Bank Account must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: O cartão não existe.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratadas.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]   \n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{activateCode}/bindNoName\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: PATCH\n        type: http\n        requestParameters:\n          integration.request.path.activateCode: method.request.path.activateCode\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/batches/:{batchId}:\n    get:\n      tags:\n        - Cartões No Name\n      summary: Consulta por lote\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eObtenha os dados de um lote específico de cartões.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardGetLotById\n      parameters:\n        - name: batchId\n          in: path\n          required: true\n          schema:\n            type: string\n            description: Id do lote a ser consultado.\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Solicitação recebida com sucesso.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardLotResponse\"\n              examples:\n                response:\n                  value:\n                    lotId: \"LT01\"\n                    quantityOrder: 1000\n                    companyKey: \"Acesso\"\n                    dateOrder: \"2021-06-07T08:30:40\"\n                    programId: 1\n                    address:\n                      zipCode: \"05402100\"\n                      address: Avenida Rebouças\n                      number: \"1368\"\n                      neighborhood: Pinheiros\n                      complement: Em frente a Wizard\n                      city: São Paulo\n                      state: SP\n                      country: Brasil\n                    cards: [\n                        \"2500011000021160417\",\n                        \"2500011000068618940\" \n                    ]\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Lote não encontrado.\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/{id}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.id: method.request.path.id\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '500':\n            statusCode: 500\n\n  /cards/batches:\n    get:\n      tags:\n        - Cartões No Name\n      summary: Consulta dos lotes\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eObtenha os dados de todos os lotes de cartões. \u003c/p\u003e  \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardGetLotsByCompanyKey\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Solicitação recebida com sucesso.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardLotsResponse\"\n              examples:\n                response:\n                  value:\n                    lotId: \"LT01\"\n                    quantityOrder: 1000\n                    companyKey: \"Acesso\"\n                    dateOrder: \"2021-06-07T08:30:40\"\n                    programId: 1\n        '204':\n          description: Não foram encontrados lotes.              \n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '204':\n            statusCode: 204      \n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '500':\n            statusCode: 500\n  \n\n  /cards/virtual:\n    post:\n      tags:\n        - Criação de cartão\n      summary: Cartão virtual\n      description:  |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eCrie um cartão virtual que será utilizado em compras não presenciais.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.create\u003c/span\u003e\n        \u003c/div\u003e  \n      operationId: cardCreateVirtualCard\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createCardRequest\"\n      responses:\n        '202':\n          description: A solicitação foi aceita e o cartão está sendo criado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardBuildingResponse\"\n              examples:\n                response:\n                  value:\n                    proxy: \"2370021007715002820\"\n                    activateCode: \"A0DDDC0951D1\"\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '406':\n          description: A requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]\n        '409':\n          description: A requisição com os dados enviados já foi realizada e está em processamento.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/virtual\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: POST\n        type: http\n        requestParameters:\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '406':\n            statusCode: 406\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n  \n  /cards/physical:\n    post:\n      tags:\n        - Criação de cartão\n      summary: Cartão físico\n      description:  |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eCrie um cartão físico que será embossado e entregue no endereço informado.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.create\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardCreatePhysicalCard\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createCardRequest\"\n      responses:\n        '202':\n          description: A solicitação foi aceita e o cartão está sendo criado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardBuildingResponse\"\n              examples:\n                response:\n                  value:\n                    proxy: \"2370021007715002820\"\n                    activateCode: \"A0DDDC0951D1\"\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '406':\n          description: Quando a requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]\n        '409':\n          description: A requisição com os dados enviados já foi realizada e está em processamento.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/physical\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: POST\n        type: http\n        requestParameters:\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '406':\n            statusCode: 406\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/multiple:\n    post:\n      tags:\n        - Criação de cartão\n      summary: Cartão físico múltiplo\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eCrie um cartão físico múltiplo (pré e pós) que será embossado e entrege no endereço informado pelo cliente.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.create\u003c/span\u003e\n        \u003c/div\u003e\n        [block:callout]\n        {\n          \"type\": \"warning\",\n          \"title\": \"Importante\",\n          \"body\": \"O cartão múltiplo tem como principal característica ter no mesmo plástico um número pré e um pós. Porém, um dos números ficará adormecido enquanto o outro estiver ativo.\"\n        }\n        [/block]\n      operationId: cardCreateMultipleCard\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createCardRequest\"\n      responses:\n        '202':\n          description: A solicitação foi aceita e o cartão está sendo criado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardBuildingResponse\"\n              examples:\n                response:\n                  value:\n                    proxy: \"2370021007715002820\"\n                    activateCode: \"A0DDDC0951D1\"\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '406':\n          description: Quando a requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]\n        '409':\n          description: A requisição com os dados enviados já foi realizada e está em processamento.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/orders/multiple\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: POST\n        type: http\n        requestParameters:\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/{proxy}/duplicate:\n    post:\n      tags:\n        - Criação de cartão\n      summary: Segunda via de cartão\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eCrie uma segunda via de um cartão físico com as mesmas características da primeira via.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.create\u003c/span\u003e\n        \u003c/div\u003e\n        [block:callout]\n        {\n          \"type\": \"warning\",\n          \"title\": \"Importante\",\n          \"body\": \"Quando a segunda via for emitida, a primeira via será cancelada automaticamente.\"\n        }\n        [/block]\n      operationId: createDuplicateCard\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createDuplicateCardRequest\"\n      responses:\n        '202':\n          description: Cartão\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardBuildingResponse\"\n              examples:\n                response:\n                  value:\n                    proxy: \"2370021007715002820\"\n                    activateCode: \"A0DDDC0951D1\"\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ Card Name must not be empty ], reasons: [] }, { code: conflict, message: [ Alias is not in the correct format ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '406':\n          description: Quando a requisição é válida, porém não foi aceita devido a alguma regra de negócio contratada.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 202, message: [ Account does not belong to the customer! ], reasons: [] }]\n        '409':\n          description: A requisição com os dados enviados já foi realizada e está em processamento.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n  \n  /cards/{proxy}:\n    get:\n      tags:\n        - Consulta de Cartões\n      summary: Por proxy\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte os dados de um cartão pelo seu proxy.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: GetCardByProxy\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: A solicitação é recebida e retorna o cartão do proxy correspondente.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardResponse\"\n              examples:\n                response:\n                  value:\n                    created: \"2020-07-20T22:53:12\"\n                    companyKey: \"Acesso\"\n                    documentNumber: \"00000000000\"\n                    activateCode: \"A9991B2E491D\"\n                    bankAgency: \"0001\"\n                    bankAccount: \"0001\"\n                    lastFourDigits: \"4321\"\n                    proxy: \"22999903520114195\"\n                    name: Jose da Silva\n                    alias: Meu Cartão\n                    cardType: Virtual\n                    status: InTransitLocked\n                    physicalBinds: \n                      [{ proxy: \"2300199994444111999\", created: \"2020-07-20T22:54:03\" }]               \n                    virtualBind: \n                      proxy: \"22999903520114195\"\n                      created: \"2020-07-20T22:55:12\"            \n                    allowContactless: true\n                    address:\n                      zipCode: \"05402100\"\n                      address: Avenida Rebouças\n                      number: \"1368\"\n                      neighborhood: Pinheiros\n                      complement: Em frente a Wizard\n                      city: São Paulo\n                      state: SP\n                      country: Brasil\n                    historyStatus:\n                      [ { modified: \"2020-07-20T22:53:12\", value: Building }, { modified: \"2020-07-20T22:55:12\", value: InTransitLocked } ]\n                    activatedAt: null\n                    lastUpdatedAt: \"2020-07-20T22:55:12\"\n                    isActivated: false\n                    isLocked: true\n                    isCanceled: false\n                    isBuilding: false\n                    isFirtual: true\n                    isPre: true\n                    isPos: false\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Cartão não existente.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/document/{documentNumber}:\n     get:\n      tags:\n        - Consulta de Cartões\n      summary: Por documento (CPF ou CNPJ)\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte os cartões vinculados ao número de documento (CPF ou CNPJ) do titular.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardGetCardsByDocument\n      parameters:\n        - name: documentNumber\n          in: path\n          required: true\n          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Lista com os cartões pertecentes ao documento.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  $ref: \"#/components/schemas/cardResponse\"\n              examples:\n                response:\n                  value:\n                    - created: \"2020-07-20T22:53:12\"\n                      companyKey: \"Acesso\"\n                      documentNumber: \"00000000000\"\n                      activateCode: \"A9991B2E491D\"\n                      bankAgency: \"0001\"\n                      bankAccount: \"0001\"\n                      lastFourDigits: \"4321\"\n                      proxy: \"22999903520114195\"\n                      name: Jose da Silva\n                      alias: Meu Cartão\n                      cardType: Virtual\n                      status: InTransitLocked\n                      physicalBinds: \n                        [{ proxy: \"2300199994444111999\", created: \"2020-07-20T22:54:03\" }]               \n                      virtualBind: \n                        proxy: \"22999903520114195\"\n                        created: \"2020-07-20T22:55:12\"  \n                      allowContactless: true\n                      address:\n                        zipCode: \"05402100\"\n                        address: Avenida Rebouças\n                        number: \"1368\"\n                        neighborhood: Pinheiros\n                        complement: Em frente a Wizard\n                        city: São Paulo\n                        state: SP\n                        country: Brasil\n                      historyStatus:\n                        [ { modified: \"2020-07-20T22:53:12\", value: Building }, { modified: \"2020-07-20T22:55:12\", value: InTransitLocked } ]\n                      activatedAt: null\n                      lastUpdatedAt: \"2020-07-20T22:55:12\"\n                      isActivated: false\n                      isLocked: true\n                      isCanceled: false\n                      isBuilding: false\n                      isFirtual: true\n                      isPre: true\n                      isPos: false\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '404':\n          description: Não há cartões criados para o documento fornecido.\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/document/{document}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.documentNumber: method.request.path.documentNumber\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '204':\n            statusCode: 204\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/activateCode/{activationCode}:\n    get:\n      tags:\n        - Consulta de Cartões\n      summary: Por código de ativação\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte os cartões através do seu código de ativação.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardGetByActivateCode\n      parameters:\n        - name: activationCode\n          in: path\n          required: true\n          description: Código de ativação do cartão (12 caracteres).\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Lista com os cartões com o código de ativação informado.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  $ref: \"#/components/schemas/cardResponse\"\n              examples:\n                response:\n                  value:\n                    - created: \"2020-07-20T22:53:12\"\n                      companyKey: \"Acesso\"\n                      documentNumber: \"00000000000\"\n                      activateCode: \"A9991B2E491D\"\n                      bankAgency: \"0001\"\n                      bankAccount: \"0001\"\n                      lastFourDigits: \"4321\"\n                      proxy: \"22999903520114195\"\n                      name: Jose da Silva\n                      alias: Meu Cartão\n                      cardType: Virtual\n                      status: InTransitLocked\n                      physicalBinds: \n                        [{ proxy: \"2300199994444111999\", created: \"2020-07-20T22:54:03\" }]               \n                      virtualBind: \n                        proxy: \"22999903520114195\"\n                        created: \"2020-07-20T22:55:12\" \n                      allowContactless: true\n                      address:\n                        zipCode: \"05402100\"\n                        address: Avenida Rebouças\n                        number: \"1368\"\n                        neighborhood: Pinheiros\n                        complement: Em frente a Wizard\n                        city: São Paulo\n                        state: SP\n                        country: Brasil\n                      historyStatus:\n                        [ { modified: \"2020-07-20T22:53:12\", value: Building }, { modified: \"2020-07-20T22:55:12\", value: InTransitLocked } ]\n                      activatedAt: null\n                      lastUpdatedAt: \"2020-07-20T22:55:12\"\n                      isActivated: false\n                      isLocked: true\n                      isCanceled: false\n                      isBuilding: false\n                      isFirtual: true\n                      isPre: true\n                      isPos: false\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '204':\n          description: Não há cartões criados para o código de ativação fornecido.\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/activatecode/{activatecode}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.activateCode: method.request.path.activateCode\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '204':\n            statusCode: 204\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/account/{account}:\n    get:\n      tags:\n        - Consulta de Cartões \n      summary: Por conta\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte os cartões vinculados a uma conta de pagamentos.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardGetCardsByAccount\n      parameters:\n        - name: agency\n          in: query\n          required: false\n          description: Número de agência (4 dígitos).\n          schema:\n            type: string\n        - name: account\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: documentNumber\n          in: query\n          required: false\n          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Lista com os cartões pertecentes à conta.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  $ref: \"#/components/schemas/cardResponse\"\n              examples:\n                response:\n                  value:\n                    - created: \"2020-07-20T22:53:12\"\n                      companyKey: \"Acesso\"\n                      documentNumber: \"00000000000\"\n                      activateCode: \"A9991B2E491D\"\n                      bankAgency: \"0001\"\n                      bankAccount: \"0001\"\n                      lastFourDigits: \"4321\"\n                      proxy: \"22999903520114195\"\n                      name: Jose da Silva\n                      alias: Meu Cartão\n                      cardType: Virtual\n                      status: InTransitLocked\n                      physicalBinds: \n                        [{ proxy: \"2300199994444111999\", created: \"2020-07-20T22:54:03\" }]               \n                      virtualBind: \n                        proxy: \"22999903520114195\"\n                        created: \"2020-07-20T22:55:12\" \n                      allowContactless: true\n                      address:\n                        zipCode: \"05402100\"\n                        address: Avenida Rebouças\n                        number: \"1368\"\n                        neighborhood: Pinheiros\n                        complement: Em frente a Wizard\n                        city: São Paulo\n                        state: SP\n                        country: Brasil\n                      historyStatus:\n                        [ { modified: \"2020-07-20T22:53:12\", value: Building }, { modified: \"2020-07-20T22:55:12\", value: InTransitLocked } ]\n                      activatedAt: null\n                      lastUpdatedAt: \"2020-07-20T22:55:12\"\n                      isActivated: false\n                      isLocked: true\n                      isCanceled: false\n                      isBuilding: false\n                      isFirtual: true\n                      isPre: true\n                      isPos: false\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Não há cartões criados para a conta fornecida.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/account/{account}?agency={agency}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.agency: method.request.path.agency\n          integration.request.path.account: method.request.path.account\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '204':\n            statusCode: 204\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/{proxy}/pci:\n    post:\n      tags:\n        - Consulta de Cartões\n      summary: Dados de segurança do cartão\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte os dados de PCI do cartão (PAN, CVV e data de validade).\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.pci.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: getDataPci\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/getDataPciRequest\"\n      responses:\n        '200':\n          description: Dados de PCI do cartão.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/dataPciResponse\"\n              examples:\n                response:\n                  value:\n                    cardNumber: \"000000000000000\"\n                    cvv: \"000\"\n                    expirationDate: 05/09\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Cartão não existente.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 029, message: [ The card is in the process of being created ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/pci\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: POST\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500  \n  \n  /cards/{proxy}/password:\n    patch:\n      tags:\n        - Gestão de senha\n      summary: Alterar senha\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eAltere a senha do cartão.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.pci.password.update\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardChangeCardPassword\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/changeCardPasswordRequest\"\n      responses:\n        '200':\n          description: Alteração de senha realizada.\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 6 characters. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Se o cartão não exisitir.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 029, message: [ The card is in the process of being created ], reasons: [] }]\n        '500':\n          description:  Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/password\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: PATCH\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.authorization-token: method.request.header.authorization-token\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n            \n  /cards/{proxy}/activate:\n    patch:\n      tags:\n        - Status do cartão\n      summary: Ativação de cartão\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eRealize a ativação do cartão pela primeira vez.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.update\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardActivateCard\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/activateCardRequest\"\n      responses:\n        '200':\n          description: Ativação foi realizada.\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: length, message: [ Password must be 4 characters in length. You entered 5 characters. ], reasons: [] },\n                              { code: required, message: [ Activate Code must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Se o cartão não existir.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/activate\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: PATCH\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n  \n  /cards/{proxy}/status:\n    patch:\n      tags:\n        - Status do cartão\n      summary: Alteração do status do cartão\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eO status do cartão poderá ser alterado para temporário ou definitivo.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.update\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardChangeCardStatus\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/changeCardStatusRequest\"\n      responses:\n        '200':\n          description: O status foi alterado com sucesso.\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: conflict, message: [ Error converting value Cancel to type Core.Card.Domain.Shared.Types.CardStatus. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Se o cartão não exisitir.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/status\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: PATCH\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500 \n            \n  /cards/{proxy}/contactless:\n    patch:\n      tags:\n        - Status do cartão\n      summary: Configuração do contactless\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eAtive ou desative a função contactless do cartão. Para cartões virtuais, caso o contactless fique desativado, não será possível realizar transações com o uso de carteiras digitais.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.update\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardContactLess\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: allowContactless\n          in: query\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Alteração realizada com sucesso.\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: conflict, message: [ The value ok is not valid. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Se o cartão não existir.\n        '409':\n          description: Requisição em conflito com as regras de negócio contratado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 008, message: [ Card does not belong to this customer! ], reasons: [] }]\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 301, message: [ Internal server error processor ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/contactless?allowContactless={allowContactless}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: PATCH\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.query.allowContactless: method.request.path.allowContactless\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500 \n  \n  /cards/{proxy}/nextStatus:\n    get:\n      tags:\n        - Status do cartão\n      summary: Consulta dos próximos status\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte todos os possíveis próximos status válidos para o cartão. Serão consideradas as permissões concedidas para o token informado na requisição.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardGetLots\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Solicitação recebida. O retorno traz os dados dos lotes.\n        '204':\n          description: Não foram encontrados lotes.              \n        '400':\n          description: \"Existem erros no preenchimento da requisição.\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/lots/\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '204':\n            statusCode: 204      \n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '500':\n            statusCode: 500  \n            \n  /cards/{proxy}/transactions:\n    get:\n      tags:\n        - Consulta de transações\n      summary: Consulta de transações por cartão\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte as transações realizadas no cartão de acordo com os filtros informados. \u003cbr /\u003e \u003cb\u003eImportante!\u003c/b\u003e A diferença entre a data de início e de fim deverá ser de, no máximo, sete dias.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: cardTransactionsByCard\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: O valor máximo permitido é de 100.\n          required: false\n          schema:\n            type: integer\n        - name: startDate\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: endDate\n          in: query\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Lista as transações pertencentes ao cartão, além das propriedades referentes à paginação da consulta.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/resultTransactionResponse\"\n              examples:\n                response:\n                  value:\n                    - nextPage: \"mkzjfhcnnhat84y583hguim49801\"\n                      hasLastPage: true\n                      transactions: \n                        [\n                          {\n                            account: {\n                              number: \"000231\",\n                              agency: \"0001\"\n                            },\n                            amount: {\n                              value: 138.54,\n                              local: 138.54,\n                              net: 138.54,\n                              iof: 0,\n                              markup: 0\n                            },\n                            merchant: {\n                              id: \"207001540000011\",\n                              name: \"EC*MERCADOLIVRE\",\n                              mcc: \"0101\",\n                              city: \"SAO PAULO\"\n                            },  \n                            authorizationCode: \"823912\",\n                            countryCode: \"BR\",\n                            currencyCode: \"986\",\n                            entryMode: \"Chip\",\n                            status: \"TransactionHoldWasExpired\",\n                            transactionTimestamp: \"2020-09-24T17:21:39.8921566+00:00\",\n                            transactionType: \"Purchase\"\n                          }\n                        ]\n        '204':\n          description: Não há transações para o cartão fornecido.\n        '400':\n          description: Existem erros no preenchimento da requisição.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ api-version must not be empty. ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/transactions?startDate={startDate}\u0026endDate={endDate}\u0026pageSize={pageSize}\u0026page={page}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.query.startDate: method.request.query.startDate\n          integration.request.query.endDate: method.request.query.endDate\n          integration.request.query.page: method.request.query.page\n          integration.request.query.pageSize: method.request.query.pageSize\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '202':\n            statusCode: 202\n          '204':\n            statusCode: 204\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '500':\n            statusCode: 500\n\n  /cards/{proxy}/tracking:\n    get:\n      tags:\n        - Rastreio de Cartões\n      summary: Por proxy\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eObtenha o rastreio do cartão pelo seu proxy.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-beta-tag\"\u003ebeta\u003c/span\u003e \n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.read\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: trackingGetByProxy\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Solicitação recebida. O retorno é o rastreio do cartão do proxy correspondente.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/trackingResponse\"\n              examples:\n                response:\n                  value:\n                    createdDate: \"2020-07-20T22:53:12\"\n                    externalTracking:\n                      code: \"A2327692D592\"\n                      partner: \"CORREIOS\"\n                    name: Jose da Silva\n                    alias: Meu Cartão\n                    address:\n                      [ { zipCode: \"05402100\", address: Avenida Rebouças, number: \"1368\", neighborhood: Pinheiros, complement: Em frente a Wizard, city: São Paulo, state: SP, country: Brasil } ]\n                    status:\n                      [ { createdDate: \"2020-07-20T22:53:12\", type: Created, reason: Created  }, { createdDate: \"2020-07-20T22:55:12\", type: InProgress, reason: In route to delivery } ]\n                    finalized:\n                      [ { createdDate: \"2020-07-20T22:53:12\", recipientName: \"Maria da Silva\", recipientKinship: \"Mãe\", documentNumber: \"1234567\", attempts: 1 }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          description: Rastreio de cartão não existente.\n        '500':\n          description: Ocorrência de erro inesperado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/trackingErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: 999, message: [ Unidentified error! ], reasons: [] }]\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/tracking\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            $ref: 'http://localhost:3320/commons/components#/components/responses/404'\n          '500':\n            $ref: 'http://localhost:3320/commons/components#/components/responses/500'\n  \n  /cards/{proxy}/tracking/address:\n    post:\n      tags:\n        - Rastreio de Cartões\n      summary: Atualização de endereço\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eAtualize o endereço do destinatário para uma nova tentativa de entrega.\u003c/p\u003e\n          \u003cspan class=\"bkly-ref-small-beta-tag\"\u003ebeta\u003c/span\u003e\n          \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: card.update\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: trackingUpdateAddress\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/updateTrackingAddressRequest\"\n      responses:\n        '201':\n          description: Endereço cadastrado com sucesso.\n        '400':\n          description: Não é possível alterar o endereço, pois o seu cartão não está em custódia.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/cardErrorResponse\"\n              examples:\n                response:\n                  value:\n                    reference: https://bankly.readme.io/reference\n                    errors: [{ code: required, message: [ Address must not be empty ], reasons: [] }, { code: conflict, message: [ Tracking Status not allowed to update address ], reasons: [] }]\n        '401':\n          description: Sem autorização para realizar a solicitação.\n        '404':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/404'   \n        '500':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/500'   \n\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards/{proxy}/tracking\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: GET\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '201':\n            statusCode: 201\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '404':\n            statusCode: 404\n          '500':\n            statusCode: 500\n\n  /cards-pci/{proxy}/wallet/{wallet}/brand/{brand}:\n    post:\n      tags:\n        - Wallets\n      summary: Geração de token\n      description: Gere um token com os dados criptografados do cartão para adição do cartão junto a uma carteira digital.\n      operationId: GenerateTokenizationForWallet\n      parameters:\n        - name: proxy\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: wallet\n          in: path\n          required: true\n          schema:\n            type: string\n            $ref: \"#/components/schemas/walletTypes\"\n        - name: brand\n          in: path\n          required: true\n          schema:\n            type: string\n            $ref: \"#/components/schemas/brandTypes\"\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      responses:\n        '200':\n          description: Resultado da geração do token.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/cardTokenizationResponse\"\n              examples:\n                response:\n                  value:\n                    - data: \"mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801mkzjfhcnnhat84y583hguim49801\"\n                      lastFourDigits: \"1534\"\n                      phoneNumber: \"11999999999\"\n                      address:\n                        zipCode: \"05402100\"\n                        address: Avenida Rebouças\n                        number: \"1368\"\n                        neighborhood: Pinheiros\n                        complement: Em frente a Wizard\n                        city: São Paulo\n                        state: SP\n                        country: Brasil\n        '400':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/400'\n        '401':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/401'\n        '409':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/409'\n        '500':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/500'\n      x-amazon-apigateway-auth:\n        type: NONE\n      x-amazon-apigateway-integration:\n        uri: http://lb-towner-a26f32e03d8f2933.elb.us-east-1.amazonaws.com:7011/api/cards-pci/{proxy}/wallet/{wallet}/brand/{brand}\n        passthroughBehavior: when_no_match\n        connectionType: VPC_LINK\n        connectionId: m116y5\n        httpMethod: POST\n        type: http\n        requestParameters:\n          integration.request.path.proxy: method.request.path.proxy\n          integration.request.path.wallet: method.request.path.wallet\n          integration.request.path.brand: method.request.path.brand\n          integration.request.header.api-version: method.request.header.api-version\n          integration.request.header.Authorization: method.request.header.Authorization\n        responses:\n          '200':\n            statusCode: 200\n          '400':\n            statusCode: 400\n          '401':\n            statusCode: 401\n          '409':\n            statusCode: 409\n          '500':\n            statusCode: 500\n\n  /cards/credits/customers:\n    post:\n      tags:\n        - Análise de crédito \n      summary: Criação de análise de crédito\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eAntes de emitir um cartão de crédito, solicite uma análise de crédito para seu cliente.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: credit.write\u003c/span\u003e\n        \u003c/div\u003e\n      operationId: creditAnalysisCreate\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createCustomerRequest\"\n      responses:\n        \"202\":\n          description: A solicitação foi aceita e a análise de crédito foi concluída.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createCustomerResponse\"\n              examples:\n                response:\n                  value:\n                    companyKey: \"ACESSO\"\n                    document: \"12345678900\"\n                    contract: \"000010\"\n        '401':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/401'\n        '500':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/500'\n\n  /cards/credits/terms-and-conditions/acceptance:\n    post:\n      tags:\n        - Análise de crédito \n      summary: Aceite da proposta do contrato de crédito\n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eEnvie o aceite da proposta já aprovada de um contrato de crédito.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: credit.write\u003c/span\u003e\n        \u003c/div\u003e\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/acceptanceContractRequest\"\n      responses:\n        '202':\n          description: O contrato de crédito foi aceito.\n        '401':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/401'\n        '500':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/500'\n\n  /cards/credits/document/{documentNumber}/contracts/{contract}:\n    get:\n      tags:\n        - Análise de crédito\n      summary: Consulta de contrato de crédito \n      description: |\n        \u003cdiv class=\"bkly-ref-description\"\u003e\n          \u003cp\u003eConsulte um contrato de crédito já existente.\u003c/p\u003e \n          \u003cspan class=\"bkly-ref-small-stable-tag\"\u003estable\u003c/span\u003e \u003cspan class=\"bkly-ref-scope-tag\"\u003escope: credit.read\u003c/span\u003e\n        \u003c/div\u003e\n      parameters:\n        - $ref: \"#/components/parameters/apiVersion\"\n        - $ref: \"#/components/parameters/authorization\"\n        - name: documentNumber\n          in: path\n          required: true\n          description: Número de documento do cliente (CPF ou CNPJ).\n          schema:\n            type: string\n        - name: contract\n          in: path\n          description: Número do contrato de crédito do cliente.\n          required: true\n          schema:\n            type: string\n      responses:\n        '202':\n          description: Retorno com informações do contrato de crédito especificado.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getContractCreditResponse\"\n        '401':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/401'\n        '500':\n          $ref: 'http://localhost:3320/commons/components#/components/responses/500'\n\nsecurity:\n  - bearerAuth: []\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  parameters:\n    apiVersion:\n      name: api-version\n      in: header\n      required: true\n      schema:\n        type: string\n        \n    authorization:\n      name: Authorization\n      in: header\n      required: true\n      schema:\n        type: string        \n  schemas:\n    createCardsInLotRequest:\n      type: object\n      properties:\n        programId:\n          type: integer\n          description: Identificador do programa que será vinculado ao cartão.\n        quantityCards:\n          type: integer\n          description: Quantidade de cartões em lote (informar um valor acima de 0 e menor que 2000).\n        paymentDay:\n          type: integer\n          description: Dia de pagamento do cartão.\n        address:\n          type: object\n          description: Informações sobre o endereço de entrega.\n          properties:\n            zipCode:\n              type: string\n              description: CEP (informar somente os números).\n            address:\n              type: string\n              description: Logradouro.\n            number:\n              type: string\n              description: Número.\n            neighborhood:\n              type: string\n              description: Bairro.\n            complement:\n              type: string\n              description: Complemento.\n            city:\n              type: string\n              description: Cidade.\n            state:\n              type: string\n              description: Estado (informar a UF).\n            country:\n              type: string\n              description: País.\n          required:\n            - zipCode\n            - address\n            - number\n            - neighborhood\n            - city\n            - state\n            - country\n      required:\n        - programId\n        - quantityCards\n        - address\n    \n    createCardInLotResponse:\n      type: object\n      properties:\n        batchId:\n          type: string\n          description: Id do lote.\n\n    cardLotsResponse:\n      type: object\n      properties:\n        batchId:\n          type: string\n          description: Id do lote.\n        quantityOrder:\n          type: integer\n          description: Quantidade de cartões solicitados.    \n        companyKey:\n          type: string\n          description: Identificador da companhia.\n        dateOrder:\n          type: string\n          description: Data da solicitação de criação do lote.\n        programId:\n          type: integer\n          description: Identificador do programa vinculado ao cartão.\n\n    cardLotResponse:\n      type: object\n      properties:\n        batchId:\n          type: string\n          description: Id do lote.\n        quantityOrder:\n          type: integer\n          description: Quantidade de cartões solicitados.    \n        dateOrder:\n          type: string\n          description: Data da solicitação de criação do lote.\n        programId:\n          type: integer\n          description: Identificador do programa vinculado ao cartão.\n        cards: \n          type: array\n          description: Proxy dos cartões.\n        address:\n          type: object\n          description: Informações sobre o endereço de entrega.\n          properties:\n            zipCode:\n              type: string\n              description: CEP.\n            address:\n              type: string\n              description: Logradouro.\n            number:\n              type: string\n              description: Número.\n            neighborhood:\n              type: string\n              description: Bairro.\n            complement:\n              type: string\n              description: Complemento.\n            city:\n              type: string\n              description: Cidade.\n            state:\n              type: string\n              description: Estado (formato UF).\n            country:\n              type: string\n              description: País.\n    \n    bindNoNameRequest:\n      type: object\n      properties:\n        password:\n          type: string\n          description: Senha que será utilizada nas compras (4 dígitos).\n        bankAgency:\n          type: string\n          description: Número da agência (4 dígitos).\n        bankAccount:\n          type: string\n          description: Número da conta ao qual o cartão será vinculado.\n        alias:\n          type: string\n          description: Apelido do cartão (não é permitido o uso de caracteres especiais e o tamanho máximo é de 16 caracteres). \n        documentNumber:\n          type: string\n          description: Número de documento de CPF ou CNPJ (informar somente os números e o tamanho máximo é de 14 caracteres).   \n      required:\n        - documentNumber\n        - password\n        - bankAccount\n        - bankAgency\n    \n    \n    academicDegree:\n      type: string\n      description: Grau de instrução do cliente.\n      enum:\n        - HighSchool\n        - Graduated\n        - PostGraduate\n        - Masters\n        - Doctorate\n   \n    acceptanceContractRequest:\n      type: object\n      properties:\n        documentNumber:\n          type: string\n          description: Número de documento (CPF ou CNPJ). Informe somente números.\n        contract:\n          type: string\n          description: Número do contrato de crédito.\n        dataHash:\n          type: string\n          description: Termos e condições aceitos pelo cliente.\n      required:\n        - documentNumber\n        - contract\n        - dataHash\n    \n    acceptanceTerm:\n      type: object\n      properties:\n        signedAt:\n          type: string\n          description: Data e hora em que o contrato de crédito foi aceito/assinado.\n        creditDetails:\n          type: object\n          properties:\n            diaryIof:\n              type: number\n            fixedIof:\n              type: number\n            internationalIof:\n              type: number\n            daysAdvanceCut:\n              type: integer\n            futureCalendarMonths:\n              type: integer\n            daysAccountLockDelay:\n              type: integer\n            accrualStop:\n              type: integer\n            delayInvoiceRate:\n              type: number\n            rotatingRate:\n              type: number\n            minimumValueOfRefinanceInstallment:\n              type: number\n            invoiceRefinanceRate:\n              type: number\n            maximumNumberInstallmentsRefinance:\n              type: integer\n            annualValue:\n              type: number\n            annuityInstallments:\n              type: integer\n            iofFirstDay:\n              type: boolean\n            minimumAmountInstallmentAgreementInvoice:\n              type: number\n            minimumEntryInvoiceAgreement:\n              type: number\n            maximumEntryInvoiceAgreement:\n              type: number\n            minimumPercentageInvoiceAgreement:\n              type: number\n            maximumEntryAgreementInvoicePercentage:\n              type: number\n            deadlineInDaysForNewAnalysisRequest:\n              type: integer\n            deadlineInDaysForExpirationOfAnalysis:\n              type: integer\n        dataHash:\n          type: string\n          description: Termos e condições aceitos pelo cliente.\n    \n    activateCardRequest:\n      type: object\n      properties:\n        activateCode:\n          type: string\n          description: Código de ativação do cartão (12 caracteres).\n        password:\n          type: string\n          description: Senha de uso do cartão (4 dígitos).\n      required:\n        - activateCode\n        - password\n    \n    address:\n      type: object\n      description: Endereço do cliente.\n      properties:\n        zipCode:\n          type: string\n          description: CEP de endereço.\n        addressLine:\n          type: string\n        buildingNumber:\n          type: string\n          description: Número do endereço.\n        complement:\n          type: string\n          description: Complemento do endereço.\n        neighborhood:\n          type: string\n          description: Bairro do endereço.\n        city:\n          type: string\n          description: Cidade do endereço.\n        state:\n          type: string\n          description: Estado do endereço.\n        country:\n          type: string\n          description: País do endereço.\n    \n    brandTypes:\n      type: string\n      enum:\n        - Mastercard\n      \n    cardBuildingResponse:\n      type: object\n      properties:\n        proxy:\n          type: string\n          description: Proxy do cartão criado.\n        activateCode:\n          type: string\n          description: Código para ativar o cartão.\n              \n    cardErrorResponse:\n      type: object\n      properties:\n        reference:\n          type: string\n          description: Link para documentação de integração.\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              code:\n                type: string\n                description: Código de erro.\n              message:\n                type: string\n                description: Mensagem explicativa do erro.\n    \n    cardResponse:\n      type: object\n      properties:\n        created:\n          type: string\n          description: Proxy do cartão criado (formato 'yyyy-MM-ddTHH:mm:ss').\n        companyKey:\n          type: string\n          description: Identificador da companhia.\n        documentNumber:\n          type: string\n          description: Documento do cliente (CPF/CNPJ).\n        activateCode:\n          type: string\n          description: Código de ativação do cartão.\n        bankAgency:\n          type: string\n          description: Agência do cliente.\n        bankAccount:\n          type: string\n          description: Conta do cliente.\n        lastFourDigits:\n          type: string\n          description: Últimos 04 dígitos do cartão.\n        proxy:\n          type: string\n          description: Identificador do cartão.\n        name:\n          type: string\n          description: Nome impresso no cartão.\n        alias:\n          type: string\n          description: Apelido impresso no cartão.\n        cardType:\n          type: string\n          $ref: \"#/components/schemas/cardTypes\"\n          description: Tipo do cartão.\n        physicalBinds: \n          type: array\n          description: Dados do cartão físico.\n          items:\n            type: object\n            properties:\n              proxy: \n                type: string\n                description: Identificador do cartão físico.\n              created: \n                type: string\n                description: Data do cartão criado (formato 'yyyy-MM-ddTHH:mm:ss').\n        virtualBind: \n          type: object\n          properties:\n            proxy: \n              type: string\n              description: Identificador do cartão virtual.\n            created: \n              type: string\n              description: Data do cartão criado (formato 'yyyy-MM-ddTHH:mm:ss').\n        status:\n          type: string\n          $ref: \"#/components/schemas/cardStatus\"\n          description: Status atual do cartão.\n        allowContactless:\n          type: boolean\n          description: Informa status da função contactless.\n        address:\n          type: object\n          properties:\n            zipCode:\n              type: string\n              description: CEP.\n            address:\n              type: string\n              description: Logradouro.\n            number:\n              type: string\n              description: Número.\n            neighborhood:\n              type: string\n              description: Bairro.\n            complement:\n              type: string\n              description: Complemento.\n            city:\n              type: string\n              description: Cidade.\n            state:\n              type: string\n              description: Estado (formato UF).\n            country:\n              type: string\n              description: País.\n        historyStatus:\n          type: array\n          description: Histórico de status.\n          items:\n            type: object\n            properties:\n              modified:\n                type: string\n                description: Data em que o status foi aplicado (formato 'yyyy-MM-ddTHH:mm:ss').\n              value:\n                type: string\n                $ref: \"#/components/schemas/cardStatus\"\n                description: Status aplicado.\n        activatedAt:\n          type: string\n          description: Data da ativação do cartão (formato 'yyyy-MM-ddTHH:mm:ss').\n        lastUpdatedAt:\n          type: string\n          description: Data da última atualização do cartão (formato 'yyyy-MM-ddTHH:mm:ss').\n        isActivated:\n          type: boolean\n          description: Informa se está ativo.\n        isLocked:\n          type: boolean\n          description: Informa se está bloqueado.\n        isCanceled:\n          type: boolean\n          description: Informa se está cancelado.\n        isBuilding:\n          type: boolean\n          description: Informa se o cartão está sendo em construção.\n        isFirtual:\n          type: boolean\n          description: Informa se é um cartão firtual.\n        isPre:\n          type: boolean\n          description: Informa se é um cartão pré-pago.\n        isPos:\n          type: boolean\n          description: Informa se é um cartão pós-pago.\n  \n    cardStatus:\n      type: string\n      enum:\n        - Building      \n        - Undefined\n        - Active\n        - UpdateRegisterLocked\n        - UpdateRegisterCanceled\n        - RegisterFraudLocked\n        - RegisterFraudCanceled\n        - CanceledByCustomer \n        - CanceledByEmitter\n        - ReturnedLocked\n        - Sleeping\n        - InTransitLocked\n        - ExpiredCanceled\n        - StrayedCanceled\n        - Inactive\n        - DeathCanceled\n        - LockedByPendingPayment \n        - LostOrTheftCanceled\n        - WithoutMovementLocked\n        - TemporarilyUserLocked\n        - WrongPasswordAttemptLocked\n        - UseFraudLocked\n        - UseFraudCanceled\n        - CardCanceledByAccount\n    \n    cardTokenizationResponse:\n      type: object\n      properties:\n        data:\n          type: string\n          description: Token gerado.\n        lastFourDigits:\n          type: string\n          description: Últimos quatro dígitos do cartão.\n        phoneNumber:\n          type: string\n          description: Número de contato do cliente.\n        address:\n          type: object\n          properties:\n            zipCode:\n              type: string\n              description: CEP do endereço.\n        \n    cardTypes:\n      type: string\n      enum:\n        - Physical\n        - Virtual\n    \n    changeCardPasswordRequest:\n      type: object\n      properties:\n        password:\n          type: string\n          description: Senha de uso do cartão (4 dígitos).\n      required:\n        - password\n    \n    changeCardStatusRequest:\n      type: object\n      properties:\n        status:\n          type: string\n          $ref: \"#/components/schemas/cardStatus\"\n          description: Status para o qual o cartão será modificado.\n        password:\n          type: string\n          description: Senha de uso do cartão (4 dígitos).\n        updateCardBinded:\n          type: boolean\n          description: Atualizar cartões vinculados.\n      required:\n        - status\n        - password\n        - updateCardBinded\n   \n    createCardRequest:\n      type: object\n      properties:\n        documentNumber:\n          type: string\n          description: Número de documento de CPF ou CNPJ (informe somente os números). Tamanho máximo de 14 caracteres.\n        cardName:\n          type: string\n          description: Nome que será impresso no cartão (não será permitido o uso de números e caracteres especiais). Tamanho máximo de 19 caracteres.\n        alias:\n          type: string\n          description: Apelido do cartão (não será permitido o uso de caracteres especiais e o tamanho máximo é de 16 caracteres).\n        bankAgency:\n          type: string\n          description: Número de agência (4 dígitos).\n        bankAccount:\n          type: string\n          description: Número de conta que o cartão será vinculado.\n        programId:\n          type: integer\n          description: Identificador do programa que será vinculado ao cartão.\n        password:\n          type: string\n          description: \"Senha do cartão para realizar transações (preencha com quatro números. Exemplo: '9348').\"\n        address:\n          type: object\n          description: Informações sobre endereço (se não for informado, será utilizado o endereço de cadastro do cliente).\n          properties:\n            zipCode:\n              type: string\n              description: CEP (informar somente os números).\n            address:\n              type: string\n              description: Logradouro.\n            number:\n              type: string\n              description: Número.\n            neighborhood:\n              type: string\n              description: Bairro.\n            complement:\n              type: string\n              description: Complemento.\n            city:\n              type: string\n              description: Cidade.\n            state:\n              type: string\n              description: Estado (informar a UF).\n            country:\n              type: string\n              description: País.\n          required:\n            - zipCode\n            - address\n            - number\n            - neighborhood\n            - city\n            - state\n            - country\n      required:\n        - documentNumber\n        - cardName\n        - alias\n        - bankAgency\n        - bankAccount\n        - password\n        - programId\n    \n    createCustomerRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Nome do cliente.\n        socialName:\n          type: string\n          description: Nome pelo qual a pessoa gostaria de ser chamada. Saiba mais consultando a [Cartilha do nome social](https://www.mds.gov.br/webarquivos/publicacao/assistencia_social/Folders/cartilha_nome_social.pdf).\n        motherName:\n          type: string\n          description: Nome da mãe do cliente.\n        birthDate:\n          type: string\n          description: Data de nascimento do cliente.\n        programId:\n          type: string\n          description: Identificador do programa que será vinculado ao cartão.\n        documentNumber:\n          type: string\n          description: Número de documento (CPF ou CNPJ). Informe somente números. \n        profession:\n          type: string\n          description: Profissão do cliente.\n        maritalStatus:\n          $ref: \"#/components/schemas/maritalStatus\"\n        academicDegree:\n          $ref: \"#/components/schemas/academicDegree\"\n        incomeBracket:\n          $ref: \"#/components/schemas/incomeBracket\"\n        sex:\n          $ref: \"#/components/schemas/sex\"\n        email:\n          type: string\n          description: E-mail do cliente.\n        phone:\n          type: object\n          description: Número de telefone do cliente.\n          properties:\n            type:\n              $ref: \"#/components/schemas/phoneType\"\n            value:\n              type: string\n              description: Número do telefone do cliente.\n            countryCode:\n              type: string\n              description: Código DDI do país.\n          required:\n            - type\n            - value\n            - countryCode\n        address:\n          $ref: \"#/components/schemas/address\"\n      required:\n        - programId\n        - documentNumber\n        - profession\n        - maritalStatus\n        - academicDegree\n        - incomeBracket\n        - sex\n        - email\n        - phone\n        - address\n    \n    createCustomerResponse:\n      type: object\n      properties:\n        companyKey:\n          type: string\n          description: Chave que identifica o parceiro dentro do Bankly.\n        document:\n          type: string\n          description: Número de documento do cliente (CPF ou CNPJ).\n        contract:\n          type: string\n          description: Número do contrato de crédito.\n  \n    createDuplicateCardRequest:\n      type: object\n      properties:\n        status:\n          type: string\n          $ref: \"#/components/schemas/duplicateCardStatus\"\n          description: Motivo da segunda via.\n        documentNumber:\n          type: string\n          description: Número de documento de CPF ou CNPJ (informe somente os números).\n        description:\n          type: string\n          description: Detalhes do cancelamento com qualquer informação considerada como relevante.\n        password:\n          type: string\n          description: \"Senha do cartão atual (primeira via) para realizar transações (preencha com quatro campos números. Exemplo: '9348').\"\n        address:\n          type: object\n          description: Informações sobre endereço (se não for informado será utilizado o endereço de cadastro do cliente).\n          properties:\n            zipCode:\n              type: string\n              description: CEP (informar somente os números).\n            address:\n              type: string\n              description: Logradouro.\n            number:\n              type: string\n              description: Número.\n            neighborhood:\n              type: string\n              description: Bairro.\n            complement:\n              type: string\n              description: Complemento.\n            city:\n              type: string\n              description: Cidade.\n            state:\n              type: string\n              description: Estado (informar a UF).\n            country:\n              type: string\n              description: País.\n          required:\n            - zipCode\n            - address\n            - number\n            - neighborhood\n            - city\n            - state\n            - country\n      required:\n        - status\n        - documentNumber\n        - password\n\n    creditErrorResponse:\n      type: object\n      properties:\n        reference:\n          type: string\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              code:\n                type: integer\n              message:\n                type: string\n              reasons:\n                type: string\n    \n    dataPciResponse:\n      type: object\n      properties:\n        cardNumber:\n          type: string\n          description: Numeração do cartão.\n        cvv:\n          type: string\n          description: Código de segurança do cartão.\n        expirationDate:\n          type: string\n          description: Data de expiração do cartão (formato 'MM/yy').\n    \n    duplicateCardStatus:\n      type: string\n      enum:\n        - LostMyCard\n        - CardWasStolen\n        - CardWasDamaged\n        - CardNotDelivered\n        - UnrecognizedOnlinePurchase\n    \n    entryModeTypes:\n      type: string\n      enum:\n        - Unknown\n        - Manual\n        - MagneticStripe\n        - BarCodeReader\n        - OCR\n        - Chip\n        - ContactlessObsolete\n        - ContactlessMChip\n        - ContactlessMChipObsolete\n        - EletronicCommerce\n        - CredentialOnFile\n        - HybridTerminalFailedConnection\n        - ChipCapableTerminal\n        - EletronicCommerceSecureWithUCAF\n        - Server\n        - MagneticStripeFullTrackData\n        - ContactlessMagneticStripe\n        - ContactlessInput\n        - Visa\n        \n    getContractCreditResponse:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Nome do cliente.\n        socialName:\n          type: string\n          description: Nome pelo qual a pessoa gostaria de ser chamada. Saiba mais consultando a [Cartilha do nome social](https://www.mds.gov.br/webarquivos/publicacao/assistencia_social/Folders/cartilha_nome_social.pdf).\n        motherName:\n          type: string\n          description: Nome da mãe do cliente.\n        birthDate:\n          type: string\n          description: Data de nascimento do cliente.\n        programId:\n          type: string\n          description: Identificador do programa que será vinculado ao cartão.\n        documentNumber:\n          type: string\n          description: Número de documento do cliente (CPF ou CNPJ).\n        profession:\n          type: string\n          description: Profissão do cliente.\n        cardProxy:\n          type: string\n          description: Proxy do cartão.\n        status:\n          type: integer\n          description: Status do contrato de crédito.\n        contract:\n          type: string\n          description: Número do contrato de crédito.\n        maritalStatus:\n          $ref: \"#/components/schemas/maritalStatus\"\n        academicDegree:\n          $ref: \"#/components/schemas/academicDegree\"\n        incomeBracket:\n          $ref: \"#/components/schemas/incomeBracket\"\n        incomeBracketRange:\n          type: number\n          description: Renda salarial do cliente.\n        expirationDate:\n          type: string\n          description: Data de expiração da proposta de crédito.\n        sex:\n          $ref: \"#/components/schemas/sex\"\n        email:\n          type: string\n          description: E-mail do cliente.\n        address:\n          $ref: \"#/components/schemas/address\"\n        phone:\n          type: object\n          description: Número de telefone do cliente.\n          properties:\n            type:\n              $ref: \"#/components/schemas/phoneType\"\n            value:\n              type: string\n              description: Número do telefone do cliente.\n            countryCode:\n              type: string\n              description: Código DDI do país.\n        creditEvaluation:\n          type: object\n          properties:\n            status:\n              type: integer\n            evaluatedAt:\n              type: string\n            reasonRefusal:\n              type: string\n            policy:\n              type: string\n        acceptanceTerm:\n          $ref: \"#/components/schemas/acceptanceTerm\"\n        acceptanceTermHistory:\n          type: array\n          items:\n            $ref: \"#/components/schemas/acceptanceTerm\"\n  \n    getDataPciRequest:\n      type: object\n      properties:\n        password:\n          type: string\n          description: Senha informada na criação do cartão (4 dígitos).\n      required:\n        - password\n    \n    incomeBracket:\n      type: string\n      description: Renda salarial do cliente.\n      enum:\n        - LessThousand\n        - FromThousandToTwoThousand\n        - FromTwoThousandToThreeThousand\n        - FromThreeThousandToFiveThousand\n        - FromFiveThousandToTenThousand\n        - FromTenThousandToTwentyThousand\n        - OverTwentyThousand\n                    \n    maritalStatus:\n      type: string\n      description: Estado civil do cliente.\n      enum:\n        - Single\n        - Married\n        - Separated\n        - Divorced\n        - Widower\n\n    phoneType:\n      type: string\n      description: Tipo de telefone do cliente.\n      enum:\n        - Residential\n        - Commercial\n        - Mobile\n   \n    resultTransactionResponse:\n      type: object\n      properties:\n        nextPage:\n          type: string\n          description: Identificador da próxima página.\n        hasLastPage:\n          type: boolean\n          description: Indica se existe a próxima página na consulta.\n        transactions:\n          type: array\n          description: Transações do cartão.\n          items:\n            type: object\n            properties:\n              account:\n                type: object\n                properties:\n                  number: \n                    type: string\n                    description: Número da conta na qual o cartão foi transacionado.\n                  agency: \n                    type: string\n                    description: Agencia da conta na qual o cartão foi transacionado.\n              amount:\n                type: object\n                properties:\n                  value: \n                    type: number\n                    description: Valor total da transação.\n                  local: \n                    type: number\n                    description: Valor da transação na moeda local.\n                  net: \n                    type: number\n                    description: Valor líquido da transação.\n                  iof: \n                    type: number\n                    description: Valor do imposto de operações financeira.\n                  markup: \n                    type: number\n                    description: Tarifa de conversão de moeda em caso de compras internacional.\n              merchant:\n                type: object\n                properties:\n                  id: \n                    type: string\n                    description: Identificador do comerciante.\n                  name: \n                    type: string\n                    description: Nome do comerciante.\n                  mcc: \n                    type: string\n                    description: Código identificador do ramo de negócio do comerciante.\n                  city: \n                    type: string\n                    description: Cidade onde ocorreu a transação.\n              authorizationCode:\n                type: string\n                description: Indentificador da transação na adquirente.\n              countryCode:\n                type: string\n                description: Código do país onde ocorreu a transação.\n              currencyCode:\n                type: string\n                description: Códiga da moeda que foi realizada a transação.\n              entryMode:\n                type: string\n                $ref: \"#/components/schemas/entryModeTypes\"\n                description: Identificador da forma que a transação foi realizada.\n              status:\n                type: string\n                $ref: \"#/components/schemas/transactionsStatus\"\n                description: Status da transação.\n              transactionTimestamp:\n                type: string\n                description: Data em que ocorreu a transação (formato 'yyyy-MM-ddTHH:mm:ss+00:00').\n              transactionType:\n                type: string\n                $ref: \"#/components/schemas/transactionTypes\"\n                description: Indica a operação da transação.\n\n    sex:\n      type: string\n      description: Gênero do cliente.\n      enum:\n        - Male\n        - Female\n        - Other\n    \n    trackingErrorResponse:\n      type: object\n      properties:\n        reference:\n          type: string\n          description: Link para documentação de integração.\n        errors:\n          type: array\n          items:\n            type: object\n            properties:\n              code:\n                type: string\n                description: Código de erro.\n              message:\n                type: string\n                description: Mensagem explicativa do erro.\n                  \n    trackingResponse:\n      type: object\n      properties:\n        createdDate:\n          type: string\n          description: Data de criação do rastreio (formato 'yyyy-MM-ddTHH:mm:ss').\n        externalTracking:\n          type: object\n          description: Objeto para rastreio de serviço externo\n          properties:\n            code:\n              type: string\n              description: Código de rastreio junto ao serviço externo.\n            partner: \n              type: string\n              description: Nome do parceiro do serviço externo.\n        name:\n          type: string\n          description: Nome impresso no cartão.\n        alias:\n          type: string\n          description: Apelido impresso no cartão.\n        estimatedDeliveryDate:\n          type: string\n          description: Data prevista de entrega do cartão (formato 'yyyy-MM-ddTHH:mm:ss').\n        address:\n          type: array\n          description: Lista de endereços do rastreio\n          items:\n            properties:\n              zipCode:\n                type: string\n                description: CEP.\n              address:\n                type: string\n                description: Logradouro.\n              number:\n                type: string\n                description: Número.\n              neighborhood:\n                type: string\n                description: Bairro.\n              complement:\n                type: string\n                description: Complemento.\n              city:\n                type: string\n                description: Cidade.\n              state:\n                type: string\n                description: Estado (formato UF).\n              country:\n                type: string\n                description: País.\n              isActive:\n                type: boolean\n                description: Situação de endereço de rastreio.\n        status:\n          type: array\n          description: Histórico de status do rastreio.\n          items:\n            type: object\n            properties:\n              createdDate:\n                type: string\n                description: Data em que o status foi aplicado (formato 'yyyy-MM-ddTHH:mm:ss').\n              type:\n                type: string\n                $ref: \"#/components/schemas/trackingStatus\"\n                description: Status aplicado.\n              reason:\n                type: string\n                description: Motivo do status.\n        finalized:\n          type: array\n          description: Histórico de baixa do rastreio.\n          items:\n            type: object\n            properties:\n              createdDate:\n                type: string\n                description: Data em que a baixa foi adicionada (formato 'yyyy-MM-ddTHH:mm:ss').\n              recipientName:\n                type: string\n                description: Nome do recebedor do cartão.\n              recipientKinship:\n                type: string\n                description: Grau de parentesco com o titular do cartão.\n              documentNumber:\n                type: string\n                description: Documento do recebedor do cartão.\n              attempts:\n                type: number\n                description: Quantidade de tentativas de entrega.\n\n    trackingStatus:\n      type: string\n      enum:\n        - Created\n        - InProgress\n        - NotDelivered\n        - Cancelled\n        - Custody\n        - Delivered\n    \n    transactionsStatus:\n      type: string\n      enum:\n        - TransactionHoldWasReproved\n        - TransactionHoldWasApproved\n        - TransactionWasReversed\n        - TransactionHoldWasExpired\n        - TransactionWasConfirmed\n        - TransactionWasReversedInSecondInstance\n        - TransactionVoucherWasCreated\n   \n    transactionTypes:\n      type: string\n      enum:\n        - Unknown\n        - Purchase\n        - Withdrawal\n        - Refund\n        - Balance\n    \n    updateTrackingAddressRequest: \n          type: object\n          description: Informações sobre endereço para nova tentativa de entrega.\n          properties:\n            zipCode:\n              type: string\n              description: O CEP deve ser nacional e conter oito dígitos.\n            address:\n              type: string\n              description: Nome do logradouro em que o cliente deseja receber o cartão.\n            number:\n              type: string\n              description: Número do imóvel com até 10 caracteres (se não existir, substitua por “S/N”).\n            neighborhood:\n              type: string\n              description: Bairro para nova entrega.\n            complement:\n              type: string\n              description: Complemento do endereço.\n            city:\n              type: string\n              description: Nome da cidade para a entrega.\n            state:\n              type: string\n              description: \"Estado (UF) do novo endereço de entrega. Deve-se respeitar o formato proposto pela ISO 3166-2:BR. Exemplo: SP.\"\n            country:\n              type: string\n              description: \"Serão aceitos apenas endereços em território nacional. Deve-se respeitar o formato proposto pela ISO 3166-1. Exemplo: BR.\"\n          required:\n            - zipCode\n            - address\n            - number\n            - neighborhood\n            - city\n            - state\n            - country\n    \n    walletTypes:\n      type: string\n      enum:\n        - GooglePay\n      \nx-readme:\n  explorer-enabled: true\n  proxy-enabled: true\n  samples-enabled: true\n  samples-languages:\n    - curl\n",
			"canonicalURL": "/github.com/acesso-bankly/open-api@35f7f2fba7c4d22f4ee9b61e142b2b7b2cd3812d/-/blob/apis/v1/cards/schema.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/acesso-bankly/open-api/blob/35f7f2fba7c4d22f4ee9b61e142b2b7b2cd3812d/apis/v1/cards/schema.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/cards-pci/{proxy}/wallet/{wallet}/brand/{brand}\": post: operation \"GenerateTokenizationForWallet\": responses: 400: at 1:28507: external \"http://localhost:3320/commons/components\": get: http: do: Get \"http://localhost:3320/commons/components\": host \"localhost:3320\" is not allowed"
}