{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/spoonacular.com/1.0/openapi.yaml",
			"byteSize": 170719,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.spoonacular.com\n    variables: {}\ninfo:\n  contact:\n    email: david@spoonacular.com\n    name: David Urbansky\n    url: https://spoonacular.com/contact\n  description: |-\n    The spoonacular Nutrition, Recipe, and Food API allows you to access over 380,000 recipes, thousands of ingredients, 80,000 food products, and 100,000 menu items. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.\n\n    Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.\n  license:\n    name: spoonacular API Terms\n    url: https://spoonacular.com/food-api/terms\n  termsOfService: https://spoonacular.com/food-api/terms\n  title: spoonacular API\n  version: \"1.0\"\n  x-apisguru-categories:\n    - social\n  x-codegen-settings:\n    AllowSkippingSSLCertVerification: false\n    AndroidUseAppManifest: true\n    AppendContentHeaders: true\n    ApplyCustomizations: []\n    ArraySerialization: Indexed\n    BodySerialization: 0\n    CollectParameters: false\n    DisableDocs: false\n    DisableLinting: false\n    DoNotSplitWords: []\n    EnableAdditionalModelProperties: false\n    EnableGlobalUserAgent: true\n    EnableHttpCache: false\n    EnableLogging: false\n    EnablePHPComposerVersionString: false\n    ForceKeywordArgsInRuby: false\n    GenerateAdvancedDocs: false\n    GenerateAppveyorConfig: false\n    GenerateAsyncCode: true\n    GenerateCircleConfig: false\n    GenerateExceptions: true\n    GenerateInterfaces: false\n    GenerateJenkinsConfig: false\n    GenerateModels: true\n    GenerateTravisConfig: false\n    IgnoreIfNullJson: false\n    JavaHttpClient: JAVA_OK\n    JavaUsePropertiesConfig: false\n    LiftParameterDescriptionFromCustomType: false\n    ModelSerializationScheme: Json\n    NodeHttpClient: NODE_REQUEST\n    Nullify404: false\n    ParameterArrayFormat: ParamArrayWithIndex\n    PreserveParameterOrder: false\n    ResponseMapping:\n      Type: Simple\n    Retries: 0\n    RetryInterval: 1\n    ReturnCompleteHttpResponse: false\n    RunscopeEnabled: false\n    SecurityProtocols:\n      - Ssl3\n      - Tls\n    SortResources: false\n    StoreTimezoneInformation: false\n    SymbolizeHashKeysInRuby: false\n    ThrowForHttpErrorStatusCodes: true\n    Timeout: 0\n    UnderscoreNumbers: true\n    UseCommonSDKLibrary: false\n    UseConstructorsForConfig: true\n    UseControllerPrefix: true\n    UseEnumPostfix: true\n    UseExceptionPrefix: true\n    UseMethodPrefix: true\n    UseModelPostfix: false\n    UseSingletonPattern: true\n    ValidateRequiredParameters: false\n    iOSGenerateCoreData: false\n    iOSUseAppInfoPlist: true\n  x-origin:\n    - format: openapi\n      url: https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json\n      version: \"3.0\"\n  x-providerName: spoonacular.com\n  x-server-configuration:\n    default-environment: production\n    default-server: default\n    environments:\n      - name: production\n        servers:\n          - name: default\n            url: https://api.spoonacular.com\n    parameters: []\nexternalDocs:\n  description: The official documentation.\n  url: https://spoonacular.com/food-api/docs\nsecurity:\n  - apiKeyScheme: []\ntags: []\npaths:\n  /food/converse:\n    get:\n      deprecated: false\n      description: This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Talk-to-Chatbot\n      operationId: talkToChatbot\n      parameters:\n        - description: The request / question / answer from the user to the chatbot.\n          explode: false\n          in: query\n          name: text\n          required: true\n          schema:\n            example: donut recipes\n            type: string\n          style: form\n        - description: An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.\n          explode: false\n          in: query\n          name: contextId\n          required: false\n          schema:\n            example: \"342938\"\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Talk to Chatbot\n  /food/converse/suggest:\n    get:\n      deprecated: false\n      description: This endpoint returns suggestions for things the user can say or ask the chatbot.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Conversation-Suggests\n      operationId: getConversationSuggests\n      parameters:\n        - description: A (partial) query from the user. The endpoint will return if it matches topics it can talk about.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: tell\n            type: string\n          style: form\n        - description: The number of suggestions to return (between 1 and 25).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 5\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Conversation Suggests\n  /food/customFoods/search:\n    get:\n      deprecated: false\n      description: Search custom foods in a user's account.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Custom-Foods\n      operationId: searchCustomFoods\n      parameters:\n        - description: The search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: brat\n            type: string\n          style: form\n        - description: The username.\n          explode: false\n          in: query\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: form\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n        - description: The number of results to skip (between 0 and 990).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Custom Foods\n  /food/detect:\n    post:\n      deprecated: false\n      description: Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Detect-Food-in-Text\n      operationId: detectFoodInText\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                text:\n                  description: The text in which food items, such as dish names and ingredients, should be detected in.\n                  example: I like to eat delicious tacos. The only thing better is a cheeseburger with cheddar. But then again, pizza with pepperoni, mushrooms, and tomatoes is so good too!\n                  type: string\n              required:\n                - text\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Detect Food in Text\n  /food/images/analyze:\n    get:\n      deprecated: false\n      description: Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Image-Analysis-by-URL\n      operationId: imageAnalysisByURL\n      parameters:\n        - description: The URL of the image to be analyzed.\n          explode: false\n          in: query\n          name: imageUrl\n          required: true\n          schema:\n            example: https://spoonacular.com/recipeImages/635350-240x150.jpg\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Image Analysis by URL\n  /food/images/classify:\n    get:\n      deprecated: false\n      description: Classify a food image. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Image-Classification-by-URL\n      operationId: imageClassificationByURL\n      parameters:\n        - description: The URL of the image to be classified.\n          explode: false\n          in: query\n          name: imageUrl\n          required: true\n          schema:\n            example: https://spoonacular.com/recipeImages/635350-240x150.jpg\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Image Classification by URL\n  /food/ingredients/autocomplete:\n    get:\n      deprecated: false\n      description: Autocomplete the entry of an ingredient.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search\n      operationId: autocompleteIngredientSearch\n      parameters:\n        - description: The partial or full ingredient name.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: appl\n            type: string\n          style: form\n        - description: The number of results to return (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: Whether to return more meta information about the ingredients.\n          explode: false\n          in: query\n          name: metaInformation\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n        - description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.\n          explode: false\n          in: query\n          name: intolerances\n          required: false\n          schema:\n            example: egg\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Autocomplete Ingredient Search\n  /food/ingredients/glycemicLoad:\n    post:\n      deprecated: false\n      description: Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Compute-Glycemic-Load\n      operationId: computeGlycemicLoad\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Compute Glycemic Load\n  /food/ingredients/map:\n    post:\n      deprecated: false\n      description: Map a set of ingredients to products you can buy in the grocery store.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products\n      operationId: mapIngredientsToGroceryProducts\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Map Ingredients to Grocery Products\n  /food/ingredients/search:\n    get:\n      deprecated: false\n      description: Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Ingredient-Search\n      operationId: ingredientSearch\n      parameters:\n        - description: The partial or full ingredient name.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: apple\n            type: string\n          style: form\n        - description: Whether to add children of found foods.\n          explode: false\n          in: query\n          name: addChildren\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n        - description: The minimum percentage of protein the food must have (between 0 and 100).\n          explode: false\n          in: query\n          name: minProteinPercent\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum percentage of protein the food can have (between 0 and 100).\n          explode: false\n          in: query\n          name: maxProteinPercent\n          required: false\n          schema:\n            example: 90\n            type: number\n          style: form\n        - description: The minimum percentage of fat the food must have (between 0 and 100).\n          explode: false\n          in: query\n          name: minFatPercent\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum percentage of fat the food can have (between 0 and 100).\n          explode: false\n          in: query\n          name: maxFatPercent\n          required: false\n          schema:\n            example: 90\n            type: number\n          style: form\n        - description: The minimum percentage of carbs the food must have (between 0 and 100).\n          explode: false\n          in: query\n          name: minCarbsPercent\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum percentage of carbs the food can have (between 0 and 100).\n          explode: false\n          in: query\n          name: maxCarbsPercent\n          required: false\n          schema:\n            example: 90\n            type: number\n          style: form\n        - description: Whether to return more meta information about the ingredients.\n          explode: false\n          in: query\n          name: metaInformation\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n        - description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.\n          explode: false\n          in: query\n          name: intolerances\n          required: false\n          schema:\n            example: egg\n            type: string\n          style: form\n        - description: The strategy to sort recipes by. See a full list of supported sorting options.\n          explode: false\n          in: query\n          name: sort\n          required: false\n          schema:\n            example: calories\n            type: string\n          style: form\n        - description: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).\n          explode: false\n          in: query\n          name: sortDirection\n          required: false\n          schema:\n            example: asc\n            type: string\n          style: form\n        - description: The number of results to skip (between 0 and 990).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Ingredient Search\n  /food/ingredients/substitutes:\n    get:\n      deprecated: false\n      description: Search for substitutes for a given ingredient.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes\n      operationId: getIngredientSubstitutes\n      parameters:\n        - description: The name of the ingredient you want to replace.\n          explode: false\n          in: query\n          name: ingredientName\n          required: true\n          schema:\n            example: butter\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Ingredient Substitutes\n  \"/food/ingredients/{id}/information\":\n    get:\n      deprecated: false\n      description: Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Ingredient-Information\n      operationId: getIngredientInformation\n      parameters:\n        - description: The ingredient id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 9266\n            type: number\n          style: simple\n        - description: The amount of this ingredient.\n          explode: false\n          in: query\n          name: amount\n          required: false\n          schema:\n            example: 150\n            type: number\n          style: form\n        - description: The unit for the given amount.\n          explode: false\n          in: query\n          name: unit\n          required: false\n          schema:\n            example: grams\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Ingredient Information\n  \"/food/ingredients/{id}/substitutes\":\n    get:\n      deprecated: false\n      description: Search for substitutes for a given ingredient.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID\n      operationId: getIngredientSubstitutesByID\n      parameters:\n        - description: The id of the ingredient you want substitutes for.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1001\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Ingredient Substitutes by ID\n  /food/jokes/random:\n    get:\n      deprecated: false\n      description: \"Get a random joke that is related to food. Caution: this is an endpoint for adults!\"\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-a-Random-Food-Joke\n      operationId: getARandomFoodJoke\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get a Random Food Joke\n  /food/menuItems/search:\n    get:\n      deprecated: false\n      description: Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Menu-Items\n      operationId: searchMenuItems\n      parameters:\n        - description: The search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: snickers\n            type: string\n          style: form\n        - description: The minimum amount of calories the menu item must have.\n          explode: false\n          in: query\n          name: minCalories\n          required: false\n          schema:\n            example: 50\n            type: number\n          style: form\n        - description: The maximum amount of calories the menu item can have.\n          explode: false\n          in: query\n          name: maxCalories\n          required: false\n          schema:\n            example: 800\n            type: number\n          style: form\n        - description: The minimum amount of carbohydrates in grams the menu item must have.\n          explode: false\n          in: query\n          name: minCarbs\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of carbohydrates in grams the menu item can have.\n          explode: false\n          in: query\n          name: maxCarbs\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of protein in grams the menu item must have.\n          explode: false\n          in: query\n          name: minProtein\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of protein in grams the menu item can have.\n          explode: false\n          in: query\n          name: maxProtein\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of fat in grams the menu item must have.\n          explode: false\n          in: query\n          name: minFat\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n        - description: The maximum amount of fat in grams the menu item can have.\n          explode: false\n          in: query\n          name: maxFat\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The offset number for paging (between 0 and 990).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 10).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Menu Items\n  /food/menuItems/suggest:\n    get:\n      deprecated: false\n      description: Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search\n      operationId: autocompleteMenuItemSearch\n      parameters:\n        - description: The (partial) search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: chicke\n            type: string\n          style: form\n        - description: The number of results to return (between 1 and 25).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Autocomplete Menu Item Search\n  \"/food/menuItems/{id}\":\n    get:\n      deprecated: false\n      description: Use a menu item id to get all available information about a menu item, such as nutrition.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Menu-Item-Information\n      operationId: getMenuItemInformation\n      parameters:\n        - description: The menu item id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 424571\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Menu Item Information\n  \"/food/menuItems/{id}/nutritionWidget\":\n    get:\n      deprecated: false\n      description: Visualize a menu item's nutritional information as HTML including CSS.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Menu-Item-Nutrition-by-ID\n      operationId: visualizeMenuItemNutritionByID\n      parameters:\n        - description: The menu item id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1003464\n            type: number\n          style: simple\n        - description: Whether the default CSS should be added to the response.\n          explode: false\n          in: query\n          name: defaultCss\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Menu Item Nutrition by ID\n  /food/products/classify:\n    post:\n      deprecated: false\n      description: This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Classify-Grocery-Product\n      operationId: classifyGroceryProduct\n      parameters:\n        - description: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).\n          explode: false\n          in: query\n          name: locale\n          required: false\n          schema:\n            example: en_US\n            type: string\n          style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                locale:\n                  description: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).\n                  example: en_US\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Classify Grocery Product\n  /food/products/classifyBatch:\n    post:\n      deprecated: false\n      description: Provide a set of product jsons, get back classified products.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk\n      operationId: classifyGroceryProductBulk\n      parameters:\n        - description: The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).\n          explode: false\n          in: query\n          name: locale\n          required: false\n          schema:\n            example: en_US\n            type: string\n          style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items: {}\n              type: array\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Classify Grocery Product Bulk\n  /food/products/search:\n    get:\n      deprecated: false\n      description: Search packaged food products, such as frozen pizza or Greek yogurt.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Grocery-Products\n      operationId: searchGroceryProducts\n      parameters:\n        - description: The search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: greek yogurt\n            type: string\n          style: form\n        - description: The minimum amount of calories the product must have.\n          explode: false\n          in: query\n          name: minCalories\n          required: false\n          schema:\n            example: 50\n            type: number\n          style: form\n        - description: The maximum amount of calories the product can have.\n          explode: false\n          in: query\n          name: maxCalories\n          required: false\n          schema:\n            example: 800\n            type: number\n          style: form\n        - description: The minimum amount of carbohydrates in grams the product must have.\n          explode: false\n          in: query\n          name: minCarbs\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of carbohydrates in grams the product can have.\n          explode: false\n          in: query\n          name: maxCarbs\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of protein in grams the product must have.\n          explode: false\n          in: query\n          name: minProtein\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of protein in grams the product can have.\n          explode: false\n          in: query\n          name: maxProtein\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of fat in grams the product must have.\n          explode: false\n          in: query\n          name: minFat\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n        - description: The maximum amount of fat in grams the product can have.\n          explode: false\n          in: query\n          name: maxFat\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The number of results to skip (between 0 and 990).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Grocery Products\n  /food/products/suggest:\n    get:\n      deprecated: false\n      description: Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Autocomplete-Product-Search\n      operationId: autocompleteProductSearch\n      parameters:\n        - description: The (partial) search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: chicke\n            type: string\n          style: form\n        - description: The number of results to return (between 1 and 25).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Autocomplete Product Search\n  \"/food/products/upc/{upc}\":\n    get:\n      deprecated: false\n      description: Get information about a packaged food using its UPC.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC\n      operationId: searchGroceryProductsByUPC\n      parameters:\n        - description: The product's UPC.\n          explode: false\n          in: path\n          name: upc\n          required: true\n          schema:\n            example: 41631000564\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Grocery Products by UPC\n  \"/food/products/upc/{upc}/comparable\":\n    get:\n      deprecated: false\n      description: Find comparable products to the given one.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Comparable-Products\n      operationId: getComparableProducts\n      parameters:\n        - description: The UPC of the product for which you want to find comparable products.\n          explode: false\n          in: path\n          name: upc\n          required: true\n          schema:\n            example: 33698816271\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Comparable Products\n  \"/food/products/{id}\":\n    get:\n      deprecated: false\n      description: Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Product-Information\n      operationId: getProductInformation\n      parameters:\n        - description: The id of the packaged food.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 22347\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Product Information\n  \"/food/products/{id}/nutritionWidget\":\n    get:\n      deprecated: false\n      description: Visualize a product's nutritional information as HTML including CSS.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Product-Nutrition-by-ID\n      operationId: visualizeProductNutritionByID\n      parameters:\n        - description: The id of the product.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 7657\n            type: number\n          style: simple\n        - description: Whether the default CSS should be added to the response.\n          explode: false\n          in: query\n          name: defaultCss\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Product Nutrition by ID\n  /food/search:\n    get:\n      deprecated: false\n      description: Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-All-Food\n      operationId: searchAllFood\n      parameters:\n        - description: The search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: apple\n            type: string\n          style: form\n        - description: The number of results to skip (between 0 and 990).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search All Food\n  /food/site/search:\n    get:\n      deprecated: false\n      description: Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Site-Content\n      operationId: searchSiteContent\n      parameters:\n        - description: The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: past\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Site Content\n  /food/trivia/random:\n    get:\n      deprecated: false\n      description: Returns random food trivia.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Random-Food-Trivia\n      operationId: getRandomFoodTrivia\n      parameters: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Random Food Trivia\n  /food/videos/search:\n    get:\n      deprecated: false\n      description: Find recipe and other food related videos.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Food-Videos\n      operationId: searchFoodVideos\n      parameters:\n        - description: The search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: chicken soup\n            type: string\n          style: form\n        - description: The type of the recipes. See a full list of supported meal types.\n          explode: false\n          in: query\n          name: type\n          required: false\n          schema:\n            example: main course\n            type: string\n          style: form\n        - description: The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.\n          explode: false\n          in: query\n          name: cuisine\n          required: false\n          schema:\n            example: italian\n            type: string\n          style: form\n        - description: The diet for which the recipes must be suitable. See a full list of supported diets.\n          explode: false\n          in: query\n          name: diet\n          required: false\n          schema:\n            example: vegetarian\n            type: string\n          style: form\n        - description: A comma-separated list of ingredients that the recipes should contain.\n          explode: false\n          in: query\n          name: includeIngredients\n          required: false\n          schema:\n            example: tomato,cheese\n            type: string\n          style: form\n        - description: A comma-separated list of ingredients or ingredient types that the recipes must not contain.\n          explode: false\n          in: query\n          name: excludeIngredients\n          required: false\n          schema:\n            example: eggs\n            type: string\n          style: form\n        - description: Minimum video length in seconds.\n          explode: false\n          in: query\n          name: minLength\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: Maximum video length in seconds.\n          explode: false\n          in: query\n          name: maxLength\n          required: false\n          schema:\n            example: 999\n            type: number\n          style: form\n        - description: The number of results to skip (between 0 and 900).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of results to return (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Food Videos\n  /food/wine/description:\n    get:\n      deprecated: false\n      description: Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Wine-Description\n      operationId: getWineDescription\n      parameters:\n        - description: The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".\n          explode: false\n          in: query\n          name: wine\n          required: true\n          schema:\n            example: merlot\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Wine Description\n  /food/wine/dishes:\n    get:\n      deprecated: false\n      description: Find a dish that goes well with a given wine.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Dish-Pairing-for-Wine\n      operationId: getDishPairingForWine\n      parameters:\n        - description: The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".\n          explode: false\n          in: query\n          name: wine\n          required: true\n          schema:\n            example: malbec\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Dish Pairing for Wine\n  /food/wine/pairing:\n    get:\n      deprecated: false\n      description: Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Wine-Pairing\n      operationId: getWinePairing\n      parameters:\n        - description: The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").\n          explode: false\n          in: query\n          name: food\n          required: true\n          schema:\n            example: steak\n            type: string\n          style: form\n        - description: The maximum price for the specific wine recommendation in USD.\n          explode: false\n          in: query\n          name: maxPrice\n          required: false\n          schema:\n            example: 50\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Wine Pairing\n  /food/wine/recommendation:\n    get:\n      deprecated: false\n      description: Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Wine-Recommendation\n      operationId: getWineRecommendation\n      parameters:\n        - description: The type of wine to get a specific product recommendation for.\n          explode: false\n          in: query\n          name: wine\n          required: true\n          schema:\n            example: merlot\n            type: string\n          style: form\n        - description: The maximum price for the specific wine recommendation in USD.\n          explode: false\n          in: query\n          name: maxPrice\n          required: false\n          schema:\n            example: 50\n            type: number\n          style: form\n        - description: The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.\n          explode: false\n          in: query\n          name: minRating\n          required: false\n          schema:\n            example: 0.7\n            type: number\n          style: form\n        - description: The number of wine recommendations expected (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 3\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Wine Recommendation\n  /mealplanner/generate:\n    get:\n      deprecated: false\n      description: Generate a meal plan with three meals per day (breakfast, lunch, and dinner).\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Generate-Meal-Plan\n      operationId: generateMealPlan\n      parameters:\n        - description: Either for one \"day\" or an entire \"week\".\n          explode: false\n          in: query\n          name: timeFrame\n          required: false\n          schema:\n            example: day\n            type: string\n          style: form\n        - description: What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.\n          explode: false\n          in: query\n          name: targetCalories\n          required: false\n          schema:\n            example: 2000\n            type: number\n          style: form\n        - description: Enter a diet that the meal plan has to adhere to. See a full list of supported diets.\n          explode: false\n          in: query\n          name: diet\n          required: false\n          schema:\n            example: vegetarian\n            type: string\n          style: form\n        - description: A comma-separated list of allergens or ingredients that must be excluded.\n          explode: false\n          in: query\n          name: exclude\n          required: false\n          schema:\n            example: shellfish, olives\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Generate Meal Plan\n  \"/mealplanner/{username}/day/{date}\":\n    delete:\n      deprecated: false\n      description: Delete all planned items from the user's meal plan for a specific day.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day\n      operationId: clearMealPlanDay\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The date in the format yyyy-mm-dd.\n          explode: false\n          in: path\n          name: date\n          required: true\n          schema:\n            example: 2020-06-01\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      requestBody:\n        content:\n          \"\":\n            schema:\n              properties:\n                date:\n                  description: The date in the format yyyy-mm-dd.\n                  example: 2020-06-01\n                  type: string\n                hash:\n                  description: The private hash for the username.\n                  example: 4b5v4398573406\n                  type: string\n                username:\n                  description: The username.\n                  example: dsky\n                  type: string\n              required:\n                - username\n                - date\n                - hash\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Clear Meal Plan Day\n  \"/mealplanner/{username}/items\":\n    post:\n      deprecated: false\n      description: Add an item to the user's meal plan.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Add-to-Meal-Plan\n      operationId: addToMealPlan\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      requestBody:\n        content:\n          \"\":\n            schema:\n              properties:\n                hash:\n                  description: The private hash for the username.\n                  example: 4b5v4398573406\n                  type: string\n                username:\n                  description: The username.\n                  example: dsky\n                  type: string\n              required:\n                - username\n                - hash\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Add to Meal Plan\n  \"/mealplanner/{username}/items/{id}\":\n    delete:\n      deprecated: false\n      description: Delete an item from the user's meal plan.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan\n      operationId: deleteFromMealPlan\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The shopping list item id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 15678\n            type: number\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      requestBody:\n        content:\n          \"\":\n            schema:\n              properties:\n                hash:\n                  description: The private hash for the username.\n                  example: 4b5v4398573406\n                  type: string\n                id:\n                  description: The shopping list item id.\n                  example: 15678\n                  type: number\n                username:\n                  description: The username.\n                  example: dsky\n                  type: string\n              required:\n                - username\n                - id\n                - hash\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Delete from Meal Plan\n  \"/mealplanner/{username}/shopping-list\":\n    get:\n      deprecated: false\n      description: Get the current shopping list for the given user.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Shopping-List\n      operationId: getShoppingList\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Shopping List\n  \"/mealplanner/{username}/shopping-list/items\":\n    post:\n      deprecated: false\n      description: Add an item to the current shopping list of a user.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Add-to-Shopping-List\n      operationId: addToShoppingList\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      requestBody:\n        content:\n          \"\":\n            schema:\n              properties:\n                hash:\n                  description: The private hash for the username.\n                  example: 4b5v4398573406\n                  type: string\n                username:\n                  description: The username.\n                  example: dsky\n                  type: string\n              required:\n                - username\n                - hash\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Add to Shopping List\n  \"/mealplanner/{username}/shopping-list/items/{id}\":\n    delete:\n      deprecated: false\n      description: Delete an item from the current shopping list of the user.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Delete-from-Shopping-List\n      operationId: deleteFromShoppingList\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The shopping list item id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 15678\n            type: number\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      requestBody:\n        content:\n          \"\":\n            schema:\n              properties:\n                hash:\n                  description: The private hash for the username.\n                  example: 4b5v4398573406\n                  type: string\n                id:\n                  description: The shopping list item id.\n                  example: 15678\n                  type: number\n                username:\n                  description: The username.\n                  example: dsky\n                  type: string\n              required:\n                - username\n                - id\n                - hash\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Delete from Shopping List\n  \"/mealplanner/{username}/shopping-list/{start-date}/{end-date}\":\n    post:\n      deprecated: false\n      description: Generate the shopping list for a user from the meal planner in a given time frame.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Generate-Shopping-List\n      operationId: generateShoppingList\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The start date in the format yyyy-mm-dd.\n          explode: false\n          in: path\n          name: start-date\n          required: true\n          schema:\n            example: 2020-06-01\n            type: string\n          style: simple\n        - description: The end date in the format yyyy-mm-dd.\n          explode: false\n          in: path\n          name: end-date\n          required: true\n          schema:\n            example: 2020-06-07\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      requestBody:\n        content:\n          \"\":\n            schema:\n              properties:\n                end-date:\n                  description: The end date in the format yyyy-mm-dd.\n                  example: 2020-06-07\n                  type: string\n                hash:\n                  description: The private hash for the username.\n                  example: 4b5v4398573406\n                  type: string\n                start-date:\n                  description: The start date in the format yyyy-mm-dd.\n                  example: 2020-06-01\n                  type: string\n                username:\n                  description: The username.\n                  example: dsky\n                  type: string\n              required:\n                - username\n                - start-date\n                - end-date\n                - hash\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Generate Shopping List\n  \"/mealplanner/{username}/templates\":\n    get:\n      deprecated: false\n      description: Get meal plan templates from user or public ones.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates\n      operationId: getMealPlanTemplates\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Meal Plan Templates\n  \"/mealplanner/{username}/templates/{id}\":\n    get:\n      deprecated: false\n      description: Get information about a meal plan template.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template\n      operationId: getMealPlanTemplate\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The shopping list item id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 15678\n            type: number\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Meal Plan Template\n  \"/mealplanner/{username}/week/{start-date}\":\n    get:\n      deprecated: false\n      description: Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week\n      operationId: getMealPlanWeek\n      parameters:\n        - description: The username.\n          explode: false\n          in: path\n          name: username\n          required: true\n          schema:\n            example: dsky\n            type: string\n          style: simple\n        - description: The start date of the meal planned week in the format yyyy-mm-dd.\n          explode: false\n          in: path\n          name: start-date\n          required: true\n          schema:\n            example: 2020-06-01\n            type: string\n          style: simple\n        - description: The private hash for the username.\n          explode: false\n          in: query\n          name: hash\n          required: true\n          schema:\n            example: 4b5v4398573406\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Meal Plan Week\n  /recipes/analyzeInstructions:\n    post:\n      deprecated: false\n      description: This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions\n      operationId: analyzeRecipeInstructions\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                instructions:\n                  description: The instructions to be analyzed.\n                  example: Put the garlic in a pan and then add the onion. Add some salt and oregano.\n                  type: string\n              required:\n                - instructions\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Analyze Recipe Instructions\n  /recipes/autocomplete:\n    get:\n      deprecated: false\n      description: Autocomplete a partial input to suggest possible recipe names.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search\n      operationId: autocompleteRecipeSearch\n      parameters:\n        - description: The query to be autocompleted.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: burger\n            type: string\n          style: form\n        - description: The number of results to return (between 1 and 25).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Autocomplete Recipe Search\n  /recipes/complexSearch:\n    get:\n      deprecated: false\n      description: \"Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.\"\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Recipes\n      operationId: searchRecipes\n      parameters:\n        - description: The (natural language) recipe search query.\n          explode: false\n          in: query\n          name: query\n          required: true\n          schema:\n            example: pasta\n            type: string\n          style: form\n        - description: The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.\n          explode: false\n          in: query\n          name: cuisine\n          required: false\n          schema:\n            example: italian\n            type: string\n          style: form\n        - description: The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.\n          explode: false\n          in: query\n          name: excludeCuisine\n          required: false\n          schema:\n            example: greek\n            type: string\n          style: form\n        - description: The diet for which the recipes must be suitable. See a full list of supported diets.\n          explode: false\n          in: query\n          name: diet\n          required: false\n          schema:\n            example: vegetarian\n            type: string\n          style: form\n        - description: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.\n          explode: false\n          in: query\n          name: intolerances\n          required: false\n          schema:\n            example: gluten\n            type: string\n          style: form\n        - description: The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".\n          explode: false\n          in: query\n          name: equipment\n          required: false\n          schema:\n            example: pan\n            type: string\n          style: form\n        - description: A comma-separated list of ingredients that should/must be used in the recipes.\n          explode: false\n          in: query\n          name: includeIngredients\n          required: false\n          schema:\n            example: tomato,cheese\n            type: string\n          style: form\n        - description: A comma-separated list of ingredients or ingredient types that the recipes must not contain.\n          explode: false\n          in: query\n          name: excludeIngredients\n          required: false\n          schema:\n            example: eggs\n            type: string\n          style: form\n        - description: The type of recipe. See a full list of supported meal types.\n          explode: false\n          in: query\n          name: type\n          required: false\n          schema:\n            example: main course\n            type: string\n          style: form\n        - description: Whether the recipes must have instructions.\n          explode: false\n          in: query\n          name: instructionsRequired\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n        - description: Add information about the ingredients and whether they are used or missing in relation to the query.\n          explode: false\n          in: query\n          name: fillIngredients\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n        - description: If set to true, you get more information about the recipes returned.\n          explode: false\n          in: query\n          name: addRecipeInformation\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n        - description: If set to true, you get nutritional information about each recipes returned.\n          explode: false\n          in: query\n          name: addRecipeNutrition\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n        - description: The username of the recipe author.\n          explode: false\n          in: query\n          name: author\n          required: false\n          schema:\n            example: coffeebean\n            type: string\n          style: form\n        - description: User defined tags that have to match. The author param has to be set.\n          explode: false\n          in: query\n          name: tags\n          required: false\n          schema:\n            example: myCustomTag\n            type: string\n          style: form\n        - description: The id of the recipe box to which the search should be limited to.\n          explode: false\n          in: query\n          name: recipeBoxId\n          required: false\n          schema:\n            example: 2468\n            type: number\n          style: form\n        - description: Enter text that must be found in the title of the recipes.\n          explode: false\n          in: query\n          name: titleMatch\n          required: false\n          schema:\n            example: Crock Pot\n            type: string\n          style: form\n        - description: The maximum time in minutes it should take to prepare and cook the recipe.\n          explode: false\n          in: query\n          name: maxReadyTime\n          required: false\n          schema:\n            example: 20\n            type: number\n          style: form\n        - description: Whether to ignore typical pantry items, such as water, salt, flour, etc.\n          explode: false\n          in: query\n          name: ignorePantry\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n        - description: The strategy to sort recipes by. See a full list of supported sorting options.\n          explode: false\n          in: query\n          name: sort\n          required: false\n          schema:\n            example: calories\n            type: string\n          style: form\n        - description: The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).\n          explode: false\n          in: query\n          name: sortDirection\n          required: false\n          schema:\n            example: asc\n            type: string\n          style: form\n        - description: The minimum amount of carbohydrates in grams the recipe must have.\n          explode: false\n          in: query\n          name: minCarbs\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of carbohydrates in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxCarbs\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of protein in grams the recipe must have.\n          explode: false\n          in: query\n          name: minProtein\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of protein in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxProtein\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of calories the recipe must have.\n          explode: false\n          in: query\n          name: minCalories\n          required: false\n          schema:\n            example: 50\n            type: number\n          style: form\n        - description: The maximum amount of calories the recipe can have.\n          explode: false\n          in: query\n          name: maxCalories\n          required: false\n          schema:\n            example: 800\n            type: number\n          style: form\n        - description: The minimum amount of fat in grams the recipe must have.\n          explode: false\n          in: query\n          name: minFat\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n        - description: The maximum amount of fat in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxFat\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of alcohol in grams the recipe must have.\n          explode: false\n          in: query\n          name: minAlcohol\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of alcohol in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxAlcohol\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of caffeine in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCaffeine\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of caffeine in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCaffeine\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of copper in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCopper\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of copper in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCopper\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of calcium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCalcium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of calcium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCalcium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of choline in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCholine\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of choline in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCholine\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of cholesterol in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCholesterol\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of cholesterol in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCholesterol\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of fluoride in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minFluoride\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of fluoride in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxFluoride\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of saturated fat in grams the recipe must have.\n          explode: false\n          in: query\n          name: minSaturatedFat\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of saturated fat in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxSaturatedFat\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin A in IU the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminA\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin A in IU the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminA\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin C milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminC\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin C in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminC\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin D in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminD\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin D in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminD\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin E in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminE\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin E in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminE\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin K in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminK\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin K in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminK\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B1 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB1\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B1 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB1\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B2 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB2\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B2 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB2\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B5 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB5\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B5 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB5\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B3 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB3\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B3 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB3\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B6 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB6\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B6 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB6\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B12 in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB12\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B12 in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB12\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of fiber in grams the recipe must have.\n          explode: false\n          in: query\n          name: minFiber\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of fiber in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxFiber\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of folate in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minFolate\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of folate in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxFolate\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of folic acid in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minFolicAcid\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of folic acid in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxFolicAcid\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of iodine in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minIodine\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of iodine in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxIodine\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of iron in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minIron\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of iron in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxIron\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of magnesium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minMagnesium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of magnesium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxMagnesium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of manganese in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minManganese\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of manganese in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxManganese\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of phosphorus in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minPhosphorus\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of phosphorus in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxPhosphorus\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of potassium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minPotassium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of potassium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxPotassium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of selenium in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minSelenium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of selenium in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxSelenium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of sodium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minSodium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of sodium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxSodium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of sugar in grams the recipe must have.\n          explode: false\n          in: query\n          name: minSugar\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of sugar in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxSugar\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of zinc in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minZinc\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of zinc in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxZinc\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The number of results to skip (between 0 and 900).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: Whether the recipes should have an open license that allows display with proper attribution.\n          explode: false\n          in: query\n          name: limitLicense\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Recipes\n  /recipes/convert:\n    get:\n      deprecated: false\n      description: Convert amounts like \"2 cups of flour to grams\".\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Convert-Amounts\n      operationId: convertAmounts\n      parameters:\n        - description: The ingredient which you want to convert.\n          explode: false\n          in: query\n          name: ingredientName\n          required: true\n          schema:\n            example: flour\n            type: string\n          style: form\n        - description: The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".\n          explode: false\n          in: query\n          name: sourceAmount\n          required: true\n          schema:\n            example: 2.5\n            type: number\n          style: form\n        - description: The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"\n          explode: false\n          in: query\n          name: sourceUnit\n          required: true\n          schema:\n            example: cups\n            type: string\n          style: form\n        - description: The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"\n          explode: false\n          in: query\n          name: targetUnit\n          required: true\n          schema:\n            example: grams\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Convert Amounts\n  /recipes/cuisine:\n    post:\n      deprecated: false\n      description: Classify the recipe's cuisine.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Classify-Cuisine\n      operationId: classifyCuisine\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                ingredientList:\n                  description: The ingredient list of the recipe, one ingredient per line (separate lines with \\n).\n                  example: 3 oz pork shoulder\n                  type: string\n                title:\n                  description: The title of the recipe.\n                  example: Pork roast with green beans\n                  type: string\n              required:\n                - title\n                - ingredientList\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Classify Cuisine\n  /recipes/extract:\n    get:\n      deprecated: false\n      description: This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website\n      operationId: extractRecipeFromWebsite\n      parameters:\n        - description: The URL of the recipe page.\n          explode: false\n          in: query\n          name: url\n          required: true\n          schema:\n            example: https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies\n            type: string\n          style: form\n        - description: If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.\n          explode: false\n          in: query\n          name: forceExtraction\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n        - description: If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.\n          explode: false\n          in: query\n          name: analyze\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Extract Recipe from Website\n  /recipes/findByIngredients:\n    get:\n      deprecated: false\n      description: \"\n\n        \\            Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).\n\n        \\        \"\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients\n      operationId: searchRecipesByIngredients\n      parameters:\n        - description: A comma-separated list of ingredients that the recipes should contain.\n          explode: false\n          in: query\n          name: ingredients\n          required: true\n          schema:\n            example: apples,flour,sugar\n            type: string\n          style: form\n        - description: The maximum number of recipes to return (between 1 and 100). Defaults to 10.\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: Whether the recipes should have an open license that allows display with proper attribution.\n          explode: false\n          in: query\n          name: limitLicense\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n        - description: Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.\n          explode: false\n          in: query\n          name: ranking\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n        - description: Whether to ignore typical pantry items, such as water, salt, flour, etc.\n          explode: false\n          in: query\n          name: ignorePantry\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Recipes by Ingredients\n  /recipes/findByNutrients:\n    get:\n      deprecated: false\n      description: Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients\n      operationId: searchRecipesByNutrients\n      parameters:\n        - description: The minimum amount of carbohydrates in grams the recipe must have.\n          explode: false\n          in: query\n          name: minCarbs\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of carbohydrates in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxCarbs\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of protein in grams the recipe must have.\n          explode: false\n          in: query\n          name: minProtein\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: The maximum amount of protein in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxProtein\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of calories the recipe must have.\n          explode: false\n          in: query\n          name: minCalories\n          required: false\n          schema:\n            example: 50\n            type: number\n          style: form\n        - description: The maximum amount of calories the recipe can have.\n          explode: false\n          in: query\n          name: maxCalories\n          required: false\n          schema:\n            example: 800\n            type: number\n          style: form\n        - description: The minimum amount of fat in grams the recipe must have.\n          explode: false\n          in: query\n          name: minFat\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n        - description: The maximum amount of fat in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxFat\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of alcohol in grams the recipe must have.\n          explode: false\n          in: query\n          name: minAlcohol\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of alcohol in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxAlcohol\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of caffeine in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCaffeine\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of caffeine in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCaffeine\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of copper in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCopper\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of copper in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCopper\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of calcium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCalcium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of calcium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCalcium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of choline in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCholine\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of choline in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCholine\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of cholesterol in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minCholesterol\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of cholesterol in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxCholesterol\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of fluoride in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minFluoride\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of fluoride in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxFluoride\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of saturated fat in grams the recipe must have.\n          explode: false\n          in: query\n          name: minSaturatedFat\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of saturated fat in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxSaturatedFat\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin A in IU the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminA\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin A in IU the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminA\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin C in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminC\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin C in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminC\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin D in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminD\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin D in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminD\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin E in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminE\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin E in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminE\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin K in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminK\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin K in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminK\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B1 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB1\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B1 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB1\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B2 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB2\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B2 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB2\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B5 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB5\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B5 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB5\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B3 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB3\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B3 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB3\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B6 in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB6\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B6 in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB6\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of Vitamin B12 in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minVitaminB12\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of Vitamin B12 in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxVitaminB12\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of fiber in grams the recipe must have.\n          explode: false\n          in: query\n          name: minFiber\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of fiber in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxFiber\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of folate in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minFolate\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of folate in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxFolate\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of folic acid in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minFolicAcid\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of folic acid in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxFolicAcid\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of iodine in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minIodine\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of iodine in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxIodine\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of iron in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minIron\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of iron in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxIron\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of magnesium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minMagnesium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of magnesium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxMagnesium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of manganese in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minManganese\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of manganese in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxManganese\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of phosphorus in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minPhosphorus\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of phosphorus in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxPhosphorus\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of potassium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minPotassium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of potassium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxPotassium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of selenium in micrograms the recipe must have.\n          explode: false\n          in: query\n          name: minSelenium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of selenium in micrograms the recipe can have.\n          explode: false\n          in: query\n          name: maxSelenium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of sodium in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minSodium\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of sodium in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxSodium\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of sugar in grams the recipe must have.\n          explode: false\n          in: query\n          name: minSugar\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of sugar in grams the recipe can have.\n          explode: false\n          in: query\n          name: maxSugar\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The minimum amount of zinc in milligrams the recipe must have.\n          explode: false\n          in: query\n          name: minZinc\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The maximum amount of zinc in milligrams the recipe can have.\n          explode: false\n          in: query\n          name: maxZinc\n          required: false\n          schema:\n            example: 100\n            type: number\n          style: form\n        - description: The number of results to skip (between 0 and 900).\n          explode: false\n          in: query\n          name: offset\n          required: false\n          schema:\n            example: 0\n            type: number\n          style: form\n        - description: The number of expected results (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 10\n            type: number\n          style: form\n        - description: If true, every request will give you a random set of recipes within the requested limits.\n          explode: false\n          in: query\n          name: random\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n        - description: Whether the recipes should have an open license that allows display with proper attribution.\n          explode: false\n          in: query\n          name: limitLicense\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Search Recipes by Nutrients\n  /recipes/guessNutrition:\n    get:\n      deprecated: false\n      description: Estimate the macronutrients of a dish based on its title.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name\n      operationId: guessNutritionByDishName\n      parameters:\n        - description: The title of the dish.\n          explode: false\n          in: query\n          name: title\n          required: true\n          schema:\n            example: Spaghetti Aglio et Olio\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Guess Nutrition by Dish Name\n  /recipes/informationBulk:\n    get:\n      deprecated: false\n      description: Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk\n      operationId: getRecipeInformationBulk\n      parameters:\n        - description: A comma-separated list of recipe ids.\n          explode: false\n          in: query\n          name: ids\n          required: true\n          schema:\n            example: 715538,716429\n            type: string\n          style: form\n        - description: Include nutrition data to the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.\n          explode: false\n          in: query\n          name: includeNutrition\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Information Bulk\n  /recipes/parseIngredients:\n    post:\n      deprecated: false\n      description: Extract an ingredient from plain text.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Parse-Ingredients\n      operationId: parseIngredients\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                includeNutrition:\n                  description: Whether nutrition data should be added to correctly parsed ingredients.\n                  example: true\n                  type: boolean\n                ingredientList:\n                  description: The ingredient list of the recipe, one ingredient per line.\n                  example: 1 cup green tea\n                  type: string\n                servings:\n                  description: The number of servings that you can make from the ingredients.\n                  example: 1\n                  type: number\n              required:\n                - ingredientList\n                - servings\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Parse Ingredients\n  /recipes/queries/analyze:\n    get:\n      deprecated: false\n      description: Parse a recipe search query to find out its intention.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query\n      operationId: analyzeARecipeSearchQuery\n      parameters:\n        - description: The recipe search query.\n          explode: false\n          in: query\n          name: q\n          required: true\n          schema:\n            example: salmon with fusilli and no nuts\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Analyze a Recipe Search Query\n  /recipes/quickAnswer:\n    get:\n      deprecated: false\n      description: Answer a nutrition related natural language question.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Quick-Answer\n      operationId: quickAnswer\n      parameters:\n        - description: The nutrition related question.\n          explode: false\n          in: query\n          name: q\n          required: true\n          schema:\n            example: How much vitamin c is in 2 apples?\n            type: string\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Quick Answer\n  /recipes/random:\n    get:\n      deprecated: false\n      description: Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Random-Recipes\n      operationId: getRandomRecipes\n      parameters:\n        - description: Whether the recipes should have an open license that allows display with proper attribution.\n          explode: false\n          in: query\n          name: limitLicense\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n        - description: The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.\n          explode: false\n          in: query\n          name: tags\n          required: false\n          schema:\n            example: vegetarian, dessert\n            type: string\n          style: form\n        - description: The number of random recipes to be returned (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Random Recipes\n  /recipes/visualizeEquipment:\n    post:\n      deprecated: false\n      description: Visualize the equipment used to make a recipe. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Equipment\n      operationId: visualizeEquipment\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                defaultCss:\n                  description: Whether the default CSS should be added to the response.\n                  example: true\n                  type: boolean\n                instructions:\n                  description: The recipe's instructions.\n                  example: Preheat oven. Cut cucumber with a knife and put in a blender.\n                  type: string\n                showBacklink:\n                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n                  example: true\n                  type: boolean\n                view:\n                  description: How to visualize the equipment, either \"grid\" or \"list\".\n                  example: grid\n                  type: string\n              required:\n                - instructions\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Equipment\n  /recipes/visualizeIngredients:\n    post:\n      deprecated: false\n      description: Visualize ingredients of a recipe. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Ingredients\n      operationId: visualizeIngredients\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                defaultCss:\n                  description: Whether the default CSS should be added to the response.\n                  example: true\n                  type: boolean\n                ingredientList:\n                  description: The ingredient list of the recipe, one ingredient per line.\n                  example: 3 oz flour\n                  type: string\n                measure:\n                  description: The original system of measurement, either \"metric\" or \"us\".\n                  example: metric\n                  type: string\n                servings:\n                  description: The number of servings.\n                  example: 2\n                  type: number\n                showBacklink:\n                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n                  example: true\n                  type: boolean\n                view:\n                  description: How to visualize the ingredients, either \"grid\" or \"list\".\n                  example: grid\n                  type: string\n              required:\n                - ingredientList\n                - servings\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Ingredients\n  /recipes/visualizeNutrition:\n    post:\n      deprecated: false\n      description: Visualize a recipe's nutritional information as HTML including CSS. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition\n      operationId: visualizeRecipeNutrition\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                defaultCss:\n                  description: Whether the default CSS should be added to the response.\n                  example: true\n                  type: boolean\n                ingredientList:\n                  description: The ingredient list of the recipe, one ingredient per line.\n                  example: 3 oz flour\n                  type: string\n                servings:\n                  description: The number of servings.\n                  example: 2\n                  type: number\n                showBacklink:\n                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n                  example: true\n                  type: boolean\n              required:\n                - ingredientList\n                - servings\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Nutrition\n  /recipes/visualizePriceEstimator:\n    post:\n      deprecated: false\n      description: Visualize the price breakdown of a recipe. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Price-Breakdown\n      operationId: visualizePriceBreakdown\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                defaultCss:\n                  description: Whether the default CSS should be added to the response.\n                  example: true\n                  type: boolean\n                ingredientList:\n                  description: The ingredient list of the recipe, one ingredient per line.\n                  example: 3 oz flour\n                  type: string\n                mode:\n                  description: The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).\n                  example: 1\n                  type: number\n                servings:\n                  description: The number of servings.\n                  example: 2\n                  type: number\n                showBacklink:\n                  description: Whether to show a backlink to spoonacular. If set false, this call counts against your quota.\n                  example: true\n                  type: boolean\n              required:\n                - ingredientList\n                - servings\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Price Breakdown\n  /recipes/visualizeRecipe:\n    post:\n      deprecated: false\n      description: Generate a recipe card for a recipe.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Create-Recipe-Card\n      operationId: createRecipeCard\n      parameters: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                author:\n                  description: The author of the recipe.\n                  example: Anna Banana\n                  type: string\n                backgroundColor:\n                  description: The background color for the recipe card as a hex-string.\n                  example: \"#ffffff\"\n                  type: string\n                backgroundImage:\n                  description: The background image (\"none\",\"background1\", or \"background2\").\n                  example: background1\n                  type: string\n                fontColor:\n                  description: The font color for the recipe card as a hex-string.\n                  example: \"#333333\"\n                  type: string\n                image:\n                  description: The binary image of the recipe as jpg.\n                  example: \"\"\n                  format: binary\n                  type: string\n                ingredients:\n                  description: The ingredient list of the recipe, one ingredient per line (separate lines with \\n).\n                  example: 2 cups of green beans\n                  type: string\n                instructions:\n                  description: The instructions to make the recipe. One step per line (separate lines with \\n).\n                  example: cook the beans\n                  type: string\n                mask:\n                  description: The mask to put over the recipe image (\"ellipseMask\", \"diamondMask\", \"starMask\", \"heartMask\", \"potMask\", \"fishMask\").\n                  example: ellipseMask\n                  type: string\n                readyInMinutes:\n                  description: The number of minutes it takes to get the recipe on the table.\n                  example: 60\n                  type: number\n                servings:\n                  description: The number of servings the recipe makes.\n                  example: 2\n                  type: number\n                source:\n                  description: The source of the recipe.\n                  example: spoonacular.com\n                  type: string\n                title:\n                  description: The title of the recipe.\n                  example: My recipe\n                  type: string\n              required:\n                - title\n                - image\n                - ingredients\n                - instructions\n                - readyInMinutes\n                - servings\n                - mask\n                - backgroundImage\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Create Recipe Card\n  /recipes/visualizeTaste:\n    post:\n      deprecated: false\n      description: Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste\n      operationId: visualizeRecipeTaste\n      parameters: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                ingredientList:\n                  description: The ingredient list of the recipe, one ingredient per line.\n                  example: 1 lemon\n                  type: string\n              required:\n                - ingredientList\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Taste\n  \"/recipes/{id}/analyzedInstructions\":\n    get:\n      deprecated: false\n      description: Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions\n      operationId: getAnalyzedRecipeInstructions\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 324694\n            type: number\n          style: simple\n        - description: Whether to break down the recipe steps even more.\n          explode: false\n          in: query\n          name: stepBreakdown\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Analyzed Recipe Instructions\n  \"/recipes/{id}/equipmentWidget\":\n    get:\n      deprecated: false\n      description: Visualize a recipe's equipment list.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Equipment-by-ID\n      operationId: visualizeRecipeEquipmentByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 44860\n            type: number\n          style: simple\n        - description: Whether the default CSS should be added to the response.\n          explode: false\n          in: query\n          name: defaultCss\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Equipment by ID\n  \"/recipes/{id}/equipmentWidget.json\":\n    get:\n      deprecated: false\n      description: Get a recipe's equipment list.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Equipment-by-ID\n      operationId: getRecipeEquipmentByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1003464\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Equipment by ID\n  \"/recipes/{id}/information\":\n    get:\n      deprecated: false\n      description: Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Information\n      operationId: getRecipeInformation\n      parameters:\n        - description: The id of the recipe.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 716429\n            type: number\n          style: simple\n        - description: Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.\n          explode: false\n          in: query\n          name: includeNutrition\n          required: false\n          schema:\n            example: false\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Information\n  \"/recipes/{id}/ingredientWidget\":\n    get:\n      deprecated: false\n      description: Visualize a recipe's ingredient list.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Ingredients-by-ID\n      operationId: visualizeRecipeIngredientsByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1082038\n            type: number\n          style: simple\n        - description: Whether the default CSS should be added to the response.\n          explode: false\n          in: query\n          name: defaultCss\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Ingredients by ID\n  \"/recipes/{id}/ingredientWidget.json\":\n    get:\n      deprecated: false\n      description: Get a recipe's ingredient list.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Ingredients-by-ID\n      operationId: getRecipeIngredientsByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1003464\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Ingredients by ID\n  \"/recipes/{id}/nutritionWidget\":\n    get:\n      deprecated: false\n      description: Visualize a recipe's nutritional information as HTML including CSS.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Nutrition-by-ID\n      operationId: visualizeRecipeNutritionByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1082038\n            type: number\n          style: simple\n        - description: Whether the default CSS should be added to the response.\n          explode: false\n          in: query\n          name: defaultCss\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Nutrition by ID\n  \"/recipes/{id}/nutritionWidget.json\":\n    get:\n      deprecated: false\n      description: Get a recipe's nutrition widget data.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Nutrition-Widget-by-ID\n      operationId: getRecipeNutritionWidgetByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1003464\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Nutrition Widget by ID\n  \"/recipes/{id}/priceBreakdownWidget\":\n    get:\n      deprecated: false\n      description: Visualize a recipe's price breakdown.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Price-Breakdown-by-ID\n      operationId: visualizeRecipePriceBreakdownByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1082038\n            type: number\n          style: simple\n        - description: Whether the default CSS should be added to the response.\n          explode: false\n          in: query\n          name: defaultCss\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Price Breakdown by ID\n  \"/recipes/{id}/priceBreakdownWidget.json\":\n    get:\n      deprecated: false\n      description: Get a recipe's price breakdown data.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Price-Breakdown-by-ID\n      operationId: getRecipePriceBreakdownByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 1003464\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Price Breakdown by ID\n  \"/recipes/{id}/similar\":\n    get:\n      deprecated: false\n      description: Find recipes which are similar to the given one.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Similar-Recipes\n      operationId: getSimilarRecipes\n      parameters:\n        - description: The id of the source recipe for which similar recipes should be found.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 715538\n            type: number\n          style: simple\n        - description: The number of random recipes to be returned (between 1 and 100).\n          explode: false\n          in: query\n          name: number\n          required: false\n          schema:\n            example: 1\n            type: number\n          style: form\n        - description: Whether the recipes should have an open license that allows display with proper attribution.\n          explode: false\n          in: query\n          name: limitLicense\n          required: false\n          schema:\n            example: true\n            type: boolean\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Similar Recipes\n  \"/recipes/{id}/summary\":\n    get:\n      deprecated: false\n      description: Automatically generate a short description that summarizes key information about the recipe.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Summarize-Recipe\n      operationId: summarizeRecipe\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 4632\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Summarize Recipe\n  \"/recipes/{id}/tasteWidget\":\n    get:\n      deprecated: false\n      description: Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Visualize-Recipe-Taste-by-ID\n      operationId: visualizeRecipeTasteByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 69095\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            text/html:\n              schema:\n                type: string\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Visualize Recipe Taste by ID\n  \"/recipes/{id}/tasteWidget.json\":\n    get:\n      deprecated: false\n      description: Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Get-Recipe-Taste-by-ID\n      operationId: getRecipeTasteByID\n      parameters:\n        - description: The recipe id.\n          explode: false\n          in: path\n          name: id\n          required: true\n          schema:\n            example: 69095\n            type: number\n          style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Get Recipe Taste by ID\n  /users/connect:\n    post:\n      deprecated: false\n      description: In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.\n      externalDocs:\n        description: Read entire docs\n        url: https://spoonacular.com/food-api/docs#Connect-User\n      operationId: connectUser\n      parameters: []\n      requestBody:\n        content:\n          \"\":\n            schema:\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Success\n          headers: {}\n        \"401\":\n          description: Unauthorized\n        \"403\":\n          description: Forbidden\n        \"404\":\n          description: Not Found\n      summary: Connect User\ncomponents:\n  schemas: {}\n  securitySchemes:\n    apiKeyScheme:\n      in: query\n      name: apiKey\n      type: apiKey\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@20502d3674db5fa060375c4cf54d52234b351baf/-/blob/APIs/spoonacular.com/1.0/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/20502d3674db5fa060375c4cf54d52234b351baf/APIs/spoonacular.com/1.0/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/mealplanner/{username}/day/{date}\": delete: operation \"clearMealPlanDay\": requestBody: parse content: at 1:46032: content type \"\": mime: no media type"
}