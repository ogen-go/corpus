{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "docs/_static/vcr/v1.yaml",
			"byteSize": 13012,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Nuts Verifiable Credential API spec\n  description: API specification for Verifiable Credentials\n  version: 1.0.0\n  license:\n    name: GPLv3\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/vcr/v1/vc:\n    post:\n      summary: Creates a new Verifiable Credential\n      description: |\n        Creates a new Verifiable Credential.\n\n        error returns:\n        * 400 - One or more of the given parameters are invalid\n        * 500 - An error occurred while processing the request\n      operationId: \"create\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IssueVCRequest'\n      responses:\n        \"200\":\n          description: \"New VC has been created successfully. Returns the Verifiable Credential.\"\n          content:\n            application/vc+json:\n              schema:\n                $ref: '#/components/schemas/VerifiableCredential'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v1/vc/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: URL encoded ID.\n        required: true\n        example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY#90382475609238467\"\n        schema:\n          type: string\n    get:\n      summary: \"Resolves a verifiable credential\"\n      description: \u003e\n        The resolutionResult contains the credential regardless of the validity.\n        The resolutionResult.currentStatus must be checked to see if the credential is valid.\n\n        error returns:\n        * 404 - Corresponding credential could not be found\n        * 500 - An error occurred while processing the request\n      operationId: \"resolve\"\n      parameters:\n        - name: resolveTime\n          in: query\n          description: a rfc3339 time string for resolving a VC at a specific moment in time\n          example: \"2012-01-02T12:00:00Z\"\n          schema:\n            type: string\n      tags:\n        - credential\n      responses:\n        \"200\":\n          description: Credential has been found and is returned.\n          content:\n            application/vc+json:\n              schema:\n                $ref: '#/components/schemas/ResolutionResult'\n        default:\n          $ref: '../common/error_response.yaml'\n    delete:\n      summary: \"Revoke a credential\"\n      description: |\n        Revoke a credential.\n\n        error returns:\n        * 400 - Credential can't be revoked. Most likely due to a missing private key.\n        * 404 - Credential is not found\n        * 409 - Credential has already been revoked\n        * 500 - An error occurred while processing the request\n      operationId: \"revoke\"\n      tags:\n        - credential\n      responses:\n        \"200\":\n          description: Revocation has been processed locally. It has also been published to the network.\n          content:\n            application/vc+json;type=revocation:\n              schema:\n                $ref: '#/components/schemas/Revocation'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v1/{concept}:\n    post:\n      summary: Search for a concept. A concept is backed by 1 or more VCs\n      description: |\n        Search for a concept. A concept is backed by 1 or more VCs.\n\n        error returns:\n        * 400 - Invalid paramters\n        * 404 - Concept not found\n        * 500 - An error occurred while processing the request\n      operationId: \"search\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        description: a query with key value pairs and pagination\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SearchRequest\"\n      parameters:\n        - name: concept\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: untrusted\n          in: query\n          description: when true, the search also returns untrusted credentials. Default false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Found 0 or more results.\n          content:\n            application/json:\n              example:\n              schema:\n                type: array\n                items:\n                  description: the returned JSON depends on the requested concept.\n                  type: object\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v1/trust:\n    post:\n      summary: Mark all the VCs of given type and issuer as 'trusted'.\n      description: |\n        The added trust is persisted and may be removed with a delete operation.\n\n        error returns:\n        * 400 - Invalid paramters\n        * 500 - An error occurred while processing the request\n      operationId: \"trustIssuer\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        description: a issuer/credentialType combination\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CredentialIssuer\"\n      responses:\n        \"204\":\n          description: The change was accepted.\n        default:\n          $ref: '../common/error_response.yaml'\n    delete:\n      summary: Remove trust in an issuer/credentialType combination\n      description: |\n        The removed trust is persisted.\n\n        error returns:\n        * 400 - Invalid paramters\n        * 500 - An error occurred while processing the request\n      operationId: \"untrustIssuer\"\n      tags:\n        - credential\n      requestBody:\n        required: true\n        description: a issuer/credentialType combination\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CredentialIssuer\"\n      responses:\n        \"204\":\n          description: The change was accepted.\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v1/{credentialType}/trusted:\n    get:\n      summary: \"List all trusted issuers for a given credential type\"\n      description: |\n        List all trusted issuers for a given credential type.\n\n        error returns:\n        * 400 - Malformed credential type\n        * 404 - Unkown credential type\n      operationId: \"listTrusted\"\n      tags:\n        - credential\n      parameters:\n        - name: credentialType\n          in: path\n          description: URL encoded Verifiable Credential Type.\n          required: true\n          example: \"NutsOrganizationCredential\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of trusted issuers is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DID'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/vcr/v1/{credentialType}/untrusted:\n    get:\n      summary: \"List all untrusted issuers for a given credential type\"\n      description: |\n        List all untrusted issuers for a given credential type.\n\n        error returns:\n        * 400 - Malformed credential type\n        * 404 - Unkown credential type\n      operationId: \"listUntrusted\"\n      tags:\n        - credential\n      parameters:\n        - name: credentialType\n          in: path\n          description: URL encoded Verifiable Credential Type.\n          required: true\n          example: \"NutsOrganizationCredential\"\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: List of untrusted issuers is returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DID'\n        default:\n          $ref: '../common/error_response.yaml'\ncomponents:\n  schemas:\n    CredentialSubject:\n      type: object\n      description: Subject of a Verifiable Credential identifying the holder and expressing claims.\n    CredentialIssuer:\n      type: object\n      required:\n        - issuer\n        - credentialType\n      properties:\n        issuer:\n          description: the DID of an issuer\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n          type: string\n        credentialType:\n          description: a credential type\n          example: NutsOrganizationCredential\n          type: string\n    DID:\n      type: string\n      description: DID according to Nuts specification\n      example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n    KeyValuePair:\n      type: object\n      description: used search params\n      required:\n        - key\n        - value\n      properties:\n        key:\n          description: \u003e\n            Fields from VCs to search on. Concept specific keys must be prepended with the concept name and a '.'.\n            Default fields like: issuer, subject, type do not require a prefix since they are a mandatory part of each VC.\n          type: string\n          example: company.name\n        value:\n          type: string\n    ResolutionResult:\n      type: object\n      description: result of a Resolve operation.\n      required:\n        - currentStatus\n        - verifiableCredential\n      properties:\n        currentStatus:\n          type: string\n          enum: [\"trusted\", \"revoked\", \"untrusted\"]\n          description: Only credentials with with \"trusted\" state are valid. If a revoked credential is also untrusted, revoked will be returned.\n        verifiableCredential:\n          $ref: \"#/components/schemas/VerifiableCredential\"\n    Revocation:\n      type: object\n      description: Credential revocation record\n      required:\n        - issuer\n        - subject\n        - date\n      properties:\n        issuer:\n          $ref: '#/components/schemas/DID'\n        subject:\n          type: string\n          description: subject refers to the credential identifier that is revoked\n        reason:\n          type: string\n          description: reason describes why the VC has been revoked\n        date:\n          type: string\n          description: date is a rfc3339 formatted datetime.\n        proof:\n          type: object\n          description: Proof contains the cryptographic proof(s).\n    SearchRequest:\n      type: object\n      description: \u003e\n        Input for a search call. Parameters are entered as key/value pairs.\n        Concept specific query params need to be prepended with the concept name.\n      required:\n        - params\n      properties:\n        params:\n          description: key/value pairs\n          type: array\n          items:\n            $ref: '#/components/schemas/KeyValuePair'\n        offset:\n          description: skips first x results, default 0\n          type: number\n        limit:\n          description: limit number of return values to x, default 10\n          type: number\n    VerifiableCredential:\n      type: object\n      description: A credential according to the W3C and Nuts specs.\n      required:\n        - \"@context\"\n        - type\n        - issuer\n        - issuanceDate\n        - credentialSubject\n        - proof\n      properties:\n        \"@context\":\n          description: List of URIs\n          type: array\n          items:\n            type: string\n        id:\n          description: credential ID. A Nuts DID followed by a large number.\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n          type: string\n        type:\n          description: List of type definitions for the credential. Always includes 'VerifiableCredential'\n          type: array\n          items:\n            type: string\n        issuer:\n          $ref: '#/components/schemas/DID'\n        issuanceDate:\n          description: rfc3339 time string when the credential was issued.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        expirationDate:\n          description: rfc3339 time string untill when the credential is valid.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        credentialSubject:\n          $ref: '#/components/schemas/CredentialSubject'\n        proof:\n          description: one or multiple cryptographic proofs\n          type: object\n    IssueVCRequest:\n      type: object\n      description: A request for issuing a new Verifiable Credential.\n      required:\n        - type\n        - issuer\n        - credentialSubject\n      properties:\n        type:\n          description: Type definition for the credential.\n          type: string\n          example: \"NutsOrganizationCredential\"\n        issuer:\n          description: DID according to Nuts specification.\n          type: string\n          example: \"did:nuts:B8PUHs2AUHbFF1xLLK4eZjgErEcMXHxs68FteY7NDtCY\"\n        expirationDate:\n          description: rfc3339 time string until when the credential is valid.\n          type: string\n          example: \"2012-01-02T12:00:00Z\"\n        credentialSubject:\n          $ref: '#/components/schemas/CredentialSubject'\n"
		}
	},
	"Error": "parse: parse spec: paths: /internal/vcr/v1/{concept}: post: operation \"search\": responses: default: resolve \"../common/error_response.yaml\" reference: invalid response reference: \"../common/error_response.yaml\""
}