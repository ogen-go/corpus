{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcsaorg/DCSA-OpenAPI"
		},
		"file": {
			"name": "tnt.yaml",
			"size": 0,
			"path": "tnt/v1/tnt.yaml",
			"byteSize": 21494,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.2.0\"\n  title: 'DCSA Track and Trace API'\n  description: 'API specifications for the Track and Trace interface standard 1.0 issued by DCSA.org. Newer versions of this API have been renamed, and are now found at: https://app.swaggerhub.com/apis/dcsaorg/DCSA_TNT/'\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: Digital Container Shipping Association (DCSA)\n    url: https://dcsa.org\n    email: info@dcsa.org\ntags:\n  - name: Events\n    description: Event operations\n  - name: Subscriptions\n    description: Subscription operations\npaths:\n  /events:\n    get:\n      tags:\n        - Events\n      summary: Find events by type, Booking Reference, Bill of Lading or Equipment Reference.\n      description: Returns all events filtered by the parameters.\n      parameters:\n        - in: query\n          name: eventType\n          description: The type of event(s) to filter by.\n          required: false\n          schema:\n            $ref: '#/components/schemas/eventTypeList'\n        - in: query\n          name: bookingReference\n          description: The identifier for a shipment, which is issued by and unique within each of the carriers.\n          required: false\n          schema:\n            $ref: '#/components/schemas/bookingReference'\n        - in: query\n          name: billOfLadingNumber\n          description:  Bill of lading number is an identifier that links to a shipment. Bill of Lading is the legal document issued to the customer, which confirms the carrier's receipt of the cargo from the customer acknowledging goods being shipped and specifying the terms of delivery.\n          required: false\n          schema:\n            $ref: '#/components/schemas/billOfLadingNumber'\n        - in: query\n          name: equipmentReference\n          description: The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n          required: false\n          schema:\n            $ref: '#/components/schemas/equipmentReference'\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/events'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n  /events/{eventID}:\n    get:\n      parameters:\n        - in: path\n          name: eventID\n          schema:\n            type: string\n          required: true\n          description: The ID of the event to receive\n      tags:\n        - Events\n      summary: Find events by eventID.\n      description: Returns event with the specified eventID.\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/transportEvent'\n                  - $ref: '#/components/schemas/shipmentEvent'\n                  - $ref: '#/components/schemas/equipmentEvent'\n                  - $ref: '#/components/schemas/transportEquipmentEvent'\n                discriminator:\n                  propertyName: eventType\n                example: #Couldn't use $ref in this example. Should be updated manually if shipmentEvent changes\n                  eventID: 1\n                  eventType: \"SHIPMENT\"\n                  eventDateTime: \"2019-11-12T07:41:00+08:30\"\n                  eventClassifierCode: \"ACT\"\n                  eventTypeCode: \"ARRI\"\n                  shipmentInformationTypeCode: \"SRM\"\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n  /event-subscriptions:\n    get:\n      tags:\n      - Subscriptions\n      summary: Receive a list of your active subscriptionIDs\n      responses:\n        '200':\n          description: Returns a list of event subscriptions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/eventSubscription'\n    post:\n      tags:\n      - Subscriptions\n      summary: Create an event subscription\n      requestBody:\n        description: Parameters used to configure the subscription\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/eventSubscriptionBody'\n      responses:\n        '201':\n          description: Subscription created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventSubscription'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n      callbacks:\n        event:\n          '{$request.body.callbackUrl}':\n            post:   # Method\n              parameters:\n                - in: header\n                  name: Signature\n                  required: true\n                  explode: true\n                  schema:\n                    $ref: '#/components/headers/signatureHeader'\n              requestBody: # Contents of the callback message\n                required: true\n                content:\n                  application/json:\n                    schema:\n                      $ref: '#/components/schemas/events'\n              responses:   # Expected responses to the callback message\n                '200':\n                  description: Your server returns this code if it accepts the callback\n  /event-subscriptions/{subscriptionID}:\n    get:\n      tags:\n      - Subscriptions\n      summary: Find event subscription by subscription ID\n      parameters:\n        - in: path\n          name: subscriptionID\n          required: true\n          description: The universal unique ID of the subscription to receive.\n          schema:\n            $ref: '#/components/parameters/subscriptionIDPathParam'\n      responses:\n        '200':\n          description: Subscription returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/eventSubscription'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    delete:\n      tags:\n      - Subscriptions\n      summary: Stop an event subscription, using the subscription ID\n      parameters:\n        - in: path\n          name: subscriptionID\n          required: true\n          schema:\n            $ref: '#/components/parameters/subscriptionIDPathParam'\n      responses:\n        '204':\n          description: Subscription stopped\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n    put:\n      tags:\n      - Subscriptions\n      summary: Alter an event subscription\n      parameters:\n        - in: path\n          name: subscriptionID\n          required: true\n          schema:\n            $ref: '#/components/parameters/subscriptionIDPathParam'\n      requestBody:\n        description: Parameters used to configure the subscription\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/eventSubscription'\n      responses:\n        '200':\n          description: Subscription updated\n          content:\n            application/json:\n              schema:\n               $ref: '#/components/schemas/eventSubscription'\n        default:\n          description: Unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n\n\n\ncomponents:\n  schemas:\n    event:\n      description: The event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment\n      type: object\n      properties:\n        eventID:\n          $ref: '#/components/schemas/eventID'\n        eventType:\n          $ref: '#/components/schemas/eventType'\n        eventDateTime:\n          $ref: '#/components/schemas/eventDateTime'\n        eventClassifierCode:\n          $ref: '#/components/schemas/eventClassifierCode'\n        eventTypeCode:\n          $ref: '#/components/schemas/eventTypeCode'\n      required:\n        - eventID\n        - eventType\n        - eventDateTime\n        - eventClassifierCode\n        - eventTypeCode\n    shipmentEvent:\n      description: The shipment event entity is a specialization of the event entity to support specification of data that only applies to a shipment event.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - type: object\n          properties:\n            eventType: #Overriding this property to have correct payload response examples\n              type: string\n              example: SHIPMENT\n              nullable: false\n              enum:\n                - SHIPMENT\n            shipmentInformationTypeCode:\n              $ref: '#/components/schemas/shipmentInformationTypeCode'\n          required:\n            - shipmentInformationTypeCode\n    transportEvent:\n      description: The transport event entity is a specialization of the event entity to support specification of data that only applies to a transport event.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - type: object\n          properties:\n            eventType: #Overriding this property to have correct payload response examples\n              type: string\n              example: TRANSPORT\n              nullable: false\n              enum:\n                - TRANSPORT\n            transportReference:\n              $ref: '#/components/schemas/transportReference'\n            transportLegReference:\n              $ref: '#/components/schemas/transportLegReference'\n            facilityTypeCode:\n              $ref: '#/components/schemas/facilityTypeCode'\n            UNLocationCode:\n              $ref: '#/components/schemas/UNLocationCode'\n            facilityCode:\n              $ref: '#/components/schemas/facilityCode'\n            otherFacility:\n              $ref: '#/components/schemas/otherFacility'\n            modeOfTransportCode:\n              $ref: '#/components/schemas/modeOfTransportCode'\n          required:\n            - transportReference\n            - transportLegReference\n            - facilityTypeCode\n            - UNLocationCode\n            - facilityCode\n    equipmentEvent:\n      description: The equipment event entity is a specialization of the event entity to support specification of data that only applies to an equipment event.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - type: object\n          properties:\n            eventType: #Overriding this property to have correct payload response examples\n              type: string\n              example: EQUIPMENT\n              nullable: false\n              enum:\n                - EQUIPMENT\n            equipmentReference:\n              $ref: '#/components/schemas/equipmentReference'\n            facilityTypeCode:\n              $ref: '#/components/schemas/facilityTypeCode'\n            UNLocationCode:\n              $ref: '#/components/schemas/UNLocationCode'\n            facilityCode:\n              $ref: '#/components/schemas/facilityCode'\n            otherFacility:\n              $ref: '#/components/schemas/otherFacility'\n            emptyIndicatorCode:\n              $ref: '#/components/schemas/emptyIndicatorCode'\n          required:\n            - facilityTypeCode\n            - UNLocationCode\n            - facilityCode\n            - emptyIndicatorCode\n    transportEquipmentEvent:\n      description: The transport equipment event entity is a specialization of the event entity to support specification of data that applies to both transport and equipment events.\n      allOf:\n        - $ref: '#/components/schemas/event'\n        - type: object\n          properties:\n            eventType: #Overriding this property to have correct payload response examples\n              type: string\n              example: TRANSPORTEQUIPMENT\n              nullable: false\n              enum:\n                - TRANSPORTEQUIPMENT\n            transportReference:\n              $ref: '#/components/schemas/transportReference'\n            transportLegReference:\n              $ref: '#/components/schemas/transportLegReference'\n            equipmentReference:\n              $ref: '#/components/schemas/equipmentReference'\n            facilityTypeCode:\n              $ref: '#/components/schemas/facilityTypeCode'\n            UNLocationCode:\n              $ref: '#/components/schemas/UNLocationCode'\n            facilityCode:\n              $ref: '#/components/schemas/facilityCode'\n            otherFacility:\n              $ref: '#/components/schemas/otherFacility'\n            emptyIndicatorCode:\n              $ref: '#/components/schemas/emptyIndicatorCode'\n            modeOfTransportCode:\n              $ref: '#/components/schemas/modeOfTransportCode'\n          required:\n            - transportReference\n            - transportLegReference\n            - facilityTypeCode\n            - UNLocationCode\n            - facilityCode\n            - emptyIndicatorCode\n    events:\n      type: object\n      description: List of events for shipment journey.\n      properties:\n        events:\n          type: array\n          items:\n            anyOf:\n              - $ref: '#/components/schemas/transportEvent'\n              - $ref: '#/components/schemas/shipmentEvent'\n              - $ref: '#/components/schemas/equipmentEvent'\n              - $ref: '#/components/schemas/transportEquipmentEvent'\n            discriminator:\n              propertyName: eventType\n      required:\n        - events\n    error:\n      type: object\n      required:\n        - httpMethod\n        - requestUri\n        - errors\n        - statusCode\n        - statusCodeText\n        - errorDateTime\n      properties:\n        httpMethod:\n          description: The HTTP request method type\n          type: string\n          example: POST\n        requestUri:\n          description: The request URI.\n          type: string\n          example: https://dcsa.org/dcsa/tnt/v1/events\n        errors:\n          $ref: '#/components/schemas/errors'\n        statusCode:\n          description: The HTTP status code\n          type: string\n          example: 400\n        statusCodeText:\n          description: The textual representation of the response status.\n          type: string\n          example: Bad Request\n        errorDateTime:\n          description: The date and time (in ISO 8601 format) the error occured.\n          type: string\n          example: '2019-11-12T07:41:00+08:30'\n    errors:\n      type: array\n      items:\n        type: object\n        properties:\n          reason:\n            description: High level error message.\n            type: string\n            example: invalidQuery\n          message:\n            description: Detailed error message.\n            type: string\n            example: The request did not contain one of the three required query parameters.\n        required:\n         - reason\n         - message\n    eventSubscriptionBody:\n      description: The object used by the POST event-subscriptions endpoint\n      type: object\n      properties:\n        callbackUrl:\n          $ref: '#/components/schemas/callbackUrl'\n        eventType:\n          $ref: '#/components/schemas/eventTypeList'\n        bookingReference:\n          $ref: '#/components/schemas/bookingReference'\n        billOfLadingNumber:\n          $ref: '#/components/schemas/billOfLadingNumber'\n        equipmentReference:\n          $ref: '#/components/schemas/equipmentReference'\n      required:\n        - callbackUrl\n    eventSubscription:\n      allOf:\n        - $ref: '#/components/schemas/subscriptionID'\n        - $ref: '#/components/schemas/eventSubscriptionBody'\n####String variables below\n    bookingReference:\n      type: string\n      example: ABC709951\n      description: The identifier for a shipment, which is issued by and unique within each of the carriers.\n    transportReference:\n      type: string\n      example: 9648714\n      description: The reference for the transport, e.g. when the mode of transport is a vessel, the transport reference will be the vessel IMO number.\n    equipmentReference:\n      type: string\n      example: APZU4812090\n      description: The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible. If a container is not yet assigned to a shipment, the interface cannot return any information when an equipment reference is given as input. If a container is assigned to an (active) shipment, the interface returns information on the active shipment.\n    billOfLadingNumber:\n      type: string\n      example: ABCD421911263977\n      description: Bill of lading number is an identifier that links to a shipment. Bill of Lading is the legal document issued to the customer, which confirms the carrier's receipt of the cargo from the customer acknowledging goods being shipped and specifying the terms of delivery.\n    facilityTypeCode:\n      type: string\n      example: POTE\n      description: The code to identify the specific type of facility.\n    UNLocationCode:\n      type: string\n      example: USNYC\n      description: The UN Location Code identifies a location in the sense of a city/a town/a village, being the smaller administrative area existing as defined by the competent national authority in each country.\n    facilityCode:\n      type: string\n      example: AEAUHADT\n      description: The code used for identifying the specific facility.\n    otherFacility:\n      type: string\n      example: Depot location or address\n      description: An alternative way to capture the facility when no standardized DCSA facility code can be found.\n    emptyIndicatorCode:\n      type: string\n      example: Empty\n      description: Code to denote whether the equipment is empty or laden.\n    shipmentInformationTypeCode:\n      type: string\n      example: SRM\n      description: The code to identify the type of information that is related to the shipment.\n    transportLegReference:\n      type: string\n      example: 025E\n      description: |\n        The transport leg reference will be specific per mode of transport:\n        - Vessel: Voyage number as specified by the vessel operator\n        - Truck: Not yet specified\n        - Rail: Not yet specified\n        - Barge: Not yet specified.\n    eventDateTime:\n      type: string\n      format: date-time\n      example: '2019-11-12T07:41:00+08:30'\n      description: The local date and time, where the event took place, in ISO 8601 format.\n    eventID:\n      type: string\n      example: 1\n      description: The unique identifier for the Equipment Event ID/Transport Event ID/Shipment Event ID.\n    eventClassifierCode:\n      type: string\n      example: ACT\n      description: Code for the event classifier, either PLN, ACT or EST.\n    eventTypeCode:\n      type: string\n      example: ARRI\n      description: Unique identifier for Event Type Code.\n    modeOfTransportCode:\n      type: string\n      example: 1\n      description: A code specifying a type of transport mode.\n    subscriptionID:\n      type: object\n      properties:\n        subscriptionID:\n          type: string\n          format: uuid\n          example: 123e4567-e89b-12d3-a456-426614174000\n      description: The carrier issues a unique ID to the shipper or consignee for that subscription\n    callbackUrl:   # Callback URL\n      type: string\n      format: uri\n      nullable: false\n      example: https://myserver.com/send/callback/here\n      description: Your server, where the API server should send the event data\n    eventType:\n      description: The Event Type of the object.\n      nullable: false\n      type: string\n      enum:\n        - EQUIPMENT\n        - SHIPMENT\n        - TRANSPORT\n        - TRANSPORTEQUIPMENT\n    eventTypeList:\n      description: A list of event types. Default is all events\n      example: [EQUIPMENT,SHIPMENT,TRANSPORT,TRANSPORTEQUIPMENT]\n      default: [EQUIPMENT,SHIPMENT,TRANSPORT,TRANSPORTEQUIPMENT]\n      type: array\n      items:\n        $ref: '#/components/schemas/eventType'\n# Added by API Auto Mocking Plugin\n  parameters:\n    subscriptionIDPathParam:\n      name: subscriptionID\n      in: path\n      description: The universal unique ID of the subscription to receive\n      required: true\n      schema:\n        type: string\n        format: uuid\n      example: 123e4567-e89b-12d3-a456-426614174000\n  headers:\n    signatureHeader:\n      schema:\n        type: object\n        properties:\n          keyId:\n            type: string\n            format: uuid\n            example: 123e4567-e89b-12d3-a456-426614174000\n          created:\n            type: integer\n            example: 1591960384\n          headers:\n            type: string\n            example: \"(request-target) (created) date host\"\n          signature:\n            type: string\n            example: aGkgZnJvbSBkZW5tYXJr\nservers:\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/dcsaorg/DCSA_OAS/1.2.0",
			"canonicalURL": "/github.com/dcsaorg/DCSA-OpenAPI@4733c746cf0c687bd498d3b63dc56d58d0a62952/-/blob/tnt/v1/tnt.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dcsaorg/DCSA-OpenAPI/blob/4733c746cf0c687bd498d3b63dc56d58d0a62952/tnt/v1/tnt.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/event-subscriptions/{subscriptionID}\": get: parameters: parse parameter \"subscriptionID\": schema: parse schema: at 1:13180: find schema: decode: yaml: unmarshal errors:\n  yaml: line 1: cannot unmarshal !!bool `true` into []string"
}