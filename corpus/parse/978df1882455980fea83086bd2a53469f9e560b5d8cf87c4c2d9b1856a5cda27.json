{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/swagger-api/swagger-core"
		},
		"file": {
			"name": "FullPetResource.yaml",
			"size": 0,
			"path": "modules/swagger-jaxrs2/src/test/resources/petstore/FullPetResource.yaml",
			"byteSize": 37551,
			"content": "openapi: 3.0.1\ninfo:\n  title: Pet Resource Example\n  description: API Definition\n  termsOfService: Terms of service\n  contact:\n    name: Fred\n    url: http://gigantic-server.com\n    email: Fred@gigagantic-server.com\n  license:\n    name: Apache 2.0\n    url: http://foo.bar\n  version: \"2.0\"\nexternalDocs:\n  description: definition docs desc\nservers:\n- url: http://foo\n  description: server 1\n  variables: {}\nsecurity:\n- req 1:\n  - a\n  - b\n- req 2:\n  - b\n  - c\ntags:\n- name: Tag 1\n  description: desc 1\n  externalDocs:\n    description: docs desc\n- name: Tag 2\n  description: desc 2\n  externalDocs:\n    description: docs desc 2\n- name: Tag 3\n- name: Definition First Tag\n- name: Definition Second Tag full\n  description: desc definition\n- name: Fourth Tag Full\n  description: desc\n  externalDocs:\n    description: docs desc\n- name: Fifth Tag Full\n  description: desc class\n  externalDocs:\n    description: docs desc class\npaths:\n  /pet/{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c= 10.  ID \u003e 10 or nonintegers will simulate\n        API error conditions\n      operationId: getPetById\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: The pet\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /pet:\n    put:\n      summary: Update an existing pet\n      operationId: updatePet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n    post:\n      summary: Add a new pet to the store\n      operationId: addPet\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n        required: true\n      responses:\n        \"405\":\n          description: Invalid input\n  /pet/bodynoannotation:\n    post:\n      summary: Add a new pet to the store no annotation\n      operationId: addPetNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        \"405\":\n          description: Invalid input\n  /pet/bodyid:\n    post:\n      summary: Add a new pet to the store passing an integer with generic parameter\n        annotation\n      operationId: addPetByInteger\n      requestBody:\n        description: Pet object that needs to be added to the store\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        \"405\":\n          description: Invalid input\n  /pet/bodyidnoannotation:\n    post:\n      summary: Add a new pet to the store passing an integer without parameter annotation\n      operationId: addPetByIntegerNoAnnotation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        \"405\":\n          description: Invalid input\n  /pet/findByStatus:\n    get:\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - name: status\n        in: query\n        description: Status values that need to be considered for filter\n        required: true\n        schema:\n          type: string\n      - name: skip\n        in: query\n        schema:\n          type: integer\n          format: int32\n      - name: limit\n        in: query\n        schema:\n          type: integer\n          format: int32\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use\n        tag1, tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n      - name: tags\n        in: query\n        description: Tags to filter by\n        required: true\n        schema:\n          type: string\n      responses:\n        default:\n          description: Pets matching criteria\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  /complexcallback:\n    get:\n      summary: Simple get operation\n      operationId: getWithNoParameters\n      parameters:\n      - name: id\n        in: query\n        description: idParam\n        schema:\n          $ref: '#/components/schemas/User'\n      responses:\n        \"200\":\n          description: voila!\n      callbacks:\n        testCallback1:\n          http://www.url.com:\n            get:\n              summary: get all the reviews\n              operationId: getAllReviews\n              responses:\n                \"200\":\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        type: integer\n                        format: int32\n        testCallback2:\n          http://www.url2.com:\n            get:\n              summary: get a review\n              operationId: getAnSpecificReviews\n              responses:\n                \"200\":\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        $ref: '#/components/schemas/User'\n  /multiplecallback:\n    get:\n      summary: Simple get operation\n      operationId: getWithNoParameters_1\n      responses:\n        \"200\":\n          description: voila!\n      callbacks:\n        testCallback1:\n          http://www.url.com:\n            get:\n              summary: get all the reviews\n              operationId: getAllReviews\n              responses:\n                \"200\":\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        type: integer\n                        format: int32\n        testCallback2:\n          http://$request.query.url: {}\n  /repeatablecallback:\n    get:\n      summary: Simple get operation\n      operationId: getWithNoParameters_2\n      responses:\n        \"200\":\n          description: voila!\n      callbacks:\n        testCallback:\n          http://$requests.query.url: {}\n        testCallback1:\n          http://www.url.com:\n            get:\n              summary: get all the reviews\n              operationId: getAllReviews\n              responses:\n                \"200\":\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        type: integer\n                        format: int32\n        testCallback2:\n          http://$request.query.url: {}\n  /simplecallback:\n    get:\n      summary: Simple get operation\n      operationId: getWithNoParameters_3\n      responses:\n        \"200\":\n          description: voila!\n      callbacks:\n        testCallback1:\n          http://www.url.com:\n            get:\n              summary: get all the reviews\n              operationId: getAllReviews\n              responses:\n                \"200\":\n                  description: successful operation\n                  content:\n                    application/json:\n                      schema:\n                        type: integer\n                        format: int32\n  /example:\n    post:\n      description: subscribes a client to updates relevant to the requestor's account\n      operationId: subscribe\n      parameters:\n      - name: subscriptionId\n        in: path\n        required: true\n        style: simple\n        schema:\n          type: string\n          description: Schema\n          example: Subscription example\n        examples:\n          subscriptionId_2:\n            summary: Subscription number 54321\n            description: subscriptionId_2\n            value: 54321\n            externalValue: Subscription external value 2\n          subscriptionId_1:\n            summary: Subscription number 12345\n            description: subscriptionId_1\n            value: 12345\n            externalValue: Subscription external value 1\n        example: example\n      requestBody:\n        description: Created user object\n        content:\n          '*/*':\n            schema:\n              type: string\n              description: the generated UUID\n              format: uuid\n              readOnly: true\n              example: Schema example\n            examples:\n              Default Request:\n                summary: Subscription Request Example\n                description: Default Request\n                value: SubscriptionRequest\n                externalValue: Subscription Request Value\n        required: true\n      responses:\n        default:\n          description: test description\n          content:\n            '*/*':\n              schema:\n                type: string\n                description: the generated UUID\n                format: uuid\n                readOnly: true\n                example: Schema example\n              examples:\n                Default Response:\n                  summary: Subscription Response Example\n                  description: Default Response\n                  value: SubscriptionResponse\n                  externalValue: Subscription Response value 1\n  /links:\n    get:\n      operationId: getUserWithAddress\n      parameters:\n      - name: userId\n        in: query\n        schema:\n          type: string\n      responses:\n        default:\n          description: test description\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n          links:\n            address:\n              operationId: getAddress\n              parameters:\n                userId: $request.query.userId\n            user:\n              operationId: getUser\n              parameters:\n                userId: $request.query.userId\n  /sameOperationName:\n    get:\n      description: Same Operation Name\n      operationId: getUser\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n    delete:\n      description: Same Operation Name Duplicated\n      operationId: getUser_1\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c= 10.  ID \u003e 10 or non integers will\n        simulate API error conditions\n      externalDocs:\n        description: External Annotation Documentation\n        url: http://url.me\n      operationId: petId\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /fullyannotatedoperation/{petId}:\n    get:\n      summary: Find pet by ID\n      description: Returns a pet when 0 \u003c ID \u003c= 10.  ID \u003e 10 or non integers will\n        simulate API error conditions\n      operationId: petId_1\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: The pet\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /interfaceoperation/{petId}:\n    get:\n      summary: Find pet by ID Operation in SubResource\n      description: Returns a pet in SubResource\n      operationId: getPetById_1\n      parameters:\n      - name: petId\n        in: path\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /notannotatedoperation:\n    get:\n      operationId: getUser_2\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /notannotatedoperationduplicated:\n    get:\n      operationId: getUser_3\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /operationsresource2:\n    get:\n      operationId: getUser_4\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /operationsresource:\n    get:\n      summary: Find pet by ID\n      description: combinatedfullyannotatedoperation/{petId}\n      operationId: petId_2\n      parameters:\n      - name: petId\n        in: query\n        description: ID of pet that needs to be fetched\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: The pet\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Pet'\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    put:\n      description: combinatedsameOperationName\n      operationId: combinated sameOperationName\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n    post:\n      operationId: getUser_5\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n    head:\n      description: combinatedsameOperationNameDuplicated\n      operationId: combinatedsameOperationNameDuplicated\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /operationwithouannotation:\n    get:\n      operationId: getUser_6\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                type: string\n  /serversoperation:\n    get:\n      description: Pets Example\n      operationId: Pets\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Pet'\n      servers:\n      - url: http://foo2\n        description: server 2\n        variables: {}\n  /arrayschema:\n    post:\n      description: subscribes a client to updates relevant to the requestor's account,\n        as identified by the input token.  The supplied url will be used as the delivery\n        address for response payloads\n      operationId: subscribe_1\n      parameters:\n      - name: arrayParameter\n        in: query\n        required: true\n        schema:\n          maxItems: 10\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/SubscriptionResponse'\n      responses:\n        default:\n          description: test description\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SubscriptionResponse'\n  /complexparameter:\n    get:\n      operationId: create User_1\n      parameters:\n      - name: phone\n        in: path\n        description: Phone\n        required: true\n        schema:\n          type: string\n      - name: id\n        in: query\n        description: idParam\n        schema:\n          type: string\n      - name: lastName\n        in: query\n        schema:\n          type: string\n      - name: address\n        in: query\n        description: address\n        schema:\n          $ref: '#/components/schemas/User'\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /multiplenoannotatedparameter:\n    post:\n      operationId: create User\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /openapijaxrsannotatedparameter:\n    get:\n      operationId: create User_2\n      parameters:\n      - name: id\n        in: query\n        description: idParam\n        schema:\n          type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /openapiwithcontentjaxrsannotatedparameter:\n    get:\n      operationId: create User_3\n      parameters:\n      - name: id\n        in: query\n        description: idParam\n        content:\n          '*/*':\n            schema:\n              type: string\n              description: Id Schema Definition\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /openapiwithimplementationjaxrsannotatedparameter:\n    get:\n      operationId: create User_4\n      parameters:\n      - name: id\n        in: query\n        description: idParam\n        schema:\n          $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /parameters:\n    post:\n      description: subscribes a client to updates relevant to the requestor's account,\n        as identified by the input token.  The supplied url will be used as the delivery\n        address for response payloads\n      operationId: subscribe_2\n      parameters:\n      - name: subscriptionId\n        in: path\n        required: true\n        style: simple\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: formId\n        in: query\n        required: true\n        schema:\n          type: string\n        example: Example\n      - name: explodeFalse\n        in: query\n        required: true\n        explode: false\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: explodeTrue\n        in: query\n        required: true\n        explode: true\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: explodeAvoiding\n        in: query\n        required: true\n        schema:\n          type: string\n          description: the generated id\n          format: id\n          readOnly: true\n      - name: arrayParameter\n        in: query\n        required: true\n        content:\n          application/json:\n            schema:\n              type: number\n              description: the generated id\n              readOnly: true\n          application/xml:\n            schema:\n              type: number\n              description: the generated id\n              readOnly: true\n      - name: arrayParameterImplementation\n        in: query\n        required: true\n        schema:\n          maxItems: 10\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/SubscriptionResponse'\n      - name: arrayParameterImplementation2\n        in: query\n        required: true\n        explode: true\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: id\n        in: query\n        description: idParam\n        schema:\n          type: string\n      responses:\n        default:\n          description: test description\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SubscriptionResponse'\n  /repeatableparameter:\n    post:\n      description: subscribes a client to updates relevant to the requestor's account,\n        as identified by the input token.  The supplied url will be used as the delivery\n        address for response payloads\n      operationId: subscribe_3\n      parameters:\n      - name: subscriptionId\n        in: path\n        required: true\n        style: simple\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: formId\n        in: query\n        required: true\n        schema:\n          type: string\n        example: Example\n      - name: explodeFalse\n        in: query\n        required: true\n        explode: false\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: explodeTrue\n        in: query\n        required: true\n        explode: true\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      - name: explodeAvoiding\n        in: query\n        required: true\n        schema:\n          type: string\n          description: the generated id\n          format: id\n          readOnly: true\n      - name: arrayParameter\n        in: query\n        required: true\n        content:\n          application/json:\n            schema:\n              type: number\n              description: the generated id\n              readOnly: true\n          application/xml:\n            schema:\n              type: number\n              description: the generated id\n              readOnly: true\n      - name: arrayParameterImplementation\n        in: query\n        required: true\n        schema:\n          maxItems: 10\n          minItems: 1\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/SubscriptionResponse'\n      - name: arrayParameterImplementation2\n        in: query\n        required: true\n        explode: true\n        schema:\n          $ref: '#/components/schemas/SubscriptionResponse'\n      responses:\n        default:\n          description: test description\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SubscriptionResponse'\n  /singlejaxrsannotatedparameter:\n    get:\n      operationId: create User_5\n      parameters:\n      - name: id\n        in: query\n        schema:\n          type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /singlenoannotatedparameter:\n    get:\n      operationId: create User_6\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /requestbodymethodpriority:\n    post:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyAndTwoParameters\n      requestBody:\n        description: Created user object on Method\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /requestbodyparameterpriority:\n    post:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyAndTwoParameters_1\n      requestBody:\n        description: Created user object inside Parameter\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithRequestBodyAndTwoParameters:\n    post:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyAndTwoParameters_2\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: code\n        in: query\n        schema:\n          type: string\n      requestBody:\n        description: Created user object\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithRequestBodyWithoutContent:\n    get:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyWithoutContent\n      requestBody:\n        description: Created user object\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithRequestBodyWithoutContentWithoutImplementation:\n    get:\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: methodWithRequestBodyWithoutContentWithoutImplementation\n      requestBody:\n        description: Created user object\n        content:\n          '*/*':\n            schema:\n              type: string\n              description: User description\n              example: User Description\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithRequestBodyWithoutAnnotation:\n    put:\n      summary: Modify user\n      description: Modifying user.\n      operationId: methodWithRequestBodyWithoutAnnotation\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithoutRequestBodyAndTwoParameters:\n    delete:\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: methodWithoutRequestBodyAndTwoParameters\n      parameters:\n      - name: name\n        in: query\n        schema:\n          type: string\n      - name: code\n        in: query\n        schema:\n          type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithRequestBodyWithoutAnnotationAndTwoConsumes:\n    put:\n      summary: Modify pet\n      description: Modifying pet.\n      operationId: methodWithRequestBodyWithoutAnnotationAndTwoConsumes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithTwoRequestBodyWithoutAnnotationAndTwoConsumes:\n    post:\n      summary: Create pet\n      description: Creating pet.\n      operationId: methodWithTwoRequestBodyWithoutAnnotationAndTwoConsumes\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/Pet'\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithTwoRequestBodyWithAnnotationAndTwoConsumes:\n    post:\n      summary: Create pet\n      description: Creating pet.\n      operationId: methodWithTwoRequestBodyWithAnnotationAndTwoConsumes\n      requestBody:\n        description: Request Body User\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /methodWithOneSimpleRequestBody:\n    delete:\n      summary: Delete pet\n      description: Deleting pet.\n      operationId: methodWithOneSimpleRequestBody\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n          application/xml:\n            schema:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /complexresponse:\n    get:\n      summary: Find pets\n      description: Returns the Pets\n      operationId: getPets\n      responses:\n        \"200\":\n          description: Response inside Operation\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/Pet'\n        default:\n          description: Default Pet\n          content:\n            '*/*':\n              schema:\n                type: string\n                description: Default Pet\n                example: New Pet\n        \"404\":\n          description: Couldn't find pet\n  /implementationresponse:\n    get:\n      summary: Simple get operation\n      description: Defines a simple get operation with no inputs and a complex output\n        object\n      operationId: getWithPayloadResponse\n      responses:\n        \"200\":\n          description: voila!\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecondSampleResponseSchema'\n        \"400\":\n          description: boo\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/GenericError'\n      deprecated: true\n  /responseinmethod:\n    get:\n      summary: Find pets\n      description: Returns the Pets\n      operationId: getPets_1\n      responses:\n        \"200\":\n          description: Status OK\n  /noimplementationresponseresource:\n    get:\n      operationId: getUser_7\n      parameters:\n      - name: userId\n        in: query\n        schema:\n          type: string\n      responses:\n        \"400\":\n          description: test description\n          links:\n            user:\n              operationId: getUser\n              parameters:\n                userId: $request.query.userId\n        \"200\":\n          description: 200 description\n          links:\n            pet:\n              operationId: getUser\n              parameters:\n                userId: $request.query.userId\n  /noresponse:\n    get:\n      summary: Find pets\n      description: Returns the Pets\n      operationId: getPets_2\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/User'\n  /responseinoperation:\n    get:\n      summary: Find Users\n      description: Returns the Users\n      operationId: getUsers\n      responses:\n        \"200\":\n          description: Status OK\n  /priorityresponses:\n    get:\n      summary: Find pets\n      description: Returns the Pets\n      operationId: getPets_3\n      responses:\n        \"200\":\n          description: Inside Method Operation\n  /security:\n    get:\n      description: description\n      operationId: Operation Id\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n      security:\n      - security_key:\n        - write:pets\n        - read:pets\n      - myOauth2Security:\n        - write:pets\n    put:\n      description: description 3\n      operationId: Operation Id 3\n      requestBody:\n        content:\n          '*/*':\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n      security:\n      - security_key:\n        - write:pets\n        - read:pets\n      - myOauth2Security:\n        - write:pets\n      - security_key3:\n        - write:pets\n        - read:pets\n    patch:\n      description: description 2\n      operationId: Operation Id 2\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n      security:\n      - security_key:\n        - write:pets\n        - read:pets\n      - myOauth2Security:\n        - write:pets\n      - security_key2:\n        - write:pets\n        - read:pets\n  /completetags:\n    get:\n      tags:\n      - Third Tag\n      - Second Tag\n      - Fourth Tag Full\n      - Example Tag\n      - Fifth Tag Full\n      - Sixth Tag\n      operationId: getTags\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /tagsinmethod:\n    get:\n      tags:\n      - Third Tag\n      - Second Tag\n      - Fourth Tag Full\n      operationId: getTags_1\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\n  /tagoperation:\n    get:\n      tags:\n      - Example Tag\n      - Second Tag\n      operationId: getTags_2\n      responses:\n        default:\n          description: default response\n          content:\n            '*/*': {}\ncomponents:\n  schemas:\n    SecondSampleResponseSchema:\n      type: object\n    GenericError:\n      type: object\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          description: User Status\n          format: int32\n      xml:\n        name: User\n    SampleResponseSchema:\n      type: object\n    SubscriptionResponse:\n      type: object\n      properties:\n        subscriptionId:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          type: string\n        photoUrls:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            type: string\n            xml:\n              name: photoUrl\n        tags:\n          type: array\n          xml:\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n          - available,pending,sold\n      xml:\n        name: Pet\n  securitySchemes:\n    myOauth2Security:\n      type: oauth2\n      description: myOauthSecurity Description\n      in: header\n      flows:\n        implicit:\n          authorizationUrl: http://x.com\n          scopes:\n            write:pets: modify pets in your account\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /pet/findByStatus: get: operation \"findPetsByStatus\": security: unknown security schema \"req 1\""
}