{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openclarity/apiclarity"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "backend/pkg/modules/internal/bfla/restapi/openapi.yaml",
			"byteSize": 8547,
			"content": "openapi: 3.0.3\ninfo:\n  title: APIClarity BFLA\n  version: 0.0.1\n  description: APIClarity Module API\npaths:\n  /version:\n    get:\n      operationId: getVersion\n      summary: Get the version of this Module\n      description: Get the version of this Module\n      responses:\n        '200':\n          description: Version of the Module\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Version'\n\n  /authorizationModel/{apiID}:\n    get:\n      parameters:\n        - in: path\n          schema:\n            type: integer\n          required: true\n          name: apiID\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/AuthorizationModel'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n  /authorizationModel/{apiID}/approve:\n    put:\n      parameters:\n        - in: path\n          name: apiID\n          schema:\n            type: integer\n        - in: query\n          name: method\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: path\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: k8sClientUid\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n  /authorizationModel/{apiID}/deny:\n    put:\n      parameters:\n        - in: path\n          name: apiID\n          schema:\n            type: integer\n        - in: query\n          name: method\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: path\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: k8sClientUid\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n  /authorizationModel/{apiID}/learning/start:\n    put:\n      parameters:\n        - in: path\n          name: apiID\n          schema:\n            type: integer\n        - in: query\n          name: nr_traces\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n  /authorizationModel/{apiID}/learning/reset:\n    put:\n      parameters:\n        - in: path\n          name: apiID\n          schema:\n            type: integer\n        - in: query\n          name: nr_traces\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n\n  /authorizationModel/{apiID}/learning/stop:\n    put:\n      parameters:\n        - in: path\n          name: apiID\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n\n  /event/{id}:\n    get:\n      operationId: get_event\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: integer\n          required: true\n      summary: Get the event with the annotations and bfla status\n      responses:\n        '200':\n          description: API Event with annotations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/APIEventAnnotations'\n\n  /event/{id}/{operation}:\n    put:\n      parameters:\n        - in: path\n          schema:\n            type: integer\n          required: true\n          name: id\n        - in: path\n          required: true\n          name: operation\n          schema:\n            $ref: '#/components/schemas/OperationEnum'\n      responses:\n        '200':\n          description: 'Success'\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n        default:\n          description: \"Error response\"\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n\ncomponents:\n  schemas:\n    APIEventAnnotations:\n      required: [bflaStatus, external]\n      properties:\n        external:\n          type: boolean\n        destinationK8sObject:\n          $ref: '#/components/schemas/K8sObjectRef'\n        sourceK8sObject:\n          $ref: '#/components/schemas/K8sObjectRef'\n        bflaStatus:\n          $ref: '#/components/schemas/BFLAStatus'\n        detectedUser:\n          $ref: '#/components/schemas/DetectedUser'\n\n    DetectedUser:\n      required: [id, source, ip_address]\n      properties:\n        id:\n          type: string\n        source:\n          type: string\n          enum:\n            - JWT\n            - BASIC\n            - KONG_X_CONSUMER_ID\n        ip_address:\n          type: string\n\n    K8sObjectRef:\n      type: object\n      required: [uid, kind, name, namespace, apiVersion]\n      properties:\n        uid:\n          type: string\n        kind:\n          type: string\n        name:\n          type: string\n        namespace:\n          type: string\n        apiVersion:\n          type: string\n\n    BFLAStatus:\n      type: string\n      enum:\n        - NO_SPEC\n        - LEARNING\n        - LEGITIMATE\n        - SUSPICIOUS_MEDIUM\n        - SUSPICIOUS_HIGH\n\n    AuthorizationModelAudience:\n      type: object\n      required: [end_users, authorized, external]\n      properties:\n        authorized:\n          type: boolean\n        external:\n          type: boolean\n        end_users:\n          type: array\n          items:\n            $ref: '#/components/schemas/DetectedUser'\n        k8s_object:\n          $ref: '#/components/schemas/K8sObjectRef'\n\n    AuthorizationModelOperation:\n      type: object\n      required: [path, method, audience]\n      properties:\n        path:\n          type: string\n        method:\n          type: string\n        audience:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorizationModelAudience'\n    SpecType:\n      type: string\n      enum:\n        - NONE\n        - PROVIDED\n        - RECONSTRUCTED\n\n    AuthorizationModel:\n      type: object\n      required: [specType, operations, learning]\n      properties:\n        specType:\n          $ref: '#/components/schemas/SpecType'\n        learning:\n          type: boolean\n        operations:\n          type: array\n          items:\n            $ref: '#/components/schemas/AuthorizationModelOperation'\n\n    OperationEnum:\n      type: string\n      enum:\n        - approve\n        - deny\n        - approve_user\n        - deny_user\n\n    ApiResponse:\n      description: 'An object that is return in all cases of failures.'\n      type: 'object'\n      required: [message]\n      properties:\n        message:\n          type: 'string'\n    Version:\n      type: 'object'\n      required: [version]\n      properties:\n        version:\n          type: 'string'",
			"canonicalURL": "/github.com/openclarity/apiclarity@9cd7fc7978e2bbf06bbc7652e3d91dca5c65f988/-/blob/backend/pkg/modules/internal/bfla/restapi/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openclarity/apiclarity/blob/9cd7fc7978e2bbf06bbc7652e3d91dca5c65f988/backend/pkg/modules/internal/bfla/restapi/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/authorizationModel/{apiID}/approve\": put: parameters: parse parameter \"apiID\": at 1:2769: path parameters must be required"
}