{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/modrinth/docs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "static/openapi.yaml",
			"byteSize": 80209,
			"content": "openapi: \"3.0.0\"\n\ninfo:\n  version: v2.2.4\n  title: Labrinth\n  description: |\n    This API is documented in the **OpenAPI format** and is available for download [here](/openapi.yaml).\n    \n    There are some undocumented routes. These routes are not meant for public use, such as the routes for adding new items to tags.\n\n    ## Cross-Origin Resource Sharing\n    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with the [W3C spec](https://www.w3.org/TR/cors/).\n    This allows for cross-domain communication from the browser.\n    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n    ## Authentication\n    This API uses GitHub tokens for authentication. The token is in the `Authorization` header of the request. You can get a token [here](#operation/initAuth).\n     \n     Example:\n     ```\n     Authorization: gho_pJ9dGXVKpfzZp4PUHSxYEq9hjk0h288Gwj4S\n     ```\n     \n    You do not need a token for most requests. Generally speaking, only the following types of requests require a token:\n     - those which create data (such as version creation)\n     - those which modify data (such as editing a project)\n     - those which access private data (e.g. draft projects)\n    \n    ## Ratelimits\n    The API has a ratelimit defined per IP. Limits and remaining amounts are given in the response headers.\n    The `X-Ratelimit-Limit` header is the maximum number of requests that can be made in a minute.\n    The `X-Ratelimit-Remaining` header is the number of requests remaining in the current ratelimit window.\n    The `X-Ratelimit-Reset` header is the time in seconds until the ratelimit window resets.\n    Ratelimits are the same no matter whether you use a token or not.\nservers:\n  - url: https://api.modrinth.com/v2\n    description: Production server\n  - url: https://staging-api.modrinth.com/v2\n    description: Staging server\n\ntags:\n  - name: projects\n    x-displayName: Projects\n    description: Projects can be mods or modpacks and are created by users.\n  - name: versions\n    x-displayName: Versions\n    description: Versions contain download links to files with additional metadata.\n  - name: version-files\n    x-displayName: Version Files\n    description: Versions can contain multiple files, and these routes help manage those files.\n  - name: users\n    x-displayName: Users\n    description: Users can create projects, join teams, access notifications, manage settings, and follow projects. Admins and moderators have more advanced permissions such as reviewing new projects.\n  - name: teams\n    x-displayName: Teams\n    description: Through teams, user permissions limit how team members can modify projects.\n  - name: tags\n    x-displayName: Tags\n    description: Tags are common and reusable lists of metadata types such as categories or versions. Some can be applied to projects and/or versions.\n  - name: auth\n    x-displayName: Authorization\n  - name: project_model\n    x-displayName: Project Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Project\" /\u003e\n  - name: project_result_model\n    x-displayName: Search Result Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/ProjectResult\" /\u003e\n  - name: version_model\n    x-displayName: Version Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/Version\" /\u003e\n  - name: user_model\n    x-displayName: User Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/User\" /\u003e\n  - name: team_member_model\n    x-displayName: Team Member Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/TeamMember\" /\u003e\n\nx-tagGroups:\n  - name: General\n    tags:\n      - projects\n      - versions\n      - version-files\n      - users\n      - teams\n      - tags\n      - auth\n  - name: Models\n    tags:\n      - project_model\n      - project_result_model\n      - version_model\n      - user_model\n      - team_member_model\n\npaths:\n  # Project\n  /search:\n    get:\n      summary: Search projects\n      operationId: searchProjects\n      parameters:\n        - in: query\n          name: query\n          schema:\n            type: string\n            example: gravestones\n          description: The query to search for\n        - in: query\n          name: facets\n          schema:\n            type: array\n            items:\n              type: array\n              items:\n                type: string\n                enum:\n                  - categories\n                  - versions\n                  - license\n                  - project_type\n          example: \"[[\\\"categories:forge\\\"],[\\\"versions:1.17.1\\\"],[\\\"project_type:mod\\\"]]\"\n          description: The recommended way of filtering search results. [Learn more about using facets.](/docs/tutorials/api_search)\n        - in: query\n          name: index\n          schema:\n            type: string\n            enum:\n              - relevance\n              - downloads\n              - follows\n              - newest\n              - updated\n            default: relevance\n            example: downloads\n          description: The sorting method used for sorting search results\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            default: 0\n            example: 20\n          description: The offset into the search. Skips this number of results\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            default: 10\n            example: 20\n          description: The number of results returned by the search\n        - in: query\n          name: filters\n          schema:\n            type: string\n            example: categories=\"fabric\" AND (categories=\"technology\" OR categories=\"utility\")\n          description: A list of filters relating to the properties of a project. Use filters when there isn't an available facet for your needs. [More information](https://docs.meilisearch.com/reference/features/filtering.html)\n        - in: query\n          name: version\n          schema:\n            type: string\n            example: version=\"1.16.3\" OR version=\"1.16.2\" OR version=\"1.16.1\"\n          deprecated: true\n          description: A list of filters relating to the versions of a project. Use of facets for filtering by version is recommended\n      tags:\n        - projects\n      responses:\n        \"200\":\n          description: Search results\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SearchResults'\n        \"400\":\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n  /project/{id|slug}:\n    get:\n      summary: Get a project\n      operationId: getProject\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    patch:\n      summary: Modify a project\n      operationId: modifyProject\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n      requestBody:\n        description: \"Modified project fields\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditableProject\"\n      responses:\n        \"204\":\n          description: Project modified successfully\n        \"401\":\n          description: No authorization to edit this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    delete:\n      summary: Delete a project\n      operationId: deleteProject\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n      responses:\n        \"204\":\n          description: Project deleted successfully\n        \"400\":\n          description: The requested project was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"401\":\n          description: No valid authorization to delete this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n  /projects:\n    get:\n      summary: Get multiple projects\n      operationId: getProjects\n      tags:\n        - projects\n      parameters:\n        - in: query\n          name: ids\n          description: The IDs of the projects\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"[\\\"AABBCCDD\\\", \\\"EEFFGGHH\\\"]\"\n          required: true\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Project\"\n  /project:\n    post:\n      summary: Create a project\n      operationId: createProject\n      tags:\n        - projects\n      requestBody:\n        description: \"New project\"\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/CreatableProject\"\n            encoding:\n              icon:\n                contentType: image/png, image/jpeg, image/bmp, image/gif, image/webp, image/svg, image/svgz, image/rgb\n      responses:\n        \"200\":\n          description: Project successfully created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        \"400\":\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"401\":\n          description: No authorization to create a project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n  /project/{id|slug}/gallery:\n    post:\n      summary: Add a gallery image\n      description: Modrinth allows you to upload files of up to 5MiB to a project's gallery.\n      operationId: addGalleryImage\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n        - description: Image extension\n          in: query\n          name: ext\n          required: true\n          schema:\n            type: string\n            enum: [png, jpg, jpeg, bmp, gif, webp, svg, svgz, rgb]\n        - description: Whether an image is featured\n          in: query\n          name: featured\n          required: true\n          schema:\n            type: boolean\n        - description: Title of the image\n          in: query\n          name: title\n          schema:\n            type: string\n        - description: Description of the image\n          in: query\n          name: description\n          schema:\n            type: string\n      requestBody:\n        description: New gallery image\n        content:\n          image/*:\n            schema:\n              type: string\n              format: binary\n            encoding:\n              image:\n                contentType: image/png, image/jpeg, image/bmp, image/gif, image/webp, image/svg, image/svgz, image/rgb\n      responses:\n        \"204\":\n          description: Gallery image successfully created\n        \"400\":\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"401\":\n          description: No authorization to create a gallery image\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    patch:\n      summary: Modify a gallery image\n      operationId: modifyGalleryImage\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n        - description: URL link of the image to modify\n          in: query\n          name: url\n          required: true\n          schema:\n            type: string\n            format: uri\n        - description: Whether the image is featured\n          in: query\n          name: featured\n          required: true\n          schema:\n            type: boolean\n        - description: New title of the image\n          in: query\n          name: title\n          schema:\n            type: string\n        - description: New description of the image\n          in: query\n          name: description\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Gallery image modified successfully\n        \"401\":\n          description: No authorization to edit this gallery image\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    delete:\n      summary: Delete a gallery image\n      operationId: deleteGalleryImage\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n        - description: URL link of the image to delete\n          in: query\n          name: url\n          required: true\n          schema:\n            type: string\n            format: uri\n      responses:\n        \"204\":\n          description: Gallery image deleted successfully\n        \"400\":\n          description: Invalid URL or project specified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"401\":\n          description: No authorization to delete this gallery image\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n  /project/{id|slug}/dependencies:\n    get:\n      summary: Get all of a project's dependencies\n      operationId: getDependencies\n      tags:\n        - projects\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ProjectDependencyList\"\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  # Version\n  /project/{id|slug}/version:\n    get:\n      summary: List project's versions\n      operationId: getProjectVersions\n      tags:\n        - versions\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n        - in: query\n          name: loaders\n          required: false\n          description: \"The types of loaders to filter for\"\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"[\\\"fabric\\\"]\"\n        - in: query\n          name: game_versions\n          required: false\n          description: \"The game versions to filter for\"\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"[\\\"1.18.1\\\"]\"\n        - in: query\n          name: featured\n          required: false\n          description: \"Allows to filter for featured or non-featured versions only\"\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Version\"\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n  /version/{id}:\n    get:\n      summary: Get a version\n      operationId: getVersion\n      tags:\n        - versions\n      parameters:\n        - $ref: \"#/components/parameters/VersionIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        \"404\":\n          description: The requested version was not found or no authorization to see this version\n    patch:\n      summary: Modify a version\n      operationId: modifyVersion\n      tags:\n        - versions\n      parameters:\n        - $ref: \"#/components/parameters/VersionIdentifier\"\n      requestBody:\n        description: \"Modified version fields\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditableVersion\"\n      responses:\n        \"204\":\n          description: Version modified successfully\n        \"401\":\n          description: No authorization to edit this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested version was not found or no authorization to see this version\n    delete:\n      summary: Delete a version\n      operationId: deleteVersion\n      tags:\n        - versions\n      parameters:\n        - $ref: \"#/components/parameters/VersionIdentifier\"\n      responses:\n        \"204\":\n          description: Version deleted successfully\n        \"401\":\n          description: No authorization to delete this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested version was not found or no authorization to see this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /version:\n    post:\n      summary: Create a version\n      description: Project files are attached. `.mrpack` and `.jar` files are accepted.\n      operationId: createVersion\n      tags:\n        - versions\n      requestBody:\n        description: \"New version\"\n        content:\n          multipart/form-data:\n            schema:\n              $ref: \"#/components/schemas/CreatableVersion\"\n      responses:\n        \"200\":\n          description: Version successfully created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        \"400\":\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"401\":\n          description: No authorization to create this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n  /versions:\n    get:\n      summary: Get multiple versions\n      operationId: getVersions\n      tags:\n        - versions\n      parameters:\n        - in: query\n          name: ids\n          description: The IDs of the versions\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"[\\\"AABBCCDD\\\", \\\"EEFFGGHH\\\"]\"\n          required: true\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Version\"\n  /version/{id}/file:\n    post:\n      summary: Add files to version\n      description: Project files are attached. `.mrpack` and `.jar` files are accepted.\n      operationId: addFilesToVersion\n      tags:\n        - versions\n      parameters:\n        - $ref: \"#/components/parameters/VersionIdentifier\"\n      requestBody:\n        description: \"New version files\"\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                data:\n                  type: object\n                  enum:\n                    - { }\n      responses:\n        \"204\":\n          description: Version modified successfully\n        \"401\":\n          description: No authorization to modify this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested version was not found or no authorization to see this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  # Version file\n  /version_file/{hash}?algorithm={algorithm}:\n    get:\n      summary: Get version from hash\n      operationId: versionFromHash\n      tags:\n        - version-files\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        \"404\":\n          description: The requested version was not found or no authorization to see this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n      parameters:\n        - $ref: \"#/components/parameters/FileHashIdentifier\"\n        - $ref: \"#/components/parameters/AlgorithmIdentifier\"\n    delete:\n      summary: Delete a file from its hash\n      operationId: deleteFileFromHash\n      tags:\n        - version-files\n      responses:\n        \"204\":\n          description: Expected response to a valid request\n        \"401\":\n          description: No authorization to delete this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested version was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n      parameters:\n        - $ref: \"#/components/parameters/FileHashIdentifier\"\n        - $ref: \"#/components/parameters/AlgorithmIdentifier\"\n  /version_file/{hash}/update?algorithm={algorithm}:\n    post:\n      summary: Latest version of a project from a hash, loader(s), and game version(s)\n      operationId: getLatestVersionFromHash\n      tags:\n        - version-files\n      parameters:\n        - $ref: \"#/components/parameters/FileHashIdentifier\"\n        - $ref: \"#/components/parameters/AlgorithmIdentifier\"\n      requestBody:\n        description: Parameters of the updated version requested\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                loaders:\n                  type: array\n                  items:\n                    type: string\n                    example: fabric\n                game_versions:\n                  type: array\n                  items:\n                    type: string\n                  example: [\"1.18\", 1.18.1]\n              required:\n                - loaders\n                - game_versions\n      responses:\n        \"200\":\n          description: Latest version retrieved successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Version\"\n        \"400\":\n          description: Input is invalid\n        \"404\":\n          description: The requested version was not found or no authorization to see this version\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n#  /version_files:\n#    post: # TODO test that this is actually the response\n#      summary: Get versions from hashes\n#      description: This is the same as [`/version_file/{hash}`](#operation/versionFromHash) except it accepts multiple hashes.\n#      operationId: versionsFromHashes\n#      tags:\n#        - version-files\n#      responses:\n#        \"200\":\n#          description: Expected response to a valid request\n#          content:\n#            application/json:\n#              schema:\n#                type: array\n#                items:\n#                  $ref: \"#/components/schemas/Version\"\n#        \"400\":\n#          description: Input is invalid\n#      requestBody:\n#        description: Hashes and algorithm of the versions requested\n#        content:\n#          application/json:\n#            schema:\n#              type: object\n#              properties:\n#                hashes:\n#                  type: array\n#                  items:\n#                    type: string\n#                  example: [ea0f38408102e4d2efd53c2cc11b88b711996b48d8922f76ea6abf731219c5bd1efe39ddf9cce77c54d49a62ff10fb685c00d2e4c524ab99d20f6296677ab2c4, 925a5c4899affa4098d997dfa4a4cb52c636d539e94bc489d1fa034218cb96819a70eb8b01647a39316a59fcfe223c1a8c05ed2e2ae5f4c1e75fa48f6af1c960]\n#                algorithm:\n#                  type: string\n#                  enum: [ sha1, sha512 ]\n#                  example: sha512\n#              required:\n#                - hashes\n#                - algorithm\n#  /version_files/update:\n#    post: # TODO test that this is actually the response\n#      summary: Latest versions of a project from hashes, loader(s), and game version(s)\n#      operationId: getLatestVersionsFromHashes\n#      tags:\n#        - version-files\n#      requestBody:\n#        description: Parameters of the updated version requested\n#        content:\n#          application/json:\n#            schema:\n#              type: object\n#              properties:\n#                hashes:\n#                  type: array\n#                  items:\n#                    type: string\n#                  example: [ea0f38408102e4d2efd53c2cc11b88b711996b48d8922f76ea6abf731219c5bd1efe39ddf9cce77c54d49a62ff10fb685c00d2e4c524ab99d20f6296677ab2c4, 925a5c4899affa4098d997dfa4a4cb52c636d539e94bc489d1fa034218cb96819a70eb8b01647a39316a59fcfe223c1a8c05ed2e2ae5f4c1e75fa48f6af1c960]\n#                algorithm:\n#                  type: string\n#                  enum: [sha1, sha512]\n#                  example: sha512\n#                loaders:\n#                  type: array\n#                  items:\n#                    type: string\n#                  example: fabric\n#                game_versions:\n#                  type: array\n#                  items:\n#                    type: string\n#                  example: [\"1.18\", 1.18.1]\n#              required:\n#                - hashes\n#                - algorithm\n#                - loaders\n#                - game_versions\n#      responses:\n#        \"200\":\n#          description: Latest versions retrieved successfully\n#          content:\n#            application/json:\n#              schema:\n#                type: array\n#                items:\n#                  $ref: \"#/components/schemas/Version\"\n#        \"400\":\n#          description: Input is invalid\n  # User\n  /user/{id|username}:\n    get:\n      summary: Get a user\n      operationId: getUser\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    patch:\n      summary: Modify a user\n      operationId: modifyUser\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      requestBody:\n        description: \"Modified user fields\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/EditableUser\"\n      responses:\n        \"204\":\n          description: User modified successfully\n        \"401\":\n          description: No authorization to modify this user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    delete:\n      summary: Delete a user\n      operationId: deleteUser\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      responses:\n        \"204\":\n          description: User deleted successfully\n        \"401\":\n          description: No authorization to delete this user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /users:\n    get:\n      summary: Get multiple users\n      operationId: getUsers\n      tags:\n        - users\n      parameters:\n        - in: query\n          name: ids\n          description: The IDs of the users\n          schema:\n            type: array\n            items:\n              type: string\n            example: \"[\\\"AABBCCDD\\\", \\\"EEFFGGHH\\\"]\"\n          required: true\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/User\"\n  /user/{id|username}/icon:\n    patch:\n      summary: Change user's avatar\n      description: By default, Modrinth uses a user's GitHub icon. This route allows it to be changed to a custom one. The new avatar may be up to 2MiB in size.\n      operationId: changeUserIcon\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              enum:\n                - { }\n            encoding:\n              icon:\n                contentType: image/png, image/jpeg, image/bmp, image/gif, image/webp, image/svg, image/svgz, image/rgb\n      security:\n        - TokenAuth: []\n      responses:\n        \"204\":\n          description: Avatar changed successfully\n        \"400\":\n          description: Invalid format for new icon\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /user/{id|username}/projects:\n    get:\n      summary: Get user's projects\n      operationId: getUserProjects\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Project\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /user/{id|username}/notifications:\n    get:\n      summary: Get user's notifications\n      description: Notifications can be project updates or team invites\n      operationId: getNotifications\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      security:\n        - TokenAuth: []\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Notification\"\n        \"401\":\n          description: No authorization to get this user's notifications\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /user/{id|username}/follows:\n    get:\n      summary: Get user's followed projects\n      operationId: getFollowedProjects\n      tags:\n        - users\n      parameters:\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      security:\n        - TokenAuth: []\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Project\"\n        \"401\":\n          description: No authorization to get this user's followed projects\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested user was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /report:\n    post:\n      summary: Report a project, user, or version\n      description: Bring a project, user, or version to the attention of the moderators by reporting it. You must be logged in to report anything.\n      operationId: submitReport\n      tags:\n        - users\n      security:\n        - TokenAuth: []\n      requestBody:\n        description: The report to be sent\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CreatableReport\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Report\"\n        \"400\":\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/InvalidInputError\"\n        \"401\":\n          description: No authorization to submit a report\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n  # Teams\n  /project/{id|slug}/members:\n    get:\n      summary: Get a project's team members\n      operationId: getProjectTeamMembers\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/ProjectIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TeamMember\"\n                description: An array of team members\n        \"404\":\n          description: The requested project was not found or no authorization to see this project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /team/{id}/members:\n    get:\n      summary: Get a team's members\n      operationId: getTeamMembers\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/TeamIdentifier\"\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TeamMember\"\n                description: An array of team members\n        \"404\":\n          description: The requested team was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    post:\n      summary: Add a user to a team\n      operationId: addTeamMember\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/TeamIdentifier\"\n      requestBody:\n        description: User(s) to be added\n        content:\n          application/json:\n            schema:\n              properties:\n                user_id:\n                  type: string\n                  example: EEFFGGHH\n              required:\n                - user_id\n      responses:\n        \"204\":\n          description: User has been successfully invited to the team\n        \"401\":\n          description: No authorization to modify this team\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested team was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /team/{id}/join:\n    post:\n      summary: Join a team\n      operationId: joinTeam\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/TeamIdentifier\"\n      responses:\n        \"204\":\n          description: Team has successfully been joined\n        \"401\":\n          description: No authorization to join this team\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested team was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /team/{team_id}/members/{user_id}:\n    patch:\n      summary: Modify a team member's roles and/or permissions\n      operationId: modifyTeamMember\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/TeamIdentifier\"\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      responses:\n        \"204\":\n          description: Roles/permissions have been updated successfully\n        \"401\":\n          description: No authorization to change this member's roles/permissions\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested team was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n    delete:\n      summary: Remove a member from a team\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/TeamIdentifier\"\n        - $ref: \"#/components/parameters/UserIdentifier\"\n      responses:\n        \"204\":\n          description: User has been removed from the team successfully\n        \"401\":\n          description: No authorization to remove this member from the team\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested team was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  /team/{id}/owner:\n    post:\n      summary: Transfer team's ownership to another user\n      operationId: transferTeamOwnership\n      tags:\n        - teams\n      parameters:\n        - $ref: \"#/components/parameters/TeamIdentifier\"\n      requestBody:\n        description: New owner's ID\n        content:\n          application/json:\n            schema:\n              properties:\n                user_id:\n                  type: string\n                  example: EEFFGGHH\n              required:\n                - user_id\n      responses:\n        \"204\":\n          description: Ownership has successfully been transferred\n        \"401\":\n          description: No authorization to transfer ownership of this team\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AuthError\"\n        \"404\":\n          description: The requested team was not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n  # Tags\n  /tag/category:\n    get:\n      summary: Get a list of categories\n      description: Gets an array of categories, their icons, and applicable project types\n      operationId: categoryList\n      tags:\n        - tags\n      responses:\n        \"200\":\n          description: List of categories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/CategoryTag\"\n  /tag/loader:\n    get:\n      summary: Get a list of loaders\n      description: Gets an array of loaders, their icons, and supported project types\n      operationId: loaderList\n      tags:\n        - tags\n      responses:\n        \"200\":\n          description: List of loaders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/LoaderTag\"\n  /tag/game_version:\n    get:\n      summary: Get a list of game versions\n      description: Gets an array of game versions and information about them\n      operationId: versionList\n      tags:\n        - tags\n      responses:\n        \"200\":\n          description: List of game versions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/GameVersionTag\"\n  /tag/license:\n    get:\n      summary: Get a list of licenses\n      description: Gets an array of licenses and information about them\n      operationId: licenseList\n      tags:\n        - tags\n      responses:\n        \"200\":\n          description: List of licenses\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/LicenseTag\"\n  /tag/donation_platform:\n    get:\n      summary: Get a list of donation platforms\n      description: Gets an array of donation platforms and information about them\n      operationId: donationPlatformList\n      tags:\n        - tags\n      responses:\n        \"200\":\n          description: List of donation platforms\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/DonationPlatformTag\"\n  /tag/report_type:\n    get:\n      summary: Get a list of report types\n      description: Gets an array of valid report types\n      operationId: reportTypeList\n      tags:\n        - tags\n      responses:\n        \"200\":\n          description: List of report types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example: [ spam, copyright, inappropriate, malicious, name-squatting, other ]\n  # Auth\n  /auth/init:\n    get:\n      summary: Initialize authentication\n      description: |\n        1. Performs a redirect to: https://github.com/login/oauth/authorize?client_id=873e1f2db86d89306227\u0026state=tVPJ27GD\u0026scope=read%3Auser\n        2. Then redirects to [/auth/callback](#operation/authCallback)\n        3. The user is redirected to the given `url` parameter\n      operationId: initAuth\n      tags:\n        - auth\n      parameters:\n        - in: query\n          name: url\n          schema:\n            type: string\n            example: https://modrinth.com\n          description: \"The URL to redirect to after authentication\"\n          required: true\n      responses:\n        \"307\":\n          headers:\n            location:\n              schema:\n                type: string\n                format: uri\n                example: https://github.com/login/oauth/authorize?client_id=873e1f2db86d89306227\u0026 state=tVPJ27GD\u0026scope=read%3Auser\n          description: Redirect to Github login page\n  /auth/callback:\n    get:\n      summary: Authentication callback\n      description: Redirects the user back to the website that started the login process\n      operationId: authCallback\n      tags:\n        - auth\n      parameters:\n        - in: query\n          name: code\n          schema:\n            type: string\n            example: e0c1560ab153bbc0b73\n          description: The token from the GitHub auth\n          required: true\n        - in: query\n          name: state\n          schema:\n            type: string\n            example: AaBb1234\n          description: The state from the GitHub auth\n          required: true\n      responses:\n        \"307\":\n          headers:\n            location:\n              schema:\n                type: string\n                format: uri\n                example: https://modrinth.com\n          description: Redirect to the website that initiated the login\n\ncomponents:\n  parameters:\n    ProjectIdentifier:\n      name: id|slug\n      in: path\n      required: true\n      description: The ID or slug of the project\n      schema:\n        type: string\n        example: [AABBCCDD, my_project]\n    UserIdentifier:\n      name: id|username\n      in: path\n      required: true\n      description: The ID or username of the user\n      schema:\n        type: string\n        example: [EEFFGGHH, my_user]\n    VersionIdentifier:\n      name: id\n      in: path\n      required: true\n      description: The ID of the version\n      schema:\n        type: string\n        example: [IIJJKKLL]\n    TeamIdentifier:\n      name: id\n      in: path\n      required: true\n      description: The ID of the team\n      schema:\n        type: string\n        example: [MMNNOOPP]\n    AlgorithmIdentifier:\n      name: algorithm\n      in: query\n      required: false\n      description: The algorithm of the hash\n      schema:\n        type: string\n        enum: [sha1, sha512]\n        example: sha512\n        default: sha1\n    FileHashIdentifier:\n      name: hash\n      in: path\n      required: true\n      description: The hash of the file, considering its byte content, and encoded in hexadecimal\n      schema:\n        type: string\n        example: 619e250c133106bacc3e3b560839bd4b324dfda8\n\n  schemas:\n    # Project\n    BaseProject: # Fields that can be used in everything. Search, direct project lookup, project editing, you name it.\n      type: object\n      properties:\n        slug:\n          type: string\n          description: The slug of a project, used for vanity URLs\n          example: my_project\n        title:\n          type: string\n          description: The title or name of the project\n          example: My Project\n        description:\n          type: string\n          description: A short description of the project\n          example: A short description\n        categories:\n          type: array\n          items:\n            type: string\n          example: [technology, adventure, fabric]\n          description: A list of the categories that the project is in\n        client_side:\n          type: string\n          enum: [required, optional, unsupported]\n          description: The client side support of the project\n          example: required\n        server_side:\n          type: string\n          enum: [required, optional, unsupported]\n          description: The server side support of the project\n          example: optional\n    ServerRenderedProject: # Fields added to search results and direct project lookups that cannot be edited.\n      allOf:\n        - $ref: \"#/components/schemas/BaseProject\"\n        - type: object\n          properties:\n            project_type:\n              type: string\n              enum: [mod, modpack]\n              description: The project type of the project\n              example: mod\n            downloads:\n              type: integer\n              description: The total number of downloads of the project\n            icon_url:\n              type: string\n              example: https://cdn.modrinth.com/data/AABBCCDD/b46513nd83hb4792a9a0e1fn28fgi6090c1842639.png\n              description: The URL of the project's icon\n              nullable: true\n          required:\n            - project_type\n            - downloads\n    ProjectResult: # The actual result in search.\n      allOf:\n        - $ref: \"#/components/schemas/ServerRenderedProject\"\n        - type: object\n          properties:\n            project_id:\n              type: string\n              description: The ID of the project\n              example: AABBCCDD\n            author:\n              type: string\n              description: The username of the project's author\n              example: my_user\n            versions:\n              type: array\n              items:\n                type: string\n              description: A list of the minecraft versions supported by the project\n              example: [\"1.8\", \"1.8.9\"]\n            follows:\n              type: integer\n              description: The total number of users following the project\n            date_created:\n              type: string\n              format: date-time\n              description: The date the project was created\n            date_modified:\n              type: string\n              format: date-time\n              description: The date the project was last modified\n            latest_version:\n              type: string\n              description: The latest version of minecraft that this project supports\n              example: 1.8.9\n            license:\n              type: string\n              description: The license of the project\n              example: mit\n            gallery:\n              type: array\n              description: All gallery images attached to the project\n              example: [https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png, https://cdn.modrinth.com/data/AABBCCDD/images/c21776867afb6046fdc3c21dbcf5cc50ae27a236.png]\n              items:\n                type: string\n          required:\n            - project_id\n            - author\n            - versions\n            - follows\n            - date_created\n            - date_modified\n            - license\n    NonSearchProject: # Fields that appear everywhere EXCEPT search.\n      allOf:\n        - $ref: \"#/components/schemas/BaseProject\"\n        - type: object\n          properties:\n            body:\n              type: string\n              description: A long form description of the project\n              example: A long body describing my project in detail\n            issues_url:\n              type: string\n              description: An optional link to where to submit bugs or issues with the project\n              example: https://github.com/my_user/my_project/issues\n              nullable: true\n            source_url:\n              type: string\n              description: An optional link to the source code of the project\n              example: https://github.com/my_user/my_project\n              nullable: true\n            wiki_url:\n              type: string\n              description: An optional link to the project's wiki page or other relevant information\n              example: https://github.com/my_user/my_project/wiki\n              nullable: true\n            discord_url:\n              type: string\n              description: An optional invite link to the project's discord\n              example: https://discord.gg/AaBbCcDd\n              nullable: true\n            donation_urls:\n              type: array\n              items:\n                type: object\n                nullable: true\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the donation platform\n                    example: patreon\n                  platform:\n                    type: string\n                    description: The donation platform this link is to\n                    example: Patreon\n                  url:\n                    type: string\n                    description: The URL of the donation platform and user\n                    example: https://www.patreon.com/my_user\n              description: A list of donation links for the project\n    ModifiableProject: # Fields available only when editing or creating a project\n      allOf:\n        - $ref: \"#/components/schemas/NonSearchProject\"\n        - type: object\n          properties:\n            license_id:\n              type: string\n              description: The license ID of a project, retrieved from the license tag route\n              example: lgpl-3\n            license_url:\n              type: string\n              description: The URL to this license\n              example: https://cdn.modrinth.com/licenses/lgpl-3.txt\n              nullable: true\n    EditableProject: # Fields that can be edited through a PATCH request. https://github.com/modrinth/labrinth/blob/master/src/routes/projects.rs#L195-L271\n      allOf:\n        - $ref: \"#/components/schemas/ModifiableProject\"\n        - type: object\n          properties:\n            status:\n              type: string\n              enum: [approved, rejected, draft, unlisted, archived, processing, unknown]\n              description: The status of the project\n              example: approved\n            moderation_message:\n              type: string\n              description: The title of the moderators' message for the project\n              nullable: true\n            moderation_message_body:\n              type: string\n              description: The body of the moderators' message for the project\n              nullable: true\n    CreatableProject: # Fields only available for project creation. https://github.com/modrinth/labrinth/blob/master/src/routes/project_creation.rs#L129-L197\n      allOf:\n        - $ref: \"#/components/schemas/ModifiableProject\"\n        - type: object\n          properties:\n            project_type:\n              type: string\n              enum: [mod, modpack]\n              example: modpack\n            initial_versions:\n              type: array\n              items:\n                $ref: \"#/components/schemas/EditableVersion\"\n              description: A list of initial versions to upload with the created project (required unless `is_draft` is true)\n            is_draft:\n              type: boolean\n              description: Whether the project should be saved as a draft instead of being sent to moderation for review\n              example: true\n            gallery_items:\n              type: array\n              items:\n                type: object\n                nullable: true\n                properties:\n                  item:\n                    type: string\n                    description: The name of the multipart item where the gallery media is located\n                  featured:\n                    type: boolean\n                    description: Whether the image is featured in the gallery\n                    example: true\n                  title:\n                    type: string\n                    description: The title of the gallery image\n                    example: My awesome screenshot!\n                    nullable: true\n                  description:\n                    type: string\n                    description: The description of the gallery image\n                    example: This awesome screenshot shows all of the blocks in my mod!\n                    nullable: true\n          required:\n            - project_type\n            - slug\n            - title\n            - description\n            - body\n            - client_side\n            - server_side\n            - license_id\n    Project:\n      allOf:\n        - $ref: \"#/components/schemas/NonSearchProject\"\n        - $ref: \"#/components/schemas/ServerRenderedProject\"\n        - type: object\n          properties:\n            id:\n              type: string\n              example: AABBCCDD\n              description: The ID of the project, encoded as a base62 string\n            team:\n              type: string\n              example: MMNNOOPP\n              description: The ID of the team that has ownership of this project\n            body_url:\n              type: string\n              deprecated: true\n              default: null\n              description: The link to the long description of the project (only present for old projects)\n              example: null\n              nullable: true\n            moderator_message:\n              type: object\n              properties:\n                message:\n                  type: string\n                  description: The message that a moderator has left for the project\n                body:\n                  type: string\n                  description: The longer body of the message that a moderator has left for the project\n                  nullable: true\n              nullable: true\n              example: null\n              description: A message that a moderator sent regarding the project\n            published:\n              type: string\n              format: date-time\n              description: The date the project was published\n            updated:\n              type: string\n              format: date-time\n              description: The date the project was last updated\n            followers:\n              type: integer\n              description: The total number of users following the project\n            status:\n              type: string\n              enum: [approved, rejected, draft, unlisted, archived, processing, unknown]\n              description: The status of the project\n              example: approved\n            license:\n              type: object\n              properties:\n                id:\n                  type: string\n                  description: The license id of a project, retrieved from the licenses get route\n                  example: lgpl-3\n                name:\n                  type: string\n                  description: The long name of a license\n                  example: GNU Lesser General Public License v3\n                url:\n                  type: string\n                  description: The URL to this license\n                  example: https://cdn.modrinth.com/licenses/lgpl-3.txt\n                  nullable: true\n              description: The license of the project\n            versions:\n              type: array\n              items:\n                type: string\n              example: [IIJJKKLL, QQRRSSTT]\n              description: A list of the version IDs of the project (will never be empty unless `draft` status)\n            gallery:\n              type: array\n              items:\n                type: object\n                nullable: true\n                properties:\n                  url:\n                    type: string\n                    description: The URL of the gallery image\n                    example: https://cdn.modrinth.com/data/AABBCCDD/images/009b7d8d6e8bf04968a29421117c59b3efe2351a.png\n                  featured:\n                    type: boolean\n                    description: Whether the image is featured in the gallery\n                    example: true\n                  title:\n                    type: string\n                    description: The title of the gallery image\n                    example: My awesome screenshot!\n                    nullable: true\n                  description:\n                    type: string\n                    description: The description of the gallery image\n                    example: This awesome screenshot shows all of the blocks in my mod!\n                    nullable: true\n                  created:\n                    type: string\n                    format: date-time\n                    description: The date and time the gallery image was created\n                required:\n                  - url\n                  - featured\n                  - created\n              description: A list of images that have been uploaded to the project's gallery\n          required:\n            - id\n            - team\n            - published\n            - updated\n            - followers\n            - title\n            - description\n            - categories\n            - client_side\n            - server_side\n            - slug\n            - body\n            - status\n    ProjectDependencyList:\n      type: object\n      properties:\n        projects:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Project\"\n          description: Projects that the project depends upon\n        versions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Version\"\n          description: Versions that the project depends upon\n    # Search\n    SearchResults:\n      type: object\n      properties:\n        hits:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ProjectResult\"\n          description: The list of results\n        offset:\n          type: integer\n          description: The number of results that were skipped by the query\n          example: 0\n        limit:\n          type: integer\n          description: The number of results that were returned by the query\n          example: 10\n        total_hits:\n          type: integer\n          description: The total number of results that match the query\n          example: 10\n      required:\n        - hits\n        - offset\n        - limit\n        - total_hits\n    # Version\n    BaseVersion:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of this version\n          example: \"Version 1.0.0\"\n        version_number:\n          type: string\n          description: \"The version number. Ideally will follow semantic versioning\"\n          example: \"1.0.0\"\n        changelog:\n          type: string\n          description: \"The changelog for this version\"\n          example: \"List of changes in this version: ...\"\n          nullable: true\n        dependencies:\n          type: array\n          items:\n            type: object\n            nullable: true\n            properties:\n              version_id:\n                type: string\n                description: The ID of the version that this version depends on\n                example: IIJJKKLL\n                nullable: true\n              project_id:\n                type: string\n                description: The ID of the project that this version depends on\n                example: QQRRSSTT\n                nullable: true\n              dependency_type:\n                type: string\n                enum: [required, optional, incompatible]\n                description: The type of dependency that this version has\n                example: required\n            required:\n              - dependency_type\n          description: A list of specific versions of projects that this version depends on\n        game_versions:\n          type: array\n          items:\n            type: string\n          description: A list of versions of Minecraft that this version supports\n          example: [\"1.16.5\", \"1.17.1\"]\n        version_type:\n          type: string\n          description: The release channel for this version\n          enum: [release, beta, alpha]\n          example: release\n        loaders:\n          type: array\n          items:\n            type: string\n          description: The mod loaders that this version supports\n          example: [\"fabric\", \"forge\"]\n        featured:\n          type: boolean\n          description: Whether the version is featured or not\n          example: true\n    EditableVersion: # https://github.com/modrinth/labrinth/blob/master/src/routes/versions.rs#L169-L190\n      allOf:\n        - $ref: \"#/components/schemas/BaseVersion\"\n        - type: object\n          properties:\n            primary_file:\n              type: array\n              items:\n                type: string\n              example: [sha1, aaaabbbbccccddddeeeeffffgggghhhhiiiijjjj]\n              description: The hash format and the hash of the new primary file\n    CreatableVersion: # https://github.com/modrinth/labrinth/blob/master/src/routes/version_creation.rs#L25-L5%\n      allOf:\n        - type: object\n          properties:\n            data:\n              allOf:\n                - $ref: \"#/components/schemas/BaseVersion\"\n                - type: object\n                  properties:\n                    project_id:\n                      type: string\n                      description: The ID of the project this version is for\n                      example: AABBCCDD\n                    file_parts:\n                      type: array\n                      items:\n                        type: string\n                        description: An array of the multipart field names of each file that goes with this version\n                    primary_file:\n                      type: string\n                      description: The multipart field name of the primary file\n                  required:\n                    - file_parts\n                    - project_id\n                    - name\n                    - version_number\n                    - game_versions\n                    - version_type\n                    - loaders\n                    - featured\n          required:\n            - data\n    Version:\n      allOf:\n        - $ref: \"#/components/schemas/BaseVersion\"\n        - type: object\n          properties:\n            id:\n              type: string\n              description: The ID of the version, encoded as a base62 string\n              example: IIJJKKLL\n            project_id:\n              type: string\n              description: The ID of the project this version is for\n              example: AABBCCDD\n            author_id:\n              type: string\n              description: The ID of the author who published this version\n              example: EEFFGGHH\n            date_published:\n              type: string\n              format: date-time\n            downloads:\n              type: integer\n              description: The number of times this version has been downloaded\n            changelog_url:\n              type: string\n              description: A link to the changelog for this version\n              deprecated: true\n              example: null\n              nullable: true\n            files:\n              type: array\n              items:\n                type: object\n                properties:\n                  hashes:\n                    type: object\n                    properties:\n                      sha512:\n                        type: string\n                        example: 93ecf5fe02914fb53d94aa3d28c1fb562e23985f8e4d48b9038422798618761fe208a31ca9b723667a4e05de0d91a3f86bcd8d018f6a686c39550e21b198d96f\n                      sha1:\n                        type: string\n                        example: c84dd4b3580c02b79958a0590afd5783d80ef504\n                    description: A map of hashes of the file. The key is the hashing algorithm and the value is the string version of the hash.\n                  url:\n                    type: string\n                    example: \"https://cdn.modrinth.com/data/AABBCCDD/versions/1.0.0/my_file.jar\"\n                    description: A direct link to the file\n                  filename:\n                    type: string\n                    example: \"my_file.jar\"\n                    description: The name of the file\n                  primary:\n                    type: boolean\n                    example: false\n                  size:\n                    type: integer\n                    example: 1097270\n                    description: The size of the file in bytes\n                required:\n                  - hashes\n                  - url\n                  - filename\n                  - primary\n                  - size\n              description: A list of files available for download for this version\n          required:\n            - id\n            - project_id\n            - author_id\n            - date_published\n            - downloads\n            - files\n            - name\n            - version_number\n            - game_versions\n            - version_type\n            - loaders\n            - featured\n    # User\n    EditableUser:\n      type: object\n      properties:\n        username:\n          type: string\n          description: The user's username\n          example: my_user\n        name:\n          type: string\n          example: My User\n          description: The user's display name\n          nullable: true\n        email:\n          type: string\n          format: email\n          description: The user's email (only your own is ever displayed)\n          nullable: true\n        bio:\n          type: string\n          example: My short biography\n          description: A description of the user\n      required:\n        - username\n    User:\n      allOf:\n        - $ref: \"#/components/schemas/EditableUser\"\n        - type: object\n          properties:\n            id:\n              type: string\n              example: EEFFGGHH\n              description: The user's id\n            github_id:\n              type: integer\n              example: 11223344\n              description: The user's github id\n            avatar_url:\n              type: string\n              example: https://avatars.githubusercontent.com/u/11223344?v=1\n              description: The user's avatar url\n            created:\n              type: string\n              format: date-time\n              description: The time at which the user was created\n            role:\n              type: string\n              enum: [admin, moderator, developer]\n              description: The user's role\n              example: developer\n          required:\n            - id\n            - github_id\n            - avatar_url\n            - created\n            - role\n    # Notifications\n    Notification:\n      type: object\n      properties:\n        id:\n          type: string\n          description: The id of the notification\n          example: UUVVWWXX\n        user_id:\n          type: string\n          description: The id of the user who received the notification\n          example: EEFFGGHH\n        type:\n          type: string\n          enum: [project_update, team_invite]\n          description: The type of notification\n          example: project_update\n        title:\n          type: string\n          description: The title of the notification\n          example: \"**My Project** has been updated!\"\n        text:\n          type: string\n          description: The body text of the notification\n          example: \"The project, My Project, has released a new version: 1.0.0\"\n        link:\n          type: string\n          description: A link to the related project or version\n          example: mod/AABBCCDD/version/IIJJKKLL\n        read:\n          type: boolean\n          example: false\n          description: Whether the notification has been read or not\n        created:\n          type: string\n          format: date-time\n          description: The time at which the notification was created\n        actions:\n          type: array\n          items:\n            type: object\n            nullable: true\n          description: A list of actions that can be performed\n      required:\n        - id\n        - user_id\n        - title\n        - text\n        - link\n        - read\n        - created\n        - actions\n    # Reports\n    CreatableReport:\n      type: object\n      properties:\n        report_type:\n          type: string\n          description: The type of the report being sent\n          example: copyright\n        item_id:\n          type: string\n          description: The ID of the item (project, version, or user) being reported\n          example: EEFFGGHH\n        item_type:\n          type: string\n          enum: [project, user, version]\n          description: The type of the item being reported\n          example: project\n        body:\n          type: string\n          description: The extended explanation of the report\n          example: This is a reupload of my mod, AABBCCDD!\n      required:\n        - report_type\n        - item_id\n        - item_type\n        - body\n    Report:\n      type: object\n      allOf:\n        - $ref: \"#/components/schemas/CreatableReport\"\n        - type: object\n          properties:\n            reporter:\n              type: string\n              description: The ID of the user who reported the item\n              example: UUVVWWXX\n            created:\n              type: string\n              format: date-time\n              description: The time at which the report was created\n          required:\n            - reporter\n            - created\n    # Team\n    TeamMember:\n      type: object\n      properties:\n        team_id:\n          type: string\n          example: MMNNOOPP\n          description: The ID of the team this team member is a member of\n        user:\n          $ref: \"#/components/schemas/User\"\n        role:\n          type: string\n          example: Member\n          description: The user's role on the team\n        permissions:\n          type: integer\n          format: bitflag\n          example: 127\n          description: |\n            The user's permissions in bitflag format (requires authorization to view)\n\n            In order from first to eighth bit, the bits are:\n            - UPLOAD_VERSION\n            - DELETE_VERSION\n            - EDIT_DETAILS\n            - EDIT_BODY\n            - MANAGE_INVITES\n            - REMOVE_MEMBER\n            - EDIT_MEMBER\n            - DELETE_PROJECT\n        accepted:\n          type: boolean\n          example: true\n          description: Whether or not the user has accepted to be on the team (requires authorization to view)\n      required:\n        - team_id\n        - user\n        - role\n        - accepted\n    # Tags\n    CategoryTag:\n      type: object\n      properties:\n        icon:\n          type: string\n          description: The SVG icon of a category\n          example: \"\u003csvg viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"\u003e\u003ccircle cx=\\\"12\\\" cy=\\\"12\\\" r=\\\"10\\\"/\u003e\u003cpolygon points=\\\"16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76\\\"/\u003e\u003c/svg\u003e\"\n        name:\n          type: string\n          description: The name of the category\n          example: \"adventure\"\n        project_type:\n          type: string\n          description: The project type this category is applicable to\n          example: mod\n      required:\n        - icon\n        - name\n        - project_type\n    LoaderTag:\n      type: object\n      properties:\n        icon:\n          type: string\n          description: The SVG icon of a loader\n          example: \"\u003csvg viewBox=\\\"0 0 276 288\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"23\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\"\u003e\u003cg transform=\\\"matrix(1,0,0,1,-3302.43,-67.3276)\\\"\u003e\u003cg transform=\\\"matrix(0.564163,0,0,1.70346,1629.87,0)\\\"\u003e\u003cg transform=\\\"matrix(1.97801,-0.0501803,0.151517,0.655089,1678.7,-354.14)\\\"\u003e\u003cg\u003e\u003cpath d=\\\"M820.011,761.092C798.277,738.875 754.809,694.442 734.36,673.389C729.774,668.668 723.992,663.75 708.535,674.369C688.629,688.043 700.073,696.251 703.288,699.785C711.508,708.824 787.411,788.803 800.523,803.818C802.95,806.597 780.243,781.318 793.957,764.065C799.444,757.163 811.985,752.043 820.011,761.092C826.534,768.447 830.658,779.178 816.559,790.826C791.91,811.191 714.618,873.211 689.659,893.792C677.105,904.144 661.053,896.143 653.827,887.719C646.269,878.908 623.211,853.212 602.539,829.646C596.999,823.332 598.393,810.031 604.753,804.545C639.873,774.253 696.704,730.787 716.673,713.831\\\"/\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\"\n        name:\n          type: string\n          description: The name of the loader\n          example: fabric\n        supported_project_types:\n          type: array\n          items:\n            type: string\n            description: The project type\n          description: The project types that this loader is applicable to\n          example: [mod, modpack]\n      required:\n        - icon\n        - name\n        - supported_project_types\n    GameVersionTag:\n      type: object\n      properties:\n        version:\n          type: string\n          description: The name/number of the game version\n          example: 1.18.1\n        version_type:\n          type: string\n          enum: [release, snapshot, alpha, beta]\n          description: The type of the game version\n          example: release\n        date:\n          type: string\n          format: date-time\n          description: The date of the game version release\n        major:\n          type: boolean\n          description: Whether or not this is a major version, used for Featured Versions\n          example: true\n      required:\n        - version\n        - version_type\n        - date\n        - major\n    LicenseTag:\n      type: object\n      properties:\n        short:\n          type: string\n          description: The short identifier of the license\n          example: lgpl-3\n        name:\n          type: string\n          description: The full name of the license\n          example: GNU Lesser General Public License v3\n      required:\n        - short\n        - name\n    DonationPlatformTag:\n      type: object\n      properties:\n        short:\n          type: string\n          description: The short identifier of the donation platform\n          example: bmac\n        name:\n          type: string\n          description: The full name of the donation platform\n          example: Buy Me a Coffee\n      required:\n        - short\n        - name\n    # Errors\n    InvalidInputError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: The name of the error\n          example: \"invalid_input\"\n        description:\n          type: string\n          description: The contents of the error\n          example: \"Error while parsing multipart payload\"\n      required:\n        - error\n        - description\n    AuthError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: The name of the error\n          example: \"unauthorized\"\n        description:\n          type: string\n          description: The contents of the error\n          example: \"Authentication Error: Invalid Authentication Credentials\"\n      required:\n        - error\n        - description\n    NotFoundError:\n      type: object\n      properties:\n        error:\n          type: string\n          description: The name of the error\n          example: \"not_found\"\n        description:\n          type: string\n          description: The contents of the error\n          example: \"the requested route does not exist\"\n      required:\n        - error\n        - description\n  securitySchemes:\n    TokenAuth:\n      type: apiKey\n      in: header\n      name: Authorization\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /team/{team_id}/members/{user_id}: delete: parse path: path parameter not specified: \"team_id\""
}