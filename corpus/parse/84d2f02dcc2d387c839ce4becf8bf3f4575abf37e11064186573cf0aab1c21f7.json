{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Dorthu/openapi3"
		},
		"file": {
			"name": "rfc_6901.yaml",
			"size": 0,
			"path": "tests/fixtures/rfc_6901.yaml",
			"byteSize": 2433,
			"content": "# this schema has refs whose paths include the escaped `~` and `/` characters\n# (escaped as ~0 and ~1 respectively).  This also purposefully includes the ~01\n# escape sequence to ensure parsing ends in `~1` and not `/`\nopenapi: \"3.1.0\"\ninfo:\n  version: 1.0.0\n  title: RFC 6901 Test\npaths:\n  /ref-test:\n    parameters:\n      - $ref: '#/paths/~1parameters-holder/parameters/1'\n    get:\n      operationId: refTestGet\n      responses:\n        '200':\n          description: Test\n          content:\n            application/json:\n              schema:\n                description: |\n                  References all other fields in components/schemas to ensure all references\n                  are tested.\n                type: object\n                properties:\n                  one:\n                    $ref: '#/components/schemas/test~1one'\n                  two:\n                    $ref: '#/components/schemas/test~0two'\n                  three:\n                    $ref: '#/components/schemas/test~01three'\n                  four:\n                    $ref: '#/components/schemas/01/properties/example'\n  /parameters-holder:\n    parameters:\n      - name: example\n        in: query\n        schema:\n          type: int\n      - name: example2\n        in: query\n        schema:\n          type: int\n    get:\n      operationId: parametersHolderGet\n      responses:\n        '200':\n          description: Placeholder\n          content:\n            application/json:\n              schema:\n                type: object\ncomponents:\n  schemas:\n    test/one:\n      description: |\n        Tests that refs can reference paths with a `/` character; this should be\n        escaped as `#/components/schemas/test~1one`\n      type: string\n    test~two:\n      description: |\n        Tests that refs can reference paths with a `~` character; this should be\n        escaped as `#/components/schemas/test~0two`\n      type: int\n    test~1three:\n      description: |\n        Tests that refs can reference paths with a ~1 sequence in them; this should\n        be escaped as `#/components/schemas/test~01three`\n      type: array\n      items:\n        type: string\n    '01':\n      description: |\n        Tests that paths parsed using integer-like segments are handled correctly.\n        This will be referenced as `#/components/schemas/0/properties/example`\n      type: object\n      properties:\n        example:\n          type: string\n          example: it worked\n"
		}
	},
	"Error": "parse: parse spec: /parameters-holder: parameters: parse parameter \"example\": schema: parse schema: unexpected schema type: \"int\""
}