{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Kong/demo-scene"
		},
		"file": {
			"name": "deck-plugin-mocking.yml",
			"size": 0,
			"path": "summit-2021-demo/deck-plugin-mocking.yml",
			"byteSize": 12498,
			"content": "          plugins:\n            - name: mocking\n              enabled: true\n              protocols:\n                - http\n              config:\n                api_specification: |\n                  openapi: 3.0.0\n                  info:\n                    title: Summit Demo\n                    version: \"1.0\"\n                    license:\n                      name: MIT\n                    contact:\n                      email: michael.heap@konghq.com\n                      name: Michael Heap\n                      url: https://konghq.com\n                    description: Summit Demo API\n                    termsOfService: https://konghq.com/terms/\n                  servers:\n                    - url: \"http://34.138.1.85\"\n                  paths:\n                    /products:\n                      get:\n                        summary: List Kong products\n                        tags:\n                          - product\n                        responses:\n                          \"200\":\n                            description: OK\n                            content:\n                              application/json:\n                                schema:\n                                  type: array\n                                  description: \"List of kong products matching the provided filters\"\n                                  uniqueItems: true\n                                  items:\n                                    $ref: \"#/components/schemas/Product\"\n                                examples:\n                                  success:\n                                    value:\n                                      - name: Gateway\n                                        type: oss\n                                        description: Kong or Kong API Gateway is a cloud-native, platform-agnostic, scalable API Gateway distinguished for its high performance and extensibility via plugins.\n                                      - name: Insomnia\n                                        type: oss\n                                        description: Insomnia is an open-source, cross-platform API Client for GraphQL, REST, and gRPC.\n                                      - name: Developer Portal\n                                        type: enterprise\n                                        description: The Kong Developer Portal provides a single source of truth for all developers to locate, access, and consume services. With intuitive content management for documentation, streamlined developer onboarding, and role-based access control (RBAC), Kong’s Developer Portal provides a comprehensive solution for creating and customizing a unified developer experience.\n                          \"400\":\n                            description: Bad Request\n                            content:\n                              application/json:\n                                schema:\n                                  $ref: \"#/components/schemas/Error\"\n                                examples:\n                                  invalid-type:\n                                    value:\n                                      type: \"https://docs.konghq.com/problem/summit/invalid-type\"\n                                      title: Invalid type provided\n                                      detail: \"[ee] is an invalid value. Possible values: [oss, enterprise]\"\n                                      instance: \"t:beQpT0Hn\"\n                        operationId: list-products\n                        parameters:\n                          - schema:\n                              type: string\n                              enum:\n                                - oss\n                                - enterprise\n                            in: query\n                            name: type\n                            description: Only show products that match the provided `type`\n                        description: Fetch information about the products that Kong offer.\n                    /sessions:\n                      get:\n                        summary: List Summit sessions\n                        tags:\n                          - session\n                        parameters:\n                          - schema:\n                              type: string\n                              format: date\n                              example: \"2021-09-28\"\n                            in: query\n                            name: date\n                            description: Show sessions on the provided date\n                        responses:\n                          \"200\":\n                            description: OK\n                            content:\n                              application/json:\n                                schema:\n                                  type: array\n                                  items:\n                                    $ref: \"#/components/schemas/Session\"\n                                examples:\n                                  success:\n                                    value:\n                                      - title: Controlling Your Kong Gateway With decK and CI/CD\n                                        description: |\n                                          We used to configure services by hand, then came tools such as Puppet, Chef and Ansible. Then we used to build infrastructure by hand, and we got tools like Terraform and Pulumi. So why are we still configuring routes and plugins in Kong manually?\n\n                                          This session will introduce you to Kong’s declarative configuration capabilities and how to use your CI system to lint and apply these configurations in a variety of environments. Test your changes in a staging environment, then apply exactly the same config to production with a click of a button.\n                                        presenters:\n                                          - Michael Heap\n                                        date: 2021-09-28\n\n                                      - title: \"Work Smarter, Not Harder: Using ML to Observe Your Kuma API Metrics\"\n                                        description: |\n                                          Observability is catching on these days as the de-facto way to provide visibility into essential aspects of systems. It would be unwise for you not to leverage it with Kuma service mesh — the place that allows your services to communicate with the rest of the world. However, many observability solutions restrict themselves to the works: simple metric collection that provides them with dashboards. Expecting users to simply sit on their chairs and look at those metrics all day long is an invitation to failure, as we know that one can only do so much when they get tired and bored.\n\n                                          This talk will change the status quo and show how you can work smart by combining the flexibility of Kuma with the power of the Elastic Stack to ingest, store and analyze massive amounts of data. Join to learn how to collect metrics from Kuma via Prometheus, bring these metrics into Elasticsearch using Metricbeat and create machine learning jobs to look for anomalies that can alert you when something interesting happens.\n                                        presenters:\n                                          - Ricardo Ferreira\n                                          - Viktor Gamov\n                                        date: 2021-09-29\n\n                        operationId: list-sessions\n                        description: List all sessions being presented at Kong Summit\n\n                    \"/sessions/{id}\":\n                      parameters:\n                        - schema:\n                            type: string\n                          name: id\n                          in: path\n                          required: true\n                          description: The ID of the session to load\n                      get:\n                        summary: Fetch Summit session\n                        tags:\n                          - session\n                        responses:\n                          \"200\":\n                            description: OK\n                            content:\n                              application/json:\n                                schema:\n                                  $ref: \"#/components/schemas/Session\"\n                                examples:\n                                  success:\n                                    value:\n                                      title: Controlling Your Kong Gateway With decK and CI/CD\n                                      description: |\n                                        We used to configure services by hand, then came tools such as Puppet, Chef and Ansible. Then we used to build infrastructure by hand, and we got tools like Terraform and Pulumi. So why are we still configuring routes and plugins in Kong manually?\n\n                                        This session will introduce you to Kong’s declarative configuration capabilities and how to use your CI system to lint and apply these configurations in a variety of environments. Test your changes in a staging environment, then apply exactly the same config to production with a click of a button.\n                                      presenters:\n                                        - Michael Heap\n                                      date: 2021-09-28\n                          \"404\":\n                            description: Not Found\n                            content:\n                              application/json:\n                                schema:\n                                  $ref: \"#/components/schemas/Error\"\n                                examples:\n                                  invalid-id:\n                                    value:\n                                      type: \"https://docs.konghq.com/problem/summit/invalid-id\"\n                                      title: Session could not be found\n                                      detail: \"The session with ID [x87an] could not be found\"\n                                      instance: \"t:dbmwRKNA\"\n\n                        operationId: get-session\n                        description: \"Get detailed information about a session\"\n                  components:\n                    schemas:\n                      Product:\n                        description: A product that Kong offers\n                        type: object\n                        required:\n                          - name\n                          - type\n                          - description\n                        properties:\n                          name:\n                            type: string\n                          type:\n                            type: string\n                          description:\n                            type: string\n                      Session:\n                        description: A session that is being presented at Kong Summit\n                        type: object\n                        properties:\n                          title:\n                            type: string\n                          description:\n                            type: string\n                          presenters:\n                            type: array\n                            items:\n                              type: string\n                          date:\n                            type: string\n                            format: date\n                        required:\n                          - title\n                          - description\n                          - presenters\n                        title: \"\"\n                      Error:\n                        description: \"An RFC7807 formatted error\"\n                        type: object\n                        properties:\n                          type:\n                            type: string\n                          title:\n                            type: string\n                          detail:\n                            type: string\n                          instance:\n                            type: string\n                        required:\n                          - type\n                          - title\n                          - instance\n                  tags:\n                    - name: product\n                    - name: session\n                api_specification_filename: demo.yaml",
			"canonicalURL": "/github.com/Kong/demo-scene@df7a28b9826fa4dad6fa0dd2acb032391a25f892/-/blob/summit-2021-demo/deck-plugin-mocking.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Kong/demo-scene/blob/df7a28b9826fa4dad6fa0dd2acb032391a25f892/summit-2021-demo/deck-plugin-mocking.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at summit-2021-demo/deck-plugin-mocking.yml:1:11: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}