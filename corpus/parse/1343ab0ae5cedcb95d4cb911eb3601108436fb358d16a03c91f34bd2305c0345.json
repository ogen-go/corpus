{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "motaword.com-1.0-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/motaword.com-1.0-swagger.yaml",
			"byteSize": 72719,
			"content": "openapi: 3.0.0\ninfo:\n  description: Use MotaWord API to post and track your translation projects.\n  title: MotaWord\n  version: \"1.0\"\n  x-apiClientRegistration:\n    url: https://www.motaword.com/developer/register\n  x-apisguru-categories:\n    - text\n  x-logo:\n    url: https://dentycj2qhk72.cloudfront.net/new/images/new_logo_horizontal.png\n  x-origin:\n    - format: swagger\n      url: https://api.motaword.com/swagger\n      version: \"2.0\"\n  x-providerName: motaword.com\nexternalDocs:\n  url: https://www.motaword.com/developer\npaths:\n  /:\n    get:\n      description: |\n        The root endpoint will provide you a JSON Swagger definition.\n      operationId: getEndpoints\n      responses:\n        \"200\":\n          description: JSON representation of our Swagger API definition.\n          content:\n            application/json:\n              schema:\n                type: object\n        default:\n          description: Authentication error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Available endpoints\n      tags:\n        - Static\n  /formats:\n    get:\n      description: \u003e\n        Get a list of supported formats for documents, style guides and\n        extensions.\n      operationId: getFormats\n      responses:\n        \"200\":\n          description: A list of supported formats\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Formats\"\n                type: object\n      security:\n        - client_credentials: []\n      summary: Get a list of supported formats\n      tags:\n        - Static\n  /glossary:\n    get:\n      description: Download your corporate account's global glossary. This endpoint is\n        available only for corporate account customers.\n      operationId: downloadGlobalGlossary\n      responses:\n        \"200\":\n          description: Glossary file streamed.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: GlossaryNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download the global glossary.\n      tags:\n        - Account\n        - Glossary\n    post:\n      description: Update your corporate account's global glossary. This endpoint is\n        available only for corporate account customers.\n      operationId: updateGlobalGlossary\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                glossary:\n                  description: |\n                    Glossary file. Currently supported formats: .xlsx, .tbx\n                  type: string\n                  format: binary\n              required:\n                - glossary\n      responses:\n        \"200\":\n          description: Success response\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"400\":\n          description: FileTooLarge FileTooSmall NoFileUploaded\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedGlossaryFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Create or update the global glossary.\n      tags:\n        - Account\n        - Glossary\n  /languages:\n    get:\n      description: Get a list of supported languages\n      operationId: getLanguages\n      responses:\n        \"200\":\n          description: A list of supported languages\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Language\"\n                type: array\n      security:\n        - client_credentials: []\n      summary: Get a list of supported languages\n      tags:\n        - Static\n  /me:\n    get:\n      operationId: getAccount\n      responses:\n        \"200\":\n          description: Account summary\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n        \"404\":\n          description: UserNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get your account information and summary.\n      tags:\n        - Account\n  /projects:\n    get:\n      description: Get a list of your projects\n      operationId: getProjects\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n            default: 1\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n            default: 10\n      responses:\n        \"200\":\n          description: Project list\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ProjectList\"\n                type: object\n      security:\n        - client_credentials: []\n      summary: Get a list of your projects\n      tags:\n        - Project\n    post:\n      description: Create a new project\n      operationId: createProject\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                source_language:\n                  type: string\n                \"target_languages[]\":\n                  type: array\n                  items:\n                    type: string\n                callback_url:\n                  description: Optional. If you provide a callback URL, we will send POST\n                    callbacks when the status of the current project is changed.\n                    Possible status changes are, 'translated', 'proofread',\n                    'completed'.\n                  type: string\n                custom:\n                  description: Optional. This is a consistent custom data parameter that\n                    will be given to you in the response across every request of\n                    this project model. Values should be provided like this,\n                    custom[my_key] = my_value.\n                  type: array\n                  items:\n                    type: string\n                \"documents[]\":\n                  description: Optional. You can add as many files as you want in\n                    documents[] parameter. Or you add your documents later in\n                    separate calls.\n                  type: string\n                  format: binary\n                \"styleguides[]\":\n                  description: Optional. You can add as many files as you want in\n                    styleguides[] parameter. Or you add your style guides later\n                    in separate calls.\n                  type: string\n                  format: binary\n                \"glossaries[]\":\n                  description: Optional. Only one glossary is supported at the moment.\n                  type: string\n                  format: binary\n              required:\n                - source_language\n                - target_languages[]\n      responses:\n        \"200\":\n          description: Newly created project\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Project\"\n                type: object\n        \"400\":\n          description: FileTooLarge FileTooSmall FileWasAlreadyUploaded\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedDocumentFormat UnsupportedStyleGuideFormat\n            UnsupportedGlossaryFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"406\":\n          description: UnsupportedLanguage TooManyGlossaries ProjectAlreadyHasGlossary\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"500\":\n          description: ProjectInsertFailed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a new quote\n      tags:\n        - Project\n  \"/projects/{id}\":\n    delete:\n      description: Delete(cancel) a project.\n      operationId: deleteProject\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Project canceled successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Delete a project\n      tags:\n        - Project\n    get:\n      description: Get single project\n      operationId: getProject\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Project model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get single project\n      tags:\n        - Project\n    put:\n      description: Update project language pairs\n      operationId: updateProject\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                source_language:\n                  type: string\n                \"target_languages[]\":\n                  type: array\n                  items:\n                    type: string\n                callback_url:\n                  description: Optional. If you provide a callback URL, we will send POST\n                    callbacks when the status of the current project is changed.\n                    Possible status changes are, 'translated', 'proofread',\n                    'completed'.\n                  type: string\n                custom:\n                  description: Optional. This is a consistent custom data parameter that\n                    will be given to you in the response across every request of\n                    this project model. Values should be provided like this,\n                    custom[my_key] = my_value. If you previously provided one,\n                    it will be replaced.\n                  type: array\n                  items:\n                    type: string\n              required:\n                - source_language\n                - target_languages[]\n      responses:\n        \"200\":\n          description: Updated project\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Project\"\n                type: object\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"406\":\n          description: UnsupportedLanguage\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Update project language pairs\n      tags:\n        - Project\n  \"/projects/{id}/callback/{actionType}\":\n    get:\n      description: Trigger a call to your callback URL related to this project.\n      operationId: triggerCallback\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Callback type\n          in: path\n          name: actionType\n          required: true\n          schema:\n            type: string\n            enum:\n              - translated\n              - proofread\n              - completed\n      responses:\n        \"200\":\n          description: Callback result\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CallbackResult\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Trigger a call to your callback URL related to this project.\n      tags:\n        - Project\n  \"/projects/{id}/cancel\":\n    post:\n      operationId: cancelProject\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                reason:\n                  description: Cancellation reason\n                  type: string\n      responses:\n        \"200\":\n          description: Project canceled successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Cancel your translation project\n      tags:\n        - Project\n  \"/projects/{id}/download\":\n    post:\n      description: Download the latest translation package. You must have given a /package\n        call beforehand and wait until the packaging status is 'completed'.\n      operationId: download\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Translation package streamed. The streamed file is always a ZIP\n            file, except when the API client is configured for Drupal and\n            Wordpress.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"402\":\n          description: ProjectNotLaunchedYet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: TranslationPackageNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download the latest translation package.\n      tags:\n        - Project\n  \"/projects/{id}/download/{language}\":\n    post:\n      description: Download only the translation package of this language. You must have\n        given a /package call beforehand and wait until the packaging status is\n        'completed'.\n      operationId: downloadLanguage\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Language code. You can download the translation of only a specific\n            language.\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Translation package streamed. The streamed file is always a ZIP\n            file, except when the API client is configured for Drupal and\n            Wordpress.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"402\":\n          description: ProjectNotLaunchedYet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: TranslationPackageNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download the latest translation package.\n      tags:\n        - Project\n  \"/projects/{id}/launch\":\n    post:\n      operationId: launchProject\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                payment_method:\n                  description: Optional. Determines which method to use for payment.\n                    Options are 'corporate', 'client'.\n                  type: string\n                  enum:\n                    - corporate\n                    - client\n                payment_code:\n                  description: Optional. According to your corporate account configuration,\n                    this may be required.\n                  type: string\n                budget_code:\n                  description: Optional with corporate accounts. Not available for others.\n                  type: string\n      responses:\n        \"200\":\n          description: Project launched successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: started\n                    type: string\n                type: object\n        \"400\":\n          description: MissingPaymentCode MissingCorporateAccount MissingPaymentMethod\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: CorporateAccountNotAllowedForApiPayment\n            ApiClientMissingPaymentInformation\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Launch your translation project\n      tags:\n        - Project\n  \"/projects/{id}/package\":\n    post:\n      description: Package the translation project, make it ready to be downloaded.\n      operationId: package\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: If you want to package and download the translation synchronously,\n            mark this parameter as '0'. It will package the translation and then\n            return the packaged file in the response, identical to /download\n            call after an asynchronous /package call.\n          in: query\n          name: async\n          schema:\n            type: integer\n            default: 0\n      responses:\n        \"200\":\n          description: Packaged translation streamed.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"402\":\n          description: ProjectNotLaunchedYet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: TranslationPackageNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Package the translation of all languages to be downloaded.\n      tags:\n        - Project\n  \"/projects/{id}/package/check\":\n    get:\n      description: This request will tell you the current progress of the translation\n        packaging. You will use the 'key' provided by the /package call.\n      operationId: trackPackage\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: This is the package tracking key provided in the response of a\n            /package call.\n          in: query\n          name: key\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Current status of packaging process.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PackageStatus\"\n        \"402\":\n          description: ProjectNotLaunchedYet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: PackagingStatusMissing\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Track the status of translation packaging.\n      tags:\n        - Project\n  \"/projects/{id}/package/{language}\":\n    post:\n      description: Package the translation project, make it ready to be downloaded.\n      operationId: packageLanguage\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Language code. You can package the translation of only a specific\n            language.\n          in: path\n          name: language\n          required: true\n          schema:\n            type: string\n        - description: If you want to package and download the translation synchronously,\n            mark this parameter as '0'. It will package the translation and then\n            return the packaged file in the response, identical to /download\n            call after an asynchronous /package call.\n          in: query\n          name: async\n          schema:\n            type: integer\n            default: 0\n      responses:\n        \"200\":\n          description: Packaging status and tracking code. With the package key, you can\n            track the progress of translation packaging.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Package\"\n        \"201\":\n          description: Packaged translation streamed. Status code is actually 200, not 201.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"402\":\n          description: ProjectNotLaunchedYet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: TranslationPackageNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Package the translation of a specific target language to be downloaded.\n      tags:\n        - Project\n  \"/projects/{id}/progress\":\n    get:\n      description: Get the progress of an already launched project.\n      operationId: getProgress\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Progress information\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Progress\"\n        \"402\":\n          description: ProjectNotLaunchedYet\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get project progress\n      tags:\n        - Project\n  \"/projects/{id}/reports\":\n    post:\n      operationId: submitProjectReports\n      parameters:\n        - description: Project ID\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                activity_type:\n                  description: Activity Type\n                  type: string\n                message:\n                  description: Report Message\n                  type: string\n      responses:\n        \"200\":\n          description: Report submitted successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"400\":\n          description: MissingMessage\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Submit reports for a project\n      tags:\n        - Project\n  \"/projects/{projectId}/activities\":\n    get:\n      description: Get a list of realtime activities on the project, such as translation\n        suggestion and translation approval.\n      operationId: getActivities\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - in: query\n          name: page\n          schema:\n            type: integer\n            default: 1\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n            default: 10\n      responses:\n        \"200\":\n          description: A list of activity models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ActivityList\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a list of realtime activities.\n      tags:\n        - Activity\n  \"/projects/{projectId}/activities/{activityId}\":\n    get:\n      description: Get a single realtime activity.\n      operationId: getActivity\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Activity ID\n          in: path\n          name: activityId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Activity model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Activity\"\n        \"404\":\n          description: ProjectActivityNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a single realtime activity.\n      tags:\n        - Activity\n    post:\n      description: Submit a comment to an activity.\n      operationId: submitComment\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Activity ID\n          in: path\n          name: activityId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                comment:\n                  description: Comment text.\n                  type: string\n              required:\n                - comment\n      responses:\n        \"200\":\n          description: Comment model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Comment\"\n        \"404\":\n          description: ProjectActivityNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Submit a comment to an activity.\n      tags:\n        - Activity\n  \"/projects/{projectId}/activities/{activityId}/comments\":\n    get:\n      description: Get a list of comments belonging to this activity.\n      operationId: getActivityComments\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Activity ID\n          in: path\n          name: activityId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: A list of Comment models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentList\"\n        \"404\":\n          description: ProjectActivityNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a list of comments belonging to this activity.\n      tags:\n        - Activity\n  \"/projects/{projectId}/comments\":\n    get:\n      description: Get a list of activity comments throughout the whole project.\n      operationId: getComments\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - in: query\n          name: page\n          schema:\n            type: integer\n            default: 1\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n            default: 10\n      responses:\n        \"200\":\n          description: A list of Comment models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CommentList\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a list of activity comments throughout the whole project.\n      tags:\n        - Activity\n  \"/projects/{projectId}/documents\":\n    get:\n      description: Get a list of documents\n      operationId: getDocuments\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: A list of document models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DocumentList\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a list of documents\n      tags:\n        - Document\n    post:\n      description: Upload a new document\n      operationId: createDocument\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                \"documents[]\":\n                  description: You can add as many files as you want in documents[]\n                    parameter.\n                  type: string\n                  format: binary\n                \"schemes[]\":\n                  description: JSON string. If your documents have a scheme, as in cases of\n                    CSV files, use the same array index keys for `schemes`\n                    parameter to specify their schemes. See `Document Schemes`\n                    title in the API documentation.\n                  type: string\n              required:\n                - documents[]\n      responses:\n        \"200\":\n          description: A list of successfully added new documents.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Document\"\n        \"400\":\n          description: FileTooLarge FileTooSmall FileWasAlreadyUploaded\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedDocumentFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"406\":\n          description: InvalidDocumentScheme\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Upload a new document\n      tags:\n        - Document\n  \"/projects/{projectId}/documents/{documentId}\":\n    delete:\n      description: Delete the document\n      operationId: deleteDocument\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Document deleted successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"404\":\n          description: DocumentNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Delete the document\n      tags:\n        - Document\n    get:\n      description: Get single document\n      operationId: getDocument\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Document model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Document\"\n        \"404\":\n          description: DocumentNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get single document\n      tags:\n        - Document\n    put:\n      description: Update the document. File name and contents will replaced with the new\n        one.\n      operationId: updateDocument\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                documents:\n                  description: Single file data. The name is plural to provide a consistent\n                    naming convention.\n                  type: string\n                  format: binary\n                schemes:\n                  description: JSON string. If your documents have a scheme, as in cases of\n                    CSV files, use the same array index keys for `schemes`\n                    parameter to specify their schemes. See `Document Schemes`\n                    title in the API documentation.\n                  type: string\n      responses:\n        \"200\":\n          description: Updated document model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Document\"\n        \"400\":\n          description: FileTooLarge FileTooSmall FileWasAlreadyUploaded\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: DocumentNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedDocumentFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"406\":\n          description: InvalidDocumentScheme\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Update the document.\n      tags:\n        - Document\n  \"/projects/{projectId}/documents/{documentId}/download\":\n    get:\n      description: Download a document\n      operationId: downloadDocument\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Document ID\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Document streamed\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: DocumentNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download a document\n      tags:\n        - Document\n  \"/projects/{projectId}/glossaries\":\n    get:\n      description: Get a list of glossaries\n      operationId: getGlossaries\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: A list of glossary models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GlossaryList\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a list of glossaries\n      tags:\n        - Glossary\n    post:\n      description: Upload a new glossary\n      operationId: createGlossary\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                glossaries:\n                  description: You can only add one glossary, even though the name suggests\n                    multiple glossaries. This may be updated in the future to\n                    support multiple glossaries.\n                  type: string\n                  format: binary\n              required:\n                - glossaries\n      responses:\n        \"200\":\n          description: Newly created glossary model.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Glossary\"\n        \"400\":\n          description: FileTooLarge\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedGlossaryFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"406\":\n          description: ProjectAlreadyHasGlossary\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Upload a new glossary\n      tags:\n        - Glossary\n  \"/projects/{projectId}/glossaries/{glossaryId}\":\n    delete:\n      description: Delete the glossary\n      operationId: deleteGlossary\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Glossary ID\n          in: path\n          name: glossaryId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Glossary deleted successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"404\":\n          description: GlossaryNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Delete the glossary\n      tags:\n        - Glossary\n    get:\n      description: Get single glossary\n      operationId: getGlossary\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Glossary ID\n          in: path\n          name: glossaryId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Glossary model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Glossary\"\n        \"404\":\n          description: GlossaryNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get single glossary\n      tags:\n        - Glossary\n    put:\n      description: Update the glossary. File name and contents will replaced with the new\n        one.\n      operationId: updateGlossary\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Glossary ID\n          in: path\n          name: glossaryId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                glossaries:\n                  description: Single file data. The name is plural to provide a consistent\n                    naming convention.\n                  type: string\n                  format: binary\n              required:\n                - glossaries\n      responses:\n        \"200\":\n          description: Updated glossary model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Glossary\"\n        \"400\":\n          description: FileTooLarge\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: GlossaryNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedGlossaryFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Update the glossary.\n      tags:\n        - Glossary\n  \"/projects/{projectId}/glossaries/{glossaryId}/download\":\n    get:\n      description: Download a glossary\n      operationId: downloadGlossary\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Glossary ID\n          in: path\n          name: glossaryId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Glossary streamed\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: GlossaryNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download a glossary\n      tags:\n        - Glossary\n  \"/projects/{projectId}/styleguides\":\n    get:\n      description: Get a list of style guides\n      operationId: getStyleGuides\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: A list of style guide models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StyleGuideList\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get a list of style guides\n      tags:\n        - Style Guide\n    post:\n      description: Upload a new style guide\n      operationId: createStyleGuide\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                \"styleguides[]\":\n                  description: You can add as many files as you want in styleguides[]\n                    parameter.\n                  type: string\n                  format: binary\n              required:\n                - styleguides[]\n      responses:\n        \"200\":\n          description: Newly created style guide model or a list of new style guide models\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StyleGuide\"\n        \"400\":\n          description: FileTooLarge\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: ProjectNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedStyleGuideFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Upload a new style guide\n      tags:\n        - Style Guide\n  \"/projects/{projectId}/styleguides/{styleGuideId}\":\n    delete:\n      description: Delete the style guide\n      operationId: deleteStyleGuide\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Style Guide ID\n          in: path\n          name: styleGuideId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Style guide deleted successfully\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"404\":\n          description: StyleGuideNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Delete the style guide\n      tags:\n        - Style Guide\n    get:\n      description: Get single style guide\n      operationId: getStyleGuide\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Style Guide ID\n          in: path\n          name: styleGuideId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Style guide model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StyleGuide\"\n        \"404\":\n          description: StyleGuideNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Get single style guide\n      tags:\n        - Style Guide\n    put:\n      description: Update the style guide. File name and contents will replaced with the\n        new one.\n      operationId: updateStyleGuide\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Style guide ID\n          in: path\n          name: styleGuideId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                styleguides:\n                  description: Single file data. The name is plural to provide a consistent\n                    naming convention.\n                  type: string\n                  format: binary\n              required:\n                - styleguides\n      responses:\n        \"200\":\n          description: Updated style guide model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StyleGuide\"\n        \"400\":\n          description: FileTooLarge\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"404\":\n          description: StyleGuideNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedStyleGuideFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"409\":\n          description: ProjectAlreadyStarted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Update the style guide.\n      tags:\n        - Style Guide\n  \"/projects/{projectId}/styleguides/{styleGuideId}/download\":\n    get:\n      description: Download a style guide\n      operationId: downloadStyleGuide\n      parameters:\n        - description: Project ID\n          in: path\n          name: projectId\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - description: Style Guide ID\n          in: path\n          name: styleGuideId\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: Style guide streamed\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: StyleGuideNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download a style guide\n      tags:\n        - Style Guide\n  /styleguide:\n    get:\n      description: Download your corporate account's global style guide. This endpoint is\n        available only for corporate account customers.\n      operationId: downloadGlobalStyleGuide\n      responses:\n        \"200\":\n          description: Style guide file streamed.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: StyleGuideNotFound\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Download the global style guide.\n      tags:\n        - Account\n        - Style Guide\n    post:\n      description: Update your corporate account's global style guide. This endpoint is\n        available only for corporate account customers.\n      operationId: updateGlobalStyleGuide\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                styleguide:\n                  description: \u003e\n                    Style guide file. Currently supported formats: .pdf, .docx,\n                    .txt\n                  type: string\n                  format: binary\n              required:\n                - styleguide\n      responses:\n        \"200\":\n          description: Success response\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    default: success\n                    type: string\n                type: object\n        \"400\":\n          description: FileTooLarge FileTooSmall NoFileUploaded MissingCorporateAccount\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"405\":\n          description: UnsupportedStyleGuideFormat\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      security:\n        - client_credentials: []\n      summary: Create or update the global style guide.\n      tags:\n        - Account\n        - Style Guide\n  /token:\n    post:\n      description: \u003e\n        MotaWord API is using OAuth2 procedures when authenticating or\n        authorizing your API call. Currently, we only allow Client Credential\n        type flow.\n      operationId: getAccessToken\n      parameters:\n        - description: HTTP Basic Authorization header.\n          in: header\n          name: Authorization\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                grant_type:\n                  description: OAuth2 grant type. Currently only 'client_credentials'\n                    available.\n                  type: string\n              required:\n                - grant_type\n      responses:\n        \"200\":\n          description: Authentication response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Token\"\n        default:\n          description: Authentication error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n      summary: Retrieve an access token to interact with the API.\n      tags:\n        - Auth\nservers:\n  - url: https://api.motaword.com/\ncomponents:\n  securitySchemes:\n    client_credentials:\n      description: OAuth2 authentication, Client Credentials flow.\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://api.motaword.com/token\n          tokenUrl: https://api.motaword.com/token\n          scopes:\n            \"*\": \"*\"\n  schemas:\n    Account:\n      properties:\n        billing:\n          properties:\n            city:\n              type: string\n            country:\n              type: string\n            name:\n              type: string\n            state:\n              type: string\n            street:\n              type: string\n            zip:\n              type: string\n          type: object\n        created_at:\n          type: integer\n        id:\n          type: integer\n        links:\n          properties:\n            projects:\n              properties:\n                href:\n                  type: string\n              type: object\n            self:\n              properties:\n                href:\n                  type: string\n              type: object\n          type: object\n        name:\n          type: string\n        stats:\n          properties:\n            started_projects:\n              type: integer\n            total_projects:\n              type: integer\n          type: object\n    Activity:\n      properties:\n        activity_at:\n          format: date\n          type: string\n        id:\n          type: integer\n        links:\n          $ref: \"#/components/schemas/ActivityLinks\"\n        source_text:\n          description: Source text\n          type: string\n        target_text:\n          description: Target text of the activity, which is actually the translation of\n            the source text.\n          type: string\n        translator:\n          description: Unique identifier of the translator/proofreader of this activity.\n          type: integer\n        type:\n          description: Currently there are two available activity types; 'translated',\n            'proofread'.\n          enum:\n            - translated\n            - proofread\n          type: string\n      type: object\n    ActivityLinks:\n      allOf:\n        - $ref: \"#/components/schemas/LinksMeta\"\n      properties:\n        comments:\n          properties:\n            href:\n              type: string\n          type: object\n        project:\n          properties:\n            href:\n              type: string\n          type: object\n      type: object\n    ActivityList:\n      properties:\n        activities:\n          items:\n            $ref: \"#/components/schemas/Activity\"\n          type: array\n        meta:\n          $ref: \"#/components/schemas/PagingMeta\"\n      type: object\n    CallbackResult:\n      properties:\n        data:\n          $ref: \"#/components/schemas/Project\"\n        result:\n          description: Callback response returned from `url`.\n          type: string\n        type:\n          enum:\n            - translated\n            - proofread\n            - completed\n          type: string\n        url:\n          description: The URL that received the callback.\n          type: string\n      type: object\n    Comment:\n      properties:\n        comment:\n          description: Comment text.\n          type: string\n        commented_at:\n          format: date\n          type: string\n        id:\n          type: integer\n        links:\n          $ref: \"#/components/schemas/CommentLinks\"\n      type: object\n    CommentLinks:\n      allOf:\n        - $ref: \"#/components/schemas/LinksMeta\"\n      properties:\n        activity:\n          description: Link to the activity to which this comment was submitted.\n          properties:\n            href:\n              type: string\n          type: object\n        project:\n          properties:\n            href:\n              type: string\n          type: object\n      type: object\n    CommentList:\n      properties:\n        activities:\n          items:\n            $ref: \"#/components/schemas/Comment\"\n          type: array\n        meta:\n          $ref: \"#/components/schemas/PagingMeta\"\n      type: object\n    Document:\n      properties:\n        id:\n          type: integer\n        links:\n          $ref: \"#/components/schemas/DocumentLinks\"\n        name:\n          type: string\n        scheme:\n          type: object\n        uploaded_at:\n          format: date\n          type: string\n        word_count:\n          type: integer\n      type: object\n    DocumentLinks:\n      allOf:\n        - $ref: \"#/components/schemas/LinksMeta\"\n      properties:\n        download:\n          properties:\n            href:\n              type: string\n          type: object\n        project:\n          properties:\n            href:\n              type: string\n          type: object\n      type: object\n    DocumentList:\n      properties:\n        documents:\n          items:\n            $ref: \"#/components/schemas/Document\"\n          type: array\n        meta:\n          $ref: \"#/components/schemas/PagingMeta\"\n      type: object\n    Error:\n      properties:\n        code:\n          type: string\n        help:\n          type: string\n        http_code:\n          format: int32\n          type: integer\n        message:\n          type: string\n      type: object\n    Formats:\n      properties:\n        documents:\n          properties:\n            extensions:\n              items:\n                type: string\n              type: array\n            mimes:\n              items:\n                type: string\n              type: array\n          type: object\n        glossaries:\n          properties:\n            extensions:\n              items:\n                type: string\n              type: array\n          type: object\n        styleguides:\n          properties:\n            extensions:\n              items:\n                type: string\n              type: array\n          type: object\n      type: object\n    Glossary:\n      properties:\n        id:\n          type: integer\n        links:\n          $ref: \"#/components/schemas/DocumentLinks\"\n        name:\n          type: string\n        uploaded_at:\n          format: date\n          type: string\n      type: object\n    GlossaryList:\n      properties:\n        glossaries:\n          items:\n            $ref: \"#/components/schemas/Glossary\"\n          type: array\n        meta:\n          $ref: \"#/components/schemas/PagingMeta\"\n      type: object\n    Language:\n      properties:\n        code:\n          type: string\n        name:\n          type: string\n      type: object\n    LanguageProgress:\n      properties:\n        languageCode:\n          $ref: \"#/components/schemas/ProgressSub\"\n      type: object\n    LinksMeta:\n      properties:\n        self:\n          properties:\n            href:\n              type: string\n          type: object\n      type: object\n    Package:\n      properties:\n        key:\n          description: This is the unique package tracking key. You can use this key to\n            track the current progress of the translation packaging with\n            /package/check call.\n          type: string\n        status:\n          description: The status of translation packaging. Possible values are 'started',\n            'packaging', 'completed'. When completed, you can make a /download\n            call to download the last translation package.\n          enum:\n            - started\n            - packaging\n            - completed\n          type: string\n      type: object\n    PackageStatus:\n      properties:\n        status:\n          description: The status of translation packaging. Possible values are 'started',\n            'packaging', 'completed'. When completed, you can make a /download\n            call to download the last translation package.\n          enum:\n            - started\n            - packaging\n            - completed\n          type: string\n      type: object\n    PagingLinksMeta:\n      allOf:\n        - $ref: \"#/components/schemas/LinksMeta\"\n      properties:\n        next:\n          type: string\n        previous:\n          type: string\n      type: object\n    PagingMeta:\n      properties:\n        paging:\n          properties:\n            links:\n              $ref: \"#/components/schemas/PagingLinksMeta\"\n            page:\n              default: 1\n              type: integer\n            per_page:\n              default: 10\n              type: integer\n            total_count:\n              type: integer\n          type: object\n      type: object\n    Progress:\n      allOf:\n        - $ref: \"#/components/schemas/ProgressSub\"\n      properties:\n        languages:\n          $ref: \"#/components/schemas/LanguageProgress\"\n        links:\n          $ref: \"#/components/schemas/ProgressLink\"\n      type: object\n    ProgressLink:\n      allOf:\n        - $ref: \"#/components/schemas/LinksMeta\"\n      properties:\n        project:\n          properties:\n            href:\n              type: string\n          type: object\n      type: object\n    ProgressSub:\n      properties:\n        proofreading:\n          type: integer\n        total:\n          type: integer\n        translation:\n          type: integer\n      type: object\n    Project:\n      properties:\n        callback_url:\n          description: Callback URL to notify when project status changed.\n          type: string\n        created_at:\n          format: date\n          type: string\n        custom:\n          description: Custom data provided while creating a new project.\n          type: object\n        delivery_at:\n          format: date\n          type: string\n        errors:\n          description: A list of errors. Visible when creating a project and uploading your\n            documents at the same time, in case of multiple errors.\n          items:\n            $ref: \"#/components/schemas/Error\"\n          type: array\n        id:\n          type: integer\n        links:\n          $ref: \"#/components/schemas/ProjectLinks\"\n        price:\n          properties:\n            amount:\n              format: float\n              type: number\n            currency:\n              default: usd\n              type: string\n          type: object\n        source_language:\n          type: string\n        status:\n          enum:\n            - pending\n            - started\n            - completed\n          type: string\n        target_languages:\n          items:\n            type: string\n          type: array\n        valid_until:\n          description: Available only if status is `pending`\n          format: date\n          type: string\n        word_count:\n          type: integer\n      type: object\n    ProjectLinks:\n      allOf:\n        - $ref: \"#/components/schemas/LinksMeta\"\n      properties:\n        documents:\n          properties:\n            href:\n              type: string\n          type: object\n        glossaries:\n          properties:\n            href:\n              type: string\n          type: object\n        styleguides:\n          properties:\n            href:\n              type: string\n          type: object\n      type: object\n    ProjectList:\n      properties:\n        meta:\n          $ref: \"#/components/schemas/PagingMeta\"\n        projects:\n          items:\n            $ref: \"#/components/schemas/Project\"\n          type: array\n      type: object\n    StyleGuide:\n      properties:\n        id:\n          type: integer\n        links:\n          $ref: \"#/components/schemas/DocumentLinks\"\n        name:\n          type: string\n        uploaded_at:\n          format: date\n          type: string\n      type: object\n    StyleGuideList:\n      properties:\n        meta:\n          $ref: \"#/components/schemas/PagingMeta\"\n        styleguides:\n          items:\n            $ref: \"#/components/schemas/StyleGuide\"\n          type: array\n      type: object\n    Token:\n      properties:\n        access_token:\n          type: string\n        expires_in:\n          type: integer\n        scope:\n          type: string\n        token_type:\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /projects: get: operation \"getProjects\": responses: 200: content: \"application/json\": schema: parse schema: object cannot contain 'items' field"
}