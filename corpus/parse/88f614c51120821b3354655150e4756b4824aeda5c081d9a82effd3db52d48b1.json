{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CardanoSolutions/kupo"
		},
		"file": {
			"name": "v2.1.0.yaml",
			"size": 0,
			"path": "docs/api/v2.1.0.yaml",
			"byteSize": 62798,
			"content": "openapi: 3.0.0\n\nservers:\n  - url: http://localhost:1442/\n\ninfo:\n  title: Kupo\n  version: \"v2.1.0\"\n  license:\n    name: MPL-2.0\n    url: https://raw.githubusercontent.com/cardanosolutions/kupo/master/LICENSE\n  x-logo:\n    url: ./kupo.png\n    altText: Kupo!\n\n  description: |\n    # Overview\n\n    **Kupo** is a lightweight, configurable, **chain-index** for the Cardano\n    blockchain. It synchronizes data from the blockchain according to\n    **patterns** matching addresses present in transaction outputs, to build a\n    **lookup table** from matches to their associated **output references,\n    values and datum hashes.**\n\n    # Installation\n\n    ### From pre-compiled executables\n\n    Pre-compiled static binaries can be downloaded as build artifacts from\n    [latest releases](https://github.com/CardanoSolutions/kupo/releases) or the\n    continuous [`Nix` Github workflow](https://github.com/CardanoSolutions/kupo/actions).\n\n    ```\n    ...\n    ├── bin\n    │   └── kupo\n    └── share\n        ├── bash-completion\n        │   └── completions\n        │       └── kupo\n        ├── kupo\n        │   ├── LICENSE\n        │   └── api.yaml\n        ├── man\n        │   └── man1\n        │       └── kupo.1\n        └── zsh\n            └── site-functions\n                └── _kupo\n    ```\n\n    Once installed, `man kupo` or `kupo --help` comes in handy.\n\n    ### From Docker\n\n    Kupo is available as a standalone Docker image on [DockerHub](https://hub.docker.com/repository/docker/cardanosolutions/kupo).\n\n    ```console\n    $ docker pull cardanosolutions/kupo\n    ```\n\n    ### From source\n\n    #### Pre-requisite\n\n    On Linux, make sure to have [nix](https://nixos.org/download.html#nix-install-linux) and [cachix](https://www.cachix.org/) installed.\n    Configure cachix to use `kupo.cachix.org-1:RzYQ8KVjRJdPNt/Bhq/UqdyGYWFM8ShjEMNG8wzHBQ4=` (`cachix use kupo`).\n\n    On MacOS, you'll need `cabal` as well as a few system dependencies. Follow the [instructions to install `cardano-node` on the developer portal](https://developers.cardano.org/docs/get-started/installing-cardano-node#macos) since Kupo share a similar set of dependencies.\n\n    #### Building\n\n    ```console\n    $ make\n    ```\n\n    # Getting Started\n\n    Kupo connects to a _local [cardano-node](https://github.com/input-output-hk/cardano-node/)_\n    in order to receive information from the blockchain. It goes without saying\n    that an up-and-running cardano-node (or an equivalent Ogmios connection) is\n    required to run Kupo!\n\n    A single Kupo server is meant to build an index for a specific set of outputs.\n    Outputs are matched according to flexible patterns. Once\n    matched, results can be queried as JSON via HTTP GET requests.  For\n    instance, it is possible to synchronize all addresses associated with a\n    given stake key (e.g.  `stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q`).\n\n    Provided that the configuration and IPC socket for a cardano-node are\n    available in `some-folder/cardano-node`, one can start a Kupo server as\n    follows:\n\n    ```console\n    $ kupo \\\n      --node-socket some-folder/cardano-node/node.socket \\\n      --node-config some-folder/cardano-node/config.json \\\n      --since origin \\\n      --defer-db-indexes \\\n      --match \"*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q\" \\\n      --in-memory\n    ```\n\n    #### --in-memory / --workdir \\\u003cdir\u003e\n\n    This will build an index from the beginning of the blockchain (i.e.`origin`)\n    of all transaction outputs where that stake key has been involved in. The\n    `--in-memory` option tells Kupo to not persist the index on-disk but to\n    build it fully in-memory. When building such a large index (from origin!),\n    this is not recommended as it may cause the program memory usage to grow\n    unbounded.\n\n    Let's fix that:\n\n    ```console\n    $ kupo \\\n      --node-socket some-folder/cardano-node/node.socket \\\n      --node-config some-folder/cardano-node/config.json \\\n      --since origin \\\n      --defer-db-indexes \\\n      --match \"*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q\" \\\n      --workdir ./db\n    ```\n\n    Perfect, now Kupo will store all the information in a database on-disk at\n    the location pointed by `--workdir`. Incidentally, this also allows Kupo to\n    resume its work from where it lefts it in case the server is interrupted.\n    Neat!\n\n    #### --since \\\u003cslot-no.header_hash\u003e\n\n    What if we only need to synchronize from a given point in time? For\n    example, we may want to skip the entire Byron and Shelley eras because we\n    know that this stake key may only have been used starting from the Allegra\n    era onwards.  Fortunately, we can use the `--since` to provide a different\n    starting point!\n\n    ```console\n    $ kupo \\\n      --node-socket some-folder/cardano-node/node.socket \\\n      --node-config some-folder/cardano-node/config.json \\\n      --since 16588737.4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a \\\n      --defer-db-indexes \\\n      --match \"*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q\" \\\n      --workdir ./db\n    ```\n\n    Points are given as `{slot_no}.{header_hash}` and define an exclusive\n    boundary. Said differently, Kupo will start synchronizing from the **next**\n    block **following the given point**. In case you need them, see the section\n    [#era-boundaries] which references points at which era ends for mainnet and\n    testnet; useful to start syncing from a specific era.\n\n    #### --match \\\u003cpattern\u003e\n\n    Kupo can accept one or more matching patterns using the `--match` option.\n    In case multiple patterns are provided, they'll ALL be used when looking\n    for addresses. This allows for example to build an index for a list of\n    payment keys known of a wallet. The syntax for patterns is explained in\n    greater details in the [Patterns](#section/Patterns) section below.\n\n    #### --defer-db-indexes\n\n    The careful reader that you are would have noticed the `--defer-db-indexes`\n    flag that we've been passing around. This is a little trick to speed up the\n    initial indexer synchronization. Indeed, when synchronizing over large chunks\n    of the chain, Kupo needs to ingest and filter a lot of data. Later, to serve\n    this data back through structured queries, Kupo leverages fast lookup indexes\n    in the database. Yet, lookup indexes come with a little extra cost for writing\n    stuff into the database.\n\n    Deferring the creation of indexes only to when you'll need to query therefore\n    comes in handy and can reduce overall synchronization time by a factor of 2 or\n    3. The creation of each index is relatively fast (few seconds to a couple of\n    minutes) and can therefore happen only after a full synchronization by restarting\n    Kupo without the `--defer-db-indexes` flag.\n\n    #### --prune-utxo\n\n    Sometimes, it isn't necessary to keep old data around. Fear not, Kupo has\n    got you covered! Using the `--prune-utxo` command-line flag, you can\n    instrument Kupo to automatically remove inputs that are spent on-chain.\n\n    This makes sure to keep only what's truly available on-chain and has a\n    positive effect on both the final size of the index and the synchronization\n    time. If you don't set that flag, then all data are kept in the database\n    and spent inputs are instead marked to know if and when they were spent.\n\n    Note that spent inputs aren't removed immediately but only after _at least_\n    36h (or 2160 guaranteed blocks). This is because data on-chain only becomes\n    truly immutable after 2160 blocks (though it is stable with a high probability\n    much before that).\n\n    You can then use query flags in the API (`?spent` or `?unspent`) to filter\n    results based on whether or not they've been spent.\n\n    #### --ogmios-host \\\u003chostname\u003e / --ogmios-port \\\u003cport-number\u003e\n\n    So far, we've connected Kupo to a local cardano-node, using a unix domain\n    socket as a communication channel. However, Kupo can also connect through\n    [Ogmios](https://github.com/CardanoSolutions/ogmios#readme); and this works\n    for either a local or remote instance of Ogmios! To do so, simply swap the\n    `--node-socket` and `--node-config` options for `--ogmios-host` and\n    `--ogmios-port`.\n\n    For example:\n\n    ```console\n    $ kupo \\\n      --ogmios-host my-ogmios-server.io \\\n      --ogmios-port 443 \\\n      --since 16588737.4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a \\\n      --match \"*/stake_vkh14hkp0sncfkt76spuqydtww4r900hfmsseezztzlh9sjkkjx6d7q\" \\\n      --workdir ./db\n    ```\n\n    Kupo will synchronize data directly from Ogmios! Neat isn't it?\n\n    #### --help\n\n    In case you're lost, don't forget that a summary of this manual is available by running:\n\n    ```console\n    $ kupo --help\n    ```\n\n    Should you have installed Kupo using the pre-packaged archive from releases, you should also have\n    access to the user manual through\n\n    ```console\n    $ man kupo\n    ```\n\n    # Patterns\n\n    Kupo can construct patterns from pretty much every constituant of an\n    address, an asset id or an output reference, in any kind of format\n    (bech32, base16, base58, you name it!).\n\n    It also accepts wildcards using the asterisk symbol `*` in certain places.\n    Conceptually, patterns match the logical structure of addresses, asset ids\n    or output references. Each are divided in two parts:\n\n    - for addresses: a payment part and a delegation part, separated by a `/`;\n    - for asset ids: a policy id and an asset name, separated by a `.`;\n    - for output references: an output index and a transaction id, separated by a `@`\n\n    \u003e **Note**\n    \u003e\n    \u003e To learn more about Cardano addresses, feel free to look [CIP-0019](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0019#readme)\n    for a deep dive!\n\n    Here below is summarized the general syntax for valid patterns. Note that\n    different patterns may match the same object. By convention `*` will match\n    _any Cardano address (Byron included)_, whereby `*/*` will match only\n    Shelley-based addresses (since legacy Byron addresses do not have any\n    delegation part!).\n\n    ```\n    PATTERN =\n\n           ┏━━━━━━━━━┓\n        ╾┬─┫ ADDRESS ┣───────────────────────────────┬╼\n         │ ┗━━━━━━━━━┛                               │\n         │ ┏━━━━━━━━━━━━┓   ╭───╮ ┏━━━━━━━━━━━━┓     │\n         ├─┫ CREDENTIAL ┣───┤ / ├─┫ CREDENTIAL ┣─────┤\n         │ ┗━━━━━━━━━━━━┛   ╰───╯ ┗━━━━━━━━━━━━┛     │\n         │ ┏━━━━━━━━━━━┓    ╭───╮ ┏━━━━━━━━━━━━┓     │\n         ├─┫ POLICY_ID ┣────┤ . ├─┫ ASSET_NAME ┣─────┤\n         │ ┗━━━━━━━━━━━┛    ╰───╯ ┗━━━━━━━━━━━━┛     │\n         │ ┏━━━━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━━━━━┓ │\n         └─┫ OUTPUT_INDEX ┣─┤ @ ├─┫ TRANSACTION_ID ┣─┘\n           ┗━━━━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━━━━━┛\n    ```\n\n    ```\n    ADDRESS =\n\n           ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n        ╾┬─┫ ADDRESS OR LEGACY ADDRESS ┣─────────────┬╼\n         │ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛             │\n         │ ┏━━━━━━━━━━━━━━━┓                         │\n         ├─┫ STAKE ADDRESS ┣─────────────────────────┤\n         │ ┗━━━━━━━━━━━━━━━┛                         │\n         │ ╭───╮                                     │\n         └─┤ * ├─────────────────────────────────────┘\n           ╰───╯\n    ```\n\n    ```\n    CREDENTIAL =\n\n           ┏━━━━━━━━━━━┓\n        ╾┬─┫ 64 HEXDIG ┣───────────────────────────────────────────┬╼\n         │ ┗━━━━━━━━━━━┛                                           │\n         │ ┏━━━━━━━━━━━━━━━━━━━━━━━━━┓              ┏━━━━━━━━━━━━┓ │\n         ├─┫ vk / addr_vk / stake_vk ┣──────────────┫ *BECH32DIG ┣─┤\n         │ ┗━━━━━━━━━━━━━━━━━━━━━━━━━┛              ┗━━━━━━━━━━━━┛ │\n         │ ┏━━━━━━━━━━━┓                                           │\n         ├─┫ 56 HEXDIG ┣───────────────────────────────────────────┤\n         │ ┗━━━━━━━━━━━┛                                           │\n         │ ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓  ┏━━━━━━━━━━━━┓ │\n         ├─┫ vkh / addr_vkh / stake_vkh / script ┣──┫ *BECH32DIG ┣─┤\n         │ ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛  ┗━━━━━━━━━━━━┛ │\n         │ ╭───╮                                                   │\n         └─┤ * ├───────────────────────────────────────────────────┘\n           ╰───╯\n\n    BECH32DIG = %x61 / %x63-68 / %x6A-6E / %x70-7A / 0-9\n    ```\n\n    ```\n    POLICY_ID =                             ASSET_NAME =\n\n           ┏━━━━━━━━━━━┓                           ┏━━━━━━━━━━━━━┓\n        ╾┬─┫ 56 HEXDIG ┣─┬╼                     ╾┬─┫ 0*64 HEXDIG ┣─┬╼\n         │ ┗━━━━━━━━━━━┛ │                       │ ┗━━━━━━━━━━━━━┛ │\n         │ ╭───╮         │                       │ ╭───╮           │\n         └─┤ * ├─────────┘                       └─┤ * ├───────────┘\n           ╰───╯                                   ╰───╯\n    ```\n\n    ```\n    OUTPUT_INDEX =                          TRANSACTION_ID =\n\n           ┏━━━━━━━━━━━┓                          ┏━━━━━━━━━━━┓\n        ╾┬─┫ 1*3 DIGIT ┣─┬╼                     ╾─┫ 64 HEXDIG ┣─╼\n         │ ┗━━━━━━━━━━━┛ │                        ┗━━━━━━━━━━━┛\n         │ ╭───╮         │\n         └─┤ * ├─────────┘\n           ╰───╯\n    ```\n\n    ```\n    HEXDIG = %x30–39 / %x41-%46\n    ```\n\n    ### Examples:\n\n    | Pattern                                                                    | Description                                                           |\n    | ---                                                                        | ---                                                                   |\n    | `*`                                                                        | Any output (incl. to legacy addresses)                                |\n    | `*/*`                                                                      | Any output to a Shelley-based address                                 |\n    | `addr1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgz4xq9p`               | Outputs to a specific address                                         |\n    | `stake1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgydsx9n`              | Outputs whose address is delegated to a specific stake address        |\n    | `addr_vk1x7da0l25j04my8sej5ntrgdn38wmshxhplxdfjskn07ufavsgtkqn5hljl/*`     | Outputs whose address carries a specific payment key (bech32 encoded) |\n    | `dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e/*`       | Outputs whose address carries a specific payment key (hex encoded)    |\n    | `*/script1cda3khwqv60360rp5m7akt50m6ttapacs8rqhn5w342z7r35m37`             | Outputs whose stake is governed by a specific script                  |\n    | `dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e.*`       | Outputs that contains a token from a specific policy                  |\n    | `dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e.TOKNAME` | Outputs that contains a specific token (any quantity)                 |\n    | `*@dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e`       | Outputs from a specific transaction                                   |\n\n    # Accessing Results\n\n    Matches can be queried from the server via HTTP GET requests. For example:\n\n    ```console\n    $ curl http://localhost:1442/matches\n    ```\n\n    will return all matches currently present in the database (be careful when\n    combined with very permissive patterns and wildcards!). The `/matches`\n    endpoint actually accept patterns, which may be different from the one\n    provided in the command-line. So it for instance possible to build an index\n    for all addresses but then, lookup only a single address as:\n\n    ```console\n    $ curl http://localhost:1442/matches/addr1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgz4xq9p\n    ```\n\n    Optionally, you can query only `unspent` or `spent` results using the respective query flags:\n\n    ```console\n    $ curl http://localhost:1442/matches/*/*?unspent\n    ```\n\n    The complete API reference is available below.\n\n    # Era Boundaries\n\n    ### Mainnet\n\n    | Era Bound          | SlotNo   | Hash                                                             |\n    | ---                | ---      | ---                                                              |\n    | Last Byron Block   | 4492799  | f8084c61b6a238acec985b59310b6ecec49c0ab8352249afd7268da5cff2a457 |\n    | Last Shelley Block | 16588737 | 4e9bbbb67e3ae262133d94c3da5bffce7b1127fc436e7433b87668dba34c354a |\n    | Last Allegra Block | 23068793 | 69c44ac1dda2ec74646e4223bc804d9126f719b1c245dadc2ad65e8de1b276d7 |\n    | Last Mary Block    | 39916796 | e72579ff89dc9ed325b723a33624b596c08141c7bd573ecfff56a1f7229e4d09 |\n    | Last Alonzo Block  | N/A      | N/A                                                              |\n\n    ### Testnet\n\n    | Era Bound          | SlotNo   | Hash                                                             |\n    | ---                | ---      | ---                                                              |\n    | Last Byron block   | 1598399  | 7e16781b40ebf8b6da18f7b5e8ade855d6738095ef2f1c58c77e88b6e45997a4 |\n    | Last Shelley block | 13694363 | b596f9739b647ab5af901c8fc6f75791e262b0aeba81994a1d622543459734f2 |\n    | Last Allegra block | 18014387 | 9914c8da22a833a777d8fc1f735d2dbba70b99f15d765b6c6ee45fe322d92d93 |\n    | Last Mary block    | 36158304 | 2b95ce628d36c3f8f37a32c2942b48e4f9295ccfe8190bcbc1f012e1e97c79eb |\n    | Last Alonzo block  | 62510369 | d931221f9bc4cae34de422d9f4281a2b0344e86aac6b31eb54e2ee90f44a09b9 |\n    | Last Babbage Block | N/A      | N/A                                                              |\n\n\n    \u003cbr/\u003e\u003cbr/\u003e\n\n    \u003cdiv align=\"center\"\u003e\n    \u003cpre style=\"background: none; border: none; color: inherit; display: inline-block; text-align: left;\"\u003e\n               ●\n            /\\__\\__/\\\n           /✿        \\\n        \\ (ﾐ  ⌒ ● ⌒  ﾐ) つ ━✫ ✧･ﾟ* KUPO! *:･ﾟ✧*:･ﾟ💖\n      \u003c/pre\u003e\n    \u003c/div\u003e\n\ncomponents:\n  headers: \u0026default-headers\n    Content-Type:\n      schema:\n        type: string\n        enum:\n          - \"application/json;charset=utf-8\"\n\n    X-Most-Recent-Checkpoint:\n      description: |\n        Kupo's most recent indexed checkpoint's slot number. This allows to know which slot a query is accurate of.\n      schema:\n        type: integer\n        minimum: 0\n\n  schemas:\n    Address_Shelley: \u0026Address_Shelley\n      title: Shelley\n      oneOf:\n        - title: bech32\n          type: string\n          contentEncoding: bech32\n          description: A standard payment address, in bech32 (i.e. starting with `addr|addr_test`).\n          example: addr1vy3qpx09uscywhpp0ekg9zwmq2yj5vp08husfq6qyh2mpps865j6t\n        - title: base16\n          type: string\n          contentEncoding: base16\n          description: A standard payment address, in base16\n          example: 7a5e61936081db3b2117cbf59bd2123748f58ac96786567067f3314661\n\n    Address_Stake: \u0026Address_Stake\n      title: Stake\n      oneOf:\n        - title: bech32\n          type: string\n          contentEncoding: bech32\n          description: A stake address, in bech32 (i.e. starting with `stake|stake_test`).\n          example: stake1vyc29pvl2uyzqt8nwxrcxnf558ffm27u3d9calxn8tdudjgydsx9n\n        - title: base16\n          type: string\n          contentEncoding: bech32\n          description: A stake address, in base16.\n          example: 7a5e61936081db3b2117cbf59bd2123748f58ac96786567067f3314661\n\n    Address_Bootstrap: \u0026Address_Bootstrap\n      title: Bootstrap\n      oneOf:\n        - title: base58\n          description: A Bootstrap (a.k.a Byron) address (legacy), in base58.\n          type: string\n          contentEncoding: base58\n          example: DdzFFzCqrhsnWCKDVxHipmLW7acroB11zWxe1BGP1gCh7EqmgjVPe2qes6HrsQs\n        - title: base16\n          description: A Bootstrap (a.k.a Byron) address (legacy), in base16.\n          type: string\n          contentEncoding: base16\n          example: 73b81dc65c31ab02195bb9264982233513cabc14df8ff07ed7c55cc326833753a5c23b10ef4121f1757cdf3c0038\n\n    Address_Credentials: \u0026Address_Credentials\n      type: string\n      title: Credentials\n      description: |\n        ```\n          ┏━━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━┓\n        ╾─┫ CREDENTIAL ┣─┤ / ├─┫ CREDENTIAL ┣─╼\n          ┗━━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━┛\n        ```\n\n        One or two address credentials, separated by a `/`. The left-side identifies the payment\n        part of the address, and the right-side identifies the delegation part. Both are optional\n        an can be instead a wildcard (`*`).\n\n        Examples:\n        - `addr_vk1x7da0l25j04my8sej5ntrgdn38wmshxhplxdfjskn07ufavsgtkqn5hljl/*`\n        - `*/script1cda3khwqv60360rp5m7akt50m6ttapacs8rqhn5w342z7r35m37`\n        - `dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e/*`\n        - `*/4fc6bb0c93780ad706425d9f7dc1d3c5e3ddbf29ba8486dce904a5fc`\n        - `*/*`\n      examples:\n      - \"addr_vk1x7da0l25j04my8sej5ntrgdn38wmshxhplxdfjskn07ufavsgtkqn5hljl/*\"\n      - \"*/script1cda3khwqv60360rp5m7akt50m6ttapacs8rqhn5w342z7r35m37\"\n      - \"dca1e44765b9f80c8b18105e17de90d4a07e4d5a83de533e53fee32e0502d17e/*\"\n      - \"*/4fc6bb0c93780ad706425d9f7dc1d3c5e3ddbf29ba8486dce904a5fc\"\n      - \"*/*\"\n\n    Address:\n      description: A Cardano address, in any era.\n      anyOf:\n        - \u003c\u003c: *Address_Shelley\n        - \u003c\u003c: *Address_Bootstrap\n\n    AddressPattern:\n      title: Address\n      description: A Cardano address or stake address.\n      anyOf:\n        - \u003c\u003c: *Address_Credentials\n        - \u003c\u003c: *Address_Shelley\n        - \u003c\u003c: *Address_Stake\n        - \u003c\u003c: *Address_Bootstrap\n\n    AssetIdPattern:\n      type: string\n      title: AssetId\n      pattern: \"[0-9a-f]{56}\\\\.(*|[0-9a-f]{2,64})\"\n      description: |\n        ```\n          ┏━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━┓\n        ╾─┫ POLICY_ID ┣─┤ . ├─┫ ASSET_NAME ┣─╼\n          ┗━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━┛\n        ```\n\n        A policy id (base16-encoded) and an optional asset name (base16-encoded), dot-separated.\n\n        Examples:\n        - `1220099e5e430475c219518179efc7e6c8289db028904834025d5b086.*`\n        - `1220099e5e430475c219518179efc7e6c8289db028904834025d5b086.08661220099e`\n      examples:\n        - \"1220099e5e430475c219518179efc7e6c8289db028904834025d5b086.*\"\n        - \"1220099e5e430475c219518179efc7e6c8289db028904834025d5b086.08661220099e\"\n\n    BadRequest:\n      type: object\n      additionalProperties: false\n      properties:\n        hint:\n          type: string\n          description: Some hint about what went wrong.\n\n    Datum:\n      title: Datum\n      type: object\n      required:\n        - datum\n      additionalProperties: false\n      properties:\n        datum:\n          type: string\n          description: A serialized Plutus' datum.\n          contentEncoding: base16\n          example: d87980\n\n    DatumHash:\n      description: A blake2b-256 hash digest of a Plutus' datum, if any.\n      oneOf:\n        - title: Digest\n          type: string\n          description: A blake2b-256 hash digest of a Plutus' datum.\n          contentEncoding: base16\n          example: 3097...b635\n          minLength: 64\n          maxLength: 64\n        - title: Nothing\n          description: N/A\n          type: \"null\"\n\n    Deleted:\n      type: object\n      required:\n        - deleted\n      properties:\n        deleted:\n          description: Number of entities effectively deleted.\n          type: integer\n          minimum: 0\n\n    ForcedRollback:\n      type: object\n      additionalProperties: false\n      required:\n        - rollback_to\n      properties:\n        rollback_to:\n          type: object\n          required:\n            - slot_no\n          description: |\n            A mandatory point to rollback the synchronization to.\n            Note that the synchronization will therefore begin starting from the point **immediately after** the provided point!\n\n            \u003e \u003csup\u003e\u003cstrong\u003eNOTE (1)\u003c/strong\u003e\u003c/sup\u003e \u003cbr/\u003e\n            \u003e If you need to query ancestors from any given known point, see [GET /checkpoints/{slot-no}](http://localhost:8000/#operation/getCheckpointBySlot)\n\n            \u003e \u003csup\u003e\u003cstrong\u003eNOTE (2)\u003c/strong\u003e\u003c/sup\u003e \u003cbr/\u003e\n            \u003e The `header_hash` is **optional**! However if provided, Kupo will check that it rolls back exactly to the specified point by comparing header hashes.\n          properties:\n            slot_no:\n              $ref: \"#/components/schemas/SlotNo\"\n            header_hash:\n              $ref: \"#/components/schemas/HeaderHash\"\n        limit:\n          type: string\n          description: |\n            Specify the server behavior when rolling back out of the _safe\n            zone_. As mentioned in the user manual, when running Kupo with\n            `--prune-utxo` enabled, the server gets rid of spent UTxOs, but it\n            only does so after a certain time. That time is exactly `129600`\n            slots (or 36h on Mainnet/Testnet). This is because the core\n            protocol cannot roll back further than this particular depth and it\n            is the point after which it is 100% safe to remove data from the\n            database.\n\n            However, this endpoint allows you to break this invariant and\n            rollback to points that are even older in the past. As a\n            consequence, while syncing, the index may be in a somewhat\n            inconsistent state because some inputs spent at a later time may\n            not have been recovered during the rollback. This may be surprising\n            if you're expecting to see and query those transient inputs after\n            rolling back.\n\n            By default, you won't be allowed to rollback beyond the safe zone.\n            If, however, you know what you're doing, you're kindly asked to\n            pass `unsafe_allow_beyond_safe_zone` as a token of acknowledgment.\n            Passing `within_safe_zone` has no effects other than the default.\n\n            Note that, once synchronized again, the index will always be in the\n            expected state and problems reflecting reality only occurs _while\n            catching up_, after a long rollback.\n          default: within_safe_zone\n          enum:\n          - unsafe_allow_beyond_safe_zone\n          - within_safe_zone\n\n    HeaderHash: \u0026HeaderHash\n      type: string\n      description: A blake2b-256 hash digest of a block header.\n      contentEncoding: base16\n      example: 9d09...31bf\n      minLength: 64\n      maxLength: 64\n\n    Metadata:\n      type: object\n      additionalProperties: false\n      required:\n        - hash\n        - schema\n        - raw\n      properties:\n        hash:\n          type: string\n          description: A blake2b-256 hash digest of the raw serialized data\n          contentEncoding: base16\n          example: cd6a5d31bf9d309706b92ad83402e682fdab9fc889b1b63565ee3de14e09dedf\n          minLength: 64\n          maxLength: 64\n\n        raw:\n          type: string\n          description: A [CBOR](https://www.rfc-editor.org/rfc/rfc8949.html)-encoded binary payload.\n          contentEncoding: base16\n\n        schema:\n          type: object\n          description: |\n            A high-level description of the raw data. The top-level object is an object where all keys are integers (possibly negative) and points to objects representing one of 5 primitives:\n\n            - int\n            - string\n            - bytes\n            - list\n            - map\n\n            This schema is meant to give a faithful representation of the underlying [CBOR](https://www.rfc-editor.org/rfc/rfc8949.html) encoding, which is slightly more expressive than pure JSON (e.g. keys of maps can be arbitrary CBOR objects).\n\n            This is why it is generally not possible to ensure a 1:1 conversion between low-level CBOR and JSON, and why this intermediate representation is necessary to safely represent **any** metadata object.\n          propertyNames:\n            type: integer\n          additionalProperties:\n            x-additionalPropertiesName: \"label (integer)\"\n            $ref: \"#/components/schemas/Metadatum\"\n          example:\n            {\n              \"64\": {\"string\": \"some text\"},\n              \"32\": {\"int\": 42},\n              \"16\": {\n                \"map\": [\n                  {\n                    \"k\": {\"string\": \"numbers\"},\n                    \"v\": {\"list\": [{\"int\": 1}, {\"int\": 2}, {\"int\": 4}, {\"int\": 8}]}\n                  },\n                  {\n                    \"k\": {\"string\": \"alphabet\"},\n                    \"v\": {\n                      \"map\": [\n                        {\"k\": {\"string\": \"A\"}, \"v\": {\"int\": 65}},\n                        {\"k\": {\"string\": \"B\"}, \"v\": {\"int\": 66}},\n                        {\"k\": {\"string\": \"C\"}, \"v\": {\"int\": 67}}\n                      ]\n                    }\n                  }\n                ]\n              },\n              \"-8\": { \"bytes\": \"48656c6c6f2c2043617264616e6f21\" }\n            }\n\n    Metadatum:\n      oneOf:\n        - $ref: \"#/components/schemas/Metadatum_Int\"\n        - $ref: \"#/components/schemas/Metadatum_String\"\n        - $ref: \"#/components/schemas/Metadatum_Bytes\"\n        - $ref: \"#/components/schemas/Metadatum_List\"\n        - $ref: \"#/components/schemas/Metadatum_Map\"\n\n    Metadatum_Int:\n      title: int\n      type: object\n      additionalProperties: false\n      required:\n        - int\n      properties:\n        int:\n          type: integer\n          description: |\n            An integer or arbitrary size.\n\n            Example:\n\n            ```json\n            { \"int\": 42 }\n            ```\n\n    Metadatum_String:\n      title: string\n      type: object\n      additionalProperties: false\n      required:\n        - string\n      properties:\n        string:\n          type: string\n          contentEncoding: utf-8\n          maxLength: 64\n          description: |\n            A text string, which is at most 64 bytes.\n\n            Example:\n\n            ```json\n            { \"string\": \"kupo!\" }\n            ```\n\n    Metadatum_Bytes:\n      title: bytes\n      type: object\n      additionalProperties: false\n      required:\n        - bytes\n      properties:\n        bytes:\n          type: string\n          contentEncoding: base16\n          maxLength: 128\n          description: |\n            A base16 byte string, which is at most 64 bytes\n\n            Example:\n\n            ```json\n            { \"bytes\": \"6b75706f21\" }\n            ```\n\n    Metadatum_List:\n      title: list\n      type: object\n      additionalProperties: false\n      required:\n        - list\n      properties:\n        list:\n          type: array\n          additionalItems: false\n          items:\n            $ref: \"#/components/schemas/Metadatum\"\n          description: |\n            A (possibly heterogeneous) list of metadatum\n\n            Example:\n\n            ```json\n            {\n              \"list\": [\n                {\n                  \"int\": 14\n                },\n                {\n                  \"list\": [\n                    { \"string\": \"kupo!\" },\n                    { \"bytes\": \"6b75706f21\" }\n                  ]\n                }\n              ]\n            }\n            ```\n\n    Metadatum_Map:\n      title: map\n      type: object\n      additionalProperties: false\n      required:\n        - map\n      properties:\n        map:\n          type: array\n          items:\n            type: object\n            additionalItems: false\n            required:\n              - k\n              - v\n            properties:\n              k:\n                $ref: \"#/components/schemas/Metadatum\"\n              v:\n                $ref: \"#/components/schemas/Metadatum\"\n          description: |\n            A list of key:value objects. Both keys and values can be any sort metadatum.\n\n            Example:\n\n            ```json\n            {\n              \"map\": [\n                {\n                  \"k\": { \"int\": 14 },\n                  \"v\": {\n                    \"list\": [\n                      { \"string\": \"kupo!\" },\n                      { \"bytes\": \"6b75706f21\" }\n                    ]\n                  }\n                }\n              ]\n            }\n            ```\n\n    OutputIndex:\n      type: integer\n      description: The index of the output within the transaction carrying it.\n      minimum: 0\n      example: 2\n\n    OutputReferencePattern:\n      title: OutputReference\n      type: string\n      pattern: (*|[0-9]+)@[0-9a-f]{64}\n      description: |\n        ```\n          ┏━━━━━━━━━━━━━━┓ ╭───╮ ┏━━━━━━━━━━━━━━━━┓\n        ╾─┫ OUTPUT_INDEX ┣─┤ @ ├─┫ TRANSACTION_ID ┣─╼\n          ┗━━━━━━━━━━━━━━┛ ╰───╯ ┗━━━━━━━━━━━━━━━━┛\n        ```\n\n        An (optional) output index and transaction id (base16-encoded), separated by a `@`.\n\n        Examples:\n          - `42@35d8340cd6a5d31bf9d09706b92adedf9b1b632e682fdab9fc8865ee3de14e09`\n          - `*@35d8340cd6a5d31bf9d09706b92adedf9b1b632e682fdab9fc8865ee3de14e09`\n      examples:\n        - \"42@35d8340cd6a5d31bf9d09706b92adedf9b1b632e682fdab9fc8865ee3de14e09\"\n        - \"*@35d8340cd6a5d31bf9d09706b92adedf9b1b632e682fdab9fc8865ee3de14e09\"\n\n    Pattern:\n      description: |\n          A matching pattern for addresses, assets or transactions.\n\n          See [Patterns](#section/Patterns) for more details.\n      title:\n      anyOf:\n        - $ref: \"#/components/schemas/Wildcard\"\n        - $ref: \"#/components/schemas/AddressPattern\"\n        - $ref: \"#/components/schemas/AssetIdPattern\"\n        - $ref: \"#/components/schemas/OutputReferencePattern\"\n\n    Point: \u0026Point\n      title: Point\n      type: object\n      additionalProperties: false\n      required:\n        - slot_no\n        - header_hash\n      properties:\n        slot_no:\n          $ref: \"#/components/schemas/SlotNo\"\n        header_hash:\n          $ref: \"#/components/schemas/HeaderHash\"\n\n    Script:\n      title: Script\n      type: object\n      required:\n        - script\n        - language\n      additionalProperties: false\n      properties:\n        language:\n          type: string\n          description: The type of script. `native` refers to pre-Alonzo scripts made of the native DSL to combine keys.\n          enum:\n            - native\n            - 'plutus:v1'\n            - 'plutus:v2'\n        script:\n          type: string\n          description: A serialized script (native or Plutus).\n          contentEncoding: base16\n          example: 4d01000033222220051200120011\n      examples:\n        - language: 'native'\n          script: 8201838200581c3c07030e36bfffe67e2e2ec09e5293d384637cd2f004356ef320f3fe8204186482051896\n        - language: 'plutus:v1'\n          script: 4d01000033222220051200120011\n\n    ScriptHash:\n      description: A blake2b-224 hash digest of a Native or Plutus script, if any.\n      oneOf:\n        - title: Digest\n          description: A blake2b-224 hash digest of a Native or Plutus script.\n          type: string\n          contentEncoding: base16\n          example: 3097...9ded\n          minLength: 56\n          maxLength: 56\n        - title: Nothing\n          description: N/A\n          type: \"null\"\n\n    SlotNo: \u0026slotNo\n      type: integer\n      description: An absolut slot number.\n      minimum: 0\n      example: 51540727\n\n    TransactionId:\n      type: string\n      description: A blake2b-256 hash digest of a transaction body.\n      contentEncoding: base16\n      example: 35d8...4e09\n      minLength: 64\n      maxLength: 64\n\n    TransactionIndex:\n      type: integer\n      description: The index of the transaction within the block including it.\n      minimum: 0\n      example: 14\n\n    Value:\n      type: object\n      description: A (multi-asset) value of a transaction's output.\n      additionalProperties: false\n      required:\n        - coins\n      properties:\n        coins:\n          type: integer\n          description: A quantity of Lovelace.\n          example: 42\n        assets:\n          type: object\n          description: A _key:value_ map of asset identifier → quantity.\n          propertyNames:\n            type: string\n            pattern: ^[a-f0-9]{56}(.[a-f0-9]{2,64})?$\n          additionalProperties:\n            x-additionalPropertiesName: \"{policy-id}.{asset-name}\"\n            type: integer\n            description: A quantity of some asset.\n          example:\n            1220099e5e430475c219518179efc7e6c8289db028904834025d5b086: 231\n            289db028904834025d5b085d5b08661220099e5e430475c2195181796.08661220099e: 1\n\n    Wildcard:\n      type: string\n      title: Wildcard\n      enum: [\"*\"]\n\n    Match:\n      type: object\n      additionalProperties: false\n      required:\n        - transaction_index\n        - transaction_id\n        - output_index\n        - address\n        - value\n        - datum_hash\n        - script_hash\n        - created_at\n        - spent_at\n      properties:\n        transaction_index:\n          $ref: \"#/components/schemas/TransactionIndex\"\n        transaction_id:\n          $ref: \"#/components/schemas/TransactionId\"\n        output_index:\n          $ref: \"#/components/schemas/OutputIndex\"\n        address:\n          $ref: \"#/components/schemas/Address\"\n        value:\n          $ref: \"#/components/schemas/Value\"\n        datum_hash:\n          $ref: \"#/components/schemas/DatumHash\"\n        script_hash:\n          $ref: \"#/components/schemas/ScriptHash\"\n        created_at:\n          \u003c\u003c: *Point\n          description: Block reference at which this transaction was included in the ledger.\n        spent_at:\n          description: Block reference at which this transaction input was spent, if any.\n          oneOf:\n            - $ref: \"#/components/schemas/Point\"\n            - type: \"null\"\n\n    Health:\n      type: object\n      description: An overview of the server \u0026 connection status. Note that, when `most_recent_checkpoint` and `most_recent_node_tip` are equal, the index is fully synchronized.\n      additionalProperties: false\n      required:\n        - connection_status\n        - most_recent_checkpoint\n        - most_recent_node_tip\n      properties:\n        connection_status:\n          type: string\n          description: Condition of the connection with the underlying node.\n          enum:\n            - connected\n            - disconnected\n        most_recent_checkpoint:\n          oneOf:\n            - \u003c\u003c: *slotNo\n              description: Absolute slot number of the most recent database checkpoint.\n            - type: \"null\"\n              description: Absolute slot number of the most recent database checkpoint.\n        most_recent_node_tip:\n          oneOf:\n            - \u003c\u003c: *slotNo\n              description: Absolute slot number of the current tip of the node.\n            - type: \"null\"\n              description: Absolute slot number of the current tip of the node.\n\n  parameters:\n    asset-name:\n      deprecated: true\n      name: asset_name\n      in: query\n      required: false\n      allowEmptyValue: false\n      schema:\n        type: string\n        contentEncoding: base16\n        pattern: ^[a-f0-9]{2,64}$\n      description: |\n        Use an explicit [Pattern](#section/Patterns) as _path-parameter_ instead.\n\n    datum-hash:\n      name: datum_hash\n      in: path\n      required: true\n      schema:\n        type: string\n        contentEncoding: base16\n        minLength: 64\n        maxLength: 64\n        pattern: ^[a-f0-9]{64}$\n        example: 3097...b635\n      description:\n        A datum blake2b-256 hash digest.\n\n    order:\n      name: order\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n          - most_recent_first\n          - oldest_first\n        description: |\n          Order results by their location on-chain. By default, most recent results are returned first (i.e. by descending `created_at.slot_no`).\n          Within a same slot, results are ordered in function of their position in the block (i.e. `transaction_index`).\n\n    pattern:\n      name: pattern\n      in: path\n      required: true\n      schema:\n        title: pattern\n        anyOf:\n          - $ref: \"#/components/schemas/Wildcard\"\n          - $ref: \"#/components/schemas/AddressPattern\"\n          - $ref: \"#/components/schemas/AssetIdPattern\"\n          - $ref: \"#/components/schemas/OutputReferencePattern\"\n      description: |\n        A matching pattern on addresses, assets or transactions.\n\n        See [Patterns](#section/Patterns) for more details.\n\n    policy-id:\n      deprecated: true\n      name: policy_id\n      in: query\n      required: false\n      allowEmptyValue: false\n      schema:\n        type: string\n        contentEncoding: base16\n        minLength: 56\n        maxLength: 56\n        pattern: ^[a-f0-9]{56}$\n      description: |\n        Use an explicit [Pattern](#section/Patterns) as _path-parameter_ instead.\n\n    script-hash:\n      name: script_hash\n      in: path\n      required: true\n      schema:\n        type: string\n        contentEncoding: base16\n        minLength: 56\n        maxLength: 56\n        pattern: ^[a-f0-9]{56}$\n        example: 3097...9ded\n      description:\n        A script blake2b-224 hash digest of a script.\n\n    slot-no:\n      name: slot_no\n      in: path\n      required: true\n      schema:\n        type: integer\n        minimum: 0\n\n    spent:\n      name: spent\n      in: query\n      required: false\n      allowEmptyValue: true\n      description: |\n        A query flag (i.e. `?spent`) to filter matches by status, to get only 'spent' matches.  Note that, when running kupo with `--prune-utxo`, this will always return an empty list of results.\n\n    strict:\n      name: strict\n      in: query\n      required: false\n      allowEmptyValue: true\n      description: |\n        A query flag (i.e. `?strict`) to only look for checkpoints that strictly match the provided slot. The behavior otherwise is to look for the largest nearest slot smaller or equal to the one provided.\n\n    transaction-id:\n      name: transaction_id\n      in: query\n      required: false\n      description: |\n        An optional transaction id to retrieve items associated with the transaction only.\n      schema:\n        $ref: \"#/components/schemas/TransactionId\"\n\n    unspent:\n      name: unspent\n      in: query\n      required: false\n      allowEmptyValue: true\n      description: |\n        A query flag (i.e. `?unspent`) filter matches by status, to get only 'unspent' matches.\n\ntags:\n  - name: Matches\n    description: |\n      Accessing results matched by a certain configuration. Results can be retrieve using **any** pattern (and not only those defined in configuration). So it is possible for example to\n      index data using quite wide patterns (e.g. `*`) but only query a single address later on.\n  - name: Checkpoints\n    description: |\n      An API for inspecting checkpoints known of the database. A checkpoint really is a point on-chain that directly references a block. They are comprised of an absolute slot\n      number and a block header hash. Kupo records all such points as it processes blocks. In particular, they are also used to resume synchronization upon restart.\n  - name: Datums\n    description: |\n      Accessing datums indexed by the server. By default, the engine indexes **every** datum present in transaction witnesses and inline datums present in **matched** transaction outputs. However,\n      a periodic garbage collector will automatically remove datums that aren't associated to any matched output. Said differently, any datum hash present in a matched output can be queried (so long\n      as its datum has been seen on-chain one way or another). Other hashes _may_ work but aren't guaranteed.\n  - name: Scripts\n    description: |\n      Accessing scripts indexed by the server. By default, the engine indexes **every** script present in transaction witnesses and inline scripts present in **matched** transaction outputs. However,\n      a periodic garbage collector will automatically remove scripts that aren't associated to any matched output. Said differently, any script hash present in a matched output can be queried (so long\n      as its script has been seen on-chain one way or another). Other hashes _may_ work but aren't guaranteed.\n  - name: Metadata\n    description: |\n      Accessing metadata present in blocks/transactions. Unlike most other resources, metadata are **not** indexed by the server and are retrieved on-the-fly directly from the node. This is generally quite fast but likely not suitable for fetching large batches of metadata.\n  - name: Patterns\n    description: |\n      Dynamically managing the server's configuration. Note that modifying patterns after the server has started indexing may break the server's data integrity -- or more exactly, data completeness.\n      The server does not re-synchronize past blocks unless explicitly told so.\n  - name: Health\n    description: |\n      Monitoring endpoints to assess the server's health.\n\npaths:\n  /matches:\n    get:\n      operationId: getAllMatches\n      tags: [\"Matches\"]\n      summary: Get All Matches\n      description: |\n        Retrieve all matches from the database, in descending `slot_no` order. Results are streamed to the client for more efficiency.\n        Note that this is generally a bad idea for indexes built off permissive patterns (e.g. `*`) for the server will yield a large response.\n      parameters:\n        - $ref: \"#/components/parameters/spent\"\n        - $ref: \"#/components/parameters/unspent\"\n        - $ref: \"#/components/parameters/order\"\n        - $ref: \"#/components/parameters/policy-id\"\n        - $ref: \"#/components/parameters/asset-name\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Match\"\n\n  /matches/{pattern}:\n    get: \u0026getMatches\n      operationId: getMatches\n      tags: [\"Matches\"]\n      summary: Get Matches (*)\n      description: |\n        Retrieve matches from the database matching the given pattern, in descending `slot_no` order. Results are streamed to the client for more efficiency.\n        See [Patterns](#section/Patterns) for more information about constructing patterns.\n      parameters:\n        - $ref: \"#/components/parameters/pattern\"\n        - $ref: \"#/components/parameters/spent\"\n        - $ref: \"#/components/parameters/unspent\"\n        - $ref: \"#/components/parameters/order\"\n        - $ref: \"#/components/parameters/policy-id\"\n        - $ref: \"#/components/parameters/asset-name\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Match\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n    delete: \u0026deleteMatches\n      operationId: deleteMatches\n      tags: [\"Matches\"]\n      summary: Delete Matches (*)\n      description: |\n        Delete all matches matching the given pattern. Note that this operation is only allowed if the provided pattern isn't a currently active pattern.\n      parameters:\n        - $ref: \"#/components/parameters/pattern\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n  /datums/{datum-hash}:\n    get:\n      operationdId: getDatumByHash\n      tags: [\"Datums\"]\n      summary: Get Datum by Hash\n      description: |\n        Retrieve the datum pre-image (i.e. full resolved datum) associated to a given datum hash digest.\n      parameters:\n        - $ref: \"#/components/parameters/datum-hash\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Datum\"\n                  - title: Nothing\n                    type: \"null\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n  /scripts/{script-hash}:\n    get:\n      operationdId: getScriptByHash\n      tags: [\"Scripts\"]\n      summary: Get Script by Hash\n      description: |\n        Retrieve the raw script (i.e. full resolved script) associated to a given script hash digest.\n\n        \u003e \u003csup\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e\u003c/sup\u003e \u003cbr/\u003e\n        \u003e\n        \u003e Raw scripts aren't exact pre-image of their hash digest. Before hashing, scripts are prefixed with a\n        \u003e certain discriminator byte depending on the language. For instance, any native script is prefixed with\n        \u003e `00` before hashing.\n        \u003e\n        \u003e Here's a table summarizing all discriminators:\n        \u003e\n        \u003e | Language    | Discriminator Byte |\n        \u003e | ---         | ---                |\n        \u003e | `native`    | `00`               |\n        \u003e | `plutus:v1` | `01`               |\n        \u003e | `plutus:v2` | `02`               |\n      parameters:\n        - $ref: \"#/components/parameters/script-hash\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Script\"\n                  - title: Nothing\n                    type: \"null\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n  /patterns:\n    get:\n      operationId: getPatterns\n      tags: [\"Patterns\"]\n      summary: Get Patterns\n      description: |\n        Retrieve all patterns currently configured on the server.\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pattern\"\n\n    put: \u0026putPatterns\n      operationId: putPatterns\n      tags: [ \"Patterns\" ]\n      summary: Bulk Add Patterns\n      description: |\n        Add many patterns at once. See [Add Pattern (*)](#operation/putPattern) for more details.\n      requestBody:\n        content:\n          \"application/json;charset=utf-8\":\n            schema:\n              type: object\n              additionalProperties: false\n              required:\n                - patterns\n                - rollback_to\n              properties:\n                patterns:\n                  type: array\n                  description:\n                    A list of patterns on addresses, assets or transactions as described in [Patterns](#section/Patterns).\n                  items:\n                    $ref: \"#/components/schemas/Pattern\"\n                rollback_to:\n                    $ref: \"#/components/schemas/ForcedRollback/properties/rollback_to\"\n                limit:\n                    $ref: \"#/components/schemas/ForcedRollback/properties/limit\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pattern\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n  /patterns/{pattern}:\n    get: \u0026getPattern\n      operationId: matchPattern\n      tags: [\"Patterns\"]\n      summary: Get Pattern (*)\n      description: |\n        Retrieve all patterns that include\u003csup\u003e*\u003c/sup\u003e the provided pattern. Remember that an address is itself a pattern!\n        This endpoint is thereby useful to check is an address is matched by a given pattern configuration (the returned\n        list would be non-empty).\n\n        \u003e \u003csup\u003e\u003cstrong\u003e(*) Definition\u003c/strong\u003e\u003c/sup\u003e \u003cbr/\u003e\n        \u003e If all results matched by `y` are also matched by `x`, then `x` is said to include `y`.\n      parameters:\n        - $ref: \"#/components/parameters/pattern\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pattern\"\n\n    delete: \u0026deletePattern\n      operationId: deletePattern\n      tags: [\"Patterns\"]\n      summary: Delete Pattern (*)\n      description: |\n        Removes patterns from the database and active filtering. Note that this does\n        **NOT** remove the corresponding matches nor will it halt or restart synchronization.\n        The server will continue filtering new blocks but, will that pattern removed.\n      parameters:\n        - $ref: \"#/components/parameters/pattern\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/Deleted\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n    put: \u0026putPattern\n      operationId: putPattern\n      tags: [ \"Patterns\" ]\n      summary: Add Pattern (*)\n      description: |\n        Add a new pattern to watch and force the server to re-sync from a given point. Only blocks discovered from that point will be matched against the new pattern.\n\n        This endpoint may not be instantaneous as the forced rollback may only occur after the next block arrives in the indexer. On the main network, this takes usually\n        no more than 20 seconds. On test networks however where the block density tends to be much lower, this may take longer.\n\n        Note also that, very long rollback will take a substantial amount of time to be processed by the server; if the server is shut down while a rollback is ongoing, the\n        rollback will be aborted and the server will remain where it was, although with the extra pattern added.\n      parameters:\n        - $ref: \"#/components/parameters/pattern\"\n      requestBody:\n        content:\n          \"application/json;charset=utf-8\":\n            schema:\n              $ref: \"#/components/schemas/ForcedRollback\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pattern\"\n        400:\n          description: Bad Request\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/BadRequest\"\n\n  /checkpoints:\n    get:\n      operationId: sampleCheckpoints\n      tags: [\"Checkpoints\"]\n      summary: Sample Checkpoints\n      description: |\n        Retrieve a **sample of** all checkpoints currently in the database, in descending `slot_no` order.\n        This is useful to know where the synchronization is at. On restart, the synchronization will continue from the most recent\n        checkpoints that is also valid on the network.\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Point\"\n\n  /checkpoints/{slot-no}:\n    get:\n      operationId: getCheckpointBySlot\n      tags: [\"Checkpoints\"]\n      summary: Get Checkpoint By Slot\n      description: |\n        Retrieve a checkpoint by its (absolute) slot number. The query is flexible by default. Meaning that, if there's no checkpoint at the given slot, the server\n        will for for the closest (i.e. most recent) slot that is **before** the provided slot number. This is particularly useful to find ancestors to known slots\n        in order to use them for references on-chain.\n      parameters:\n        - $ref: \"#/components/parameters/slot-no\"\n        - $ref: \"#/components/parameters/strict\"\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/Point\"\n                  - type: \"null\"\n\n  /metadata/{slot-no}:\n    get:\n      operationId: getMetadataBySlot\n      tags: [\"Metadata\"]\n      summary: Get Metadata By Slot\n      description: |\n        Retrieve all metadata data seen in a block at the given slot, possibly filtered by transaction id.\n\n        Metadata are ordered according to their respective transaction's order in the block.\n      parameters:\n        - $ref: \"#/components/parameters/transaction-id\"\n      responses:\n        200:\n          description: OK\n          headers:\n            \u003c\u003c: *default-headers\n            X-Block-Header-Hash:\n              \u003c\u003c: *HeaderHash\n              description: |\n                The block's header hash digest (`blake2b-256`) of the corresponding block at the provided slot. Clients are expected to control that this hash matches the one they expect, especially when fetching metadata from blocks in the unstable region (i.e. less than `k=2160` blocks from the network tip). Indeed, Cardano is a distributed system after all and data isn't guaranteed to be immediately immutable. Data present in very recent blocks may therefore be different between two successive requests.\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Metadata\"\n\n  /health:\n    get:\n      operationId: getHealth\n      tags: [\"Health\"]\n      summary: Get Health\n      description: |\n        Retrieve Kupo's application health status. Note that this call is cheap and does not halt the various concurrent tasks performed by the Kupo.\n\n        This endpoint has two possible content-types: `application/json` or `text/plain`. The latter returns health in a format suitable for [Prometheus](https://prometheus.io/docs/introduction/overview/). The server defaults to `application/json`, but you can control this behavior by passing a corresponding `Accept` header.\n      responses:\n        200:\n          description: OK\n          headers: *default-headers\n          content:\n            \"application/json;charset=utf-8\":\n              schema:\n                $ref: \"#/components/schemas/Health\"\n\n            \"text/plain;charset=utf-8\":\n              schema:\n                type: string\n                description: |\n                  A key-value export compatible with Prometheus.\n\n                  `connected` and `disconnected` are encoded as `1.0` and `0.0` respectively.\n              examples:\n                response:\n                  value: |\n                    # TYPE kupo_connection_status gauge\n                    kupo_connection_status  1.0\n\n                    # TYPE kupo_most_recent_checkpoint counter\n                    kupo_most_recent_checkpoint  294998\n\n                    # TYPE kupo_most_recent_node_tip counter\n                    kupo_most_recent_node_tip  71753381\n",
			"canonicalURL": "/github.com/CardanoSolutions/kupo@4904123abeed53f672eb34e0ef10c6c710bda61b/-/blob/docs/api/v2.1.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CardanoSolutions/kupo/blob/4904123abeed53f672eb34e0ef10c6c710bda61b/docs/api/v2.1.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: parameters: \"strict\": at docs/api/v2.1.0.yaml:1158:7: parameter MUST contain either a schema property, or a content property"
}