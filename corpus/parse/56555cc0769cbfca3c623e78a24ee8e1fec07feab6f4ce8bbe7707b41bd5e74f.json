{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/blockchaindev91/angular-simple-site"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "SAKPaaS/openapi.yaml",
			"byteSize": 10749,
			"content": "openapi: 3.0.3\ninfo:\n  title: HappyHamster\n  description: HappyHamster\n  version: \"2.0\"\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - description: HappyHamster Production\n    url: https://api.HappyHamster.org/v2\n  - description: HappyHamster Integration\n    url: https://api.int.HappyHamster.org/v2\n  - description: HappyHamster Development\n    url: https://api.dev.HappyHamster.org/v2\npaths:\n  '/locations':\n    get:\n      tags:\n        - Locations\n      operationId: searchLocations\n      description: |\n        Searches for locations in the given range.\n      parameters:\n        - in: query\n          name: Coordinates\n          description: Latitude and Longitude\n          required: true\n          explode: true\n          schema:\n            $ref: '#/components/schemas/Coordinates'\n        - in: query\n          name: type\n          description: Location Type\n          required: false\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/LocationType'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Location'\n                maxItems: 100\n  '/locations/{id}':\n    get:\n      description: |\n        Get details for a specific location.\n      tags:\n        - Locations\n      parameters:\n        - in: path\n          name: id\n          description: id\n          required: true\n          schema:\n            $ref: '#/components/schemas/LocationId'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        '404':\n          description: Not found\n  '/locations/search/{query}':\n    get:\n      description: Returns the Coordinate and Locations around the 'Search Query'.\n      tags:\n        - Locations\n      parameters:\n        - in: query\n          name: Coordinates\n          description: Latitude and Longitude\n          required: false\n          explode: true\n          schema:\n            $ref: '#/components/schemas/Coordinates'\n        - in: path\n          name: query\n          description: Search query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LocationSearchResult'\n        '400':\n          description: Bad Request\n        '404':\n          description: Not found\n  '/locations/{id}/occupancy':\n    post:\n      description: |\n        Add or remove current capacity.\n      tags:\n        - Occupancy\n      parameters:\n        - in: path\n          name: id\n          description: id of the place\n          required: true\n          schema:\n            $ref: '#/components/schemas/LocationId'\n      requestBody:\n        description: The estimated occupancy by the buyer\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OccupancyReport'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        '400':\n          description: Malformed request\n\n  '/locations/types':\n    get:\n      description: Location Types\n      tags:\n        - Location Types\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LocationType'\n\n  '/users/self/favorites':\n    get:\n      description: List all favorite locations for the currently logged in user.\n      tags:\n        - \"User: Favorites\"\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Location'\n        '401':\n          description: \"Unauthorized: Not logged in\"\n  '/users/self/favorites/{id}':\n    post:\n      operationId: addFavorite\n      description: Add a favorite by location id for the currently logged in user.\n      tags:\n        - \"User: Favorites\"\n      parameters:\n        - in: path\n          name: id\n          description: id of the location\n          required: true\n          schema:\n            $ref: '#/components/schemas/LocationId'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        '400':\n          description: Malformed request\n        '401':\n          description: \"Unauthorized: Not logged in\"\n        '404':\n          description: Location not found\n    delete:\n      operationId: deleteFavorite\n      description: Remove a favorite by location id for the currently logged in user.\n      tags:\n        - \"User: Favorites\"\n      parameters:\n        - in: path\n          name: id\n          description: id of the location\n          required: true\n          schema:\n            $ref: '#/components/schemas/LocationId'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n        '400':\n          description: Malformed request\n        '401':\n          description: \"Unauthorized: Not logged in\"\n        '404':\n          description: Location not found\n\ncomponents:\n  schemas:\n    Location:\n      title: Location\n      description: A physical location which represents a supermarket or similar\n      type: object\n      nullable: false\n      required:\n        - id\n        - name\n        - favorite\n        - occupancy\n        - coordinates\n        - address\n      properties:\n        id:\n          $ref: '#/components/schemas/LocationId'\n        name:\n          type: string\n          example: LIDL Mannheim Marktplatz\n        favorite:\n          title: Favorite flag\n          description: |\n            Whether or not this Location is a favorite of the currently logged in user.\n            (Will be null if the user is not logged in.)\n          type: boolean\n          nullable: true\n          example: true\n        details:\n          $ref: '#/components/schemas/LocationDetails'\n        coordinates:\n          $ref: '#/components/schemas/Coordinates'\n        occupancy:\n          $ref: '#/components/schemas/Occupancy'\n        address:\n          $ref: '#/components/schemas/Address'\n    LocationId:\n      title: Location ID\n      description: Location unique identifier\n      type: integer\n      format: int64\n      nullable: false\n      example: 73621836\n    LocationDetails:\n      title: Location details\n      description: Locaiton details\n      type: object\n      nullable: false\n      properties:\n        type:\n          $ref: '#/components/schemas/LocationType'\n        brand:\n          title: Brand\n          description: Brand of the shop\n          type: string\n          nullable: true\n          example: \"LIDL\"\n        openingHours:\n          title: Opening hours\n          description: Opening hours of the shop\n          type: string\n          nullable: true\n          example: \"Mo-Fr 7-22 Uhr, Sa-So 9-12 Uhr\"\n    Address:\n      title: Address\n      description: Physical address\n      type: object\n      nullable: false\n      required:\n        - country\n        - city\n        - postcode\n        - street\n        - housenumber\n      properties:\n        country:\n          type: string\n          nullable: true\n          example: \"DE\"\n        city:\n          type: string\n          nullable: true\n          example: \"Mannheim\"\n        postcode:\n          type: string\n          nullable: true\n          example: \"68161\"\n        street:\n          type: string\n          nullable: true\n          example: \"Hauptstra√üe\"\n        housenumber:\n          type: string\n          nullable: true\n          example: \"1-5\"\n    Coordinates:\n      title: Coordinates\n      type: object\n      nullable: false\n      required:\n        - latitude\n        - longitude\n      properties:\n        latitude:\n          title: Latitude\n          type: number\n          example: 49.4953494\n        longitude:\n          title: Longitude\n          type: number\n          example: 8.3563969\n    Occupancy:\n      title: Occupancy\n      type: object\n      nullable: false\n      required:\n        - value\n        - count\n        - lastReport\n      properties:\n        value:\n          title: Value\n          description: Occupancy in percent.\n          type: number\n          nullable: true\n          minimum: 0.0\n          maximum: 1.0\n          example: 0.66\n        count:\n          title: Count\n          description: Number of datapoints used for the value calculation.\n          type: integer\n          nullable: false\n          minimum: 0\n          example: 2\n        latestReport:\n          title: Latest Report\n          description: Time of the latest report that was considered to calculate occupancy\n          type: string\n          format: date-time\n          nullable: true\n    OccupancyReport:\n      title: Occupancy Report\n      description: Occupancy report to send\n      type: object\n      nullable: false\n      required:\n        - occupancy\n        - clientType\n      properties:\n        occupancy:\n          title: Occupancy\n          description: Occupancy\n          type: number\n          nullable: false\n          minimum: 0.0\n          maximum: 1.0\n          example: 0.75\n        clientType:\n          title: Client Type\n          description: Type of the client which reported the occupancy\n          type: string\n          nullable: false\n          enum:\n            - IOT\n            - WEB_APP\n    LocationType:\n      title: Type\n      description: Type of the shop\n      type: string\n      nullable: true\n      enum:\n        - chemist\n        - beverages\n        - kiosk\n        - newsagent\n        - convenience\n    LocationSearchResult:\n      title: Location Search Result\n      description: The result for a search request\n      type: object\n      nullable: false\n      properties:\n        coordinates:\n          $ref: '#components/schemas/Coordinates'\n        locations:\n          description: List of Locations around the search query\n          type: array\n          nullable: false\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Location'\n",
			"canonicalURL": "/github.com/blockchaindev91/angular-simple-site@bdb4c223060c8d988c7e0cd46b6aa65c98fa44a8/-/blob/SAKPaaS/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/blockchaindev91/angular-simple-site/blob/bdb4c223060c8d988c7e0cd46b6aa65c98fa44a8/SAKPaaS/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"LocationSearchResult\": parse schema: property \"coordinates\": parse schema: at 1:2285: find schema: resolve: invalid pointer \"components/schemas/Coordinates\": pointer must start with '/'"
}