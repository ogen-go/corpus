{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geonetwork/geonetwork-ui"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "libs/data-access/gn4/src/spec.yaml",
			"byteSize": 314486,
			"content": "openapi: 3.0.1\ninfo:\n  title: GeoNetwork 4.0.3 OpenAPI Documentation\n  description: This is the description of the GeoNetwork OpenAPI. Use this API to\n    manage your catalog.\n  contact:\n    name: GeoNetwork user mailing list\n    url: https://sourceforge.net/p/geonetwork/mailman/geonetwork-users/\n    email: geonetwork-users@lists.sourceforge.net\n  license:\n    name: GPL 2.0\n    url: http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\n  version: 4.0.3\nexternalDocs:\n  description: Learn how to access the catalog using the GeoNetwork REST API.\n  url: https://apps.titellus.net/geonetwork/doc/api\nservers:\n  - url: '{catalog}/{portal}/api'\n    description: My GeoNetwork\n    variables:\n      catalog:\n        description: The GeoNetwork catalog to contact\n        enum:\n          - https://apps.titellus.net/geonetwork\n          - ../..\n        default: https://apps.titellus.net/geonetwork\n      portal:\n        description: The thematic portal\n        enum:\n          - srv\n        default: srv\ntags:\n  - name: userfeedback\n    description: User feedback\n  - name: userselections\n    description: User selections related operations\n  - name: records\n    description: Metadata record operations\n  - name: site\n    description: Catalog operations\n  - name: ui\n    description: User interface configuration operations\n  - name: operations\n    description: Privileges operations\n  - name: users\n    description: User operations\n  - name: records\n    description: Metadata record editing operations\n  - name: sources\n    description: Source catalogue operations\n  - name: mapservers\n    description: Mapservers related operations\n  - name: tags\n    description: Tags operations\n  - name: registries\n    description: Registries related operations\n  - name: search\n    description: Proxy for ElasticSearch catalog search operations\n  - name: groups\n    description: Groups operations\n  - name: status\n    description: Workflow status operations\n  - name: me\n    description: Me operations\n  - name: processes\n    description: Processing operations\n  - name: pages\n    description: Static pages inside GeoNetwork\n  - name: harvesters\n    description: Harvester operations\n  - name: links\n    description: Record link operations\n  - name: standards\n    description: Standard related operations\n  - name: selections\n    description: Selection related operations\n  - name: regions\n    description: Regions operations\n  - name: identifiers\n    description: Identifiers operations\n  - name: logos\n    description: Logos operations\n  - name: usersearches\n    description: User custom searches operations\n  - name: customstyle\n    description: Functionalities for custom styling\n  - name: languages\n    description: Languages operations\n  - name: related\n    description: Related records\n  - name: tools\n    description: Utility operations\npaths:\n  /tools/ogc/sld:\n    get:\n      tags:\n        - tools\n      summary: Get the list of SLD available\n      operationId: getSLD\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    post:\n      tags:\n        - tools\n      summary: Generate a SLD with a new filter\n      description: Get the currend SLD for the requested layers, add new filters in,\n        save the SLD and return the new SLD URL.\n      operationId: buildSLD\n      parameters:\n        - name: url\n          in: query\n          description: The WMS server URL\n          required: true\n          schema:\n            type: string\n        - name: layers\n          in: query\n          description: The layers\n          required: true\n          schema:\n            type: string\n        - name: filters\n          in: query\n          description: The filters in JSON\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            text/plain:\n              schema:\n                type: string\n    delete:\n      tags:\n        - tools\n      summary: Remove all SLD files\n      description: Clean all SLD generated previously\n      operationId: deteleSLD\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /related:\n    get:\n      tags:\n        - related\n      summary: Get record related resources for all requested metadatas\n      description: Retrieve related services, datasets, onlines, thumbnails, sources,\n        ... to all requested records.\u003cbr/\u003e\u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getAssociatedResourcesForRecords\n      parameters:\n        - name: type\n          in: query\n          description: Type of related resource. If none, all resources are returned.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - children\n                - parent\n                - brothersAndSisters\n                - siblings\n                - associated\n                - services\n                - datasets\n                - fcats\n                - hasfeaturecats\n                - sources\n                - hassources\n                - related\n                - onlines\n                - thumbnails\n            default: \"\"\n        - name: uuid\n          in: query\n          description: Uuids of the metadatas you request the relations from.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the associated resources.\n          content:\n            application/xml:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/RelatedResponse'\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/RelatedResponse'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/xml:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/RelatedResponse'\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/RelatedResponse'\n  /registries/actions/entries/synchronize:\n    get:\n      tags:\n        - registries\n      summary: Preview updated matching entries in records\n      description: Scan one or more records for element matching the XPath provided\n        and then check if this element is available in the directory. If Found, the\n        element from the directory update the element in the record and optionally\n        properties are preserved.\u003cbr/\u003e\u003cbr/\u003eThe identifier XPath is used to find a\n        match. An optional filtercan be added to restrict search to a subset of the\n        directory. If no identifier XPaths is provided, the UUID is based on the content\n        of the snippet (hash). It is recommended to use an identifier for better matching\n        (eg. ISO19139 contact with different roles will not match on the automatic\n        UUID mode).\n      operationId: previewUpdatedRecordEntries\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: xpath\n          in: query\n          description: XPath of the elements to extract as entry.\n          required: true\n          schema:\n            type: string\n          example: .//gmd:CI_ResponsibleParty\n        - name: identifierXpath\n          in: query\n          description: XPath of the element identifier. If not defined a random UUID\n            is generated and analysis will not check for duplicates.\n          required: false\n          schema:\n            type: string\n          example: '@uuid or .//gmd:electronicMailAddress/gco:CharacterString/text()'\n        - name: propertiesToCopy\n          in: query\n          description: List of XPath of properties to copy from record to matching entry.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: ./gmd:role/*/@codeListValue\n        - name: substituteAsXLink\n          in: query\n          description: Replace entry by XLink.\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: '@uuid'\n        - name: fq\n          in: query\n          description: Filter query for directory search.\n          required: false\n          schema:\n            type: string\n          example: groupPublished:IFREMER\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/xml:\n              schema:\n                type: object\n    put:\n      tags:\n        - registries\n      summary: Update matching entries in records\n      description: Scan one or more records for element matching the XPath provided\n        and then check if this element is available in the directory. If Found, the\n        element from the directory update the element in the record and optionally\n        properties are preserved.\u003cbr/\u003e\u003cbr/\u003eThe identifier XPath is used to find a\n        match. An optional filtercan be added to restrict search to a subset of the\n        directory. If no identifier XPaths is provided, the UUID is based on the content\n        of the snippet (hash). It is recommended to use an identifier for better matching\n        (eg. ISO19139 contact with different roles will not match on the automatic\n        UUID mode).\n      operationId: updateRecordEntries\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: xpath\n          in: query\n          description: XPath of the elements to extract as entry.\n          required: true\n          schema:\n            type: string\n          example: .//gmd:CI_ResponsibleParty\n        - name: identifierXpath\n          in: query\n          description: XPath of the element identifier. If not defined a random UUID\n            is generated and analysis will not check for duplicates.\n          required: false\n          schema:\n            type: string\n          example: '@uuid'\n        - name: propertiesToCopy\n          in: query\n          description: List of XPath of properties to copy from record to matching entry.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: ./gmd:role/*/@codeListValue\n        - name: substituteAsXLink\n          in: query\n          description: Replace entry by XLink.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: fq\n          in: query\n          description: Filter query for directory search.\n          required: false\n          schema:\n            type: string\n          example: groupPublished:IFREMER\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: object\n  /registries/actions/entries/import/spatial:\n    post:\n      tags:\n        - registries\n      summary: Import spatial directory entries\n      description: Directory entry (AKA subtemplates) are XML fragments that can be\n        inserted in metadata records. Use this service to import geographic extent\n        entries from an ESRI Shapefile format.\n      operationId: importSpatialEntries\n      parameters:\n        - name: uuidAttribute\n          in: query\n          description: Attribute to use for UUID. If none, random UUID are generated.\n          required: false\n          schema:\n            type: string\n        - name: uuidPattern\n          in: query\n          description: Pattern to build UUID from. Default is '{{uuid}}'.\n          required: false\n          schema:\n            type: string\n            default: '{{uuid}}'\n        - name: descriptionAttribute\n          in: query\n          description: 'Attribute to use for extent description. If none, no extent\n          description defined. TODO: Add per language desc ?'\n          required: false\n          schema:\n            type: string\n        - name: geomProjectionTo\n          in: query\n          description: geomProjectionTo\n          required: false\n          schema:\n            type: string\n        - name: lenient\n          in: query\n          description: lenient\n          required: false\n          schema:\n            type: boolean\n        - name: onlyBoundingBox\n          in: query\n          description: Create only bounding box for each spatial objects.\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: process\n          in: query\n          description: Process\n          required: false\n          schema:\n            type: string\n        - name: schema\n          in: query\n          description: Schema identifier\n          required: false\n          schema:\n            type: string\n        - name: uuidProcessing\n          in: query\n          description: Record identifier processing.\n          required: false\n          schema:\n            type: string\n            enum:\n              - GENERATEUUID\n              - NOTHING\n              - OVERWRITE\n            default: NOTHING\n        - name: group\n          in: query\n          description: The group the record is attached to.\n          required: false\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        description: The ZIP file to upload containing the Shapefile.\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Directory entries imported.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n  /records:\n    get:\n      tags:\n        - records\n      summary: Get catalog content as RDF. This endpoint supports the same Lucene\n        query parameters as for the GUI search.\n      description: \".\"\n      operationId: getAsRdf\n      parameters:\n        - name: from\n          description: Indicates the start position in a sorted list of matches that\n            the client wants to use as the beginning of a page result.\n        - name: hitsPerPage\n          description: Indicates the number of hits per page.\n        - name: any\n          description: Search key\n        - name: title\n          description: A search key for the title.\n        - name: facet.q\n          description: 'A search facet in the Lucene index. Use the GeoNetwork GUI search\n          to generate the suitable filter values. Example: standard/dcat-ap\u0026createDateYear/2018\u0026sourceCatalog/6d93613e-2b76-4e26-94af-4b4c420a1758\n          (filter by creation year and source catalog).'\n        - name: sortBy\n          description: 'Lucene sortBy criteria. Relevant values: relevance, title, changeDate.'\n        - name: sortOrder\n          description: 'Sort order. Possible values: reverse.'\n        - name: similarity\n          description: Use the Lucene FuzzyQuery. Values range from 0.0 to 1.0 and defaults\n            to 0.8.\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the catalog content as RDF.\n        \"303\":\n          description: Redirect the client to the first in-sequence page resource.\n            This happens when the paging parameters (from, hitsPerPage) are not included\n            in the request.\n    put:\n      tags:\n        - records\n      summary: Add a record\n      description: Add one or more record from an XML fragment, URL or file in a folder\n        on the catalog server. When loadingfrom the catalog server folder, it might\n        be faster to use a local filesystem harvester.\n      operationId: insert\n      parameters:\n        - name: metadataType\n          in: query\n          description: The type of record.\n          required: false\n          schema:\n            type: string\n            enum:\n              - METADATA\n              - TEMPLATE\n              - SUB_TEMPLATE\n              - TEMPLATE_OF_SUB_TEMPLATE\n            default: METADATA\n        - name: url\n          in: query\n          description: URL of a file to download and insert.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: serverFolder\n          in: query\n          description: Server folder where to look for files.\n          required: false\n          schema:\n            type: string\n        - name: recursiveSearch\n          in: query\n          description: (Server folder import only) Recursive search in folder.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: publishToAll\n          in: query\n          description: (XML file only) Publish record.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: assignToCatalog\n          in: query\n          description: (MEF file only) Assign to current catalog.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: uuidProcessing\n          in: query\n          description: Record identifier processing.\n          required: false\n          schema:\n            type: string\n            enum:\n              - GENERATEUUID\n              - NOTHING\n              - OVERWRITE\n            default: NOTHING\n        - name: group\n          in: query\n          description: The group the record is attached to.\n          required: false\n          schema:\n            type: string\n        - name: category\n          in: query\n          description: Tags to assign to the record.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: rejectIfInvalid\n          in: query\n          description: Validate the record first and reject it if not valid.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: transformWith\n          in: query\n          description: XSL transformation to apply to the record.\n          required: false\n          schema:\n            type: string\n            default: _none_\n        - name: schema\n          in: query\n          description: Force the schema of the record. If not set, schema autodetection\n            is used (and is the preferred method).\n          required: false\n          schema:\n            type: string\n        - name: extra\n          in: query\n          description: (experimental) Add extra information to the record.\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: XML fragment.\n        content:\n          application/xml:\n            schema:\n              type: string\n          application/json:\n            schema:\n              type: string\n          application/x-www-form-urlencoded:\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"201\":\n          description: Report about imported records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n    post:\n      tags:\n        - records\n      summary: Add a record from XML or MEF/ZIP file\n      description: Add record in the catalog by uploading files.\n      operationId: insertFile\n      parameters:\n        - name: metadataType\n          in: query\n          description: The type of record.\n          required: false\n          schema:\n            type: string\n            enum:\n              - METADATA\n              - TEMPLATE\n              - SUB_TEMPLATE\n              - TEMPLATE_OF_SUB_TEMPLATE\n            default: METADATA\n        - name: file\n          in: query\n          description: XML or MEF file to upload\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              format: binary\n        - name: uuidProcessing\n          in: query\n          description: Record identifier processing.\n          required: false\n          schema:\n            type: string\n            enum:\n              - GENERATEUUID\n              - NOTHING\n              - OVERWRITE\n            default: NOTHING\n        - name: group\n          in: query\n          description: The group the record is attached to.\n          required: false\n          schema:\n            type: string\n        - name: category\n          in: query\n          description: Tags to assign to the record.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: rejectIfInvalid\n          in: query\n          description: Validate the record first and reject it if not valid.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: publishToAll\n          in: query\n          description: (XML file only) Publish record.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: assignToCatalog\n          in: query\n          description: (MEF file only) Assign to current catalog.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: transformWith\n          in: query\n          description: XSL transformation to apply to the record.\n          required: false\n          schema:\n            type: string\n            default: _none_\n        - name: schema\n          in: query\n          description: Force the schema of the record. If not set, schema autodetection\n            is used (and is the preferred method).\n          required: false\n          schema:\n            type: string\n        - name: extra\n          in: query\n          description: (experimental) Add extra information to the record.\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"201\":\n          description: Report about imported records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n    delete:\n      tags:\n        - records\n      summary: Delete one or more records\n      description: 'User MUST be able to edit the record to delete it. '\n      operationId: deleteRecords\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: withBackup\n          in: query\n          description: Backup first the record as MEF in the metadata removed folder.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"204\":\n          description: Report about deleted records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n  /records/importfrommap:\n    post:\n      tags:\n        - records\n      summary: Add a map metadata record from OGC OWS context\n      description: Add record in the catalog by uploading a map context.\n      operationId: insertOgcMapContextFile\n      parameters:\n        - name: title\n          in: query\n          description: A map title\n          required: true\n          schema:\n            type: string\n        - name: recordAbstract\n          in: query\n          description: A map abstract\n          required: false\n          schema:\n            type: string\n        - name: xml\n          in: query\n          description: OGC OWS context as string\n          required: false\n          schema:\n            type: string\n        - name: filename\n          in: query\n          description: OGC OWS context file name\n          required: false\n          schema:\n            type: string\n        - name: url\n          in: query\n          description: OGC OWS context URL\n          required: false\n          schema:\n            type: string\n        - name: viewerUrl\n          in: query\n          description: A map viewer URL to visualize the map\n          required: false\n          schema:\n            type: string\n        - name: overview\n          in: query\n          description: Map overview as PNG (base64 encoded)\n          required: false\n          schema:\n            type: string\n        - name: overviewFilename\n          in: query\n          description: Map overview filename\n          required: false\n          schema:\n            type: string\n        - name: topic\n          in: query\n          description: Topic category\n          required: false\n          schema:\n            type: string\n        - name: publishToAll\n          in: query\n          description: Publish record.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: uuidProcessing\n          in: query\n          description: Record identifier processing.\n          required: false\n          schema:\n            type: string\n            enum:\n              - GENERATEUUID\n              - NOTHING\n              - OVERWRITE\n            default: NOTHING\n        - name: group\n          in: query\n          description: The group the record is attached to.\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"201\":\n          description: Report about imported records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n  /records/duplicate:\n    put:\n      tags:\n        - records\n      summary: Create a new record\n      description: Create a record from a template or by copying an existing record.Return\n        the UUID of the newly created record. Existing links in the source record\n        are preserved, this means that the new record may contains link to the source\n        attachments. They need to be manually updated after creation.\n      operationId: create\n      parameters:\n        - name: metadataType\n          in: query\n          description: The type of record.\n          required: false\n          schema:\n            type: string\n            enum:\n              - METADATA\n              - TEMPLATE\n              - SUB_TEMPLATE\n              - TEMPLATE_OF_SUB_TEMPLATE\n            default: METADATA\n        - name: sourceUuid\n          in: query\n          description: UUID of the source record to copy.\n          required: true\n          schema:\n            type: string\n        - name: targetUuid\n          in: query\n          description: Assign a custom UUID. If this UUID already exist an error is\n            returned. This is enabled only if metadata create / generate UUID settings\n            is activated.\n          required: false\n          schema:\n            type: string\n        - name: group\n          in: query\n          description: The group the record is attached to.\n          required: true\n          schema:\n            type: string\n        - name: isVisibleByAllGroupMembers\n          in: query\n          description: Is published to all user group members? If not, only the author\n            and administrator can edit the record.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: category\n          in: query\n          description: Tags to assign to the record.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hasCategoryOfSource\n          in: query\n          description: Copy categories from source?\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: isChildOfSource\n          in: query\n          description: Is child of the record to copy?\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Return the internal id of the newly created record.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/{metadataUuid}/extents.json:\n    get:\n      tags:\n        - records\n      summary: Get list of record extents\n      description: |\n        A rendering of the geometry as a png. If no background is specified the image will be transparent. In getMap the envelope of the geometry is calculated then it is expanded by a factor.  That factor is the size of the map.  This allows the map to be slightly bigger than the geometry allowing some context to be shown. This parameter allows different factors to be chosen per scale level.\n        Proportion is the proportion of the world that the geometry covers (bounds of WGS84)/(bounds of geometry in WGS84)\n\n        Named backgrounds allow the background parameter to be a simple key and the complete URL will be looked up from this list of named backgrounds\n      operationId: getAllRecordExtentAsJson\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ExtentDto'\n  /records/{metadataUuid}/editor:\n    post:\n      tags:\n        - records\n      summary: Save edits\n      description: Save the HTML form content.\n      operationId: saveEdits\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: tab\n          in: query\n          description: Tab\n          required: false\n          schema:\n            type: string\n            default: simple\n        - name: withAttributes\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: withValidationErrors\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: minor\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: status\n          in: query\n          description: Submit for review directly after save.\n          required: false\n          schema:\n            type: string\n            default: \"1\"\n        - name: commit\n          in: query\n          description: Save current edits.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: terminate\n          in: query\n          description: Save and terminate session.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: data\n          in: query\n          description: 'Record as XML. TODO: rename xml'\n          required: false\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: The editor form.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n    delete:\n      tags:\n        - records\n      summary: Cancel edits\n      description: Cancel current editing session.\n      operationId: cancelEdits\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n        \"204\":\n          description: Editing session cancelled.\n  /records/{metadataUuid}/editor/elements:\n    delete:\n      tags:\n        - records\n      summary: Delete element\n      operationId: deleteElement\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: ref\n          in: query\n          description: Reference of the element to remove.\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: parent\n          in: query\n          description: Name of the parent.\n          required: true\n          schema:\n            type: string\n        - name: displayAttributes\n          in: query\n          description: Should attributes be shown on the editor snippet?\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"204\":\n          description: Element removed.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n  /records/{metadataUuid}/editor/attributes:\n    delete:\n      tags:\n        - records\n      summary: Delete attribute\n      operationId: deleteAttribute\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: ref\n          in: query\n          description: Reference of the attribute to remove.\n          required: true\n          schema:\n            type: string\n        - name: displayAttributes\n          in: query\n          description: Should attributes be shown on the editor snippet?\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"204\":\n          description: Attribute removed.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n  /records/{metadataUuid}/editor/elements/{direction}:\n    put:\n      tags:\n        - records\n      summary: Reorder element\n      operationId: addElement\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: ref\n          in: query\n          description: Reference of the element to move.\n          required: true\n          schema:\n            type: string\n        - name: direction\n          in: path\n          description: Direction\n          required: true\n          schema:\n            type: string\n            enum:\n              - up\n              - down\n        - name: displayAttributes\n          in: query\n          description: Should attributes be shown on the editor snippet?\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Element reordered.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n  /records/{metadataUuid}/validate/inspire:\n    put:\n      tags:\n        - records\n      summary: Submit a record to the INSPIRE service for validation.\n      description: User MUST be able to edit the record to validate it. An INSPIRE\n        endpoint must be configured in Settings. This activates an asyncronous process,\n        this method does not return any report. This method returns an id to be used\n        to get the report.\n      operationId: validateRecordForInspire\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: testsuite\n          in: query\n          description: Test suite to run\n          required: true\n          schema:\n            type: string\n        - name: mode\n          in: query\n          description: Define the encoding of the record to use. By default, ISO19139\n            are used as is and ISO19115-3 are converted to ISO19139.If mode = csw, a\n            GetRecordById request is used.If mode = any portal id, then a GetRecordById\n            request is used on this portal CSW entry point which may define custom CSW\n            post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Metadata not found.\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"500\":\n          description: Service unavailable.\n          content:\n            text/plain:\n              schema:\n                type: string\n        \"201\":\n          description: Check status of the report.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /records/{metadataUuid}/validate/inspire/testsuites:\n    get:\n      tags:\n        - records\n      summary: Get test suites available.\n      description: TG13, TG2, ...\n      operationId: getTestSuites\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of testsuites available.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n  /records/{testId}/validate/inspire:\n    get:\n      tags:\n        - records\n      summary: Check the status of validation with the INSPIRE service.\n      description: 'User MUST be able to edit the record to validate it. An INSPIRE\n        endpoint must be configured in Settings. If the process is complete an object\n        with status is returned. '\n      operationId: checkValidation\n      parameters:\n        - name: testId\n          in: path\n          description: Test identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Report ready.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"201\":\n          description: Report not ready.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"404\":\n          description: Report id not found.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /records/{metadataUuid}/doi:\n    put:\n      tags:\n        - records\n      summary: Submit a record to the Datacite metadata store in order to create a\n        DOI.\n      operationId: createDoi\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Metadata not found.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"500\":\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"201\":\n          description: Check status of the report.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    delete:\n      tags:\n        - records\n      summary: Remove a DOI (this is not recommended, DOI are supposed to be persistent\n        once created. This is mainly here for testing).\n      operationId: unregisterDoi\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Metadata or DOI not found.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"204\":\n          description: DOI unregistered.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. Only Administrators can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"500\":\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/{metadataUuid}/doi/checkPreConditions:\n    get:\n      tags:\n        - records\n      summary: Check that a record can be submitted to DataCite for DOI creation.\n        DataCite requires some fields to be populated.\n      operationId: checkDoiStatus\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Record can be proposed to DataCite.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: boolean\n        \"404\":\n          description: Metadata not found.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: boolean\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: boolean\n        \"500\":\n          description: Service unavailable.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: boolean\n        \"400\":\n          description: Record does not meet preconditions. Check error message.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: boolean\n  /records/{metadataUuid}/attachments/print-thumbnail:\n    put:\n      tags:\n        - records\n      summary: Create an overview using the map print module\n      description: \u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/linking-thumbnail.html#generating-a-thumbnail-using-wms-layers'\u003eMore\n        info\u003c/a\u003e\n      operationId: saveThumbnail\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: jsonConfig\n          in: query\n          description: The mapprint module JSON configuration\n          required: true\n          schema:\n            type: string\n        - name: rotationAngle\n          in: query\n          description: The rotation angle of the map\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Thumbnail created.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n  /records/pdf:\n    get:\n      tags:\n        - records\n      summary: Get a set of metadata records as PDF\n      description: The PDF is a short summary of each records with links to the complete\n        metadata record in different format (ie. landing page on the portal, XML)\n      operationId: exportAsPdf\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return requested records as PDF.\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n  /records/csv:\n    get:\n      tags:\n        - records\n      summary: Get a set of metadata records as CSV\n      description: The CSV is a short summary of each records.\n      operationId: exportAsCsv\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return requested records as CSV.\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n  /records/zip:\n    get:\n      tags:\n        - records\n      summary: Get a set of metadata records as ZIP\n      description: Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing\n        the metadata as XML and some others files depending on the version requested.\n        See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.\n      operationId: exportAsMef\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: format\n          in: query\n          description: MEF file format.\n          required: false\n          schema:\n            type: string\n            enum:\n              - simple\n              - partial\n              - full\n            default: FULL\n        - name: withRelated\n          in: query\n          description: With related records (parent and service).\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: withXLinksResolved\n          in: query\n          description: Resolve XLinks in the records.\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: withXLinkAttribute\n          in: query\n          description: Preserve XLink URLs in the records.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: addSchemaLocation\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: approved\n          in: query\n          description: Download the approved version\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: Accept\n          in: header\n          required: false\n          schema:\n            type: string\n            default: application/x-gn-mef-2-zip\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return requested records as ZIP.\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n  /isolanguages:\n    get:\n      tags:\n        - languages\n      summary: Get ISO languages\n      description: ISO languages provides a list of all languages (eg. used for autocompletion\n        in metadata editor).\n      operationId: getIsoLanguages\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/IsoLanguage'\n  /customstyle:\n    get:\n      tags:\n        - customstyle\n      summary: Get CssStyleSettings\n      description: This returns a map with all Less variables.\n      operationId: getCssStyle\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n    post:\n      tags:\n        - customstyle\n      summary: Saves custom style variables.\n      description: Saves custom style variables.\n      operationId: saveCssStyle\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: string\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/{metadataUuid}/formatters/{formatterId}:\n    get:\n      tags:\n        - records\n      summary: Get a formatted metadata record\n      operationId: getRecordFormattedBy\n      parameters:\n        - name: Accept\n          in: header\n          description: Formatter type to use.\n          required: false\n          schema:\n            type: string\n            default: text/html\n        - name: formatterId\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: width\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - _25\n              - _50\n              - _75\n              - _100\n            default: _100\n        - name: mdpath\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: language\n          in: query\n          description: Optional language ISO 3 letters code to override HTTP Accept-language\n            header.\n          required: false\n          schema:\n            type: string\n        - name: output\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - txt\n              - html\n              - xml\n              - json\n              - jsonld\n              - pdf\n              - testpdf\n        - name: approved\n          in: query\n          description: Download the approved version\n          required: false\n          schema:\n            type: boolean\n            default: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /processes/{process}:\n    get:\n      tags:\n        - processes\n      summary: Preview process result applied to one or more records\n      description: Preview result of a process applied to metadata records with an\n        XSL transformation declared in the metadata schema (See the process folder).\n        Parameters sent to the service are forwarded to XSL process. Append mode has\n        2 limitations. First, it only support a set of records in the same schema.\n        Secondly, it does not propagate URL parameters. This mode is mainly used to\n        create custom reports based on metadata records content.If process name ends\n        with '.csv', the XSL process output a text document which is returned. When\n        errors occur during processing, the processing report is returned in JSON\n        format.\n      operationId: previewProcessRecords\n      parameters:\n        - name: process\n          in: path\n          description: Process identifier\n          required: true\n          schema:\n            type: string\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: appendFirst\n          in: query\n          description: Append documents before processing\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            '*/*':\n              schema:\n                type: object\n        \"200\":\n          description: Processed records.\n          content:\n            '*/*':\n              schema:\n                type: object\n    post:\n      tags:\n        - processes\n      summary: Apply a process to one or more records\n      description: Process a metadata with an XSL transformation declared in the metadata\n        schema (See the process folder). Parameters sent to the service are forwarded\n        to XSL process.\n      operationId: processRecords\n      parameters:\n        - name: process\n          in: path\n          description: Process identifier\n          required: true\n          schema:\n            type: string\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: updateDateStamp\n          in: query\n          description: If true updates the DateStamp (or equivalent in standards different\n            to ISO 19139) field in the metadata with the current timestamp\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: index\n          in: query\n          description: Index after processing\n          required: false\n          schema:\n            type: boolean\n            default: true\n          example: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XsltMetadataProcessingReport'\n        \"201\":\n          description: Report about processed records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/XsltMetadataProcessingReport'\n  /users/owners:\n    get:\n      tags:\n        - users\n      summary: Get owners\n      description: Return users who actually owns one or more records.\n      operationId: getRecordOwners\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OwnerResponse'\n    put:\n      tags:\n        - users\n      summary: Transfer privileges\n      operationId: saveOwners\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TransferRequest'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /users/groups:\n    get:\n      tags:\n        - users\n      summary: Retrieve all user groups\n      operationId: retrieveAllUserGroups\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserGroupsResponse'\n  /usersearches:\n    get:\n      tags:\n        - usersearches\n      summary: Get user custom searches\n      operationId: getUserCustomSearches\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearchDto'\n    put:\n      tags:\n        - usersearches\n      summary: Creates a user search\n      description: Creates a user search.\n      operationId: createUserCustomSearch\n      requestBody:\n        description: User search details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserSearchDto'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: User search created.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n  /usersearches/all:\n    get:\n      tags:\n        - usersearches\n      summary: Get user custom searches for all users (no paginated)\n      operationId: getAllUserCustomSearches\n      parameters:\n        - name: featuredType\n          in: query\n          description: Featured type search.\n          required: false\n          schema:\n            type: string\n            enum:\n              - HOME\n              - EDITOR_BOARD\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearchDto'\n  /usersearches/allpaginated:\n    get:\n      tags:\n        - usersearches\n      summary: Get user custom searches for all users (paginated)\n      operationId: getAllUserCustomSearchesPage\n      parameters:\n        - name: featuredType\n          in: query\n          description: Featured  type search.\n          required: false\n          schema:\n            type: string\n            enum:\n              - HOME\n              - EDITOR_BOARD\n        - name: search\n          in: query\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: offset\n          in: query\n          description: From page\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n        - name: limit\n          in: query\n          description: Number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 10\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PaginatedUserSearchResponse'\n  /usersearches/featured:\n    get:\n      tags:\n        - usersearches\n      summary: Get featured user custom searches\n      operationId: getFeaturedUserCustomSearches\n      parameters:\n        - name: type\n          in: query\n          description: Number of records to return\n          required: false\n          schema:\n            type: string\n            enum:\n              - HOME\n              - EDITOR_BOARD\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserSearchDto'\n  /usersearches/{searchIdentifier}:\n    get:\n      tags:\n        - usersearches\n      summary: Get custom search\n      operationId: getUserCustomSearch\n      parameters:\n        - name: searchIdentifier\n          in: path\n          description: User search identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSearchDto'\n    put:\n      tags:\n        - usersearches\n      summary: Update a user search\n      operationId: updateCustomUserSearch\n      parameters:\n        - name: searchIdentifier\n          in: path\n          description: User search identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        description: User search details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserSearchDto'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"204\":\n          description: User search  updated.\n    delete:\n      tags:\n        - usersearches\n      summary: Delete a user search\n      description: Deletes a user search by identifier.\n      operationId: deleteUserCustomSerach\n      parameters:\n        - name: searchIdentifier\n          in: path\n          description: Search identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /logos:\n    get:\n      tags:\n        - logos\n      summary: Get all logos\n      description: Logos are used for the catalog, the groups logos, and harvester\n        icons. Logos are stored in the data directory in \u003cdataDirectory\u003e/resources/images/harvesting.\u003cbr/\u003e\n        Records are attached to a source. A source can be the local catalog or a harvester\n        node. When a source is created, its logo is located in the images/logos folder\n        with the source UUID as filename. For some sources the logo can be automatically\n        retrieved (eg. when harvesting GeoNetwork catalogs). For others, the logo\n        is usually manually defined when configuring the harvester.\n      operationId: getLogos\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                uniqueItems: true\n                type: array\n                items:\n                  type: string\n    post:\n      tags:\n        - logos\n      summary: Add a logo\n      operationId: addLogo\n      parameters:\n        - name: file\n          in: query\n          description: The logo image to upload\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n              format: binary\n        - name: overwrite\n          in: query\n          description: Overwrite if exists\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"201\":\n          description: Logo added.\n          content:\n            application/json:\n              schema:\n                type: string\n  /logos/{file}:\n    delete:\n      tags:\n        - logos\n      summary: Remove a logo\n      operationId: deleteLogo\n      parameters:\n        - name: file\n          in: path\n          description: The logo filename to delete\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n        \"204\":\n          description: Logo removed.\n  /robots.txt:\n    get:\n      tags:\n        - site\n      summary: robots.txt\n      operationId: getRobotsText\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: robots.txt file for SEO.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /sitemap:\n    get:\n      tags:\n        - site\n      summary: Get sitemap\n      operationId: getSitemap\n      parameters:\n        - name: format\n          in: query\n          description: Format (xml or html).\n          required: false\n          schema:\n            type: string\n            default: html\n        - name: doc\n          in: query\n          description: page.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Site map.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Element'\n  /identifiers:\n    get:\n      tags:\n        - identifiers\n      summary: Get identifier templates\n      description: Identifier templates are used to create record UUIDs havind a particular\n        structure. The template will be used when user creates a new record. The template\n        identifier to use is defined in the administration \u003e settings.\n      operationId: getIdentifiers\n      parameters:\n        - name: userDefinedOnly\n          in: query\n          description: Only user defined ones\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of identifier templates.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataIdentifierTemplate'\n        \"403\":\n          description: Operation not allowed. Only Editor can access it.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataIdentifierTemplate'\n    put:\n      tags:\n        - identifiers\n      summary: Add an identifier template\n      operationId: addIdentifier\n      requestBody:\n        description: Identifier template details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataIdentifierTemplate'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Identifier template created.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n        \"403\":\n          description: Operation not allowed. Only Editor can access it.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n  /identifiers/{identifier}:\n    put:\n      tags:\n        - identifiers\n      summary: Update an identifier template\n      operationId: updateIdentifier\n      parameters:\n        - name: identifier\n          in: path\n          description: Identifier template identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        description: Identifier template details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataIdentifierTemplate'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"403\":\n          description: Operation not allowed. Only Editor can access it.\n        \"204\":\n          description: Identifier template updated.\n  /regions/types:\n    get:\n      tags:\n        - regions\n      summary: Get list of region types\n      operationId: getRegionTypes\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of region types.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Category'\n  /regions:\n    get:\n      tags:\n        - regions\n      summary: Get list of regions\n      operationId: getRegions\n      parameters:\n        - name: label\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: categoryId\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: maxRecords\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: -1\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of regions.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/ListRegionsResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ListRegionsResponse'\n  /selections/{bucket}:\n    get:\n      tags:\n        - selections\n      summary: Get current selection\n      operationId: get\n      parameters:\n        - name: bucket\n          in: path\n          description: Bucket name\n          required: true\n          schema:\n            type: string\n          example: metadata\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                uniqueItems: true\n                type: array\n                items:\n                  type: string\n    put:\n      tags:\n        - selections\n      summary: Select one or more items\n      operationId: add\n      parameters:\n        - name: bucket\n          in: path\n          description: Bucket name\n          required: true\n          schema:\n            type: string\n          example: metadata\n        - name: uuid\n          in: query\n          description: 'One or more record UUIDs. If null, select all in current search\n          if bucket name is ''metadata'' (TODO: remove this limitation?).'\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n    delete:\n      tags:\n        - selections\n      summary: Clear selection or remove items\n      operationId: clear\n      parameters:\n        - name: bucket\n          in: path\n          description: Selection bucket name\n          required: true\n          schema:\n            type: string\n          example: metadata\n        - name: uuid\n          in: query\n          description: One or more record UUIDs\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n  /standards/{schema}/batchconfiguration:\n    get:\n      tags:\n        - standards\n      summary: Get batch editor configuration for a standard\n      operationId: getConfiguration\n      parameters:\n        - name: schema\n          in: path\n          description: Schema identifier\n          required: true\n          schema:\n            type: string\n          example: iso19139\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/BatchEditing'\n  /standards/batchconfiguration:\n    get:\n      tags:\n        - standards\n      summary: Get batch editor configuration for standards\n      operationId: getConfigurations\n      parameters:\n        - name: schema\n          in: query\n          description: Schema identifiers\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: iso19139\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Batch editor configuration.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/BatchEditing'\n  /standards/reload:\n    get:\n      tags:\n        - standards\n      summary: Reload standards\n      operationId: reloadSchema\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Standards reloaded.\n  /standards:\n    get:\n      tags:\n        - standards\n      summary: Get standards\n      operationId: getStandardConfigurations\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of standards.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataSchema'\n  /standards/{schema}/codelists:\n    get:\n      tags:\n        - standards\n      summary: Get multiple codelist translations\n      description: All translations are combined in the same object. No distinction\n        by codelist. This is useful if you need lots of codelists terms to be loaded.\n      operationId: getCodelistsTranslations\n      parameters:\n        - name: schema\n          in: path\n          description: Schema identifier\n          required: true\n          schema:\n            type: string\n          example: iso19139\n        - name: codelist\n          in: query\n          description: Codelist element name or alias\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /standards/{schema}/codelists/{codelist}:\n    get:\n      tags:\n        - standards\n      summary: Get codelist translations\n      operationId: getSchemaTranslations\n      parameters:\n        - name: schema\n          in: path\n          description: Schema identifier\n          required: true\n          schema:\n            type: string\n          example: iso19139\n        - name: codelist\n          in: path\n          description: Codelist element name or alias\n          required: true\n          schema:\n            type: string\n        - name: parent\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: displayIf\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: xpath\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: isoType\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /standards/{schema}/codelists/{codelist}/details:\n    get:\n      tags:\n        - standards\n      summary: Get codelist details\n      operationId: getSchemaCodelistsWithDetails\n      parameters:\n        - name: schema\n          in: path\n          description: Schema identifier\n          required: true\n          schema:\n            type: string\n          example: iso19139\n        - name: codelist\n          in: path\n          description: Codelist element name or alias\n          required: true\n          schema:\n            type: string\n        - name: parent\n          in: query\n          description: Parent name with namespace which may indicate a more precise\n            label as defined in context attribute.\n          required: false\n          schema:\n            type: string\n        - name: displayIf\n          in: query\n          description: Display if condition as defined in the codelist.xml file. Allows\n            to select a more precise codelist when more than one is defined for same\n            name.\n          required: false\n          schema:\n            type: string\n        - name: xpath\n          in: query\n          description: XPath of the element to target which may indicate a more precise\n            label as defined in context attribute.\n          required: false\n          schema:\n            type: string\n        - name: isoType\n          in: query\n          description: 'ISO type of the element to target which may indicate a more\n          precise label as defined in context attribute. (Same as context. TODO: Deprecate\n          ?)'\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Codelist'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Codelist'\n  /standards/{schema}/descriptors/{element}/details:\n    get:\n      tags:\n        - standards\n      summary: Get descriptor details\n      operationId: getElementDetails\n      parameters:\n        - name: schema\n          in: path\n          description: Schema identifier\n          required: true\n          schema:\n            type: string\n          example: iso19139\n        - name: element\n          in: path\n          description: Descriptor name\n          required: true\n          schema:\n            type: string\n        - name: parent\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: displayIf\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: xpath\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: isoType\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Element'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Element'\n  /standards/{schema}/editor/associatedpanel/config/{name}.json:\n    get:\n      tags:\n        - standards\n      summary: Get editor associated resources panel configuration\n      operationId: getEditorAssociatedPanelConfiguration\n      parameters:\n        - name: schema\n          in: path\n          description: Schema identifier\n          required: true\n          schema:\n            type: string\n          example: iso19139\n        - name: name\n          in: path\n          description: Configuration identifier\n          required: true\n          schema:\n            type: string\n          example: default\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/links:\n    get:\n      tags:\n        - links\n      summary: Get record links\n      operationId: getRecordLinks\n      parameters:\n        - name: filter\n          in: query\n          description: 'Filter, e.g. \"{url: ''png'', lastState: ''ko'', records: ''e421'',\n          groupId: 12}\", lastState being ''ok''/''ko''/''unknown'''\n          required: false\n          schema:\n            $ref: '#/components/schemas/JSONObject'\n        - name: groupIdFilter\n          in: query\n          description: Optional, filter links to records published in that group.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: groupOwnerIdFilter\n          in: query\n          description: Optional, filter links to records created in that group.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: page\n          description: Results page you want to retrieve (0..N)\n        - name: size\n          description: Number of records per page.\n        - name: sort\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. '\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageLink'\n    post:\n      tags:\n        - links\n      summary: Analyze records links\n      description: One of uuids or bucket parameter is required if not an Administrator.\n        Only records that you can edit will be validated.\n      operationId: analyzeRecordLinks\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: removeFirst\n          in: query\n          description: Only allowed if Administrator.\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: analyze\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n    delete:\n      tags:\n        - links\n      summary: Remove all links and status history\n      operationId: purgeAll\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/links/csv:\n    get:\n      tags:\n        - links\n      description: Get record links as CSV\n      operationId: getRecordLinksAsCsv\n      parameters:\n        - name: filter\n          in: query\n          description: 'Filter, e.g. \"{url: ''png'', lastState: ''ko'', records: ''e421'',\n          groupId: 12}\", lastState being ''ok''/''ko''/''unknown'''\n          required: false\n          schema:\n            $ref: '#/components/schemas/JSONObject'\n        - name: groupIdFilter\n          in: query\n          description: Optional, filter links to records published in that group.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: groupOwnerIdFilter\n          in: query\n          description: Optional, filter links to records created in that group.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: page\n          description: Results page you want to retrieve (0..N)\n        - name: size\n          description: Number of records per page.\n        - name: sort\n          description: 'Sorting criteria in the format: property(,asc|desc). Default\n          sort order is ascending. '\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /harvesters/{harvesterUuid}/assign:\n    post:\n      tags:\n        - harvesters\n      summary: Assign harvester records to a new source\n      operationId: assignHarvestedRecordToSource\n      parameters:\n        - name: harvesterUuid\n          in: path\n          description: The harvester UUID\n          required: true\n          schema:\n            type: string\n        - name: source\n          in: query\n          description: The target source UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  - 100 CONTINUE\n                  - 101 SWITCHING_PROTOCOLS\n                  - 102 PROCESSING\n                  - 103 CHECKPOINT\n                  - 200 OK\n                  - 201 CREATED\n                  - 202 ACCEPTED\n                  - 203 NON_AUTHORITATIVE_INFORMATION\n                  - 204 NO_CONTENT\n                  - 205 RESET_CONTENT\n                  - 206 PARTIAL_CONTENT\n                  - 207 MULTI_STATUS\n                  - 208 ALREADY_REPORTED\n                  - 226 IM_USED\n                  - 300 MULTIPLE_CHOICES\n                  - 301 MOVED_PERMANENTLY\n                  - 302 FOUND\n                  - 302 MOVED_TEMPORARILY\n                  - 303 SEE_OTHER\n                  - 304 NOT_MODIFIED\n                  - 305 USE_PROXY\n                  - 307 TEMPORARY_REDIRECT\n                  - 308 PERMANENT_REDIRECT\n                  - 400 BAD_REQUEST\n                  - 401 UNAUTHORIZED\n                  - 402 PAYMENT_REQUIRED\n                  - 403 FORBIDDEN\n                  - 404 NOT_FOUND\n                  - 405 METHOD_NOT_ALLOWED\n                  - 406 NOT_ACCEPTABLE\n                  - 407 PROXY_AUTHENTICATION_REQUIRED\n                  - 408 REQUEST_TIMEOUT\n                  - 409 CONFLICT\n                  - 410 GONE\n                  - 411 LENGTH_REQUIRED\n                  - 412 PRECONDITION_FAILED\n                  - 413 PAYLOAD_TOO_LARGE\n                  - 413 REQUEST_ENTITY_TOO_LARGE\n                  - 414 URI_TOO_LONG\n                  - 414 REQUEST_URI_TOO_LONG\n                  - 415 UNSUPPORTED_MEDIA_TYPE\n                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE\n                  - 417 EXPECTATION_FAILED\n                  - 418 I_AM_A_TEAPOT\n                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE\n                  - 420 METHOD_FAILURE\n                  - 421 DESTINATION_LOCKED\n                  - 422 UNPROCESSABLE_ENTITY\n                  - 423 LOCKED\n                  - 424 FAILED_DEPENDENCY\n                  - 425 TOO_EARLY\n                  - 426 UPGRADE_REQUIRED\n                  - 428 PRECONDITION_REQUIRED\n                  - 429 TOO_MANY_REQUESTS\n                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE\n                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS\n                  - 500 INTERNAL_SERVER_ERROR\n                  - 501 NOT_IMPLEMENTED\n                  - 502 BAD_GATEWAY\n                  - 503 SERVICE_UNAVAILABLE\n                  - 504 GATEWAY_TIMEOUT\n                  - 505 HTTP_VERSION_NOT_SUPPORTED\n                  - 506 VARIANT_ALSO_NEGOTIATES\n                  - 507 INSUFFICIENT_STORAGE\n                  - 508 LOOP_DETECTED\n                  - 509 BANDWIDTH_LIMIT_EXCEEDED\n                  - 510 NOT_EXTENDED\n                  - 511 NETWORK_AUTHENTICATION_REQUIRED\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  - 100 CONTINUE\n                  - 101 SWITCHING_PROTOCOLS\n                  - 102 PROCESSING\n                  - 103 CHECKPOINT\n                  - 200 OK\n                  - 201 CREATED\n                  - 202 ACCEPTED\n                  - 203 NON_AUTHORITATIVE_INFORMATION\n                  - 204 NO_CONTENT\n                  - 205 RESET_CONTENT\n                  - 206 PARTIAL_CONTENT\n                  - 207 MULTI_STATUS\n                  - 208 ALREADY_REPORTED\n                  - 226 IM_USED\n                  - 300 MULTIPLE_CHOICES\n                  - 301 MOVED_PERMANENTLY\n                  - 302 FOUND\n                  - 302 MOVED_TEMPORARILY\n                  - 303 SEE_OTHER\n                  - 304 NOT_MODIFIED\n                  - 305 USE_PROXY\n                  - 307 TEMPORARY_REDIRECT\n                  - 308 PERMANENT_REDIRECT\n                  - 400 BAD_REQUEST\n                  - 401 UNAUTHORIZED\n                  - 402 PAYMENT_REQUIRED\n                  - 403 FORBIDDEN\n                  - 404 NOT_FOUND\n                  - 405 METHOD_NOT_ALLOWED\n                  - 406 NOT_ACCEPTABLE\n                  - 407 PROXY_AUTHENTICATION_REQUIRED\n                  - 408 REQUEST_TIMEOUT\n                  - 409 CONFLICT\n                  - 410 GONE\n                  - 411 LENGTH_REQUIRED\n                  - 412 PRECONDITION_FAILED\n                  - 413 PAYLOAD_TOO_LARGE\n                  - 413 REQUEST_ENTITY_TOO_LARGE\n                  - 414 URI_TOO_LONG\n                  - 414 REQUEST_URI_TOO_LONG\n                  - 415 UNSUPPORTED_MEDIA_TYPE\n                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE\n                  - 417 EXPECTATION_FAILED\n                  - 418 I_AM_A_TEAPOT\n                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE\n                  - 420 METHOD_FAILURE\n                  - 421 DESTINATION_LOCKED\n                  - 422 UNPROCESSABLE_ENTITY\n                  - 423 LOCKED\n                  - 424 FAILED_DEPENDENCY\n                  - 425 TOO_EARLY\n                  - 426 UPGRADE_REQUIRED\n                  - 428 PRECONDITION_REQUIRED\n                  - 429 TOO_MANY_REQUESTS\n                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE\n                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS\n                  - 500 INTERNAL_SERVER_ERROR\n                  - 501 NOT_IMPLEMENTED\n                  - 502 BAD_GATEWAY\n                  - 503 SERVICE_UNAVAILABLE\n                  - 504 GATEWAY_TIMEOUT\n                  - 505 HTTP_VERSION_NOT_SUPPORTED\n                  - 506 VARIANT_ALSO_NEGOTIATES\n                  - 507 INSUFFICIENT_STORAGE\n                  - 508 LOOP_DETECTED\n                  - 509 BANDWIDTH_LIMIT_EXCEEDED\n                  - 510 NOT_EXTENDED\n                  - 511 NETWORK_AUTHENTICATION_REQUIRED\n        \"204\":\n          description: Harvester records transfered to new source.\n          content:\n            application/json:\n              schema:\n                type: string\n                enum:\n                  - 100 CONTINUE\n                  - 101 SWITCHING_PROTOCOLS\n                  - 102 PROCESSING\n                  - 103 CHECKPOINT\n                  - 200 OK\n                  - 201 CREATED\n                  - 202 ACCEPTED\n                  - 203 NON_AUTHORITATIVE_INFORMATION\n                  - 204 NO_CONTENT\n                  - 205 RESET_CONTENT\n                  - 206 PARTIAL_CONTENT\n                  - 207 MULTI_STATUS\n                  - 208 ALREADY_REPORTED\n                  - 226 IM_USED\n                  - 300 MULTIPLE_CHOICES\n                  - 301 MOVED_PERMANENTLY\n                  - 302 FOUND\n                  - 302 MOVED_TEMPORARILY\n                  - 303 SEE_OTHER\n                  - 304 NOT_MODIFIED\n                  - 305 USE_PROXY\n                  - 307 TEMPORARY_REDIRECT\n                  - 308 PERMANENT_REDIRECT\n                  - 400 BAD_REQUEST\n                  - 401 UNAUTHORIZED\n                  - 402 PAYMENT_REQUIRED\n                  - 403 FORBIDDEN\n                  - 404 NOT_FOUND\n                  - 405 METHOD_NOT_ALLOWED\n                  - 406 NOT_ACCEPTABLE\n                  - 407 PROXY_AUTHENTICATION_REQUIRED\n                  - 408 REQUEST_TIMEOUT\n                  - 409 CONFLICT\n                  - 410 GONE\n                  - 411 LENGTH_REQUIRED\n                  - 412 PRECONDITION_FAILED\n                  - 413 PAYLOAD_TOO_LARGE\n                  - 413 REQUEST_ENTITY_TOO_LARGE\n                  - 414 URI_TOO_LONG\n                  - 414 REQUEST_URI_TOO_LONG\n                  - 415 UNSUPPORTED_MEDIA_TYPE\n                  - 416 REQUESTED_RANGE_NOT_SATISFIABLE\n                  - 417 EXPECTATION_FAILED\n                  - 418 I_AM_A_TEAPOT\n                  - 419 INSUFFICIENT_SPACE_ON_RESOURCE\n                  - 420 METHOD_FAILURE\n                  - 421 DESTINATION_LOCKED\n                  - 422 UNPROCESSABLE_ENTITY\n                  - 423 LOCKED\n                  - 424 FAILED_DEPENDENCY\n                  - 425 TOO_EARLY\n                  - 426 UPGRADE_REQUIRED\n                  - 428 PRECONDITION_REQUIRED\n                  - 429 TOO_MANY_REQUESTS\n                  - 431 REQUEST_HEADER_FIELDS_TOO_LARGE\n                  - 451 UNAVAILABLE_FOR_LEGAL_REASONS\n                  - 500 INTERNAL_SERVER_ERROR\n                  - 501 NOT_IMPLEMENTED\n                  - 502 BAD_GATEWAY\n                  - 503 SERVICE_UNAVAILABLE\n                  - 504 GATEWAY_TIMEOUT\n                  - 505 HTTP_VERSION_NOT_SUPPORTED\n                  - 506 VARIANT_ALSO_NEGOTIATES\n                  - 507 INSUFFICIENT_STORAGE\n                  - 508 LOOP_DETECTED\n                  - 509 BANDWIDTH_LIMIT_EXCEEDED\n                  - 510 NOT_EXTENDED\n                  - 511 NETWORK_AUTHENTICATION_REQUIRED\n  /pages/{language}/{pageId}:\n    get:\n      tags:\n        - pages\n      summary: Return the page object details except the content\n      description: \u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getPage\n      parameters:\n        - name: language\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pageId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Page not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageJSONWrapper'\n        \"200\":\n          description: Page found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageJSONWrapper'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PageJSONWrapper'\n  /pages/{language}/{pageId}/content:\n    get:\n      tags:\n        - pages\n      summary: Return the static html content identified by pageId\n      description: \u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getPageContent\n      parameters:\n        - name: language\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: pageId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Page not found\n          content:\n            text/plain;charset=UTF-8:\n              schema:\n                type: string\n        \"200\":\n          description: Page found\n          content:\n            text/plain;charset=UTF-8:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            text/plain;charset=UTF-8:\n              schema:\n                type: string\n  /pages/list:\n    get:\n      tags:\n        - pages\n      summary: List all pages according to the filters\n      description: \u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/define-static-pages/define-pages.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: listPages\n      parameters:\n        - name: language\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: section\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - ALL\n              - TOP\n              - FOOTER\n              - MENU\n              - SUBMENU\n              - CUSTOM_MENU1\n              - CUSTOM_MENU2\n              - CUSTOM_MENU3\n              - DRAFT\n        - name: format\n          in: query\n          required: false\n          schema:\n            type: string\n            enum:\n              - LINK\n              - HTML\n              - TEXT\n              - MARKDOWN\n              - WIKI\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PageJSONWrapper'\n  /records/{metadataUuid}/status/workflow/last:\n    get:\n      tags:\n        - records\n      summary: Get last workflow status for a record\n      operationId: getStatus\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Record status.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataWorkflowStatusResponse'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataWorkflowStatusResponse'\n  /records/{metadataUuid}/status:\n    get:\n      tags:\n        - records\n      summary: Get record status history\n      operationId: getRecordStatusHistory\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: details\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sortOrder\n          in: query\n          description: Sort direction\n          required: false\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            default: DESC\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataStatusResponse'\n  /records/{metadataUuid}/status/{type}:\n    get:\n      tags:\n        - records\n      summary: Get record status history by type\n      operationId: getRecordStatusHistoryByType\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: path\n          description: Type\n          required: true\n          schema:\n            type: string\n            enum:\n              - workflow\n              - task\n              - event\n        - name: details\n          in: query\n          required: false\n          schema:\n            type: boolean\n        - name: sortOrder\n          in: query\n          description: Sort direction\n          required: false\n          schema:\n            type: string\n            enum:\n              - ASC\n              - DESC\n            default: DESC\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataStatusResponse'\n  /records/status/search:\n    get:\n      tags:\n        - records\n      summary: Search status\n      operationId: getWorkflowStatusByType\n      parameters:\n        - name: type\n          in: query\n          description: One or more types to retrieve (ie. worflow, event, task). Default\n            is all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - workflow\n                - task\n                - event\n        - name: details\n          in: query\n          description: All event details including XML changes. Responses are bigger.\n            Default is false\n          required: false\n          schema:\n            type: boolean\n        - name: author\n          in: query\n          description: One or more event author. Default is all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: owner\n          in: query\n          description: One or more event owners. Default is all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: id\n          in: query\n          description: One or more record identifier. Default is all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: record\n          in: query\n          description: One or more metadata record identifier. Default is all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: uuid\n          in: query\n          description: One or more metadata uuid. Default is all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: dateFrom\n          in: query\n          description: Start date\n          required: false\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: End date\n          required: false\n          schema:\n            type: string\n        - name: from\n          in: query\n          description: From page\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n        - name: size\n          in: query\n          description: Number of records to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 100\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataStatusResponse'\n  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/before:\n    get:\n      tags:\n        - records\n      summary: Get saved content from the status record before changes\n      operationId: showStatusBefore\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: statusId\n          in: path\n          description: Status identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userId\n          in: path\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: changeDate\n          in: path\n          description: Change date\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/xml:\n              schema:\n                type: string\n        \"200\":\n          description: Previous version of the record.\n          content:\n            application/xml:\n              schema:\n                type: string\n  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/after:\n    get:\n      tags:\n        - records\n      summary: Get saved content from the status record after changes\n      operationId: showStatusAfter\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: statusId\n          in: path\n          description: Status identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userId\n          in: path\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: changeDate\n          in: path\n          description: Change date\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/xml:\n              schema:\n                type: string\n        \"200\":\n          description: Version of the record after changes.\n          content:\n            application/xml:\n              schema:\n                type: string\n  /records/{metadataUuid}/status/{statusId}.{userId}.{changeDate}/restore:\n    post:\n      tags:\n        - records\n      summary: Restore saved content from a status record\n      operationId: restoreAtStatusSave\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: statusId\n          in: path\n          description: Status identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userId\n          in: path\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: changeDate\n          in: path\n          description: Change date\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Record restored.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n  /records/tags:\n    put:\n      tags:\n        - records\n      summary: Add or remove tags to one or more records\n      operationId: tagRecords\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Tag identifier\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: removeId\n          in: query\n          description: Tag identifier to remove.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: clear\n          in: query\n          description: Clear all before adding new ones\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"201\":\n          description: Report about updated records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n    delete:\n      tags:\n        - records\n      summary: Delete tags to one or more records\n      operationId: deleteTagForRecords\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Tag identifier\n          required: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"201\":\n          description: Report about removed records.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/{metadataUuid}/tags:\n    get:\n      tags:\n        - records\n      summary: Get record tags\n      description: Tags are used to classify information.\u003cbr/\u003e\u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/tag-information/tagging-with-categories.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getRecordTags\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Record tags.\n          content:\n            application/json:\n              schema:\n                uniqueItems: true\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataCategory'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                uniqueItems: true\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataCategory'\n    put:\n      tags:\n        - records\n      summary: Add tags to a record\n      operationId: tagRecord\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Tag identifier\n          required: true\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n        - name: clear\n          in: query\n          description: Clear all before adding new ones\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n        \"201\":\n          description: Record tags added.\n    delete:\n      tags:\n        - records\n      summary: Delete tags of a record\n      operationId: deleteTags\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: query\n          description: Tag identifier. If none, all tags are removed.\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"204\":\n          description: Record tags removed.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n  /records/backups/latest:\n    get:\n      tags:\n        - records\n      summary: Download MEF backup archive\n      description: The backup contains all metadata not harvested including templates.\n      operationId: downloadBackup\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n  /records/backups:\n    put:\n      tags:\n        - records\n      summary: Trigger MEF backup archive\n      description: The backup contains all metadata not harvested including templates.\n      operationId: trigger\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return succeed message.\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/{metadataUuid}/query:\n    get:\n      tags:\n        - records\n      summary: List saved queries for this metadata\n      operationId: getSavedQueries\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Saved query available.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SavedQuery'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SavedQuery'\n  /records/{metadataUuid}/query/{savedQuery}:\n    post:\n      tags:\n        - records\n      summary: Apply a saved query for this metadata\n      description: All parameters will be substituted to the XPath query. eg. {{protocol}}\n        in the XPath expression will be replaced by the protocol parameter provided\n        in the request body.\n      operationId: applyQuery\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: The metadata UUID\n          required: true\n          schema:\n            type: string\n          example: 43d7c186-2187-4bcd-8843-41e575a5ef56\n        - name: savedQuery\n          in: path\n          description: The saved query to apply\n          required: true\n          schema:\n            type: string\n          example: wfs-indexing-config\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of matching elements. If element are nodes, then they\n            are returned as string.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /records/publish:\n    put:\n      tags:\n        - records\n      summary: Publish one or more records\n      description: See record sharing for more details.\n      operationId: publish\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Report about updated privileges.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/{metadataUuid}/sharing:\n    get:\n      tags:\n        - records\n      summary: Get record sharing settings\n      description: Return current sharing options for a record.\n      operationId: getRecordSharingSettings\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: The record sharing settings.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharingResponse'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharingResponse'\n  /records/{metadataUuid}/group:\n    put:\n      tags:\n        - records\n      summary: Set record group\n      description: A record is related to one group.\n      operationId: setRecordGroup\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Group identifier\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"204\":\n          description: Record group updated.\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n  /records/sharing:\n    get:\n      tags:\n        - records\n      summary: Get record sharing settings\n      operationId: getSharingSettings\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharingResponse'\n        \"200\":\n          description: Return a default array of group and operations that can be\n            used to set record sharing properties.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SharingResponse'\n    put:\n      tags:\n        - records\n      summary: Set sharing settings for one or more records\n      description: See record sharing for more details.\n      operationId: share\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Privileges\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SharingParameter'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Report about updated privileges.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/ownership:\n    put:\n      tags:\n        - records\n      summary: Set group and owner for one or more records\n      operationId: setGroupAndOwner\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: groupIdentifier\n          in: query\n          description: Group identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: userIdentifier\n          in: query\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"201\":\n          description: Records group and owner updated\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/{metadataUuid}/ownership:\n    put:\n      tags:\n        - records\n      summary: Set record group and owner\n      operationId: setRecordOwnership\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: groupIdentifier\n          in: query\n          description: Group identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userIdentifier\n          in: query\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: true\n          example: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"201\":\n          description: Record group and owner updated\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/unpublish:\n    put:\n      tags:\n        - records\n      summary: Un-publish one or more records\n      description: See record sharing for more details.\n      operationId: unpublish\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Report about updated privileges.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/index:\n    get:\n      tags:\n        - records\n      summary: Index a set of records\n      description: Index a set of records provided either by a bucket or a list of\n        uuids\n      operationId: index\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Administrators can access it.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nullObject:\n                    type: boolean\n                  array:\n                    type: boolean\n                  empty:\n                    type: boolean\n                additionalProperties:\n                  type: object\n        \"200\":\n          description: Record indexed.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  nullObject:\n                    type: boolean\n                  array:\n                    type: boolean\n                  empty:\n                    type: boolean\n                additionalProperties:\n                  type: object\n  /records/{metadataUuid}/attachments:\n    get:\n      tags:\n        - records\n      summary: List all metadata attachments\n      description: \u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/using-filestore.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getAllResources\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: The metadata UUID\n          required: true\n          schema:\n            type: string\n          example: 43d7c186-2187-4bcd-8843-41e575a5ef56\n        - name: sort\n          in: query\n          description: Sort by\n          required: false\n          schema:\n            type: string\n            enum:\n              - type\n              - name\n            default: name\n          example: type\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: true\n          example: true\n        - name: filter\n          in: query\n          required: false\n          schema:\n            type: string\n            default: '*.*'\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the record attachments.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataResource'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataResource'\n    put:\n      tags:\n        - records\n      summary: Create a new resource from a URL for a given metadata\n      operationId: putResourceFromURL\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: The metadata UUID\n          required: true\n          schema:\n            type: string\n          example: 43d7c186-2187-4bcd-8843-41e575a5ef56\n        - name: visibility\n          in: query\n          description: The sharing policy\n          required: false\n          schema:\n            type: string\n            enum:\n              - public\n              - private\n            default: public\n          example: public\n        - name: url\n          in: query\n          description: The URL to load in the store\n          required: true\n          schema:\n            type: string\n            format: url\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Attachment added.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n    post:\n      tags:\n        - records\n      summary: Create a new resource for a given metadata\n      operationId: putResource\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: The metadata UUID\n          required: true\n          schema:\n            type: string\n          example: 43d7c186-2187-4bcd-8843-41e575a5ef56\n        - name: visibility\n          in: query\n          description: The sharing policy\n          required: false\n          schema:\n            type: string\n            enum:\n              - public\n              - private\n            default: public\n          example: public\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: true\n      requestBody:\n        description: The file to upload\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n        \"201\":\n          description: Attachment uploaded.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n  /records/{metadataUuid}/attachments/{resourceId}:\n    get:\n      tags:\n        - records\n      summary: Get a metadata resource\n      operationId: getResource\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: The metadata UUID\n          required: true\n          schema:\n            type: string\n          example: 43d7c186-2187-4bcd-8843-41e575a5ef56\n        - name: resourceId\n          in: path\n          description: The resource identifier (ie. filename)\n          required: true\n          schema:\n            type: string\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: true\n          example: true\n        - name: size\n          in: query\n          description: Size (only applies to images). From 1px to 2048px.\n          required: false\n          schema:\n            type: integer\n            format: int32\n          example: 200\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to download the\n            resource.\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  type: string\n                  format: byte\n        \"201\":\n          description: Record attachment.\n          content:\n            '*/*':\n              schema:\n                type: array\n                items:\n                  type: string\n                  format: byte\n    patch:\n      tags:\n        - records\n      summary: Update the metadata resource visibility\n      operationId: patchResource\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: The metadata UUID\n          required: true\n          schema:\n            type: string\n          example: 43d7c186-2187-4bcd-8843-41e575a5ef56\n        - name: resourceId\n          in: path\n          description: The resource identifier (ie. filename)\n          required: true\n          schema:\n            type: string\n        - name: visibility\n          in: query\n          description: The visibility\n          required: true\n          schema:\n            type: string\n            enum:\n              - public\n              - private\n          example: public\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Attachment visibility updated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataResource'\n  /processes/search-and-replace:\n    post:\n      tags:\n        - processes\n      summary: Search and replace values in one or more records\n      description: |-\n        Service to apply replacements to one or more records.\n         To define a replacement, send the following parameters:\n         * mdsection-139815551372=metadata\n         * mdfield-1398155513728=id.contact.individualName\n         * replaceValue-1398155513728=Juan\n         * searchValue-1398155513728=Jose\n\n        TODO: Would be good to provide a simple object to define list of changes instead of group of parameters.\u003cbr/\u003eBatch editing can also be used for similar works.\n      operationId: searchAndReplace\n      parameters:\n        - name: process\n          in: query\n          required: false\n          schema:\n            type: string\n            default: massive-content-update\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: isTesting\n          in: query\n          description: Test only (ie. metadata are not saved). Return the report only.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: isCaseInsensitive\n          in: query\n          description: Case insensitive search.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: vacuumMode\n          in: query\n          description: '''record'' to apply vacuum.xsl, ''element'' to remove empty\n          elements. Empty to not affect empty elements.'\n          required: false\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Replacements applied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataReplacementProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataReplacementProcessingReport'\n  /processes/reports:\n    get:\n      tags:\n        - processes\n      summary: Get current process reports\n      description: When processing, the report is stored in memory and allows to retrieve\n        progress repport during processing. Usually, process reports are returned\n        by the synchronous processing operation.\n      operationId: getProcessReport\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of reports returned.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only authenticated user can access it.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProcessingReport'\n    delete:\n      tags:\n        - processes\n      summary: Clear process reports list\n      operationId: delete\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only authenticated user can access it.\n        \"204\":\n          description: Report registry cleared.\n  /me:\n    get:\n      tags:\n        - me\n      summary: Get information about me\n      description: If not authenticated, return status 204 (NO_CONTENT), else return\n        basic user information. This operation is usually used to know if current\n        user is authenticated or not.It returns also info about groups and profiles.\n      operationId: getMe\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Authenticated. Return user details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeResponse'\n        \"204\":\n          description: Not authenticated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MeResponse'\n  /user/{username}:\n    patch:\n      tags:\n        - users\n      summary: Update user password\n      description: Get a valid changekey by email first and then update your password.\n      operationId: updatePassword\n      parameters:\n        - name: username\n          in: path\n          description: The user name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The new password and a valid change key\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PasswordUpdateParameter'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            text/plain:\n              schema:\n                type: string\n  /user/{username}/actions/forgot-password:\n    get:\n      tags:\n        - users\n      summary: Send user password reminder by email\n      description: An email is sent to the requested user with a link to reset his\n        password. User MUST have an email to get the link. LDAP users will not be\n        able to retrieve their password using this service.\n      operationId: sendPasswordByEmail\n      parameters:\n        - name: username\n          in: path\n          description: The user name\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            text/plain:\n              schema:\n                type: string\n  /users/{userIdentifier}:\n    get:\n      tags:\n        - users\n      summary: Get user\n      operationId: getUser\n      parameters:\n        - name: userIdentifier\n          in: path\n          description: User identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - users\n      summary: Update a user\n      description: Updates a catalog user.\n      operationId: updateUser\n      parameters:\n        - name: userIdentifier\n          in: path\n          description: User identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDto'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      tags:\n        - users\n      summary: Delete a user\n      description: Deletes a catalog user by identifier.\n      operationId: deleteUser\n      parameters:\n        - name: userIdentifier\n          in: path\n          description: User identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /users/{userIdentifier}/actions/forget-password:\n    post:\n      tags:\n        - users\n      summary: Resets user password\n      description: Resets the user password.\n      operationId: resetUserPassword\n      parameters:\n        - name: userIdentifier\n          in: path\n          description: User identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: password\n          in: query\n          description: Password to change.\n          required: true\n          schema:\n            type: string\n        - name: password2\n          in: query\n          description: Password to change (repeat).\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /users/{userIdentifier}/groups:\n    get:\n      tags:\n        - users\n      summary: Retrieve user groups\n      description: Retrieve the user groups.\n      operationId: retrieveUserGroups\n      parameters:\n        - name: userIdentifier\n          in: path\n          description: User identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserGroup'\n  /users/{userIdentifier}.png:\n    get:\n      tags:\n        - users\n      summary: Get user identicon\n      operationId: getUserIdenticon\n      parameters:\n        - name: userIdentifier\n          in: path\n          description: User identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: size\n          in: query\n          description: Size.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 18\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get users\n      operationId: getUsers\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - users\n      summary: Creates a user\n      description: Creates a catalog user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDto'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /status/{type}:\n    get:\n      tags:\n        - status\n      summary: Get status by type\n      operationId: getStatusByType\n      parameters:\n        - name: type\n          in: path\n          description: Type\n          required: true\n          schema:\n            type: string\n            enum:\n              - workflow\n              - task\n              - event\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StatusValue'\n  /status:\n    get:\n      tags:\n        - status\n      summary: Get status\n      operationId: getStatusList\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StatusValue'\n  /groups/{groupIdentifier}:\n    get:\n      tags:\n        - groups\n      summary: Get group\n      description: Return the requested group details.\n      operationId: getGroup\n      parameters:\n        - name: groupIdentifier\n          in: path\n          description: Group identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n    put:\n      tags:\n        - groups\n      summary: Update a group\n      operationId: updateGroup\n      parameters:\n        - name: groupIdentifier\n          in: path\n          description: Group identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        description: Group details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n        \"204\":\n          description: Group updated.\n    delete:\n      tags:\n        - groups\n      summary: Remove a group\n      description: Remove a group by first removing sharing settings, link to users\n        and finally reindex all affected records.\n      operationId: deleteGroup\n      parameters:\n        - name: groupIdentifier\n          in: path\n          description: Group identifier.\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: force\n          in: query\n          description: Force removal even if records are assigned to that group.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n        \"204\":\n          description: Group removed.\n  /groups:\n    get:\n      tags:\n        - groups\n      summary: Get groups\n      description: The catalog contains one or more groups. By default, there is 3\n        reserved groups (Internet, Intranet, Guest) and a sample group.\u003cbr/\u003eThis service\n        returns all catalog groups when not authenticated or when current is user\n        is an administrator. The list can contains or not reserved groups depending\n        on the parameters.\u003cbr/\u003eWhen authenticated, return user groups optionally filtered\n        on a specific user profile.\n      operationId: getGroups\n      parameters:\n        - name: withReservedGroup\n          in: query\n          description: Including Internet, Intranet, Guest groups or not\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: profile\n          in: query\n          description: For a specific profile\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n    put:\n      tags:\n        - groups\n      summary: Add a group\n      description: Return the identifier of the group created.\n      operationId: addGroup\n      requestBody:\n        description: Group details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Group'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n        \"400\":\n          description: Group with that id or name already exist.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n        \"201\":\n          description: Group created.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n  /groups/{groupIdentifier}/users:\n    get:\n      tags:\n        - groups\n      summary: Get group users\n      operationId: getGroupUsers\n      parameters:\n        - name: groupIdentifier\n          in: path\n          description: Group identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        \"200\":\n          description: List of users in that group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n  /site/logging/activity:\n    get:\n      tags:\n        - site\n      summary: Get last activity\n      operationId: getLastActivity\n      parameters:\n        - name: lines\n          in: query\n          description: Number of lines to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 2000\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            text/plain:\n              schema:\n                type: string\n  /site/logging:\n    get:\n      tags:\n        - site\n      summary: Get log files\n      operationId: getLogFiles\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/LogFileResponse'\n  /site/logging/activity/zip:\n    get:\n      tags:\n        - site\n      summary: Get last activity in a ZIP\n      operationId: getLastActivityInAZip\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /search/records/_search:\n    post:\n      tags:\n        - search\n      summary: Search endpoint\n      description: See https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\n        for search parameters details.\n      operationId: search\n      parameters:\n        - name: bucket\n          in: query\n          required: false\n          schema:\n            type: string\n            default: metadata\n      requestBody:\n        description: JSON request based on Elasticsearch API.\n        content:\n          application/json:\n            schema:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /registries/entries/{uuid}:\n    get:\n      tags:\n        - registries\n      summary: Get a directory entry\n      description: Directory entry (AKA subtemplates) are XML fragments that can be\n        inserted in metadata records using XLinks. XLinks can be remote or local.\n      operationId: getEntry\n      parameters:\n        - name: uuid\n          in: path\n          description: Directory entry UUID.\n          required: true\n          schema:\n            type: string\n        - name: process\n          in: query\n          description: Process\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: transformation\n          in: query\n          description: Transformation\n          required: false\n          schema:\n            type: string\n        - name: lang\n          in: query\n          description: lang\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: schema\n          in: query\n          description: schema\n          required: false\n          schema:\n            type: string\n            default: iso19139\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Directory entry.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Element'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Element'\n  /registries/crs:\n    get:\n      tags:\n        - registries\n      summary: Search coordinate reference system (CRS)\n      description: Based on GeoTools EPSG database. If phrase query, each words are\n        searched separately.\n      operationId: searchCrs\n      parameters:\n        - name: q\n          in: query\n          description: Search value\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: type\n          in: query\n          description: Type of CRS\n          required: false\n          schema:\n            type: string\n            enum:\n              - CoordinateReferenceSystem\n              - VerticalCRS\n              - GeographicCRS\n              - ProjectedCRS\n        - name: rows\n          in: query\n          description: 'Number of results. Default is: 100'\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 100\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of CRS.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Crs'\n  /registries/crs/types:\n    get:\n      tags:\n        - registries\n      summary: Get list of CRS type\n      operationId: getCrsTypes\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of CRS types.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - CoordinateReferenceSystem\n                    - VerticalCRS\n                    - GeographicCRS\n                    - ProjectedCRS\n  /registries/crs/{id}:\n    get:\n      tags:\n        - registries\n      summary: Get CRS\n      operationId: getCrs\n      parameters:\n        - name: id\n          in: path\n          description: CRS identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: CRS not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Crs'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Crs'\n        \"200\":\n          description: CRS details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Crs'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Crs'\n  /registries/vocabularies/keyword:\n    get:\n      tags:\n        - registries\n      summary: Get keyword by id\n      description: Retrieve XML representation of keyword(s) from same thesaurususing\n        different transformations. 'to-iso19139-keyword' is the default and return\n        an ISO19139 snippet.'to-iso19139-keyword-as-xlink' return an XLinked element.\n        Custom transformation can be create on a per schema basis.\n      operationId: getKeywordById\n      parameters:\n        - name: id\n          in: query\n          description: Keyword identifier or list of keyword identifiers comma separated.\n          required: true\n          schema:\n            type: string\n        - name: thesaurus\n          in: query\n          description: Thesaurus to look info for the keyword(s).\n          required: true\n          schema:\n            type: string\n        - name: lang\n          in: query\n          description: Languages.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: keywordOnly\n          in: query\n          description: Only print the keyword, no thesaurus information.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: transformation\n          in: query\n          description: XSL template to use (ISO19139 keyword by default, see convert.xsl).\n          required: false\n          schema:\n            type: string\n        - name: langMap\n          in: query\n          description: langMap, that converts the values in the 'lang' parameter to\n            how they will be actually represented in the record. {'fre':'fra'} or {'fre':'fr'}.  Missing/empty\n            means to convert to iso 2 letter.\n          required: false\n          schema:\n            type: string\n        - name: Accept\n          in: header\n          required: false\n          schema:\n            type: string\n            default: application/xml\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: XML snippet with requested keywords.\n          content:\n            application/xml:\n              schema:\n                type: object\n            application/json:\n              schema:\n                type: object\n  /registries/vocabularies/{thesaurus}:\n    get:\n      tags:\n        - registries\n      summary: Download a thesaurus by name\n      description: Download the thesaurus in SKOS format.\n      operationId: getThesaurus\n      parameters:\n        - name: thesaurus\n          in: path\n          description: Thesaurus to download.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"200\":\n          description: Thesaurus in SKOS format.\n    delete:\n      tags:\n        - registries\n      summary: Delete a thesaurus by name\n      description: Delete a thesaurus.\n      operationId: deleteThesaurus\n      parameters:\n        - name: thesaurus\n          in: path\n          description: Thesaurus to delete.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n        \"200\":\n          description: Thesaurus deleted.\n  /registries/vocabularies/search:\n    get:\n      tags:\n        - registries\n      summary: Search keywords\n      operationId: searchKeywords\n      parameters:\n        - name: q\n          in: query\n          description: Query\n          required: false\n          schema:\n            type: string\n        - name: lang\n          in: query\n          description: Query in that language\n          required: false\n          schema:\n            type: string\n            default: eng\n        - name: rows\n          in: query\n          description: Number of rows\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 1000\n        - name: start\n          in: query\n          description: Start from\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n        - name: pLang\n          in: query\n          description: Return keyword information in one or more languages\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: thesaurus\n          in: query\n          description: Thesaurus identifier\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: type\n          in: query\n          description: Type of search\n          required: false\n          schema:\n            type: string\n            enum:\n              - STARTS_WITH\n              - CONTAINS\n              - MATCH\n            default: CONTAINS\n        - name: uri\n          in: query\n          description: URI query\n          required: false\n          schema:\n            type: string\n        - name: sort\n          in: query\n          description: Sort by\n          required: false\n          schema:\n            type: string\n            default: DESC\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/KeywordBean'\n  /registries/vocabularies:\n    put:\n      tags:\n        - registries\n      summary: Uploads a new thesaurus from URL or Registry\n      description: Uploads a new thesaurus.\n      operationId: uploadThesaurusFromUrl\n      parameters:\n        - name: url\n          in: query\n          description: If set, try to download from the Internet.\n          required: false\n          schema:\n            type: string\n        - name: registryUrl\n          in: query\n          description: If set, try to download from a registry.\n          required: false\n          schema:\n            type: string\n        - name: registryType\n          in: query\n          description: If using registryUrl, then define the type of registry. If not\n            set, default mode is re3gistry.\n          required: false\n          schema:\n            type: string\n            enum:\n              - re3gistry\n              - ldRegistry\n        - name: registryLanguage\n          in: query\n          description: Languages to download from a registry.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: type\n          in: query\n          description: Local or external (default).\n          required: false\n          schema:\n            type: string\n            default: external\n        - name: dir\n          in: query\n          description: Type of thesaurus, usually one of the ISO thesaurus type codelist\n            value. Default is theme.\n          required: false\n          schema:\n            type: string\n            default: theme\n        - name: stylesheet\n          in: query\n          description: XSL to be use to convert the thesaurus before load. Default _none_.\n          required: false\n          schema:\n            type: string\n            default: _none_\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Thesaurus uploaded in SKOS format.\n          content:\n            text/xml:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n          content:\n            text/xml:\n              schema:\n                type: string\n    post:\n      tags:\n        - registries\n      summary: Uploads a new thesaurus from a file\n      description: Uploads a new thesaurus.\n      operationId: uploadThesaurus\n      parameters:\n        - name: type\n          in: query\n          description: Local or external (default).\n          required: false\n          schema:\n            type: string\n            default: external\n        - name: dir\n          in: query\n          description: Type of thesaurus, usually one of the ISO thesaurus type codelist\n            value. Default is theme.\n          required: false\n          schema:\n            type: string\n            default: theme\n        - name: stylesheet\n          in: query\n          description: XSL to be use to convert the thesaurus before load. Default _none_.\n          required: false\n          schema:\n            type: string\n            default: _none_\n      requestBody:\n        description: If set, do a file upload.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Thesaurus uploaded in SKOS format.\n          content:\n            text/xml:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n          content:\n            text/xml:\n              schema:\n                type: string\n  /registries/vocabularies/import/csv:\n    post:\n      tags:\n        - registries\n      summary: Uploads a CSV file and convert it to SKOS format\n      description: CSV file MUST contains columns at least for concept id and label.\n        For multilingual thesaurus, consider using columns like label, label_fre,\n        label_ita with languages parameter set to [en, fr, it]. Default language value\n        is used if translations are empty. The thesaurus filename will be the filename\n        of the CSV file (with .rdf extension). It is recommended to set the thesaurus\n        title and namespace URL even if default values will be used based on the filename.\n        Thesaurus dates are set to the date of import.\n      operationId: importCsvAsThesaurus\n      parameters:\n        - name: type\n          in: query\n          description: Local or external (default).\n          required: false\n          schema:\n            type: string\n            default: external\n        - name: dir\n          in: query\n          description: Type of thesaurus, usually one of the ISO thesaurus type codelist\n            value. Default is theme.\n          required: false\n          schema:\n            type: string\n            default: theme\n        - name: encoding\n          in: query\n          description: Encoding. Default is UTF-8.\n          required: false\n          schema:\n            type: string\n            default: UTF-8\n        - name: thesaurusNs\n          in: query\n          description: Thesaurus namespace. Default is filename.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: languages\n          in: query\n          description: Thesaurus languages\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            default: en\n        - name: thesaurusTitle\n          in: query\n          description: Thesaurus title. Default is filename.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: conceptIdColumn\n          in: query\n          description: Column name for concept id. Default is id.\n          required: false\n          schema:\n            type: string\n            default: id\n        - name: conceptLabelColumn\n          in: query\n          description: Column name for concept label. Default is label.\n          required: false\n          schema:\n            type: string\n            default: label\n        - name: conceptDescriptionColumn\n          in: query\n          description: Column name for concept description. Default is description.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: conceptBroaderIdColumn\n          in: query\n          description: Column name for broader concept id. Default is broader.\n          required: false\n          schema:\n            type: string\n            default: broader\n        - name: conceptNarrowerIdColumn\n          in: query\n          description: Column name for narrower concept id. Default is narrower.\n          required: false\n          schema:\n            type: string\n            default: narrower\n        - name: conceptRelatedIdColumn\n          in: query\n          description: Column name for related concept id. Default is related.\n          required: false\n          schema:\n            type: string\n            default: related\n        - name: conceptLinkSeparator\n          in: query\n          description: Separator used when multiple broader/narrower/related ids are\n            in the same column. Default is '|'.\n          required: false\n          schema:\n            type: string\n            default: \\|\n        - name: importAsThesaurus\n          in: query\n          description: Import CSV file as thesaurus if true (detault) or return it in  SKOS\n            format.\n          required: false\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        description: If set, do a file upload.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Thesaurus converted and imported in SKOS format.\n        \"200\":\n          description: Thesaurus converted and returned in response in SKOS format.\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n  /tags/{tagIdentifier}:\n    get:\n      tags:\n        - tags\n      summary: Get a tag\n      operationId: getTag\n      parameters:\n        - name: tagIdentifier\n          in: path\n          description: Tag identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Tag details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataCategory'\n    put:\n      tags:\n        - tags\n      summary: Update a tag\n      operationId: updateTag\n      parameters:\n        - name: tagIdentifier\n          in: path\n          description: Tag identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MetadataCategory'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            '*/*':\n              schema:\n                type: string\n        \"204\":\n          description: Tag updated.\n          content:\n            '*/*':\n              schema:\n                type: string\n  /tags:\n    get:\n      tags:\n        - tags\n      summary: Get tags\n      operationId: getTags\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of tags.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/MetadataCategory'\n  /mapservers:\n    get:\n      tags:\n        - mapservers\n      summary: Get mapservers\n      description: Mapservers are used by the catalog to publish record attachments\n        (eg. ZIP file with shape) or record associated resources (eg. database table,\n        file on the local network) in a remote mapserver like GeoServer or MapServer.\n        The catalog communicate with the mapserver using GeoServer REST API.\n      operationId: getMapservers\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AnonymousMapserver'\n    put:\n      tags:\n        - mapservers\n      summary: Add a mapserver\n      description: Return the id of the newly created mapserver.\n      operationId: addMapserver\n      requestBody:\n        description: Mapserver details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MapServer'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Mapserver created.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n        \"400\":\n          description: Bad parameters.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n          content:\n            application/json:\n              schema:\n                type: integer\n                format: int32\n  /mapservers/{mapserverId}:\n    get:\n      tags:\n        - mapservers\n      summary: Get a mapserver\n      operationId: getMapserver\n      parameters:\n        - name: mapserverId\n          in: path\n          description: Mapserver identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnonymousMapserver'\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnonymousMapserver'\n    put:\n      tags:\n        - mapservers\n      summary: Update a mapserver\n      operationId: updateMapserver\n      parameters:\n        - name: mapserverId\n          in: path\n          description: Mapserver identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        description: Mapserver details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/MapServer'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n        \"204\":\n          description: Mapserver updated.\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n  /mapservers/{mapserverId}/records/{metadataUuid}:\n    get:\n      tags:\n        - mapservers\n      summary: 'Check metadata mapserver resource is published '\n      operationId: getMapserverResource\n      parameters:\n        - name: mapserverId\n          in: path\n          description: Mapserver identifier\n          required: true\n          schema:\n            type: string\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: query\n          description: Resource name (could be a file or a db connection)\n          required: true\n          schema:\n            type: string\n        - name: metadataTitle\n          in: query\n          description: Metadata title\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: metadataAbstract\n          in: query\n          description: Metadata abstract\n          required: false\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            text/plain:\n              schema:\n                type: string\n    put:\n      tags:\n        - mapservers\n      summary: Publish a metadata resource in a mapserver\n      operationId: publishMapserverResource\n      parameters:\n        - name: mapserverId\n          in: path\n          description: Mapserver identifier\n          required: true\n          schema:\n            type: string\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: query\n          description: Resource name (could be a file or a db connection)\n          required: true\n          schema:\n            type: string\n        - name: metadataTitle\n          in: query\n          description: Metadata title\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: metadataAbstract\n          in: query\n          description: Metadata abstract\n          required: false\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            text/plain:\n              schema:\n                type: string\n    delete:\n      tags:\n        - mapservers\n      summary: Remove a metadata mapserver resource\n      operationId: deleteMapserverResource\n      parameters:\n        - name: mapserverId\n          in: path\n          description: Mapserver identifier\n          required: true\n          schema:\n            type: string\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: resource\n          in: query\n          description: Resource name (could be a file or a db connection)\n          required: true\n          schema:\n            type: string\n        - name: metadataTitle\n          in: query\n          description: Metadata title\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: metadataAbstract\n          in: query\n          description: Metadata abstract\n          required: false\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            text/plain:\n              schema:\n                type: string\n  /sources:\n    get:\n      tags:\n        - sources\n      summary: Get portal list\n      description: List all subportal available.\n      operationId: getSources_1\n      parameters:\n        - name: group\n          in: query\n          description: Group owner of the source (only applies to subportal).\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of portals.\n  /sources/{type}:\n    get:\n      tags:\n        - sources\n      summary: Get all sources by type\n      description: Sources are the local catalogue, subportal, external catalogue\n        (when importing MEF files) or harvesters.\n      operationId: getSourcesByType\n      parameters:\n        - name: type\n          in: path\n          required: true\n          schema:\n            type: string\n            enum:\n              - portal\n              - subportal\n              - externalportal\n              - harvester\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Source'\n  /records/batchediting:\n    put:\n      tags:\n        - records\n      summary: Edit a set of records by XPath expressions. This operations applies\n        the update-fixed-info.xsl transformation for the metadata schema and updates\n        the change date if the parameter updateDateStamp is set to true.\n      operationId: batchEdit\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n          example: iso19139\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: updateDateStamp\n          in: query\n          description: If true updates the DateStamp (or equivalent in standards different\n            to ISO 19139) field in the metadata with the current timestamp\n          required: false\n          schema:\n            type: boolean\n            default: false\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/BatchEditParameter'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Return a report of what has been done.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IProcessingReport'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IProcessingReport'\n  /records/{metadataUuid}/related:\n    get:\n      tags:\n        - records\n      summary: Get record related resources\n      description: Retrieve related services, datasets, onlines, thumbnails, sources,\n        ... to this records.\u003cbr/\u003e\u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getAssociatedResources\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: Type of related resource. If none, all resources are returned.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - children\n                - parent\n                - brothersAndSisters\n                - siblings\n                - associated\n                - services\n                - datasets\n                - fcats\n                - hasfeaturecats\n                - sources\n                - hassources\n                - related\n                - onlines\n                - thumbnails\n            default: \"\"\n        - name: start\n          in: query\n          description: Start offset for paging. Default 1. Only applies to related metadata\n            records (ie. not for thumbnails).\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 0\n        - name: rows\n          in: query\n          description: Number of rows returned. Default 100.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 100\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the associated resources.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/RelatedResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelatedResponse'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/RelatedResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelatedResponse'\n  /records/{metadataUuid}/featureCatalog:\n    get:\n      tags:\n        - records\n      summary: Returns a map to decode attributes in a dataset (from the associated\n        feature catalog)\n      description: Retrieve related services, datasets, onlines, thumbnails, sources,\n        ... to this records.\u003cbr/\u003e\u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/associating-resources/index.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getFeatureCatalog\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the associated resources.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/FeatureResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureResponse'\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/FeatureResponse'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureResponse'\n  /records/{metadataUuid}/formatters/xml:\n    get:\n      tags:\n        - records\n      summary: Get a metadata record as XML or JSON\n      operationId: getRecordAs\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: addSchemaLocation\n          in: query\n          description: Add XSD schema location based on standard configuration (see\n            schema-ident.xml).\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: increasePopularity\n          in: query\n          description: Increase record popularity\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: withInfo\n          in: query\n          description: Add geonet:info details\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: attachment\n          in: query\n          description: Download as a file\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: approved\n          in: query\n          description: Download the approved version\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: Accept\n          in: header\n          required: false\n          schema:\n            type: string\n            default: application/xml\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the record.\n          content:\n            application/xml:\n              schema:\n                type: object\n            application/json:\n              schema:\n                type: object\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/xml:\n              schema:\n                type: object\n            application/json:\n              schema:\n                type: object\n  /records/{metadataUuid}/formatters/json:\n    get:\n      tags:\n        - records\n      summary: Get a metadata record as XML or JSON\n      operationId: getRecordAs_1\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: addSchemaLocation\n          in: query\n          description: Add XSD schema location based on standard configuration (see\n            schema-ident.xml).\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: increasePopularity\n          in: query\n          description: Increase record popularity\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: withInfo\n          in: query\n          description: Add geonet:info details\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: attachment\n          in: query\n          description: Download as a file\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: approved\n          in: query\n          description: Download the approved version\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: Accept\n          in: header\n          required: false\n          schema:\n            type: string\n            default: application/xml\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the record.\n          content:\n            application/xml:\n              schema:\n                type: object\n            application/json:\n              schema:\n                type: object\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            application/xml:\n              schema:\n                type: object\n            application/json:\n              schema:\n                type: object\n  /records/{metadataUuid}/formatters/zip:\n    get:\n      tags:\n        - records\n      summary: Get a metadata record as ZIP\n      description: Metadata Exchange Format (MEF) is returned. MEF is a ZIP file containing\n        the metadata as XML and some others files depending on the version requested.\n        See http://geonetwork-opensource.org/manuals/trunk/eng/users/annexes/mef-format.html.\n      operationId: getRecordAsZip\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: format\n          in: query\n          description: MEF file format.\n          required: false\n          schema:\n            type: string\n            enum:\n              - simple\n              - partial\n              - full\n            default: FULL\n        - name: withRelated\n          in: query\n          description: With related records (parent and service).\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: withXLinksResolved\n          in: query\n          description: Resolve XLinks in the records.\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: withXLinkAttribute\n          in: query\n          description: Preserve XLink URLs in the records.\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: addSchemaLocation\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: approved\n          in: query\n          description: Download the approved version\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: Accept\n          in: header\n          required: false\n          schema:\n            type: string\n            default: application/x-gn-mef-2-zip\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Return the record.\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n  /records/{metadataUuid}/processes:\n    get:\n      tags:\n        - records\n      summary: Get suggestions\n      description: Analyze the record an suggest processes to improve the quality\n        of the record.\u003cbr/\u003e\u003ca href='http://geonetwork-opensource.org/manuals/trunk/eng/users/user-guide/workflow/batchupdate-xsl.html'\u003eMore\n        info\u003c/a\u003e\n      operationId: getSuggestions\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SuggestionType'\n        \"200\":\n          description: Record suggestions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SuggestionType'\n  /records/{metadataUuid}/processes/{process}:\n    get:\n      tags:\n        - records\n      summary: Preview process result\n      description: Process a metadata with an XSL transformation declared in the metadata\n        schema (See the process folder). Parameters sent to the service are forwarded\n        to XSL process.\n      operationId: processRecordPreview\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: process\n          in: path\n          description: Process identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: A preview of the processed record.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Element'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Element'\n    post:\n      tags:\n        - records\n      summary: Apply a process\n      description: Process a metadata with an XSL transformation declared in the metadata\n        schema (See the process folder). Parameters sent to the service are forwarded\n        to XSL process.\n      operationId: processRecord\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: process\n          in: path\n          description: Process identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/xml:\n              schema:\n                type: string\n        \"204\":\n          description: Record processed and saved.\n          content:\n            application/xml:\n              schema:\n                type: string\n  /records/{metadataUuid}/validate/internal:\n    put:\n      tags:\n        - records\n      summary: Validate a record\n      description: 'User MUST be able to edit the record to validate it. FIXME : id\n        MUST be the id of the current metadata record in session ?'\n      operationId: validateRecord\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n        - name: isvalid\n          in: query\n          description: Validation status. Should be provided only in case of SUBTEMPLATE\n            validation. If provided for another type, throw a BadParameter Exception\n          required: false\n          schema:\n            type: boolean\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Validation report.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reports'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Reports'\n        \"403\":\n          description: Operation not allowed. User needs to be able to edit the resource.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Reports'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Reports'\n  /records/{metadataUuid}/rate:\n    put:\n      tags:\n        - records\n      summary: Rate a record\n      description: User rating of metadata. If the metadata was harvested using the\n        'GeoNetwork' protocol and the system setting localrating/enable is false (the\n        default), the user's rating is shared between GN nodes in this harvesting\n        network. If the metadata was not harvested or if localrating/enable is true\n        then 'local rating' is applied, counting only rating from users of this node.\u003cbr/\u003eWhen\n        a remote rating is applied, the local rating is not updated. It will be updated\n        on the next harvest run (FIXME ?).\n      operationId: rateRecord\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Rating\n        content:\n          application/json:\n            schema:\n              type: integer\n              format: int32\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: New rating value.\n          content:\n            '*/*':\n              schema:\n                type: integer\n                format: int32\n        \"403\":\n          description: Operation not allowed. User needs to be able to view the resource.\n          content:\n            '*/*':\n              schema:\n                type: integer\n                format: int32\n  /records/templates:\n    put:\n      tags:\n        - records\n      summary: Add templates\n      description: Add template records for one or more schemas. Templates are defined\n        for each standard in the template folder as XML files. Template may also contains\n        subtemplates.\n      operationId: addTemplates\n      parameters:\n        - name: schema\n          in: query\n          description: Schema identifiers\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n          example: iso19139\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Return a report of what has been done.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Administrators can access it.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n  /records/samples:\n    put:\n      tags:\n        - records\n      summary: Add samples\n      description: Add sample records for one or more schemas. Samples are defined\n        for each standard in the samples folder as MEF files.\n      operationId: addSamples\n      parameters:\n        - name: schema\n          in: query\n          description: Schema identifiers\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n          example: iso19139\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Return a report of what has been done.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Administrators can access it.\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n  /records/versions:\n    put:\n      tags:\n        - records\n      summary: (Experimental) Enable version control for one or more records\n      operationId: enableVersionControlForRecords\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetadataProcessingReport'\n  /records/{metadataUuid}/versions:\n    put:\n      tags:\n        - records\n      summary: (Experimental) Enable version control\n      operationId: enableVersionControl\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            '*/*':\n              schema:\n                type: string\n  /records/validate:\n    put:\n      tags:\n        - records\n      summary: Validate one or more records\n      description: Update validation status for all records.\n      operationId: validateRecords\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: approved\n          in: query\n          description: Use approved version or not\n          required: false\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"201\":\n          description: Records validated.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n    delete:\n      tags:\n        - records\n      summary: Clear validation status of one or more records\n      operationId: cleanValidationStatus\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Records validation status cleared.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SimpleMetadataProcessingReport'\n  /records/validate/inspire:\n    put:\n      tags:\n        - records\n      summary: Validate one or more records in INSPIRE validator\n      description: Update validation status for all records.\n      operationId: validateRecordsInspire\n      parameters:\n        - name: uuids\n          in: query\n          description: Record UUIDs. If null current selection is used.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n        - name: mode\n          in: query\n          description: Define the encoding of the record to use. By default, ISO19139\n            are used as is and ISO19115-3 are converted to ISO19139.If mode = csw, a\n            GetRecordById request is used.If mode = any portal id, then a GetRecordById\n            request is used on this portal CSW entry point which may define custom CSW\n            post processing. See https://github.com/geonetwork/core-geonetwork/pull/4493.\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only Editors can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"201\":\n          description: Records validated.\n          content:\n            application/json:\n              schema:\n                type: string\n  /user/actions/register:\n    put:\n      tags:\n        - users\n      summary: Create user account\n      description: User is created with a registered user profile. username field\n        is ignored and the email is used as username. Password is sent by email. Catalog\n        administrator is also notified.\n      operationId: registerUser\n      requestBody:\n        description: User details\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserRegisterDto'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            text/plain:\n              schema:\n                type: string\n  /i18n/db/translations/{key}:\n    put:\n      tags:\n        - tools\n      summary: Add or update database translations.\n      operationId: addTranslations\n      parameters:\n        - name: key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: replace\n          in: query\n          required: false\n          schema:\n            type: boolean\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      tags:\n        - tools\n      summary: Delete database translations.\n      operationId: deleteTranslations\n      parameters:\n        - name: key\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /i18n/db/translations:\n    get:\n      tags:\n        - tools\n      summary: List database translations (used to overrides client application translations).\n      operationId: getDbTranslations\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /i18n/packages:\n    get:\n      tags:\n        - tools\n      summary: Get list of translation packages.\n      operationId: getTranslationsPackage\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n  /i18n/packages/{pack}:\n    get:\n      tags:\n        - tools\n      summary: Get a translation package.\n      operationId: getTranslationsPackage_1\n      parameters:\n        - name: pack\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /i18n/cache:\n    delete:\n      tags:\n        - tools\n      summary: Clean translation packages cache.\n      operationId: cleanTranslationsPackagesCache\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /i18n/db:\n    get:\n      tags:\n        - tools\n      summary: List translations for database description table\n      operationId: getTranslations\n      parameters:\n        - name: type\n          in: query\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: string\n  /tools/migration/steps/{stepName}:\n    put:\n      tags:\n        - tools\n      summary: Call a migration step\n      operationId: callStep\n      parameters:\n        - name: stepName\n          in: path\n          description: Class name to execute corresponding to a migration step. See\n            DatabaseMigrationTask.\n          required: true\n          schema:\n            type: string\n          example: org.fao.geonet.api.records.attachments.MetadataResourceDatabaseMigration\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            text/plain:\n              schema:\n                type: string\n  /operations:\n    get:\n      tags:\n        - operations\n      summary: Get operations\n      description: Return the list of operations. Operations are used to define authorization\n        per group. Extending the list of default operations (ie. view, dynamic, download,\n        editing, notify, featured) might be feasible but is experimental.\u003cbr/\u003e Featured\n        is not really used anymore (was used in past version for home page highlights).\n      operationId: getOperations\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Operation'\n  /ui:\n    get:\n      tags:\n        - ui\n      summary: Get UI configuration\n      operationId: getUiConfigurations\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of configuration.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UiSetting'\n  /ui/{uiIdentifier}:\n    get:\n      tags:\n        - ui\n      summary: Get a UI configuration\n      operationId: getUiConfiguration\n      parameters:\n        - name: uiIdentifier\n          in: path\n          description: UI identifier\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: UI configuration.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UiSetting'\n    put:\n      tags:\n        - ui\n      summary: Update a UI configuration\n      operationId: updateUiConfiguration\n      parameters:\n        - name: uiIdentifier\n          in: path\n          description: UI configuration identifier\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UiSetting'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            '*/*':\n              schema:\n                type: string\n        \"204\":\n          description: UI configuration updated.\n          content:\n            '*/*':\n              schema:\n                type: string\n  /site/info:\n    get:\n      tags:\n        - site\n      summary: Get site informations\n      operationId: getInformation\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Site information.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SiteInformation'\n  /site/index/status:\n    get:\n      tags:\n        - site\n      summary: Index status\n      operationId: indexStatus\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Status'\n  /site/index/synchronized:\n    get:\n      tags:\n        - site\n      summary: Index synchronized with database\n      operationId: indexAndDbSynchronizationStatus\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: object\n  /site/info/transforms:\n    get:\n      tags:\n        - site\n      summary: Get XSL tranformations available\n      description: XSL transformations may be applied while importing or harvesting\n        records.\n      operationId: getXslTransformations\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: XSLT available.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /site/settings:\n    get:\n      tags:\n        - site\n      summary: Get settings\n      description: Return public settings for anonymous users, internals are allowed\n        for authenticated.\n      operationId: getSettingsSet\n      parameters:\n        - name: set\n          in: query\n          description: Setting set. A common set of settings to retrieve.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - INSPIRE\n                - CSW\n                - HARVESTER\n                - USER_GROUP_ONLY\n                - AUTH\n                - READ_ONLY\n                - INDEX\n                - SYSTEMINFO\n                - STAGING_PROFILE\n                - TYPE\n        - name: key\n          in: query\n          description: Setting key\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Settings.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsListResponse'\n  /site:\n    get:\n      tags:\n        - site\n      summary: Get site (or portal) description\n      operationId: getSiteOrPortalDescription\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Site description.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsListResponse'\n  /site/settings/details:\n    get:\n      tags:\n        - site\n      summary: Get settings with details\n      description: Provides also setting properties.\n      operationId: getSettingsDetails\n      parameters:\n        - name: set\n          in: query\n          description: Setting set. A common set of settings to retrieve.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - INSPIRE\n                - CSW\n                - HARVESTER\n                - USER_GROUP_ONLY\n                - AUTH\n                - READ_ONLY\n                - INDEX\n                - SYSTEMINFO\n                - STAGING_PROFILE\n                - TYPE\n        - name: key\n          in: query\n          description: Setting key\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Settings with details.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Setting'\n  /site/indexing:\n    get:\n      tags:\n        - site\n      summary: Is indexing?\n      operationId: isIndexing\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /site/info/isCasEnabled:\n    get:\n      tags:\n        - site\n      summary: Is CAS enabled?\n      operationId: isCasEnabled\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /site/info/build:\n    get:\n      tags:\n        - site\n      summary: Get build details\n      description: To know when and how this version of the application was built.\n      operationId: getSystemInfo\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Build info.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemInfo'\n  /site/index:\n    put:\n      tags:\n        - site\n      summary: Index\n      operationId: index_1\n      parameters:\n        - name: reset\n          in: query\n          description: Drop and recreate index\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: asynchronous\n          in: query\n          description: Asynchronous mode (only on all records. ie. no selection bucket)\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: havingXlinkOnly\n          in: query\n          description: Records having only XLinks\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: indices\n          in: query\n          description: Index. By default only remove record index.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n            default: records\n        - name: bucket\n          in: query\n          description: Selection bucket name\n          required: false\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n  /site/info/readonly:\n    get:\n      tags:\n        - site\n      summary: Is in read-only mode?\n      operationId: isReadOnly\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: boolean\n  /reports/users:\n    get:\n      tags:\n        - records\n      summary: Get the list of users \"active\" during a time period.\n      operationId: getActiveUsers\n      parameters:\n        - name: dateFrom\n          in: query\n          description: From date of users login date\n          required: true\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: To date of users login date\n          required: true\n          schema:\n            type: string\n        - name: groups\n          in: query\n          description: Group(s) for the users\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of users \"active\" during a time period.\n  /reports/datauploads:\n    get:\n      tags:\n        - records\n      summary: Get uploaded files to metadata records during a period.\n      operationId: getReportDataUploads\n      parameters:\n        - name: dateFrom\n          in: query\n          description: From date of the metadata uploads\n          required: true\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: To date of the metadata uploads\n          required: true\n          schema:\n            type: string\n        - name: groups\n          in: query\n          description: Metadata group(s)\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n  /reports/metadatainternal:\n    get:\n      tags:\n        - records\n      summary: Get the metadata not published during a period.\n      operationId: getReportInternalMetadata\n      parameters:\n        - name: dateFrom\n          in: query\n          description: From date of metadata change date\n          required: true\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: To date of metadata change date\n          required: true\n          schema:\n            type: string\n        - name: groups\n          in: query\n          description: Metadata group(s)\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Metadata not published during a period.\n  /reports/metadataupdated:\n    get:\n      tags:\n        - records\n      summary: Get the updated metadata during a period.\n      operationId: getReportUpdatedMetadata\n      parameters:\n        - name: dateFrom\n          in: query\n          description: From date of metadata change date\n          required: true\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: To date of metadata change date\n          required: true\n          schema:\n            type: string\n        - name: groups\n          in: query\n          description: Metadata group(s)\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: Updated metadata during a period.\n  /reports/datadownloads:\n    get:\n      tags:\n        - records\n      summary: Get list of metadata file downloads\n      operationId: getReportDataDownloads\n      parameters:\n        - name: dateFrom\n          in: query\n          description: From date of the metadata downloads\n          required: true\n          schema:\n            type: string\n        - name: dateTo\n          in: query\n          description: To date of the metadata downloads\n          required: true\n          schema:\n            type: string\n        - name: groups\n          in: query\n          description: Metadata group(s)\n          required: false\n          schema:\n            type: array\n            items:\n              type: integer\n              format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: List of metadata file downloads.\n  /userselections:\n    get:\n      tags:\n        - userselections\n      summary: Get list of user selection sets\n      operationId: getSelectionList\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Selection'\n    put:\n      tags:\n        - userselections\n      summary: Add a user selection set\n      operationId: createPersistentSelectionType\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Selection'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"201\":\n          description: Selection created.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: A selection with that id or name already exist.\n          content:\n            application/json:\n              schema:\n                type: string\n  /userselections/{selectionIdentifier}/{userIdentifier}:\n    get:\n      tags:\n        - userselections\n      summary: Get record in a user selection set\n      operationId: getSelectionRecords\n      parameters:\n        - name: selectionIdentifier\n          in: path\n          description: Selection identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userIdentifier\n          in: path\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n    put:\n      tags:\n        - userselections\n      summary: Add items to a user selection set\n      operationId: addToUserSelection\n      parameters:\n        - name: selectionIdentifier\n          in: path\n          description: Selection identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userIdentifier\n          in: path\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: uuid\n          in: query\n          description: One or more record UUIDs.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Selection or user or at least one UUID not found.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"201\":\n          description: Records added to selection set.\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      tags:\n        - userselections\n      summary: Remove items to a user selection set\n      operationId: deleteFromUserSelection\n      parameters:\n        - name: selectionIdentifier\n          in: path\n          description: Selection identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: userIdentifier\n          in: path\n          description: User identifier\n          required: true\n          schema:\n            type: integer\n            format: int32\n        - name: uuid\n          in: query\n          description: One or more record UUIDs. If null, remove all.\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"403\":\n          description: Operation not allowed. Only UserAdmins can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"204\":\n          description: Items removed from a set.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"404\":\n          description: Selection or user not found.\n          content:\n            application/json:\n              schema:\n                type: string\n  /userfeedback:\n    get:\n      tags:\n        - userfeedback\n      summary: 'Finds a list of user feedback records. '\n      description: ' This list will include also the draft user feedback if the client\n        is logged as reviewer.'\n      operationId: getUserComments\n      parameters:\n        - name: metadataUuid\n          in: query\n          description: Metadata record UUID.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: size\n          in: query\n          description: Maximum number of feedback to return.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: -1\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserFeedbackDTO'\n    post:\n      tags:\n        - userfeedback\n      summary: Creates a user feedback\n      description: Creates a user feedback in draft status if the user is not logged\n        in.\n      operationId: newUserFeedback\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserFeedbackDTO'\n        required: true\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: string\n  /userfeedback/ratingcriteria:\n    get:\n      tags:\n        - userfeedback\n      summary: Get list of rating criteria\n      operationId: getRatingCriteria\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RatingCriteria'\n  /userfeedback/{uuid}:\n    get:\n      tags:\n        - userfeedback\n      summary: Finds a specific user feedback\n      operationId: getUserComment\n      parameters:\n        - name: uuid\n          in: path\n          description: User feedback UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFeedbackDTO'\n    delete:\n      tags:\n        - userfeedback\n      summary: Removes a user feedback\n      description: Removes a user feedback\n      operationId: deleteUserFeedback\n      parameters:\n        - name: uuid\n          in: path\n          description: User feedback UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"204\":\n          description: User feedback removed.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n          content:\n            application/json:\n              schema:\n                type: string\n  /records/{metadataUuid}/userfeedbackrating:\n    get:\n      tags:\n        - userfeedback\n      summary: Provides an average rating for a metadata record\n      operationId: getMetadataRating\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Metadata record UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RatingAverage'\n  /records/{metadataUuid}/userfeedback:\n    get:\n      tags:\n        - userfeedback\n      summary: 'Finds a list of user feedback for a specific records. '\n      description: ' This list will include also the draft user feedback if the client\n        is logged as reviewer.'\n      operationId: getUserCommentsOnARecord\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Metadata record UUID.\n          required: true\n          schema:\n            type: string\n        - name: size\n          in: query\n          description: Maximum number of feedback to return.\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: -1\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserFeedbackDTO'\n  /records/{metadataUuid}/alert:\n    post:\n      tags:\n        - userfeedback\n      summary: Send an email to catalogue administrator or record's contact\n      operationId: sendEmailToContact\n      parameters:\n        - name: metadataUuid\n          in: path\n          description: Metadata record UUID.\n          required: true\n          schema:\n            type: string\n        - name: recaptcha\n          in: query\n          description: Recaptcha validation key.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: name\n          in: query\n          description: User name.\n          required: true\n          schema:\n            type: string\n        - name: org\n          in: query\n          description: User organisation.\n          required: true\n          schema:\n            type: string\n        - name: email\n          in: query\n          description: User email address.\n          required: true\n          schema:\n            type: string\n        - name: comments\n          in: query\n          description: A comment or question.\n          required: true\n          schema:\n            type: string\n        - name: phone\n          in: query\n          description: User phone number.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n        - name: subject\n          in: query\n          description: Email subject.\n          required: false\n          schema:\n            type: string\n            default: User feedback\n        - name: function\n          in: query\n          description: User function.\n          required: false\n          schema:\n            type: string\n            default: '-'\n        - name: type\n          in: query\n          description: Comment type.\n          required: false\n          schema:\n            type: string\n            default: '-'\n        - name: category\n          in: query\n          description: Comment category.\n          required: false\n          schema:\n            type: string\n            default: '-'\n        - name: metadataEmail\n          in: query\n          description: List of record's contact to send this email.\n          required: false\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                type: string\n  /userfeedback/{uuid}/publish:\n    get:\n      tags:\n        - userfeedback\n      summary: Publishes a feedback\n      description: For reviewers\n      operationId: publishFeedback\n      parameters:\n        - name: uuid\n          in: path\n          description: User feedback UUID.\n          required: true\n          schema:\n            type: string\n      responses:\n        default:\n          description: default response\n          content:\n            application/json: {}\n        \"404\":\n          description: Resource not found.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"204\":\n          description: User feedback published.\n          content:\n            application/json:\n              schema:\n                type: string\n        \"403\":\n          description: Operation not allowed. Only Reviewvers can access it.\n          content:\n            application/json:\n              schema:\n                type: string\ncomponents:\n  schemas:\n    Associated:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/AssociatedSiblingMetadataItem'\n    AssociatedSiblingMetadataItem:\n      required:\n        - description\n        - mdType\n        - title\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          $ref: '#/components/schemas/MultilingualValue'\n        type:\n          type: string\n        title:\n          $ref: '#/components/schemas/MultilingualValue'\n        description:\n          $ref: '#/components/schemas/Description'\n        mdType:\n          type: array\n          items:\n            type: string\n        origin:\n          type: string\n        agg_isTemporalStatOf:\n          type: array\n          items:\n            type: string\n        agg_largerWorkCitation:\n          type: array\n          items:\n            type: string\n        agg_isDescriptionOf:\n          type: array\n          items:\n            type: string\n    AttributeTable:\n      type: object\n      properties:\n        element:\n          type: array\n          items:\n            $ref: '#/components/schemas/Element'\n    Children:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    Dataset:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    Description:\n      type: object\n      properties:\n        value:\n          type: array\n          items:\n            $ref: '#/components/schemas/LocalizedString'\n    Element:\n      type: object\n      properties:\n        name:\n          type: string\n        definition:\n          type: string\n        code:\n          type: string\n        link:\n          type: string\n        type:\n          type: string\n        values:\n          type: array\n          items:\n            $ref: '#/components/schemas/Values'\n    FCRelatedMetadataItem:\n      required:\n        - description\n        - featureType\n        - mdType\n        - title\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          $ref: '#/components/schemas/MultilingualValue'\n        type:\n          type: string\n        title:\n          $ref: '#/components/schemas/MultilingualValue'\n        description:\n          $ref: '#/components/schemas/Description'\n        mdType:\n          type: array\n          items:\n            type: string\n        origin:\n          type: string\n        featureType:\n          $ref: '#/components/schemas/FeatureType'\n    Fcat:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/FCRelatedMetadataItem'\n    FeatureType:\n      type: object\n      properties:\n        attributeTable:\n          $ref: '#/components/schemas/AttributeTable'\n    Hasfeaturecats:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    Hassource:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    LocalizedString:\n      type: object\n      properties:\n        value:\n          type: string\n        lang:\n          type: string\n          xml:\n            attribute: true\n        href:\n          type: string\n          xml:\n            attribute: true\n    MultilingualValue:\n      type: object\n      properties:\n        value:\n          type: array\n          items:\n            $ref: '#/components/schemas/LocalizedString'\n    Online:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedLinkItem'\n    Parent:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    Related:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    RelatedLinkItem:\n      required:\n        - description\n        - title\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          $ref: '#/components/schemas/MultilingualValue'\n        type:\n          type: string\n        title:\n          $ref: '#/components/schemas/MultilingualValue'\n        protocol:\n          type: string\n        description:\n          $ref: '#/components/schemas/Description'\n        function:\n          type: string\n        applicationProfile:\n          type: string\n    RelatedMetadataItem:\n      required:\n        - description\n        - mdType\n        - title\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          $ref: '#/components/schemas/MultilingualValue'\n        type:\n          type: string\n        title:\n          $ref: '#/components/schemas/MultilingualValue'\n        description:\n          $ref: '#/components/schemas/Description'\n        mdType:\n          type: array\n          items:\n            type: string\n        origin:\n          type: string\n    RelatedResponse:\n      type: object\n      properties:\n        children:\n          $ref: '#/components/schemas/Children'\n        parent:\n          $ref: '#/components/schemas/Parent'\n        siblings:\n          $ref: '#/components/schemas/Siblings'\n        associated:\n          $ref: '#/components/schemas/Associated'\n        services:\n          $ref: '#/components/schemas/Service'\n        datasets:\n          $ref: '#/components/schemas/Dataset'\n        fcats:\n          $ref: '#/components/schemas/Fcat'\n        hasfeaturecats:\n          $ref: '#/components/schemas/Hasfeaturecats'\n        sources:\n          $ref: '#/components/schemas/Source'\n        hassources:\n          $ref: '#/components/schemas/Hassource'\n        related:\n          $ref: '#/components/schemas/Related'\n        onlines:\n          $ref: '#/components/schemas/Online'\n        thumbnails:\n          $ref: '#/components/schemas/Thumbnail'\n      xml:\n        name: related\n    RelatedSiblingMetadataItem:\n      required:\n        - associationType\n        - description\n        - initiativeType\n        - mdType\n        - title\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          $ref: '#/components/schemas/MultilingualValue'\n        type:\n          type: string\n        title:\n          $ref: '#/components/schemas/MultilingualValue'\n        description:\n          $ref: '#/components/schemas/Description'\n        mdType:\n          type: array\n          items:\n            type: string\n        origin:\n          type: string\n        associationType:\n          type: string\n        initiativeType:\n          type: string\n    RelatedThumbnailItem:\n      required:\n        - title\n      type: object\n      properties:\n        id:\n          type: string\n        url:\n          $ref: '#/components/schemas/MultilingualValue'\n        type:\n          type: string\n        title:\n          $ref: '#/components/schemas/MultilingualValue'\n    Service:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    Siblings:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedSiblingMetadataItem'\n    Source:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedMetadataItem'\n    Thumbnail:\n      type: object\n      properties:\n        item:\n          type: array\n          items:\n            $ref: '#/components/schemas/RelatedThumbnailItem'\n    Values:\n      type: object\n      properties:\n        label:\n          type: string\n        code:\n          type: string\n        definition:\n          type: string\n    InfoReport:\n      type: object\n      properties:\n        message:\n          type: string\n        uuid:\n          type: string\n        draft:\n          type: boolean\n        approved:\n          type: boolean\n        date:\n          type: string\n    Report:\n      type: object\n      properties:\n        message:\n          type: string\n        uuid:\n          type: string\n        draft:\n          type: boolean\n        approved:\n          type: boolean\n        date:\n          type: string\n    SimpleMetadataProcessingReport:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Report'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/InfoReport'\n        uuid:\n          type: string\n          xml:\n            attribute: true\n        totalRecords:\n          type: integer\n          format: int32\n          writeOnly: true\n        metadata:\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n            format: int32\n        metadataErrors:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/Report'\n          xml:\n            name: errors\n        metadataInfos:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/InfoReport'\n          xml:\n            name: infos\n        numberOfRecordNotFound:\n          type: integer\n          format: int32\n        numberOfRecordsNotEditable:\n          type: integer\n          format: int32\n        numberOfRecords:\n          type: integer\n          format: int32\n          xml:\n            attribute: true\n        numberOfNullRecords:\n          type: integer\n          format: int32\n        numberOfRecordsProcessed:\n          type: integer\n          format: int32\n        numberOfRecordsWithErrors:\n          type: integer\n          format: int32\n        running:\n          type: boolean\n        startIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        endIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        ellapsedTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        totalTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: report\n    ExtentDto:\n      type: object\n      properties:\n        href:\n          type: string\n        type:\n          type: string\n        xpath:\n          type: string\n        description:\n          type: string\n    ExternalResourceManagementProperties:\n      type: object\n      properties:\n        url:\n          type: string\n        windowParameters:\n          type: string\n        modal:\n          type: boolean\n    MetadataResource:\n      type: object\n      properties:\n        version:\n          type: string\n        filename:\n          type: string\n        url:\n          type: string\n        metadataUuid:\n          type: string\n        metadataId:\n          type: integer\n          format: int32\n        approved:\n          type: boolean\n        visibility:\n          type: string\n          enum:\n            - public\n            - private\n        externalResourceManagementProperties:\n          $ref: '#/components/schemas/ExternalResourceManagementProperties'\n        lastModification:\n          type: string\n          format: date-time\n        id:\n          type: string\n        size:\n          type: integer\n          format: int64\n      xml:\n        name: resource\n    IsoLanguage:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        code:\n          type: string\n        shortCode:\n          type: string\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    XsltMetadataProcessingReport:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Report'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/InfoReport'\n        uuid:\n          type: string\n          xml:\n            attribute: true\n        totalRecords:\n          type: integer\n          format: int32\n          writeOnly: true\n        metadata:\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n            format: int32\n        metadataErrors:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/Report'\n          xml:\n            name: errors\n        metadataInfos:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/InfoReport'\n          xml:\n            name: infos\n        processId:\n          type: string\n          xml:\n            name: process\n            attribute: true\n        noProcessFoundCount:\n          type: integer\n          format: int32\n        numberOfRecordNotFound:\n          type: integer\n          format: int32\n        numberOfRecordsNotEditable:\n          type: integer\n          format: int32\n        numberOfRecords:\n          type: integer\n          format: int32\n          xml:\n            attribute: true\n        numberOfNullRecords:\n          type: integer\n          format: int32\n        numberOfRecordsProcessed:\n          type: integer\n          format: int32\n        numberOfRecordsWithErrors:\n          type: integer\n          format: int32\n        running:\n          type: boolean\n        startIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        endIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        ellapsedTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        totalTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: report\n    OwnerResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        records:\n          type: integer\n          format: int64\n    UserGroupsResponse:\n      type: object\n      properties:\n        userId:\n          type: integer\n          format: int32\n        userName:\n          type: string\n        groupId:\n          type: integer\n          format: int32\n        groupName:\n          type: string\n        userProfile:\n          type: string\n    TransferRequest:\n      type: object\n      properties:\n        sourceUser:\n          type: integer\n          format: int32\n        sourceGroup:\n          type: integer\n          format: int32\n        targetUser:\n          type: integer\n          format: int32\n        targetGroup:\n          type: integer\n          format: int32\n    UserSearchDto:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        url:\n          type: string\n        featuredType:\n          type: string\n        creationDate:\n          type: string\n        creatorId:\n          type: integer\n          format: int32\n        creator:\n          type: string\n        logo:\n          type: string\n        names:\n          type: object\n          additionalProperties:\n            type: string\n        groups:\n          type: array\n          items:\n            type: integer\n            format: int32\n    PaginatedUserSearchResponse:\n      type: object\n      properties:\n        total:\n          type: integer\n          format: int64\n        rows:\n          type: array\n          items:\n            $ref: '#/components/schemas/UserSearchDto'\n    MetadataIdentifierTemplate:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        template:\n          type: string\n        systemProvided_JPAWorkaround:\n          type: string\n          writeOnly: true\n        systemProvided:\n          type: boolean\n        systemDefault:\n          type: boolean\n          writeOnly: true\n        name:\n          type: string\n    Category:\n      type: object\n      properties:\n        id:\n          type: string\n          xml:\n            attribute: true\n        label:\n          type: string\n          xml:\n            attribute: true\n    CategoryResponse:\n      type: object\n      properties:\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    ListRegionsResponse:\n      type: object\n      properties:\n        region:\n          type: array\n          items:\n            $ref: '#/components/schemas/RegionResponse'\n        categories:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/CategoryResponse'\n        regions:\n          type: array\n          items:\n            $ref: '#/components/schemas/RegionResponse'\n        count:\n          type: integer\n          format: int32\n          xml:\n            attribute: true\n      xml:\n        name: response\n    RegionResponse:\n      type: object\n      properties:\n        north:\n          type: number\n          format: double\n        east:\n          type: number\n          format: double\n        south:\n          type: number\n          format: double\n        west:\n          type: number\n          format: double\n        label:\n          type: object\n          additionalProperties:\n            type: string\n        hasGeom:\n          type: boolean\n          xml:\n            attribute: true\n        categoryId:\n          type: string\n          xml:\n            attribute: true\n        id:\n          type: string\n          xml:\n            attribute: true\n    BatchEditing:\n      required:\n        - section\n      type: object\n      properties:\n        section:\n          type: array\n          items:\n            $ref: '#/components/schemas/Section'\n      xml:\n        name: batchEditing\n    Field:\n      type: object\n      properties:\n        template:\n          type: string\n        name:\n          type: string\n          xml:\n            attribute: true\n        xpath:\n          type: string\n          xml:\n            attribute: true\n        indexField:\n          type: string\n          xml:\n            attribute: true\n        use:\n          type: string\n          xml:\n            attribute: true\n        removable:\n          type: boolean\n          xml:\n            attribute: true\n        insertMode:\n          type: string\n          xml:\n            attribute: true\n        codelist:\n          type: string\n          xml:\n            attribute: true\n    Section:\n      required:\n        - field\n      type: object\n      properties:\n        field:\n          type: array\n          items:\n            $ref: '#/components/schemas/Field'\n        name:\n          type: string\n          xml:\n            attribute: true\n    MetadataSchema:\n      type: object\n      properties:\n        name:\n          type: string\n        titles:\n          type: object\n          additionalProperties:\n            type: string\n        descriptions:\n          type: object\n          additionalProperties:\n            type: string\n        standardUrl:\n          type: string\n        targetNamespace:\n          type: string\n        namespaces:\n          type: object\n          additionalProperties:\n            type: string\n        readwriteUUID:\n          type: boolean\n        schematronRules:\n          type: array\n          items:\n            type: string\n        version:\n          type: string\n        appMinorVersionSupported:\n          type: string\n        appMajorVersionSupported:\n          type: string\n        canEdit:\n          type: boolean\n          writeOnly: true\n        rootAppInfoElements:\n          type: array\n          writeOnly: true\n          items:\n            $ref: '#/components/schemas/Element'\n        dependsOn:\n          type: string\n        operationFilters:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/PairStringElement'\n          writeOnly: true\n    PairStringElement:\n      type: object\n    Codelist:\n      type: object\n      properties:\n        entry:\n          type: array\n          items:\n            $ref: '#/components/schemas/Entry'\n        name:\n          type: string\n          xml:\n            attribute: true\n        alias:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: codelist\n    Entry:\n      required:\n        - code\n        - description\n        - label\n      type: object\n      properties:\n        code:\n          type: string\n        label:\n          type: string\n        description:\n          type: string\n        hideInEditMode:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: entry\n    JSONObject:\n      type: object\n    ISODate:\n      type: object\n      properties:\n        internalDateTime:\n          type: string\n          format: date-time\n        hours:\n          type: integer\n          format: int32\n        minutes:\n          type: integer\n          format: int32\n        seconds:\n          type: integer\n          format: int32\n        years:\n          type: integer\n          format: int32\n        months:\n          type: integer\n          format: int32\n        days:\n          type: integer\n          format: int32\n        dateAndTime:\n          type: string\n        dateAsString:\n          type: string\n        timeInSeconds:\n          type: integer\n          format: int64\n        dateOnly:\n          type: boolean\n        dateYearOnly:\n          type: boolean\n        dateYearMonthOnly:\n          type: boolean\n        timeAsString:\n          type: string\n    Link:\n      type: object\n      properties:\n        records:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/MetadataLink'\n        linkStatus:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/LinkStatus'\n        lastState:\n          type: integer\n          format: int32\n        lastCheck:\n          $ref: '#/components/schemas/ISODate'\n        protocol:\n          type: string\n        url:\n          type: string\n        id:\n          type: integer\n          format: int32\n        linkType:\n          type: string\n          enum:\n            - HTTP\n            - METADATA\n    LinkStatus:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        checkDate:\n          $ref: '#/components/schemas/ISODate'\n        statusValue:\n          type: string\n        statusInfo:\n          type: string\n        batchKey:\n          type: string\n        failing:\n          type: boolean\n    MetadataLink:\n      type: object\n      properties:\n        metadataId:\n          type: integer\n          format: int32\n        metadataUuid:\n          type: string\n    PageLink:\n      type: object\n      properties:\n        totalPages:\n          type: integer\n          format: int32\n        totalElements:\n          type: integer\n          format: int64\n        sort:\n          $ref: '#/components/schemas/Sort'\n        last:\n          type: boolean\n        numberOfElements:\n          type: integer\n          format: int32\n        first:\n          type: boolean\n        pageable:\n          $ref: '#/components/schemas/Pageable'\n        size:\n          type: integer\n          format: int32\n        content:\n          type: array\n          items:\n            $ref: '#/components/schemas/Link'\n        number:\n          type: integer\n          format: int32\n        empty:\n          type: boolean\n    Pageable:\n      type: object\n      properties:\n        sort:\n          $ref: '#/components/schemas/Sort'\n        paged:\n          type: boolean\n        unpaged:\n          type: boolean\n        pageNumber:\n          type: integer\n          format: int32\n        pageSize:\n          type: integer\n          format: int32\n        offset:\n          type: integer\n          format: int64\n    Sort:\n      type: object\n      properties:\n        sorted:\n          type: boolean\n        unsorted:\n          type: boolean\n        empty:\n          type: boolean\n    PageJSONWrapper:\n      type: object\n      properties:\n        format:\n          type: string\n          enum:\n            - LINK\n            - HTML\n            - TEXT\n            - MARKDOWN\n            - WIKI\n        status:\n          type: string\n          enum:\n            - PUBLIC\n            - PUBLIC_ONLY\n            - PRIVATE\n            - HIDDEN\n        link:\n          type: string\n        sections:\n          type: array\n          items:\n            type: string\n            enum:\n              - ALL\n              - TOP\n              - FOOTER\n              - MENU\n              - SUBMENU\n              - CUSTOM_MENU1\n              - CUSTOM_MENU2\n              - CUSTOM_MENU3\n              - DRAFT\n        linkText:\n          type: string\n        language:\n          type: string\n    Address:\n      type: object\n      properties:\n        state:\n          type: string\n        address:\n          type: string\n        id:\n          type: integer\n          format: int32\n        city:\n          type: string\n        zip:\n          type: string\n        country:\n          type: string\n    GrantedAuthority:\n      type: object\n      properties:\n        authority:\n          type: string\n    MetadataStatus:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        metadataId:\n          type: integer\n          format: int32\n        userId:\n          type: integer\n          format: int32\n        changeMessage:\n          type: string\n        statusValue:\n          $ref: '#/components/schemas/StatusValue'\n        previousState:\n          type: string\n        currentState:\n          type: string\n        uuid:\n          type: string\n        titles:\n          type: string\n          deprecated: true\n        owner:\n          type: integer\n          format: int32\n        changeDate:\n          $ref: '#/components/schemas/ISODate'\n        dueDate:\n          $ref: '#/components/schemas/ISODate'\n        closeDate:\n          $ref: '#/components/schemas/ISODate'\n        asXml:\n          $ref: '#/components/schemas/Element'\n        relatedMetadataStatusId:\n          type: integer\n          format: int32\n    MetadataWorkflowStatusResponse:\n      type: object\n      properties:\n        currentStatus:\n          $ref: '#/components/schemas/MetadataStatus'\n        reviewers:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n        hasEditPermission:\n          type: boolean\n        status:\n          type: array\n          items:\n            $ref: '#/components/schemas/StatusValue'\n    StatusValue:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - workflow\n            - task\n            - event\n        notificationLevel:\n          type: string\n          enum:\n            - statusUserOwner\n            - catalogueAdministrator\n            - catalogueProfileAdministrator\n            - catalogueProfileUserAdmin\n            - catalogueProfileReviewer\n            - catalogueProfileEditor\n            - catalogueProfileRegisteredUser\n            - catalogueProfileGuest\n            - recordProfileReviewer\n            - recordUserAuthor\n        displayOrder:\n          type: integer\n          format: int32\n        id:\n          type: integer\n          format: int32\n        reserved:\n          type: boolean\n        reserved_JpaWorkaround:\n          type: string\n          writeOnly: true\n        name:\n          type: string\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    User:\n      type: object\n      properties:\n        profile:\n          type: string\n          enum:\n            - Administrator\n            - UserAdmin\n            - Reviewer\n            - Editor\n            - RegisteredUser\n            - Guest\n            - Monitor\n        surname:\n          type: string\n        enabled:\n          type: boolean\n        username:\n          type: string\n        id:\n          type: integer\n          format: int32\n        email:\n          type: string\n        emailAddresses:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n        addresses:\n          uniqueItems: true\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n        primaryAddress:\n          $ref: '#/components/schemas/Address'\n        organisation:\n          type: string\n        kind:\n          type: string\n        security:\n          $ref: '#/components/schemas/UserSecurity'\n        lastLoginDate:\n          type: string\n        authorities:\n          type: array\n          items:\n            $ref: '#/components/schemas/GrantedAuthority'\n        accountNonExpired:\n          type: boolean\n        accountNonLocked:\n          type: boolean\n        credentialsNonExpired:\n          type: boolean\n        name:\n          type: string\n    UserSecurity:\n      type: object\n      properties:\n        authType:\n          type: string\n        nodeId:\n          type: string\n        securityNotificationsString:\n          $ref: '#/components/schemas/UserSecurity'\n        securityNotifications:\n          uniqueItems: true\n          type: array\n          items:\n            type: string\n            enum:\n              - UPDATE_HASH_REQUIRED\n              - UNKNOWN\n    MetadataStatusResponse:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        metadataId:\n          type: integer\n          format: int32\n        userId:\n          type: integer\n          format: int32\n        changeMessage:\n          type: string\n        statusValue:\n          $ref: '#/components/schemas/StatusValue'\n        previousState:\n          type: string\n        currentState:\n          type: string\n        uuid:\n          type: string\n        titles:\n          type: string\n          deprecated: true\n        authorName:\n          type: string\n        authorEmail:\n          type: string\n        authorProfile:\n          type: string\n        ownerName:\n          type: string\n        ownerEmail:\n          type: string\n        ownerProfile:\n          type: string\n        title:\n          type: string\n        currentStatus:\n          type: string\n        previousStatus:\n          type: string\n        currentStateEmpty:\n          type: boolean\n        previousStateEmpty:\n          type: boolean\n        statusId:\n          type: integer\n          format: int32\n        owner:\n          type: integer\n          format: int32\n        changeDate:\n          $ref: '#/components/schemas/ISODate'\n        dueDate:\n          $ref: '#/components/schemas/ISODate'\n        closeDate:\n          $ref: '#/components/schemas/ISODate'\n        asXml:\n          $ref: '#/components/schemas/Element'\n        relatedMetadataStatusId:\n          type: integer\n          format: int32\n    MetadataProcessingReport:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Report'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/InfoReport'\n        uuid:\n          type: string\n          xml:\n            attribute: true\n        totalRecords:\n          type: integer\n          format: int32\n          writeOnly: true\n        metadata:\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n            format: int32\n        metadataErrors:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/Report'\n          xml:\n            name: errors\n        metadataInfos:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/InfoReport'\n          xml:\n            name: infos\n        numberOfRecordNotFound:\n          type: integer\n          format: int32\n        numberOfRecordsNotEditable:\n          type: integer\n          format: int32\n        numberOfRecords:\n          type: integer\n          format: int32\n          xml:\n            attribute: true\n        numberOfNullRecords:\n          type: integer\n          format: int32\n        numberOfRecordsProcessed:\n          type: integer\n          format: int32\n        numberOfRecordsWithErrors:\n          type: integer\n          format: int32\n        running:\n          type: boolean\n        startIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        endIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        ellapsedTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        totalTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: report\n    MetadataCategory:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    SavedQuery:\n      type: object\n      properties:\n        id:\n          type: string\n        xpath:\n          type: string\n        label:\n          type: string\n        cleanValues:\n          type: string\n        parameters:\n          type: array\n          items:\n            type: string\n    GroupPrivilege:\n      type: object\n      properties:\n        operations:\n          type: object\n          additionalProperties:\n            type: boolean\n        group:\n          type: integer\n          format: int32\n        userProfiles:\n          type: array\n          items:\n            type: string\n            enum:\n              - Administrator\n              - UserAdmin\n              - Reviewer\n              - Editor\n              - RegisteredUser\n              - Guest\n              - Monitor\n        userGroup:\n          type: boolean\n        reserved:\n          type: boolean\n        userProfile:\n          type: array\n          writeOnly: true\n          items:\n            type: string\n            enum:\n              - Administrator\n              - UserAdmin\n              - Reviewer\n              - Editor\n              - RegisteredUser\n              - Guest\n              - Monitor\n    SharingResponse:\n      type: object\n      properties:\n        privileges:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupPrivilege'\n        owner:\n          type: string\n        groupOwner:\n          type: string\n    GroupOperations:\n      type: object\n      properties:\n        operations:\n          type: object\n          additionalProperties:\n            type: boolean\n        group:\n          type: integer\n          format: int32\n    SharingParameter:\n      type: object\n      properties:\n        privileges:\n          type: array\n          items:\n            $ref: '#/components/schemas/GroupOperations'\n        clear:\n          type: boolean\n    MetadataReplacementProcessingReport:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Report'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/InfoReport'\n        uuid:\n          type: string\n          xml:\n            attribute: true\n        totalRecords:\n          type: integer\n          format: int32\n          writeOnly: true\n        metadata:\n          uniqueItems: true\n          type: array\n          items:\n            type: integer\n            format: int32\n        metadataErrors:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/Report'\n          xml:\n            name: errors\n        metadataInfos:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              $ref: '#/components/schemas/InfoReport'\n          xml:\n            name: infos\n        processId:\n          type: string\n          xml:\n            name: process\n            attribute: true\n        metadataChanges:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/ReplaceReport'\n          xml:\n            name: changes\n        numberOfRecordsChanged:\n          type: integer\n          format: int32\n        numberOfRecordsNotChanged:\n          type: integer\n          format: int32\n        noProcessFoundCount:\n          type: integer\n          format: int32\n        numberOfRecordNotFound:\n          type: integer\n          format: int32\n        numberOfRecordsNotEditable:\n          type: integer\n          format: int32\n        numberOfRecords:\n          type: integer\n          format: int32\n          xml:\n            attribute: true\n        numberOfNullRecords:\n          type: integer\n          format: int32\n        numberOfRecordsProcessed:\n          type: integer\n          format: int32\n        numberOfRecordsWithErrors:\n          type: integer\n          format: int32\n        running:\n          type: boolean\n        startIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        endIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        ellapsedTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        totalTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: report\n    ReplaceEntryChange:\n      type: object\n      properties:\n        originalVal:\n          type: string\n        changedVal:\n          type: string\n        fieldId:\n          type: string\n    ReplaceReport:\n      type: object\n      properties:\n        message:\n          type: string\n        uuid:\n          type: string\n        draft:\n          type: boolean\n        approved:\n          type: boolean\n        date:\n          type: string\n        elementChanges:\n          type: array\n          items:\n            $ref: '#/components/schemas/ReplaceEntryChange'\n    ProcessingReport:\n      type: object\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/Report'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/InfoReport'\n        uuid:\n          type: string\n          xml:\n            attribute: true\n        running:\n          type: boolean\n        startIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        endIsoDateTime:\n          type: string\n          xml:\n            attribute: true\n        ellapsedTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        totalTimeInSeconds:\n          type: integer\n          format: int64\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n      xml:\n        name: report\n    MeResponse:\n      type: object\n      properties:\n        id:\n          type: string\n        profile:\n          type: string\n        username:\n          type: string\n        name:\n          type: string\n        surname:\n          type: string\n        email:\n          type: string\n        hash:\n          type: string\n        organisation:\n          type: string\n        admin:\n          type: boolean\n        groupsWithRegisteredUser:\n          type: array\n          items:\n            type: integer\n            format: int32\n        groupsWithEditor:\n          type: array\n          items:\n            type: integer\n            format: int32\n        groupsWithReviewer:\n          type: array\n          items:\n            type: integer\n            format: int32\n        groupsWithUserAdmin:\n          type: array\n          items:\n            type: integer\n            format: int32\n    PasswordUpdateParameter:\n      type: object\n      properties:\n        password:\n          type: string\n        changeKey:\n          type: string\n    UserDto:\n      type: object\n      properties:\n        id:\n          type: string\n        profile:\n          type: string\n        username:\n          type: string\n        name:\n          type: string\n        surname:\n          type: string\n        emailAddresses:\n          type: array\n          items:\n            type: string\n        organisation:\n          type: string\n        addresses:\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n        kind:\n          type: string\n        password:\n          type: string\n        groupsRegisteredUser:\n          type: array\n          items:\n            type: string\n        groupsEditor:\n          type: array\n          items:\n            type: string\n        groupsReviewer:\n          type: array\n          items:\n            type: string\n        groupsUserAdmin:\n          type: array\n          items:\n            type: string\n        enabled:\n          type: boolean\n        email:\n          $ref: '#/components/schemas/UserDto'\n    Group:\n      type: object\n      properties:\n        logo:\n          type: string\n        website:\n          type: string\n        defaultCategory:\n          $ref: '#/components/schemas/MetadataCategory'\n        allowedCategories:\n          type: array\n          items:\n            $ref: '#/components/schemas/MetadataCategory'\n        enableAllowedCategories:\n          type: boolean\n        description:\n          type: string\n        id:\n          type: integer\n          format: int32\n        email:\n          type: string\n        referrer:\n          type: integer\n          format: int32\n        reserved:\n          type: boolean\n        name:\n          type: string\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    UserGroup:\n      type: object\n      properties:\n        profile:\n          type: string\n          enum:\n            - Administrator\n            - UserAdmin\n            - Reviewer\n            - Editor\n            - RegisteredUser\n            - Guest\n            - Monitor\n        group:\n          $ref: '#/components/schemas/Group'\n        id:\n          $ref: '#/components/schemas/UserGroupId'\n        user:\n          $ref: '#/components/schemas/User'\n    UserGroupId:\n      type: object\n      properties:\n        profile:\n          type: string\n          enum:\n            - Administrator\n            - UserAdmin\n            - Reviewer\n            - Editor\n            - RegisteredUser\n            - Guest\n            - Monitor\n        groupId:\n          type: integer\n          format: int32\n        userId:\n          type: integer\n          format: int32\n    LogFileResponse:\n      type: object\n      properties:\n        file:\n          type: string\n          xml:\n            attribute: true\n        name:\n          type: string\n          xml:\n            attribute: true\n    Crs:\n      type: object\n      properties:\n        code:\n          type: string\n        authority:\n          type: string\n        version:\n          type: string\n        codeSpace:\n          type: string\n        description:\n          type: string\n    KeywordBean:\n      type: object\n      properties:\n        values:\n          type: object\n          additionalProperties:\n            type: string\n        definitions:\n          type: object\n          additionalProperties:\n            type: string\n        coordEast:\n          type: string\n        coordWest:\n          type: string\n        coordSouth:\n          type: string\n        coordNorth:\n          type: string\n        thesaurusKey:\n          type: string\n        thesaurusInfo:\n          $ref: '#/components/schemas/KeywordBean'\n        namespaceCode:\n          $ref: '#/components/schemas/KeywordBean'\n        definition:\n          type: string\n        uri:\n          type: string\n        value:\n          type: string\n    MapServer:\n      type: object\n      properties:\n        namespace:\n          type: string\n        description:\n          type: string\n        password:\n          type: string\n        username:\n          type: string\n        id:\n          type: integer\n          format: int32\n        namespacePrefix:\n          type: string\n        configurl:\n          type: string\n        wmsurl:\n          type: string\n        wfsurl:\n          type: string\n        wcsurl:\n          type: string\n        stylerurl:\n          type: string\n        pushStyleInWorkspace_JpaWorkaround:\n          type: string\n          writeOnly: true\n        pushStyleInWorkspace:\n          $ref: '#/components/schemas/MapServer'\n        name:\n          type: string\n    AnonymousMapserver:\n      type: object\n      properties:\n        password:\n          type: string\n        username:\n          type: string\n        namespace:\n          type: string\n        description:\n          type: string\n        id:\n          type: integer\n          format: int32\n        namespacePrefix:\n          type: string\n        configurl:\n          type: string\n        wmsurl:\n          type: string\n        wfsurl:\n          type: string\n        wcsurl:\n          type: string\n        stylerurl:\n          type: string\n        pushStyleInWorkspace_JpaWorkaround:\n          type: string\n          writeOnly: true\n        pushStyleInWorkspace:\n          $ref: '#/components/schemas/MapServer'\n        name:\n          type: string\n    BatchEditParameter:\n      required:\n        - value\n        - xpath\n      type: object\n      properties:\n        xpath:\n          type: string\n        value:\n          type: string\n        condition:\n          type: string\n      xml:\n        name: edit\n    IProcessingReport:\n      type: object\n      properties:\n        running:\n          type: boolean\n        uuid:\n          type: string\n        startIsoDateTime:\n          type: string\n        endIsoDateTime:\n          type: string\n        ellapsedTimeInSeconds:\n          type: integer\n          format: int64\n        totalTimeInSeconds:\n          type: integer\n          format: int64\n        type:\n          type: string\n    FeatureResponse:\n      type: object\n      properties:\n        decodeMap:\n          type: object\n          additionalProperties:\n            type: array\n            items:\n              type: string\n      xml:\n        name: related\n    SuggestionType:\n      required:\n        - name\n        - operational\n      type: object\n      properties:\n        name:\n          type: string\n        operational:\n          type: string\n        params:\n          type: string\n        process:\n          type: string\n          xml:\n            attribute: true\n        id:\n          type: string\n          xml:\n            attribute: true\n        category:\n          type: string\n          xml:\n            attribute: true\n        target:\n          type: string\n          xml:\n            attribute: true\n    Reports:\n      type: object\n      properties:\n        report:\n          type: array\n          items:\n            $ref: '#/components/schemas/Report'\n      xml:\n        name: reports\n    UserRegisterDto:\n      type: object\n      properties:\n        profile:\n          type: string\n        username:\n          type: string\n        email:\n          type: string\n        name:\n          type: string\n        surname:\n          type: string\n        organisation:\n          type: string\n        address:\n          $ref: '#/components/schemas/Address'\n        captcha:\n          type: string\n    Operation:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        reserved:\n          type: boolean\n        reservedOperation:\n          type: string\n          enum:\n            - view\n            - download\n            - editing\n            - notify\n            - dynamic\n            - featured\n        name:\n          type: string\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    UiSetting:\n      type: object\n      properties:\n        id:\n          type: string\n        configuration:\n          type: string\n    SiteInformation:\n      type: object\n      properties:\n        catalogue:\n          type: object\n          additionalProperties:\n            type: string\n        index:\n          type: object\n          additionalProperties:\n            type: string\n        main:\n          type: object\n          additionalProperties:\n            type: string\n        database:\n          type: object\n          additionalProperties:\n            type: string\n        version:\n          type: object\n          additionalProperties:\n            type: string\n    Status:\n      type: object\n      properties:\n        id:\n          type: string\n        state:\n          type: string\n          enum:\n            - RED\n            - UNINITIALIZED\n            - YELLOW\n            - GREEN\n            - DISABLED\n        date:\n          type: string\n          format: date-time\n        message:\n          type: string\n    Setting:\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        dataType:\n          type: string\n          enum:\n            - STRING\n            - INT\n            - BOOLEAN\n            - JSON\n        position:\n          type: integer\n          format: int32\n        internal:\n          type: boolean\n        internal_JpaWorkaround:\n          type: string\n          writeOnly: true\n    SettingsListResponse:\n      type: object\n      properties:\n        settings:\n          type: array\n          items:\n            $ref: '#/components/schemas/Setting'\n    SystemInfo:\n      type: object\n      properties:\n        stagingProfile:\n          type: string\n        buildDate:\n          type: string\n        version:\n          type: string\n        subVersion:\n          type: string\n        buildOsInfo:\n          type: string\n        buildJavaVersion:\n          type: string\n        buildJavaVendor:\n          type: string\n        scmUrl:\n          type: string\n        scmRevision:\n          type: string\n        devMode:\n          type: boolean\n    Selection:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        watchable:\n          type: boolean\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    UserFeedbackDTO:\n      type: object\n      properties:\n        uuid:\n          type: string\n        comment:\n          type: string\n        rating:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int32\n        ratingAVG:\n          type: integer\n          format: int32\n        metadataUUID:\n          type: string\n        metadataTitle:\n          type: string\n        authorUserId:\n          type: integer\n          format: int32\n        authorName:\n          type: string\n        authorEmail:\n          type: string\n        authorOrganization:\n          type: string\n        approverName:\n          type: string\n        optionPrivacy:\n          type: boolean\n        published:\n          type: boolean\n        parentUuid:\n          type: string\n        captcha:\n          type: string\n        date:\n          type: string\n        showApproveButton:\n          type: boolean\n        keywords:\n          type: array\n          items:\n            type: string\n    RatingCriteria:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        internal:\n          type: boolean\n        name:\n          type: string\n        label:\n          type: object\n          additionalProperties:\n            type: string\n    RatingAverage:\n      type: object\n      properties:\n        ratingCount:\n          type: integer\n          format: int32\n        ratingAverages:\n          type: object\n          additionalProperties:\n            type: integer\n            format: int32\n        userfeedbackCount:\n          type: integer\n          format: int32\n        lastComment:\n          type: string"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /records/links/csv: get: operation \"getRecordLinksAsCsv\": parameters: parse parameter \"page\": parameter MUST contain either a schema property, or a content property"
}