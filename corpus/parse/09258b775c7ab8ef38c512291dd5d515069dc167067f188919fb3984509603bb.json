{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/stacks-network/stacks-blockchain"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/rpc/openapi.yaml",
			"byteSize": 18050,
			"content": "openapi: 3.0.2\nservers:\n  - url: http://localhost:20443/\n    description: Local\ninfo:\n  title: Stacks 2.0 RPC API\n  version: '1.0.0'\n  description: |\n    This is the documentation for the `stacks-node` RPC interface.\n\npaths:\n  /v2/transactions:\n    post:\n      summary: Broadcast raw transaction\n      tags:\n        - Transactions\n      description: Broadcast raw transactions on the network. You can use the [@stacks/transactions](https://github.com/blockstack/stacks.js) project to generate a raw transaction payload.\n      operationId: post_core_node_transactions\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n            example: binary format of 00000000010400bed38c2aadffa348931bcb542880ff79d607afec000000000000000000000000000000c800012b0b1fff6cccd0974966dcd665835838f0985be508e1322e09fb3d751eca132c492bda720f9ef1768d14fdabed6127560ba52d5e3ac470dcb60b784e97dc88c9030200000000000516df0ba3e79792be7be5e50a370289accfc8c9e032000000000000303974657374206d656d6f00000000000000000000000000000000000000000000000000\n      responses:\n        200:\n          description: Transaction id of successful post of a raw tx to the node's mempool\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: '\"e161978626f216b2141b156ade10501207ae535fa365a13ef5d7a7c9310a09f2\"'\n        400:\n          description: Rejections result in a 400 error\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/post-core-node-transactions-error.schema.json\n              example:\n                $ref: ./api/transaction/post-core-node-transactions-error.example.json\n\n  /v2/contracts/interface/{contract_address}/{contract_name}:\n    get:\n      summary: Get contract interface\n      description: Get contract interface using a `contract_address` and `contract name`\n      tags:\n        - Smart Contracts\n      operationId: get_contract_interface\n      responses:\n        200:\n          description: Contract interface\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-interface.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-interface.example.json\n    parameters:\n      - name: contract_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: tip\n        in: query\n        schema:\n          type: string\n        description: The Stacks chain tip to query from. If tip == latest, the query will be run from the latest\n          known tip (includes unconfirmed state).\n  /v2/map_entry/{contract_address}/{contract_name}/{map_name}:\n    post:\n      summary: Get specific data-map inside a contract\n      tags:\n        - Smart Contracts\n      operationId: get_contract_data_map_entry\n      description: |\n        Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].\n\n        The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.\n\n        In the response, `data` is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-data-map-entry.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-data-map-entry.example.json\n        400:\n          description: Failed loading data map\n      parameters:\n        - name: contract_address\n          in: path\n          required: true\n          description: Stacks address\n          schema:\n            type: string\n        - name: contract_name\n          in: path\n          required: true\n          description: Contract name\n          schema:\n            type: string\n        - name: map_name\n          in: path\n          required: true\n          description: Map name\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field when set to 0\n          schema:\n            type: integer\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from. If tip == latest, the query will be run from the latest\n            known tip (includes unconfirmed state).\n      x-codegen-request-body-name: key\n      requestBody:\n        description: Hex string serialization of the lookup key (which should be a Clarity value)\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n\n  /v2/contracts/source/{contract_address}/{contract_name}:\n    get:\n      summary: Get contract source\n      tags:\n        - Smart Contracts\n      operationId: get_contract_source\n      description: Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-contract-source.schema.json\n              example:\n                $ref: ./api/core-node/get-contract-source.example.json\n    parameters:\n      - name: contract_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: proof\n        in: query\n        description: Returns object without the proof field if set to 0\n        schema:\n          type: integer\n      - name: tip\n        in: query\n        schema:\n          type: string\n        description: The Stacks chain tip to query from. If tip == latest, the query will be run from the latest\n          known tip (includes unconfirmed state).\n        required: false\n\n  /v2/contracts/call-read/{contract_address}/{contract_name}/{function_name}:\n    post:\n      summary: Call read-only function\n      tags:\n        - Smart Contracts\n      operationId: call_read_only_function\n      description: |\n        Call a read-only public function on a given smart contract.\n\n        The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/contract/post-call-read-only-fn.schema.json\n              examples:\n                success:\n                  $ref: ./api/contract/post-call-read-only-fn-success.example.json\n                fail:\n                  $ref: ./api/contract/post-call-read-only-fn-fail.example.json\n      parameters:\n        - name: contract_address\n          in: path\n          required: true\n          description: Stacks address\n          schema:\n            type: string\n        - name: contract_name\n          in: path\n          required: true\n          description: Contract name\n          schema:\n            type: string\n        - name: function_name\n          in: path\n          required: true\n          description: Function name\n          schema:\n            type: string\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from. If tip == latest, the query will be run from the latest\n            known tip (includes unconfirmed state).\n          required: false\n      requestBody:\n        description: map of arguments and the simulated tx-sender where sender is either a Contract identifier or a normal Stacks address, and arguments is an array of hex serialized Clarity values.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: './entities/contracts/read-only-function-args.schema.json'\n              example:\n                sender: 'SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info'\n                arguments:\n                  - '0x0011...'\n                  - '0x00231...'\n\n  /v2/accounts/{principal}:\n    get:\n      summary: Get account info\n      tags:\n        - Accounts\n      operationId: get_account_info\n      description: |\n        Get the account data for the provided principal\n\n        Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is a unsigned 64-bit integer, and the proofs are provided as hex strings.\n\n        For non-existent accounts, this does not 404, rather it returns an object with balance and nonce of 0.\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field if set to 0\n          schema:\n            type: integer\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from. If tip == latest, the query will be run from the latest\n            known tip (includes unconfirmed state).\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-account-data.schema.json\n              example:\n                $ref: ./api/core-node/get-account-data.example.json\n\n  /v2/fees/transaction:\n    post:\n      summary: Get approximate fees for the given transaction\n      tags:\n        - Fees\n      description: |\n        Get an estimated fee for the supplied transaction.  This\n        estimates the execution cost of the transaction, the current\n        fee rate of the network, and returns estimates for fee\n        amounts.\n\n        * `transaction_payload` is a hex-encoded serialization of\n          the TransactionPayload for the transaction.\n        * `estimated_len` is an optional argument that provides the\n          endpoint with an estimation of the final length (in bytes)\n          of the transaction, including any post-conditions and\n          signatures\n\n        If the node cannot provide an estimate for the transaction\n        (e.g., if the node has never seen a contract-call for the\n        given contract and function) or if estimation is not\n        configured on this node, a 400 response is returned.\n        The 400 response will be a JSON error containing a `reason`\n        field which can be one of the following:\n\n        * `DatabaseError` - this Stacks node has had an internal\n          database error while trying to estimate the costs of the\n          supplied transaction.\n        * `NoEstimateAvailable` - this Stacks node has not seen this\n          kind of contract-call before, and it cannot provide an\n          estimate yet.\n        * `CostEstimationDisabled` - this Stacks node does not perform\n          fee or cost estimation, and it cannot respond on this\n          endpoint.\n\n        The 200 response contains the following data:\n\n        * `estimated_cost` - the estimated multi-dimensional cost of\n          executing the Clarity VM on the provided transaction.\n        * `estimated_cost_scalar` - a unitless integer that the Stacks\n          node uses to compare how much of the block limit is consumed\n          by different transactions. This value incorporates the\n          estimated length of the transaction and the estimated\n          execution cost of the transaction. The range of this integer\n          may vary between different Stacks nodes. In order to compute\n          an estimate of total fee amount for the transaction, this\n          value is multiplied by the same Stacks node's estimated fee\n          rate.\n        * `cost_scalar_change_by_byte` - a float value that indicates how\n          much the `estimated_cost_scalar` value would increase for every\n          additional byte in the final transaction.\n        * `estimations` - an array of estimated fee rates and total fees to\n          pay in microSTX for the transaction. This array provides a range of\n          estimates (default: 3) that may be used. Each element of the array\n          contains the following fields:\n            * `fee_rate` - the estimated value for the current fee\n              rates in the network\n            * `fee` - the estimated value for the total fee in\n              microSTX that the given transaction should pay. These\n              values are the result of computing:\n              `fee_rate` x `estimated_cost_scalar`.\n              If the estimated fees are less than the minimum relay\n              fee `(1 ustx x estimated_len)`, then that minimum relay\n              fee will be returned here instead.\n\n\n        Note: If the final transaction's byte size is larger than\n        supplied to `estimated_len`, then applications should increase\n        this fee amount by:\n\n          `fee_rate` x `cost_scalar_change_by_byte` x (`final_size` - `estimated_size`)\n\n      operationId: post_fee_transaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: ./api/core-node/post-fee-transaction.schema.json\n            example:\n              $ref: ./api/core-node/post-fee-transaction.example.json\n      responses:\n        200:\n          description: Estimated fees for the transaction\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/post-fee-transaction-response.schema.json\n              example:\n                $ref: ./api/core-node/post-fee-transaction-response.example.json\n\n  /v2/fees/transfer:\n    get:\n      summary: Get estimated fee\n      tags:\n        - Fees\n      operationId: get_fee_transfer\n      description: Get an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-fee-transfer.schema.json\n              example:\n                $ref: ./api/core-node/get-fee-transfer.example.json\n\n  /v2/info:\n    get:\n      summary: Get Core API info\n      description: Get Core API information\n      tags:\n        - Info\n      operationId: get_core_api_info\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-info.schema.json\n              example:\n                $ref: ./api/core-node/get-info.example.json\n\n  /v2/pox:\n    get:\n      summary: Get PoX details\n      description: Get Proof of Transfer (PoX) information. Can be used for Stacking.\n      tags:\n        - Info\n      operationId: get_pox_info\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/core-node/get-pox.schema.json\n              example:\n                $ref: ./api/core-node/get-pox.example.json\n      parameters:\n        - name: tip\n          in: query\n          schema:\n            type: string\n          description: The Stacks chain tip to query from. If tip == latest, the query will be run from the latest\n            known tip (includes unconfirmed state).\n\n  /v2/traits/{contract_address}/{contract_name}/{trait_contract_address}/{trait_ contract_name}/{trait_name}:\n    get:\n      summary: Get trait implementation details\n      description: Determine whether or not a specified trait is implemented (either explicitly or implicitly) within a given contract.\n      tags:\n        - Smart Contracts\n      operationId: get_is_trait_implemented\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: ./api/trait/get-is-trait-implemented.schema.json\n              example:\n                $ref: ./api/trait/get-is-trait-implemented.example.json\n    parameters:\n      - name: contract_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: trait_contract_address\n        in: path\n        required: true\n        description: Trait Stacks address\n        schema:\n          type: string\n      - name: trait_contract_name\n        in: path\n        required: true\n        description: Trait contract name\n        schema:\n          type: string\n      - name: trait_name\n        in: path\n        required: true\n        description: Trait name\n        schema:\n          type: string\n      - name: tip\n        in: query\n        schema:\n          type: string\n        description: |\n          The Stacks chain tip to query from.\n          If tip == \"latest\", the query will be run from the latest known tip (includes unconfirmed state).\n          If the tip is left unspecified, the stacks chain tip will be selected (only includes confirmed state). \n"
		}
	},
	"Error": "parse: parse spec: paths: /v2/fees/transaction: post: operation \"post_fee_transaction\": requestBody: content: \"application/json\": parse schema: parse schema: reference \"./api/core-node/post-fee-transaction.schema.json\": resolve reference \"./api/core-node/post-fee-transaction.schema.json\": invalid schema reference \"./api/core-node/post-fee-transaction.schema.json\""
}