{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/platern/fapi-connector"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 50813,
			"content": "openapi: 3.0.3\ninfo:\n  title: Financial-grade API Connector\n  description: |-\n    Use this companion service to register with and call OpenID providers, built to accommodate many the peculiarities of Open Banking implementations.\n    \n    Optionally, it can be used in conjunction with [Platern Web](https://platern.com) in [Open Banking](https://dextersjab.medium.com/an-overview-of-open-banking-be34e0e6800b) applications.\n    \n    This service uses a forked, open-source [Node OpenID Client](https://github.com/dextersjab/node-openid-client).\n    \n    Similarly, it uses the MIT licence, allowing the most open usage possible, whether for:\n    - making modifications\n    - commercial purposes\n    - private usage\n    - distributing\n    \n    Learn more:\n    - [Platern](https://platern.com)\n    - [GitHub](https://github.com/platern/fapi-connector)\n    \n    Feel free to raise issues [here](https://github.com/platern/fapi-connector/issues).\n\n  termsOfService: https://platern.com/terms\n  contact:\n    email: hello@platern.com\n  license:\n    name: MIT\n    url: https://github.com/platern/fapi-connector/blob/main/LICENSE.txt\n  version: '0.1'\npaths:\n\n  /registrations:\n    get:\n      tags:\n        - Client registrations\n      description: Get `registrationID` values for all provider registrations.\n      summary: Get `registrationID` values for all provider registrations.\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Registrations'\n              examples:\n                200:\n                  value:\n                    {\n                      kind: 'Collection',\n                      self: '/registrations',\n                      registrations: [\n                        'XXX',\n                        'YYY'\n                      ]\n                    }\n\n  /registrations/{registrationID}:\n    put:\n      description: Create or update a client registration with an API provider.\n      summary: Create or update a client registration with an API provider.\n      tags:\n        - Client registrations\n      parameters:\n        - name: registrationID\n          description: |-\n            Choose a unique identifier for the `registrationID` to register a new client with an API provider.\n            \n            If you're using Platern Web, we recommend using the `providerID` from the Providers API.\n            \n            Warning: currently, registering with the same `registrationID` will override any previous registrations.\n          in: path\n          required: true\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 Updated (w/ provider ID)\n              value: XXX\n            201:\n              summary: 201 Created (w/ provider ID)\n              value: YYY\n            x-201.WithOIDD:\n              summary: 201 Created (w/ OpenID Discovery URL)\n              value: YYY\n            x-201.WithOverrides:\n              summary: 201 Created (w/ provider-specific overrides)\n              value: YYY\n            x-400.NoProviderIdentifiers:\n              summary: 400 No valid provider identifiers\n              value: nonexistent-provider\n            x-400.ProviderNotFound:\n              summary: 400 ProviderID not found\n              value: nonexistent-provider\n        - name: specification\n          in: query\n          required: true\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 Updated (w/ provider ID)\n              value: obieAis\n            201:\n              summary: 201 Created (w/ provider ID)\n              value: obieAis\n            x-201.WithOIDD:\n              summary: 201 Created (w/ OpenID Discovery URL)\n              value: obieAis\n            x-201.WithOverrides:\n              summary: 201 Created (w/ provider-specific overrides)\n              value: obieAis\n            x-400.NoProviderIdentifiers:\n              summary: 400 No valid provider identifiers\n              value: obieAis\n            x-400.ProviderNotFound:\n              summary: 400 ProviderID not found\n              value: obieAis\n      operationId: updateClientRegistrations\n      requestBody:\n        description: Create or update a client registration.\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                provider:\n                  description: A `provider` obtained from Platern Web.\n                  type: string\n                openIDConfigUrl:\n                  description: A provider's OpenID Discovery URL (aka well-known endpoint).\n                  type: string\n                externalAud:\n                  description: Used to override the `aud` claim in special cases (OBIE).\n                  type: string\n                overrides:\n                  description: On-the-fly configuration override options.\n                  type: object\n                  properties:\n                    scopes:\n                      type: array\n                      items:\n                        type: string\n                    grantTypes:\n                      type: array\n                      items:\n                        type: string\n                    authMethod:\n                      type: string\n            examples:\n              200:\n                summary: 200 Updated (w/ provider ID)\n                value:\n                  {\n                    provider: 'XXX'\n                  }\n              201:\n                summary: 201 Created (w/ provider ID)\n                value:\n                  {\n                    provider: 'YYY'\n                  }\n              x-201.WithOIDD:\n                summary: 201 Created (w/ OpenID Discovery URL)\n                value:\n                  {\n                    openIDConfigUrl: 'https://auth.abcbank.com/.well-known/openid-configuration',\n                    externalAud: '0015800001041RHAAY'\n                  }\n              x-201.WithOverrides:\n                summary: 201 Created (w/ provider-specific overrides)\n                value:\n                  {\n                    provider: 'YYY',\n                    overrides: {\n                      authMethod: 'tls_client_auth'\n                    }\n                  }\n              x-400.NoProviderIdentifiers:\n                summary: 400 No valid provider identifiers\n                value:\n                  {\n                    badKey: 'inconsequential value'\n                  }\n              x-400.ProviderNotFound:\n                summary: 400 ProviderID not found\n                value:\n                  {\n                    provider: 'nonexistent-provider'\n                  }\n        required: true\n      responses:\n        200:\n          description: 200 Updated (w/ provider ID)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n              examples:\n                200:\n                  $ref: '#/components/examples/ClientUpdated'\n        201:\n          description: 201 Created (w/ provider ID)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n              examples:\n                201:\n                  $ref: '#/components/examples/ClientCreated'\n        x-201.WithOIDD:\n          description: 201 Created (w/ OpenID Discovery URL)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewRegistrationUpdates'\n              examples:\n                x-201.WithOIDD:\n                  $ref: '#/components/examples/ClientCreated'\n        x-201.WithOverrides:\n          description: 201 Created (w/ provider-specific overrides)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NewRegistrationUpdates'\n              examples:\n                x-201.WithOverrides:\n                  $ref: '#/components/examples/ClientCreated'\n        x-400.NoProviderIdentifiers:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n              examples:\n                x-400.NoProviderIdentifiers:\n                  $ref: '#/components/examples/Registration400NoProviderIDs'\n        x-400.ProviderNotFound:\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n              examples:\n                x-400.ProviderNotFound:\n                  $ref: '#/components/examples/Registration400ProviderNotFound'\n    get:\n      description: Get a client registered with a provider.\n      summary: Get a client registered with a provider.\n      tags:\n        - Client registrations\n      parameters:\n        - name: registrationID\n          in: path\n          required: true\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 OK\n              value: XXX\n            x-404.MissingRegistration:\n              summary: 404 Not found\n              value: WWW\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n              examples:\n                200:\n                  $ref: '#/components/examples/ClientUpdated'\n        x-404.MissingRegistration:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n              examples:\n                x-404.MissingRegistration:\n                  summary: 404 Not found\n                  value:\n                    {\n                      error: \"Not Found\",\n                      message: \"client not found\"\n                    }\n    delete:\n      description: Delete a client registered with a provider.\n      summary: Delete a client registered with a provider.\n      tags:\n        - Client registrations\n      parameters:\n        - name: registrationID\n          in: path\n          required: true\n          schema:\n            type: string\n          examples:\n            204:\n              summary: 204 No Content\n              value: XXX\n            x-404.MissingRegistration:\n              summary: 404 Not found\n              value: WWW\n      responses:\n        204:\n          description: No Content\n        x-404.MissingRegistration:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n              examples:\n                x-404.MissingRegistration:\n                  summary: 404 Not found\n                  value:\n                    {\n                      error: \"Not Found\",\n                      message: \"registration not found: WWW\"\n                    }\n\n  /authorization:\n    get:\n      tags:\n        - Authorization\n      description: |-\n        Generate an authorization URL for the data owner to grant access.\n        \n        The query parameters you need to send to this endpoint depend on\n        how you're using *fapi-connector*.\n        \n        If you're using Platern Web, use:\n          - `providerID`\n        \n        If you're connecting without Platern Web (e.g. to Open Banking), use:\n          - `oauth2Grant`\n          - `oauth2GrantRequest`\n\n      summary: Generate an authorization URL for the data owner to grant access.\n      parameters:\n        - in: header\n          description: Use the `registrationID` registered with your API provider.\n          name: registration\n          required: true\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: XXX\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: XXX\n        - in: query\n          description: |-\n            If you're using Platern Web, pass the `provider`.\n          name: provider\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: XXX\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: ~\n        - in: query\n          description: |-\n            Currently supports the following Open Banking UK specifications:\n              - `obieAis`\n              - `obieCof`\n              - `obieDcr`\n              - `obieEvent`\n              - `obiePis`\n              - `obieProduct`\n          name: specification\n          required: true\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: obieAis\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: obieAis\n        - in: query\n          description: |-\n            #### OAuth2 state\n            \n            RECOMMENDED.  An opaque value used by the client to maintain\n                     state between the request and callback.  The authorization\n                     server includes this value when redirecting the user-agent back\n                     to the client.  The parameter SHOULD be used for preventing\n                     cross-site request forgery as described in [RFC 6749 Section 10.12](https://www.rfc-editor.org/rfc/rfc6749#section-10.12).\n          name: oauth2State\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: cd444cb3-68b8-42b4-a9dd-aa3c75ccade2\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: cd444cb3-68b8-42b4-a9dd-aa3c75ccade2\n        - in: query\n          name: openIDNonce\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: 96d3dd10-2dc7-4b93-835d-89ddd8665b06\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: 96d3dd10-2dc7-4b93-835d-89ddd8665b06\n        - in: query\n          description: |-\n            Required for Open Banking UK. Usually has a path ending with `/account-access-consents`.\n            \n            Also see [FAPI Grant Management extension to OAuth2](https://openid.net/specs/fapi-grant-management-01.html).\n          name: oauth2GrantUrl\n          schema:\n            type: string\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: ~\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: https://ob19-rs1.o3bank.co.uk:4501/open-banking/v3.1/aisp/account-access-consents\n        - in: query\n          description: |-\n            Base64-encoded grant request payload.\n            Required for Open Banking UK. Usually has a path ending with `/account-access-consents`.\n            \n            Also see [FAPI Grant Management extension to OAuth2](https://openid.net/specs/fapi-grant-management-01.html).\n          name: oauth2GrantRequest\n          schema:\n            type: string\n          #  format: byte # not supported by JSON Schema\n          examples:\n            200:\n              summary: 200 (w/ provider ID)\n              value: eyJEYXRhIjp7IlBlcm1pc3Npb25zIjpbIlJlYWRBY2NvdW50c0RldGFpbCIsIlJlYWRCYWxhbmNlcyIsIlJlYWRCZW5lZmljaWFyaWVzRGV0YWlsIiwiUmVhZERpcmVjdERlYml0cyIsIlJlYWRQcm9kdWN0cyIsIlJlYWRTdGFuZGluZ09yZGVyc0RldGFpbCIsIlJlYWRUcmFuc2FjdGlvbnNDcmVkaXRzIiwiUmVhZFRyYW5zYWN0aW9uc0RlYml0cyIsIlJlYWRUcmFuc2FjdGlvbnNEZXRhaWwiLCJSZWFkT2ZmZXJzIiwiUmVhZFBBTiIsIlJlYWRQYXJ0eSIsIlJlYWRQYXJ0eVBTVSIsIlJlYWRTY2hlZHVsZWRQYXltZW50c0RldGFpbCIsIlJlYWRTdGF0ZW1lbnRzRGV0YWlsIl0sIkV4cGlyYXRpb25EYXRlVGltZSI6IjIwMjMtMTItMDFUMDA6MDA6MDArMDA6MDAiLCJUcmFuc2FjdGlvbkZyb21EYXRlVGltZSI6IjIwMTYtMTAtMTVUMDA6MDA6MDArMDA6MDAiLCJUcmFuc2FjdGlvblRvRGF0ZVRpbWUiOiIyMDIyLTEyLTE1VDAwOjAwOjAwKzAwOjAwIn0sIlJpc2siOnt9fQ==\n            x-200.WithOIDD:\n              summary: 200 (w/ OpenID Discovery URL)\n              value: eyJEYXRhIjp7IlBlcm1pc3Npb25zIjpbIlJlYWRBY2NvdW50c0RldGFpbCIsIlJlYWRCYWxhbmNlcyIsIlJlYWRCZW5lZmljaWFyaWVzRGV0YWlsIiwiUmVhZERpcmVjdERlYml0cyIsIlJlYWRQcm9kdWN0cyIsIlJlYWRTdGFuZGluZ09yZGVyc0RldGFpbCIsIlJlYWRUcmFuc2FjdGlvbnNDcmVkaXRzIiwiUmVhZFRyYW5zYWN0aW9uc0RlYml0cyIsIlJlYWRUcmFuc2FjdGlvbnNEZXRhaWwiLCJSZWFkT2ZmZXJzIiwiUmVhZFBBTiIsIlJlYWRQYXJ0eSIsIlJlYWRQYXJ0eVBTVSIsIlJlYWRTY2hlZHVsZWRQYXltZW50c0RldGFpbCIsIlJlYWRTdGF0ZW1lbnRzRGV0YWlsIl0sIkV4cGlyYXRpb25EYXRlVGltZSI6IjIwMjMtMTItMDFUMDA6MDA6MDArMDA6MDAiLCJUcmFuc2FjdGlvbkZyb21EYXRlVGltZSI6IjIwMTYtMTAtMTVUMDA6MDA6MDArMDA6MDAiLCJUcmFuc2FjdGlvblRvRGF0ZVRpbWUiOiIyMDIyLTEyLTE1VDAwOjAwOjAwKzAwOjAwIn0sIlJpc2siOnt9fQ==\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuthzUrl'\n              examples:\n                200:\n                  summary: 200 (w/ provider ID)\n                  value:\n                    {\n                      url: 'https://auth.abcbank.com/authorize?client_id=CLIENT_ID\u0026scope=openid%20accounts\u0026response_type=code\u0026redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback%2F\u0026request=eyJhbGciOiJub25lIiwidHlwIjoib2F1dGgtYXV0aHotcmVxK2p3dCJ9.eyJqdGkiOiJURVNULUpUSSIsInNjb3BlIjoib3BlbmlkIGFjY291bnRzIiwic3RhdGUiOiJjZDQ0NGNiMy02OGI4LTQyYjQtYTlkZC1hYTNjNzVjY2FkZTIiLCJub25jZSI6Ijk2ZDNkZDEwLTJkYzctNGI5My04MzVkLTg5ZGRkODY2NWIwNiIsIm1heF9hZ2UiOjg2NDAwLCJyZWRpcmVjdF91cmkiOiJodHRwczovL2V4YW1wbGUuY29tL29hdXRoL2NhbGxiYWNrLyIsImNsYWltcyI6eyJ1c2VyaW5mbyI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiJDVVNUT01FUl9BQ0NPVU5UX0NPTlNFTlQiLCJlc3NlbnRpYWwiOnRydWV9fSwiaWRfdG9rZW4iOnsib3BlbmJhbmtpbmdfaW50ZW50X2lkIjp7InZhbHVlIjoiQ1VTVE9NRVJfQUNDT1VOVF9DT05TRU5UIiwiZXNzZW50aWFsIjp0cnVlfSwiYWNyIjp7ImVzc2VudGlhbCI6dHJ1ZSwidmFsdWVzIjpbInVybjpvcGVuYmFua2luZzpwc2QyOnNjYSIsInVybjpvcGVuYmFua2luZzpwc2QyOmNhIl19fX0sImlzcyI6IkNMSUVOVF9JRCIsImF1ZCI6Imh0dHA6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJjbGllbnRfaWQiOiJDTElFTlRfSUQiLCJpYXQiOjE2NjYxMzc2MDAsImV4cCI6MTY2NjEzNzkwMCwibmJmIjoxNjY2MTM3NjAwfQ.\u0026nonce=96d3dd10-2dc7-4b93-835d-89ddd8665b06\u0026state=cd444cb3-68b8-42b4-a9dd-aa3c75ccade2'\n                    }\n                x-200.WithOIDD:\n                  summary: 200 (w/ OpenID Discovery URL)\n                  value:\n                    {\n                      url: 'https://auth.abcbank.com/authorize?client_id=CLIENT_ID\u0026scope=openid%20accounts\u0026response_type=code\u0026redirect_uri=https%3A%2F%2Fexample.com%2Foauth%2Fcallback%2F\u0026request=eyJhbGciOiJub25lIiwidHlwIjoib2F1dGgtYXV0aHotcmVxK2p3dCJ9.eyJqdGkiOiJURVNULUpUSSIsInNjb3BlIjoib3BlbmlkIGFjY291bnRzIiwic3RhdGUiOiJjZDQ0NGNiMy02OGI4LTQyYjQtYTlkZC1hYTNjNzVjY2FkZTIiLCJub25jZSI6Ijk2ZDNkZDEwLTJkYzctNGI5My04MzVkLTg5ZGRkODY2NWIwNiIsIm1heF9hZ2UiOjg2NDAwLCJyZWRpcmVjdF91cmkiOiJodHRwczovL2V4YW1wbGUuY29tL29hdXRoL2NhbGxiYWNrLyIsImNsYWltcyI6eyJ1c2VyaW5mbyI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiJDVVNUT01FUl9BQ0NPVU5UX0NPTlNFTlQiLCJlc3NlbnRpYWwiOnRydWV9fSwiaWRfdG9rZW4iOnsib3BlbmJhbmtpbmdfaW50ZW50X2lkIjp7InZhbHVlIjoiQ1VTVE9NRVJfQUNDT1VOVF9DT05TRU5UIiwiZXNzZW50aWFsIjp0cnVlfSwiYWNyIjp7ImVzc2VudGlhbCI6dHJ1ZSwidmFsdWVzIjpbInVybjpvcGVuYmFua2luZzpwc2QyOnNjYSIsInVybjpvcGVuYmFua2luZzpwc2QyOmNhIl19fX0sImlzcyI6IkNMSUVOVF9JRCIsImF1ZCI6Imh0dHA6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20iLCJjbGllbnRfaWQiOiJDTElFTlRfSUQiLCJpYXQiOjE2NjYxMzc2MDAsImV4cCI6MTY2NjEzNzkwMCwibmJmIjoxNjY2MTM3NjAwfQ.\u0026nonce=96d3dd10-2dc7-4b93-835d-89ddd8665b06\u0026state=cd444cb3-68b8-42b4-a9dd-aa3c75ccade2'\n                    }\n\n  /token:\n    description: Proxy service to perform an OAuth2 token request with an API provider for an access token.\n    post:\n      tags:\n        - Authorization\n      description: |-\n        Make an OAuth2 [token request](https://www.rfc-editor.org/rfc/rfc6749#section-4.1.3) to get access credentials.\n      summary: Access token request.\n      parameters:\n        - in: header\n          description: Use the `registrationID` registered with your API provider.\n          name: registration\n          schema:\n            type: string\n          examples:\n            200:\n              value: XXX\n          required: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref:\n                '#/components/schemas/TokenRequest'\n            examples:\n              200:\n                summary: 200 (w/ provider ID)\n                value:\n                  {\n                    oauth2State: 'cd444cb3-68b8-42b4-a9dd-aa3c75ccade2',\n                    oauth2Code: '295f8dfa-11f1-4424-9c8a-c498e0e6b8cd',\n                    openIDNonce: '96d3dd10-2dc7-4b93-835d-89ddd8665b06'\n                  }\n              x-200.WithOIDD:\n                summary: 200 (w/ OpenID Discovery URL)\n                value:\n                  {\n                    oauth2State: 'cd444cb3-68b8-42b4-a9dd-aa3c75ccade2',\n                    oauth2Code: '295f8dfa-11f1-4424-9c8a-c498e0e6b8cd',\n                    openIDNonce: '96d3dd10-2dc7-4b93-835d-89ddd8665b06'\n                  }\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TokenResponse'\n              examples:\n                200:\n                  value:\n                    {\n                      \"oauth2TokenSet\": {\n                        \"access_token\": \"acb9a134-a13d-4a48-8089-1ae95e19612f\",\n                        \"id_token\": \"eyJraWQiOiIyaE94YjdCU2gzT0ZGeno4YWc0QmY4RFprSFA4ank4TTQzakRRV1YwbUZBIiwiYWxnIjoibm9uZSJ9.eyJub25jZSI6Ijk2ZDNkZDEwLTJkYzctNGI5My04MzVkLTg5ZGRkODY2NWIwNiIsInN1YiI6ImphbmUgZG9lIiwiYXVkIjoiQ0xJRU5UX0lEIiwiaXNzIjoiaHR0cDovL3NlcnZlci5leGFtcGxlLmNvbSIsImlhdCI6MTY2Nzg5MTA2NiwiZXhwIjoxNjY3OTE5ODY2fQ==.\"\n                      }\n                    }\n\ncomponents:\n  schemas:\n    # Registrations\n    Client:\n      type: object\n      properties:\n        kind:\n          type: string\n        self:\n          type: string\n        openIDConfigUrl:\n          type: string\n        metadata:\n          $ref: '#/components/schemas/DcrClientMetadata'\n    DcrClientMetadata:\n      type: object\n      properties:\n        redirect_uris:\n          description: Array of Redirection URI values used by the Client. One of these registered Redirection URI values MUST exactly match the redirect_uri parameter value used in each Authorization Request, with the matching performed as described in Section 6.2.1 of [RFC3986] (Simple String Comparison).\n          type: array\n          items:\n            type: string\n            format: uri\n        response_types:\n          description: JSON array containing a list of the OAuth 2.0 response_type values that the Client is declaring that it will restrict itself to using. If omitted, the default is that the Client will use only the code Response Type.\n          type: array\n          items:\n            type: string\n        grant_types:\n          description: |-\n            JSON array containing a list of the OAuth 2.0 Grant Types that the Client is declaring that it will restrict itself to using. The Grant Type values used by OpenID Connect are:\n              - authorization_code: The Authorization Code Grant Type described in OAuth 2.0 Section 4.1.\n              - implicit: The Implicit Grant Type described in OAuth 2.0 Section 4.2.\n              - refresh_token: The Refresh Token Grant Type described in OAuth 2.0 Section 6.\n            The following table lists the correspondence between response_type values that the Client will use and grant_type values that MUST be included in the registered grant_types list:\n              - code: authorization_code\n              - id_token: implicit\n              - token id_token: implicit\n              - code id_token: authorization_code, implicit\n              - code token: authorization_code, implicit\n              - code token id_token: authorization_code, implicit\n            If omitted, the default is that the Client will use only the authorization_code Grant Type.\n          type: array\n          items:\n            type: string\n        application_type:\n          description: |-\n            Kind of the application. The default, if omitted, is web. The defined values are native or web. Web Clients using the OAuth Implicit Grant Type MUST only register URLs using the https scheme as redirect_uris; they MUST NOT use localhost as the hostname. Native Clients MUST only register redirect_uris using custom URI schemes or URLs using the http: scheme with localhost as the hostname. Authorization Servers MAY place additional constraints on Native Clients. Authorization Servers MAY reject Redirection URI values using the http scheme, other than the localhost case for Native Clients. The Authorization Server MUST verify that all the registered redirect_uris conform to these constraints. This prevents sharing a Client ID across different types of Clients.\n          type: string\n        contacts:\n          description: |-\n            Array of e-mail addresses of people responsible for this Client. This might be used by some providers to enable a Web user interface to modify the Client information.\n          type: array\n          items:\n            type: string\n        client_name:\n          type: string\n          description: Name of the Client to be presented\n            to the End-User. If desired, representation of  this Claim in different\n            languages and scripts is represented as described in Section 2.1 (Metadata\n            Languages and Scripts).\n        logo_uri:\n          type: string\n          description: URL that references a logo for the\n            Client application. If present, the server SHOULD display this image to\n            the End-User during approval. The value of this field MUST point to a valid\n            image file. If desired, representation of  this Claim in different\n            languages and scripts is represented as described in Section 2.1 (Metadata\n            Languages and Scripts).\n        client_uri:\n          type: string\n          description: |-\n            URL of the home page of the Client.\n            The value of this field MUST point to a valid Web page. If present,\n            the server SHOULD display this URL to the End-User in a followable fashion.\n            If desired, representation of  this Claim in different languages and\n            scripts is represented as described in Section 2.1 (Metadata Languages\n            and Scripts).\n        policy_uri:\n          type: string\n          description: |-\n            URL that the Relying Party Client provides to the End-User to read\n            about the how the profile data will be used.\n            The value of this field MUST point to a valid web page.\n            The OpenID Provider SHOULD display this URL to the End-User if it is\n            given. If desired, representation of  this Claim in different languages\n            and scripts is represented as described in Section 2.1 (Metadata Languages\n            and Scripts).\n        tos_uri:\n          type: string\n          description: |-\n            URL that the Relying  Party\n            Client provides to the End-User to read about the Relying Party's terms\n            of service. The value of this field MUST point to a valid web page.\n            The OpenID Provider SHOULD display this URL to the End-User if it is\n            given. If desired, representation of  this Claim in different languages\n            and scripts is represented as described in Section 2.1 (Metadata Languages\n            and Scripts).\n        jwks_uri:\n          type: string\n          description: |-\n            URL for the Client's JSON Web Key\n            Set [JWK] (Jones, M., “JSON Web Key (JWK),” July 2014.) document. If the\n            Client signs requests to the Server, it contains the signing key(s) the\n            Server uses to validate signatures from the Client. The JWK Set MAY also\n            contain the Client's encryption keys(s), which are used by the Server to\n            encrypt responses to the Client. When both signing and encryption keys\n            are made available, a use (Key Use) parameter value is REQUIRED\n            for all keys in the referenced JWK Set to indicate each key's intended\n            usage. Although some algorithms allow the same key to be used for both\n            signatures and encryption, doing so is NOT RECOMMENDED, as it is less secure.\n            The JWK x5c parameter MAY be used to provide X.509 representations\n            of keys provided.  When used, the bare key values MUST still be present\n            and MUST match those in the certificate.\n        jwks:\n          type: string\n          description: |-\n            Client's JSON Web Key Set [JWK] (Jones,\n            M., “JSON Web Key (JWK),” July 2014.) document, passed by value. The semantics\n            of the jwks parameter are the same as the jwks_uri parameter, other than\n            that the JWK Set is passed by value, rather than by reference. This\n            parameter is intended only to be used by Clients that, for some reason, are\n            unable to use the jwks_uri parameter, for instance, by native applications\n            that might not have a location to host the contents of the JWK Set.\n            If a Client can use jwks_uri, it MUST NOT use jwks. One significant\n            downside of jwks is that it does not enable key rotation (which\n            jwks_uri does, as described in Section 10 of OpenID Connect Core 1.0 (Sakimura,\n            N., Bradley, J., Jones, M., de Medeiros, B., and C. Mortimore, “OpenID Connect\n            Core 1.0,” November 2014.) [OpenID.Core]). The jwks_uri and jwks parameters\n            MUST NOT be used together.\n        sector_identifier_uri:\n          type: string\n          description: |-\n            URL using the https scheme to be\n            used in calculating Pseudonymous Identifiers by the OP. The URL references\n            a file with a single JSON array of redirect_uri values. Please see\n            Section 5 (\\sector_identifier_uri\\ Validation). Providers that use pairwise\n            sub (subject) values SHOULD utilize the sector_identifier_uri value\n            provided in the Subject Identifier calculation for pairwise identifiers.\n        subject_type:\n          type: string\n          description: |-\n            subject_type requested for  responses\n            to this Client. The subject_types_supported Discovery parameter contains\n            a list of the supported subject_type values for this server. Valid types\n            include pairwise and public.\n        id_token_signed_response_alg:\n          type: string\n          description: |-\n            JWS alg algorithm [JWA] (Jones,\n            M., “JSON Web Algorithms (JWA),” July 2014.) REQUIRED for signing the ID Token\n            issued to this Client. The value none MUST NOT be used as the\n            ID Token alg value unless the Client uses only Response Types that return\n            no ID Token from the Authorization Endpoint (such as when only using\n            the Authorization Code Flow). The default, if omitted, is RS256. The\n            public key for validating the signature is provided by retrieving the  JWK\n            Set referenced by the jwks_uri element from OpenID Connect Discovery\n            1.0 (Sakimura, N., Bradley, J., Jones, M., and E. Jay, “OpenID Connect Discovery\n            1.0,” November 2014.) [OpenID.Discovery].\n        id_token_encrypted_response_alg:\n          type: string\n          description: |-\n            JWE alg algorithm [JWA] (Jones,\n            M., “JSON Web Algorithms (JWA),” July 2014.) REQUIRED for encrypting the ID Token\n            issued to this Client. If this is requested, the response will be signed\n            then encrypted, with the result being a Nested JWT, as defined in [JWT]\n            (Jones, M., Bradley, J., and N. Sakimura, “JSON Web Token (JWT),” July 2014.).\n            The default, if omitted, is that no encryption is performed.\n        id_token_encrypted_response_enc:\n          type: string\n          description: |-\n            JWE enc algorithm [JWA] (Jones,\n            M., “JSON Web Algorithms (JWA),” July 2014.) REQUIRED for encrypting the ID Token\n            issued to this Client.  If id_token_encrypted_response_alg is specified,\n            the default for this value is A128CBC-HS256. When id_token_encrypted_response_enc\n            is included, id_token_encrypted_response_alg MUST also be provided.\n        userinfo_signed_response_alg:\n          type: string\n          description: |-\n            JWS alg algorithm [JWA] (Jones,\n            M., “JSON Web Algorithms (JWA),” July 2014.) REQUIRED for signing UserInfo Responses.\n            If this is specified, the response will be  JWT (Jones, M., Bradley,\n            J., and N. Sakimura, “JSON Web Token (JWT),” July 2014.) [JWT] serialized, and\n            signed using JWS. The default, if omitted, is for the UserInfo Response\n            to return the Claims as a UTF-8 encoded JSON object using the application/json\n            content-type.\n        userinfo_encrypted_response_alg:\n          type: string\n          description: |-\n            JWE (Jones, M., Rescorla, E., and\n            J. Hildebrand, “JSON Web Encryption (JWE),” July 2014.) [JWE] alg  algorithm\n            [JWA] (Jones, M., “JSON Web Algorithms (JWA),” July 2014.) REQUIRED for encrypting\n            UserInfo Responses.  If both signing and encryption are requested,\n            the response will be signed then encrypted, with the result being a\n            Nested JWT, as defined in [JWT] (Jones, M., Bradley, J., and N. Sakimura, “JSON\n            Web Token (JWT),” July 2014.). The default, if omitted, is that no encryption\n            is performed.\n        userinfo_encrypted_response_enc:\n          type: string\n          description: |-\n            JWE enc algorithm [JWA] (Jones,\n            M., “JSON Web Algorithms (JWA),” July 2014.) REQUIRED for encrypting UserInfo\n            Responses. If userinfo_encrypted_response_alg is specified, the\n            default for this value is A128CBC-HS256. When userinfo_encrypted_response_enc\n            is included, userinfo_encrypted_response_alg MUST also be provided.\n        request_object_signing_alg:\n          type: string\n          description: |-\n            JWS (Jones, M., Bradley, J., and\n            N. Sakimura, “JSON Web Signature (JWS),” July 2014.) [JWS] alg algorithm\n            [JWA] (Jones, M., “JSON Web Algorithms (JWA),” July 2014.) that MUST be used for\n            signing Request Objects sent to the OP. All Request Objects from\n            this Client MUST be rejected, if not signed with this algorithm.\n            Request Objects are described in Section 6.1 of OpenID Connect Core\n            1.0 (Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and C. Mortimore,\n            “OpenID Connect Core 1.0,” November 2014.) [OpenID.Core]. This algorithm\n            MUST be used both when the Request Object is passed by value (using the\n            request parameter) and when it is passed by reference (using the\n            request_uri parameter). Servers SHOULD support RS256. The value\n            none MAY be used. The default, if omitted, is that any algorithm supported\n            by the OP and the RP MAY be used.\n        request_object_encryption_alg:\n          type: string\n          description: |-\n            JWE (Jones, M., Rescorla, E., and\n            J. Hildebrand, “JSON Web Encryption (JWE),” July 2014.) [JWE] alg  algorithm\n            [JWA] (Jones, M., “JSON Web Algorithms (JWA),” July 2014.) the RP is declaring\n            that it may use for encrypting Request Objects sent to the OP. This\n            parameter SHOULD be included when symmetric encryption will be used, since\n            this signals to the OP that a client_secret value needs to be returned\n            from which the symmetric key will be derived, that might not otherwise\n            be returned. The RP MAY still use other supported encryption algorithms\n            or send unencrypted Request Objects, even when this parameter is present.\n            If both signing and encryption are requested, the Request Object will\n            be signed then encrypted, with the result being a Nested JWT, as defined\n            in [JWT] (Jones, M., Bradley, J., and N. Sakimura, “JSON Web Token (JWT),” July 2014.).\n            The default, if omitted, is that the RP is not declaring whether it\n            might encrypt any Request Objects.\n        request_object_encryption_enc:\n          type: string\n          description: |-\n            JWE enc algorithm [JWA] (Jones,\n            M., “JSON Web Algorithms (JWA),” July 2014.) the RP is declaring that it may use\n            for encrypting Request Objects sent to the OP. If request_object_encryption_alg\n            is specified, the default for this value is A128CBC-HS256. When\n            request_object_encryption_enc is included, request_object_encryption_alg\n            MUST also be provided.\n        token_endpoint_auth_method:\n          type: string\n          description: |-\n            Requested Client Authentication method\n            for the Token Endpoint. The options are  client_secret_post,\n            client_secret_basic,  client_secret_jwt,  private_key_jwt,\n            and none, as described in Section 9 of OpenID Connect Core 1.0 (Sakimura,\n            N., Bradley, J., Jones, M., de Medeiros, B., and C. Mortimore, “OpenID Connect\n            Core 1.0,” November 2014.) [OpenID.Core]. Other authentication methods\n            MAY be defined by extensions. If omitted, the default is client_secret_basic\n            -- the HTTP Basic Authentication Scheme specified in Section 2.3.1\n            of OAuth 2.0 (Hardt, D., “The OAuth 2.0 Authorization Framework,” October 2012.)\n            [ RFC6749 ].\n        token_endpoint_auth_signing_alg:\n          type: string\n          description: |-\n            JWS (Jones, M., Bradley, J., and\n            N. Sakimura, “JSON Web Signature (JWS),” July 2014.) [JWS] alg algorithm\n            [JWA] (Jones, M., “JSON Web Algorithms (JWA),” July 2014.) that MUST be used for\n            signing the JWT [JWT] (Jones, M., Bradley, J., and N. Sakimura, “JSON Web\n            Token (JWT),” July 2014.) used to authenticate the Client at the Token\n            Endpoint for the private_key_jwt  and client_secret_jwt authentication\n            methods. All Token Requests using these authentication methods from\n            this Client MUST be rejected, if the JWT is not signed with this algorithm.\n            Servers SHOULD support RS256. The value none MUST NOT be used.\n            The default, if omitted, is that any algorithm supported by the OP\n            and the RP MAY be used.\n        default_max_age:\n          type: string\n          description: |-\n            Default Maximum Authentication Age.\n            Specifies that the End-User MUST be actively authenticated if the End-User\n            was authenticated longer ago than the specified number of seconds. The\n            max_age request parameter overrides this default value. If omitted,\n            no default Maximum Authentication Age is specified.\n        require_auth_time:\n          type: string\n          description: |-\n            Boolean value specifying whether\n            the auth_time  Claim in the ID Token is REQUIRED. It is REQUIRED\n            when the value is true. (If this is false, the auth_time Claim can\n            still be dynamically requested as an individual Claim for the ID Token\n            using the claims request parameter described in Section 5.5.1 of OpenID\n            Connect Core 1.0 (Sakimura, N., Bradley, J., Jones, M., de Medeiros, B., and C.\n            Mortimore, “OpenID Connect Core 1.0,” November 2014.) [OpenID.Core].) If\n            omitted, the default value is false.\n        default_acr_values:\n          type: string\n          description: |-\n            Default requested Authentication\n            Context Class Reference values.  Array of strings that  specifies\n            the default acr values that the OP is being requested to use  for\n            processing requests from this Client, with the values appearing in order\n            of preference. The Authentication Context Class satisfied by the authentication\n            performed is returned as the acr Claim Value in the issued ID Token.\n            The acr Claim is requested as a Voluntary Claim by this parameter.\n            The acr_values_supported discovery element  contains a list of the\n            supported acr values supported by this server. Values specified\n            in the acr_values request parameter or an individual acr Claim request\n            override these default values.\n        initiate_login_uri:\n          type: string\n          description: |-\n            URI using the https scheme that\n            a third party can use to initiate a login by the RP, as specified in\n            Section 4 of OpenID Connect Core 1.0 (Sakimura, N., Bradley, J., Jones, M.,\n            de Medeiros, B., and C. Mortimore, “OpenID Connect Core 1.0,” November 2014.)\n            [ OpenID.Core ]. The URI MUST accept requests via both GET and POST.\n            The Client MUST understand the  login_hint and iss parameters and\n            SHOULD support the target_link_uri parameter.\n        request_uris:\n          type: string\n          description: |-\n            Array of request_uri values that\n            are pre-registered by the RP for use at the OP. Servers MAY cache\n            the contents of the files referenced by these URIs and not retrieve them\n            at the time they are used in a request. OPs can require that request_uri\n            values used be pre-registered with the require_request_uri_registration\n            discovery parameter. If the contents of the request file could ever change,\n            these URI values SHOULD include the base64url encoded SHA-256 hash value of\n            the file contents referenced by the URI as the value of the URI fragment.\n            If the fragment value used for a URI changes, that signals the server\n            that its cached value for that URI with the old fragment value is no\n            longer valid.\n    NewRegistrationUpdates:\n      type: object\n      properties:\n        self:\n          type: string\n      example:\n        {\n          self: [ \"XXX\" ],\n          registration: {\n\n          }\n        }\n    RegistrationRequest:\n      description: |-\n        Requires either the Platern Web `provider` or the API provider's\n        OpenID Discovery endpoint (`openIDConfigUrl`).\n        \n        Optionally, you can override various [configuration](config/clients.json)\n        values on the fly.\n      type: object\n      properties:\n        provider:\n          type: string\n        openIDConfigUrl:\n          type: string\n        overrides:\n          type: object\n          properties:\n            scopes:\n              type: array\n              items:\n                type: string\n            grantTypes:\n              type: array\n              items:\n                type: string\n            authMethod:\n              type: string\n            redirectUris:\n              type: array\n              items:\n                type: string\n    Registrations:\n      type: object\n      properties:\n        kind:\n          type: string\n        self:\n          type: string\n        registrations:\n          type: array\n          items:\n            type: string\n    Registration:\n      type: object\n      properties:\n        self:\n          type: string\n        kind:\n          type: string\n        ID:\n          type: string\n        completed:\n          $ref: '#/components/schemas/RegistrationRequest'\n        failed:\n          $ref: '#/components/schemas/RegistrationRequest'\n        pending:\n          $ref: '#/components/schemas/RegistrationRequest'\n\n    # Authorization\n    AuthzUrl:\n      type: object\n      properties:\n        url:\n          type: string\n      required:\n        - url\n\n    # Token\n    TokenRequest:\n      type: object\n      properties:\n        oauth2State:\n          description: OAuth2 state\n          type: string\n        oauth2Code:\n          description: OAuth2 code\n          type: string\n        openIDNonce:\n          description: OpenID nonce\n          type: string\n    TokenResponse:\n      type: object\n      properties:\n        oauth2TokenSet:\n          $ref: '#/components/schemas/OAuth2Token'\n      required:\n        - oauth2AccessToken\n    OAuth2Token:\n      title: OAuth2 Token Response\n      type: object\n      properties:\n        access_token:\n          description: The access token issued by the authorization server.\n          type: string\n        expires_in:\n          description: |-\n            RECOMMENDED.  The lifetime in seconds of the access token.  For\n            example, the value \"3600\" denotes that the access token will\n            expire in one hour from the time the response was generated.\n            If omitted, the authorization server SHOULD provide the\n            expiration time via other means or document the default value.\n          type: integer\n        refresh_token:\n          description: |-\n            Can be used to obtain new access tokens using the same\n            authorization grant as described in Section 6 of RFC 6749.\n          type: string\n        scope:\n          description: |-\n            The authorization server uses the \"scope\" response parameter to\n            inform the client of the scope of the access token issued.\n            \n            The value of the scope parameter is expressed as a list of space-\n            delimited, case-sensitive strings.  The strings are defined by the\n            authorization server.  If the value contains multiple space-delimited\n            strings, their order does not matter, and each string adds an\n            additional access range to the requested scope.\n          type: string\n        token_type:\n          description: |-\n            The type of the token issued as described in\n            Section 7.1.  Value is case insensitive.\n          type: string\n        state:\n          description: |-\n            REQUIRED if the \"state\" parameter was present in the client\n                     authorization request.  The exact value received from the\n                     client.\n          type: string\n      required:\n        - access_token\n        - expires_in\n        - token_type\n\n    # Common\n    StandardError:\n      type: object\n      properties:\n        error:\n          type: string\n        message:\n          type: string\n\n  examples:\n    ClientUpdated:\n      summary: 200 OK\n      value:\n        {\n          kind: 'RegisteredClient',\n          self: '/registrations/XXX',\n          openIDConfigUrl: 'https://auth.abcbank.com/.well-known/openid-configuration',\n          metadata: {\n            \"application_type\": \"web\",\n            \"authorization_signed_response_alg\": \"none\",\n            \"client_id\": \"CLIENT_ID\",\n            \"client_id_issued_at\": 1665796077170,\n            \"client_secret\": \"CLIENT_SECRET\",\n            \"client_secret_expires_at\": 0,\n            \"grant_types\": [\n              \"client_credentials\",\n              \"authorization_code\",\n              \"refresh_token\"\n            ],\n            \"id_token_signed_response_alg\": \"none\",\n            \"introspection_endpoint_auth_method\": \"tls_client_auth\",\n            \"introspection_endpoint_auth_signing_alg\": \"none\",\n            \"jwks_uri\": \"https://keystore.ca.com/00123/EXAMPLE_SOFTWARE_ID.jwks\",\n            \"redirect_uris\": [\n              \"https://example.com/oauth/callback/\"\n            ],\n            \"request_object_signing_alg\": \"none\",\n            \"response_types\": [\n              \"code\"\n            ],\n            \"scope\": \"openid accounts payments\",\n            \"software_id\": \"EXAMPLE_SOFTWARE_ID\",\n            \"software_statement\": \"aGVhZGVyCg==.cGF5bG9hZAo=.c2lnbmF0dXJlCg==\",\n            \"tls_client_auth_subject_dn\": \"CN=00123,2.5.4.97=PSD2-ZZ-000123,O=EXAMPLE LTD,C=ZZ\",\n            \"tls_client_certificate_bound_access_tokens\": true,\n            \"token_endpoint_auth_method\": \"tls_client_auth\",\n            \"token_endpoint_auth_signing_alg\": \"none\"\n          }\n        }\n    ClientCreated:\n      summary: 201 (w/ provider ID)\n      value:\n        {\n          kind: 'RegisteredClient',\n          self: '/registrations/YYY',\n          openIDConfigUrl: 'https://auth.abcbank.com/.well-known/openid-configuration',\n          metadata: {\n            \"application_type\": \"web\",\n            \"authorization_signed_response_alg\": \"none\",\n            \"client_id\": \"CLIENT_ID\",\n            \"client_id_issued_at\": 1665796077170,\n            \"client_secret\": \"CLIENT_SECRET\",\n            \"client_secret_expires_at\": 0,\n            \"grant_types\": [\n              \"client_credentials\",\n              \"authorization_code\",\n              \"refresh_token\"\n            ],\n            \"id_token_signed_response_alg\": \"none\",\n            \"introspection_endpoint_auth_method\": \"tls_client_auth\",\n            \"introspection_endpoint_auth_signing_alg\": \"none\",\n            \"jwks_uri\": \"https://keystore.ca.com/00123/EXAMPLE_SOFTWARE_ID.jwks\",\n            \"redirect_uris\": [\n              \"https://example.com/oauth/callback/\"\n            ],\n            \"request_object_signing_alg\": \"none\",\n            \"response_types\": [\n              \"code\"\n            ],\n            \"scope\": \"openid accounts payments\",\n            \"software_id\": \"EXAMPLE_SOFTWARE_ID\",\n            \"software_statement\": \"aGVhZGVyCg==.cGF5bG9hZAo=.c2lnbmF0dXJlCg==\",\n            \"tls_client_auth_subject_dn\": \"CN=00123,2.5.4.97=PSD2-ZZ-000123,O=EXAMPLE LTD,C=ZZ\",\n            \"tls_client_certificate_bound_access_tokens\": true,\n            \"token_endpoint_auth_method\": \"tls_client_auth\",\n            \"token_endpoint_auth_signing_alg\": \"none\"\n          }\n        }\n    Registration400NoProviderIDs:\n      value:\n        {\n          error: \"Bad Request\",\n          message: \"payload must include either a valid Platern `provider` or OpenID discovery URL (`openIDConfigUrl`)\"\n        }\n    Registration400ProviderNotFound:\n      value:\n        {\n          error: \"Bad Request\",\n          message: \"provider doesn't exist: nonexistent-provider\"\n        }\n",
			"canonicalURL": "/github.com/platern/fapi-connector@8215cbe6aa2968bf611f529e28ed1e5b17d6ffa1/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/platern/fapi-connector/blob/8215cbe6aa2968bf611f529e28ed1e5b17d6ffa1/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/registrations/{registrationID}\": get: responses: at openapi.yaml:274:9: invalid response pattern \"x-404.MissingRegistration\""
}