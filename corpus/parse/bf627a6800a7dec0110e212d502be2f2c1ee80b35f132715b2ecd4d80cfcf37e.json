{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/opensuse.org/obs/2.10.50/openapi.yaml",
			"byteSize": 210425,
			"content": "openapi: 3.0.0\nservers:\n  - url: /\ninfo:\n  contact:\n    name: Open Build Service\n    url: https://openbuildservice.org/\n  description: |\n    The _Open Build Service API_ is a XML API.\n\n    To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.\n\n    There is no API versioning as there is no need for it right now.\n\n    Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations.\n    In case of abuse, we will limit/remove your access.\n\n    For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API.\n    It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below)\n  license:\n    name: GNU General Public License v2.0\n    url: https://github.com/openSUSE/open-build-service/blob/master/COPYING\n  title: Open Build Service API\n  version: 2.10.50\n  x-apisguru-categories:\n    - developer_tools\n  x-origin:\n    - format: openapi\n      url: https://build.opensuse.org/apidocs-new/OBS-v2.10.50.yaml\n      version: \"3.0\"\n  x-providerName: opensuse.org\n  x-serviceName: obs\nexternalDocs:\n  description: Open Build Service - Documentation\n  url: https://openbuildservice.org/help/\ntags:\n  - name: General Information\n  - name: Attributes\n  - name: Attribute Namespaces\n  - name: Build\n  - name: Configuration\n  - name: Distributions\n  - name: Groups\n  - name: Issue Trackers\n  - name: Person\n  - name: Published Binaries\n  - description: |\n      Please, before using request endpoints, make sure you have read and understood the \"Request and Review System\" section of\n      the [user guide](https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.request_and_review_system.html).\n\n      In the next sections you will see how calls to request endpoints could be combined to fullfill different workflows.\n\n      ## Workflow 1: Create a Submit Request from Package A to Package B\n\n      The steps described in this workflow could be easily replicated with this command:\n      `osc createrequest -a submit home:Admin:Origin A home:Admin:Destination B -m \"Submit A to B\"`\n\n      The logic involved in the creation of a submit request will require to call more endpoints. For the sake of simplicity we suppose, that:\n        - The project `home:Admin:Origin` exists, with a package `A`, and it has a file called `test.txt`.\n        - The latest revision of the package `home:Admin:Origin:A` is `1`.\n        - The project `home:Admin:Destination` doesn't exist.\n        - There aren't any other submit requests previously created with the same source and target.\n\n      To create a submit request, pass the following request body:\n      ```\n      <request>\n        <action type=\"submit\">\n          <source project=\"home:Admin:Origin\" package=\"A\" rev=\"1\"/>\n          <target project=\"home:Admin:Destination\" package=\"B\"/>\n        </action>\n        <state name=\"new\"/>\n        <description>Submit A to B</description>\n      </request>\n      ```\n      ... to this endpoint: `POST /request?cmd=create`\n\n\n      ## Workflow 2: Review a Submit Request\n      **Add a User as Reviewer of a Submit Request**\n\n      First, we make sure that a certain user can review our submit request.\n      We will add the user `test1` as a reviewer of the already created submit request.\n\n      For the sake of simplicity we suppose, that:\n        - There is already a user with login name `test1`.\n        - There is already a submit request with number `33`.\n\n      Adding the user `test1` as a reviewer of the submit request number `33` can be performed with this command:\n      `osc review add -m 'Add user test1 as reviewer' -U test1 33`\n\n      The same action can be done with this API endpoint: `POST /request/33?cmd=addreview&by_user=test1`\n\n      **Mark a Review of a Submit Request as Accepted**\n\n      Now that the user `test1` is a reviewer of the submit request number `33`, this user can review that submit request as `accepted`.\n\n      To review the submit request as `accepted`, issue the following command, using for authentication the login `test1`:\n      `osc review accept -m 'Accept submit request' -U test1 33`\n\n      This can also be done with this API endpoint, using for authentication the login `test1`:\n      `POST /request/33?cmd=changereviewstate&newstate=accepted&by_user=test1`\n\n\n      ## Workflow 3: Approve a Submit Request\n\n      To mark a submit request as approved means that a submit request will be automatically accepted when all the required reviews are accepted.\n\n      For the sake of simplicity let's accept that:\n        - There is already a user with the login name `test1`, which is also a maintainer of the project `home:Admin`.\n        - There is already a submit request with the number `44`.\n        - The user with login name `test1` is a reviewer of the submit request number `44`.\n\n      **Note**: The following commands or endpoints should all be executed as user `test1`.\n\n      **Mark a Submit Request as Approved**\n\n      To mark a request as approved, execute the following command: `osc request approve -m 'Approve submit request' -U test1 44`\n\n      This can also be done with this endpoint (as user `test1`): `POST /request/44?cmd=approve`\n\n      **Review an Already Approved Submit Request as Accepted**\n\n      After adding a review to this submit request with state `accepted`, the submit request will automatically be accepted.\n      This is the same step that has been described previously in the last section *\"Review a Submit Request as Accepted\"*.\n\n      To perform this operation with `osc`, perform the following command: `osc review accept -m 'Accept submit request' -U test1 44`\n\n      The same can be done with the following endpoint: `POST /request/44?cmd=changereviewstate&newstate=accepted&by_user=test1`\n    externalDocs:\n      url: https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.request_and_review_system.html\n    name: Request\n  - name: Workers\npaths:\n  /about:\n    get:\n      description: Get generic information about the API.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  commit:\n                    example: 7b5d82e6143442a8eb8459f35cc94d2fbe263ebe\n                    type: string\n                  description:\n                    example: API to the Open Build Service\n                    type: string\n                  last_deployment:\n                    example: 2020-11-10 15:07:02 +0000\n                    type: string\n                  revision:\n                    example: 2.11~alpha.20201110T101235.7b5d82e614\n                    type: string\n                  title:\n                    example: Open Build Service API\n                    type: string\n                required:\n                  - title\n                  - description\n                  - revision\n                type: object\n                xml:\n                  name: about\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [about.xsd](../schema/about.xsd)\n      summary: Get information about API.\n      tags:\n        - General Information\n  /architectures:\n    get:\n      description: |\n        Get a list of all known architectures known to OBS in general. This is not the list of architectures provided by this instance. Check the schedulers element from the `/configuration` route for this.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: \"4\"\n                entry:\n                  - name: aarch64\n                  - name: armv7l\n                  - name: s390x\n                  - name: x86_64\n              schema:\n                properties:\n                  count:\n                    type: integer\n                    xml:\n                      attribute: true\n                  entry:\n                    items:\n                      properties:\n                        name:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                type: object\n                xml:\n                  name: directory\n          description: OK. The request has succeeded.\n        \"401\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                anonymous_user:\n                  summary: Anonymous User\n                  value:\n                    code: anonymous_user\n                    summary: Anonymous user is not allowed here - please login\n                authentication_required:\n                  summary: Authentication Required\n                  value:\n                    code: authentication_required\n                    summary: Unknown user 'Admin' or invalid password\n              schema:\n                properties:\n                  code:\n                    type: string\n                    xml:\n                      attribute: true\n                  data:\n                    items:\n                      type: string\n                    type: array\n                  details:\n                    type: string\n                  summary:\n                    type: string\n                type: object\n                xml:\n                  name: status\n          description: |\n            Unauthorized.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: List all known architectures.\n      tags:\n        - General Information\n  \"/architectures/{architecture_name}\":\n    get:\n      description: Show information about one architecture.\n      parameters:\n        - description: Architecture name\n          example: x86_64\n          in: path\n          name: architecture_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                example:\n                  name: x86_64\n                properties:\n                  name:\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                xml:\n                  name: architecture\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: unknown_architecture\n                summary: \"Architecture does not exist: x999\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Show one architecture.\n      tags:\n        - General Information\n  /attribute:\n    get:\n      description: List all attribute namespaces.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: \"2\"\n                entry:\n                  - name: OBS\n                  - name: openSUSE\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: List all attribute namespaces.\n      tags:\n        - Attribute Namespaces\n  \"/attribute/{namespace}\":\n    delete:\n      description: |\n        Delete an attribute namespace and all attributes below.\n\n        This operation is the same as the one defined with [DELETE /attribute/{namespace}/_meta](#/Attributes/delete_attribute__namespace___meta).\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: ok\n                summary: Ok\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Delete an attribute namespace and all attributes below.\n      tags:\n        - Attribute Namespaces\n    get:\n      description: List all attributes under a given attribute namespace.\n      parameters:\n        - description: The namespace\n          example: OBS_TEST\n          in: path\n          name: namespace\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: \"2\"\n                entry:\n                  - name: AutoCleanup\n                  - name: OwnerRootProject\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find AttribNamespace\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: List all attributes below a namespace.\n      tags:\n        - Attribute Namespaces\n  \"/attribute/{namespace}/_meta\":\n    delete:\n      description: |\n        Delete an attribute namespace and all attributes below.\n\n        This operation is the same as the one defined with [DELETE /attribute/{namespace}](#/Attributes/delete_attribute__namespace_).\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Delete an attribute namespace and all attributes below.\n      tags:\n        - Attribute Namespaces\n    get:\n      description: Shows attribute namespace.\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  modifiable_by:\n                    items:\n                      properties:\n                        user:\n                          example: user_login_name\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  name:\n                    example: OBS_TEST\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                xml:\n                  name: namespace\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [attribute_namespace_meta.xsd](../schema/attribute_namespace_meta.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find AttribNamespace\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Show attribute namespace.\n      tags:\n        - Attribute Namespaces\n    post:\n      description: |\n        This endpoint can be used for both, creating an attribute namespace and updating it:\n          * If the attribute namespace passed as parameter doesn't exist, it will create the attribute namespace.\n          * If the attribute namespace passed as parameter already exists, it will update the namespace attribute.\n\n        This operation is the same as the one defined with [PUT](#/Attributes/put_attribute__namespace___meta).\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1_meta/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: |\n          Attribute namespace definition.\n\n          XML Schema used for body validation: [attribute_namespace_meta.xsd](../schema/attribute_namespace_meta.xsd)\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                empty_body:\n                  summary: Validation Failed (Empty Body)\n                  value:\n                    code: validation_failed\n                    summary: Document is empty, not allowed for attribute_namespace_meta\n                wrong_xml_element:\n                  summary: Validation Failed (Wrong XML Element)\n                  value:\n                    code: validation_failed\n                    summary: \"attribute_namespace_meta validation error: 1:0: ERROR: Element 'foo': No matching global declaration available for the validation root.\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Validation Failed.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n                user:\n                  summary: Not Found (User)\n                  value:\n                    code: not_found\n                    summary: Couldn't find User with login = user_login_name\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Change attribute namespace. Create an attribute namespace if it doesn't exist.\n      tags:\n        - Attribute Namespaces\n    put:\n      description: |\n        This endpoint can be used for both, creating an attribute namespace and updating it:\n          * If the attribute namespace passed as parameter doesn't exist, it will create the attribute namespace.\n          * If the attribute namespace passed as parameter already exists, it will update the namespace attribute.\n\n        This operation is the same as the one defined with [POST](#/Attributes/post_attribute__namespace___meta).\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1_meta/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: |\n          Attribute namespace definition.\n\n          XML Schema used for body validation: [attribute_namespace_meta.xsd](../schema/attribute_namespace_meta.xsd)\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                empty_body:\n                  summary: Validation Failed (Empty Body)\n                  value:\n                    code: validation_failed\n                    summary: Document is empty, not allowed for attribute_namespace_meta\n                wrong_xml_element:\n                  summary: Validation Failed (Wrong XML Element)\n                  value:\n                    code: validation_failed\n                    summary: \"attribute_namespace_meta validation error: 1:0: ERROR: Element 'foo': No matching global declaration available for the validation root.\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Validation Failed.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n                user:\n                  summary: Not Found (User)\n                  value:\n                    code: not_found\n                    summary: Couldn't find User with login = user_login_name\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Change attribute namespace. Create an attribute namespace if it doesn't exist.\n      tags:\n        - Attribute Namespaces\n  \"/attribute/{namespace}/{attribute_name}\":\n    delete:\n      description: |\n        Delete an attribute and all its values in projects or packages.\n\n        This operation is the same as the one defined with [DELETE /attribute/{namespace}/{attribute_name}/_meta](#/Attributes/delete_attribute__namespace___attribute_name___meta)\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n        - description: The name of the attribute\n          example: OwnerRootProjectTest\n          in: path\n          name: attribute_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Delete an attribute and all its values in projects or packages.\n      tags:\n        - Attributes\n  \"/attribute/{namespace}/{attribute_name}/_meta\":\n    delete:\n      description: |\n        Delete an attribute and all its values in projects or packages.\n\n        This operation is the same as the one defined with [DELETE /attribute/{namespace}/{attribute_name}](#/Attributes/delete_attribute__namespace___attribute_name_)\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1%7Battribute_name%7D/delete/parameters/1\"\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Delete an attribute and all its values in projects or packages.\n      tags:\n        - Attributes\n    get:\n      description: Shows attribute.\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1%7Battribute_name%7D/delete/parameters/1\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  allowed:\n                    properties:\n                      value:\n                        example:\n                          - DisableDevelTest\n                          - BugownerOnlyTest\n                        items:\n                          type: string\n                        type: array\n                    type: object\n                  count:\n                    example: 0\n                    type: integer\n                  description:\n                    example: An example description for an attribute.\n                    type: string\n                  modifiable_by:\n                    items:\n                      properties:\n                        user:\n                          example: user_login_name\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  name:\n                    example: OBS_TEST\n                    type: string\n                    xml:\n                      attribute: true\n                  namespace:\n                    example: OwnerRootProjectTest\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                xml:\n                  name: definition\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n                unknown_attribute:\n                  summary: Unknown Attribute\n                  value:\n                    code: unknown_attribute\n                    summary: Unknown attribute 'OBS_TEST':'OwnerRootProjectTest'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Shows attribute.\n      tags:\n        - Attributes\n    post:\n      description: |\n        This endpoint can be used for both, creating an attribute and updating it:\n          * If the attribute passed as parameter doesn't exist, it will create the attribute.\n          * If the attribute passed as parameter already exists, it will update the attribute.\n\n        This operation is the same as the one defined with [PUT](#/Attributes/put_attribute__namespace___attribute_name___meta).\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1%7Battribute_name%7D/delete/parameters/1\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1%7Battribute_name%7D~1_meta/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: Attribute definition.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                empty_body:\n                  summary: Validation Failed (Empty Body)\n                  value:\n                    code: validation_failed\n                    summary: Document is empty, not allowed for attrib_type\n                illegal_request:\n                  summary: Illegal Request\n                  value:\n                    code: illegal_request\n                    summary: \"Illegal request: PUT/POST /attribute/OBS_TEST/OwnerRootProjectTest/_meta: path does not match content\"\n                wrong_xml_element:\n                  summary: Validation Failed (Wrong XML Attributes)\n                  value:\n                    code: validation_failed\n                    summary: \"attrib_type validation error: 1:0: ERROR: Element definition failed to validate attributes\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Validation Failed.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n                unknown_attribute:\n                  summary: Unknown Attribute\n                  value:\n                    code: unknown_attribute\n                    summary: Unknown attribute 'OBS_TEST':'OwnerRootProjectTest'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Change attribute data. Create an attribute if it doesn't exist.\n      tags:\n        - Attributes\n    put:\n      description: |\n        This endpoint can be used for both, creating an attribute and updating it:\n          * If the attribute passed as parameter doesn't exist, it will create the attribute.\n          * If the attribute passed as parameter already exists, it will update the attribute.\n\n        This operation is the same as the one defined with [POST](#/Attributes/post_attribute__namespace___attribute_name___meta).\n      parameters:\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1%7Battribute_name%7D/delete/parameters/1\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1attribute~1%7Bnamespace%7D~1%7Battribute_name%7D~1_meta/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: Attribute definition.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                empty_body:\n                  summary: Validation Failed (Empty Body)\n                  value:\n                    code: validation_failed\n                    summary: Document is empty, not allowed for attrib_type\n                illegal_request:\n                  summary: Illegal Request\n                  value:\n                    code: illegal_request\n                    summary: \"Illegal request: PUT/POST /attribute/OBS_TEST/OwnerRootProjectTest/_meta: path does not match content\"\n                wrong_xml_element:\n                  summary: Validation Failed (Wrong XML Attributes)\n                  value:\n                    code: validation_failed\n                    summary: \"attrib_type validation error: 1:0: ERROR: Element definition failed to validate attributes\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Validation Failed.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                namespace:\n                  summary: Not Found (Namespace)\n                  value:\n                    code: not_found\n                    summary: Couldn't find AttribNamespace\n                unknown_attribute:\n                  summary: Unknown Attribute\n                  value:\n                    code: unknown_attribute\n                    summary: Unknown attribute 'OBS_TEST':'OwnerRootProjectTest'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Change attribute data. Create an attribute if it doesn't exist.\n      tags:\n        - Attributes\n  /build:\n    get:\n      description: Get a simple directory listing of all projects\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: openSUSE:Leap:15.1\n                  - name: openSUSE:Leap:15.2\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Get a simple directory listing of all projects\n      tags:\n        - Build\n  \"/build/{project_name}\":\n    get:\n      description: Get a simple directory listing of all repositories for the specified project\n      parameters:\n        - description: Project name\n          example: home:Admin\n          in: path\n          name: project_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: openSUSE_Tumbleweed\n                  - name: openSUSE_Leap_15.3\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Unknown Project:\n                  value:\n                    code: unknown_project\n                    summary: \"Project not found: <some project>.\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Unknown project.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Get a simple directory listing of all repositories for the specified project\n      tags:\n        - Build\n    post:\n      description: Apply different actions on builds/build processes of the specified project\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - description: Name of the package. Scope the commands to the specified package.\n          example: firefox\n          in: query\n          name: package\n          schema:\n            type: string\n        - description: Name of the build architecture. Scope the commands to the specified architectures.\n          example: x86_64\n          in: query\n          name: arch\n          schema:\n            type: string\n        - description: Name of the repository. Scope the commands to the specified repository.\n          example: openSUSE_Leap_15.2\n          in: query\n          name: repository\n          schema:\n            type: string\n        - description: |\n            **NOTE**: All commands described below, can be scoped to a package within the project by setting the `package`\n            parameter.\n\n            * `wipe`: Delete all binaries build by the project.\n            * `restartbuild`: Restart all running build processes inside the project.\n            * `rebuild`: Trigger a rebuild of all packages inside the project.\n            * `abortbuild`: Abort all running build processes for the specified project, marking them as failed.\n            * `killbuild`: Alias for `abortbuild`.\n            * `unpublish`: Delete all published package binaries, for the specified project, from the download repository.\n            * `sendsysrq`: Send a single sysrq character to the kernel of a running build. Character need to be specified\n                           through the `sysrq` parameter. Only a subset of debugging requests are supported (eg. 9, t or w).\n          in: query\n          name: cmd\n          required: true\n          schema:\n            enum:\n              - wipe\n              - restartbuild\n              - killbuild\n              - abortbuild\n              - rebuild\n              - unpublish\n              - sendsysrq\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Illegal Request:\n                  value:\n                    code: illegal_request\n                    summary: unsupported POST command '<some command>' to <some url>.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Illegal request.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Execute cmd no permission:\n                  value:\n                    code: execute_cmd_no_permission\n                    summary: No permission to execute command on package <some package> in project <some project>\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Execute command no permission.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Apply different actions on builds/build processes of the specified project\n      tags:\n        - Build\n  \"/build/{project_name}/_result\":\n    get:\n      description: Get the build results for packages, architectures and repositories of the specified project.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - description: |\n            Specify which sections should be included in the result list.\n\n            * `status`: Include detailed infos about the build status. **Default**\n            * `summary`: Include the summary of the status values.\n            * `binarylist`: Include a list of generated binary files.\n          in: query\n          name: view\n          schema:\n            enum:\n              - summary\n              - status\n              - binarylist\n            type: string\n        - description: Name of the package. Limit results to the specified package.\n          example: obs-server\n          in: query\n          name: package\n          schema:\n            type: string\n        - description: Name of the build architecture. Limit results to the specified build architecture.\n          example: x86_64\n          in: query\n          name: arch\n          schema:\n            type: string\n        - description: Name of the repository. Limit results to the specified repository.\n          example: openSUSE_Leap_15.2\n          in: query\n          name: repository\n          schema:\n            type: string\n        - description: Show the last build result (excludes current building job states).\n          example: 1\n          in: query\n          name: lastbuild\n          schema:\n            type: boolean\n        - description: Include build results from packages with project local links.\n          example: 1\n          in: query\n          name: locallink\n          schema:\n            type: boolean\n        - description: Include build results from _multibuild definitions.\n          example: 1\n          in: query\n          name: multibuild\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  result:\n                    items:\n                      properties:\n                        arch:\n                          example: x86_64\n                          type: string\n                          xml:\n                            attribute: true\n                        binarylist:\n                          items:\n                            properties:\n                              binary:\n                                items:\n                                  properties:\n                                    filename:\n                                      example: hello-2.10-3.1.x86_64.rpm\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                    mtime:\n                                      example: \"1617270174\"\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                    size:\n                                      example: \"58352\"\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                  type: object\n                                type: array\n                              package:\n                                example: ctris\n                                type: string\n                                xml:\n                                  attribute: true\n                            type: object\n                          type: array\n                        code:\n                          example: published\n                          type: string\n                          xml:\n                            attribute: true\n                        project:\n                          example: home:foo\n                          type: string\n                          xml:\n                            attribute: true\n                        repository:\n                          example: openSUSE_Leap_15.3\n                          type: string\n                          xml:\n                            attribute: true\n                        state:\n                          example: published\n                          type: string\n                          xml:\n                            attribute: true\n                        status:\n                          items:\n                            properties:\n                              code:\n                                example: succeeded\n                                type: string\n                                xml:\n                                  attribute: true\n                              details:\n                                example: package whitelist\n                                type: string\n                              package:\n                                example: ctris\n                                type: string\n                                xml:\n                                  attribute: true\n                            type: object\n                          type: array\n                        summary:\n                          properties:\n                            statuscount:\n                              items:\n                                properties:\n                                  code:\n                                    example: disabled\n                                    type: string\n                                    xml:\n                                      attribute: true\n                                  count:\n                                    example: \"2\"\n                                    type: string\n                                    xml:\n                                      attribute: true\n                                type: object\n                              type: array\n                          type: object\n                      type: object\n                    type: array\n                  state:\n                    example: e096d16554264fa553ca0aa3226cf189\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                xml:\n                  name: resultlist\n          description: |\n            OK.\n\n            XML Schema used for body validation: [buildresult.rng](../schema/buildresult.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Get the build results for packages, architectures and repositories of the specified project.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}\":\n    get:\n      description: List of all architectures the specified project builds against a given repository.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - description: Repository name\n          example: openSUSE_Tumbleweed\n          in: path\n          name: repository_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: x86_64\n                  - name: i586\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: 404\n                details: 404 project '<project_name>' has no repository '<repository_name>'\n                summary: project '<project_name>' has no repository '<repository_name>'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: List of all architectures the specified project builds against a given repository.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/_buildconfig\":\n    get:\n      description: |\n        Show the build configuration for the specified repository. Includes all base package requirements, mappings and macros.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              example: |\n                %define _project home:Admin\n\n                ### from openSUSE.org:openSUSE:Leap:15.2\n                %define _repository standard\n\n                Macros:\n                %vendor obs://build.some.where/home:Admin\n                %_project home:Admin\n\n                ### from openSUSE.org:openSUSE:Leap:15.2\n\n                %_repository standard\n                :Macros\n\n\n                Release: <CI_CNT>.<B_CNT> spec:lp152.<CI_CNT>.<B_CNT>\n                %define gcc_version 7\n\n                # testing new cycle algorithm\n                BuildFlags: genmetaalgo:1\n\n                # abort the build if the log file didn't move in an hour (seen in libreoffice builds)\n                BuildFlags: logidlelimit:3600\n\n                PublishFlags: ympdist:openSUSE%20Leap%2015.2\n\n                # Help with the switch to the gcc7 provided libs\n                Prefer: -libstdc++6-gcc7 -libtsan0-gcc7 -libgomp1-gcc7 -libgcc_s1-gcc7 -libatomic1-gcc7 -libcilkrts5-gcc7 -libitm1-gcc7\n                Prefer: -liblsan0-gcc7 -libmpx2-gcc7 -libubsan0-gcc7\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Show the build configuration for the specified repository.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/_builddepinfo\":\n    get:\n      description: |\n        Show the build dependencies of packages that are part of the project, for a given repository and architecture.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - description: Name of the package. Limit results to the specified package.\n          example: obs-server\n          in: query\n          name: package\n          schema:\n            type: string\n        - description: |\n            * `pkgnames`: Show whole package dependencies, instead of individual binaries.\n            * `revpkgnames`: Show which packages depend on the provided project/package for\n              the given repository/architecture, and therefore a rebuild gets triggered on change.\n            * `order`: Show packages ordered by dependencies.\n          in: query\n          name: view\n          schema:\n            enum:\n              - pkgnames\n              - revpkgnames\n              - order\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  package:\n                    items:\n                      properties:\n                        name:\n                          example: memcached\n                          type: string\n                          xml:\n                            attribute: true\n                        pkgdep:\n                          items:\n                            example:\n                              - gzip\n                              - obs-server\n                            type: string\n                          type: array\n                        source:\n                          example: memcached\n                          type: string\n                        subpkg:\n                          items:\n                            example:\n                              - memcached-devel\n                              - memcached-debugsource\n                            type: string\n                          type: array\n                      type: object\n                    type: array\n                type: object\n                xml:\n                  name: builddepinfo\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Show the build dependencies of packages that are part of the project.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/_repository\":\n    get:\n      description: |\n        List all binaries (produced by all packages of the given project) for the specified repository and architecture.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  binary:\n                    items:\n                      properties:\n                        filename:\n                          example: hello-2.10-3.1.x86_64.rpm\n                          type: string\n                          xml:\n                            attribute: true\n                        mtime:\n                          example: \"1617270174\"\n                          type: string\n                          xml:\n                            attribute: true\n                        size:\n                          example: \"58352\"\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                type: object\n                xml:\n                  name: binarylist\n          description: OK.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: List all binaries (produced by all packages of the given project).\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}\":\n    get:\n      description: List binaries built by the sources of the specified package.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - description: Package name\n          example: ctris\n          in: path\n          name: package_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1_repository/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: OK.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: List binaries built by the sources of the specified package.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_buildinfo\":\n    get:\n      description: This endpoint returns information about some specific artifact\n      operationId: getBuildProjectRepositoryArchPackageBuildinfo\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  arch:\n                    example: i586\n                    type: string\n                  bcnt:\n                    example: \"2\"\n                    type: string\n                  bdep:\n                    properties:\n                      arch:\n                        example: i586\n                        type: string\n                        xml:\n                          attribute: true\n                      name:\n                        example: liblua5_4-5\n                        type: string\n                        xml:\n                          attribute: true\n                      notmeta:\n                        example: \"1\"\n                        type: string\n                        xml:\n                          attribute: true\n                      preinstall:\n                        example: \"1\"\n                        type: string\n                        xml:\n                          attribute: true\n                      project:\n                        example: openSUSE.org:openSUSE:Tumbleweed\n                        type: string\n                        xml:\n                          attribute: true\n                      release:\n                        example: \"3.1\"\n                        type: string\n                        xml:\n                          attribute: true\n                      repository:\n                        example: dod\n                        type: string\n                        xml:\n                          attribute: true\n                      version:\n                        example: 5.4.2\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                  debuginfo:\n                    example: 0\n                    type: integer\n                  file:\n                    example: ctris.spec\n                    type: string\n                  package:\n                    example: ctris\n                    type: string\n                    xml:\n                      attribute: true\n                  path:\n                    x-project:\n                      example: home:Admin\n                      type: string\n                      xml:\n                        attribute: true\n                    x-repository:\n                      example: openSUSE_Tumbleweed\n                      type: string\n                      xml:\n                        attribute: true\n                  project:\n                    example: home:Admin\n                    type: string\n                    xml:\n                      attribute: true\n                  release:\n                    example: \"3.2\"\n                    type: string\n                  repository:\n                    example: openSUSE_Tumbleweed\n                    type: string\n                    xml:\n                      attribute: true\n                  rev:\n                    example: 3\n                    type: integer\n                  specfile:\n                    example: ctris.spec\n                    type: string\n                  srcmd5:\n                    example: 6b7c8d9cb5c5d36453c1dc8e102016b1\n                    type: string\n                  subpack:\n                    example: ctris\n                    type: string\n                  verifymd5:\n                    example: 6b7c8d9cb5c5d36453c1dc8e102016b1\n                    type: string\n                  versrel:\n                    example: 0.42.1-3\n                    type: string\n                type: object\n                xml:\n                  name: buildinfo\n          description: Returns the artifact building information.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: unknown_project\n                summary: \"Project not found: 1\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_history\":\n    get:\n      description: This endpoint returns the build history for a specific artifact\n      operationId: getBuildProjectRepositoryArchPackageHistory\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  entry:\n                    properties:\n                      bcnt:\n                        example: \"1\"\n                        type: string\n                        xml:\n                          attribute: true\n                      duration:\n                        example: \"222\"\n                        type: string\n                        xml:\n                          attribute: true\n                      rev:\n                        example: \"4\"\n                        type: string\n                        xml:\n                          attribute: true\n                      srcmd5:\n                        example: 63a6f075d3d420c6c1160a7b5dc31354\n                        type: string\n                        xml:\n                          attribute: true\n                      time:\n                        example: \"1617812788\"\n                        type: string\n                        xml:\n                          attribute: true\n                      versrel:\n                        example: 0.42.1-4\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                type: object\n                xml:\n                  name: buildhistory\n          description: Returns ok when the build status is ok\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: unknown_project\n                summary: \"Project not found: 1\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_jobstatus\":\n    get:\n      description: |\n        Show the build status of a currently running build job. Shows an empty result if no build job is running.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  code:\n                    example: building\n                    type: string\n                    xml:\n                      attribute: true\n                  hostarch:\n                    example: x86_64\n                    type: string\n                  jobid:\n                    example: 17c8d25b92da67f6ec428ea51a9b5342\n                    type: string\n                  lastduration:\n                    example: \"43\"\n                    type: string\n                  starttime:\n                    example: \"1618222900\"\n                    type: string\n                  uri:\n                    example: http://172.18.0.5:38963\n                    type: string\n                type: object\n                xml:\n                  name: jobstatus\n          description: |\n            OK.\n\n            XML Schema used for body validation: [jobstatus.rng](../schema/jobstatus.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Show the build status of a currently running build job.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_log\":\n    get:\n      description: This endpoint returns the last log file for a specific build artifact\n      operationId: getBuildProjectRepositoryArchPackageLog\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              example: |\n                [    0s] Memory limit set to 23077696KB\n                [    0s] Using BUILD_ROOT=/var/cache/obs/worker/root_2\n                [    0s] Using BUILD_ARCH=i586:i486:i386\n                [    0s] \n                [    0s] \n                [    0s] 5d0262043f4a started \"build ctris.spec\" at Tue Apr  6 12:27:31 UTC 2021.\n                [    0s] \n                [    0s] Building ctris for project 'home:Admin' repository 'openSUSE_Tumbleweed' arch 'i586' srcmd5 '6b7c8d9cb5c5d36453c1dc8e102016b1'\n          description: |\n            This endpoint returns the log file content\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: download_binary_no_permission\n                summary: No permission to download binaries from package ctris, project home:Admin\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Acceptable\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: unknown_project\n                summary: \"Project not found: 1\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_reason\":\n    get:\n      description: Details about the reason of the lastly triggered build.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  explain:\n                    example: source change\n                    type: string\n                  oldsource:\n                    example: da9ebc6a12b6da45f9ead3fc2f924889\n                    type: string\n                  time:\n                    example: \"1617982407\"\n                    type: string\n                type: object\n                xml:\n                  name: reason\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Show the reason for the lastly triggered build.\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_status\":\n    get:\n      description: This endpoint returns the building status for a specific artifact\n      operationId: getBuildProjectRepositoryArchPackageStatus\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  code:\n                    example: failed\n                    type: string\n                    xml:\n                      attribute: true\n                  package:\n                    example: ctris\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                xml:\n                  name: status\n          description: Returns ok when the build status is ok\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: unknown_project\n                summary: \"Project not found: 1\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}\":\n    get:\n      description: |\n        Given a project, repository, architecture and package, retrieve the given file's content.\n      operationId: getBuildProjectRepositoryArchitecturePackageFile\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n        - description: The file name\n          example: ctris-0.42.1-4.1.x86_64.rpm\n          in: path\n          name: file_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/*:\n              schema:\n                format: binary\n                type: string\n          description: Returns the artifact's actual file contents\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: \"404\"\n                details: 404 project 'home:Admin' has no repository '4'\n                summary: project 'home:Admin' has no repository '4'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Return a specific artifact file contents\n      tags:\n        - Build\n    put:\n      description: |\n        Given a project, repository, architecture and package, update the given file's content.\n\n        This is for Admins only.\n      operationId: putBuildProjectRepositoryArchitecturePackageFile\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - description: Package name\n          in: path\n          name: package_name\n          required: true\n          schema:\n            items:\n              enum:\n                - _repository\n              type: string\n            type: array\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D~1%7Bfile_name%7D/get/parameters/4\"\n      requestBody:\n        content:\n          plain/text:\n            schema:\n              properties:\n                file:\n                  format: binary\n                  type: string\n              type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: ok\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Updates the artifact's file contents\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: upload_binary_no_permission\n                summary: No permission to upload binaries.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            No permission to upload binaries for this project\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: \"404\"\n                details: 404 project 'home:Admin' has no repository '4'\n                summary: project 'home:Admin' has no repository '4'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Update a specific artifact file contents\n      tags:\n        - Build\n  \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}?view=fileinfo\":\n    get:\n      description: |\n        Given a project, repository, architecture and package, retrieve the given artifact's details.\n      operationId: getBuildProjectRepositoryArchitecturePackageFileViewFileinfo\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D/get/parameters/3\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bpackage_name%7D~1%7Bfile_name%7D/get/parameters/4\"\n        - in: query\n          name: view\n          required: true\n          schema:\n            items:\n              enum:\n                - fileinfo\n                - fileinfo_ext\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                fileinfo:\n                  summary: view=fileinfo\n                  value:\n                    arch: x86_64\n                    description: ctris is a colorized, small and flexible Tetris(TM)-clone for the console. Go play!\n                    filename: ctris-0.42.1-4.1.x86_64.rpm\n                    mtime: \"1617270174\"\n                    name: ctris\n                    provides:\n                      - ctris = 0.42.1-6.2\n                      - ctris(x86-64) = 0.42.1-6.2\n                    release: \"4.1\"\n                    requires:\n                      - libc.so.6()(64bit)\n                      - libc.so.6(GLIBC_2.2.5)(64bit)\n                    size: \"765725\"\n                    summary: Console based tetris clone\n                    version: 0.42.1\n                fileinfo_ext:\n                  summary: view=fileinfo_ext\n                  value:\n                    arch: x86_64\n                    description: ctris is a colorized, small and flexible Tetris(TM)-clone for the console. Go play!\n                    filename: ctris-0.42.1-4.2.x86_64.rpm\n                    mtime: \"1617270174\"\n                    name: ctris\n                    provides:\n                      - ctris = 0.42.1-6.2\n                      - ctris(x86-64) = 0.42.1-6.2\n                    provides_ext:\n                      dep: ctris(x86-64) = 0.42.1-6.2\n                    release: \"4.1\"\n                    requires:\n                      - libc.so.6()(64bit)\n                      - libc.so.6(GLIBC_2.2.5)(64bit)\n                    requires_ext:\n                      dep: libc.so.6()(64bit)\n                      provided_by:\n                        arch: x86_64\n                        name: glibc\n                        project: openSUSE.org:openSUSE:Tumbleweed\n                        release: \"4.1\"\n                        repository: dod\n                        version: \"2.33\"\n                    size: \"765725\"\n                    source: ctris\n                    summary: Console based tetris clone\n                    version: 0.42.1\n              schema:\n                properties:\n                  arch:\n                    type: string\n                  description:\n                    type: string\n                  filename:\n                    type: string\n                    xml:\n                      attribute: true\n                  mtime:\n                    type: string\n                  name:\n                    type: string\n                  provides:\n                    items:\n                      type: string\n                    type: array\n                  provides_ext:\n                    items:\n                      properties:\n                        dep:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  release:\n                    type: string\n                  requires:\n                    items:\n                      type: string\n                    type: array\n                  requires_ext:\n                    items:\n                      properties:\n                        dep:\n                          type: string\n                          xml:\n                            attribute: true\n                        provided_by:\n                          properties:\n                            arch:\n                              type: string\n                              xml:\n                                attribute: true\n                            name:\n                              type: string\n                              xml:\n                                attribute: true\n                            project:\n                              type: string\n                              xml:\n                                attribute: true\n                            release:\n                              type: string\n                              xml:\n                                attribute: true\n                            repository:\n                              type: string\n                              xml:\n                                attribute: true\n                            version:\n                              type: string\n                              xml:\n                                attribute: true\n                          type: object\n                      type: object\n                    type: array\n                  size:\n                    type: string\n                  source:\n                    type: string\n                  summary:\n                    type: string\n                  version:\n                    type: string\n                type: object\n                xml:\n                  name: fileinfo\n          description: Returns details about the artifact\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: \"404\"\n                details: 404 project 'home:Admin' has no repository '4'\n                summary: project 'home:Admin' has no repository '4'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Error: Not Found\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: This endpoint returns details about an specific artifact\n      tags:\n        - Build\n  /configuration:\n    get:\n      description: |\n        Display the configuration of this Open Build Service instance.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  admin_email:\n                    example: unconfigured@openbuildservice.org\n                    type: string\n                  allow_user_to_create_home_project:\n                    example: on\n                    type: string\n                  anonymous:\n                    example: on\n                    type: string\n                  change_password:\n                    example: on\n                    type: string\n                  cleanup_empty_projects:\n                    example: on\n                    type: string\n                  default_access_disabled:\n                    example: off\n                    type: string\n                  description:\n                    example: The openSUSE Build Service is the public instance of the Open Build Service (OBS)\n                    type: string\n                  disable_publish_for_branches:\n                    example: on\n                    type: string\n                  disallow_group_creation:\n                    example: off\n                    type: string\n                  download_on_demand:\n                    example: on\n                    type: string\n                  enforce_project_keys:\n                    example: off\n                    type: string\n                  gravatar:\n                    example: on\n                    type: string\n                  hide_private_options:\n                    example: off\n                    type: string\n                  name:\n                    example: private\n                    type: string\n                  obs_url:\n                    example: https://unconfigured.openbuildservice.org\n                    type: string\n                  registration:\n                    example: allow\n                    type: string\n                  schedulers:\n                    properties:\n                      arch:\n                        example:\n                          - armv7l\n                          - i586\n                          - x86_64\n                        items:\n                          type: string\n                        type: array\n                    type: object\n                  title:\n                    example: Open Build Service\n                    type: string\n                  tos_url:\n                    example: https://en.opensuse.org/Terms_of_site\n                    type: string\n                  unlisted_projects_filter:\n                    example: ^home:.+\n                    type: string\n                  unlisted_projects_filter_description:\n                    example: home projects\n                    type: string\n                type: object\n                xml:\n                  name: configuration\n          description: |\n            OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Display the configuration of this Open Build Service instance\n      tags:\n        - Configuration\n    put:\n      description: |\n        Update the configuration of this Open Build Service instance.\n\n        This is for admins only.\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1configuration/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: Configuration definition.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                $ref: \"#/paths/~1configuration/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: no_permission_to_change\n                summary: The api has a different value for default_access_disabled configured in options.yml file. Remove it there first\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Forbidden.\n\n            In the example below, _default_access_disabled_ is one of the possible configuration options which is set in the options.yml file.\n      security:\n        - basic_authentication: []\n      summary: Update the configuration of this Open Build Service instance\n      tags:\n        - Configuration\n  /distributions:\n    get:\n      description: |\n        List all distributions that can be build against.\n        This will not list distributions that are available via [interconnect](https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.concepts.html#id-1.5.10.3.5).\n        Check /distributions/include_remotes for this.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                distribution:\n                  - architecture:\n                      - i586\n                      - x86_64\n                    icon:\n                      - height: 8\n                        url: https://static.opensuse.org/distributions/logos/opensuse.png\n                        width: 8\n                      - height: 16\n                        url: https://static.opensuse.org/distributions/logos/opensuse.png\n                        width: 16\n                    id: 16626\n                    link: http://www.opensuse.org/\n                    name: openSUSE Tumbleweed\n                    project: openSUSE:Factory\n                    reponame: openSUSE_Tumbleweed\n                    repository: snapshot\n                    vendor: opensuse\n                    version: Tumbleweed\n                  - architecture: x86_64\n                    icon:\n                      - height: 8\n                        url: https://static.opensuse.org/distributions/logos/opensuse.png\n                        width: 8\n                      - height: 16\n                        url: https://static.opensuse.org/distributions/logos/opensuse.png\n                        width: 16\n                    id: 16629\n                    link: http://www.opensuse.org/\n                    name: openSUSE Leap 15.3\n                    project: openSUSE:Leap:15.3\n                    reponame: openSUSE_Leap_15.3\n                    repository: standard\n                    vendor: openSUSE\n                    version: \"15.3\"\n                  - architecture:\n                      - i586\n                      - x86_64\n                    icon:\n                      - height: 8\n                        url: https://static.opensuse.org/distributions/logos/fedora.png\n                        width: 8\n                      - height: 16\n                        url: https://static.opensuse.org/distributions/logos/fedora.png\n                        width: 16\n                    id: 16731\n                    link: http://www.fedoraproject.org/\n                    name: Fedora 33\n                    project: Fedora:33\n                    reponame: Fedora_33\n                    repository: standard\n                    vendor: Fedora\n                    version: \"33\"\n              schema:\n                properties:\n                  distribution:\n                    items:\n                      properties:\n                        architecture:\n                          example:\n                            - i586\n                            - x86_64\n                          items:\n                            type: string\n                          type: array\n                        icon:\n                          example:\n                            - height: 8\n                              url: https://static.opensuse.org/distributions/logos/opensuse.png\n                              width: 8\n                            - height: 16\n                              url: https://static.opensuse.org/distributions/logos/opensuse.png\n                              width: 16\n                          items:\n                            properties:\n                              height:\n                                type: integer\n                                xml:\n                                  attribute: true\n                              url:\n                                type: string\n                                xml:\n                                  attribute: true\n                              width:\n                                type: integer\n                                xml:\n                                  attribute: true\n                            type: object\n                          type: array\n                        id:\n                          example: 16626\n                          type: integer\n                          xml:\n                            attribute: true\n                        link:\n                          example: http://www.opensuse.org/\n                          type: string\n                        name:\n                          example: openSUSE Tumbleweed\n                          type: string\n                        project:\n                          example: openSUSE:Factory\n                          type: string\n                        reponame:\n                          example: openSUSE_Tumbleweed\n                          type: string\n                        repository:\n                          example: snapshot\n                          type: string\n                        vendor:\n                          example: opensuse\n                          type: string\n                          xml:\n                            attribute: true\n                        version:\n                          example: Tumbleweed\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                type: object\n                xml:\n                  name: distributions\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [distributions.rng](../schema/distributions.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: List all distributions.\n      tags:\n        - Distributions\n    post:\n      description: |\n        Create a distribution.\n\n        This is only for admins.\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              properties:\n                architecture:\n                  example:\n                    - i586\n                    - x86_64\n                  items:\n                    type: string\n                  type: array\n                icon:\n                  example:\n                    - height: 8\n                      url: https://static.opensuse.org/distributions/logos/opensuse.png\n                      width: 8\n                    - height: 16\n                      url: https://static.opensuse.org/distributions/logos/opensuse.png\n                      width: 16\n                  items:\n                    properties:\n                      height:\n                        type: integer\n                        xml:\n                          attribute: true\n                      url:\n                        type: string\n                        xml:\n                          attribute: true\n                      width:\n                        type: integer\n                        xml:\n                          attribute: true\n                    type: object\n                  type: array\n                id:\n                  example: 16626\n                  type: integer\n                  xml:\n                    attribute: true\n                link:\n                  example: http://www.opensuse.org/\n                  type: string\n                name:\n                  example: openSUSE Tumbleweed\n                  type: string\n                project:\n                  example: openSUSE:Factory\n                  type: string\n                reponame:\n                  example: openSUSE_Tumbleweed\n                  type: string\n                repository:\n                  example: snapshot\n                  type: string\n                vendor:\n                  example: opensuse\n                  type: string\n                  xml:\n                    attribute: true\n                version:\n                  example: Tumbleweed\n                  type: string\n                  xml:\n                    attribute: true\n              type: object\n              xml:\n                name: distribution\n        description: Distribution definition\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                distribution:\n                  - architecture:\n                      - i586\n                      - x86_64\n                    icon:\n                      - height: 8\n                        url: https://static.opensuse.org/distributions/logos/opensuse.png\n                        width: 8\n                      - height: 16\n                        url: https://static.opensuse.org/distributions/logos/opensuse.png\n                        width: 16\n                    id: 16626\n                    link: http://www.opensuse.org/\n                    name: openSUSE Tumbleweed\n                    project: openSUSE:Factory\n                    reponame: openSUSE_Tumbleweed\n                    repository: snapshot\n                    vendor: opensuse\n                    version: Tumbleweed\n              schema:\n                $ref: \"#/paths/~1distributions/post/requestBody/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [distribution.rng](../schema/distribution.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Create a distribution.\n      tags:\n        - Distributions\n  /distributions/bulk_replace:\n    put:\n      description: |\n        Bulk replace all distributions.\n\n        This is only for admins.\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1distributions/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: Distributions definition\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: ok\n                summary: Ok\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The Request has succeeded.\n\n            XML Schema used for body validation: [distributions.rng](../schema/distributions.rng)\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: validation_failed\n                summary: \"distributions validation error: 40:0: ERROR: Expecting an element name, got nothing\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Bad Request.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Bulk replace all distributions.\n      tags:\n        - Distributions\n  /distributions/include_remotes:\n    get:\n      description: |\n        List all distributions that can be build against, including the ones provided by the interconnect.\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1distributions/get/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: List all distributions including remote.\n      tags:\n        - Distributions\n  \"/distributions/{distribution_id}\":\n    delete:\n      description: |\n        Delete a distribution.\n\n        This is only for admins.\n      parameters:\n        - $ref: \"#/paths/~1distributions~1%7Bdistribution_id%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: ok\n                summary: Ok\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Distribution with 'id'=0\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not found.\n      security:\n        - basic_authentication: []\n      summary: Delete a distribution.\n      tags:\n        - Distributions\n    get:\n      description: |\n        Show a distribution that can be build against.\n      parameters:\n        - description: The id of the distribution\n          example: 16626\n          in: path\n          name: distribution_id\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                $ref: \"#/paths/~1distributions/post/requestBody/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Distribution with 'id'=0\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not found.\n      security:\n        - basic_authentication: []\n      summary: Show a distribution.\n      tags:\n        - Distributions\n    put:\n      description: Update the data of a distribution.\n      parameters:\n        - $ref: \"#/paths/~1distributions~1%7Bdistribution_id%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1distributions/post/requestBody/content/application~1xml;%20charset=utf-8/schema\"\n        description: Distribution definition\n      responses:\n        \"200\":\n          description: |\n            OK. The Request has succeeded.\n\n            XML Schema used for body validation: [distribution.rng](../schema/distribution.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Distribution with 'id'=0\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not found.\n      security:\n        - basic_authentication: []\n      summary: Update a distribution.\n      tags:\n        - Distributions\n  /group:\n    get:\n      description: List available groups.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: \"2\"\n                entry:\n                  - name: group-admin\n                  - name: group-test\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: List available groups.\n      tags:\n        - Groups\n  \"/group/{group_title}\":\n    delete:\n      description: Delete a group.\n      parameters:\n        - $ref: \"#/paths/~1group~1%7Bgroup_title%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Group 'group-testd'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Delete a group.\n      tags:\n        - Groups\n    get:\n      description: Read group data.\n      parameters:\n        - description: Group title\n          example: group-test\n          in: path\n          name: group_title\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  maintainer:\n                    items:\n                      properties:\n                        userid:\n                          example: user-test\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  person:\n                    items:\n                      properties:\n                        userid:\n                          example: user-test\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                    xml:\n                      wrapped: true\n                  title:\n                    example: group-test\n                    type: string\n                type: object\n                xml:\n                  name: group\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [group.rng](../schema/group.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Group 'group-testd'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Read group data.\n      tags:\n        - Groups\n    post:\n      description: Modify group data.\n      parameters:\n        - $ref: \"#/paths/~1group~1%7Bgroup_title%7D/get/parameters/0\"\n        - description: |\n            Command to be executed. It takes one of these available values:\n            * `add_user`: add a user to a group. `userid` query parameter must be also used.\n            * `remove_user`: remove a user from a group. `userid` query parameter must be also used.\n            * `set_email`: set email adress of group. `email` query parameter must be also used.\n          in: query\n          name: cmd\n          schema:\n            enum:\n              - add_user\n              - remove_user\n              - set_email\n            type: string\n        - description: User login. Used with `cmd=add_user` or `cmd=remove_user`.\n          in: query\n          name: userid\n          schema:\n            type: string\n        - description: Group email. Used with `cmd=set_email`.\n          in: query\n          name: email\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: bad_request\n                summary: cmd must be set to add_user or remove_user\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Bad Request.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                group_not_found:\n                  summary: Group Not Found\n                  value:\n                    code: not_found\n                    summary: Couldn't find Group 'group-testd'\n                user_not_found:\n                  summary: User Not Found\n                  value:\n                    code: not_found\n                    summary: Couldn't find User with login = user_test\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Modify group data.\n      tags:\n        - Groups\n    put:\n      description: Write group data.\n      parameters:\n        - $ref: \"#/paths/~1group~1%7Bgroup_title%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1group~1%7Bgroup_title%7D/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n        description: |\n          Group definition.\n\n          XML Schema used for body validation: [group.rng](../schema/group.rng)\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Group 'group-testd'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Write group data.\n      tags:\n        - Groups\n  /issue_trackers:\n    get:\n      description: Get the list of issue trackers.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                items:\n                  properties:\n                    description:\n                      example: openSUSE Feature Database\n                      type: string\n                    enable-fetch:\n                      example: \"false\"\n                      type: string\n                    kind:\n                      example: fate\n                      type: string\n                    label:\n                      example: fate#@@@\n                      type: string\n                    name:\n                      example: fate\n                      type: string\n                    regex:\n                      example: (?:fate|Fate|FATE)\\s*#\\s*(\\d+)\n                      type: string\n                    show-url:\n                      example: https://features.opensuse.org/@@@\n                      type: string\n                    url:\n                      example: https://features.opensuse.org/\n                      type: string\n                  type: object\n                  xml:\n                    name: issue-tracker\n                type: array\n                xml:\n                  name: issue-trackers\n                  wrapped: true\n          description: |\n            List of issue trackers.\n\n            XML Schema used for body validation: [issue_trackers.rng](../schema/issue_trackers.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Get the list of issue trackers.\n      tags:\n        - Issue Trackers\n    post:\n      description: Create an issue tracker.\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1issue_trackers/get/responses/200/content/application~1xml;%20charset=utf-8/schema/items\"\n        description: |\n          Issue tracker definition.\n\n          XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng)\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                empty_body:\n                  summary: Empty Body\n                  value:\n                    code: validation_failed\n                    summary: Document is empty, not allowed for issue_tracker\n                wrong_xml_element:\n                  summary: Wrong XML Element\n                  value:\n                    code: validation_failed\n                    summary: \"issue_tracker validation error: 1:0: ERROR: Expecting element issue-tracker, got foo\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Validation failed.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Create an issue tracker.\n      tags:\n        - Issue Trackers\n  \"/issue_trackers/{issue_tracker_name}\":\n    delete:\n      description: Delete an issue tracker.\n      parameters:\n        - $ref: \"#/paths/~1issue_trackers~1%7Bissue_tracker_name%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Unable to find issue tracker 'foo'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not Found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Delete an issue tracker.\n      tags:\n        - Issue Trackers\n    get:\n      description: Show an issue tracker.\n      parameters:\n        - description: Issue tracker name\n          example: fate\n          in: path\n          name: issue_tracker_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                $ref: \"#/paths/~1issue_trackers/get/responses/200/content/application~1xml;%20charset=utf-8/schema/items\"\n          description: |\n            Issue tracker definition.\n\n            XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Unable to find issue tracker 'foo'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not Found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Show an issue tracker.\n      tags:\n        - Issue Trackers\n    put:\n      description: Update the issue tracker given as path parameter. If it is not found, create it.\n      parameters:\n        - $ref: \"#/paths/~1issue_trackers~1%7Bissue_tracker_name%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1issue_trackers/get/responses/200/content/application~1xml;%20charset=utf-8/schema/items\"\n        description: |\n          Issue tracker definition.\n\n          XML Schema used for body validation: [issue_tracker.rng](../schema/issue_tracker.rng)\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                empty_body:\n                  summary: Empty Body\n                  value:\n                    code: validation_failed\n                    summary: Document is empty, not allowed for issue_tracker\n                wrong_xml_element:\n                  summary: Wrong XML Element\n                  value:\n                    code: validation_failed\n                    summary: \"issue_tracker validation error: 1:0: ERROR: Expecting element issue-tracker, got foo\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Validation failed.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Update or create an issue tracker.\n      tags:\n        - Issue Trackers\n  \"/issue_trackers/{issue_tracker_name}/issues/{issue_name}\":\n    get:\n      description: Show an issue of an issue tracker.\n      parameters:\n        - $ref: \"#/paths/~1issue_trackers~1%7Bissue_tracker_name%7D/get/parameters/0\"\n        - description: Issue name.\n          example: 12345\n          in: path\n          name: issue_name\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  created_at:\n                    example: 2021-01-18 19:17:51 UTC\n                    type: string\n                  label:\n                    example: fate#12345\n                    type: string\n                  name:\n                    example: 12345\n                    type: string\n                  tracker:\n                    example: fate\n                    type: string\n                  updated_at:\n                    example: 2021-01-18 19:17:51 UTC\n                    type: string\n                  url:\n                    example: https://features.opensuse.org/12345\n                    type: string\n                type: object\n                xml:\n                  name: issue\n          description: |\n            Issue definition.\n\n            XML Schema used for body validation: [issue.rng](../schema/issue.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: issue_tracker_not_found\n                summary: \"Error: Issue Tracker 'foo' not found.\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not Found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Show an issue of an issue tracker.\n      tags:\n        - Issue Trackers\n  /person:\n    get:\n      description: |\n        List all people.\n      parameters:\n        - description: A prefix to filter the people to look for\n          example: Adm\n          in: query\n          name: prefix\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: \"9\"\n                entry:\n                  - name: Admin\n                  - name: _nobody_\n                  - name: Iggy\n                  - name: user_1\n                  - name: repo-checker\n                  - name: reviewhero\n                  - name: user_2\n                  - name: user_3\n                  - name: Requestor\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n      security:\n        - basic_authentication: []\n      summary: List all people.\n      tags:\n        - Person\n    post:\n      description: |\n        Allows executing command on the person endpoint.\n\n        As of now, the only command allowed is 'register'.\n      parameters:\n        - description: The command to execute\n          example: register\n          in: query\n          name: cmd\n          required: true\n          schema:\n            enum:\n              - register\n            type: string\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              properties:\n                email:\n                  example: janedoe@example.com\n                  type: string\n                login:\n                  example: jane\n                  type: string\n                note:\n                  example: Jane works in the Engineering team\n                  type: string\n                password:\n                  example: superpassword123\n                  type: string\n                realname:\n                  example: Jane Doe\n                  type: string\n                state:\n                  example: confirmed\n                  type: string\n              type: object\n              xml:\n                name: unregisteredperson\n        description: The data for the person to register.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Bad Request:\n                  value:\n                    code: err_register_save\n                    summary: \"Could not save the registration, details: Login is the name of an already existing user and Password can't be blank.\"\n                Unknown Command:\n                  value:\n                    code: unknown_command\n                    summary: Allowed command is 'register'.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Bad request.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      summary: Executes a command on the person endpoint.\n      tags:\n        - Person\n  /person/register:\n    post:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: \"#/paths/~1person/post/requestBody/content/application~1xml/schema\"\n        description: Data for the person to register.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: permission_denied\n                summary: |\n                  User accounts can not be registered via OBS when in LDAP mode. Please refer\n                  to your LDAP server to create new users.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Forbidden\n      summary: Registers a new person\n      tags:\n        - Person\n  \"/person/{login}\":\n    get:\n      parameters:\n        - description: Person login.\n          example: Admin\n          in: path\n          name: login\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                email: root@localhost\n                globalrole: Admin\n                ignore_auth_services: false\n                login: Admin\n                realname: OBS Instance Superuser\n                state: confirmed\n                watchlist:\n                  - project:\n                      name: home:Admin\n              schema:\n                properties:\n                  email:\n                    example: unconfigured@openbuildservice.org\n                    type: string\n                  globalrole:\n                    type: string\n                  ignore_auth_services:\n                    type: boolean\n                  login:\n                    example: user_1\n                    type: string\n                  realname:\n                    example: User1\n                    type: string\n                  state:\n                    example: confirmed\n                    type: string\n                  watchlist:\n                    items:\n                      properties:\n                        project:\n                          properties:\n                            name:\n                              type: string\n                              xml:\n                                attribute: true\n                          type: object\n                      type: object\n                    type: array\n                    xml:\n                      name: watchlist\n                type: object\n                xml:\n                  name: person\n          description: |\n            OK. The request has succeeded.\n            XML Schema used for body validation: [user.rng](../schema/user.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find User with login = <login>\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Get details about a person\n      tags:\n        - Person\n    post:\n      parameters:\n        - $ref: \"#/paths/~1person~1%7Blogin%7D/get/parameters/0\"\n        - description: The command to execute against the provided person.\n          example: change_password\n          in: query\n          name: cmd\n          required: true\n          schema:\n            enum:\n              - change_password\n              - lock\n              - delete\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              type: string\n        description: The password in plain text when the cmd param is 'change_password'.\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n            XML Schema used for body validation: [api_response.xsd](../schema/api_response.xsd)\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Bad Request:\n                  value:\n                    code: err_register_save\n                    summary: \"Could not save the registration, details: Login is the name of an already existing user and Password can't be blank.\"\n                Unknown Command:\n                  value:\n                    code: unknown_command\n                    summary: Allowed commands are '<some command>'.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Bad request.\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                update_user_not_authorized:\n                  value:\n                    code: update_user_not_authorized\n                    summary: You are not authorized to update this User.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Forbidden.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"404\":\n          $ref: \"#/paths/~1person~1%7Blogin%7D/get/responses/404\"\n      security:\n        - basic_authentication: []\n      summary: Perform changes on a registered person\n      tags:\n        - Person\n    put:\n      parameters:\n        - $ref: \"#/paths/~1person~1%7Blogin%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: \"#/paths/~1person/post/requestBody/content/application~1xml/schema\"\n        description: The new data for the person referred in the login parameter.\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Subaccount chaining:\n                  value:\n                    code: subaccount_chaining\n                    summary: A subaccount can not be assigned to subaccount <login>\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Bad request.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Change user info not permitted:\n                  value:\n                    code: change_userinfo_no_permission\n                    summary: no permission to change userinfo for user <login>\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Unauthorized.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: password_empty\n                summary: Requested non-existing user\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Update person\n      tags:\n        - Person\n  \"/person/{login}/group\":\n    get:\n      description: List the groups the person belongs to.\n      parameters:\n        - $ref: \"#/paths/~1person~1%7Blogin%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: \"2\"\n                entry:\n                  - name: factory-maintainers\n                  - name: obs-developers\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find User with login = fake\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not Found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: List the groups of a person\n      tags:\n        - Person\n  \"/person/{login}/token\":\n    get:\n      description: List the authentication tokens of a person.\n      parameters:\n        - $ref: \"#/paths/~1person~1%7Blogin%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                count: 2\n                entry:\n                  - id: 3\n                    kind: rss\n                    string: FK49K39DKK\n                  - id: 25\n                    kind: release\n                    package: ghcz\n                    project: devel:languages:haskell\n                    string: 4T04JGI691\n              schema:\n                properties:\n                  count:\n                    type: integer\n                    xml:\n                      attribute: true\n                  entry:\n                    items:\n                      properties:\n                        id:\n                          type: string\n                          xml:\n                            attribute: true\n                        kind:\n                          type: string\n                          xml:\n                            attribute: true\n                        package:\n                          type: string\n                          xml:\n                            attribute: true\n                        project:\n                          type: string\n                          xml:\n                            attribute: true\n                        string:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                type: object\n                xml:\n                  name: directory\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [tokenlist.rng](../schema/tokenlist.rng)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: view_user_not_authorized\n                summary: You are not authorized to view this User.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Forbidden.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: List the authentication tokens of a person.\n      tags:\n        - Person\n    post:\n      description: |\n        Create a new authentication token for a person.\n\n        The token may be limited to a specific package. In this case the query parameters\n        `project` and `package` should be provided.\n\n        With an empty request body, a token of the default kind 'runservice' is created.\n      parameters:\n        - $ref: \"#/paths/~1person~1%7Blogin%7D/get/parameters/0\"\n        - description: |\n            Project name. Should be provided, together with the package query parameter,\n            to limit the token to a specific package.\n          example: home:hans\n          in: query\n          name: project\n          schema:\n            type: string\n        - description: |\n            Package name. Should be provided, together with the project query parameter,\n            to limit the token to a specific package.\n          example: gchz\n          in: query\n          name: package\n          schema:\n            type: string\n        - description: |\n            Operation indicates the kind of token that is going to be created.\n\n            When operation is not specified, 'runservice' is the default value.\n          example: runservice\n          in: query\n          name: operation\n          schema:\n            enum:\n              - runservice\n              - rebuild\n              - release\n            type: string\n        - description: |\n            **(Beta/Unstable)**\n\n            SCM token used in OBS workflows to report back the workflow status, when the operation is workflow.\n\n            It's normally possible to generate SCM tokens directly on the SCM's website like GitHub or GitLab.\n          example: ghp_fake_token_123\n          in: query\n          name: scm_token\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: ok\n                data:\n                  - i6iF4M5cn\n                  - 5\n                summary: Ok\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n\n            **NOTE:** This is an example of a valid response. It should include the attribute 'name'\n            in every 'data' tag, which is missing in the example using the schema.\n            ```\n              <status code=\"ok\">\n                <summary>Ok</summary>\n                <data name=\"token\">i6iF4M5cn</data>\n                <data name=\"id\">5</data>\n              </status>\n            ```\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: update_user_not_authorized\n                summary: You are not authorized to update this User.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Forbidden.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      security:\n        - basic_authentication: []\n      summary: Create a new authentication token for a person.\n      tags:\n        - Person\n  \"/person/{login}/token/{id}\":\n    delete:\n      description: Delete a token of the specified person.\n      parameters:\n        - $ref: \"#/paths/~1person~1%7Blogin%7D/get/parameters/0\"\n        - description: Id of the token to be removed.\n          example: 3\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: ok\n                summary: Ok\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK. The request has succeeded.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: update_user_not_authorized\n                summary: You are not authorized to update this User.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Forbidden.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Token with 'id'=33 [WHERE `tokens`.`user_id` = ?]\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Not Found.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n      summary: Delete a token of a person.\n      tags:\n        - Person\n  /published:\n    get:\n      description: |\n        Get a list of all the projects, all of them are considered published.\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: OBS:Server:Unstable\n                  - name: devel:languages:ruby\n                  - name: openSUSE:Maintenance:9810\n                  - name: zypp:plugins\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: List all the published projects.\n      tags:\n        - Published Binaries\n  \"/published/{project_name}\":\n    get:\n      description: |\n        Get a list of the repositories of the project that already have published binaries.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: SLE_15_SP3\n                  - name: containers\n                  - name: images\n                  - name: openSUSE_15.2\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: download_binary_no_permission\n                summary: No permission for binaries from project home:Admin\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            Forbidden.\n\n            XML Schema used for body validation: [status.xsd](../schema/status.xsd)\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Project\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: List the repositories of a project with published binaries\n      tags:\n        - Published Binaries\n  \"/published/{project_name}/{repository_name}\":\n    get:\n      description: |\n        Get a list of architectures' directories and other files (.repo, .ymp, etc.) present at the level project/repository of the directory tree where the published binaries are stored.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: OBS:Server:Unstable.repo\n                  - name: OBS_Server.ymp\n                  - name: aarch64\n                  - name: x86_64\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          $ref: \"#/paths/~1published~1%7Bproject_name%7D/get/responses/403\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Project\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: List the content of the directory tree where the binaries are published at the level project/repository.\n      tags:\n        - Published Binaries\n  \"/published/{project_name}/{repository_name}/{architecture_name}\":\n    get:\n      description: |\n        Get a list of binaries and other files present at the level project/repository/architecture of the directory tree as a result of successful building and publishing processes.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: apache2-mod_auth_memcookie-1.1.1-lp152.2.1.x86_64.rpm\n                  - name: obs-api-testsuite-rspec-2.11~alpha.20200618T200341.d42d8310aa-lp152.10515.1.x86_64.rpm\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          $ref: \"#/paths/~1published~1%7Bproject_name%7D/get/responses/403\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Project\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: List the content of the directory tree where the binaries are published at the level project/repository/architecture.\n      tags:\n        - Published Binaries\n  \"/published/{project_name}/{repository_name}/{architecture_name}/{binary_filename}\":\n    get:\n      description: |\n        Allow to download the binary file that was published and stored under the directory given by project/repository/architecture/.\n        Can response with Media Types like application/x-rpm, text/xml, etc.\n        NOTE: Use this only if you absolutely have to, as it doesn't use the redirector.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - description: Binary filename\n          example: ctris-0.42.1-8.1.x86_64.rpm\n          in: path\n          name: binary_filename\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/*:\n              schema:\n                format: binary\n                type: string\n            text/xml:\n              schema:\n                format: binary\n                type: string\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          $ref: \"#/paths/~1published~1%7Bproject_name%7D/get/responses/403\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                NoSuchFile:\n                  value:\n                    code: 404\n                    details: 404 no such file\n                    summary: no such file\n                NotFound:\n                  value:\n                    code: not_found\n                    summary: Couldn't find Project\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Return the binary file itself.\n      tags:\n        - Published Binaries\n  \"/published/{project_name}/{repository_name}/{architecture_name}/{binary_filename}?view=ymp\":\n    get:\n      description: |\n        Generate a ymp pattern, which contains the list of packages needed for intalling certain software without having to create dependencies between them.\n        Read more about patterns [in this tutorial](https://en.opensuse.org/openSUSE:Build_Service_Tutorial#Create_Patterns).\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1published~1%7Bproject_name%7D~1%7Brepository_name%7D~1%7Barchitecture_name%7D~1%7Bbinary_filename%7D/get/parameters/3\"\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                group:\n                  distversion: openSUSEsLeap 15.2\n                  repositories:\n                    repository:\n                      - description: These are the developer versions of the tools for the Open Build Service project\n                        name: OBS:Server:Unstable\n                        recommended: true\n                        summary: Developer versions of the Open Build Service Server\n                        url: https://download.opensuse.org/repositories/OBS:/Server:/Unstable/openSUSE_15.2\n                      - description: openSUSE Leap borrows packages from SLE for the base system\n                        name: openSUSE:Leap:15.2\n                        recommended: false\n                        summary: openSUSE Leap 15.2\n                        url: http://download.opensuse.org/distribution/leap/15.2/repo/oss\n                  software:\n                    item:\n                      description: This package provides debug information for package virt-v2v\n                      name: virt-v2v-debuginfo\n                      summary: Debug information for package virt-v2v\n                xmlns: http://opensuse.org/Standards/One_Click_Install\n                xmlns:os: http://opensuse.org/Standards/One_Click_Install\n              schema:\n                properties:\n                  group:\n                    properties:\n                      distversion:\n                        type: string\n                        xml:\n                          attribute: true\n                      repositories:\n                        properties:\n                          repository:\n                            items:\n                              properties:\n                                description:\n                                  type: string\n                                name:\n                                  type: string\n                                recommended:\n                                  type: string\n                                  xml:\n                                    attribute: true\n                                summary:\n                                  type: string\n                                url:\n                                  type: string\n                              type: object\n                            type: array\n                        type: object\n                      software:\n                        properties:\n                          item:\n                            properties:\n                              description:\n                                type: string\n                              name:\n                                type: string\n                              summary:\n                                type: string\n                            type: object\n                        type: object\n                    type: object\n                  xmlns:\n                    type: string\n                    xml:\n                      attribute: true\n                      example: http://opensuse.org/Standards/One_Click_Install\n                  xmlns:os:\n                    type: string\n                    xml:\n                      attribute: true\n                      example: http://opensuse.org/Standards/One_Click_Install\n                type: object\n                xml:\n                  name: metapackage\n          description: OK.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          $ref: \"#/paths/~1published~1%7Bproject_name%7D/get/responses/403\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find Project\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Generate a ymp pattern that includes the needed repositories to install the given binary.\n      tags:\n        - Published Binaries\n  \"/published/{project_name}/{repository_name}?view=status\":\n    get:\n      description: |\n        Get information about the build process (build id, start time, etc.) for the pair project and repository.\n      parameters:\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D/get/parameters/0\"\n        - $ref: \"#/paths/~1build~1%7Bproject_name%7D~1%7Brepository_name%7D/get/parameters/1\"\n        - description: Set this parameter to status in order to get details about the last publication.\n          example: status\n          in: query\n          name: view\n          schema:\n            enum:\n              - status\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  buildid:\n                    example: 1569496563\n                    type: integer\n                  code:\n                    example: succeeded\n                    type: string\n                    xml:\n                      attribute: true\n                  endtime:\n                    example: 1617574611\n                    type: integer\n                  starttime:\n                    example: 1617574611\n                    type: integer\n                type: object\n                xml:\n                  name: status\n          description: OK. The request has succeeded.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          $ref: \"#/paths/~1published~1%7Bproject_name%7D/get/responses/403\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                project:\n                  summary: Couldn't find Project\n                  x-code: not_found\n                unknown:\n                  value:\n                    code: unknown\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Present information about the last publication of the pair project and repository.\n      tags:\n        - Published Binaries\n  /request:\n    get:\n      description: Get a simple directory listing of all requests\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                entry:\n                  - name: 122\n                  - name: 123\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK\n\n            XML Schema used for body validation: [directory.xsd](../schema/directory.xsd)\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Get a simple directory listing of all requests\n      tags:\n        - Request\n    post:\n      description: Create a request\n      parameters:\n        - description: This endpoint will refuse the creation of a new request if this parameter is not set.\n          in: query\n          name: cmd\n          required: true\n          schema:\n            enum:\n              - create\n            type: string\n        - description: Ask the server to add revisions of the current sources to the request.\n          in: query\n          name: addrevision\n          schema:\n            enum:\n              - 1\n            type: string\n        - description: Enforce a new package instance in a project which has OBS:DelegateRequestTarget set\n          in: query\n          name: ignore_delegate\n          schema:\n            enum:\n              - 1\n            type: string\n        - description: Skip the build state check\n          in: query\n          name: ignore_build_state\n          schema:\n            enum:\n              - 1\n            type: string\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              properties:\n                action:\n                  properties:\n                    options:\n                      properties:\n                        sourceupdate:\n                          example: cleanup\n                          type: string\n                      type: object\n                    source:\n                      properties:\n                        package:\n                          example: obs-server\n                          type: string\n                          xml:\n                            attribute: true\n                        project:\n                          example: home:foo-user\n                          type: string\n                          xml:\n                            attribute: true\n                        rev:\n                          example: 521\n                          type: integer\n                          xml:\n                            attribute: true\n                      type: object\n                    target:\n                      properties:\n                        package:\n                          example: obs-server\n                          type: string\n                          xml:\n                            attribute: true\n                        project:\n                          example: OBS:Unstable\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type:\n                      example: submit\n                      type: string\n                      xml:\n                        attribute: true\n                  type: object\n                creator:\n                  example: foo-user\n                  type: string\n                  xml:\n                    attribute: true\n                description:\n                  example: A little version update\n                  type: string\n                history:\n                  items:\n                    properties:\n                      comment:\n                        example: Please review sources\n                        type: string\n                      description:\n                        example: Request created\n                        type: string\n                      when:\n                        example: 2021-01-15T13:39:43\n                        type: string\n                        xml:\n                          attribute: true\n                      who:\n                        example: foo\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                  type: array\n                id:\n                  example: 42\n                  type: integer\n                  xml:\n                    attribute: true\n                review:\n                  items:\n                    anyOf:\n                      - properties:\n                          by_user:\n                            example: obs-maintainer\n                            type: string\n                            xml:\n                              attribute: true\n                          state:\n                            example: accepted\n                            type: string\n                            xml:\n                              attribute: true\n                          when:\n                            example: 2021-01-15T15:49:32\n                            type: string\n                            xml:\n                              attribute: true\n                          who:\n                            example: obs-maintainer\n                            type: string\n                            xml:\n                              attribute: true\n                        type: object\n                      - properties:\n                          by_group:\n                            example: obs-group\n                            type: string\n                            xml:\n                              attribute: true\n                          state:\n                            example: accepted\n                            type: string\n                            xml:\n                              attribute: true\n                          when:\n                            example: 2021-01-15T15:49:32\n                            type: string\n                            xml:\n                              attribute: true\n                          who:\n                            example: obs-maintainer\n                            type: string\n                            xml:\n                              attribute: true\n                        type: object\n                      - properties:\n                          by_project:\n                            example: OBS:Unstable\n                            type: string\n                            xml:\n                              attribute: true\n                          state:\n                            example: accepted\n                            type: string\n                            xml:\n                              attribute: true\n                          when:\n                            example: 2021-01-15T15:49:32\n                            type: string\n                            xml:\n                              attribute: true\n                          who:\n                            example: obs-maintainer\n                            type: string\n                            xml:\n                              attribute: true\n                        type: object\n                      - properties:\n                          by_package:\n                            example: obs-server\n                            type: string\n                            xml:\n                              attribute: true\n                          state:\n                            example: accepted\n                            type: string\n                            xml:\n                              attribute: true\n                          when:\n                            example: 2021-01-15T15:49:32\n                            type: string\n                            xml:\n                              attribute: true\n                          who:\n                            example: obs-maintainer\n                            type: string\n                            xml:\n                              attribute: true\n                        type: object\n                  type: array\n                state:\n                  properties:\n                    comment:\n                      example: allright\n                      type: string\n                    name:\n                      example: accepted\n                      type: string\n                      xml:\n                        attribute: true\n                    when:\n                      example: 2021-01-15T13:39:43\n                      type: string\n                      xml:\n                        attribute: true\n                    who:\n                      example: bar-user\n                      type: string\n                      xml:\n                        attribute: true\n                  type: object\n              type: object\n              xml:\n                name: request\n        description: |\n          Request XML\n\n          **NOTE:** You cannot pass the request id in the xml. You can pass the history in the xml, but it will be simply ignored.\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                $ref: \"#/paths/~1request/post/requestBody/content/application~1xml;%20charset=utf-8/schema\"\n          description: |\n            OK.\n\n            XML Schema used for body validation: [request.rng](../schema/request.rng)\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: expand_error\n                summary: The source of package test-project/test-package for revision 2 is broken\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"403\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: create_bs_request_not_authorized\n                summary: You are not authorized to create this Bs request.\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Forbidden\n      security:\n        - basic_authentication: []\n      summary: Create a request\n      tags:\n        - Request\n  \"/request/{id}\":\n    delete:\n      description: Delete a given request.\n      parameters:\n        - $ref: \"#/paths/~1request~1%7Bid%7D/get/parameters/0\"\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find request with id '10'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found\n      security:\n        - basic_authentication: []\n      summary: Delete a given request.\n      tags:\n        - Request\n    get:\n      description: Show details about a specified request.\n      parameters:\n        - description: Id of the choosen request.\n          example: 743\n          in: path\n          name: id\n          required: true\n          schema:\n            type: integer\n        - $ref: \"#/paths/~1request?view=collection/get/parameters/6\"\n        - $ref: \"#/paths/~1request?view=collection/get/parameters/7\"\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1request/post/responses/200\"\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find request with id '5'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found\n      security:\n        - basic_authentication: []\n      summary: Show details about a specified request.\n      tags:\n        - Request\n    post:\n      description: Apply certain actions on a specified request.\n      parameters:\n        - $ref: \"#/paths/~1request~1%7Bid%7D/get/parameters/0\"\n        - description: |\n            - `addreview`:\n              Add a review to a request. **NOTE:** You need to specify who has to address\n              the review by providing an additional paramter. Possible options are:\n              * by_user\n              * by_group\n              * by_project\n\n            - `assignreview`:\n              Accept a review for a given group and assign a new review to a specific user.\n              **NOTE:** You need to pass the group name in the `by_group` parameter\n              and the new reviewer in the `reviewer` parameter.\n\n            - `changestate`: Modify the state of a given request.\n              **NOTE:** You need to pass the new state throug the `newstate` parameter. Changing\n              from one state to another is in certain cases not allowed. You can still force\n              the operation by using the `force=1` parameter.\n\n            - `changereviewstate`:\n              Change the state of a review inside a given request.\n\n            - `setpriority`:\n              Change the priority of a given request. You have to pass the choosen priority through\n              the `priority` parameter. Possible values are:\n              * low\n              * moderate\n              * important\n              * critical\n\n            - `setincident`: Change the target incident for maintenance_incident actions\n              **NOTE:** You need to provide the incident number through the `incident`\n              parameter.\n\n            - `setacceptat`: Set or modify the accept_at time. Either specified by the `time`\n              parameter or by default set to now.\n\n            - `approve`: Pre-approve a request in the review state. It will turn into state `accepted`\n              after the last review.\n\n            - `cancelapproval`: Reset the approval of a request\n          examples:\n            addreview:\n              value: cmd=addreview&by_group=heroes\n            approve:\n              value: cmd=approve\n            assignreview:\n              value: cmd=assignreview&by_group=heroes&reviewer=foo\n            cancelapproval:\n              value: cmd=cancelapproval\n            changereviewstate:\n              value: cmd=changereviewstate&by_group=heroes&newstate=new&comment=reopened\n            changestate:\n              value: cmd=changestate&newstate=accepted\n            setacceptat:\n              value: cmd=setacceptat&time='2020-12-01%2000:00:00%20UTC'\n            setincident:\n              value: cmd=setincident&incident=12\n            setpriority:\n              value: cmd=setpriority&priority=low&comment=notsoimportant\n          explode: false\n          in: query\n          name: cmd\n          schema:\n            type: string\n          style: form\n        - description: Define the new state\n          in: query\n          name: newstate\n          schema:\n            type: string\n        - description: Define the new priority\n          in: query\n          name: priority\n          schema:\n            type: string\n        - description: Specify the user of a new review\n          in: query\n          name: by_user\n          schema:\n            type: string\n        - description: Specify the group of the new review\n          in: query\n          name: by_group\n          schema:\n            type: string\n        - description: Specify the project of the new review\n          in: query\n          name: by_project\n          schema:\n            type: string\n        - description: Specify the package of the new review\n          in: query\n          name: by_package\n          schema:\n            type: string\n        - description: Specify the incident number for `setincident`\n          in: query\n          name: incident\n          schema:\n            type: string\n        - description: Specify the time for `setacceptat`\n          in: query\n          name: time\n          schema:\n            type: string\n        - description: Add a comment to one of the actions\n          in: query\n          name: comment\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1attribute~1%7Bnamespace%7D/delete/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: no_maintenance_release_target\n                summary: |\n                  Maintenance incident request contains release target project test_maintenance_project with\n                  invalid project kind \"standard\" (should be \"maintenance_release\") for package package01\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Not Found:\n                  value:\n                    code: not_found\n                    summary: Couldn't find request with id '120'\n                Request Not Modifiable:\n                  value:\n                    code: request_not_modifiable\n                    summary: request is not in review state\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found\n      security:\n        - basic_authentication: []\n      summary: Apply certain actions on a specified request.\n      tags:\n        - Request\n    put:\n      description: |\n        Modify a given request.\n\n        **NOTE:** Certain parts of a request can only be changed by admins.\n      parameters:\n        - $ref: \"#/paths/~1request~1%7Bid%7D/get/parameters/0\"\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            schema:\n              $ref: \"#/paths/~1request/post/requestBody/content/application~1xml;%20charset=utf-8/schema\"\n        description: |\n          Request XML\n\n          **NOTE:** You cannot pass the request id in the xml. You can pass the history in the xml, but it will be simply ignored.\n\n          XML Schema used for body validation: [request.rng](../schema/request.rng)\n        required: true\n      responses:\n        \"200\":\n          $ref: \"#/paths/~1request/post/responses/200\"\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: request_save_error\n                summary: Auto accept time is in the past\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find request with id '10'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found\n      security:\n        - basic_authentication: []\n      summary: Modify a given request.\n      tags:\n        - Request\n  \"/request/{id}?cmd=diff\":\n    post:\n      description: |\n        Get the diff for all packages affected by the request.\n      parameters:\n        - $ref: \"#/paths/~1request~1%7Bid%7D/get/parameters/0\"\n        - description: |\n            Diff relative to a given superseded request. State the id of the corresponding superseded request.\n          example: 10401\n          in: query\n          name: diff_to_superseded\n          schema:\n            type: string\n        - description: Set this parameter to xml in order to receive a structured diff instead of plain text.\n          in: query\n          name: view\n          schema:\n            enum:\n              - xml\n            type: string\n        - description: Include parsed issues\n          in: query\n          name: withissues\n          schema:\n            enum:\n              - true\n              - 1\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  action:\n                    properties:\n                      options:\n                        properties:\n                          sourceupdate:\n                            example: cleanup\n                            type: string\n                        type: object\n                      source:\n                        properties:\n                          package:\n                            example: ruby\n                            type: string\n                            xml:\n                              attribute: true\n                          project:\n                            example: home:Iggy:branches:home:Admin\n                            type: string\n                            xml:\n                              attribute: true\n                          rev:\n                            example: 3\n                            type: string\n                            xml:\n                              attribute: true\n                        type: object\n                      sourcediff:\n                        properties:\n                          files:\n                            items:\n                              properties:\n                                file:\n                                  properties:\n                                    diff:\n                                      example: |\n                                        spec files:\n                                        -----------\n                                        --- test.spec\n                                        +++ test.spec\n                                        @@ -0,0 +1 @@\n                                        +# NEW COMMENT\n                                        \\ No newline at end of file\n                                      type: string\n                                    new:\n                                      $ref: \"#/paths/~1request~1%7Bid%7D?cmd=diff/post/responses/200/content/application~1xml;%20charset=utf-8/schema/properties/action/properties/sourcediff/properties/files/items/properties/file/properties/old\"\n                                    old:\n                                      properties:\n                                        md5:\n                                          example: d4f573d2bf9a0e306f87dad7eee0cf56\n                                          type: string\n                                          xml:\n                                            attribute: true\n                                        name:\n                                          example: ruby.spec\n                                          type: string\n                                          xml:\n                                            attribute: true\n                                        size:\n                                          example: 70\n                                          type: string\n                                          xml:\n                                            attribute: true\n                                      type: object\n                                    state:\n                                      example: changed\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                  type: object\n                              type: object\n                            type: array\n                          issues:\n                            items:\n                              properties:\n                                issue:\n                                  properties:\n                                    label:\n                                      example: boo#944302\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                    name:\n                                      example: 922894\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                    state:\n                                      example: added\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                    tracker:\n                                      example: bnc\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                    url:\n                                      example: https://bugzilla.opensuse.org/show_bug.cgi?id=944302\n                                      type: string\n                                      xml:\n                                        attribute: true\n                                  type: object\n                              type: object\n                            type: array\n                          key:\n                            example: 9dbe9eb1767c5e12c69839af893dc239\n                            type: string\n                            xml:\n                              attribute: true\n                          new:\n                            $ref: \"#/paths/~1request~1%7Bid%7D?cmd=diff/post/responses/200/content/application~1xml;%20charset=utf-8/schema/properties/action/properties/sourcediff/properties/old\"\n                          old:\n                            properties:\n                              package:\n                                example: ruby\n                                type: string\n                                xml:\n                                  attribute: true\n                              project:\n                                example: home:Iggy:branches:home:Admin\n                                type: string\n                                xml:\n                                  attribute: true\n                              rev:\n                                example: 3\n                                type: string\n                                xml:\n                                  attribute: true\n                              srcmd5:\n                                example: 59300f4ba65f53334b2e2a39f87ba3a0\n                                type: string\n                                xml:\n                                  attribute: true\n                            type: object\n                        type: object\n                      target:\n                        properties:\n                          package:\n                            example: ruby\n                            type: string\n                            xml:\n                              attribute: true\n                          project:\n                            example: home:Admin\n                            type: string\n                            xml:\n                              attribute: true\n                        type: object\n                      type:\n                        example: submit\n                        type: string\n                        xml:\n                          attribute: true\n                    type: object\n                  actions:\n                    example: 0\n                    type: string\n                    xml:\n                      attribute: true\n                  id:\n                    example: 12\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                x-components:\n                  schemas:\n                    NewOldDestination:\n                      $ref: \"#/paths/~1request~1%7Bid%7D?cmd=diff/post/responses/200/content/application~1xml;%20charset=utf-8/schema/properties/action/properties/sourcediff/properties/old\"\n                    OldNewFile:\n                      $ref: \"#/paths/~1request~1%7Bid%7D?cmd=diff/post/responses/200/content/application~1xml;%20charset=utf-8/schema/properties/action/properties/sourcediff/properties/files/items/properties/file/properties/old\"\n                xml:\n                  name: diff\n            text/plain; charset=utf-8:\n              example: |\n                spec files:\n                -----------\n                --- test.spec\n                +++ test.spec\n                @@ -0,0 +1 @@\n                +# NEW COMMENT\n                \\ No newline at end of file\n              schema:\n                type: string\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: Couldn't find request with id '355'\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found\n      security:\n        - basic_authentication: []\n      summary: Get the diff for all packages affected by the request.\n      tags:\n        - Request\n  /request?view=collection:\n    get:\n      description: |\n        Get a collection of requests for a specified target. **NOTE:**\n        You need to set at least one of the following parameters in order\n        to use this endpoint:\n\n        * `user`\n        * `project`\n        * `package`\n        * `states`\n        * `types`\n        * `ids`\n      parameters:\n        - description: |\n            Filter the results of requests and open reviews for a certain user. If no other parameters are\n            applied, it will include requests where the user is maintainer of the target or the creator of\n            the request.\n          example: hans\n          in: query\n          name: user\n          schema:\n            type: string\n        - description: Limit the results of requests and open review requests to the specified target project.\n          example: home:hans\n          in: query\n          name: project\n          schema:\n            type: string\n        - description: Limit the results of requests and open review requests to the specified target package.\n          example: ruby\n          in: query\n          name: package\n          schema:\n            type: string\n        - description: Limit results to a given request state. Multiple states can be provided as a comma separated list.\n          example: new,review\n          in: query\n          name: states\n          schema:\n            type: string\n        - description: Limit the results to certain action types. Multiple types can be provided as a comma separated list.\n          example: add_role,submit\n          in: query\n          name: types\n          schema:\n            type: string\n        - description: Limit the results to a given role. Multiple roles can be provided as a comma separated list.\n          example: creator,maintainer,reviewer,source,target\n          in: query\n          name: roles\n          schema:\n            type: string\n        - description: Include the request history in the results.\n          example: 1\n          in: query\n          name: withhistory\n          schema:\n            type: string\n        - description: Includes both, request and review history in the results.\n          example: 1\n          in: query\n          name: withfullhistory\n          schema:\n            type: string\n        - description: Limit the results to the specified amount of requests.\n          example: 7\n          in: query\n          name: limit\n          schema:\n            type: integer\n        - description: Limit the result to specified request id's. Multiple id's can be provided as a comma separated list.\n          example: 15,19,23\n          in: query\n          name: ids\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              schema:\n                properties:\n                  matches:\n                    example: 7\n                    type: string\n                    xml:\n                      attribute: true\n                  request:\n                    items:\n                      $ref: \"#/paths/~1request/post/requestBody/content/application~1xml;%20charset=utf-8/schema\"\n                    type: array\n                type: object\n                xml:\n                  name: collection\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                Not Found:\n                  value:\n                    code: not_found\n                    summary: Couldn't find User with login = foo\n                Require Filter:\n                  value:\n                    code: require_filter\n                    summary: This call requires at least one filter, either by user, project or package or states or types or reviewstates\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found\n      security:\n        - basic_authentication: []\n      summary: Get a collection of requests for a specified target\n      tags:\n        - Request\n  /worker/status:\n    get:\n      description: |\n        Lists status of workers, running jobs, waiting jobs, status of the backend services and general statistics.\n\n        Other ways to obtain the same information as with this endpoint are:\n          * `GET /worker/_status`\n          * `GET /status/workerstatus`\n          * `GET /build/_workerstatus`\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                blocked:\n                  - arch: i586\n                    jobs: \"0\"\n                  - arch: x86_64\n                    jobs: \"0\"\n                buildavg:\n                  - arch: i586\n                    buildavg: \"1200\"\n                  - arch: x86_64\n                    buildavg: \"1200\"\n                building:\n                  - arch: x86_64\n                    hostarch: x86_64\n                    package: android-sdk\n                    project: home:enzokiel\n                    repository: openSUSE_11.3_Update\n                    starttime: \"1289838671\"\n                    workerid: 1a1f67b948b6:2\n                clients: \"2\"\n                down:\n                  - hostarch: aarch64\n                    workerid: armbuild03:1\n                idle:\n                  - hostarch: x86_64\n                    workerid: 1a1f67b948b6:1\n                partition:\n                  - daemon:\n                      - starttime: \"1617711138\"\n                        state: running\n                        type: srcserver\n                      - starttime: \"1617711144\"\n                        state: running\n                        type: servicedispatch\n                      - starttime: \"1617711144\"\n                        state: running\n                        type: service\n                      - starttime: \"1617711145\"\n                        state: running\n                        type: clouduploadserver\n                      - starttime: \"1617711144\"\n                        state: running\n                        type: clouduploadworker\n                      - arch: i586\n                        queue:\n                          high: \"0\"\n                          low: \"11\"\n                          med: \"0\"\n                          next: \"0\"\n                        starttime: \"1617711145\"\n                        state: running\n                        type: scheduler\n                      - arch: x86_64\n                        queue:\n                          high: \"0\"\n                          low: \"11\"\n                          med: \"0\"\n                          next: \"0\"\n                        starttime: \"1617711145\"\n                        state: running\n                        type: scheduler\n                      - starttime: \"1617711143\"\n                        state: running\n                        type: repserver\n                      - starttime: \"1617711144\"\n                        state: running\n                        type: dispatcher\n                      - starttime: \"1617711145\"\n                        state: running\n                        type: publisher\n                      - starttime: \"1617711146\"\n                        state: running\n                        type: signer\n                  - daemon:\n                      - arch: aarch64\n                        queue:\n                          high: \"0\"\n                          low: \"4\"\n                          med: \"1\"\n                          next: \"22\"\n                        starttime: \"1617148925\"\n                        state: running\n                        type: scheduler\n                    name: back-main\n                waiting:\n                  - arch: i586\n                    jobs: \"0\"\n                  - arch: x86_64\n                    jobs: \"0\"\n              schema:\n                properties:\n                  blocked:\n                    items:\n                      properties:\n                        arch:\n                          type: string\n                          xml:\n                            attribute: true\n                        jobs:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  buildavg:\n                    items:\n                      properties:\n                        arch:\n                          type: string\n                          xml:\n                            attribute: true\n                        buildavg:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  building:\n                    items:\n                      properties:\n                        arch:\n                          type: string\n                          xml:\n                            attribute: true\n                        hostarch:\n                          type: string\n                          xml:\n                            attribute: true\n                        package:\n                          type: string\n                          xml:\n                            attribute: true\n                        project:\n                          type: string\n                          xml:\n                            attribute: true\n                        repository:\n                          type: string\n                          xml:\n                            attribute: true\n                        starttime:\n                          type: string\n                          xml:\n                            attribute: true\n                        workerid:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  clients:\n                    type: integer\n                    xml:\n                      attribute: true\n                  down:\n                    items:\n                      properties:\n                        hostarch:\n                          type: string\n                          xml:\n                            attribute: true\n                        workerid:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  idle:\n                    items:\n                      properties:\n                        hostarch:\n                          type: string\n                          xml:\n                            attribute: true\n                        workerid:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  partition:\n                    items:\n                      properties:\n                        daemon:\n                          items:\n                            properties:\n                              arch:\n                                type: string\n                                xml:\n                                  attribute: true\n                              queue:\n                                properties:\n                                  high:\n                                    type: string\n                                    xml:\n                                      attribute: true\n                                  low:\n                                    type: string\n                                    xml:\n                                      attribute: true\n                                  med:\n                                    type: string\n                                    xml:\n                                      attribute: true\n                                  next:\n                                    type: string\n                                    xml:\n                                      attribute: true\n                                type: object\n                              starttime:\n                                type: string\n                                xml:\n                                  attribute: true\n                              state:\n                                type: string\n                                xml:\n                                  attribute: true\n                              type:\n                                type: string\n                                xml:\n                                  attribute: true\n                            type: object\n                          type: array\n                        name:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                  waiting:\n                    items:\n                      properties:\n                        arch:\n                          type: string\n                          xml:\n                            attribute: true\n                        jobs:\n                          type: string\n                          xml:\n                            attribute: true\n                      type: object\n                    type: array\n                type: object\n                xml:\n                  name: workerstatus\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n      security:\n        - basic_authentication: []\n      summary: Lists status of workers, jobs, backend services and general statistics.\n      tags:\n        - Workers\n  \"/worker/{architecture_name}:{worker_id}\":\n    get:\n      description: |\n        Lists capabilites of a worker.\n\n        This can be useful when checking for constraints.\n\n        This operation is the same as `GET /worker/capability/{architecture_name}:{worker_id}`.\n      parameters:\n        - $ref: \"#/paths/~1architectures~1%7Barchitecture_name%7D/get/parameters/0\"\n        - description: Worker id.\n          example: 1a1f67b948b6:1\n          in: path\n          name: worker_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                hardware:\n                  cpu:\n                    flag:\n                      - fpu\n                      - vme\n                      - de\n                      - pse\n                      - tsc\n                      - msr\n                  jobs: \"1\"\n                  processors: \"8\"\n                hostarch: x86_64\n                hostlabel: OBS_WORKER_SECURITY_LEVEL_\n                linux:\n                  flavor: default\n                  version: 5.11.6-1\n                registerserver: http://backend:5252\n                sandbox: chroot\n                workerid: 1a1f67b948b6:1\n              schema:\n                properties:\n                  hardware:\n                    properties:\n                      cpu:\n                        properties:\n                          flag:\n                            items:\n                              type: string\n                            type: array\n                        type: object\n                      jobs:\n                        type: string\n                      processors:\n                        type: string\n                    type: object\n                  hostarch:\n                    type: string\n                    xml:\n                      attribute: true\n                  hostlabel:\n                    type: string\n                  linux:\n                    properties:\n                      flavor:\n                        type: string\n                      version:\n                        type: string\n                    type: object\n                  registerserver:\n                    type: string\n                    xml:\n                      attribute: true\n                  sandbox:\n                    type: string\n                  workerid:\n                    type: string\n                    xml:\n                      attribute: true\n                type: object\n                xml:\n                  name: worker\n          description: OK\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: \"404\"\n                details: \"404 remote error: unknown worker (http://backend:5252/worker/x86_64:1a1f67b948bf:1)\"\n                summary: \"remote error: unknown worker (http://backend:5252/worker/x86_64:1a1f67b948bf:1)\"\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Lists capabilites of a worker.\n      tags:\n        - Workers\n  /worker?cmd=checkconstraints:\n    post:\n      description: |\n        Given a project, package, repository and architecture, list workers which can build with that restrictions, and also match a constraints filter.\n\n        This endpoint doesn't create or modify any data.\n\n        More information about constraints can be found in the\n        [user guide](https://openbuildservice.org/help/manuals/obs-user-guide/cha.obs.build_job_constraints.html).\n\n        This operation is the same as `POST /worker/command/run?cmd=checkconstraints`.\n      parameters:\n        - description: Project name.\n          example: home:user1\n          in: query\n          name: project\n          required: true\n          schema:\n            type: string\n        - description: Repository name.\n          example: openSUSE_Tumbleweed\n          in: query\n          name: repository\n          required: true\n          schema:\n            type: string\n        - description: Architecture name.\n          example: x86_64\n          in: query\n          name: arch\n          required: true\n          schema:\n            type: string\n        - description: Package name.\n          example: test_package\n          in: query\n          name: package\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/xml; charset=utf-8:\n            examples:\n              cpu_flags:\n                summary: Cpu flags\n                value:\n                  hardware:\n                    cpu:\n                      flag:\n                        - mmx\n                        - sse2\n              mix:\n                summary: Linux version and linux flavor\n                value:\n                  linux:\n                    flavor: default\n                    version:\n                      max: 4\n                      min: 3\n              processors:\n                summary: Number of processors\n                value:\n                  hardware:\n                    processors: 2\n            schema:\n              properties:\n                hardware:\n                  properties:\n                    cpu:\n                      properties:\n                        flag:\n                          items:\n                            type: string\n                          type: array\n                      type: object\n                    disk:\n                      properties:\n                        size:\n                          type: string\n                      type: object\n                    memory:\n                      properties:\n                        size:\n                          type: string\n                      type: object\n                    physicalmemory:\n                      properties:\n                        size:\n                          type: string\n                      type: object\n                    processors:\n                      type: string\n                  type: object\n                hostlabel:\n                  type: string\n                linux:\n                  properties:\n                    flavor:\n                      type: string\n                    version:\n                      properties:\n                        max:\n                          type: string\n                        min:\n                          type: string\n                      type: object\n                  type: object\n                sandbox:\n                  example: chroot\n                  type: string\n              type: object\n              xml:\n                name: constraints\n        description: Constraints XML filter\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/xml; charset=utf-8:\n              examples:\n                no_workers:\n                  summary: No Workers Satisfy the Constraints\n                  value: null\n                two_workers:\n                  summary: Two Workers Satisfy the Constraints\n                  value:\n                    entry:\n                      - name: x86_64:1a1f67b948b6:1\n                      - name: x86_64:1a1f67b948b6:2\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/200/content/application~1xml;%20charset=utf-8/schema\"\n          description: OK\n        \"400\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: missing_parameter\n                summary: Required Parameter arch missing\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Bad Request.\n        \"401\":\n          $ref: \"#/paths/~1architectures/get/responses/401\"\n        \"404\":\n          content:\n            application/xml; charset=utf-8:\n              example:\n                code: not_found\n                summary: |\n                  &lt;status code=\"404\"&gt;\n                  &lt;summary&gt;repository 'home:Admin/openSUSE_Tumbleweed' has no architecture 'x86_64d'&lt;/summary&gt;\n                  &lt;details&gt;404 repository 'home:Admin/openSUSE_Tumbleweed' has no architecture 'x86_64d'&lt;/details&gt;\n                  &lt;/status&gt;\n              schema:\n                $ref: \"#/paths/~1architectures/get/responses/401/content/application~1xml;%20charset=utf-8/schema\"\n          description: Not Found.\n      security:\n        - basic_authentication: []\n      summary: Lists workers which match a constraints filter.\n      tags:\n        - Workers\ncomponents:\n  securitySchemes:\n    basic_authentication:\n      scheme: basic\n      type: http\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@3237843a76543b0ee2c1e5f65e28ec6b526e8700/-/blob/APIs/opensuse.org/obs/2.10.50/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/3237843a76543b0ee2c1e5f65e28ec6b526e8700/APIs/opensuse.org/obs/2.10.50/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/request\": at 1:107388: post: at 1:107975: parameters: parse parameter \"addrevision\": at 1:108214: schema: at 1:108345: parse enum values: parse value \"1\": expected type \"string\", got \"number\""
}