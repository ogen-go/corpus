{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/featurehub-io/featurehub"
		},
		"file": {
			"name": "sse-api.yaml",
			"size": 0,
			"path": "backend/edge-api/sse-api.yaml",
			"byteSize": 5905,
			"content": "openapi: 3.0.1\ninfo:\n  title: FeatureServiceApi\n  description: This describes the API clients use for accessing features\n  version: \"1.1.3\"\npaths:\n  /features/:\n    get:\n      tags:\n        - FeatureService\n      parameters:\n        - name: sdkUrl\n          in: query\n          description: \"A list of API keys to retrieve information about\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      description: Requests all features for this sdkurl and disconnects\n      operationId: getFeatureStates\n      responses:\n        \"200\":\n          description: feature request successful, all environments you have permission to or that were found are returned\n          headers:\n            x-fh-version:\n              required: false\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FeatureEnvironmentCollection\"\n        \"400\":\n          description: you didn't ask for any environments\n          headers:\n            x-fh-version:\n              required: false\n              schema:\n                type: string\n  /features/{sdkUrl}/{featureKey}:\n    put:\n      tags:\n        - FeatureService\n      parameters:\n        - name: sdkUrl\n          in: path\n          description: \"The API Key for the environment and service account\"\n          required: true\n          schema:\n            type: string\n        - name: featureKey\n          in: path\n          description: \"The key you wish to update/action\"\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/FeatureStateUpdate\"\n      description: \"Updates the feature state if allowed.\"\n      operationId: setFeatureState\n      responses:\n        \"200\":\n          description: update was accepted but not actioned because feature is already in that state\n          headers:\n            x-fh-version:\n              required: false\n              schema:\n                type: string\n        \"201\":\n          description: update was accepted and actioned\n          headers:\n            x-fh-version:\n              required: false\n              schema:\n                type: string\n        \"202\":\n          description: Neither lock or value was changing\n        \"400\":\n          description: you have made a request that doesn't make sense. e.g. it has no data\n        \"403\":\n          description: update was not accepted, attempted change is outside the permissions of this user\n        \"404\":\n          description: something about the presented data isn't right and we couldn't find it, could be the service key, the environment or the feature\n        \"412\":\n          description: you have made a request that isn't possible. e.g. changing a value without unlocking it.\ncomponents:\n  schemas:\n    FeatureStateUpdate:\n      type: object\n      properties:\n        value:\n          description: \"the new value\"\n        updateValue:\n          type: boolean\n          description: \"indicates whether you are trying to update the value, as value can be null\"\n        lock:\n          description: \"set only if you wish to lock or unlock, otherwise null\"\n          type: boolean\n    SSEResultState:\n      type: string\n      description: \"error is an inherint state\"\n      enum:\n        - ack\n        - bye\n        - failure\n        - features\n        - feature\n        - delete_feature\n        - config\n        - error\n    FeatureEnvironmentCollection:\n      description: \"This represents a collection of features as per a request from a GET api. GET's can request multiple API Keys at the same time.\"\n      x-renamed-from: Environment\n      required:\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n        features:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FeatureState\"\n    FeatureState:\n      required:\n        - key\n        - id\n      properties:\n        id:\n          type: string\n          format: uuid\n        key:\n          type: string\n        l:\n          description: \"Is this feature locked. Usually this doesn't matter because the value is the value, but for FeatureInterceptors it can matter.\"\n          type: boolean\n        version:\n          description: \"The version of the feature, this allows features to change values and it means we don't trigger events\"\n          type: integer\n          format: int64\n        type:\n          $ref: \"#/components/schemas/FeatureValueType\"\n        value:\n          description: \"the current value\"\n        environmentId:\n          description: \"This field is filled in from the client side in the GET api as the GET api is able to request multiple environments.\n                        It is never passed from the server, as an array of feature states is wrapped in an environment.\"\n          type: string\n          format: uuid\n        strategies:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FeatureRolloutStrategy\"\n    FeatureRolloutStrategy:\n      description: \"This is the model for the rollout strategy as required by Dacha and Edge\"\n      allOf:\n        - $ref: \"#/components/schemas/BaseRolloutStrategy\"\n        - type: object\n          required:\n            - id\n            - attributes\n          properties:\n            attributes:\n              type: array\n              items:\n                $ref: \"#/components/schemas/FeatureRolloutStrategyAttribute\"\n    FeatureRolloutStrategyAttribute:\n      allOf:\n        - $ref: \"#/components/schemas/BaseRolloutStrategyAttribute\"\n        - type: object\n          required:\n            - conditional\n            - fieldName\n            - type\n\n\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"FeatureState\": parse schema: property \"strategies\": parse schema: item: parse schema: resolve \"#/components/schemas/FeatureRolloutStrategy\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/BaseRolloutStrategy\": find schema: resolve \"#/components/schemas/BaseRolloutStrategy\": can't find value for \"components/schemas/BaseRolloutStrategy\""
}