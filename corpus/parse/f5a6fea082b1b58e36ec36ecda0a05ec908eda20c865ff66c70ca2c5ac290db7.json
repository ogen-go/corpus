{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Greenstand/treetracker-web-map-client"
		},
		"file": {
			"name": "web-map-api.yaml",
			"size": 0,
			"path": "doc/web-map-api.yaml",
			"byteSize": 34979,
			"content": "openapi: 3.0.0\ninfo:\n  title: web map api\n  version: '1.0'\n  description: 'The information API of Greenstand for web map client, wallet app or others'\n  contact:\n    name: Greenstand Web Map API\n    url: 'http://env.treetracker.org/web-map-api'\nservers:\n  - url: 'http://env.treetracker.org/web-map-api'\npaths:\n  '/trees/{treeId}.':\n    parameters:\n      - schema:\n          type: string\n        name: treeId\n        in: path\n        required: true\n    get:\n      summary: get tree info\n      tags: []\n      operationId: trees-treeId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/tree'\n      description: get single tree object by tree id\n  /trees:\n    parameters: []\n    get:\n      summary: get tree list by query parameters\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    description: total count of trees satifiying the query condition\n                  trees:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/tree'\n                  offset:\n                    type: integer\n                  limit:\n                    type: integer\n      operationId: trees\n      description: |-\n        query trees by filters like planter, also consider pagination\n        I think filter all tree by `active = true` is by default\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: 'The start offset of the list, if missing, default is 0'\n        - schema:\n            type: integer\n            maximum: 1000\n            minimum: 0\n          in: query\n          name: limit\n          description: 'The limit length of the return list, if missing, default is 20'\n        - schema:\n            type: integer\n          in: query\n          name: planter_id\n          description: Filter by planter id\n        - schema:\n            type: integer\n          in: query\n          name: organization_id\n          description: Filter by org id\n        - schema:\n            type: string\n          in: query\n  /trees/featured:\n    get:\n      summary: get featured tree list\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: ''\n                type: object\n                properties:\n                  total:\n                    type: number\n                  trees:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/tree'\n      operationId: get-trees-featured\n      description: |-\n        this is some good trees bookmarked by admin, short term we will consider using a static table/file to pick up and store these tree id somewhere.\n\n        The use case for this is that on the welcome page of web map site, we want to show a gallery of beautiful trees.\n  /countries/leaderboard:\n    get:\n      summary: leader board of country\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: ''\n                type: object\n                properties:\n                  total:\n                    type: number\n                  countries:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: number\n                        name:\n                          type: string\n                        count:\n                          type: integer\n                          description: the count of planted tree in this country\n      operationId: get-countries-leader\n      description: |-\n        Top planting-tree countries (leader board), we will show the leader board on the welcome page of web map site. we can query the DB with SQL like this (provided by Seb):\n        ```\n        SELECT\n          count(trees.*),region.name\n        FROM\n          trees\n        RIGHT JOIN region ON \n        st_contains(region.geom,trees.estimated_geometric_location)\n        where region.type_id = 10\n        group by region.name;\n        ```\n\n        But it's slow so seba and I consider pre-query the db and store the result somewhere.\n    parameters: []\n  /countries:\n    get:\n      summary: get countries by coordinates\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: ''\n                type: object\n                x-examples:\n                  example-1:\n                    total: 1\n                    countries: []\n                properties:\n                  total:\n                    type: number\n                    description: total result of countries\n                  countries:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/country'\n                required:\n                  - total\n                  - countries\n      operationId: get-countries\n      description: |\n        get country by coordinates, currently, we use it to get the country name of a tree/location.\n        if given the 'lat' and 'lon', we can query db by SQL: \n        ```\n        SELECT region.* FROM region, region_type\n        WHERE region.type_id = region_type.id\n        AND ST_Contains(region.geom, ST_GeomFromText('POINT (-13.215865333333333 8.34645033333333)',4326)) \n        AND  region_type.id = region.type_id AND region_type.type = 'country'\n        ```\n      parameters:\n        - schema:\n            type: number\n          in: query\n          name: lat\n          description: the latitude of the location\n        - schema:\n            type: number\n          in: query\n          name: lon\n          description: the longitude of the location\n    parameters: []\n  '/countries/{countryId}':\n    get:\n      summary: get one country\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                description: ''\n                type: object\n                properties:\n                  total:\n                    type: number\n                    description: total result of countries\n                  countries:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/country'\n      operationId: get-countries-leader\n      description: |-\n        get country by id, in some case I use this to fetch the center point and move the map view to go to country\n\n        I suppose the countryId is the key of table `region` and type_id = 'country'\n\n        No need to return get big column like metadata and multipolygon\n      parameters:\n        - schema:\n            type: number\n          in: query\n          name: lat\n          description: the latitude of the location\n        - schema:\n            type: number\n          in: query\n          name: lon\n          description: the longitude of the location\n    parameters:\n      - schema:\n          type: string\n        name: countryId\n        in: path\n        required: true\n  '/planters/{planterId}':\n    parameters:\n      - schema:\n          type: string\n        name: planterId\n        in: path\n        required: true\n    get:\n      summary: get planter by id\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/planter'\n      operationId: get-planters-planterId\n      description: |-\n        get planter object by id\n\n        'about' property: Seba says he might be able to populate this field, may be manually in the early stage\n        'location?' property: I don't know if we can provide this infomation, the city/country of the planter, could be removed if impossible\n  /planters:\n    get:\n      summary: get planter list by query parameter\n      operationId: get-planters\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  offset:\n                    type: integer\n                  limit:\n                    type: integer\n                  planters:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/planter'\n      description: ''\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: 'The start offset of the list, if missing, default is 0'\n        - schema:\n            type: integer\n            minimum: -15\n            maximum: 1000\n          in: query\n          name: limit\n          description: 'The limit length of the return list, if missing, default is 20'\n        - schema:\n            type: integer\n          in: query\n          name: organization_id\n          description: Filter by org id\n        - schema:\n            type: string\n          in: query\n  '/organizations/{orgId}':\n    parameters:\n      - schema:\n          type: string\n        name: orgId\n        in: path\n        required: true\n    get:\n      summary: get organization by id\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/organization'\n      operationId: get-organizations-orgId\n      description: |-\n        Ge organization by id\n\n        about some fields:\n        'photo_url' property:kind of like a cover photo, Seb says he will find a way to populate it, maybe manually in ealy stage\n\n        'location?': I don't know if we can provide this infomation, the city/country of the org, could be removed if impossible\n\n        'about':Seba says he might be able to populate this field, may be manually in the early stage \n\n        mission: Seba says he might be able to populate this field, may be manually in the early stage\n  /organizations:\n    get:\n      summary: get organization list by query parameters\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: 'The start offset of the list, if missing, default is 0'\n        - schema:\n            type: integer\n            minimum: -15\n            maximum: 1000\n          in: query\n          name: limit\n          description: 'The limit length of the return list, if missing, default is 20'\n        - schema:\n            type: integer\n          in: query\n          name: planter_id\n          description: Filter by planter id\n        - schema:\n            type: string\n          in: query\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  offset:\n                    type: integer\n                  limit:\n                    type: integer\n                  organizations:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/organization'\n  /species:\n    get:\n      summary: get species list by filter/parameters\n      operationId: get-species\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  offset:\n                    type: integer\n                  limit:\n                    type: integer\n                  species:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/species'\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: 'The start offset of the list, if missing, default is 0'\n        - schema:\n            type: integer\n            minimum: -15\n            maximum: 1000\n          in: query\n          name: limit\n          description: 'The limit length of the return list, if missing, default is 20'\n        - schema:\n            type: integer\n          in: query\n          name: organization_id\n          description: Filter by org id\n        - schema:\n            type: string\n          in: query\n          name: planter_id\n          description: Filter by planter id\n      description: \"mainly if we can provide this endpoint, then we can display a species list on org or planter page, but I don't know if it is too resource consumming to query DB\"\n  /transactions:\n    get:\n      summary: get token transaction list by filter/parameters\n      operationId: get-transactions\n      description: \"about returning wallet name, it is a pretty common use case that we need to display the wallet name in the frontend, so we'd better join and return the name of wallet\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  offset:\n                    type: integer\n                  limit:\n                    type: integer\n                  transactions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/transaction'\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: 'The start offset of the list, if missing, default is 0'\n        - schema:\n            type: integer\n            minimum: -15\n            maximum: 1000\n          in: query\n          name: limit\n          description: 'The limit length of the return list, if missing, default is 20'\n        - schema:\n            type: string\n          in: query\n          name: token_id\n          description: Filter by token id\n        - schema:\n            type: string\n          in: query\n          name: wallet_id\n          description: Filter by wallet id\n  '/tokens/{tokenId}':\n    get:\n      summary: get token by id\n      operationId: get-tokens-tokenId\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/token'\n  /tokens:\n    get:\n      summary: get token list by filter/parameters\n      operationId: get-tokens\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                  offset:\n                    type: integer\n                  limit:\n                    type: integer\n                  tokens:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/token'\n      parameters:\n        - schema:\n            type: integer\n          in: query\n          name: offset\n          description: 'The start offset of the list, if missing, default is 0'\n        - schema:\n            type: integer\n            minimum: -15\n            maximum: 1000\n          in: query\n          name: limit\n          description: 'The limit length of the return list, if missing, default is 20'\n        - schema:\n            type: string\n          in: query\n          name: wallet\n          description: 'Filter by wallet, the value can be wallet name or wallet id'\n        - schema:\n            type: boolean\n          in: query\n          name: withCapture\n          description: \"if we need show a token list, it's usually we need display the tree linked to the token, and the planter info, and I think make this configurable might be better, so I add this switcher\"\n        - schema:\n            type: string\n          in: query\n          name: withPlanter\n          description: \"if we need show a token list, it's usually we need display the tree linked to the token, and the planter info, and I think make this configurable might be better, so I add this switcher\"\n      description: ''\n  '/wallets/{walletIdOrName}':\n    get:\n      summary: get wallet by id or name\n      operationId: get-wallets-walletIdOrName\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/wallet'\n      description: 'about retunning photo_url,it would be great if we can set a wallet avatar and show it on the wallet page, maybe we can create the column, and just pick some good case to manualy fill some photo into'\n  /mock/trees/query/planter_id=940\u0026limit=4:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                trees:\n                  value:\n                    total: 20\n                    trees:\n                      - $ref: examples/trees/186734.json\n                      - $ref: examples/trees/186735.json\n                      - $ref: examples/trees/186736.json\n                      - $ref: examples/trees/186737.json\n  /mock/trees/query/organization_id=1\u0026limit=4:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                trees:\n                  value:\n                    total: 200\n                    trees:\n                      - $ref: examples/trees/186734.json\n                      - $ref: examples/trees/186735.json\n                      - $ref: examples/trees/186736.json\n                      - $ref: examples/trees/186737.json\n  /mock/trees/933042:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                a-tree:\n                  $ref: '#/components/examples/tree933042'\n  /mock/trees/932946:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                a-tree:\n                  $ref: '#/components/examples/tree932946'\n  /mock/trees/186734:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/trees/186734.json\n  /mock/trees/186735:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/trees/186735.json\n  /mock/trees/186736:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/trees/186736.json\n  /mock/trees/186737:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/trees/186737.json\n  /mock/trees/featured:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                trees:\n                  value:\n                    trees:\n                      - $ref: examples/trees/186734.json\n                      - $ref: examples/trees/186735.json\n                      - $ref: examples/trees/186736.json\n                      - $ref: examples/trees/186737.json\n  /mock/countries/leader:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/countries/leader.json\n  /mock/countries/6632544:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/countries/6632544.json\n  /mock/countries/6632386:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/countries/6632386.json\n  /mock/countries/6632375:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/countries/6632375.json\n  /mock/countries/6632357:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/countries/6632357.json\n  /mock/planters/5:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                a-planter:\n                  $ref: '#/components/examples/planter5'\n  /mock/planters/940:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/planters/940.json\n  /mock/planters/query/organization_id=1\u0026limit=4:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                organizations:\n                  value:\n                    total: 20\n                    planters:\n                      - $ref: examples/planters/940.json\n  /mock/organizations/query/planter_id=940:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                organizations:\n                  value:\n                    total: 2\n                    organizations:\n                      - $ref: examples/organizations/1.json\n  /mock/organizations/1:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/organizations/1.json\n  /mock/species/query/planter_id=940:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                species:\n                  value:\n                    total: 2\n                    species:\n                      - $ref: examples/species/1.json\n                      - $ref: examples/species/2.json\n  /mock/species/query/organization_id=1:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                species:\n                  value:\n                    total: 20\n                    species:\n                      - $ref: examples/species/1.json\n                      - $ref: examples/species/2.json\n  /mock/transactions/query/token=1:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                transactions:\n                  value:\n                    total: 3\n                    transactions:\n                      - $ref: examples/transactions/1.json\n                      - $ref: examples/transactions/2.json\n  /mock/tokens/query/wallet=180Earth\u0026withPlanter=true\u0026withCapture=true:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              examples:\n                tokens:\n                  value:\n                    total: 1\n                    tokens:\n                      - $ref: examples/tokens/1.json\n                      - $ref: examples/tokens/2.json\n                      - $ref: examples/tokens/3.json\n                      - $ref: examples/tokens/4.json\n          description: ''\n  /mock/tokens/1:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/tokens/1.json\n  /mock/tokens/2:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/tokens/2.json\n  /mock/tokens/3:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/tokens/3.json\n  /mock/tokens/4:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/tokens/4.json\n  /mock/wallets/180Earth:\n    get:\n      responses:\n        '200':\n          content:\n            application/json:\n              example:\n                $ref: examples/wallets/180Earth.json\ncomponents:\n  schemas:\n    tree:\n      description: a single tree object\n      type: object\n      x-examples: {}\n      title: ''\n      properties:\n        id:\n          type: number\n        photo_url:\n          type: string\n        verified:\n          type: boolean\n        token_id:\n          type: string\n        created_at:\n          type: string\n        lat:\n          type: number\n        lon:\n          type: number\n        species_id:\n          type: number\n        planter_id:\n          type: number\n        gps_accuracy:\n          type: number\n        capture_id:\n          type: string\n          description: \"In the public.trees table, it's the uuid column\"\n        capture_approval_tag:\n          type: string\n        domain_specific_data:\n          type: object\n        morphology:\n          type: string\n        rejection_reason:\n          type: string\n        age:\n          type: string\n    country:\n      description: ''\n      type: object\n      x-examples: {}\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n          description: the name of the country\n        centroid:\n          type: string\n          description: like POINT (-13.215865333333333 8.34645033333333)\n    planter:\n      description: the planter ojbect\n      type: object\n      x-examples: {}\n      properties:\n        id:\n          type: number\n        photo_url:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        about:\n          type: string\n          description: 'Seba says he might be able to populate this field, may be manually in the early stage'\n        created_at:\n          type: string\n        location?:\n          type: string\n          description: \"I don't know if we can provide this infomation, the city/country of the planter, could be removed if impossible\"\n        links:\n          type: object\n          properties:\n            featured_trees:\n              type: string\n              description: |-\n                Try HATEOAS here, in the app I'm using:\n                /trees?planter_id=940\u0026limit=4\n            associated_organizations:\n              type: string\n              description: |-\n                Try HATEOAS here, in the app I'm using:\n                /organizations?planter_id=940\n            species:\n              type: string\n              description: |-\n                Try HATEOAS here, in the app I'm using:\n                /species?planter_id=940\n    organization:\n      description: ''\n      type: object\n      x-examples:\n        example-org:\n          id: 1\n          name: 180Earth\n          photo_url: 'https://180.earth/wp-content/uploads/2020/01/Asset-1.png'\n          location: 'Shirimatunda, Tanzania'\n          created_at: 'November 11, 2019'\n          about: 'Greenway is a Youth-Driven Environmental Protection Organization providing alternative solutions to single-use plastic and planting carbon-sucking trees for socio-economic development and reducing climate crisis. Our social work includes reforestation, landscape restoration, climate education, awareness campaign, conducting research, outreach activities, and collaborating with key stakeholders to implement sustainable solutions.'\n          mission: 'To combat climate change, desertification, land degradation, carbon emission by inspiring healthier communities affected by severe climate disorder and modestly reducing pollution by 2050.'\n      properties:\n        id:\n          type: number\n        name:\n          type: string\n        logo_url:\n          type: string\n        photo_url:\n          type: string\n          description: 'kind of like a cover photo, Seb says he will find a way to populate it, maybe manually in ealy stage'\n        location?:\n          type: string\n          description: \"I don't know if we can provide this infomation, the city/country of the org, could be removed if impossible\"\n        created_at:\n          type: string\n        about:\n          type: string\n          description: 'Seba says he might be able to populate this field, may be manually in the early stage'\n        mission:\n          type: string\n          description: 'Seba says he might be able to populate this field, may be manually in the early stage'\n        links:\n          type: object\n          properties:\n            featured_trees:\n              type: string\n              description: |-\n                Try HATEOAS here, in the app I'm using:\n                /trees?organization_id=1\u0026limit=4\n            associated_planters:\n              type: string\n              description: |-\n                Try HATEOAS here, in the app I'm using:\n                /planters?organization_id=1\u0026limit=4\n            species:\n              type: string\n              description: |-\n                Try HATEOAS here, in the app I'm using:\n                /species?organization_id=1\n    species:\n      title: species\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        count:\n          type: integer\n          description: \"It would be great if we can display how many trees in this species has been planted by org or planter, but I don't know if it is too resource consumming to query DB\"\n    transaction:\n      description: ''\n      type: object\n      x-examples:\n        example-1:\n          id: 1\n          token_id: 1\n          source_wallet_id: 1\n          destination_wallet_id: 2\n          source_wallet_name: apple\n          destination_wallet_name: orange\n          processed_at: '2018-02-28'\n      properties:\n        id:\n          type: string\n        token_id:\n          type: string\n        source_wallet_id:\n          type: string\n        destination_wallet_id:\n          type: string\n        source_wallet_name:\n          type: string\n          description: \"it is a pretty common use case that we need to display the wallet name in the frontend, so we'd better join and return the name of wallet\"\n        destination_wallet_name:\n          type: string\n        processed_at:\n          type: string\n        claim:\n          type: boolean\n          description: if possible\n        transfer_id:\n          type: string\n    token:\n      description: ''\n      type: object\n      x-examples:\n        example-1:\n          id: 1\n          wallet_id: 0248f77a-1531-11ec-82a8-0242ac130003\n          capture_id: 186734\n          capture_photo_url: 'https://treetracker-dev-images.s3.eu-central-1.amazonaws.com/2020.10.19.09.50.38_-5.508172399749922_38.98146973686408_6bebe71e-5369-4ae0-8c47-9eeff6599fb0_IMG_20201019_094615_7537040365910944885.jpg'\n          planter_id: 940\n          planter_first_name: 'Sebastian '\n          planter_last_name: Gaertner\n          planter_photo_url: 'https://treetracker-dev-images.s3.eu-central-1.amazonaws.com/2020.10.19.09.47.53_-5.508107173727935_38.981361706266256_39f0cc9d-0f13-4547-8142-150f15cabb67_IMG_20201019_094513_6614320100195503436.jpg'\n          created_at: '2018-01-01'\n      properties:\n        id:\n          type: number\n        wallet_id:\n          type: string\n        capture_id:\n          type: number\n        capture_photo_url:\n          type: string\n        planter_id:\n          type: number\n        planter_first_name:\n          type: string\n        planter_last_name:\n          type: string\n        planter_photo_url:\n          type: string\n        created_at:\n          type: string\n    wallet:\n      description: ''\n      type: object\n      x-examples:\n        example-1:\n          id: 0248f77a-1531-11ec-82a8-0242ac130003\n          name: 180Earth\n          token_in_wallet: 22\n          photo_url: \"'https://180.earth/wp-content/uploads/2020/01/Asset-1.png\"\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        photo_url:\n          type: string\n          description: it would be great if we can set a wallet avatar and show it on the wallet page\n  examples:\n    tree933042:\n      value:\n        id: 933042\n        photo_url: 'https://treetracker-production-images.s3.eu-central-1.amazonaws.com/2021.05.19.09.49.19_-4.881696978000001_38.37997515399998_47fc629b-27e9-4b58-b31a-3a35e5bbc3f0_IMG_20210518_121452_1024002290.jpg'\n        verified: true\n        token_id: d4bb294b-8c75-4e0f-af43-1cd9a35e1033\n        impact_manager_id: 8599f832-145e-11ec-82a8-0242ac130003\n        impact_producer_id: a0b6b70e-145e-11ec-82a8-0242ac130003\n        created_at: '5/18/2021, 5:14:48 PM'\n        lat: -4.881696978000001\n        lon: 38.37997515399998\n        species: Markhamia lutea\n        planter_id: 5\n    tree932946:\n      value:\n        id: 932946\n        photo_url: 'https://treetracker-production-images.s3.eu-central-1.amazonaws.com/2021.05.11.18.37.00_-4.91963284_38.52757506_adc35f9c-b76e-4798-b587-70f5fba06b89_IMG_20210511_101502_-1595081185.jpg'\n        verified: true\n        token_id: c488301f-1117-48c3-8866-3c38f28d3f25\n        created_at: '5/17/2021, 9:31:17 PM'\n        lat: -4.882294219999999\n        lon: 38.380733454\n        species: eucalyptus\n        planter_id: 5\n        organization_id: 1\n    planter5:\n      value:\n        id: 5\n        photo_url: 'https://treetracker-production-images.s3.eu-central-1.amazonaws.com/2021.05.11.18.37.00_-4.91963284_38.52757506_adc35f9c-b76e-4798-b587-70f5fba06b89_IMG_20210511_101502_-1595081185.jpg'\n        name: Issa H\n    org1:\n      value:\n        id: 1\n        name: 180Earth\n        photo_url: 'https://180.earth/wp-content/uploads/2020/01/Asset-1.png'\n        area: Shirimatunda\n        country: Tanzania\n        created_at: 'November 11, 2019'\n        about: 'Greenway is a Youth-Driven Environmental Protection Organization providing alternative solutions to single-use plastic and planting carbon-sucking trees for socio-economic development and reducing climate crisis. Our social work includes reforestation, landscape restoration, climate education, awareness campaign, conducting research, outreach activities, and collaborating with key stakeholders to implement sustainable solutions.'\n        mission: 'To combat climate change, desertification, land degradation, carbon emission by inspiring healthier communities affected by severe climate disorder and modestly reducing pollution by 2050.'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /countries/leaderboard: get: duplicate operationId: \"get-countries-leader\""
}