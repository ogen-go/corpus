{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zulip/zulip"
		},
		"file": {
			"name": "zulip.yaml",
			"size": 0,
			"path": "zerver/openapi/zulip.yaml",
			"byteSize": 772827,
			"content": "# This file contains the API definitions for the Zulip REST API.\n#\n# For details on the OpenAPI specification, see https://swagger.io/specification\n#\n# Our own documentation lives at\n#\n#   https://zulip.readthedocs.io/en/latest/documentation/openapi.html\n#\n\nopenapi: 3.0.1\ninfo:\n  version: 1.0.0\n  title: Zulip REST API\n  description: |\n    Powerful open source group chat\n  contact:\n    url: https://zulip.com\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  # Zulip Cloud\n  - url: \"https://{subdomain}.zulipchat.com/api/v1\"\n    variables:\n      subdomain:\n        default: example\n  # Self-hosted\n  - url: \"{server}/api/v1\"\n    variables:\n      server:\n        default: https://\n  # chat.zulip.org\n  - url: \"https://chat.zulip.org/api/v1\"\n  # Development server\n  - url: \"http://localhost:9991/api/v1\"\nsecurity:\n  - basicAuth: []\n#######################\n# Endpoint definitions\n#######################\npaths:\n  /fetch_api_key:\n    post:\n      operationId: fetch-api-key\n      summary: Fetch an API key (production)\n      tags: [\"authentication\"]\n      description: |\n        This API endpoint is used by clients such as the Zulip mobile and\n        terminal apps to implement password-based authentication. Given the\n        user's Zulip login credentials, it returns a Zulip API key that the client\n        can use to make requests as the user.\n\n        This endpoint is only useful for Zulip servers/organizations with\n        EmailAuthBackend or LDAPAuthBackend enabled.\n\n        The Zulip mobile apps also support SSO/social authentication (GitHub\n        auth, Google auth, SAML, etc.) that does not use this endpoint. Instead,\n        the mobile apps reuse the web login flow passing the `mobile_flow_otp` in\n        a webview, and the credentials are returned to the app (encrypted) via a redirect\n        to a `zulip://` URL.\n\n        !!! warn \"\"\n\n            **Note:** If you signed up using passwordless authentication and\n            never had a password, you can [reset your password](/help/change-your-password).\n\n            See the [API keys](/api/api-keys) documentation for\n            more details on how to download API key manually.\n\n        In a [Zulip development environment](https://zulip.readthedocs.io/en/latest/development/overview.html),\n        see also [the unauthenticated variant](/api/dev-fetch-api-key).\n      parameters:\n        - name: username\n          in: query\n          description: |\n            The username to be used for authentication (typically, the email\n            address, but depending on configuration, it could be an LDAP username).\n\n            See the `require_email_format_usernames` parameter documented in\n            [GET /server_settings](/api/get-server-settings) for details.\n          schema:\n            type: string\n          example: iago@zulip.com\n          required: true\n        - name: password\n          in: query\n          schema:\n            type: string\n          example: abcd1234\n          description: |\n            The user's Zulip password (or LDAP password, if LDAP authentication is in use).\n          required: true\n      security: []\n      responses:\n        \"200\":\n          description: |\n            Valid credentials the client can use to access the Zulip API:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ApiKeyResponse\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n  /dev_fetch_api_key:\n    post:\n      operationId: dev-fetch-api-key\n      summary: Fetch an API key (development only)\n      tags: [\"authentication\"]\n      description: |\n        For easy testing of mobile apps and other clients and against Zulip\n        development servers, we support fetching a Zulip API key for any user\n        on the development server without authentication (so that they can\n        implement analogues of the one-click login process available for Zulip\n        development servers on the web).\n\n        **Note:** This endpoint is only available on Zulip development\n        servers; for obvious security reasons it will always return an error\n        in a Zulip production server.\n\n        `POST {{ api_url }}/v1/dev_fetch_api_key`\n      parameters:\n        - name: username\n          in: query\n          description: |\n            The email address for the user that owns the API key.\n          schema:\n            type: string\n          example: iago@zulip.com\n          required: true\n      security: []\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/ApiKeyResponse\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n  /events:\n    get:\n      operationId: get-events\n      summary: Get events from an event queue\n      tags: [\"real_time_events\"]\n      description: |\n        `GET {{ api_url }}/v1/events`\n\n        This endpoint allows you to receive new events from\n        [a registered event queue](/api/register-queue).\n\n        Long-lived clients should use the\n        `event_queue_longpoll_timeout_seconds` property returned by\n        `POST /register` as the client-side HTTP request timeout for\n        calls to this endpoint. It is guaranteed to be higher than\n        heartbeat frequency and should be respected by clients to\n        avoid breaking when heartbeat frequency increases.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - queue_id\n                - last_event_id\n      x-parameter-description: |\n        **Note**: The parameters documented above are optional in the sense that\n        even if you haven't registered a queue by explicitly requesting the\n        `{{ api_url}}/v1/register` endpoint, you could pass the parameters for\n        [the `{{ api_url}}/v1/register` endpoint](/api/register-queue) to this\n        endpoint and a queue would be registered in the absence of a `queue_id`.\n      x-python-examples-extra-imports: [\"sys\"]\n      parameters:\n        - $ref: \"#/components/parameters/QueueId\"\n        - name: last_event_id\n          in: query\n          description: |\n            The highest event ID in this queue that you've received and\n            wish to acknowledge. See the [code for\n            `call_on_each_event`](https://github.com/zulip/python-zulip-api/blob/main/zulip/zulip/__init__.py)\n            in the [zulip Python\n            module](https://github.com/zulip/python-zulip-api) for an\n            example implementation of correctly processing each event\n            exactly once.\n          schema:\n            type: integer\n          example: -1\n        - name: dont_block\n          in: query\n          description: |\n            Set to `true` if the client is requesting a nonblocking reply. If not\n            specified, the request will block until either a new event is available\n            or a few minutes have passed, in which case the server will send the\n            client a heartbeat event.\n          schema:\n            type: boolean\n            default: false\n          example: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      events:\n                        type: array\n                        description: |\n                          An array of `event` objects (possibly zero-length if `dont_block` is\n                          set) with IDs newer than `last_event_id`. Event IDs are\n                          guaranteed to be increasing, but they are not guaranteed to be\n                          consecutive.\n                        items:\n                          oneOf:\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user's set of configured\n                                [alert words](/help/pm-mention-alert-notifications#alert-words) have changed.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - alert_words\n                                alert_words:\n                                  type: array\n                                  description: |\n                                    Array of strings, each a configured alert word.\n                                  items:\n                                    type: string\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"alert_words\",\n                                  \"alert_words\": [\"alert_word\"],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to clients that have requested the\n                                `update_display_settings` event type and did not include\n                                `user_settings_object` in their `client_capabilities` when\n                                registering the event queue.\n\n                                **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                                connecting to newer servers should declare the `user_settings_object`\n                                client capability and process the `user_settings` event type instead.\n                              deprecated: true\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - update_display_settings\n                                setting_name:\n                                  type: string\n                                  description: |\n                                    Name of the changed display setting.\n                                setting:\n                                  description: |\n                                    New value of the changed setting.\n                                  oneOf:\n                                    - type: boolean\n                                    - type: integer\n                                    - type: string\n                                language_name:\n                                  description: |\n                                    Present only if the setting to be changed is\n                                    `default_language`. Contains the name of the\n                                    new default language in English.\n                                  type: string\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"update_display_settings\",\n                                  \"setting_name\": \"high_contrast_mode\",\n                                  \"setting\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user's [notification\n                                settings](/api/update-settings) have changed with an additional\n                                rule that it is only sent to clients that did not include\n                                `user_settings_object` in their `client_capabilities` when\n                                registering the event queue.\n\n                                **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                                connecting to newer servers should declare the `user_settings_object`\n                                client capability and process the `user_settings` event type instead.\n                              deprecated: true\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - update_global_notifications\n                                notification_name:\n                                  type: string\n                                  description: |\n                                    Name of the changed notification setting.\n                                setting:\n                                  description: |\n                                    New value of the changed setting.\n                                  oneOf:\n                                    - type: boolean\n                                    - type: integer\n                                    - type: string\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"update_global_notifications\",\n                                  \"notification_name\": \"enable_sounds\",\n                                  \"setting\": true,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user's settings\n                                have changed.\n\n                                **Changes**: New in Zulip 5.0 (feature level 89), replacing the\n                                previous `update_display_settings` and `update_global_notifications`\n                                event types, which are still present for backwards compatibility reasons.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_settings\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                property:\n                                  type: string\n                                  description: |\n                                    Name of the changed setting.\n                                value:\n                                  description: |\n                                    New value of the changed setting.\n                                  oneOf:\n                                    - type: boolean\n                                    - type: integer\n                                    - type: string\n                                language_name:\n                                  description: |\n                                    Present only if the setting to be changed is\n                                    `default_language`. Contains the name of the\n                                    new default language in English.\n                                  type: string\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"user_settings\",\n                                  \"op\": \"update\",\n                                  \"property\": \"high_contrast_mode\",\n                                  \"value\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent generally to all users in an organization for changes\n                                in the set of users or those users metadata.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_user\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                person:\n                                  description: |\n                                    Object containing the changed details of the user.\n                                    It has multiple forms depending on the value changed.\n                                  oneOf:\n                                    - type: object\n                                      description: |\n                                        When a user changes their full name.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of modified user.\n                                        full_name:\n                                          type: string\n                                          description: |\n                                            The new full name for the user.\n                                      additionalProperties: false\n                                    - type: object\n                                      description: |\n                                        When a user changes their avatar.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user who is affected by this change.\n                                        avatar_url:\n                                          type: string\n                                          description: |\n                                            The URL of the new avatar for the user.\n                                        avatar_source:\n                                          type: string\n                                          description: |\n                                            The new avatar data source type for the user.\n\n                                            Value values are `G` (gravatar) and `U` (uploaded by user).\n                                        avatar_url_medium:\n                                          type: string\n                                          description: |\n                                            The new medium-size avatar URL for user.\n                                        avatar_version:\n                                          type: integer\n                                          description: |\n                                            The version number for the user's avatar. This is useful\n                                            for cache-busting.\n                                      additionalProperties: false\n                                    - type: object\n                                      additionalProperties: false\n                                      description: |\n                                        When a user changes their time zone setting.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of modified user.\n                                        email:\n                                          type: string\n                                          description: |\n                                            The email of the user.\n\n                                            **Deprecated**: This field will be removed in a future\n                                            release as it is redundant with the `user_id`.\n                                          deprecated: true\n                                        timezone:\n                                          type: string\n                                          description: |\n                                            The new time zone of the user.\n                                    - type: object\n                                      additionalProperties: false\n                                      description: |\n                                        When the owner of a bot changes.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user/bot whose owner has changed.\n                                        bot_owner_id:\n                                          type: integer\n                                          description: |\n                                            The user id of the new bot owner.\n                                    - type: object\n                                      additionalProperties: false\n                                      description: |\n                                        When the [role](/help/roles-and-permissions) of a user changes.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user affected by this change.\n                                        role:\n                                          type: integer\n                                          description: |\n                                            The new [role](/api/roles-and-permissions) of the user.\n                                          enum:\n                                            - 100\n                                            - 200\n                                            - 300\n                                            - 400\n                                            - 600\n                                    - type: object\n                                      additionalProperties: false\n                                      description: |\n                                        When billing role of a user changes.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user affected by this change.\n                                        is_billing_admin:\n                                          type: boolean\n                                          description: |\n                                            A boolean specifying whether the user is now a billing administrator.\n\n                                            **Changes**: New in Zulip 5.0 (feature level 73).\n                                    - type: object\n                                      additionalProperties: false\n                                      description: |\n                                        When the delivery email of a user changes.\n\n                                        Note: This event is only visible to admins.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user affected by this change.\n                                        delivery_email:\n                                          type: string\n                                          description: |\n                                            The new delivery email of the user.\n                                    - type: object\n                                      additionalProperties: false\n                                      description: |\n                                        When the user updates one of their custom profile\n                                        fields.\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user affected by this change.\n                                        custom_profile_field:\n                                          type: object\n                                          additionalProperties: false\n                                          description: |\n                                            Object containing details about the custom\n                                            profile data change.\n                                          properties:\n                                            id:\n                                              type: integer\n                                              description: |\n                                                The ID of the custom profile field which user updated.\n                                            value:\n                                              type: string\n                                              nullable: true\n                                              description: |\n                                                User's personal value for this custom profile field,\n                                                or `null` if unset.\n                                            rendered_value:\n                                              type: string\n                                              description: |\n                                                The `value` rendered in HTML. Will only be present for\n                                                custom profile field types that support Markdown rendering.\n\n                                                This user-generated HTML content should be rendered\n                                                using the same CSS and client-side security protections\n                                                as are used for message content.\n                                    - type: object\n                                      additionalProperties: False\n                                      description: |\n                                        When the Zulip display email address of a user changes,\n                                        either due to the user's email address changing, or\n                                        due to changes in the organization's\n                                        [email address visibility][help-email-visibility].\n\n                                        [help-email-visibility]: /help/restrict-visibility-of-email-addresses\n                                      properties:\n                                        user_id:\n                                          type: integer\n                                          description: |\n                                            The ID of the user affected by this change.\n                                        new_email:\n                                          type: string\n                                          description: |\n                                            The new value of `email` for the user. The client\n                                            should update any data structures associated\n                                            with this user to use this new value as the\n                                            user's Zulip display email address.\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"realm_user\",\n                                  \"op\": \"update\",\n                                  \"person\":\n                                    {\n                                      \"avatar_source\": \"G\",\n                                      \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=3\",\n                                      \"avatar_url_medium\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026s=500\u0026version=3\",\n                                      \"avatar_version\": 3,\n                                      \"user_id\": 10,\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user's stream subscriptions\n                                have changed (either the set of subscriptions or their properties).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - subscription\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                subscriptions:\n                                  type: array\n                                  description: |\n                                    A list of dictionaries where each dictionary contains\n                                    information about one of the subscribed streams.\n                                  items:\n                                    $ref: \"#/components/schemas/Subscriptions\"\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"subscription\",\n                                  \"op\": \"add\",\n                                  \"subscriptions\":\n                                    [\n                                      {\n                                        \"name\": \"test_stream\",\n                                        \"stream_id\": 9,\n                                        \"description\": \"\",\n                                        \"rendered_description\": \"\",\n                                        \"invite_only\": false,\n                                        \"is_web_public\": false,\n                                        \"stream_post_policy\": 1,\n                                        \"history_public_to_subscribers\": true,\n                                        \"first_message_id\": null,\n                                        \"message_retention_days\": null,\n                                        \"is_announcement_only\": false,\n                                        \"color\": \"#76ce90\",\n                                        \"is_muted\": false,\n                                        \"pin_to_top\": false,\n                                        \"audible_notifications\": null,\n                                        \"desktop_notifications\": null,\n                                        \"email_notifications\": null,\n                                        \"push_notifications\": null,\n                                        \"wildcard_mentions_notify\": null,\n                                        \"in_home_view\": true,\n                                        \"email_address\": \"test_stream.af64447e9e39374841063747ade8e6b0.show-sender@testserver\",\n                                        \"stream_weekly_traffic\": null,\n                                        \"subscribers\": [10],\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user has been unsubscribed\n                                from one or more streams.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - subscription\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                subscriptions:\n                                  type: array\n                                  description: |\n                                    A list of dictionaries, where each dictionary contains\n                                    information about one of the newly unsubscribed streams.\n                                  items:\n                                    type: object\n                                    additionalProperties: false\n                                    description: |\n                                      Dictionary containing details about the unsubscribed stream.\n                                    properties:\n                                      stream_id:\n                                        type: integer\n                                        description: |\n                                          The ID of the stream.\n                                      name:\n                                        type: string\n                                        description: |\n                                          The name of the stream.\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"subscription\",\n                                  \"op\": \"remove\",\n                                  \"subscriptions\":\n                                    [{\"name\": \"test_stream\", \"stream_id\": 9}],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when a property of the user's\n                                subscription to a stream has been updated. This event is used\n                                only for personal properties like `is_muted`; see the `stream` event\n                                for global properties of a stream.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - subscription\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the stream whose subscription details have changed.\n                                property:\n                                  type: string\n                                  description: |\n                                    The property of the subscription which has changed. See\n                                    [/users/me/subscriptions/properties GET](/api/update-subscription-settings)\n                                    for details on the various properties of a stream.\n\n                                    Clients should generally handle an unknown property received here without\n                                    crashing, since that will naturally happen when connecting to a Zulip\n                                    server running a new version that adds a new subscription property.\n                                value:\n                                  description: |\n                                    The new value of the changed property.\n                                  oneOf:\n                                    - type: integer\n                                    - type: boolean\n                                    - type: string\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"op\": \"update\",\n                                  \"type\": \"subscription\",\n                                  \"property\": \"pin_to_top\",\n                                  \"value\": true,\n                                  \"stream_id\": 11,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to other users when users have been subscribed to\n                                streams. Sent to all users if the stream is public or to only\n                                the existing subscribers if the stream is private.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - subscription\n                                op:\n                                  type: string\n                                  enum:\n                                    - peer_add\n                                stream_ids:\n                                  type: array\n                                  description: |\n                                    The IDs of the streams to which the user has subscribed.\n                                  items:\n                                    type: integer\n                                user_ids:\n                                  type: array\n                                  description: |\n                                    The IDs of the users who subscribed.\n                                  items:\n                                    type: integer\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"subscription\",\n                                  \"op\": \"peer_add\",\n                                  \"stream_id\": 9,\n                                  \"user_id\": 12,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to other users when users have been unsubscribed\n                                from streams. Sent to all users if the stream is public or to only\n                                the existing subscribers if the stream is private.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - subscription\n                                op:\n                                  type: string\n                                  enum:\n                                    - peer_remove\n                                stream_ids:\n                                  type: array\n                                  description: |\n                                    The IDs of the streams from which the users have been\n                                    unsubscribed from.\n                                  items:\n                                    type: integer\n                                user_ids:\n                                  type: array\n                                  description: |\n                                    The IDs of the users who have been unsubscribed.\n                                  items:\n                                    type: integer\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"subscription\",\n                                  \"op\": \"peer_remove\",\n                                  \"stream_id\": 9,\n                                  \"user_id\": 12,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event type for messages.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - message\n                                message:\n                                  $ref: \"#/components/schemas/MessagesEvent\"\n                                flags:\n                                  type: array\n                                  description: |\n                                    The user's [message flags][message-flags] for the message.\n\n                                    Clients should inspect the flags field rather than assuming that\n                                    new messages are unread; [muted users](/api/mute-user), messages\n                                    sent by the current user, and more subtle scenarios can result\n                                    in a new message that the server has already marked as read for\n                                    the user.\n\n                                    [message-flags]: /api/update-message-flags#available-flags\n                                  items:\n                                    type: string\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"message\",\n                                  \"message\":\n                                    {\n                                      \"id\": 31,\n                                      \"sender_id\": 10,\n                                      \"content\": '\u003cp\u003eFirst message ...\u003ca href=\"user_uploads/2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt\"\u003ezulip.txt\u003c/a\u003e\u003c/p\u003e',\n                                      \"recipient_id\": 23,\n                                      \"timestamp\": 1594825416,\n                                      \"client\": \"test suite\",\n                                      \"subject\": \"test\",\n                                      \"topic_links\": [],\n                                      \"is_me_message\": false,\n                                      \"reactions\": [],\n                                      \"submessages\": [],\n                                      \"sender_full_name\": \"King Hamlet\",\n                                      \"sender_short_name\": \"hamlet\",\n                                      \"sender_email\": \"user10@zulip.testserver\",\n                                      \"sender_realm_str\": \"zulip\",\n                                      \"display_recipient\": \"Denmark\",\n                                      \"type\": \"stream\",\n                                      \"stream_id\": 1,\n                                      \"avatar_url\": null,\n                                      \"content_type\": \"text/html\",\n                                    },\n                                  \"flags\": [],\n                                  \"id\": 1,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when the user completes the\n                                OAuth flow for the [Zoom integration](/help/start-a-call). Clients need\n                                to know whether initiating Zoom OAuth is required before creating a Zoom call.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - has_zoom_token\n                                value:\n                                  type: boolean\n                                  description: |\n                                    A boolean specifying whether the user has zoom\n                                    token or not.\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"has_zoom_token\",\n                                  \"value\": true,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                A simple event sent to organization administrators when the\n                                set of invitations changes; this tells clients they need to refetch\n                                data from `GET /invites` if they are displaying UI containing active\n                                invitations.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - invites_changed\n                              additionalProperties: false\n                              example: {\"type\": \"invites_changed\", \"id\": 0}\n                            - type: object\n                              description: |\n                                Event sent to all users in a Zulip organization when a new\n                                user joins. Processing this event is important to being able\n                                to display basic details on other users given only their ID.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_user\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                person:\n                                  $ref: \"#/components/schemas/User\"\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"realm_user\",\n                                  \"op\": \"add\",\n                                  \"person\":\n                                    {\n                                      \"email\": \"foo@zulip.com\",\n                                      \"user_id\": 38,\n                                      \"avatar_version\": 1,\n                                      \"is_admin\": false,\n                                      \"is_owner\": false,\n                                      \"is_guest\": false,\n                                      \"is_billing_admin\": false,\n                                      \"role\": 400,\n                                      \"is_bot\": false,\n                                      \"full_name\": \"full name\",\n                                      \"timezone\": \"\",\n                                      \"is_active\": true,\n                                      \"date_joined\": \"2020-07-15T15:04:02.030833+00:00\",\n                                      \"avatar_url\": \"https://secure.gravatar.com/avatar/c6b5578d4964bd9c5fae593c6868912a?d=identicon\u0026version=1\",\n                                      \"profile_data\": {},\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to all users in a Zulip organization when\n                                a user is deactivated.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_user\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                person:\n                                  type: object\n                                  additionalProperties: false\n                                  description: |\n                                    Object containing details of the deactivated user.\n                                  properties:\n                                    user_id:\n                                      type: integer\n                                      description: |\n                                        The ID of the deactivated user.\n                                    full_name:\n                                      type: string\n                                      deprecated: true\n                                      description: |\n                                        The full name of the user.\n\n                                        **Deprecated**: We expect to remove this field in the future.\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"realm_user\",\n                                  \"op\": \"remove\",\n                                  \"person\":\n                                    {\"user_id\": 35, \"full_name\": \"Foo Bot\"},\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to all users in an organization when a user comes\n                                back online after being long offline. While most presence updates happen\n                                done via polling the main presence endpoint, this event is important\n                                to avoid confusing users when someone comes online and then immediately sends\n                                a message (one wouldn't want them to still appear offline at that point!).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - presence\n                                user_id:\n                                  type: integer\n                                  description: |\n                                    The ID of modified user.\n                                email:\n                                  type: string\n                                  description: |\n                                    The email of the user.\n\n                                    **Deprecated**: This field will be removed in a future\n                                    release as it is redundant with the `user_id`.\n                                  deprecated: true\n                                server_timestamp:\n                                  type: number\n                                  description: |\n                                    The timestamp of when the Zulip server received the user's\n                                    presence as a UNIX timestamp.\n                                presence:\n                                  type: object\n                                  description: |\n                                    An object contatining a set of objects which describe the\n                                    the user's presence on various platforms.\n                                  additionalProperties:\n                                    $ref: \"#/components/schemas/Presence\"\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"presence\",\n                                  \"user_id\": 10,\n                                  \"email\": \"user10@zulip.testserver\",\n                                  \"server_timestamp\": 1594825445.320078373,\n                                  \"presence\":\n                                    {\n                                      \"ZulipAndroid/1.0\":\n                                        {\n                                          \"client\": \"ZulipAndroid/1.0\",\n                                          \"status\": \"idle\",\n                                          \"timestamp\": 1594825445,\n                                          \"pushable\": false,\n                                        },\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent when a new stream is created to users who can see\n                                the new stream exists (for private streams, only subscribers and\n                                organization administrators will receive this event).\n\n                                Note that organization administrators who are not subscribed will\n                                not be able to see content on the stream; just that it exists.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - stream\n                                op:\n                                  type: string\n                                  enum:\n                                    - create\n                                streams:\n                                  type: array\n                                  description: |\n                                    Array of stream objects, each containing\n                                    details about the newly added stream(s).\n                                  items:\n                                    $ref: \"#/components/schemas/BasicStream\"\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"stream\",\n                                  \"op\": \"create\",\n                                  \"streams\":\n                                    [\n                                      {\n                                        \"name\": \"private\",\n                                        \"stream_id\": 12,\n                                        \"description\": \"\",\n                                        \"rendered_description\": \"\",\n                                        \"invite_only\": true,\n                                        \"is_web_public\": false,\n                                        \"stream_post_policy\": 1,\n                                        \"history_public_to_subscribers\": false,\n                                        \"first_message_id\": null,\n                                        \"message_retention_days\": null,\n                                        \"is_announcement_only\": false,\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to all users who can see a stream when it is deactivated.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - stream\n                                op:\n                                  type: string\n                                  enum:\n                                    - delete\n                                streams:\n                                  type: array\n                                  description: |\n                                    Array of stream objects, each contatining\n                                    details about a stream that was deleted.\n                                  items:\n                                    $ref: \"#/components/schemas/BasicStream\"\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"stream\",\n                                  \"op\": \"delete\",\n                                  \"streams\":\n                                    [\n                                      {\n                                        \"name\": \"private\",\n                                        \"stream_id\": 12,\n                                        \"description\": \"\",\n                                        \"rendered_description\": \"\",\n                                        \"invite_only\": true,\n                                        \"is_web_public\": false,\n                                        \"stream_post_policy\": 1,\n                                        \"history_public_to_subscribers\": false,\n                                        \"first_message_id\": null,\n                                        \"message_retention_days\": null,\n                                        \"is_announcement_only\": false,\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to all users who can see that a stream exists\n                                when a property of that stream changes.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - stream\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the stream whose details have changed.\n                                name:\n                                  type: string\n                                  description: |\n                                    The name of the stream whose details have changed.\n                                property:\n                                  type: string\n                                  description: |\n                                    The property of the stream which has changed. See\n                                    [/stream GET](/api/get-streams) for details on the various\n                                    properties of a stream.\n\n                                    Clients should handle an \"unknown\" property received here without\n                                    crashing, since that can happen when connecting to a server running a\n                                    newer version of Zulip with new features.\n                                value:\n                                  description: |\n                                    The new value of the changed property.\n                                  oneOf:\n                                    - type: integer\n                                    - type: boolean\n                                    - type: string\n                                rendered_description:\n                                  type: string\n                                  description: |\n                                    Note: Only present if the changed property was `description`.\n\n                                    The short description of the stream rendered as HTML, intended to\n                                    be used when displaying the stream description in a UI.\n\n                                    One should use the standard Zulip rendered_markdown CSS when\n                                    displaying this content so that emoji, LaTeX, and other syntax\n                                    work correctly. And any client-side security logic for\n                                    user-generated message content should be applied when displaying\n                                    this HTML as though it were the body of a Zulip message.\n                                history_public_to_subscribers:\n                                  type: boolean\n                                  description: |\n                                    Note: Only present if the changed property was `invite_only`.\n\n                                    Whether the history of the stream is public to its subscribers.\n\n                                    Currently always true for public streams (i.e. invite_only=False implies\n                                    history_public_to_subscribers=True), but clients should not make that\n                                    assumption, as we may change that behavior in the future.\n                                is_web_public:\n                                  type: boolean\n                                  description: |\n                                    Note: Only present if the changed property was `invite_only`.\n\n                                    Whether the stream's history is now readable by web-public spectators.\n\n                                    **Changes**: New in Zulip 5.0 (feature level 71).\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"op\": \"update\",\n                                  \"type\": \"stream\",\n                                  \"property\": \"invite_only\",\n                                  \"value\": true,\n                                  \"history_public_to_subscribers\": true,\n                                  \"is_web_public\": false,\n                                  \"stream_id\": 11,\n                                  \"name\": \"test_stream\",\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent when a reaction is added to a message.\n                                Sent to all users who were recipients of the message.\n                              allOf:\n                                - $ref: \"#/components/schemas/EmojiReactionBase\"\n                                - additionalProperties: false\n                                  properties:\n                                    id:\n                                      $ref: \"#/components/schemas/EventIdSchema\"\n                                    type:\n                                      allOf:\n                                        - $ref: \"#/components/schemas/EventTypeSchema\"\n                                        - enum:\n                                            - reaction\n                                    op:\n                                      type: string\n                                      enum:\n                                        - add\n                                    message_id:\n                                      type: integer\n                                      description: |\n                                        The ID of the message to which a reaction was\n                                        added.\n                                    emoji_code: {}\n                                    emoji_name: {}\n                                    reaction_type: {}\n                                    user_id: {}\n                                    user: {}\n                                  example:\n                                    {\n                                      \"type\": \"reaction\",\n                                      \"op\": \"add\",\n                                      \"user_id\": 10,\n                                      \"user\":\n                                        {\n                                          \"user_id\": 10,\n                                          \"email\": \"user10@zulip.testserver\",\n                                          \"full_name\": \"King Hamlet\",\n                                        },\n                                      \"message_id\": 32,\n                                      \"emoji_name\": \"tada\",\n                                      \"emoji_code\": \"1f389\",\n                                      \"reaction_type\": \"unicode_emoji\",\n                                      \"id\": 0,\n                                    }\n                            - type: object\n                              description: |\n                                Event sent when a reaction is removed from a message.\n                                Sent to all users who were recipients of the message.\n                              allOf:\n                                - $ref: \"#/components/schemas/EmojiReactionBase\"\n                                - additionalProperties: false\n                                  properties:\n                                    id:\n                                      $ref: \"#/components/schemas/EventIdSchema\"\n                                    type:\n                                      allOf:\n                                        - $ref: \"#/components/schemas/EventTypeSchema\"\n                                        - enum:\n                                            - reaction\n                                    op:\n                                      type: string\n                                      enum:\n                                        - remove\n                                    message_id:\n                                      type: integer\n                                      description: |\n                                        The ID of the message from which the reaction was\n                                        removed.\n                                    emoji_code: {}\n                                    emoji_name: {}\n                                    reaction_type: {}\n                                    user_id: {}\n                                    user: {}\n                                  example:\n                                    {\n                                      \"type\": \"reaction\",\n                                      \"op\": \"remove\",\n                                      \"user_id\": 10,\n                                      \"user\":\n                                        {\n                                          \"user_id\": 10,\n                                          \"email\": \"user10@zulip.testserver\",\n                                          \"full_name\": \"King Hamlet\",\n                                        },\n                                      \"message_id\": 52,\n                                      \"emoji_name\": \"tada\",\n                                      \"emoji_code\": \"1f389\",\n                                      \"reaction_type\": \"unicode_emoji\",\n                                      \"id\": 0,\n                                    }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to a user's clients when the user uploads a new file\n                                in a Zulip message. Useful to implement live update in UI showing all files\n                                the current user has uploaded.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - attachment\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                attachment:\n                                  $ref: \"#/components/schemas/Attachments\"\n                                upload_space_used:\n                                  type: integer\n                                  description: |\n                                    The total size of all files uploaded by in the organization,\n                                    in bytes.\n                              example:\n                                {\n                                  \"type\": \"attachment\",\n                                  \"op\": \"add\",\n                                  \"attachment\":\n                                    {\n                                      \"id\": 1,\n                                      \"name\": \"zulip.txt\",\n                                      \"path_id\": \"2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt\",\n                                      \"size\": 6,\n                                      \"create_time\": 1594825414000,\n                                      \"messages\": [],\n                                    },\n                                  \"upload_space_used\": 6,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to a user's clients when details of a file that user\n                                uploaded are changed. Most updates will be changes in the list of\n                                messages that reference the uploaded file.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - attachment\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                attachment:\n                                  $ref: \"#/components/schemas/Attachments\"\n                                upload_space_used:\n                                  type: integer\n                                  description: |\n                                    The total size of all files uploaded by in the organization,\n                                    in bytes.\n                              example:\n                                {\n                                  \"type\": \"attachment\",\n                                  \"op\": \"update\",\n                                  \"attachment\":\n                                    {\n                                      \"id\": 1,\n                                      \"name\": \"zulip.txt\",\n                                      \"path_id\": \"2/ce/2Xpnnwgh8JWKxBXtTfD6BHKV/zulip.txt\",\n                                      \"size\": 6,\n                                      \"create_time\": 1594825414000,\n                                      \"messages\": [],\n                                    },\n                                  \"upload_space_used\": 6,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to a user's clients when the user deletes a file\n                                they had uploaded. Useful primarily for UI showing all the files\n                                the current user has uploaded.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - attachment\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                attachment:\n                                  type: object\n                                  description: |\n                                    Dictionary containing the id of the deleted attachment.\n                                  additionalProperties: false\n                                  properties:\n                                    id:\n                                      type: integer\n                                      description: |\n                                        The ID of the deleted attachment.\n                                upload_space_used:\n                                  type: integer\n                                  description: |\n                                    The total size of all files uploaded by in the organization,\n                                    in bytes.\n                              example:\n                                {\n                                  \"type\": \"attachment\",\n                                  \"op\": \"remove\",\n                                  \"attachment\": {\"id\": 1},\n                                  \"upload_space_used\": 0,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent when a submessage is added to a message.\n\n                                Submessages are an **experimental** API used for widgets such as the\n                                `/poll` widget in Zulip.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - submessage\n                                msg_type:\n                                  type: string\n                                  description: |\n                                    The type of the message.\n                                content:\n                                  type: string\n                                  description: |\n                                    The new content of the submessage.\n                                message_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the message to which the submessage has been added.\n                                sender_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user who sent the message.\n                                submessage_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the submessage.\n                              example:\n                                {\n                                  \"type\": \"submessage\",\n                                  \"msg_type\": \"widget\",\n                                  \"message_id\": 970461,\n                                  \"submessage_id\": 4737,\n                                  \"sender_id\": 58,\n                                  \"content\": '{\"type\":\"vote\",\"key\":\"58,1\",\"vote\":1}',\n                                  \"id\": 28,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the\n                                status of a user changes.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_status\n                                away:\n                                  type: boolean\n                                  description: |\n                                    Whether the user has marked themself \"away\" with this status.\n                                status_text:\n                                  type: string\n                                  description: |\n                                    The text content of the status message.\n\n                                    This will be `\"\"` for users who set a status without selecting\n                                    or writing a message.\n                                emoji_name:\n                                  type: string\n                                  description: |\n                                    The [emoji name](/api/update-status#parameter-emoji_name) for\n                                    the emoji the user selected for their new status.\n\n                                    This will be `\"\"` for users who set a status without selecting\n                                    an emoji.\n\n                                    **Changes**: New in Zulip 5.0 (feature level 86).\n                                emoji_code:\n                                  type: string\n                                  description: |\n                                    The [emoji code](/api/update-status#parameter-emoji_code) for\n                                    the emoji the user selected for their new status.\n\n                                    This will be `\"\"` for users who set a status without selecting\n                                    an emoji.\n\n                                    **Changes**: New in Zulip 5.0 (feature level 86).\n                                reaction_type:\n                                  type: string\n                                  description: |\n                                    The [emoji type](/api/update-status#parameter-reaction_type) for\n                                    the emoji the user selected for their new status.\n\n                                    This will be `\"\"` for users who set a status without selecting\n                                    an emoji.\n\n                                    **Changes**: New in Zulip 5.0 (feature level 86).\n                                user_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user whose status changed.\n                              example:\n                                {\n                                  \"type\": \"user_status\",\n                                  \"user_id\": 10,\n                                  \"away\": true,\n                                  \"status_text\": \"out to lunch\",\n                                  \"emoji_name\": \"car\",\n                                  \"emoji_code\": \"1f697\",\n                                  \"reaction_type\": \"unicode_emoji\",\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when new custom\n                                profile field types are configured for that Zulip organization.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - custom_profile_fields\n                                fields:\n                                  type: array\n                                  description: |\n                                    An array of dictionaries where each dictionary contains\n                                    details of a single new custom profile field for the Zulip\n                                    organization.\n                                  items:\n                                    $ref: \"#/components/schemas/CustomProfileField\"\n                              example:\n                                {\n                                  \"type\": \"custom_profile_fields\",\n                                  \"fields\":\n                                    [\n                                      {\n                                        \"id\": 1,\n                                        \"name\": \"Phone number\",\n                                        \"type\": 1,\n                                        \"hint\": \"\",\n                                        \"field_data\": \"\",\n                                        \"order\": 1,\n                                      },\n                                      {\n                                        \"id\": 2,\n                                        \"name\": \"Biography\",\n                                        \"type\": 2,\n                                        \"hint\": \"What are you known for?\",\n                                        \"field_data\": \"\",\n                                        \"order\": 2,\n                                      },\n                                      {\n                                        \"id\": 3,\n                                        \"name\": \"Favorite food\",\n                                        \"type\": 1,\n                                        \"hint\": \"Or drink, if you'd prefer\",\n                                        \"field_data\": \"\",\n                                        \"order\": 3,\n                                      },\n                                      {\n                                        \"id\": 4,\n                                        \"name\": \"Favorite editor\",\n                                        \"type\": 3,\n                                        \"hint\": \"\",\n                                        \"field_data\": '{\"vim\":{\"text\":\"Vim\",\"order\":\"1\"},\"emacs\":{\"text\":\"Emacs\",\"order\":\"2\"}}',\n                                        \"order\": 4,\n                                      },\n                                      {\n                                        \"id\": 5,\n                                        \"name\": \"Birthday\",\n                                        \"type\": 4,\n                                        \"hint\": \"\",\n                                        \"field_data\": \"\",\n                                        \"order\": 5,\n                                      },\n                                      {\n                                        \"id\": 6,\n                                        \"name\": \"Favorite website\",\n                                        \"type\": 5,\n                                        \"hint\": \"Or your personal blog's URL\",\n                                        \"field_data\": \"\",\n                                        \"order\": 6,\n                                      },\n                                      {\n                                        \"id\": 7,\n                                        \"name\": \"Mentor\",\n                                        \"type\": 6,\n                                        \"hint\": \"\",\n                                        \"field_data\": \"\",\n                                        \"order\": 7,\n                                      },\n                                      {\n                                        \"id\": 8,\n                                        \"name\": \"GitHub\",\n                                        \"type\": 7,\n                                        \"hint\": \"Enter your GitHub username\",\n                                        \"field_data\": '{\"subtype\":\"github\"}',\n                                        \"order\": 8,\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when an organization\n                                administrator changes the organization's configured default stream groups.\n\n                                Default stream groups are an **experimental** feature that is not yet\n                                stabilized.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - default_stream_groups\n                                default_stream_groups:\n                                  type: array\n                                  description: |\n                                    An array of dictionaries where each dictionary\n                                    contains details about a single default stream group.\n                                  items:\n                                    $ref: \"#/components/schemas/DefaultStreamGroup\"\n                              example:\n                                {\n                                  \"type\": \"default_stream_groups\",\n                                  \"default_stream_groups\":\n                                    [\n                                      {\n                                        \"name\": \"group1\",\n                                        \"id\": 2,\n                                        \"description\": \"New description\",\n                                        \"streams\":\n                                          [\n                                            {\n                                              \"name\": \"Scotland\",\n                                              \"stream_id\": 3,\n                                              \"description\": \"Located in the United Kingdom\",\n                                              \"rendered_description\": \"\u003cp\u003eLocated in the United Kingdom\u003c/p\u003e\",\n                                              \"invite_only\": false,\n                                              \"is_web_public\": false,\n                                              \"stream_post_policy\": 1,\n                                              \"history_public_to_subscribers\": true,\n                                              \"first_message_id\": 1,\n                                              \"message_retention_days\": null,\n                                              \"is_announcement_only\": false,\n                                            },\n                                            {\n                                              \"name\": \"Denmark\",\n                                              \"stream_id\": 1,\n                                              \"description\": \"A Scandinavian country\",\n                                              \"rendered_description\": \"\u003cp\u003eA Scandinavian country\u003c/p\u003e\",\n                                              \"invite_only\": false,\n                                              \"is_web_public\": false,\n                                              \"stream_post_policy\": 1,\n                                              \"history_public_to_subscribers\": true,\n                                              \"first_message_id\": 4,\n                                              \"message_retention_days\": null,\n                                              \"is_announcement_only\": false,\n                                            },\n                                            {\n                                              \"name\": \"Verona\",\n                                              \"stream_id\": 5,\n                                              \"description\": \"A city in Italy\",\n                                              \"rendered_description\": \"\u003cp\u003eA city in Italy\u003c/p\u003e\",\n                                              \"invite_only\": false,\n                                              \"is_web_public\": false,\n                                              \"stream_post_policy\": 1,\n                                              \"history_public_to_subscribers\": true,\n                                              \"first_message_id\": 6,\n                                              \"message_retention_days\": null,\n                                              \"is_announcement_only\": false,\n                                            },\n                                          ],\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the\n                                default streams in the organization are changed by an\n                                organization administrator.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - default_streams\n                                default_streams:\n                                  type: array\n                                  description: |\n                                    An array of dictionaries where each dictionary\n                                    contains details about a single default stream.\n                                  items:\n                                    $ref: \"#/components/schemas/BasicStream\"\n                              example:\n                                {\n                                  \"type\": \"default_streams\",\n                                  \"default_streams\":\n                                    [\n                                      {\n                                        \"name\": \"Scotland\",\n                                        \"stream_id\": 3,\n                                        \"description\": \"Located in the United Kingdom\",\n                                        \"rendered_description\": \"\u003cp\u003eLocated in the United Kingdom\u003c/p\u003e\",\n                                        \"invite_only\": false,\n                                        \"is_web_public\": false,\n                                        \"stream_post_policy\": 1,\n                                        \"history_public_to_subscribers\": true,\n                                        \"first_message_id\": 1,\n                                        \"message_retention_days\": null,\n                                        \"is_announcement_only\": false,\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent when a message has been deleted.\n                                Sent to all users who received the message.\n\n                                **Changes**: Before Zulip 5.0 (feature level 77), events\n                                for private messages contained additional `sender_id` and\n                                `recipient_id` fields.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - delete_message\n                                message_ids:\n                                  type: array\n                                  description: |\n                                    The `message_ids` property will be present for clients that support\n                                    the `bulk_message_deletion` client capability.\n\n                                    An containing the IDs of the newly deleted messages.\n                                  items:\n                                    type: integer\n                                message_id:\n                                  type: integer\n                                  description: |\n                                    The `message_id` property will be present for clients that do not support\n                                    the `bulk_message_deletion` client capability.\n\n                                    The ID of the newly deleted message.\n                                message_type:\n                                  type: string\n                                  description: |\n                                    The type of message. Either 'stream' or 'private'. The other keys\n                                    present in the event, necessary to update various frontend data structures\n                                    that might be tracking the message, depend on the message type.\n                                  enum:\n                                    - private\n                                    - stream\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    Only present for stream messages.\n\n                                    The ID of the stream to which the message was sent.\n                                topic:\n                                  type: string\n                                  description: |\n                                    Only present for stream messages.\n\n                                    The topic to which the message was sent.\n                              example:\n                                {\n                                  \"type\": \"delete_message\",\n                                  \"message_type\": \"private\",\n                                  \"message_id\": 37,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user's set of\n                                configured muted topics have changed.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - muted_topics\n                                muted_topics:\n                                  type: array\n                                  description: |\n                                    Array of tuples, where each tuple describes a muted topic.\n                                    The first element of tuple is the stream name in which the topic\n                                    has to be muted, the second element is the topic name to be muted\n                                    and the third element is an integer UNIX timestamp representing\n                                    when the topic was muted.\n                                  items:\n                                    type: array\n                                    items:\n                                      oneOf:\n                                        - type: string\n                                        - type: integer\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"muted_topics\",\n                                  \"muted_topics\":\n                                    [[\"Denmark\", \"topic\", 1594825442]],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to a user's clients when that user's set of\n                                configured [muted users](/api/mute-user) have changed.\n\n                                **Changes**: New in Zulip 4.0 (feature level 48).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - muted_users\n                                muted_users:\n                                  type: array\n                                  description: |\n                                    A list of dictionaries where each dictionary describes\n                                    a muted user.\n                                  items:\n                                    type: object\n                                    additionalProperties: false\n                                    description: |\n                                      Object containing the user id and timestamp of a muted user.\n                                    properties:\n                                      id:\n                                        type: integer\n                                        description: |\n                                          The ID of the muted user.\n                                      timestamp:\n                                        type: integer\n                                        description: |\n                                          An integer UNIX timestamp representing when the user was muted.\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"muted_users\",\n                                  \"muted_users\":\n                                    [\n                                      {\"id\": 1, \"timestamp\": 1594825442},\n                                      {\"id\": 22, \"timestamp\": 1654865392},\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Heartbeat events are sent by the server to avoid\n                                longpolling connections being affected by networks that\n                                kill idle HTTP connections.\n\n                                Clients do not need to do anything to process these\n                                events, beyond the common `last_event_id` accounting.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - heartbeat\n                              example: {\"type\": \"heartbeat\", \"id\": 0}\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent when the set of onboarding \"hotspots\" to show for\n                                the current user have changed (E.g. because the user dismissed one).\n\n                                Clients that feature a similar tutorial experience to the Zulip\n                                web app may want to handle these events.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - hotspots\n                                hotspots:\n                                  type: array\n                                  description: |\n                                    An array of dictionaries where each\n                                    dictionary contains details about a single hotspot.\n                                  items:\n                                    $ref: \"#/components/schemas/Hotspot\"\n                              example:\n                                {\n                                  \"type\": \"hotspots\",\n                                  \"hotspots\":\n                                    [\n                                      {\n                                        \"name\": \"intro_streams\",\n                                        \"title\": \"Catch up on a stream\",\n                                        \"description\": \"Messages sent to a stream are seen by everyone subscribed to that stream. Try clicking on one of the stream links below.\",\n                                        \"delay\": 0.5,\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent when a message's content, topic and/or\n                                stream has been edited or when a message's content\n                                has a rendering update, such as for an\n                                [inline URL preview][inline-url-previews].\n                                Sent to all users who had received the original\n                                message.\n\n                                [inline-url-previews]: https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#inline-url-previews\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - update_message\n                                user_id:\n                                  type: integer\n                                  nullable: true\n                                  description: |\n                                    The ID of the user who sent the message.\n\n                                    Null when event is for a rendering update of the original message,\n                                    such as for an [inline URL preview][inline-url-previews].\n\n                                    **Changes**: As of Zulip 5.0 (feature level 114), this field\n                                    is present for all `update_message` events. Previously, this\n                                    field was omitted for [inline URL preview][inline-url-previews]\n                                    updates.\n                                rendering_only:\n                                  type: boolean\n                                  description: |\n                                    Whether the event only updates the rendered content of the message.\n\n                                    This field should be used by clients to determine if the event\n                                    only provides a rendering update to the message content,\n                                    such as for an [inline URL preview][inline-url-previews].\n                                    When `True`, the event does not reflect a user-generated edit\n                                    and does not modify the message history.\n\n                                    **Changes**: New in Zulip 5.0 (feature level 114). Clients can\n                                    correctly identify these rendering update event with earlier\n                                    Zulip versions by checking whether the `user_id` field was omitted.\n                                message_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the message which was edited or updated.\n\n                                    This field should be used to apply content edits to the client's\n                                    cached message history, or to apply rendered content updates.\n\n                                    If the stream or topic was changed, the set of moved messages is\n                                    encoded in the separate `message_ids` field, which is guaranteed\n                                    to include `message_id`.\n                                message_ids:\n                                  type: array\n                                  items:\n                                    type: integer\n                                  description: |\n                                    The list of IDs of messages to which any stream or topic changes\n                                    encoded in this event should be applied.\n\n                                    These messages are guaranteed to have all been previously sent\n                                    to stream `stream_id` with topic `orig_subject`, and have been\n                                    moved to `new_stream_id` with topic `subject` (if those fields\n                                    are present in the event).\n\n                                    Clients processing these events should update all cached message\n                                    history associated with the moved messages (including adjusting\n                                    `unread_msgs` data structures, where the client may not have the\n                                    message itself in its history) to reflect the new stream and\n                                    topic.\n\n                                    Content changes should be applied only to the single message\n                                    indicated by `message_id`.\n                                flags:\n                                  type: array\n                                  description: |\n                                    The user's personal [message flags][message-flags] for the\n                                    message with ID `message_id` following the edit.\n\n                                    A client application should compare these to the original flags\n                                    to identify cases where a mention or alert word was added by the\n                                    edit.\n\n                                    [message-flags]: /api/update-message-flags#available-flags\n                                  items:\n                                    type: string\n                                edit_timestamp:\n                                  type: integer\n                                  description: |\n                                    The time when this message edit operation was processed by the\n                                    server.\n\n                                    **Changes**: As of Zulip 5.0 (feature level 114), this field\n                                    is present for all `update_message` events. Previously, this\n                                    field was omitted for [inline URL preview][inline-url-previews]\n                                    updates.\n                                stream_name:\n                                  type: string\n                                  description: |\n                                    Only present if the message was edited and originally sent to a stream.\n\n                                    The name of the stream that the message was sent to. Clients\n                                    are recommended to use the `stream_id` field instead.\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    Only present if the message was edited and originally sent to a stream.\n\n                                    The pre-edit stream for all of the messages with IDs in\n                                    `message_ids`.\n\n                                    **Changes**: As of Zulip 5.0 (feature level 112), this field\n                                    is present for all edits to a stream message. Previously, it\n                                    was not present when only the content of the stream message was\n                                    edited.\n                                new_stream_id:\n                                  type: integer\n                                  description: |\n                                    Only present if message(s) were moved to a different stream.\n\n                                    The post-edit stream for all of the messages with IDs in\n                                    `message_ids`.\n                                propagate_mode:\n                                  type: string\n                                  description: |\n                                    Only present if this event moved messages to a different\n                                    topic and/or stream.\n\n                                    The choice the editing user made about which messages should be\n                                    affected by a stream/topic edit:\n\n                                    - `change_one` =\u003e Just change the one indicated in `message_id`.\n                                    - `change_later` =\u003e Change messages in the same topic that had\n                                      been sent after this one.\n                                    - `change_all`=\u003e Change all messages in that topic.\n\n                                    This parameter should be used to decide whether to change\n                                    navigation and compose box state in response to the edit. For\n                                    example, if the user was previously in topic narrow, and the\n                                    topic was edited with `change_later` or `change_all`, the Zulip\n                                    web app will automatically navigate to the new topic narrow.\n                                    Similarly, a message being composed to the old topic should\n                                    have its recipient changed to the new topic.\n\n                                    This navigation makes it much more convenient to move content\n                                    between topics without disruption or messages continuing\n                                    to be sent to the pre-edit topic by accident.\n                                  enum:\n                                    - change_one\n                                    - change_later\n                                    - change_all\n                                orig_subject:\n                                  type: string\n                                  description: |\n                                    Only present if this event moved messages to a different\n                                    topic and/or stream.\n\n                                    The pre-edit topic for all of the messages with IDs in\n                                    `message_ids`.\n                                subject:\n                                  type: string\n                                  description: |\n                                    Only present if this event moved messages to a different\n                                    topic.\n\n                                    The post-edit topic for all of the messages with IDs in\n                                    `message_ids`.\n                                topic_links:\n                                  type: array\n                                  items:\n                                    type: object\n                                    additionalProperties: false\n                                    properties:\n                                      text:\n                                        type: string\n                                        description: |\n                                          The original link text present in the topic.\n                                      url:\n                                        type: string\n                                        description: |\n                                          The expanded target url which the link points to.\n                                  description: |\n                                    Only present if this event moved messages to a different\n                                    topic.\n\n                                    Data on any links to be included in the `topic`\n                                    line (these are generated by\n                                    [custom linkification filter](/help/add-a-custom-linkifier)\n                                    that match content in the message's topic.), corresponding\n                                    to the post-edit topic.\n\n                                    **Changes**: This field contained a list of urls before\n                                    Zulip 4.0 (feature level 46).\n\n                                    New in Zulip 3.0 (feature level 1). Previously, this field\n                                    was called `subject_links`; clients are recommended to\n                                    rename `subject_links` to `topic_links` if present for\n                                    compatibility with older Zulip servers.\n                                orig_content:\n                                  type: string\n                                  description: |\n                                    Only present if this event changed the message content.\n\n                                    The original content of the message with ID `message_id`\n                                    immediately prior to this edit, in the original markdown.\n                                orig_rendered_content:\n                                  type: string\n                                  description: |\n                                    Only present if this event changed the message content.\n\n                                    The original content of the message with ID `message_id`\n                                    immediately prior to this edit, rendered as HTML.\n                                prev_rendered_content_version:\n                                  type: integer\n                                  description: |\n                                    Only present if this event changed the message content.\n\n                                    The Markdown processor version number for the pre-edit message.\n\n                                    Clients should ignore this field.\n                                content:\n                                  type: string\n                                  description: |\n                                    Only present if this event changed the message content or\n                                    updated the message content for an\n                                    [inline URL preview][inline-url-previews].\n\n                                    The new content of the message with ID `message_id`, in the\n                                    original Markdown.\n                                rendered_content:\n                                  type: string\n                                  description: |\n                                    Only present if this event changed the message content or\n                                    updated the message content for an\n                                    [inline URL preview][inline-url-previews].\n\n                                    The new content of the message with ID `message_id`,\n                                    rendered in HTML.\n                                is_me_message:\n                                  type: boolean\n                                  description: |\n                                    Only present if this event changed the message content.\n\n                                    Whether the message with ID `message_id` is now a\n                                    [/me status message][status-messages].\n\n                                    [status-messages]: /help/format-your-message-using-markdown#status-messages\n                              required:\n                                - type\n                                - id\n                                - user_id\n                                - message_id\n                                - message_ids\n                                - flags\n                                - edit_timestamp\n                                - rendering_only\n                              example:\n                                {\n                                  \"type\": \"update_message\",\n                                  \"user_id\": 10,\n                                  \"edit_timestamp\": 1594825451,\n                                  \"message_id\": 58,\n                                  \"stream_name\": \"Verona\",\n                                  \"orig_content\": \"hello\",\n                                  \"orig_rendered_content\": \"\u003cp\u003ehello\u003c/p\u003e\",\n                                  \"content\": \"new content\",\n                                  \"rendered_content\": \"\u003cp\u003enew content\u003c/p\u003e\",\n                                  \"prev_rendered_content_version\": 1,\n                                  \"is_me_message\": false,\n                                  \"propagate_mode\": \"change_all\",\n                                  \"stream_id\": 5,\n                                  \"orig_subject\": \"test\",\n                                  \"subject\": \"new_topic\",\n                                  \"topic_links\": [],\n                                  \"message_ids\": [58, 57],\n                                  \"flags\": [],\n                                  \"rendering_only\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent when a user starts typing a message.\n\n                                Sent to all clients for users who would receive the\n                                message being typed, with the additional rule that typing\n                                notifications for stream messages are only sent to clients\n                                that included `stream_typing_notifications` in their\n                                `client_capabilities` when registering the event queue.\n\n                                **Changes**: Typing notifications for stream messages are new in\n                                Zulip 4.0 (feature level 58).\n\n                                See the [typing endpoint docs](/api/set-typing-status) for more details.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - typing\n                                op:\n                                  type: string\n                                  enum:\n                                    - start\n                                message_type:\n                                  type: string\n                                  description: |\n                                    Type of message being composed. Must be \"stream\" or \"private\",\n                                    as with sending a message.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 58). Previously,\n                                    all typing notifications were implicitly private `private`.\n                                  enum:\n                                    - private\n                                    - stream\n                                sender:\n                                  additionalProperties: false\n                                  type: object\n                                  description: |\n                                    Object describing the \"sender\" (i.e. the user who is typing a message).\n                                  properties:\n                                    user_id:\n                                      type: integer\n                                      description: |\n                                        The user's ID.\n                                    email:\n                                      type: string\n                                      description: |\n                                        The Zulip display email address for the user.\n                                recipients:\n                                  type: array\n                                  description: |\n                                    Only present if `message_type` is `private`.\n\n                                    Array of dictionaries describing the set of users who would be recipients\n                                    of the message being typed. Each dictionary contains details on one\n                                    one of the recipients users; the sending user is guaranteed to appear\n                                    among the recipients.\n                                  items:\n                                    type: object\n                                    additionalProperties: false\n                                    description: |\n                                      Object containing the user id and email of a recipient.\n                                    properties:\n                                      user_id:\n                                        type: integer\n                                        description: |\n                                          The ID of the user.\n                                      email:\n                                        type: string\n                                        description: |\n                                          The Zulip display email address for the user.\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    Only present if `message_type` is `stream`.\n\n                                    The unique ID of the stream to which message is being typed.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 58). Previously,\n                                    typing notifications were only for private messages.\n                                topic:\n                                  type: string\n                                  description: |\n                                    Only present if `message_type` is `stream`.\n\n                                    Topic within the stream where the message is being typed.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 58). Previously,\n                                    typing notifications were only for private messages.\n                              example:\n                                {\n                                  \"type\": \"typing\",\n                                  \"op\": \"start\",\n                                  \"sender\":\n                                    {\n                                      \"user_id\": 10,\n                                      \"email\": \"user10@zulip.testserver\",\n                                    },\n                                  \"recipients\":\n                                    [\n                                      {\n                                        \"user_id\": 8,\n                                        \"email\": \"user8@zulip.testserver\",\n                                      },\n                                      {\n                                        \"user_id\": 10,\n                                        \"email\": \"user10@zulip.testserver\",\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent when a user stops typing a message.\n\n                                Sent to all clients for users who would receive the message\n                                that was previously being typed, with the additional rule\n                                that typing notifications for stream messages are only sent to\n                                clients that included `stream_typing_notifications` in their\n                                `client_capabilities` when registering the event queue.\n\n                                **Changes**: Typing notifications for stream messages are new in\n                                Zulip 4.0 (feature level 58).\n\n                                See the [typing endpoint docs](/api/set-typing-status) for more details.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - typing\n                                op:\n                                  type: string\n                                  enum:\n                                    - stop\n                                message_type:\n                                  type: string\n                                  description: |\n                                    Type of message being composed. Must be \"stream\" or \"private\",\n                                    as with sending a message.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 58). Previously,\n                                    all typing notifications were implicitly private `private`.\n                                  enum:\n                                    - private\n                                    - stream\n                                sender:\n                                  additionalProperties: false\n                                  type: object\n                                  description: |\n                                    Object describing the \"sender\" (i.e. the user who was previously\n                                    typing a message).\n                                  properties:\n                                    user_id:\n                                      type: integer\n                                      description: |\n                                        The user's ID.\n                                    email:\n                                      type: string\n                                      description: |\n                                        The Zulip display email address for the user.\n                                recipients:\n                                  type: array\n                                  description: |\n                                    Only present for typing notifications for (group) private messages.\n\n                                    Array of dictionaries describing the set of users who would be recipients\n                                    of the message that stopped being typed. Each dictionary contains\n                                    details on one one of the recipients users; the sending user is\n                                    guaranteed to appear among the recipients.\n                                  items:\n                                    type: object\n                                    additionalProperties: false\n                                    description: |\n                                      Object containing the user id and email of a recipient.\n                                    properties:\n                                      user_id:\n                                        type: integer\n                                        description: |\n                                          The ID of the user.\n                                      email:\n                                        type: string\n                                        description: |\n                                          The Zulip display email address for the user.\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    Only present if `message_type` is `stream`.\n\n                                    The unique ID of the stream to which message is being typed.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 58). Previously,\n                                    typing notifications were only for private messages.\n                                topic:\n                                  type: string\n                                  description: |\n                                    Only present if `message_type` is `stream`.\n\n                                    Topic within the stream where the message is being typed.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 58). Previously,\n                                    typing notifications were only for private messages.\n                              example:\n                                {\n                                  \"type\": \"typing\",\n                                  \"op\": \"stop\",\n                                  \"sender\":\n                                    {\n                                      \"user_id\": 10,\n                                      \"email\": \"user10@zulip.testserver\",\n                                    },\n                                  \"recipients\":\n                                    [\n                                      {\n                                        \"user_id\": 8,\n                                        \"email\": \"user8@zulip.testserver\",\n                                      },\n                                      {\n                                        \"user_id\": 10,\n                                        \"email\": \"user10@zulip.testserver\",\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to a user when [message flags][message-flags] are added\n                                to a message.\n\n                                [message-flags]: /api/update-message-flags#available-flags\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - update_message_flags\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                operation:\n                                  deprecated: true\n                                  description: |\n                                    Old name for `op` for this event type.\n\n                                    **Deprecated**: This is deprecated; please use `op` instead\n                                    starting with Zulip 4.0 (feature level 32).\n                                  type: string\n                                  enum:\n                                    - add\n                                flag:\n                                  type: string\n                                  description: |\n                                    The flag that was added.\n                                messages:\n                                  type: array\n                                  description: |\n                                    Array containing the ids of all messages to which\n                                    the flag was added.\n                                  items:\n                                    type: integer\n                                all:\n                                  type: boolean\n                                  description: |\n                                    Whether the flag was added to all messages (E.g. all messages\n                                    were marked as read).\n                                    If this is true, then the `messages` array will be empty.\n                              example:\n                                {\n                                  \"type\": \"update_message_flags\",\n                                  \"op\": \"add\",\n                                  \"operation\": \"add\",\n                                  \"flag\": \"starred\",\n                                  \"messages\": [63],\n                                  \"all\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to a user when [message flags][message-flags] are\n                                removed from a message.\n\n                                [message-flags]: /api/update-message-flags#available-flags\n                              required:\n                                [\n                                  \"id\",\n                                  \"type\",\n                                  \"op\",\n                                  \"operation\",\n                                  \"flag\",\n                                  \"messages\",\n                                  \"all\",\n                                ]\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - update_message_flags\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                operation:\n                                  deprecated: true\n                                  type: string\n                                  description: |\n                                    Old name for `op` for this event type.\n\n                                    **Deprecated**: This is deprecated; please use `op` instead\n                                    starting with Zulip 4.0 (feature level 32).\n                                  enum:\n                                    - remove\n                                flag:\n                                  type: string\n                                  description: |\n                                    The flag to be removed.\n                                  enum:\n                                    - starred\n                                    - read\n                                messages:\n                                  type: array\n                                  description: |\n                                    Array containing the IDs of the messages from which the flag\n                                    was removed.\n                                  items:\n                                    type: integer\n                                all:\n                                  type: boolean\n                                  description: |\n                                    Whether the flag was removed from all messages.\n                                    If this is true then the `messages` array will be empty.\n                                message_details:\n                                  description: |\n                                    Present if `message` and `update_message_flags` are both present in\n                                    `event_types` and the `flag` is `read` and the `op` is `remove`.\n\n                                    A set of data structures describing the messages that\n                                    are being marked as unread with additional details to\n                                    allow a client to update the `unread_msgs` data\n                                    structure for these messages (which may not be\n                                    otherwise known to the client).\n\n                                    **Changes**: New in Zulip 5.0 (feature level 121). Previously,\n                                    marking already read messages as unread was not\n                                    supported by the Zulip API.\n                                  type: object\n                                  additionalProperties:\n                                    type: object\n                                    description: |\n                                      Additional properties.\n                                    additionalProperties: false\n                                    required: [\"type\"]\n                                    properties:\n                                      type:\n                                        type: string\n                                        description: |\n                                          The type of this message.\n                                        enum:\n                                          - private\n                                          - stream\n                                      mentioned:\n                                        type: boolean\n                                        description: |\n                                          A flag which indicates whether the message contains a mention\n                                          of the user.\n\n                                          Present only if the message mentions the current user.\n                                      user_ids:\n                                        type: array\n                                        items:\n                                          type: integer\n                                        description: |\n                                          Present only if `type` is `private`.\n\n                                          The user IDs of every recipient of this private message, excluding yourself.\n                                          Will be the empty list for a message you had sent to only yourself.\n                                      stream_id:\n                                        type: integer\n                                        description: |\n                                          Present only if `type` is `stream`.\n\n                                          The ID of the stream where the message was sent.\n                                      topic:\n                                        type: string\n                                        description: |\n                                          Present only if `type` is `stream`.\n\n                                          Name of the topic where the message was sent.\n                                      unmuted_stream_msg:\n                                        type: boolean\n                                        deprecated: true\n                                        description: |\n                                          **Deprecated**\n                                          Internal implementation detail. Clients should\n                                          ignore this field as it will be removed in the future.\n                              example:\n                                {\n                                  \"type\": \"update_message_flags\",\n                                  \"op\": \"remove\",\n                                  \"operation\": \"remove\",\n                                  \"flag\": \"starred\",\n                                  \"messages\": [63],\n                                  \"message_details\":\n                                    {\n                                      63:\n                                        {\n                                          \"type\": \"stream\",\n                                          \"stream_id\": 22,\n                                          \"topic\": \"lunch\",\n                                        },\n                                    },\n                                  \"all\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to users in an organization when a [user group](/help/user-groups) is created.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                group:\n                                  $ref: \"#/components/schemas/UserGroup\"\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"add\",\n                                  \"group\":\n                                    {\n                                      \"name\": \"backend\",\n                                      \"members\": [12],\n                                      \"description\": \"Backend team\",\n                                      \"id\": 2,\n                                      \"is_system_group\": false,\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization\n                                when a property of a user group is changed.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                group_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user group whose details have changed.\n                                data:\n                                  type: object\n                                  additionalProperties: false\n                                  description: |\n                                    Dictionary containing the changed details of the user group.\n                                  properties:\n                                    name:\n                                      type: string\n                                      description: |\n                                        The new name of the user group. Only present if the group's name changed.\n                                    description:\n                                      type: string\n                                      description: |\n                                        The new description of the group. Only present if the description\n                                        changed.\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"update\",\n                                  \"group_id\": 2,\n                                  \"data\":\n                                    {\n                                      \"description\": \"Mention this group to get the security team's attention.\",\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when users have been added to a user group.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - add_members\n                                group_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user group with new members.\n                                user_ids:\n                                  type: array\n                                  items:\n                                    type: integer\n                                  description: |\n                                    Array containing the IDs of the users who have been added\n                                    to the user group.\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"add_members\",\n                                  \"group_id\": 2,\n                                  \"user_ids\": [10],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when users have been removed from\n                                a user group.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove_members\n                                group_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user group whose details have changed.\n                                user_ids:\n                                  type: array\n                                  items:\n                                    type: integer\n                                  description: |\n                                    Array containing the IDs of the users who have been removed\n                                    from the user group.\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"remove_members\",\n                                  \"group_id\": 2,\n                                  \"user_ids\": [10],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when subgroups have been added to\n                                a user group.\n\n                                **Changes**: New in Zulip 6.0 (feature level 127).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - add_subgroups\n                                group_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user group whose details have changed.\n                                direct_subgroup_ids:\n                                  type: array\n                                  items:\n                                    type: integer\n                                  description: |\n                                    Array containing the IDs of the subgroups that have been added\n                                    to the user group.\n\n                                    **Changes**: New in Zulip 6.0 (feature level 131).\n                                    Previously, this was called `subgroup_ids`, but\n                                    clients can ignore older events as this feature level\n                                    predates subgroups being fully implemented.\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"add_subgroups\",\n                                  \"group_id\": 2,\n                                  \"direct_subgroup_ids\": [10],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when subgroups have been removed from\n                                a user group.\n\n                                **Changes**: New in Zulip 6.0 (feature level 127).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove_subgroups\n                                group_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the user group whose details have changed.\n                                direct_subgroup_ids:\n                                  type: array\n                                  items:\n                                    type: integer\n                                  description: |\n                                    Array containing the IDs of the subgroups that have been\n                                    removed from the user group.\n\n                                    **Changes**: New in Zulip 6.0 (feature level 131).\n                                    Previously, this was called `subgroup_ids`, but\n                                    clients can ignore older events as this feature level\n                                    predates subgroups being fully implemented.\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"remove_subgroups\",\n                                  \"group_id\": 2,\n                                  \"direct_subgroup_ids\": [10],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when a user group has been deleted.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - user_group\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                group_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the group which has been deleted.\n                              example:\n                                {\n                                  \"type\": \"user_group\",\n                                  \"op\": \"remove\",\n                                  \"group_id\": 2,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the\n                                set of configured [linkifiers](/help/add-a-custom-linkifier)\n                                for the organization has changed.\n\n                                Processing this event is important to doing Markdown local echo\n                                correctly.\n\n                                **Changes**: New in Zulip 4.0 (feature level 54), replacing the\n                                previous `realm_filters` event type, which is still sent for\n                                backwards compatibility reasons.\n\n                                Clients should migrate to requesting and processing the\n                                `realm_linkifiers` event type when possible, since we plan to remove\n                                the legacy `realm_filters` logic entirely in a future release.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_linkifiers\n                                realm_linkifiers:\n                                  type: array\n                                  description: |\n                                    Array of dictionaries where each dictionary contains details about\n                                    a single realm linkifier.\n                                  items:\n                                    type: object\n                                    additionalProperties: false\n                                    properties:\n                                      pattern:\n                                        type: string\n                                        description: |\n                                          The string regex pattern which represents the pattern that\n                                          should be linkified by this linkifier.\n                                      url_format:\n                                        type: string\n                                        description: |\n                                          The URL format string to be used for linkifying matches.\n\n                                      id:\n                                        type: integer\n                                        description: |\n                                          The ID of the linkifier.\n                              example:\n                                {\n                                  \"type\": \"realm_linkifiers\",\n                                  \"realm_linkifiers\":\n                                    [\n                                      {\n                                        \"pattern\": \"#(?P\u003cid\u003e[123])\",\n                                        \"url_format\": \"https://realm.com/my_realm_filter/%(id)s\",\n                                        \"id\": 1,\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              deprecated: true\n                              description: |\n                                Legacy event type. Sent to all users in a Zulip organization\n                                when the set of configured [linkifiers](/help/add-a-custom-linkifier)\n                                for the organization has changed.\n\n                                **Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by\n                                the `realm_linkifiers` event type, which has a clearer name and format,\n                                instead.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_filters\n                                realm_filters:\n                                  type: array\n                                  items:\n                                    type: array\n                                    items:\n                                      oneOf:\n                                        - type: integer\n                                        - type: string\n                                  description: |\n                                    An array of tuples, where each tuple describes a linkifier.\n                                    The first element of the tuple is a\n                                    string regex pattern which represents the pattern that should\n                                    be linkified on matching. The second element is the URL with which the\n                                    pattern matching string should be linkified with and the third element\n                                    is the ID of the realm filter.\n                              example:\n                                {\n                                  \"type\": \"realm_filters\",\n                                  \"realm_filters\":\n                                    [\n                                      [\n                                        \"#(?P\u003cid\u003e[123])\",\n                                        \"https://realm.com/my_realm_filter/%(id)s\",\n                                        1,\n                                      ],\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the\n                                set of configured [code playgrounds](/help/code-blocks#code-playgrounds)\n                                for the organization has changed.\n\n                                **Changes**: New in Zulip 4.0 (feature level 49).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_playgrounds\n                                realm_playgrounds:\n                                  type: array\n                                  description: |\n                                    An array of dictionaries where each dictionary contains\n                                    data about a single playground entry.\n                                  items:\n                                    $ref: \"#/components/schemas/RealmPlayground\"\n                              example:\n                                {\n                                  \"type\": \"realm_playgrounds\",\n                                  \"realm_playgrounds\":\n                                    [\n                                      {\n                                        \"id\": 1,\n                                        \"name\": \"Python playground\",\n                                        \"pygments_language\": \"Python\",\n                                        \"url_prefix\": \"https://python.example.com\",\n                                      },\n                                    ],\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when\n                                a [custom emoji](/help/custom-emoji) has been updated,\n                                typically when a new emoji has been added or an old one\n                                has been deactivated. The event contains all custom emoji\n                                configured for the organization, not just the updated\n                                custom emoji.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_emoji\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                realm_emoji:\n                                  type: object\n                                  description: |\n                                    An object in which each key describes a realm emoji.\n                                  additionalProperties:\n                                    $ref: \"#/components/schemas/RealmEmoji\"\n                              example:\n                                {\n                                  \"type\": \"realm_emoji\",\n                                  \"op\": \"update\",\n                                  \"realm_emoji\":\n                                    {\n                                      \"2\":\n                                        {\n                                          \"id\": \"2\",\n                                          \"name\": \"my_emoji\",\n                                          \"source_url\": \"/user_avatars/2/emoji/images/2.png\",\n                                          \"deactivated\": true,\n                                          \"author_id\": 11,\n                                        },\n                                      \"1\":\n                                        {\n                                          \"id\": \"1\",\n                                          \"name\": \"green_tick\",\n                                          \"source_url\": \"/user_avatars/2/emoji/images/1.png\",\n                                          \"deactivated\": false,\n                                          \"author_id\": 11,\n                                        },\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the set of\n                                [allowed domains for new users](/help/restrict-account-creation#configuring-email-domain-restrictions)\n                                has changed.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_domains\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                realm_domain:\n                                  $ref: \"#/components/schemas/RealmDomain\"\n                              example:\n                                {\n                                  \"type\": \"realm_domains\",\n                                  \"op\": \"add\",\n                                  \"realm_domain\":\n                                    {\n                                      \"domain\": \"zulip.org\",\n                                      \"allow_subdomains\": false,\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the set of\n                                [allowed domains for new users](/help/restrict-account-creation#configuring-email-domain-restrictions)\n                                has changed.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_domains\n                                op:\n                                  type: string\n                                  enum:\n                                    - change\n                                realm_domain:\n                                  type: object\n                                  additionalProperties: false\n                                  description: |\n                                    Object containing details of the edited domain.\n                                  properties:\n                                    domain:\n                                      type: string\n                                      description: |\n                                        The domain whose settings have changed.\n                                    allow_subdomains:\n                                      type: boolean\n                                      description: |\n                                        Whether subdomains are allowed for this domain.\n                              example:\n                                {\n                                  \"type\": \"realm_domains\",\n                                  \"op\": \"change\",\n                                  \"realm_domain\":\n                                    {\n                                      \"domain\": \"zulip.org\",\n                                      \"allow_subdomains\": true,\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the set of\n                                [allowed domains for new users](/help/restrict-account-creation#configuring-email-domain-restrictions)\n                                has changed.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_domains\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                domain:\n                                  type: string\n                                  description: |\n                                    The domain to be removed.\n                              example:\n                                {\n                                  \"type\": \"realm_domains\",\n                                  \"op\": \"remove\",\n                                  \"domain\": \"zulip.org\",\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to the user who requested a [data export](/help/export-your-organization)\n                                when the status of the export changes.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_export\n                                exports:\n                                  type: array\n                                  description: |\n                                    An array of dictionaries where each dictionary contains\n                                    data about a single organization export request.\n                                  items:\n                                    $ref: \"#/components/schemas/RealmExport\"\n                              example:\n                                {\n                                  \"type\": \"realm_export\",\n                                  \"exports\":\n                                    [\n                                      {\n                                        \"id\": 107,\n                                        \"export_time\": 1594825443.6567969322,\n                                        \"acting_user_id\": 10,\n                                        \"export_url\": null,\n                                        \"deleted_timestamp\": null,\n                                        \"failed_timestamp\": 1594825444.4363360405,\n                                        \"pending\": false,\n                                      },\n                                    ],\n                                  \"id\": 1,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to users who can administer a newly created bot\n                                user. Clients will also receive a `realm_user` event that\n                                contains basic details (but not the API key).\n\n                                The `realm_user` events are sufficient for clients that\n                                only need to interact with the bot; this `realm_bot` event\n                                type is relevant only for administering bots.\n\n                                Only organization administrators and the user who owns the bot will\n                                receive this event.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_bot\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                bot:\n                                  $ref: \"#/components/schemas/Bot\"\n                              example:\n                                {\n                                  \"type\": \"realm_bot\",\n                                  \"op\": \"add\",\n                                  \"bot\":\n                                    {\n                                      \"email\": \"test-bot@zulip.testserver\",\n                                      \"user_id\": 36,\n                                      \"full_name\": \"Foo Bot\",\n                                      \"bot_type\": 1,\n                                      \"is_active\": true,\n                                      \"api_key\": \"6hc6MC9mpNFvoo0gSOWnZEq4aJEn8UNK\",\n                                      \"default_sending_stream\": null,\n                                      \"default_events_register_stream\": null,\n                                      \"default_all_public_streams\": false,\n                                      \"avatar_url\": \"https://secure.gravatar.com/avatar/af8abc2537d283b212a6bd4d1289956d?d=identicon\u0026version=1\",\n                                      \"services\": [],\n                                      \"owner_id\": 10,\n                                    },\n                                  \"id\": 1,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to users who can administer a bot user when the bot is\n                                configured. Clients may also receive a `realm_user` event that\n                                for changes in public data about the bot (name, etc.).\n\n                                The `realm_user` events are sufficient for clients that\n                                only need to interact with the bot; this `realm_bot` event\n                                type is relevant only for administering bots.\n\n                                Only organization administrators and the user who owns the bot will\n                                receive this event.\n                              additionalProperties: false\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_bot\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                bot:\n                                  allOf:\n                                    - description: |\n                                        Object containing details about the changed bot.\n                                        It contains two properties: the user id of the bot and\n                                        the property to be changed. The changed property is one\n                                        of the remaining properties listed below.\n                                    - $ref: \"#/components/schemas/BasicBot\"\n                              example:\n                                {\n                                  \"type\": \"realm_bot\",\n                                  \"op\": \"update\",\n                                  \"bot\":\n                                    {\n                                      \"user_id\": 37,\n                                      \"services\":\n                                        [\n                                          {\n                                            \"base_url\": \"http://hostname.domain2.com\",\n                                            \"interface\": 2,\n                                            \"token\": \"grr8I2APXRmVL0FRTMRYAE4DRPQ5Wlaw\",\n                                          },\n                                        ],\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when a bot has been deactivated.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_bot\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                bot:\n                                  type: object\n                                  description: |\n                                    Object containing details about the deactivated bot.\n                                  additionalProperties: false\n                                  properties:\n                                    user_id:\n                                      type: integer\n                                      description: |\n                                        The user ID of the deactivated bot.\n                                    full_name:\n                                      type: string\n                                      description: |\n                                        The full name of the deactivated bot.\n                              example:\n                                {\n                                  \"type\": \"realm_bot\",\n                                  \"op\": \"remove\",\n                                  \"bot\":\n                                    {\"user_id\": 35, \"full_name\": \"Foo Bot\"},\n                                  \"id\": 1,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users when a bot has been deactivated.\n                                Note that this is very similar to the bot_remove event\n                                and one of them will be removed soon.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_bot\n                                op:\n                                  type: string\n                                  enum:\n                                    - delete\n                                bot:\n                                  type: object\n                                  description: |\n                                    Object containing details about the deactivated bot.\n                                  additionalProperties: false\n                                  properties:\n                                    user_id:\n                                      type: integer\n                                      description: |\n                                        The user ID of the deactivated bot.\n                              example:\n                                {\n                                  \"type\": \"realm_bot\",\n                                  \"op\": \"delete\",\n                                  \"bot\":\n                                    {\"user_id\": 35, \"full_name\": \"Foo Bot\"},\n                                  \"id\": 1,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                The simpler of two possible event types sent to all users\n                                in a Zulip organization when the configuration of the\n                                organization (realm) has changed.\n\n                                Often individual settings are migrated from this format to\n                                the [realm/update_dict](#realm-update_dict) event format when additional realm\n                                settings are added whose values are coupled to each other\n                                in some way. The specific values supported by this event\n                                type are documented in the [realm/update_dict](#realm-update_dict)\n                                documentation.\n\n                                A correct client implementation should convert these\n                                events into the corresponding [realm/update_dict](#realm-update_dict)\n                                event and then process that.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                property:\n                                  type: string\n                                  description: |\n                                    The name of the property that was changed.\n                                value:\n                                  description: |\n                                    The new value of the property.\n                                  oneOf:\n                                    - type: string\n                                    - type: boolean\n                                    - type: integer\n                                extra_data:\n                                  description: |\n                                    Object containing extra data related to the changed\n                                    property.\n                                  type: object\n                                  additionalProperties: false\n                                  properties:\n                                    upload_quota:\n                                      type: integer\n                                      description: |\n                                        Note: Only present if changed property is `plan_type`.\n\n                                        The new upload quota for the Zulip organization.\n                              example:\n                                {\n                                  \"type\": \"realm\",\n                                  \"op\": \"update\",\n                                  \"property\": \"disallow_disposable_email_addresses\",\n                                  \"value\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the\n                                organization (realm) is deactivated. Its main purpose is to\n                                flush active longpolling connections so clients can immediately\n                                show the organization as deactivated.\n\n                                Clients cannot rely on receiving this event, because they will\n                                no longer be able to authenticate to the Zulip API due to the\n                                deactivation, and thus can miss it if they did not have an active\n                                longpolling connection at the moment of deactivation.\n\n                                Correct handling of realm deactivations requires that clients\n                                parse authentication errors from GET /events; if that is done\n                                correctly, the client can ignore this event type and rely on its\n                                handling of the `GET /events` request it will do immediately\n                                after processing this batch of events.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm\n                                op:\n                                  type: string\n                                  enum:\n                                    - deactivated\n                                realm_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the deactivated realm.\n                              example:\n                                {\n                                  \"type\": \"realm\",\n                                  \"op\": \"deactivated\",\n                                  \"realm_id\": 2,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              description: |\n                                Event sent to all the users whenever the Zulip server restarts.\n\n                                Specifically, this event is sent whenever the Tornado process\n                                for the user is restarted; in particular, this will always happen\n                                when the Zulip server is upgraded.\n\n                                Clients can use this event to know when they should get a new\n                                event queue after a server upgrade. Clients doing so must implement\n                                a random delay strategy to spread such restarts over 10 minutes or\n                                more to avoid creating a synchronized thundering herd effect.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - restart\n                                zulip_version:\n                                  type: string\n                                  description: |\n                                    The Zulip version number, in the format where this appears\n                                    in the [server_settings](/api/get-server-settings) and\n                                    [register](/api/register-queue) responses.\n\n                                    **Changes**: New in Zulip 4.0 (feature level 59).\n                                zulip_merge_base:\n                                  type: string\n                                  description: |\n                                    The Zulip merge base number, in the format where this appears\n                                    in the [server_settings](/api/get-server-settings) and\n                                    [register](/api/register-queue) responses.\n\n                                    **Changes**: New in Zulip 5.0 (feature level 88).\n                                zulip_feature_level:\n                                  type: integer\n                                  description: |\n                                    The [Zulip feature level](/api/changelog) of the server\n                                    after the restart.\n\n                                    Clients can safely avoid refetching their state and\n                                    creating a new event queue when the API feature level has not\n                                    changed, or when they know the specific feature level change\n                                    is not relevant to the client (E.g. it just adds a new endpoint\n                                    that the client doesn't use).\n\n                                    **Changes**: New in Zulip 4.0 (feature level 59).\n                                immediate:\n                                  type: boolean\n                                  description: |\n                                    Whether the client should fetch a new event queue immediately,\n                                    rather than using a backoff strategy to avoid thundering herds.\n                                    A Zulip development server uses this parameter to reload\n                                    clients immediately.\n                                server_generation:\n                                  type: integer\n                                  description: |\n                                    The timestamp at which the server started.\n                              additionalProperties: false\n                              example:\n                                {\n                                  \"id\": 0,\n                                  \"immediate\": True,\n                                  \"server_generation\": 1619334181,\n                                  \"type\": \"restart\",\n                                  \"zulip_feature_level\": 57,\n                                  \"zulip_version\": \"5.0-dev-1650-gc3fd37755f\",\n                                  \"zulip_merge_base\": \"5.0-dev-1646-gea6b21cd8c\",\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                The more general of two event types that may be used when\n                                sending an event to all users in a Zulip organization when\n                                the configuration of the organization (realm) has changed.\n\n                                Unlike the simpler [realm/update](#realm-update) event format, this\n                                event type supports multiple properties being changed in a\n                                single event.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm\n                                op:\n                                  type: string\n                                  enum:\n                                    - update_dict\n                                property:\n                                  type: string\n                                  deprecated: true\n                                  description: |\n                                    Always `\"default\"`. Present for backwards-compatibility with older\n                                    clients that predate the `update_dict` event style.\n\n                                    **Deprecated** and will be removed in a future release.\n                                data:\n                                  type: object\n                                  description: |\n                                    An object containing the properties that have changed.\n                                  properties:\n                                    add_custom_emoji_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can add custom emoji in this organization.\n                                    allow_edit_history:\n                                      type: boolean\n                                      description: |\n                                        Whether this organization is configured to allow users to access\n                                        [message edit history](/help/view-a-messages-edit-history).\n                                    allow_message_editing:\n                                      type: boolean\n                                      description: |\n                                        Whether this organizations [message edit policy](/help/configure-message-editing-and-deletion)\n                                        allows editing the content of messages.\n                                    authentication_methods:\n                                      type: object\n                                      additionalProperties:\n                                        description: |\n                                          Boolean describing whether the authentication method (i.e its key)\n                                          is enabled in this organization.\n                                        type: boolean\n                                      description: |\n                                        Dictionary of 'authentication_method_name': 'boolean' with each\n                                        entry describing whether the authentication name can be used for\n                                        authenticating into the organization.\n                                    bot_creation_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can create bot users in this organization.\n                                    community_topic_editing_limit_seconds:\n                                      type: integer\n                                      description: |\n                                        Messages sent more than this many seconds ago cannot have\n                                        their topics edited by other users with this organization's\n                                        [message edit policy](/help/configure-message-editing-and-deletion).\n\n                                        **Changes**: New in Zulip 3.0 (feature level 11). Previously this\n                                        value was hardcoded to 86400 seconds (1 day).\n                                    create_public_stream_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can create public streams in this organization.\n\n                                        **Changes**: Before Zulip 5.0 (feature level 102), permission to\n                                        create streams was controlled by the `create_stream_policy` setting.\n                                    create_private_stream_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can create private streams in this organization.\n\n                                        **Changes**: Before Zulip 5.0 (feature level 102), permission to\n                                        create streams was controlled by the `create_stream_policy` setting.\n                                    create_web_public_stream_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can create web public streams in this organization.\n\n                                        **Changes**: New in Zulip 5.0 (feature level 103).\n                                    default_code_block_language:\n                                      type: string\n                                      nullable: true\n                                      description: |\n                                        The default pygments language code to be used for a code blocks\n                                        in this organization. Null if no default has been set.\n                                    default_language:\n                                      type: string\n                                      description: |\n                                        The default language for the organization.\n                                    description:\n                                      type: string\n                                      description: |\n                                        The description of the organization, used on login and registration pages.\n                                    digest_emails_enabled:\n                                      type: boolean\n                                      description: |\n                                        Whether the organization has enabled [weekly digest emails](/help/digest-emails).\n                                    digest_weekday:\n                                      type: integer\n                                      description: |\n                                        The day of the week when the organization will send\n                                        its weekly digest email to inactive users.\n                                    disallow_disposable_email_addresses:\n                                      type: boolean\n                                      description: |\n                                        Whether the organization disallows disposable email\n                                        addresses.\n                                    edit_topic_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy][permission-level] for which users can edit topics of any message.\n\n                                        - 1 = members only\n                                        - 2 = admins only\n                                        - 3 = [full members][calc-full-member] only\n                                        - 4 = moderators only\n                                        - 5 = everyone\n\n                                        **Changes**: New in Zulip 5.0 (feature level 75), replacing the\n                                        previous `allow_community_topic_editing` boolean.\n\n                                        [permission-level]: /api/roles-and-permissions#permission-levels\n                                        [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                                    email_address_visibility:\n                                      type: integer\n                                      description: |\n                                        The [policy][permission-level] for which users in this organization can see\n                                        the real email addresses of other users.\n\n                                        - 1 = everyone\n                                        - 2 = members only\n                                        - 3 = administrators only\n                                        - 4 = nobody (though note that administrators can change this setting).\n                                        - 5 = moderators only\n\n                                        [permission-level]: /api/roles-and-permissions#permission-levels\n                                    email_changes_disabled:\n                                      type: boolean\n                                      description: |\n                                        Whether users are allowed to change their own email address in this\n                                        organization. This is typically disabled for organizations that\n                                        synchronize accounts from LDAP or a similar corporate database.\n                                    emails_restricted_to_domains:\n                                      type: boolean\n                                      description: |\n                                        Whether [new users joining](/help/restrict-account-creation#configuring-email-domain-restrictions)\n                                        this organization are required to have an email\n                                        address in one of the `realm_domains` configured for the organization.\n                                    enable_spectator_access:\n                                      type: boolean\n                                      description: |\n                                        Whether web-public streams are enabled in this organization.\n\n                                        Can only be enabled if the `WEB_PUBLIC_STREAMS_ENABLED`\n                                        [server setting][server-settings] is enabled on the Zulip\n                                        server. See also the `create_web_public_stream_policy` realm\n                                        setting.\n\n                                        [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html\n\n                                        **Changes**: New in Zulip 5.0 (feature level 109).\n                                    giphy_rating:\n                                      type: integer\n                                      description: |\n                                        Maximum rating of the GIFs that will be retrieved from GIPHY.\n\n                                        **Changes**: New in Zulip 4.0 (feature level 55).\n                                    icon_source:\n                                      type: string\n                                      description: |\n                                        String indicating whether the organization's\n                                        [profile icon](/help/create-your-organization-profile) was uploaded\n                                        by a user or is the default. Useful for UI allowing editing the organization's icon.\n\n                                        - \"G\" means generated by Gravatar (the default).\n                                        - \"U\" means uploaded by an organization administrator.\n                                    icon_url:\n                                      type: string\n                                      description: |\n                                        The URL of the organization's [profile icon](/help/create-your-organization-profile).\n                                    inline_image_preview:\n                                      type: boolean\n                                      description: |\n                                        Whether this organization has been configured to enable\n                                        [previews of linked images](/help/allow-image-link-previews).\n                                    inline_url_embed_preview:\n                                      type: boolean\n                                      description: |\n                                        Whether this organization has been configured to enable\n                                        [previews of linked websites](/help/allow-image-link-previews).\n                                    invite_required:\n                                      type: boolean\n                                      description: |\n                                        Whether an invitation is required to join this organization.\n                                    invite_to_realm_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can invite other users to join the organization.\n\n                                        **Changes**: New in Zulip 4.0 (feature level 50) replacing the\n                                        previous `invite_by_admins_only` boolean.\n                                    invite_to_stream_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy](/api/roles-and-permissions#permission-levels)\n                                        for which users can add other users to streams in this organization.\n                                    logo_source:\n                                      type: string\n                                      description: |\n                                        String indicating whether the organization's\n                                        [profile wide logo](/help/create-your-organization-profile) was uploaded\n                                        by a user or is the default. Useful for UI allowing editing the\n                                        organization's wide logo.\n\n                                        - \"D\" means the logo is the default Zulip logo.\n                                        - \"U\" means uploaded by an organization administrator.\n                                    logo_url:\n                                      type: string\n                                      description: |\n                                        The URL of the organization's wide logo configured in the\n                                        [organization profile](/help/create-your-organization-profile).\n                                    mandatory_topics:\n                                      type: boolean\n                                      description: |\n                                        Whether [topics are required](/help/require-topics) for messages in this organization.\n                                    message_content_allowed_in_email_notifications:\n                                      type: boolean\n                                      description: |\n                                        Whether notification emails in this organization are allowed to\n                                        contain Zulip the message content, or simply indicate that a new\n                                        message was sent.\n                                    message_content_delete_limit_seconds:\n                                      type: integer\n                                      nullable: true\n                                      description: |\n                                        Messages sent more than this many seconds ago cannot be deleted\n                                        with this organization's\n                                        [message deletion policy](/help/configure-message-editing-and-deletion).\n\n                                        Will not be 0. A 'null' value means no limit: messages can be deleted\n                                        regardless of how long ago they were sent.\n\n                                        **Changes**: No limit was represented using the\n                                        special value `0` before Zulip 5.0 (feature level 100).\n                                    message_content_edit_limit_seconds:\n                                      type: integer\n                                      description: |\n                                        Messages sent more than this many seconds ago cannot be edited\n                                        with this organization's\n                                        [message edit policy](/help/configure-message-editing-and-deletion).\n                                    move_messages_between_streams_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy][permission-level] for which users can move messages from\n                                        one stream to another.\n\n                                        - 1 = Members only\n                                        - 2 = Administrators only\n                                        - 3 = [Full members][calc-full-member] only\n                                        - 4 = Moderators only\n\n                                        **Changes**: New in Zulip 4.0 (feature level 56)\n\n                                        [permission-level]: /api/roles-and-permissions#permission-levels\n                                        [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                                    name:\n                                      type: string\n                                      description: |\n                                        The name of the organization, used in login pages etc.\n                                    name_changes_disabled:\n                                      type: boolean\n                                      description: |\n                                        Indicates whether users are\n                                        [allowed to change](/help/restrict-name-and-email-changes) their name\n                                        via the Zulip UI in this organization. Typically disabled\n                                        in organizations syncing this type of account information from\n                                        an external user database like LDAP.\n                                    night_logo_source:\n                                      type: string\n                                      description: |\n                                        String indicating whether the organization's dark theme\n                                        [profile wide logo](/help/create-your-organization-profile) was uploaded\n                                        by a user or is the default. Useful for UI allowing editing the\n                                        organization's wide logo.\n\n                                        - \"D\" means the logo is the default Zulip logo.\n                                        - \"U\" means uploaded by an organization administrator.\n                                    night_logo_url:\n                                      type: string\n                                      description: |\n                                        The URL of the organization's dark theme wide-format logo configured in the\n                                        [organization profile](/help/create-your-organization-profile).\n                                    notifications_stream_id:\n                                      type: integer\n                                      description: |\n                                        The ID of the stream to which notifications announcing the\n                                        creation of new streams are sent. -1 if such notifications are disabled.\n\n                                        Since these notifications are sent by the server, this field is\n                                        primarily relevant to clients containing UI for changing it.\n                                    org_type:\n                                      type: integer\n                                      description: |\n                                        The [organization type](/help/organization-type)\n                                        for the realm.\n\n                                        - 0 = Unspecified\n                                        - 10 = Business\n                                        - 20 = Open-source project\n                                        - 30 = Education (non-profit)\n                                        - 35 = Education (for-profit)\n                                        - 40 = Research\n                                        - 50 = Event or conference\n                                        - 60 = Non-profit (registered)\n                                        - 70 = Government\n                                        - 80 = Political group\n                                        - 90 = Community\n                                        - 100 = Personal\n                                        - 1000 = Other\n\n                                        **Changes**: New in Zulip 6.0 (feature level 128).\n                                    plan_type:\n                                      type: integer\n                                      description: |\n                                        The plan type of the organization.\n\n                                        - 1 = Self-hosted organization (SELF_HOSTED)\n                                        - 2 = Zulip Cloud free plan (LIMITED)\n                                        - 3 = Zulip Cloud Standard plan (STANDARD)\n                                        - 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)\n                                    presence_disabled:\n                                      type: boolean\n                                      description: |\n                                        Whether online presence of other users is shown in this\n                                        organization.\n                                    private_message_policy:\n                                      type: integer\n                                      description: |\n                                        [Policy](/api/roles-and-permissions#permission-levels)\n                                        for [who can send private messages](/help/restrict-private-messages)\n                                        in this organization.\n\n                                        - 1 = Everyone\n                                        - 2 = Nobody\n                                    send_welcome_emails:\n                                      type: boolean\n                                      description: |\n                                        Whether or not this organization is configured to send the standard Zulip\n                                        [welcome emails](/help/disable-welcome-emails) to new users joining the organization.\n                                    signup_notifications_stream_id:\n                                      type: integer\n                                      description: |\n                                        The ID of the stream to which notifications announcing\n                                        that new users have joined the organization are sent.\n                                        -1 if such notifications are disabled.\n\n                                        Since these notifications are sent by the server, this field is\n                                        primarily relevant to clients containing UI for changing it.\n                                    user_group_edit_policy:\n                                      type: integer\n                                      description: |\n                                        The organization's [policy][permission-level] for\n                                        [who can manage user groups][user-group-permissions].\n\n                                        - 1 = All members can create and edit user groups\n                                        - 2 = Only organization administrators can create and edit user groups\n                                        - 3 = Only [full members][calc-full-member] can create and edit user groups\n                                        - 4 = Only organization administrators and moderators can create and edit user groups\n\n                                        [user-group-permissions]: /help/user-groups#configure-who-can-create-and-manage-user-groups\n                                        [permission-level]: /api/roles-and-permissions#permission-levels\n                                        [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                                    video_chat_provider:\n                                      type: integer\n                                      description: |\n                                        The configured video call provider for the organization.\n                                    waiting_period_threshold:\n                                      type: integer\n                                      description: |\n                                        Members whose accounts have been created at least this many days ago\n                                        will be treated as [full members][calc-full-member]\n                                        for the purpose of settings that restrict access to new members.\n\n                                        [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                                    want_advertise_in_communities_directory:\n                                      type: boolean\n                                      description: |\n                                        Whether the organization has given permission to be advertised in the\n                                        Zulip [communities directory](/help/communities-directory).\n\n                                        **Changes**: New in Zulip 6.0 (feature level 129).\n                                    wildcard_mention_policy:\n                                      type: integer\n                                      description: |\n                                        The [policy][permission-level] for who can use wildcard mentions in\n                                        large streams.\n\n                                        - 1 =\u003e Any user can use wildcard mentions in large streams.\n                                        - 2 =\u003e Only members can use wildcard mentions in large streams.\n                                        - 3 =\u003e Only [full members][calc-full-member] can use wildcard mentions in large streams.\n                                        - 4 =\u003e Only stream and organization administrators can use wildcard mentions in large streams.\n                                        - 5 =\u003e Only organization administrators can use wildcard mentions in large streams.\n                                        - 6 =\u003e Nobody can use wildcard mentions in large streams.\n                                        - 7 =\u003e Only organization administrators and moderators can use wildcard mentions in large streams.\n\n                                        All users will receive a warning/reminder when using\n                                        mentions in large streams, even when permitted to do so.\n\n                                        **Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in\n                                        Zulip 4.0 (feature level 62).\n\n                                        [permission-level]: /api/roles-and-permissions#permission-levels\n                                        [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                                  additionalProperties: false\n                              example:\n                                {\n                                  \"type\": \"realm\",\n                                  \"op\": \"update_dict\",\n                                  \"property\": \"default\",\n                                  \"data\":\n                                    {\n                                      \"allow_message_editing\": false,\n                                      \"message_content_edit_limit_seconds\": 0,\n                                      \"edit_topic_policy\": 2,\n                                    },\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event sent to all users in a Zulip organization when the\n                                [default settings for new users][new-user-defaults]\n                                of the organization (realm) have changed.\n\n                                [new-user-defaults]: /help/configure-default-new-user-settings\n\n                                See [PATCH /realm/user_settings_defaults](/api/update-realm-user-settings-defaults)\n                                for details on possible properties.\n\n                                **Changes**: New in Zulip 5.0 (feature level 95).\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - realm_user_settings_defaults\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                property:\n                                  type: string\n                                  description: |\n                                    The name of the property that was changed.\n                                value:\n                                  description: |\n                                    The new value of the property.\n                                  oneOf:\n                                    - type: boolean\n                                    - type: integer\n                                    - type: string\n                              example:\n                                {\n                                  \"type\": \"realm_user_settings_defaults\",\n                                  \"op\": \"update\",\n                                  \"property\": \"left_side_userlist\",\n                                  \"value\": false,\n                                  \"id\": 0,\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event containing details of newly created drafts.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - drafts\n                                op:\n                                  type: string\n                                  enum:\n                                    - add\n                                drafts:\n                                  type: array\n                                  description: |\n                                    An array containing objects for the newly created drafts.\n                                  items:\n                                    $ref: \"#/components/schemas/Draft\"\n                              example:\n                                {\n                                  \"type\": \"drafts\",\n                                  \"op\": \"add\",\n                                  \"drafts\":\n                                    [\n                                      {\n                                        \"id\": 17,\n                                        \"type\": \"private\",\n                                        \"to\": [6],\n                                        \"topic\": \"\",\n                                        \"content\": \"Hello there!\",\n                                        \"timestamp\": 15954790200,\n                                      },\n                                    ],\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event containing details for an edited draft.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - drafts\n                                op:\n                                  type: string\n                                  enum:\n                                    - update\n                                draft:\n                                  $ref: \"#/components/schemas/Draft\"\n                              example:\n                                {\n                                  \"type\": \"drafts\",\n                                  \"op\": \"update\",\n                                  \"draft\":\n                                    {\n                                      \"id\": 17,\n                                      \"type\": \"private\",\n                                      \"to\": [6, 7, 8, 9, 10],\n                                      \"topic\": \"\",\n                                      \"content\": \"Hello everyone!\",\n                                      \"timestamp\": 15954790200,\n                                    },\n                                }\n                            - type: object\n                              additionalProperties: false\n                              description: |\n                                Event containing the id of a deleted draft.\n                              properties:\n                                id:\n                                  $ref: \"#/components/schemas/EventIdSchema\"\n                                type:\n                                  allOf:\n                                    - $ref: \"#/components/schemas/EventTypeSchema\"\n                                    - enum:\n                                        - drafts\n                                op:\n                                  type: string\n                                  enum:\n                                    - remove\n                                draft_id:\n                                  type: integer\n                                  description: |\n                                    The ID of the draft that was just deleted.\n                              example:\n                                {\n                                  \"type\": \"drafts\",\n                                  \"op\": \"update\",\n                                  \"draft_id\": 17,\n                                }\n                      queue_id:\n                        type: string\n                        description: |\n                          The ID of the registered queue.\n                    example:\n                      {\n                        \"queue_id\": \"1375801870:2942\",\n                        \"events\":\n                          [\n                            {\n                              \"id\": 0,\n                              \"message\":\n                                {\n                                  \"avatar_url\": \"https://url/for/othello-bots/avatar\",\n                                  \"client\": \"website\",\n                                  \"content\": \"I come not, friends, to steal away your hearts.\",\n                                  \"content_type\": \"text/x-markdown\",\n                                  \"display_recipient\": \"Denmark\",\n                                  \"id\": 12345678,\n                                  \"recipient_id\": 12314,\n                                  \"sender_email\": \"othello-bot@example.com\",\n                                  \"sender_full_name\": \"Othello Bot\",\n                                  \"sender_id\": 13215,\n                                  \"sender_realm_str\": \"example\",\n                                  \"topic_links\": [],\n                                  \"timestamp\": 1375978403,\n                                  \"type\": \"stream\",\n                                },\n                              \"type\": \"message\",\n                            },\n                            {\n                              \"id\": 1,\n                              \"message\":\n                                {\n                                  \"avatar_url\": \"https://url/for/othello-bots/avatar\",\n                                  \"client\": \"website\",\n                                  \"content\": \"With mirth and laughter let old wrinkles come.\",\n                                  \"content_type\": \"text/x-markdown\",\n                                  \"display_recipient\":\n                                    [\n                                      {\n                                        \"email\": \"hamlet@example.com\",\n                                        \"full_name\": \"Hamlet of Denmark\",\n                                        \"id\": 31572,\n                                      },\n                                    ],\n                                  \"id\": 12345679,\n                                  \"recipient_id\": 18391,\n                                  \"sender_email\": \"othello-bot@example.com\",\n                                  \"sender_full_name\": \"Othello Bot\",\n                                  \"sender_id\": 13215,\n                                  \"sender_realm_str\": \"example\",\n                                  \"subject\": \"\",\n                                  \"topic_links\": [],\n                                  \"timestamp\": 1375978404,\n                                  \"type\": \"private\",\n                                },\n                              \"type\": \"message\",\n                            },\n                          ],\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BadEventQueueIdError\"\n                  - description: |\n                      #### BAD_EVENT_QUEUE_ID errors\n\n                      This error occurs if the target event queue has been garbage collected.\n                      A compliant client will handle this error by re-initializing itself\n                      (e.g. a Zulip web app browser window will reload in this case).\n\n                      See [the /register endpoint docs](/api/register-queue) for details on how to\n                      handle these correctly.\n\n                      The following is the error response in such case:\n    delete:\n      operationId: delete-queue\n      summary: Delete an event queue\n      tags: [\"real_time_events\"]\n      description: |\n        Delete a previously registered queue.\n\n        `DELETE {{ api_url }}/v1/events`\n      parameters:\n        - $ref: \"#/components/parameters/QueueId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/BadEventQueueIdError\"\n                  - description: |\n                      A typical JSON response for when the `queue_id` is non-existent or the\n                      associated queue has already been deleted:\n  /get_stream_id:\n    get:\n      operationId: get-stream-id\n      summary: Get stream ID\n      tags: [\"streams\"]\n      description: |\n        Get the unique ID of a given stream.\n\n        `GET {{ api_url }}/v1/get_stream_id`\n      parameters:\n        - name: stream\n          in: query\n          description: |\n            The name of the stream to access.\n          schema:\n            type: string\n          example: Denmark\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      stream_id:\n                        type: integer\n                        description: |\n                          The ID of the given stream.\n                    example: {\"msg\": \"\", \"result\": \"success\", \"stream_id\": 15}\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid stream name 'nonexistent'\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the supplied stream does not exist:\n  /mark_all_as_read:\n    post:\n      operationId: mark-all-as-read\n      summary: Mark all messages as read\n      tags: [\"messages\"]\n      description: |\n        Marks all of the current user's unread messages as read.\n\n        `POST {{ api_url }}/v1/mark_all_as_read`\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n  /mark_stream_as_read:\n    post:\n      operationId: mark-stream-as-read\n      summary: Mark messages in a stream as read\n      tags: [\"messages\"]\n      description: |\n        Mark all the unread messages in a stream as read.\n      parameters:\n        - name: stream_id\n          in: query\n          description: |\n            The ID of the stream to access.\n          schema:\n            type: integer\n          example: 43\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n  /mark_topic_as_read:\n    post:\n      operationId: mark-topic-as-read\n      summary: Mark messages in a topic as read\n      tags: [\"messages\"]\n      description: |\n        Mark all the unread messages in a topic as read.\n      parameters:\n        - name: stream_id\n          in: query\n          description: |\n            The ID of the stream to access.\n          schema:\n            type: integer\n          example: 43\n          required: true\n        - name: topic_name\n          in: query\n          description: |\n            The name of the topic whose messages should be marked as read.\n          schema:\n            type: string\n          example: new coffee machine\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n  /attachments:\n    get:\n      operationId: get-attachments\n      summary: Get attachments\n      tags: [\"users\"]\n      description: |\n        Fetch metadata on files uploaded by the requesting user.\n\n        `GET {{ api_url }}/v1/attachments`\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      attachments:\n                        type: array\n                        description: |\n                          A list of `attachment` objects, each containing\n                          details about a file uploaded by the user.\n                        items:\n                          $ref: \"#/components/schemas/Attachments\"\n                      upload_space_used:\n                        type: integer\n                        description: |\n                          The total size of all files uploaded by in the organization,\n                          in bytes.\n                    example:\n                      {\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"attachments\":\n                          [\n                            {\n                              \"id\": 1,\n                              \"name\": \"166050.jpg\",\n                              \"path_id\": \"2/ce/DfOkzwdg_IwlrN3myw3KGtiJ/166050.jpg\",\n                              \"size\": 571946,\n                              \"create_time\": 1588145417000,\n                              \"messages\":\n                                [\n                                  {\"id\": 102, \"date_sent\": 1588145424000},\n                                  {\"id\": 103, \"date_sent\": 1588145448000},\n                                ],\n                            },\n                          ],\n                        \"upload_space_used\": 571946,\n                      }\n  /attachments/{attachment_id}:\n    delete:\n      operationId: remove-attachment\n      summary: Delete an attachment\n      tags: [\"users\"]\n      description: |\n        Delete an uploaded file given its attachment ID.\n\n        Note that uploaded files that have been referenced in at least\n        one message are automatically deleted once the last message\n        containing a link to them is deleted (whether directly or via\n        a [message retention policy](/help/message-retention-policy)).\n\n        Uploaded files that are never used in a message are\n        automatically deleted a few weeks after being uploaded.\n\n        Attachment IDs can be contained from [GET /attachments](/api/get-attachments).\n      parameters:\n        - name: attachment_id\n          in: path\n          description: |\n            The ID of the attachment to be deleted.\n          schema:\n            type: string\n          example: \"1\"\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"Invalid attachment\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          A typical failed JSON response for when the `attachment_id` is invalid\n        \"401\":\n          description: Error.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"result\": \"error\",\n                        \"msg\": \"Not logged in: API authentication or user session required\",\n                      }\n                    description: |\n                      A typical failed JSON response for when the user is not logged in\n  /drafts:\n    get:\n      operationId: get-drafts\n      tags: [\"drafts\"]\n      summary: Get drafts\n      description: |\n        Fetch all drafts for the current user.\n\n        `GET {{ api_url }}/v1/drafts`\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      count:\n                        type: integer\n                        description: |\n                          The number of drafts the user currently has. Also the\n                          number of drafts returned under \"drafts\".\n                        example: 3\n                      drafts:\n                        type: array\n                        description: |\n                          Returns all of the current user's drafts, in order of last edit time\n                          (with the most recently edited draft appearing first).\n                        items:\n                          $ref: \"#/components/schemas/Draft\"\n                    example:\n                      {\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"count\": 3,\n                        \"drafts\":\n                          [\n                            {\n                              \"id\": 1,\n                              \"type\": \"stream\",\n                              \"to\": [3],\n                              \"topic\": \"sync drafts\",\n                              \"content\": \"Let's add backend support for syncing drafts.\",\n                              \"timestamp\": 1595479019.43915,\n                            },\n                            {\n                              \"id\": 2,\n                              \"type\": \"private\",\n                              \"to\": [4],\n                              \"topic\": \"\",\n                              \"content\": \"What if we made it possible to sync drafts in Zulip?\",\n                              \"timestamp\": 1595479020.43916,\n                            },\n                            {\n                              \"id\": 3,\n                              \"type\": \"private\",\n                              \"to\": [4, 10],\n                              \"topic\": \"\",\n                              \"content\": \"What if we made it possible to sync drafts in Zulip?\",\n                              \"timestamp\": 1595479021.43916,\n                            },\n                          ],\n                      }\n    post:\n      operationId: create-drafts\n      tags: [\"drafts\"]\n      summary: Create drafts\n      description: |\n        Create one or more drafts on the server. These drafts will be automatically\n        synchronized to other clients via `drafts` events.\n\n        `POST {{ api_url }}/v1/drafts`\n      parameters:\n        - name: drafts\n          in: query\n          description: |\n            A JSON-encoded list of containing new draft objects.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Draft\"\n              example:\n                [\n                  {\n                    \"type\": \"stream\",\n                    \"to\": [1],\n                    \"topic\": \"questions\",\n                    \"content\": \"What are the contribution guidelines for this project?\",\n                    \"timestamp\": 1595479019,\n                  },\n                ]\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - additionalProperties: false\n                    description: |\n                      When all of the drafts in the request are valid, this endpoint will return\n                      an array of the IDs for the drafts that were just created in the same\n                      order as they were requested. If any of the drafts failed the validation\n                      step, then none of the drafts will be created and we would not get this\n                      status code. The typical JSON response in such a case is:\n                    properties:\n                      result: {}\n                      msg: {}\n                      ids:\n                        type: array\n                        description: |\n                          An array of the IDs for the drafts that were just created in the same\n                          order as they were submitted.\n                        items:\n                          type: integer\n                    example: {\"result\": \"success\", \"msg\": \"\", \"ids\": [1, 2, 3]}\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - description: |\n                      JSON response for when a draft targeted towards a stream does not specify\n                      exactly one stream ID:\n                    example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Must specify exactly 1 stream ID for stream messages\",\n                        \"result\": \"error\",\n                      }\n  /drafts/{draft_id}:\n    patch:\n      operationId: edit-draft\n      tags: [\"drafts\"]\n      summary: Edit a draft\n      description: |\n        Edit a draft on the server. The edit will be automatically\n        synchronized to other clients via `drafts` events.\n\n        `PATCH {{ api_url }}/v1/drafts/{draft_id}`\n      parameters:\n        - name: draft_id\n          in: path\n          schema:\n            type: integer\n          description: |\n            The ID of the draft to be edited.\n          required: True\n          example: 2\n        - name: draft\n          in: query\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Draft\"\n              example:\n                {\n                  \"type\": \"stream\",\n                  \"to\": [1],\n                  \"topic\": \"questions\",\n                  \"content\": \"how tough is a Lamy Safari?\",\n                  \"timestamp\": 1595479019,\n                }\n          description: |\n            A JSON-encoded object containing a replacement draft object for this ID.\n          required: True\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"404\":\n          description: Not Found.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - description: |\n                      JSON response for when no draft exists with the provided ID.\n                    example: {\"result\": \"error\", \"msg\": \"Draft does not exist\"}\n    delete:\n      operationId: delete-draft\n      tags: [\"drafts\"]\n      summary: Delete a draft\n      description: |\n        Delete a single draft from the server. The deletion will be automatically\n        synchronized to other clients via a `drafts` event.\n\n        `DELETE {{ api_url }}/v1/drafts/{draft_id}`\n      parameters:\n        - name: draft_id\n          in: path\n          schema:\n            type: integer\n          description: |\n            The ID of the draft you want to delete.\n          required: True\n          example: 1\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"404\":\n          description: Not Found.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - description: |\n                      JSON response for when no draft exists with the provided ID.\n                    example: {\"result\": \"error\", \"msg\": \"Draft does not exist\"}\n  /messages:\n    get:\n      operationId: get-messages\n      summary: Get messages\n      tags: [\"messages\"]\n      description: |\n        Fetch message history from a Zulip server.\n\n        `GET {{ api_url }}/v1/messages`\n\n        This `GET /api/v1/messages` endpoint is the primary way to fetch\n        message history from a Zulip server. It is useful both for Zulip\n        clients (e.g. the web, desktop, mobile, and terminal clients) as well\n        as bots, API clients, backup scripts, etc.\n\n        By specifying a [narrow filter](/api/construct-narrow), you can use\n        this endpoint to fetch the messages matching any search query that is\n        supported by Zulip's powerful full-text search backend.\n\n        When a narrow is not specified, it can be used to fetch a user's\n        message history. (We recommend paginating to 1000 messages at a time.)\n\n        In either case, you specify an `anchor` message (or ask the server to\n        calculate the first unread message for you and use that as the\n        anchor), as well as a number of messages before and after the anchor\n        message. The server returns those messages, sorted by message ID, as\n        well as some metadata that makes it easy for a client to determine\n        whether there are more messages matching the query that were not\n        returned due to the `num_before` and `num_after` limits.\n\n        We recommend using `num_before \u003c= 1000` and `num_after \u003c= 1000` to\n        avoid generating very large HTTP responses. A maximum of 5000 messages\n        can be obtained per request; attempting to exceed this will result in an\n        error.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - client_gravatar\n                - apply_markdown\n                - use_first_unread_anchor\n      parameters:\n        - name: anchor\n          in: query\n          description: |\n            Integer message ID to anchor fetching of new messages. Supports special\n            string values for when the client wants the server to compute the anchor\n            to use:\n\n            - `newest`: The most recent message.\n            - `oldest`: The oldest message.\n            - `first_unread`: The oldest unread message matching the\n              query, if any; otherwise, the most recent message.\n\n            The special values of `'newest'` and `'oldest'` are also supported\n            for anchoring the query at the most recent or oldest messages.\n\n            **Changes**: String values are new in Zulip 3.0 (feature level 1). The\n            `first_unread` functionality was supported in Zulip 2.1.x\n            and older by not sending anchor and using use_first_unread_anchor.\n\n            In Zulip 2.1.x and older, `oldest` can be emulated with\n            `anchor=0`, and `newest` with `anchor=10000000000000000`\n            (that specific large value works around a bug in Zulip\n            2.1.x and older in the `found_newest` return value).\n          schema:\n            oneOf:\n              - type: string\n              - type: integer\n          example: 43\n        - name: num_before\n          in: query\n          description: |\n            The number of messages with IDs less than the anchor to retrieve.\n          schema:\n            type: integer\n            minimum: 0\n          example: 4\n          required: true\n        - name: num_after\n          in: query\n          description: |\n            The number of messages with IDs greater than the anchor to retrieve.\n          schema:\n            type: integer\n            minimum: 0\n          example: 8\n          required: true\n        - name: narrow\n          in: query\n          description: |\n            The narrow where you want to fetch the messages from. See how to\n            [construct a narrow](/api/construct-narrow).\n\n            **Changes**: In Zulip 2.1, added support for using user/stream IDs\n            when constructing narrows for a message's sender, its stream and/or\n            its recipient(s).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                default: []\n              example: [{\"operand\": \"Denmark\", \"operator\": \"stream\"}]\n        - $ref: \"#/components/parameters/ClientGravatar\"\n        - name: apply_markdown\n          in: query\n          description: |\n            If `true`, message content is returned in the rendered HTML\n            format. If `false`, message content is returned in the raw\n            Markdown-format text that user entered.\n          schema:\n            type: boolean\n            default: true\n          example: false\n        - name: use_first_unread_anchor\n          in: query\n          deprecated: true\n          description: |\n            Legacy way to specify `anchor=\"first_unread\"` in Zulip 2.1.x and older.\n\n            Whether to use the (computed by the server) first unread message\n            matching the narrow as the `anchor`. Mutually exclusive with `anchor`.\n\n            **Changes**: Deprecated in Zulip 3.0, replaced by\n            `anchor=\"first_unread\"` instead.\n          schema:\n            type: boolean\n            default: false\n          example: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - additionalProperties: false\n                    description: |\n                      When a request is successful, this endpoint returns a dictionary\n                      containing the following (in addition to the `msg` and `result` keys\n                      present in all Zulip API responses).\n                      A typical successful JSON response may look like:\n                    properties:\n                      result: {}\n                      msg: {}\n                      anchor:\n                        type: integer\n                        description: |\n                          The same `anchor` specified in the request (or the computed one, if\n                          `use_first_unread_anchor` is `true`).\n                      found_newest:\n                        type: boolean\n                        description: |\n                          Whether the `messages` list includes the very newest messages matching\n                          the narrow (used by clients that paginate their requests to decide\n                          whether there are more messages to fetch).\n                      found_oldest:\n                        type: boolean\n                        description: |\n                          Whether the `messages` list includes the very oldest messages matching\n                          the narrow (used by clients that paginate their requests to decide\n                          whether there are more messages to fetch).\n                      found_anchor:\n                        type: boolean\n                        description: |\n                          Whether the anchor message is included in the\n                          response. If the message with the ID specified\n                          in the request does not exist or did not match\n                          the narrow, this will be false.\n                      history_limited:\n                        type: boolean\n                        description: |\n                          Whether the message history was limited due to\n                          plan restrictions. This flag is set to `true`\n                          only when the oldest messages(`found_oldest`)\n                          matching the narrow is fetched.\n                      messages:\n                        type: array\n                        description: |\n                          An array of `message` objects, each containing the following\n                          fields:\n                        items:\n                          allOf:\n                            - $ref: \"#/components/schemas/MessagesBase\"\n                            - additionalProperties: false\n                              properties:\n                                avatar_url:\n                                  nullable: true\n                                client: {}\n                                content: {}\n                                content_type: {}\n                                display_recipient: {}\n                                edit_history: {}\n                                id: {}\n                                is_me_message: {}\n                                last_edit_timestamp: {}\n                                reactions: {}\n                                recipient_id: {}\n                                sender_email: {}\n                                sender_full_name: {}\n                                sender_id: {}\n                                sender_realm_str: {}\n                                stream_id: {}\n                                subject: {}\n                                submessages: {}\n                                timestamp: {}\n                                topic_links: {}\n                                type: {}\n                                flags:\n                                  type: array\n                                  description: |\n                                    The user's [message flags][message-flags] for the message.\n\n                                    [message-flags]: /api/update-message-flags#available-flags\n                                  items:\n                                    type: string\n                                match_content:\n                                  type: string\n                                  description: |\n                                    Only present if keyword search was included among the narrow parameters.\n\n                                    HTML content of a queried message that matches the narrow, with\n                                    `\u003cspan class=\"highlight\"\u003e` elements wrapping the matches for the\n                                    search keywords.\n                                match_subject:\n                                  type: string\n                                  description: |\n                                    Only present if keyword search was included among the narrow parameters.\n\n                                    HTML-escaped topic of a queried message that matches the narrow, with\n                                    `\u003cspan class=\"highlight\"\u003e` elements wrapping the matches for the\n                                    search keywords.\n                    example:\n                      {\n                        \"anchor\": 21,\n                        \"found_newest\": true,\n                        \"found_anchor\": true,\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"messages\":\n                          [\n                            {\n                              \"subject\": \"\",\n                              \"sender_realm_str\": \"zulip\",\n                              \"type\": \"private\",\n                              \"content\": \"\u003cp\u003eSecurity experts agree that relational algorithms are an interesting new topic in the field of networking, and scholars concur.\u003c/p\u003e\",\n                              \"flags\": [\"read\"],\n                              \"id\": 16,\n                              \"display_recipient\":\n                                [\n                                  {\n                                    \"id\": 4,\n                                    \"is_mirror_dummy\": false,\n                                    \"email\": \"hamlet@zulip.com\",\n                                    \"full_name\": \"King Hamlet\",\n                                  },\n                                  {\n                                    \"id\": 5,\n                                    \"is_mirror_dummy\": false,\n                                    \"email\": \"iago@zulip.com\",\n                                    \"full_name\": \"Iago\",\n                                  },\n                                  {\n                                    \"id\": 8,\n                                    \"is_mirror_dummy\": false,\n                                    \"email\": \"prospero@zulip.com\",\n                                    \"full_name\": \"Prospero from The Tempest\",\n                                  },\n                                ],\n                              \"content_type\": \"text/html\",\n                              \"is_me_message\": false,\n                              \"timestamp\": 1527921326,\n                              \"sender_id\": 4,\n                              \"sender_full_name\": \"King Hamlet\",\n                              \"recipient_id\": 27,\n                              \"topic_links\": [],\n                              \"client\": \"populate_db\",\n                              \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=1\",\n                              \"submessages\": [],\n                              \"sender_email\": \"hamlet@zulip.com\",\n                              \"reactions\": [],\n                            },\n                            {\n                              \"subject\": \"Verona3\",\n                              \"stream_id\": 5,\n                              \"sender_realm_str\": \"zulip\",\n                              \"type\": \"stream\",\n                              \"content\": \"\u003cp\u003eWait, is this from the frontend js code or backend python code\u003c/p\u003e\",\n                              \"flags\": [\"read\"],\n                              \"id\": 21,\n                              \"display_recipient\": \"Verona\",\n                              \"content_type\": \"text/html\",\n                              \"is_me_message\": false,\n                              \"timestamp\": 1527939746,\n                              \"sender_id\": 4,\n                              \"sender_full_name\": \"King Hamlet\",\n                              \"recipient_id\": 20,\n                              \"topic_links\": [],\n                              \"client\": \"populate_db\",\n                              \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=1\",\n                              \"submessages\": [],\n                              \"sender_email\": \"hamlet@zulip.com\",\n                              \"reactions\": [],\n                            },\n                          ],\n                      }\n    post:\n      operationId: send-message\n      summary: Send a message\n      tags: [\"messages\"]\n      description: |\n        Send a stream or a private message.\n\n        `POST {{ api_url }}/v1/messages`\n      parameters:\n        - name: type\n          in: query\n          description: |\n            The type of message to be sent. `private` for a private message and\n            `stream` for a stream message.\n          schema:\n            type: string\n            enum:\n              - private\n              - stream\n          example: private\n          required: true\n        - name: to\n          in: query\n          description: |\n            For stream messages, either the name or integer ID of the stream. For\n            private messages, either a list containing integer user IDs or a list\n            containing string email addresses.\n\n            **Changes**: Support for using user/stream IDs was added in Zulip 2.0.0.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [9, 10]\n          required: true\n        - $ref: \"#/components/parameters/RequiredContent\"\n        - name: topic\n          in: query\n          description: |\n            The topic of the message. Only required for stream messages\n            (`type=\"stream\"`), ignored otherwise.\n\n            Maximum length of 60 characters.\n\n            **Changes**: New in Zulip 2.0. Previous Zulip releases encoded\n            this as `subject`, which is currently a deprecated alias.\n          schema:\n            type: string\n          example: Castle\n        - name: queue_id\n          in: query\n          schema:\n            type: string\n          description: |\n            For clients supporting\n            [local echo](https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html#local-echo),\n            the [event queue](/api/register-queue)\n            ID for the client. If passed, `local_id` is required. If the message is\n            successfully sent, the server will include `local_id` in the `message` event\n            that the client with this `queue_id` will receive notifying it of the new message\n            via [`GET /events`](/api/get-events). This lets the client know unambiguously\n            that it should replace the locally echoed message, rather than adding this new\n            message (which would be correct if the user had sent the new message from another\n            device).\n          example: \"1593114627:0\"\n        - name: local_id\n          in: query\n          schema:\n            type: string\n          description: |\n            For clients supporting local echo, a unique string-format identifier\n            chosen freely by the client; the server will pass it back to the client without\n            inspecting it, as described in the `queue_id` description.\n          example: \"100.01\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      id:\n                        type: integer\n                        description: |\n                          The unique ID assigned to the sent message.\n                      deliver_at:\n                        type: string\n                        description: |\n                          Present for scheduled messages, encodes the time when the message will\n                          be sent. Note that scheduled messages (\"Send later\") is a beta API and\n                          may change before it's a finished feature.\n                        example: \"2020-06-24 11:19:54.337533+00:00\"\n                    example: {\"msg\": \"\", \"id\": 42, \"result\": \"success\"}\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/NonExistingStreamError\"\n                      - description: |\n                          A typical failed JSON response for when a stream message is sent to a stream\n                          that does not exist:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"code\": \"BAD_REQUEST\",\n                            \"msg\": \"Invalid email 'eeshan@zulip.com'\",\n                            \"result\": \"error\",\n                          }\n                        description: |\n                          A typical failed JSON response for when a private message is sent to a user\n                          that does not exist:\n  /messages/{message_id}/history:\n    get:\n      operationId: get-message-history\n      summary: Get a message's edit history\n      tags: [\"messages\"]\n      description: |\n        Fetch the message edit history of a previously edited message.\n\n        `GET {{ api_url }}/v1/messages/{message_id}/history`\n\n        Note that edit history may be disabled in some organizations; see the\n        [Zulip Help Center documentation on editing messages][edit-settings].\n\n        [edit-settings]: /help/view-a-messages-edit-history\n      parameters:\n        - $ref: \"#/components/parameters/MessageId\"\n      x-response-description: |\n        Please note that the original message's snapshot only contains the fields\n        `topic`, `content`, `rendered_content`, `timestamp` and `user_id`. This\n        snapshot will be the only one present if the message has never been edited.\n\n        Also note that each snapshot object will only contain additional data for the\n        modified fields for that particular edit (e.g. if only the topic or stream\n        was edited, `prev_content`, `prev_rendered_content`, and\n        `content_html_diff` will not appear).\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      message_history:\n                        type: array\n                        items:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            topic:\n                              type: string\n                              description: |\n                                The topic of the message immediately\n                                after this edit event.\n                            prev_topic:\n                              type: string\n                              description: |\n                                Only present if message's topic was edited.\n\n                                The topic of the message immediately\n                                prior to this edit event.\n                            stream:\n                              type: integer\n                              description: |\n                                Only present if message's stream was edited.\n\n                                The ID of the stream containing the message\n                                immediately after this edit event.\n\n                                **Changes**: New in Zulip 5.0 (feature level 118).\n                            prev_stream:\n                              type: integer\n                              description: |\n                                Only present if message's stream was edited.\n\n                                The ID of the stream containing the message immediately\n                                prior to this edit event.\n                            content:\n                              type: string\n                              description: |\n                                The raw Markdown content of the message\n                                immediately after this edit event.\n                            rendered_content:\n                              type: string\n                              description: |\n                                The rendered HTML representation of `content`.\n                            prev_content:\n                              type: string\n                              description: |\n                                Only present if message's content was edited.\n\n                                The raw Markdown content of the message immediately\n                                prior to this edit event.\n                            prev_rendered_content:\n                              type: string\n                              description: |\n                                Only present if message's content was edited.\n\n                                The rendered HTML representation of `prev_content`.\n                            user_id:\n                              type: integer\n                              nullable: true\n                              description: |\n                                The ID of the user that made the edit.\n\n                                Will be null only for edit history\n                                events predating March 2017.\n\n                                Clients can display edit history events where this\n                                is null as modified by either the sender (for content\n                                edits) or an unknown user (for topic edits).\n                            content_html_diff:\n                              type: string\n                              description: |\n                                Only present if message's content was edited.\n\n                                An HTML diff between this version of the message\n                                and the previous one.\n                            timestamp:\n                              type: integer\n                              description: |\n                                The UNIX timestamp for this edit.\n                        description: |\n                          A chronologically sorted, oldest to newest, array\n                          of `snapshot` objects, each one with the values of\n                          the message after the edit.\n                    example:\n                      {\n                        \"message_history\":\n                          [\n                            {\n                              \"content\": \"Hello!\",\n                              \"topic\": \"party at my houz\",\n                              \"rendered_content\": \"\u003cp\u003eHello!\u003c/p\u003e\",\n                              \"timestamp\": 1530129122,\n                              \"user_id\": 5,\n                            },\n                            {\n                              \"topic\": \"party at my house\",\n                              \"content\": \"Howdy!\",\n                              \"prev_content\": \"Hello!\",\n                              \"rendered_content\": \"\u003cp\u003eHowdy!\u003c/p\u003e\",\n                              \"user_id\": 5,\n                              \"prev_rendered_content\": \"\u003cp\u003eHello!\u003c/p\u003e\",\n                              \"content_html_diff\": '\u003cdiv\u003e\u003cp\u003e\u003cspan class=\"highlight_text_inserted\"\u003eHowdy!\u003c/span\u003e\u003c/p\u003e \u003cp\u003e\u003cspan class=\"highlight_text_deleted\"\u003eHello!\u003c/span\u003e\u003c/p\u003e\u003c/div\u003e',\n                              \"prev_topic\": \"party at my houz\",\n                              \"timestamp\": 1530129134,\n                            },\n                          ],\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/InvalidMessageError\"\n                  - description: |\n                      An example JSON response for when the specified message does not exist:\n  /messages/flags:\n    post:\n      operationId: update-message-flags\n      summary: Update personal message flags\n      tags: [\"messages\"]\n      description: |\n        Add or remove personal message flags like `read` and `starred`\n        on a collection of message IDs.\n\n        `POST {{ api_url }}/v1/messages/flags`\n\n        For updating the `read` flag on common collections of messages, see also\n        the\n        [special endpoints for marking message as read in bulk](/api/mark-all-as-read).\n      x-parameter-description: |\n        ## Available flags\n        \u003cdiv\u003e\n            \u003ctable\u003e\n                \u003cthead\u003e\n                    \u003ctr\u003e\n                        \u003cth style=\"width:30%\"\u003eFlag\u003c/th\u003e\n                        \u003cth style=\"width:70%\"\u003ePurpose\u003c/th\u003e\n                    \u003c/tr\u003e\n                \u003c/thead\u003e\n                \u003ctbody\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003eread\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003e\n                            Whether the user has read the message.  Messages\n                            start out unread (except for messages the user\n                            themself sent using a non-API client) and can\n                            later be marked as read.\n                        \u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003estarred\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003eWhether the user has \u003ca href=\"/help/star-a-message\"\u003estarred this message\u003c/a\u003e.\u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003ecollapsed\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003eWhether the user has \u003ca href=\"/help/collapse-a-message\"\u003ecollapsed this message\u003c/a\u003e.\u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003ementioned\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003e\n                            Whether the current user\n                            \u003ca href=\"/help/mention-a-user-or-group\"\u003ewas mentioned\u003c/a\u003e\n                            by this message, either directly or via a user\n                            group. Cannot be changed by the user directly, but\n                            can change if the message is edited to add/remove\n                            a mention of the current user.\n                        \u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003ewildcard_mentioned\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003e\n                            Whether this message contained\n                            \u003ca href=\"/help/mention-a-user-or-group#mention-everyone-on-a-stream\"\u003ewildcard mention\u003c/a\u003e\n                            like @**all**. Cannot be changed by the user directly, but\n                            can change if the message is edited to add/remove\n                            a wildcard mention.\n                        \u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003ehas_alert_word\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003e\n                            Whether the message contains any of the current user's\n                            \u003ca href=\"/help/pm-mention-alert-notifications#alert-words\"\u003econfigured alert words\u003c/a\u003e.\n                            Cannot be changed by the user directly, but\n                            can change if the message is edited to add/remove\n                            one of the current user's alert words.\n                        \u003c/td\u003e\n                    \u003c/tr\u003e\n                    \u003ctr\u003e\n                        \u003ctd\u003e\u003ccode\u003ehistorical\u003c/code\u003e\u003c/td\u003e\n                        \u003ctd\u003e\n                            True for messages that the user did not receive\n                            at the time they were sent but later was added to\n                            the user's history (E.g. because they starred or\n                            reacted to a message sent to a public stream\n                            before they subscribed to that stream). Cannot be\n                            changed by the user directly.\n                        \u003c/td\u003e\n                    \u003c/tr\u003e\n                \u003c/tbody\u003e\n            \u003c/table\u003e\n        \u003c/div\u003e\n      parameters:\n        - name: messages\n          in: query\n          description: |\n            An array containing the IDs of the target messages.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [4, 8, 15]\n          required: true\n        - name: op\n          in: query\n          description: |\n            Whether to `add` the flag or `remove` it.\n          schema:\n            type: string\n            enum:\n              - add\n              - remove\n          example: add\n          required: true\n        - name: flag\n          in: query\n          description: |\n            The flag that should be added/removed.\n          schema:\n            type: string\n          example: read\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      messages:\n                        type: array\n                        items:\n                          type: integer\n                        description: |\n                          An array with the IDs of the modified messages.\n                    example:\n                      {\"msg\": \"\", \"messages\": [4, 18, 15], \"result\": \"success\"}\n  /messages/render:\n    post:\n      operationId: render-message\n      summary: Render message\n      tags: [\"messages\"]\n      description: |\n        Render a message to HTML.\n\n        `POST {{ api_url }}/v1/messages/render`\n      parameters:\n        - $ref: \"#/components/parameters/RequiredContent\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      rendered:\n                        type: string\n                        description: |\n                          The rendered HTML.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"rendered\": \"\u003cp\u003e\u003cstrong\u003efoo\u003c/strong\u003e\u003c/p\u003e\",\n                        \"result\": \"success\",\n                      }\n  /messages/{message_id}/reactions:\n    post:\n      operationId: add-reaction\n      summary: Add an emoji reaction\n      tags: [\"messages\"]\n      description: |\n        Add an [emoji reaction](/help/emoji-reactions) to a message.\n\n        `POST {{ api_url }}/v1/messages/{message_id}/reactions`\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - emoji_code\n                - reaction_type\n      parameters:\n        - $ref: \"#/components/parameters/MessageId\"\n        - name: emoji_name\n          in: query\n          description: |\n            The target emoji's human-readable name.\n\n            To find an emoji's name, hover over a message to reveal\n            three icons on the right, then click the smiley face icon.\n            Images of available reaction emojis appear. Hover over the\n            emoji you want, and note that emoji's text name.\n          schema:\n            type: string\n          example: \"octopus\"\n          required: true\n        - $ref: \"#/components/parameters/EmojiCode\"\n        - $ref: \"#/components/parameters/ReactionType\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - example:\n                      {\n                        \"result\": \"error\",\n                        \"msg\": \"Invalid emoji code\",\n                        \"code\": \"BAD_REQUEST\",\n                      }\n                    description: |\n                      An example JSON error response for when the emoji code is invalid:\n\n    delete:\n      operationId: remove-reaction\n      summary: Remove an emoji reaction\n      tags: [\"messages\"]\n      description: |\n        Remove an [emoji reaction](/help/emoji-reactions) from a message.\n\n        `DELETE {{ api_url }}/v1/messages/{message_id}/reactions`\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - emoji_code\n                - reaction_type\n      parameters:\n        - $ref: \"#/components/parameters/MessageId\"\n        - name: emoji_name\n          in: query\n          description: |\n            The target emoji's human-readable name.\n\n            To find an emoji's name, hover over a message to reveal\n            three icons on the right, then click the smiley face icon.\n            Images of available reaction emojis appear. Hover over the\n            emoji you want, and note that emoji's text name.\n          schema:\n            type: string\n          example: \"octopus\"\n          required: false\n        - $ref: \"#/components/parameters/EmojiCode\"\n        - $ref: \"#/components/parameters/ReactionType\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - example:\n                      {\n                        \"result\": \"error\",\n                        \"msg\": \"Invalid message(s)\",\n                        \"code\": \"BAD_REQUEST\",\n                      }\n                    description: |\n                      An example JSON error response for when the emoji code is invalid:\n  /messages/matches_narrow:\n    get:\n      operationId: check-messages-match-narrow\n      summary: Check if messages match a narrow\n      tags: [\"messages\"]\n      description: |\n        Check whether a set of messages match a [narrow](/api/construct-narrow).\n\n        `GET {{ api_url }}/v1/messages/matches_narrow`\n\n        For many common narrows (E.g. a topic), clients can write an\n        efficient client-side check to determine whether a\n        newly arrived message belongs in the view.\n\n        This endpoint is designed to allow clients to handle more complex narrows\n        for which the client does not (or in the case of full-text search,\n        cannot) implement this check.\n\n        The format of the `match_subject` and `match_content` objects is designed to match\n        those of `GET /messages`, so that a client can splice these fields into a\n        `message` object received from `GET /events` and end up with an extended message\n        object identical to how a `GET /messages` for the current narrow would have\n        returned the message.\n      parameters:\n        - name: msg_ids\n          in: query\n          description: List of IDs for the messages to check.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [31, 32]\n          required: true\n        - name: narrow\n          in: query\n          description:\n            A structure defining the narrow to check against. See how to\n            [construct a narrow](/api/construct-narrow).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n              example: [{\"operator\": \"has\", \"operand\": \"link\"}]\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      messages:\n                        type: object\n                        description: |\n                          A dictionary with a key for each queried message that matches the narrow,\n                          with message IDs as keys and search rendering data as values.\n                        additionalProperties:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            match_content:\n                              type: string\n                              description: |\n                                HTML content of a queried message that matches the narrow. If the\n                                narrow is a search narrow, `\u003cspan class=\"highlight\"\u003e` elements\n                                will be included, wrapping the matches for the search keywords.\n                            match_subject:\n                              type: string\n                              description: |\n                                HTML-escaped topic of a queried message that matches the narrow. If the\n                                narrow is a search narrow, `\u003cspan class=\"highlight\"\u003e` elements\n                                will be included wrapping the matches for the search keywords.\n                          description: |\n                            `message_id`: The ID of the message that matches the narrow. No record will be returned\n                            for queried messages that do not match the narrow.\n                    example:\n                      {\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"messages\":\n                          {\n                            \"31\":\n                              {\n                                \"match_content\": '\u003cp\u003e\u003ca href=\"http://foo.com\" target=\"_blank\" title=\"http://foo.com\"\u003ehttp://foo.com\u003c/a\u003e\u003c/p\u003e',\n                                \"match_subject\": \"test_topic\",\n                              },\n                          },\n                      }\n  /messages/{message_id}:\n    get:\n      operationId: get-message\n      summary: Fetch a single message.\n      tags: [\"messages\"]\n      description: |\n        Given a message ID, return the message object.\n\n        `GET {{ api_url }}/v1/messages/{msg_id}`\n\n        Additionally, a `raw_content` field is included. This field is\n        useful for clients that primarily work with HTML-rendered\n        messages but might need to occasionally fetch the message's\n        raw Markdown (e.g. for [view\n        source](/help/view-the-markdown-source-of-a-message) or\n        prefilling a message edit textarea).\n\n        **Changes**: Before Zulip 5.0 (feature level 120), this\n        endpoint only returned the `raw_content` field.\n      parameters:\n        - $ref: \"#/components/parameters/MessageId\"\n        - name: apply_markdown\n          in: query\n          description: |\n            If `true`, message content is returned in the rendered HTML\n            format. If `false`, message content is returned in the raw\n            Markdown-format text that user entered.\n\n            **Changes**: New in Zulip 5.0 (feature level 120).\n          schema:\n            type: boolean\n            default: true\n          example: false\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      raw_content:\n                        type: string\n                        deprecated: true\n                        description: |\n                          The raw Markdown content of the message.\n\n                          **Deprecated** and to be removed once no longer required for\n                          legacy clients. Modern clients should prefer passing\n                          `apply_markdown=false` to request raw message content.\n                      message:\n                        description: |\n                          An object containing details of the message.\n\n                          **Changes**: New in Zulip 5.0 (feature level 120).\n                        allOf:\n                          - $ref: \"#/components/schemas/MessagesBase\"\n                          - additionalProperties: false\n                            properties:\n                              avatar_url:\n                                nullable: true\n                              client: {}\n                              content: {}\n                              content_type: {}\n                              display_recipient: {}\n                              edit_history: {}\n                              id: {}\n                              is_me_message: {}\n                              last_edit_timestamp: {}\n                              reactions: {}\n                              recipient_id: {}\n                              sender_email: {}\n                              sender_full_name: {}\n                              sender_id: {}\n                              sender_realm_str: {}\n                              stream_id: {}\n                              subject: {}\n                              submessages: {}\n                              timestamp: {}\n                              topic_links: {}\n                              type: {}\n                              flags:\n                                type: array\n                                description: |\n                                  The user's [message flags][message-flags] for the message.\n\n                                  [message-flags]: /api/update-message-flags#available-flags\n                                items:\n                                  type: string\n                    example:\n                      {\n                        \"raw_content\": \"**Don't** forget your towel!\",\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"message\":\n                          {\n                            \"subject\": \"\",\n                            \"sender_realm_str\": \"zulip\",\n                            \"type\": \"private\",\n                            \"content\": \"\u003cp\u003eSecurity experts agree that relational algorithms are an interesting new topic in the field of networking, and scholars concur.\u003c/p\u003e\",\n                            \"flags\": [\"read\"],\n                            \"id\": 16,\n                            \"display_recipient\":\n                              [\n                                {\n                                  \"id\": 4,\n                                  \"is_mirror_dummy\": false,\n                                  \"email\": \"hamlet@zulip.com\",\n                                  \"full_name\": \"King Hamlet\",\n                                },\n                                {\n                                  \"id\": 5,\n                                  \"is_mirror_dummy\": false,\n                                  \"email\": \"iago@zulip.com\",\n                                  \"full_name\": \"Iago\",\n                                },\n                                {\n                                  \"id\": 8,\n                                  \"is_mirror_dummy\": false,\n                                  \"email\": \"prospero@zulip.com\",\n                                  \"full_name\": \"Prospero from The Tempest\",\n                                },\n                              ],\n                            \"content_type\": \"text/html\",\n                            \"is_me_message\": false,\n                            \"timestamp\": 1527921326,\n                            \"sender_id\": 4,\n                            \"sender_full_name\": \"King Hamlet\",\n                            \"recipient_id\": 27,\n                            \"topic_links\": [],\n                            \"client\": \"populate_db\",\n                            \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=1\",\n                            \"submessages\": [],\n                            \"sender_email\": \"hamlet@zulip.com\",\n                            \"reactions\": [],\n                          },\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/InvalidMessageError\"\n                  - description: |\n                      An example JSON response for when the specified message does not exist or it\n                      is not visible to the user making the query (e.g. it was a PM between other\n                      two users):\n    patch:\n      operationId: update-message\n      summary: Edit a message\n      tags: [\"messages\"]\n      description: |\n        Edit/update the content or topic of a message.\n\n        `PATCH {{ api_url }}/v1/messages/{msg_id}`\n\n        `{msg_id}` in the above URL should be replaced with the ID of the\n        message you wish you update.\n\n        You can [resolve topics](/help/resolve-a-topic) by editing the\n        topic to `✔ {original_topic}`.\n\n        **Note**: See [configuring message\n        editing][config-message-editing] for detailed documentation on\n        when users are allowed to edit topics.\n\n        [config-message-editing]: /help/configure-message-editing-and-deletion\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - stream_id\n      parameters:\n        - $ref: \"#/components/parameters/MessageId\"\n        - name: topic\n          in: query\n          description: |\n            The topic to move the message(s) to, to request changing the topic.\n            Should only be sent when changing the topic, and will throw an error\n            if the target message is not a stream message.\n\n            Maximum length of 60 characters.\n\n            **Changes**: New in Zulip 2.0. Previous Zulip releases encoded\n            this as `subject`, which is currently a deprecated alias.\n          schema:\n            type: string\n          example: Castle\n        - name: propagate_mode\n          in: query\n          description: |\n            Which message(s) should be edited: just the one indicated in\n            `message_id`, messages in the same topic that had been sent after this\n            one, or all of them.\n\n            Only the default value of `change_one` is valid when\n            editing only the content of a message.\n\n            This parameter determines both which messages get moved and also whether\n            clients that are currently narrowed to the topic containing the message\n            should navigate or adjust their compose box recipient to point to the\n            post-edit stream/topic.\n          schema:\n            type: string\n            enum:\n              - change_one\n              - change_later\n              - change_all\n            default: change_one\n          example: change_all\n        - name: send_notification_to_old_thread\n          in: query\n          description: |\n            Whether to send breadcrumb message to the old thread to\n            notify users where the messages were moved to.\n\n            **Changes**: New in Zulip 3.0 (feature level 9).\n          schema:\n            type: boolean\n            default: true\n          example: true\n        - name: send_notification_to_new_thread\n          in: query\n          description: |\n            Whether to send a notification message to the new thread to\n            notify users where the messages came from.\n\n            **Changes**: New in Zulip 3.0 (feature level 9).\n          schema:\n            type: boolean\n            default: true\n          example: true\n        - $ref: \"#/components/parameters/OptionalContent\"\n        - name: stream_id\n          in: query\n          description: |\n            The stream ID to move the message(s) to, to request moving\n            messages to another stream.\n\n            Should only be sent when changing the stream, and will throw an error\n            if the target message is not a stream message.\n          schema:\n            type: integer\n          example: 43\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - properties:\n                      msg:\n                        enum:\n                          - Your organization has turned off message editing\n                          - You don't have permission to edit this message\n                          - The time limit for editing this message has past\n                          - Nothing to change\n                          - Topic can't be empty\n                    example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"You don't have permission to edit this message\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      A typical JSON response for when one doesn't have the permission to\n                      edit a particular message:\n    delete:\n      operationId: delete-message\n      summary: Delete a message\n      tags: [\"messages\"]\n      description: |\n        Permanently delete a message.\n\n        `DELETE {{ api_url }}/v1/messages/{msg_id}`\n\n        This API corresponds to the\n        [delete a message completely][delete-completely] feature documented in\n        the Zulip Help Center.\n\n        [delete-completely]: /help/edit-or-delete-a-message#delete-a-message-completely\n      x-requires-administrator: true\n      parameters:\n        - $ref: \"#/components/parameters/MessageId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/InvalidMessageError\"\n                      - description: |\n                          An example JSON response for when the specified message does not exist:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - description: |\n                          An example JSON response for when the user making the query does not\n                          have permission to delete the message:\n                        example:\n                          {\n                            \"code\": \"BAD_REQUEST\",\n                            \"msg\": \"You don't have permission to delete this message\",\n                            \"result\": \"error\",\n                          }\n  /user_uploads:\n    post:\n      operationId: upload-file\n      summary: Upload a file\n      tags: [\"messages\"]\n      description: |\n        Upload a single file and get the corresponding URI.\n\n        `POST {{ api_url }}/v1/user_uploads`\n\n        Initially, only you will be able to access the link. To share the\n        uploaded file, you'll need to [send a message][send-message]\n        containing the resulting link. Users who can already access the link\n        can reshare it with other users by sending additional Zulip messages\n        containing the link.\n\n        [uploaded-files]: /help/manage-your-uploaded-files\n        [send-message]: /api/send-message\n      x-parameter-description: |\n        As described above, the file to upload must be provided in the\n        request's body.\n\n        ## Maximum file size\n\n        The maximum file size for uploads can be configured by the\n        administrator of the Zulip server by setting `MAX_FILE_UPLOAD_SIZE`\n        in the [server's settings][1]. `MAX_FILE_UPLOAD_SIZE` defaults\n        to 25MB.\n\n        [1]: https://zulip.readthedocs.io/en/latest/subsystems/settings.html#server-settings\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filename:\n                  type: string\n                  format: binary\n                  example: /path/to/file\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      uri:\n                        type: string\n                        description: |\n                          The URI of the uploaded file.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"uri\": \"/user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt\",\n                      }\n  /user_uploads/{realm_id_str}/{filename}:\n    get:\n      operationId: get-file-temporary-url\n      summary: Get public temporary URL\n      tags: [\"messages\"]\n      description: |\n        Get a temporary URL for access to the file that doesn't require authentication.\n      parameters:\n        - name: realm_id_str\n          in: path\n          description: |\n            The realm id.\n          schema:\n            type: integer\n          example: 1\n          required: true\n        - name: filename\n          in: path\n          description: |\n            Path to the URL.\n          schema:\n            type: string\n          example: 4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      url:\n                        type: string\n                        description: |\n                          A temporary URL that can be used to access the uploaded file\n                          without Zulip's normal API authentication.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"url\": \"/user_uploads/temporary/322F32632F39765378464E4C63306D3961396F4970705A4D74424565432F7A756C69702E7478743A316A5053616A3A3938625F44393446466D37357254315F4F414C425A4553464F6A55\",\n                      }\n\n  /users:\n    get:\n      operationId: get-users\n      summary: Get all users\n      tags: [\"users\"]\n      description: |\n        Retrieve details on all users in the organization. Optionally\n        includes values of [custom profile field](/help/add-custom-profile-fields).\n\n        `GET {{ api_url }}/v1/users`\n\n        You can also [fetch details on a single user](/api/get-user).\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - \"\"\n          - type: exclude\n            parameters:\n              enum:\n                - \"\"\n            description: |\n              You may pass the `client_gravatar` query parameter as follows:\n      parameters:\n        - $ref: \"#/components/parameters/ClientGravatar\"\n        - $ref: \"#/components/parameters/IncludeCustomProfileFields\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      members:\n                        type: array\n                        description: |\n                          A list of `user` objects, each containing details about a user in the\n                          organization.\n                        items:\n                          $ref: \"#/components/schemas/User\"\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"members\":\n                          [\n                            {\n                              \"is_active\": true,\n                              \"email\": \"AARON@zulip.com\",\n                              \"is_admin\": false,\n                              \"is_owner\": false,\n                              \"is_billing_admin\": false,\n                              \"role\": 400,\n                              \"avatar_url\": \"https://secure.gravatar.com/avatar/818c212b9f8830dfef491b3f7da99a14?d=identicon\u0026version=1\",\n                              \"bot_type\": null,\n                              \"timezone\": \"\",\n                              \"is_bot\": false,\n                              \"user_id\": 7,\n                              \"profile_data\": {},\n                              \"is_guest\": false,\n                              \"date_joined\": \"2019-10-20T07:50:53.728864+00:00\",\n                              \"full_name\": \"aaron\",\n                            },\n                            {\n                              \"date_joined\": \"2019-10-20T07:50:53.729659+00:00\",\n                              \"full_name\": \"King Hamlet\",\n                              \"is_guest\": false,\n                              \"profile_data\":\n                                {\n                                  \"4\": {\"value\": \"vim\"},\n                                  \"2\":\n                                    {\n                                      \"value\": \"I am:\\n* The prince of Denmark\\n* Nephew to the usurping Claudius\",\n                                      \"rendered_value\": \"\u003cp\u003eI am:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eThe prince of Denmark\u003c/li\u003e\\n\u003cli\u003eNephew to the usurping Claudius\u003c/li\u003e\\n\u003c/ul\u003e\",\n                                    },\n                                  \"5\": {\"value\": \"1900-01-01\"},\n                                  \"7\": {\"value\": \"[11]\"},\n                                  \"6\": {\"value\": \"https://blog.zulig.org\"},\n                                  \"1\":\n                                    {\n                                      \"value\": \"+0-11-23-456-7890\",\n                                      \"rendered_value\": \"\u003cp\u003e+0-11-23-456-7890\u003c/p\u003e\",\n                                    },\n                                  \"8\": {\"value\": \"zulipbot\"},\n                                  \"3\":\n                                    {\n                                      \"rendered_value\": \"\u003cp\u003eDark chocolate\u003c/p\u003e\",\n                                      \"value\": \"Dark chocolate\",\n                                    },\n                                },\n                              \"user_id\": 10,\n                              \"is_bot\": false,\n                              \"bot_type\": null,\n                              \"timezone\": \"\",\n                              \"is_admin\": false,\n                              \"is_owner\": false,\n                              \"is_billing_admin\": false,\n                              \"role\": 400,\n                              \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=1\",\n                              \"is_active\": true,\n                              \"email\": \"hamlet@zulip.com\",\n                            },\n                            {\n                              \"bot_owner_id\": 11,\n                              \"is_guest\": false,\n                              \"date_joined\": \"2019-10-20T12:52:17.862053+00:00\",\n                              \"full_name\": \"Iago's Bot\",\n                              \"email\": \"iago-bot@zulipdev.com\",\n                              \"is_active\": true,\n                              \"avatar_url\": \"https://secure.gravatar.com/avatar/7328586831cdbb1627649bd857b1ee8c?d=identicon\u0026version=1\",\n                              \"is_admin\": false,\n                              \"is_owner\": false,\n                              \"is_billing_admin\": false,\n                              \"role\": 400,\n                              \"user_id\": 23,\n                              \"bot_type\": 1,\n                              \"timezone\": \"\",\n                              \"is_bot\": true,\n                            },\n                          ],\n                      }\n    post:\n      operationId: create-user\n      summary: Create a user\n      tags: [\"users\"]\n      description: |\n        {!can-create-users-only.md!}\n\n        Create a new user account via the API.\n\n        `POST {{ api_url }}/v1/users`\n      x-requires-administrator: true\n      parameters:\n        - name: email\n          in: query\n          description: |\n            The email address of the new user.\n          schema:\n            type: string\n          example: username@example.com\n          required: true\n        - name: password\n          in: query\n          description: |\n            The password of the new user.\n          schema:\n            type: string\n          example: abcd1234\n          required: true\n        - name: full_name\n          in: query\n          description: |\n            The full name of the new user.\n          schema:\n            type: string\n          example: New User\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      user_id:\n                        type: integer\n                        description: |\n                          The ID assigned to the newly created user.\n\n                          **Changes**: New in Zulip 4.0 (feature level 30).\n                    example: {\"msg\": \"\", \"result\": \"success\", \"user_id\": 25}\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"msg\": \"Email 'newbie@zulip.com' already in use\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      A typical JSON response for when another user with the same\n                      email address already exists in the realm:\n  /users/{user_id}/reactivate:\n    post:\n      operationId: reactivate-user\n      summary: Reactivate a user\n      tags: [\"users\"]\n      x-requires-administrator: true\n      description: |\n        [Reactivates a\n        user](https://zulip.com/help/deactivate-or-reactivate-a-user)\n        given their user ID.\n\n        `POST {{ api_url }}/v1/users/{user_id}/reactivate`\n      parameters:\n        - $ref: \"#/components/parameters/UserId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n\n  /users/{user_id_or_email}/presence:\n    get:\n      operationId: get-user-presence\n      summary: Get user presence\n      tags: [\"users\"]\n      description: |\n        Get the presence status for a specific user.\n\n        This endpoint is most useful for embedding data about a user's\n        presence status in other sites (E.g. an employee directory). Full\n        Zulip clients like mobile/desktop apps will want to use the main\n        presence endpoint, which returns data for all active users in the\n        organization, instead.\n\n        `GET {{ api_url }}/v1/users/{user_id_or_email}/presence`\n\n        See\n        [Zulip's developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/presence.html)\n        for details on the data model for presence in Zulip.\n      parameters:\n        - name: user_id_or_email\n          in: path\n          description: |\n            The user_id or Zulip display email address of the user whose presence you want to fetch.\n\n            **Changes**: New in Zulip 4.0 (feature level 43). Previous versions only supported\n            identifying the user by Zulip display email.\n          schema:\n            type: string\n          example: iago@zulip.com\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      presence:\n                        type: object\n                        description: |\n                          An object containing the presence details for every client the user has\n                          logged into.\n                        additionalProperties:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            timestamp:\n                              type: integer\n                              description: |\n                                when this update was received; if the timestamp\n                                is more than a few minutes in the past, the user is offline.\n                            status:\n                              type: string\n                              description: |\n                                either `active` or `idle`: whether the user had\n                                recently interacted with Zulip at the time in the timestamp\n                                (this distinguishes orange vs. green dots in the Zulip web\n                                UI; orange/idle means we don't know whether the user is\n                                actually at their computer or just left the Zulip app open\n                                on their desktop).\n                          description: |\n                            `{client_name}` or `aggregated`: the keys for these objects are\n                            the names of the different clients where this user is logged in,\n                            like `website`, `ZulipDesktop`, `ZulipTerminal`, or\n                            `ZulipMobile`. There is also an `aggregated` key, which matches\n                            the contents of the object that has been updated most\n                            recently. For most applications, you'll just want to look at the\n                            `aggregated` key.\n                    example:\n                      {\n                        \"presence\":\n                          {\n                            \"website\":\n                              {\"timestamp\": 1532697622, \"status\": \"active\"},\n                            \"ZulipMobile\":\n                              {\"timestamp\": 1522687421, \"status\": \"active\"},\n                            \"aggregated\":\n                              {\"timestamp\": 1532697622, \"status\": \"active\"},\n                          },\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                      }\n  /users/me:\n    get:\n      operationId: get-own-user\n      summary: Get own user\n      tags: [\"users\"]\n      description: |\n        Get basic data about the user/bot that requests this endpoint.\n\n        `GET {{ api_url }}/v1/users/me`\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      avatar_url:\n                        type: string\n                        description: |\n                          URL for the user's avatar.\n\n                          **Changes**: New in Zulip 2.1.0.\n                        example: \"x\"\n                      avatar_version:\n                        type: integer\n                        description: |\n                          Version for the user's avatar. Used for cache-busting requests\n                          for the user's avatar. Clients generally shouldn't need to use this;\n                          most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.\n\n                          **Changes**: New in Zulip 3.0 (feature level 10). Previous\n                          versions do not return this field.\n                        example: 1\n                      email:\n                        type: string\n                        description: |\n                          Email of the requesting user.\n                        example: \"iago@zulip.com\"\n                      full_name:\n                        type: string\n                        description: |\n                          Full name of the requesting user.\n                        example: \"Iago\"\n                      is_admin:\n                        type: boolean\n                        description: |\n                          A boolean indicating if the requesting user is an admin.\n                        example: true\n                      is_owner:\n                        type: boolean\n                        description: |\n                          A boolean indicating if the requesting user is\n                          an organization owner.\n\n                          **Changes**: New in Zulip 3.0 (feature level 8).\n                        example: false\n                      is_billing_admin:\n                        type: boolean\n                        description: |\n                          A boolean indicating if the requesting user is\n                          a billing administrator.\n\n                          **Changes**: New in Zulip 5.0 (feature level 73).\n                        example: false\n                      role:\n                        type: integer\n                        enum:\n                          - 100\n                          - 200\n                          - 300\n                          - 400\n                          - 600\n                        description: |\n                          [Organization-level role](/api/roles-and-permissions) of the user.\n                          Possible values are:\n\n                          - Organization owner =\u003e 100\n                          - Organization administrator =\u003e 200\n                          - Organization moderator =\u003e 300\n                          - Member =\u003e 400\n                          - Guest =\u003e 600\n\n                          **Changes**: New in Zulip 4.0 (feature level 59).\n                      is_guest:\n                        type: boolean\n                        description: |\n                          A boolean indicating if the requesting user is a guest.\n\n                          **Changes**: New in Zulip 3.0 (feature level 10). Previous\n                          versions do not return this field.\n                        example: false\n                      is_bot:\n                        type: boolean\n                        description: |\n                          A boolean indicating if the requesting user is a bot.\n                        example: false\n                      is_active:\n                        type: boolean\n                        description: |\n                          A boolean specifying whether the user account has been deactivated.\n\n                          **Changes**: New in Zulip 3.0 (feature level 10). Previous\n                          versions do not return this field.\n                        example: true\n                      timezone:\n                        type: string\n                        description: |\n                          The time zone of the user.\n\n                          **Changes**: New in Zulip 3.0 (feature level 10). Previous\n                          versions do not return this field.\n                        example: \"\"\n                      date_joined:\n                        type: string\n                        description: |\n                          The time the user account was created.\n\n                          **Changes**: New in Zulip 3.0 (feature level 10). Previous\n                          versions do not return this field.\n                        example: \"2019-10-20T07:50:53.728864+00:00\"\n                      max_message_id:\n                        type: integer\n                        deprecated: true\n                        description: |\n                          The integer ID of the last message received by your account.\n\n                          **Deprecated**. We plan to remove this in favor of recommending\n                          using `GET /messages` with `anchor=\"newest\"`.\n                        example: 30\n                      user_id:\n                        type: integer\n                        description: |\n                          The user's ID.\n                        example: 1\n                      delivery_email:\n                        type: string\n                        description: |\n                          The user's real email address. This field is present only if\n                          [email address visibility](/help/restrict-visibility-of-email-addresses) is\n                          limited and you are an administrator with access to real email addresses\n                          under the configured policy.\n                      profile_data:\n                        $ref: \"#/components/schemas/profile_data\"\n                    example:\n                      {\n                        \"avatar_url\": \"https://secure.gravatar.com/avatar/af4f06322c177ef4e1e9b2c424986b54?d=identicon\u0026version=1\",\n                        \"avatar_version\": 1,\n                        \"email\": \"iago@zulip.com\",\n                        \"full_name\": \"Iago\",\n                        \"is_admin\": true,\n                        \"is_owner\": false,\n                        \"role\": 200,\n                        \"is_guest\": false,\n                        \"is_billing_admin\": false,\n                        \"is_bot\": false,\n                        \"is_active\": true,\n                        \"timezone\": \"\",\n                        \"date_joined\": \"2019-10-20T07:50:53.728864+00:00\",\n                        \"max_message_id\": 30,\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"user_id\": 5,\n                        \"profile_data\":\n                          {\n                            \"5\": {\"value\": \"2000-01-01\"},\n                            \"4\": {\"value\": \"emacs\"},\n                            \"7\": {\"value\": \"[10]\"},\n                            \"1\":\n                              {\n                                \"value\": \"+1-234-567-8901\",\n                                \"rendered_value\": \"\u003cp\u003e+1-234-567-8901\u003c/p\u003e\",\n                              },\n                            \"2\":\n                              {\n                                \"rendered_value\": \"\u003cp\u003eBetrayer of Othello.\u003c/p\u003e\",\n                                \"value\": \"Betrayer of Othello.\",\n                              },\n                            \"8\": {\"value\": \"zulip\"},\n                            \"3\":\n                              {\n                                \"value\": \"Apples\",\n                                \"rendered_value\": \"\u003cp\u003eApples\u003c/p\u003e\",\n                              },\n                            \"6\":\n                              {\n                                \"value\": \"https://zulip.readthedocs.io/en/latest/\",\n                              },\n                          },\n                      }\n    delete:\n      operationId: deactivate-own-user\n      summary: Deactivate own user\n      tags: [\"users\"]\n      description: |\n        Deactivates the user's account. See also the administrative endpoint for\n        [deactivating another user](/api/deactivate-user).\n\n        `DELETE {{ api_url }}/v1/users/me`\n\n        This endpoint is primarily useful to Zulip clients providing a user settings UI.\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"msg\": \"Cannot deactivate the only organization owner\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON error response when attempting to deactivate the only\n                      organization owner in an organization:\n  /users/me/status:\n    post:\n      operationId: update-status\n      summary: Update your status\n      tags: [\"users\"]\n      description: |\n        Change your [status](/help/status-and-availability).\n\n        `POST {{ api_url }}/v1/users/me/status`\n\n        A request to this endpoint will only change the parameters passed.\n        For example, passing just `status_text` requests a change in the status\n        text, but will leave the status emoji unchanged.\n\n        Clients that wish to set the user's status to a specific value should\n        pass all supported parameters.\n\n        **Changes**: In Zulip 5.0 (feature level 86), added support for\n        `emoji_name`, `emoji_code`, and `reaction_type` parameters.\n      parameters:\n        - name: status_text\n          schema:\n            type: string\n          allowEmptyValue: true\n          in: query\n          description: |\n            The text content of the status message. Sending the empty string\n            will clear the user's status.\n\n            **Note**: The limit on the size of the message is 60 characters.\n          example: on vacation\n          required: false\n        - name: away\n          schema:\n            type: boolean\n          in: query\n          description: |\n            Whether the user should be marked as \"away\".\n          example: true\n          required: false\n        - name: emoji_name\n          schema:\n            type: string\n          allowEmptyValue: true\n          in: query\n          description: |\n            The name for the emoji to associate with this status.\n\n            **Changes**: New in Zulip 5.0 (feature level 86).\n          example: car\n          required: false\n        - name: emoji_code\n          schema:\n            type: string\n          in: query\n          description: |\n            A unique identifier, defining the specific emoji codepoint requested,\n            within the namespace of the `reaction_type`.\n\n            **Changes**: New in Zulip 5.0 (feature level 86).\n          example: 1f697\n          required: false\n        - name: reaction_type\n          schema:\n            type: string\n          in: query\n          description: |\n            A string indicating the type of emoji. Each emoji `reaction_type`\n            has an independent namespace for values of `emoji_code`.\n\n            Must be one of the following values:\n\n            - `unicode_emoji` : In this namespace, `emoji_code` will be a\n              dash-separated hex encoding of the sequence of Unicode codepoints\n              that define this emoji in the Unicode specification.\n\n            - `realm_emoji` : In this namespace, `emoji_code` will be the ID of\n              the uploaded [custom emoji](/help/custom-emoji).\n\n            - `zulip_extra_emoji` : These are special emoji included with Zulip.\n              In this namespace, `emoji_code` will be the name of the emoji (e.g.\n              \"zulip\").\n\n            **Changes**: New in Zulip 5.0 (feature level 86).\n          example: unicode_emoji\n          required: false\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"Client did not pass any new values.\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          An example JSON error response when no changes were requested:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"status_text is too long (limit: 60 characters)\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          An example JSON error response when the\n                          `status_text` message exceeds the limit of\n                          60 characters:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"Client must pass emoji_name if they pass either emoji_code or reaction_type.\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          An example JSON error response when `emoji_name` is not specified\n                          but `emoji_code` or `reaction_type` is specified:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"Emoji 'invalid' does not exist\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          An example JSON error response when the emoji name does not exist:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"Invalid emoji name.\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          An example JSON error response when the emoji name is invalid:\n                  - allOf:\n                      - $ref: \"#/components/schemas/CodedError\"\n                      - example:\n                          {\n                            \"result\": \"error\",\n                            \"msg\": \"Invalid custom emoji.\",\n                            \"code\": \"BAD_REQUEST\",\n                          }\n                        description: |\n                          An example JSON error response when the custom emoji is invalid:\n  /users/me/{stream_id}/topics:\n    get:\n      operationId: get-stream-topics\n      summary: Get topics in a stream\n      tags: [\"streams\"]\n      description: |\n        Get all the topics in a specific stream\n\n        `GET {{ api_url }}/v1/users/me/{stream_id}/topics`\n      parameters:\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      topics:\n                        type: array\n                        description: |\n                          An array of `topic` objects.\n                        items:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            max_id:\n                              description: |\n                                The message ID of the last message sent to this topic.\n                              type: integer\n                            name:\n                              description: |\n                                The name of the topic.\n                              type: string\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"topics\":\n                          [\n                            {\"max_id\": 26, \"name\": \"Denmark3\"},\n                            {\"max_id\": 23, \"name\": \"Denmark1\"},\n                            {\"max_id\": 6, \"name\": \"Denmark2\"},\n                          ],\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid stream ID\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the user is attempting to fetch the topics\n                      of a non-existing stream (or also a private stream they don't have access to):\n  /users/me/subscriptions:\n    get:\n      operationId: get-subscriptions\n      summary: Get subscribed streams\n      tags: [\"streams\"]\n      description: |\n        Get all streams that the user is subscribed to.\n\n        `GET {{ api_url }}/v1/users/me/subscriptions`\n      # operationId can be used to record which view function\n      # corresponds to an endpoint.  TODO: Add these for more\n      # endpoints, and perhaps use this to provide links to implementations.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - \"\"\n          - type: exclude\n            description: |\n              You may pass the `include_subscribers` query parameter as follows:\n            parameters:\n              enum:\n                - \"\"\n      parameters:\n        - $ref: \"#/components/parameters/IncludeSubscribers\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  # TODO: Is this the best way to declare required elements in 200 responses?\n                  - required:\n                      - subscriptions\n                    additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      subscriptions:\n                        type: array\n                        description: |\n                          A list of dictionaries where each dictionary contains\n                          information about one of the subscribed streams.\n                        items:\n                          $ref: \"#/components/schemas/Subscriptions\"\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"subscriptions\":\n                          [\n                            {\n                              \"audible_notifications\": true,\n                              \"color\": \"#e79ab5\",\n                              \"description\": \"A Scandinavian country\",\n                              \"desktop_notifications\": true,\n                              \"email_address\": \"Denmark+187b4125ed36d6af8b5d03ef4f65c0cf@zulipdev.com:9981\",\n                              \"is_muted\": false,\n                              \"invite_only\": false,\n                              \"name\": \"Denmark\",\n                              \"pin_to_top\": false,\n                              \"push_notifications\": false,\n                              \"role\": 20,\n                              \"stream_id\": 1,\n                              \"subscribers\": [7, 10, 11, 12, 14],\n                            },\n                            {\n                              \"audible_notifications\": true,\n                              \"color\": \"#e79ab5\",\n                              \"description\": \"Located in the United Kingdom\",\n                              \"desktop_notifications\": true,\n                              \"email_address\": \"Scotland+f5786390183e60a1ccb18374f9d05649@zulipdev.com:9981\",\n                              \"is_muted\": false,\n                              \"invite_only\": false,\n                              \"name\": \"Scotland\",\n                              \"pin_to_top\": false,\n                              \"push_notifications\": false,\n                              \"role\": 50,\n                              \"stream_id\": 3,\n                              \"subscribers\": [7, 11, 12, 14],\n                            },\n                          ],\n                      }\n    post:\n      operationId: subscribe\n      summary: Subscribe to a stream\n      tags: [\"streams\"]\n      description: |\n        Subscribe one or more users to one or more streams.\n\n        `POST {{ api_url }}/v1/users/me/subscriptions`\n\n        If any of the specified streams do not exist, they are automatically\n        created. The initial [stream settings](/api/update-stream) will be determined\n        by the optional parameters like `invite_only` detailed below.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - subscriptions\n          - type: include\n            description: |\n              To subscribe another user to a stream, you may pass in\n              the `principals` parameter, like so:\n            parameters:\n              enum:\n                - subscriptions\n                - principals\n      parameters:\n        - name: subscriptions\n          in: query\n          description: |\n            A list of dictionaries containing the key `name` and value\n            specifying the name of the stream to subscribe. If the stream does not\n            exist a new stream is created. The description of the stream created can\n            be specified by setting the dictionary key `description` with an\n            appropriate value.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: false\n                  properties:\n                    name:\n                      type: string\n                      description: |\n                        The name of the stream.\n                    description:\n                      type: string\n                      description: |\n                        The [description](/help/change-the-stream-description)\n                        to use for a new stream being created, in text/markdown format.\n                  required:\n                    - name\n                  example:\n                    no-description:\n                      value: {\"name\": \"Verona\"}\n                    with-description:\n                      value: {\"name\": \"Verona\", \"description\": \"Italian city\"}\n              example: [{\"name\": \"Verona\", \"description\": \"Italian city\"}]\n          required: true\n        - $ref: \"#/components/parameters/Principals\"\n        - name: authorization_errors_fatal\n          in: query\n          description: |\n            A boolean specifying whether authorization errors (such as when the\n            requesting user is not authorized to access a private stream) should be\n            considered fatal or not. When `True`, an authorization error is reported\n            as such. When set to `False`, the response will be a 200 and any streams\n            where the request encountered an authorization error will be listed\n            in the `unauthorized` key.\n          schema:\n            type: boolean\n            default: true\n          example: false\n        - name: announce\n          in: query\n          description: |\n            If one of the streams specified did not exist previously and is thus created\n            by this call, this determines whether [notification bot](/help/configure-notification-bot)\n            will send an announcement about the new stream's creation.\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - name: invite_only\n          in: query\n          description: |\n            As described above, this endpoint will create a new stream if passed\n            a stream name that doesn't already exist. This parameters and the ones\n            that follow are used to request an initial configuration of a created\n            stream; they are ignored for streams that already exist.\n\n            This parameter determines whether any newly created streams will be\n            private streams.\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - name: is_web_public\n          in: query\n          description: |\n            This parameter determines whether any newly created streams will be\n            web-public streams.\n\n            Note that creating web-public streams requires the\n            `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings]\n            to be enabled on the Zulip server in question, the organization\n            to have enabled the `enable_spectator_access` realm setting, and\n            the current use to have permission under the organization's\n            `create_web_public_stream_policy` realm setting.\n\n            [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html\n\n            **Changes**: New in Zulip 5.0 (feature level 98).\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - $ref: \"#/components/parameters/HistoryPublicToSubscribers\"\n        - $ref: \"#/components/parameters/StreamPostPolicy\"\n        - $ref: \"#/components/parameters/MessageRetentionDays\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/AddSubscriptionsResponse\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - example:\n                      {\n                        \"already_subscribed\":\n                          {\"newbie@zulip.com\": [\"new stream\"]},\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"subscribed\": {\"iago@zulip.com\": [\"new stream\"]},\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example:\n                          {\n                            \"msg\": \"Unable to access stream (private_stream).\",\n                            \"result\": \"error\",\n                          }\n                        description: |\n                          A typical response for when the requesting user does not have access to\n                          a private stream and `authorization_errors_fatal` is `True`:\n                  - allOf:\n                      - $ref: \"#/components/schemas/AddSubscriptionsResponse\"\n                      - example:\n                          {\n                            \"already_subscribed\": {},\n                            \"msg\": \"\",\n                            \"result\": \"success\",\n                            \"subscribed\": {},\n                            \"unauthorized\": [\"private_stream\"],\n                          }\n                        description: |\n                          A typical response for when the requesting user does not have access to\n                          a private stream and `authorization_errors_fatal` is `False`:\n    patch:\n      operationId: update-subscriptions\n      summary: Update subscriptions\n      tags: [\"streams\"]\n      description: |\n        Update which streams you are subscribed to.\n      parameters:\n        - name: delete\n          in: query\n          description: |\n            A list of stream names to unsubscribe from.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              example: [\"Verona\", \"Denmark\"]\n          required: false\n        - name: add\n          in: query\n          description: |\n            A list of objects describing which streams to subscribe to, optionally\n            including per-user subscription parameters (e.g. color) and if the\n            stream is to be created, its description.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: false\n                  properties:\n                    name:\n                      type: string\n                    color:\n                      type: string\n                    description:\n                      type: string\n              example:\n                [\n                  {\"name\": \"Verona\"},\n                  {\n                    \"name\": \"Denmark\",\n                    \"color\": \"#e79ab5\",\n                    \"description\": \"A Scandinavian country\",\n                  },\n                ]\n          required: false\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - required:\n                      - subscribed\n                      - already_subscribed\n                      - removed\n                    additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      subscribed:\n                        type: object\n                        description: |\n                          A dictionary where the key is the email\n                          address of the user/bot and the value is a\n                          list of the names of the streams that were\n                          subscribed to as a result of the query.\n                        additionalProperties:\n                          description: |\n                            `{email_id}`: A list of the names of streams that\n                            the user was subscribed to as a result of the query.\n                          type: array\n                          items:\n                            type: string\n                      already_subscribed:\n                        type: object\n                        description: |\n                          A dictionary where the key is the email\n                          address of the user/bot and the value is a\n                          list of the names of the streams that the\n                          user/bot is already subscribed to.\n                        additionalProperties:\n                          description: |\n                            `{email_id}`: A list of the names of streams that\n                            the user was already subscribed to.\n                          type: array\n                          items:\n                            type: string\n                      not_removed:\n                        type: array\n                        items:\n                          type: string\n                        description: |\n                          A list of the names of streams that the user\n                          is already unsubscribed from, and hence\n                          doesn't need to be unsubscribed.\n                      removed:\n                        type: array\n                        items:\n                          type: string\n                        description: |\n                          A list of the names of streams which were unsubscribed\n                          from as a result of the query.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"subscribed\": {},\n                        \"already_subscribed\": {\"iago@zulip.com\": [\"Verona\"]},\n                        \"not_removed\": [],\n                        \"removed\": [\"new stream\"],\n                        \"result\": \"success\",\n                      }\n    delete:\n      operationId: unsubscribe\n      summary: Unsubscribe from a stream\n      tags: [\"streams\"]\n      description: |\n        Unsubscribe yourself or other users from one or more streams.\n\n        `DELETE {{ api_url }}/v1/users/me/subscriptions`\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            description: |\n              **Note**: Unsubscribing another user from a stream requires\n              administrative privileges.\n            parameters:\n              enum:\n                - subscriptions\n          - type: exclude\n            parameters:\n              enum:\n                - \"\"\n            description: |\n              You may specify the `principals` parameter like so:\n      parameters:\n        - name: subscriptions\n          in: query\n          description: |\n            A list of stream names to unsubscribe from. This parameter is called\n            `streams` in our Python API.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              example: [\"Verona\", \"Denmark\"]\n          required: true\n        - $ref: \"#/components/parameters/Principals\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      not_removed:\n                        type: array\n                        items:\n                          type: string\n                        description: |\n                          A list of the names of streams that the user is already unsubscribed\n                          from, and hence doesn't need to be unsubscribed.\n                      removed:\n                        type: array\n                        items:\n                          type: string\n                        description: |\n                          A list of the names of streams which were unsubscribed from as a result\n                          of the query.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"not_removed\": [],\n                        \"removed\": [\"new stream\"],\n                        \"result\": \"success\",\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/NonExistingStreamError\"\n                  - description: |\n                      A typical failed JSON response for when the target stream does not exist:\n  /users/me/subscriptions/muted_topics:\n    patch:\n      operationId: mute-topic\n      summary: Topic muting\n      tags: [\"streams\"]\n      description: |\n        This endpoint mutes/unmutes a topic within a stream that the current\n        user is subscribed to. Muted topics are displayed faded in the Zulip\n        UI, and are not included in the user's unread count totals.\n\n        `PATCH {{ api_url }}/v1/users/me/subscriptions/muted_topics`\n\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - stream_id\n      parameters:\n        - name: stream_id\n          in: query\n          description: |\n            The ID of the stream to access.\n\n            Clients must provide either `stream` or `stream_id` as a parameter\n            to this endpoint, but not both.\n\n            **Changes**: New in Zulip 2.0.\n          schema:\n            type: integer\n          example: 43\n          required: false\n        - name: stream\n          in: query\n          description: |\n            The name of the stream to access.\n\n            Clients must provide either `stream` or `stream_id` as a parameter\n            to this endpoint, but not both. Clients should use `stream_id`\n            instead of the `stream` parameter when possible.\n          schema:\n            type: string\n          example: Denmark\n          required: false\n        - name: topic\n          in: query\n          description: |\n            The topic to (un)mute. Note that the request will succeed regardless of\n            whether any messages have been sent to the specified topic.\n          schema:\n            type: string\n          example: dinner\n          required: true\n        - name: op\n          in: query\n          description: |\n            Whether to mute (`add`) or unmute (`remove`) the provided topic.\n          schema:\n            type: string\n            enum:\n              - add\n              - remove\n          example: add\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example:\n                          {\"msg\": \"Topic already muted\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when an `add` operation is requested for a topic\n                          that has already been muted:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example:\n                          {\"msg\": \"Topic is not muted\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when a `remove` operation is requested for a\n                          topic that had not been previously muted:\n  /users/me/muted_users/{muted_user_id}:\n    post:\n      operationId: mute-user\n      summary: Mute a user\n      tags: [\"users\"]\n      description: |\n        This endpoint [mutes a user](/help/mute-a-user). Messages sent by users\n        you've muted will be automatically marked as read and hidden.\n\n        `POST {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`\n\n        Muted users should be implemented by clients as follows:\n\n        - The server will immediately mark all messages sent by the muted\n          user as read. This will automatically clear any existing mobile\n          push notifications related to the muted user.\n        - The server will mark any new messages sent by the muted user as read\n          for your account, which prevents all email and mobile push notifications.\n        - Clients should exclude muted users from presence lists or other UI\n          for viewing or composing 1:1 private messages. 1:1 private messages sent by\n          muted users should be hidden everywhere in the Zulip UI.\n        - Stream messages and group private messages sent by the muted\n          user should avoid displaying the content and name/avatar,\n          but should display that N messages by a muted user were\n          hidden (so that it is possible to interpret the messages by\n          other users who are talking with the muted user).\n        - Group private message conversations including the muted user\n          should display muted users as \"Muted user\", rather than\n          showing their name, in lists of such conversations, along with using\n          a blank grey avatar where avatars are displayed.\n        - Administrative/settings UI elements for showing \"All users that exist\n          on this stream or realm\", e.g. for organization\n          administration or showing stream subscribers, should display\n          the user's name as normal.\n\n        **Changes**: New in Zulip 4.0 (feature level 48).\n      parameters:\n        - $ref: \"#/components/parameters/MutedUserId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example: {\"msg\": \"Cannot mute self\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when the user is yourself:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example: {\"msg\": \"No such user\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when the user is nonexistent or inaccessible:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example:\n                          {\"msg\": \"User already muted\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when the user is already muted:\n    delete:\n      operationId: unmute-user\n      summary: Unmute a user\n      tags: [\"users\"]\n      description: |\n        This endpoint unmutes a user.\n\n        `DELETE {{ api_url }}/v1/users/me/muted_users/{muted_user_id}`\n\n        **Changes**: New in Zulip 4.0 (feature level 48).\n      parameters:\n        - $ref: \"#/components/parameters/MutedUserId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example: {\"msg\": \"No such user\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when the user is nonexistent or inaccessible:\n                  - allOf:\n                      - $ref: \"#/components/schemas/JsonError\"\n                      - example: {\"msg\": \"User is not muted\", \"result\": \"error\"}\n                        description: |\n                          An example JSON response for when the user is not previously muted:\n\n  /users/{user_id}/subscriptions/{stream_id}:\n    get:\n      operationId: get-subscription-status\n      summary: Get subscription status\n      tags: [\"streams\"]\n      description: |\n        Check whether a user is subscribed to a stream.\n\n        `GET {{ api_url }}/v1/users/{user_id}/subscriptions/{stream_id}`\n\n        **Changes**: New in Zulip 3.0 (feature level 11).\n      parameters:\n        - $ref: \"#/components/parameters/UserId\"\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    description: MANUALLY\n                    properties:\n                      result: {}\n                      msg: {}\n                      is_subscribed:\n                        type: boolean\n                        description: |\n                          Whether the user is subscribed to the stream.\n                    example:\n                      {\"msg\": \"\", \"result\": \"success\", \"is_subscribed\": false}\n  /realm/emoji/{emoji_name}:\n    post:\n      operationId: upload-custom-emoji\n      summary: Upload custom emoji\n      tags: [\"server_and_organizations\"]\n      description: |\n        This endpoint is used to upload a custom emoji for use in the user's\n        organization. Access to this endpoint depends on the\n        [organization's configuration](https://zulip.com/help/only-allow-admins-to-add-emoji).\n\n        `POST {{ api_url }}/v1/realm/emoji/{emoji_name}`\n      x-parameter-description: |\n        As described above, the image file to upload must be provided in the\n        request's body.\n\n        ## Maximum file size\n\n        The maximum file size for uploads can be configured by the\n        administrator of the Zulip server by setting `MAX_EMOJI_FILE_SIZE_MIB`\n        in the [server's settings][1]. `MAX_EMOJI_FILE_SIZE_MIB` defaults\n        to 5MB.\n\n        [1]: https://zulip.readthedocs.io/en/latest/subsystems/settings.html#server-settings\n      parameters:\n        - name: emoji_name\n          required: true\n          in: path\n          description: |\n            The name that should be associated with the uploaded emoji image/gif.\n            The emoji name can only contain letters, numbers, dashes, and spaces.\n            Upper and lower case letters are treated the same, and underscores (\\_)\n            are treated the same as spaces (consistent with how the Zulip UI\n            handles emoji).\n          schema:\n            type: string\n          example: smile\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                filename:\n                  type: string\n                  format: binary\n                  example: /path/to/img.png\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n\n  /realm/emoji:\n    get:\n      operationId: get-custom-emoji\n      summary: Get all custom emoji\n      tags: [\"server_and_organizations\"]\n      description: |\n        Get all the custom emoji in the user's organization.\n\n        `GET {{ api_url }}/v1/realm/emoji`\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      emoji:\n                        type: object\n                        description: |\n                          An object that contains `emoji` objects, each identified with their\n                          emoji ID as the key.\n                        additionalProperties:\n                          $ref: \"#/components/schemas/RealmEmoji\"\n                    example:\n                      {\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"emoji\":\n                          {\n                            \"1\":\n                              {\n                                \"id\": \"1\",\n                                \"name\": \"green_tick\",\n                                \"source_url\": \"/user_avatars/1/emoji/images/1.png\",\n                                \"deactivated\": false,\n                                \"author_id\": 5,\n                              },\n                          },\n                      }\n  /realm/profile_fields:\n    get:\n      operationId: get-custom-profile-fields\n      summary: Get all custom profile fields\n      tags: [\"server_and_organizations\"]\n      description: |\n        Get all the [custom profile fields](/help/add-custom-profile-fields)\n        configured for the user's organization.\n\n        `GET {{ api_url }}/v1/realm/profile_fields`\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      custom_fields:\n                        type: array\n                        description: |\n                          An array containing all the custom profile fields defined in this\n                          Zulip organization.\n                        items:\n                          $ref: \"#/components/schemas/CustomProfileField\"\n                    example:\n                      {\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                        \"custom_fields\":\n                          [\n                            {\n                              \"id\": 1,\n                              \"name\": \"Phone number\",\n                              \"type\": 1,\n                              \"hint\": \"\",\n                              \"field_data\": \"\",\n                              \"order\": 1,\n                            },\n                            {\n                              \"id\": 2,\n                              \"name\": \"Biography\",\n                              \"type\": 2,\n                              \"hint\": \"What are you known for?\",\n                              \"field_data\": \"\",\n                              \"order\": 2,\n                            },\n                            {\n                              \"id\": 3,\n                              \"name\": \"Favorite food\",\n                              \"type\": 1,\n                              \"hint\": \"Or drink, if you'd prefer\",\n                              \"field_data\": \"\",\n                              \"order\": 3,\n                            },\n                            {\n                              \"id\": 4,\n                              \"name\": \"Favorite editor\",\n                              \"type\": 3,\n                              \"hint\": \"\",\n                              \"field_data\": '{\"vim\":{\"text\":\"Vim\",\"order\":\"1\"},\"emacs\":{\"text\":\"Emacs\",\"order\":\"2\"}}',\n                              \"order\": 4,\n                            },\n                            {\n                              \"id\": 5,\n                              \"name\": \"Birthday\",\n                              \"type\": 4,\n                              \"hint\": \"\",\n                              \"field_data\": \"\",\n                              \"order\": 5,\n                            },\n                            {\n                              \"id\": 6,\n                              \"name\": \"Favorite website\",\n                              \"type\": 5,\n                              \"hint\": \"Or your personal blog's URL\",\n                              \"field_data\": \"\",\n                              \"order\": 6,\n                            },\n                            {\n                              \"id\": 7,\n                              \"name\": \"Mentor\",\n                              \"type\": 6,\n                              \"hint\": \"\",\n                              \"field_data\": \"\",\n                              \"order\": 7,\n                            },\n                            {\n                              \"id\": 8,\n                              \"name\": \"GitHub\",\n                              \"type\": 7,\n                              \"hint\": \"Enter your GitHub username\",\n                              \"field_data\": '{\"subtype\":\"github\"}',\n                              \"order\": 8,\n                            },\n                          ],\n                      }\n    patch:\n      operationId: reorder-custom-profile-fields\n      summary: Reorder custom profile fields\n      tags: [\"server_and_organizations\"]\n      description: |\n        Reorder the custom profile fields in the user's organization.\n\n        `PATCH {{ api_url }}/v1/realm/profile_fields`\n\n        Custom profile fields are displayed in Zulip UI widgets in order; this\n        endpoint allows administrative settings UI to change the field ordering.\n\n        This endpoint is used to implement the dragging feature described in the\n        [custom profile fields documentation](/help/add-custom-profile-fields).\n      x-requires-administrator: true\n      parameters:\n        - name: order\n          in: query\n          description: |\n            A list of the IDs of all the custom profile fields defined in this\n            organization, in the desired new order.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n    post:\n      operationId: create-custom-profile-field\n      summary: Create a custom profile field\n      tags: [\"server_and_organizations\"]\n      description: |\n        [Create a custom profile field](/help/add-custom-profile-fields) in the user's organization.\n\n        `POST {{ api_url }}/v1/realm/profile_fields`\n      x-requires-administrator: true\n      parameters:\n        - name: name\n          in: query\n          description: |\n            The name of the custom profile field, which will appear both in\n            user-facing settings UI for configuring custom profile fields and\n            in UI displaying a user's profile.\n          schema:\n            type: string\n          example: \"Favorite programming language\"\n        - name: hint\n          in: query\n          description: |\n            The help text to be displayed for the custom profile field in user-facing\n            settings UI for configuring custom profile fields.\n          schema:\n            type: string\n          example: \"Your favorite programming language.\"\n        - name: field_type\n          in: query\n          description: |\n            The field type can be any of the supported custom profile field types. See the\n            [custom profile fields documentation](/help/add-custom-profile-fields)\n            more details on what each type means.\n\n            - **1**: Short text\n            - **2**: Long text\n            - **3**: List of options\n            - **4**: Date picker\n            - **5**: Link\n            - **6**: Person picker\n            - **7**: External account\n          schema:\n            type: integer\n          example: 3\n          required: true\n        - name: field_data\n          in: query\n          description: |\n            Field types 3 (List of options) and 7 (External account) support storing\n            additional configuration for the field type in the `field_data` attribute.\n\n            For field type 3 (List of options), this attribute is a JSON dictionary\n            defining the choices and the order they will be displayed in the\n            dropdown UI for individual users to select an option.\n\n            The interface for field type 7 is not yet stabilized.\n          content:\n            application/json:\n              schema:\n                type: object\n              example:\n                {\n                  \"python\": {\"text\": \"Python\", \"order\": \"1\"},\n                  \"java\": {\"text\": \"Java\", \"order\": \"2\"},\n                }\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      id:\n                        type: integer\n                        description: |\n                          The ID for the custom profile field.\n                    example: {\"result\": \"success\", \"msg\": \"\", \"id\": 9}\n  /realm/user_settings_defaults:\n    patch:\n      operationId: update-realm-user-settings-defaults\n      summary: Update realm-level defaults of user settings\n      tags: [\"server_and_organizations\"]\n      x-requires-administrator: true\n      description: |\n        Change the [default values of settings][new-user-defaults] for new users\n        joining the organization. Essentially all\n        [personal preference settings](/api/update-settings) are supported.\n\n        `PATCH {{ api_url }}/v1/realm/user_settings_defaults`\n\n        This feature can be invaluable for customizing Zulip's default\n        settings for notifications or UI to be appropriate for how the\n        organization is using Zulip. (Note that this only supports\n        personal preference settings, like when to send push\n        notifications or what emoji set to use, not profile or\n        identity settings that naturally should be different for each user).\n\n        Note that this endpoint cannot, at present, be used to modify\n        settings for existing users in any way.\n\n        **Changes**: New in Zulip 5.0 (feature level 96).\n\n        [new-user-defaults]: /help/configure-default-new-user-settings\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - left_side_userlist\n                - emojiset\n      parameters:\n        - name: dense_mode\n          in: query\n          description: |\n            This setting has no effect at present. It is reserved for use in controlling\n            the default font size in Zulip.\n          schema:\n            type: boolean\n          example: true\n        - name: starred_message_counts\n          in: query\n          description: |\n            Whether clients should display the [number of starred\n            messages](/help/star-a-message#display-the-number-of-starred-messages).\n          schema:\n            type: boolean\n          example: true\n        - name: fluid_layout_width\n          in: query\n          description: |\n            Whether to use the [maximum available screen width](/help/enable-full-width-display)\n            for the web app's center panel (message feed, recent topics) on wide screens.\n          schema:\n            type: boolean\n          example: true\n        - name: high_contrast_mode\n          in: query\n          description: |\n            This setting is reserved for use to control variations in Zulip's design\n            to help visually impaired users.\n          schema:\n            type: boolean\n          example: true\n        - name: color_scheme\n          in: query\n          description: |\n            Controls which [color theme](/help/dark-theme) to use.\n\n            - 1 - Automatic\n            - 2 - Dark theme\n            - 3 - Light theme\n\n            Automatic detection is implementing using the standard `prefers-color-scheme`\n            media query.\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n              - 3\n          example: 1\n        - name: enable_drafts_synchronization\n          in: query\n          description: |\n            A boolean parameter to control whether synchronizing drafts is enabled for\n            the user. When synchronization is disabled, all drafts stored in the server\n            will be automatically deleted from the server.\n\n            This does not do anything (like sending events) to delete local copies of\n            drafts stored in clients.\n          schema:\n            type: boolean\n          example: true\n        - name: translate_emoticons\n          in: query\n          description: |\n            Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)\n            in messages the user sends.\n          schema:\n            type: boolean\n          example: true\n        - name: display_emoji_reaction_users\n          in: query\n          description: |\n            Whether to display the names of reacting users on a message.\n\n            When enabled, clients should display the names of reacting users, rather than\n            a count, for messages with few total reactions. The ideal cutoff may depend on\n            the space available for displaying reactions; the official web application\n            displays names when \u003c=3 total reactions are present with this setting enabled.\n\n            **Changes**: New in Zulip 6.0 (feature level 125).\n          schema:\n            type: boolean\n          example: false\n        - name: default_view\n          in: query\n          description: |\n            The [default view](/help/configure-default-view) used when opening a new\n            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.\n\n            - \"recent_topics\" - Recent topics view\n            - \"all_messages\" - All messages view\n          schema:\n            type: string\n          example: all_messages\n        - name: escape_navigates_to_default_view\n          in: query\n          description: |\n            Whether the escape key navigates to the\n            [configured default view](/help/configure-default-view).\n\n            **Changes**: New in Zulip 5.0 (feature level 107).\n          schema:\n            type: boolean\n          example: true\n        - name: left_side_userlist\n          in: query\n          description: |\n            Whether the users list on left sidebar in narrow windows.\n\n            This feature is not heavily used and is likely to be reworked.\n          schema:\n            type: boolean\n          example: true\n        - name: emojiset\n          in: query\n          description: |\n            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),\n            used to display emoji to the user everywhere they appear in the UI.\n\n            - \"google\" - Google modern\n            - \"google-blob\" - Google classic\n            - \"twitter\" - Twitter\n            - \"text\" - Plain text\n          schema:\n            type: string\n          example: \"google\"\n        - name: demote_inactive_streams\n          in: query\n          description: |\n            Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.\n\n            - 1 - Automatic\n            - 2 - Always\n            - 3 - Never\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n              - 3\n          example: 1\n        - name: enable_stream_desktop_notifications\n          in: query\n          description: |\n            Enable visual desktop notifications for stream messages.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_stream_email_notifications\n          in: query\n          description: |\n            Enable email notifications for stream messages.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_stream_push_notifications\n          in: query\n          description: |\n            Enable mobile notifications for stream messages.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_stream_audible_notifications\n          in: query\n          description: |\n            Enable audible desktop notifications for stream messages.\n          schema:\n            type: boolean\n          example: true\n        - name: notification_sound\n          in: query\n          description: |\n            Notification sound name.\n          schema:\n            type: string\n          example: ding\n        - name: enable_desktop_notifications\n          in: query\n          description: |\n            Enable visual desktop notifications for private messages and @-mentions.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_sounds\n          in: query\n          description: |\n            Enable audible desktop notifications for private messages and\n            @-mentions.\n          schema:\n            type: boolean\n          example: true\n        - name: email_notifications_batching_period_seconds\n          in: query\n          description: |\n            The duration (in seconds) for which the server should wait to batch\n            email notifications before sending them.\n          schema:\n            type: integer\n          example: 120\n        - name: enable_offline_email_notifications\n          in: query\n          description: |\n            Enable email notifications for private messages and @-mentions received\n            when the user is offline.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_offline_push_notifications\n          in: query\n          description: |\n            Enable mobile notification for private messages and @-mentions received\n            when the user is offline.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_online_push_notifications\n          in: query\n          description: |\n            Enable mobile notification for private messages and @-mentions received\n            when the user is online.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_digest_emails\n          in: query\n          description: |\n            Enable digest emails when the user is away.\n          schema:\n            type: boolean\n          example: true\n        - name: message_content_in_email_notifications\n          in: query\n          description: |\n            Include the message's content in email notifications for new messages.\n          schema:\n            type: boolean\n          example: true\n        - name: pm_content_in_desktop_notifications\n          in: query\n          description: |\n            Include content of private messages in desktop notifications.\n          schema:\n            type: boolean\n          example: true\n        - name: wildcard_mentions_notify\n          in: query\n          description: |\n            Whether wildcard mentions (E.g. @**all**) should send notifications\n            like a personal mention.\n          schema:\n            type: boolean\n          example: true\n        - name: desktop_icon_count_display\n          in: query\n          description: |\n            Unread count badge (appears in desktop sidebar and browser tab)\n\n            - 1 - All unreads\n            - 2 - Private messages and mentions\n            - 3 - None\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n              - 3\n          example: 1\n        - name: realm_name_in_notifications\n          in: query\n          description: |\n            Include organization name in subject of message notification emails.\n          schema:\n            type: boolean\n          example: true\n        - name: presence_enabled\n          in: query\n          description: |\n            Display the presence status to other users when online.\n          schema:\n            type: boolean\n          example: true\n        - name: enter_sends\n          in: query\n          description: |\n            Whether pressing Enter in the compose box sends a message\n            (or saves a message edit).\n          schema:\n            type: boolean\n          example: true\n        - name: twenty_four_hour_time\n          in: query\n          description: |\n            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).\n\n            **Changes**: New in Zulip 5.0 (feature level 99).\n            Previously, this default was edited using the\n            `default_twenty_four_hour_time` parameter to the `PATCH /realm` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: send_private_typing_notifications\n          in: query\n          description: |\n            Whether [typing notifications](/help/status-and-availability#typing-notifications) be sent when composing\n            private messages.\n\n            **Changes**: New in Zulip 5.0 (feature level 105).\n          schema:\n            type: boolean\n          example: true\n        - name: send_stream_typing_notifications\n          in: query\n          description: |\n            Whether [typing notifications](/help/status-and-availability#typing-notifications) be sent when composing\n            stream messages.\n\n            **Changes**: New in Zulip 5.0 (feature level 105).\n          schema:\n            type: boolean\n          example: true\n        - name: send_read_receipts\n          in: query\n          description: |\n            Whether other users are allowed to see whether you've\n            read messages.\n\n            **Changes**: New in Zulip 5.0 (feature level 105).\n          schema:\n            type: boolean\n          example: true\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      ignored_parameters_unsupported:\n                        $ref: \"#/components/schemas/IgnoredParametersUnsupported\"\n                    example:\n                      {\n                        \"ignored_parameters_unsupported\":\n                          [\"desktop_notifications\", \"demote_streams\"],\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                      }\n\n  /users/me/subscriptions/properties:\n    post:\n      operationId: update-subscription-settings\n      summary: Update subscription settings\n      tags: [\"streams\"]\n      description: |\n        This endpoint is used to update the user's personal settings for the\n        streams they are subscribed to, including muting, color, pinning, and\n        per-stream notification settings.\n\n        `POST {{ api_url }}/v1/users/me/subscriptions/properties`\n\n        **Changes**: Prior to Zulip 5.0 (feature level 111), response\n        object included the `subscription_data` in the the\n        request. The endpoint now returns the more ergonomic\n        `ignored_parameters_unsupported` field instead.\n      parameters:\n        - name: subscription_data\n          in: query\n          description: |\n            A list of objects that describe the changes that should be applied in\n            each subscription. Each object represents a subscription, and must have\n            a `stream_id` key that identifies the stream, as well as the `property`\n            being modified and its new `value`.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  additionalProperties: false\n                  properties:\n                    stream_id:\n                      type: integer\n                      description: |\n                        The unique ID of a stream.\n                    property:\n                      type: string\n                      enum:\n                        - color\n                        - is_muted\n                        - in_home_view\n                        - pin_to_top\n                        - desktop_notifications\n                        - audible_notifications\n                        - push_notifications\n                        - email_notifications\n                        - wildcard_mentions_notify\n                      description: |\n                        One of the stream properties described below:\n\n                        - `\"color\"`: The hex value of the user's display color for the stream.\n\n                        - `\"is_muted\"`: Whether the stream is [muted](/help/mute-a-stream).\u003cbr\u003e\n                          **Changes**: Prior to Zulip 2.1, this feature was represented\n                          by the more confusingly named `in_home_view` (with the\n                          opposite value: `in_home_view=!is_muted`); for\n                          backwards-compatibility, modern Zulip still accepts that property.\n\n                        - `\"pin_to_top\"`: Whether to pin the stream at the top of the stream list.\n\n                        - `\"desktop_notifications\"`: Whether to show desktop notifications\n                          for all messages sent to the stream.\n\n                        - `\"audible_notifications\"`: Whether to play a sound\n                          notification for all messages sent to the stream.\n\n                        - `\"push_notifications\"`: Whether to trigger a mobile push\n                          notification for all messages sent to the stream.\n\n                        - `\"email_notifications\"`: Whether to trigger an email\n                          notification for all messages sent to the stream.\n\n                        - `\"wildcard_mentions_notify\"`: Whether wildcard mentions trigger\n                          notifications as though they were personal mentions in this stream.\n                    value:\n                      oneOf:\n                        - type: boolean\n                        - type: string\n                      description: |\n                        The new value of the property being modified.\n\n                        If the property is `\"color\"`, then `value` is a string\n                        representing the hex value of the user's display\n                        color for the stream. For all other above properties,\n                        `value` is a boolean.\n                  required:\n                    - stream_id\n                    - property\n                    - value\n                  example:\n                    {\"stream_id\": 2, \"property\": \"is_muted\", \"value\": true}\n              example:\n                [\n                  {\"stream_id\": 1, \"property\": \"pin_to_top\", \"value\": true},\n                  {\"stream_id\": 3, \"property\": \"color\", \"value\": \"#f00f00\"},\n                ]\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      ignored_parameters_unsupported:\n                        $ref: \"#/components/schemas/IgnoredParametersUnsupported\"\n                    example:\n                      {\n                        \"ignored_parameters_unsupported\": [\"invalid_parameter\"],\n                        \"result\": \"success\",\n                        \"msg\": \"\",\n                      }\n  /users/{email}:\n    get:\n      operationId: get-user-by-email\n      summary: Get a user by email\n      tags: [\"users\"]\n      description: |\n        Fetch details for a single user in the organization given a Zulip display\n        email address.\n\n        `GET {{ api_url }}/v1/users/{email}`\n\n        Note that this endpoint uses Zulip display emails addresses\n        for organizations that have configured limited [email address\n        visibility](/help/restrict-visibility-of-email-addresses).\n\n        You can also fetch details on [all users in the organization](/api/get-users) or\n        [by user ID](/api/get-user). Fetching by user ID is generally recommended\n        when possible, as users can\n        [change their email address](/help/change-your-email-address).\n\n        _This endpoint is new in Zulip Server 4.0 (feature level 39)._\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - \"\"\n          - type: exclude\n            parameters:\n              enum:\n                - \"\"\n            description: |\n              You may pass the `client_gravatar` or `include_custom_profile_fields` query parameter as follows:\n      parameters:\n        - name: email\n          in: path\n          description: |\n            The email address of the user whose details you want to fetch.\n          schema:\n            type: string\n          example: iago@zulip.com\n          required: true\n        - $ref: \"#/components/parameters/ClientGravatar\"\n        - $ref: \"#/components/parameters/IncludeCustomProfileFields\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      user:\n                        $ref: \"#/components/schemas/User\"\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"user\":\n                          {\n                            \"date_joined\": \"2019-10-20T07:50:53.729659+00:00\",\n                            \"full_name\": \"King Hamlet\",\n                            \"is_guest\": false,\n                            \"profile_data\":\n                              {\n                                \"4\": {\"value\": \"vim\"},\n                                \"2\":\n                                  {\n                                    \"value\": \"I am:\\n* The prince of Denmark\\n* Nephew to the usurping Claudius\",\n                                    \"rendered_value\": \"\u003cp\u003eI am:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eThe prince of Denmark\u003c/li\u003e\\n\u003cli\u003eNephew to the usurping Claudius\u003c/li\u003e\\n\u003c/ul\u003e\",\n                                  },\n                                \"5\": {\"value\": \"1900-01-01\"},\n                                \"7\": {\"value\": \"[11]\"},\n                                \"6\": {\"value\": \"https://blog.zulig.org\"},\n                                \"1\":\n                                  {\n                                    \"value\": \"+0-11-23-456-7890\",\n                                    \"rendered_value\": \"\u003cp\u003e+0-11-23-456-7890\u003c/p\u003e\",\n                                  },\n                                \"8\": {\"value\": \"zulipbot\"},\n                                \"3\":\n                                  {\n                                    \"rendered_value\": \"\u003cp\u003eDark chocolate\u003c/p\u003e\",\n                                    \"value\": \"Dark chocolate\",\n                                  },\n                              },\n                            \"user_id\": 10,\n                            \"is_bot\": false,\n                            \"bot_type\": null,\n                            \"timezone\": \"\",\n                            \"is_admin\": false,\n                            \"is_owner\": false,\n                            \"is_billing_admin\": false,\n                            \"role\": 400,\n                            \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=1\",\n                            \"is_active\": true,\n                            \"email\": \"hamlet@zulip.com\",\n                          },\n                      }\n  /users/{user_id}:\n    get:\n      operationId: get-user\n      summary: Get a user\n      tags: [\"users\"]\n      description: |\n        Fetch details for a single user in the organization.\n\n        `GET {{ api_url }}/v1/users/{user_id}`\n\n        You can also fetch details on [all users in the organization](/api/get-users)\n        or [by email](/api/get-user-by-email).\n\n        _This endpoint is new in Zulip Server 3.0 (feature level 1)._\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - \"\"\n          - type: exclude\n            parameters:\n              enum:\n                - \"\"\n            description: |\n              You may pass the `client_gravatar` or `include_custom_profile_fields` query parameter as follows:\n      parameters:\n        - $ref: \"#/components/parameters/UserId\"\n        - $ref: \"#/components/parameters/ClientGravatar\"\n        - $ref: \"#/components/parameters/IncludeCustomProfileFields\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      user:\n                        $ref: \"#/components/schemas/User\"\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"user\":\n                          {\n                            \"date_joined\": \"2019-10-20T07:50:53.729659+00:00\",\n                            \"full_name\": \"King Hamlet\",\n                            \"is_guest\": false,\n                            \"profile_data\":\n                              {\n                                \"4\": {\"value\": \"vim\"},\n                                \"2\":\n                                  {\n                                    \"value\": \"I am:\\n* The prince of Denmark\\n* Nephew to the usurping Claudius\",\n                                    \"rendered_value\": \"\u003cp\u003eI am:\u003c/p\u003e\\n\u003cul\u003e\\n\u003cli\u003eThe prince of Denmark\u003c/li\u003e\\n\u003cli\u003eNephew to the usurping Claudius\u003c/li\u003e\\n\u003c/ul\u003e\",\n                                  },\n                                \"5\": {\"value\": \"1900-01-01\"},\n                                \"7\": {\"value\": \"[11]\"},\n                                \"6\": {\"value\": \"https://blog.zulig.org\"},\n                                \"1\":\n                                  {\n                                    \"value\": \"+0-11-23-456-7890\",\n                                    \"rendered_value\": \"\u003cp\u003e+0-11-23-456-7890\u003c/p\u003e\",\n                                  },\n                                \"8\": {\"value\": \"zulipbot\"},\n                                \"3\":\n                                  {\n                                    \"rendered_value\": \"\u003cp\u003eDark chocolate\u003c/p\u003e\",\n                                    \"value\": \"Dark chocolate\",\n                                  },\n                              },\n                            \"user_id\": 10,\n                            \"is_bot\": false,\n                            \"bot_type\": null,\n                            \"timezone\": \"\",\n                            \"is_admin\": false,\n                            \"is_owner\": false,\n                            \"is_billing_admin\": false,\n                            \"role\": 400,\n                            \"avatar_url\": \"https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon\u0026version=1\",\n                            \"is_active\": true,\n                            \"email\": \"hamlet@zulip.com\",\n                          },\n                      }\n    patch:\n      operationId: update-user\n      summary: Update a user\n      tags: [\"users\"]\n      x-requires-administrator: true\n      description: |\n        Administrative endpoint to update the details of another user in the organization.\n\n        `PATCH {{ api_url }}/v1/users/{user_id}`\n\n        Supports everything an administrator can do to edit details of another\n        user's account, including editing full name,\n        [role](/help/roles-and-permissions), and [custom profile\n        fields](/help/add-custom-profile-fields).\n      parameters:\n        - $ref: \"#/components/parameters/UserId\"\n        - name: full_name\n          in: query\n          description: |\n            The user's full name.\n\n            **Changes**: Removed unnecessary JSON-encoding of this parameter in\n            Zulip 5.0 (feature level 106).\n          schema:\n            type: string\n          example: NewName\n          required: false\n        - name: role\n          in: query\n          description: |\n            New [role](/api/roles-and-permissions) for the user. Roles are encoded as:\n\n            - Organization owner: 100\n            - Organization administrator: 200\n            - Organization moderator: 300\n            - Member: 400\n            - Guest: 600\n\n            Only organization owners can add or remove the owner role.\n\n            The owner role cannot be removed from the only organization owner.\n\n            **Changes**: New in Zulip 3.0 (feature level 8), replacing the previous\n            pair of `is_admin` and `is_guest` boolean parameters. Organization moderator\n            role added in Zulip 4.0 (feature level 60).\n          schema:\n            type: integer\n          example: 400\n          required: false\n        - name: profile_data\n          in: query\n          description: |\n            A dictionary containing the to be updated custom profile field data for the user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n              example:\n                [{\"id\": 4, \"value\": \"vim\"}, {\"id\": 5, \"value\": \"1909-04-05\"}]\n          required: false\n\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - example:\n                      {\n                        \"result\": \"error\",\n                        \"msg\": \"Guests cannot be organization administrators\",\n                        \"code\": \"BAD_REQUEST\",\n                      }\n                    description: |\n                      A typical unsuccessful JSON response:\n\n    delete:\n      operationId: deactivate-user\n      summary: Deactivate a user\n      tags: [\"users\"]\n      x-requires-administrator: true\n      description: |\n        [Deactivates a\n        user](https://zulip.com/help/deactivate-or-reactivate-a-user)\n        given their user ID.\n\n        `DELETE {{ api_url }}/v1/users/{user_id}`\n      parameters:\n        - $ref: \"#/components/parameters/UserId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"msg\": \"Cannot deactivate the only organization owner\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON error response when attempting to deactivate the only\n                      organization owner in an organization:\n  /realm/linkifiers:\n    get:\n      operationId: get-linkifiers\n      summary: Get linkifiers\n      tags: [\"server_and_organizations\"]\n      description: |\n        List all of an organization's configured\n        [linkifiers](/help/add-a-custom-linkifier), regular\n        expression patterns that are automatically linkified when they appear\n        in messages and topics.\n\n        `GET {{ api_url }}/v1/realm/linkifiers`\n\n        **Changes**: New in Zulip 4.0 (feature level 54). On older versions,\n        a similar `GET /realm/filters` endpoint was available with each entry in\n        a `[pattern, url_format, id]` tuple format.\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      linkifiers:\n                        type: array\n                        description: |\n                          An array of objects, where each object describes a linkifier.\n                        items:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            pattern:\n                              type: string\n                              description: |\n                                The string regex pattern which represents the pattern that\n                                should be linkified by this linkifier.\n                            url_format:\n                              type: string\n                              description: |\n                                The URL format string to be used for linkifying matches.\n                            id:\n                              type: integer\n                              description: |\n                                The ID of the linkifier.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"linkifiers\":\n                          [\n                            {\n                              \"pattern\": \"#(?P\u003cid\u003e[0-9]+)\",\n                              \"url_format\": \"https://github.com/zulip/zulip/issues/%(id)s\",\n                              \"id\": 1,\n                            },\n                          ],\n                        \"result\": \"success\",\n                      }\n  /realm/filters:\n    post:\n      operationId: add-linkifier\n      summary: Add a linkifier\n      tags: [\"server_and_organizations\"]\n      description: |\n        Configure [linkifiers](/help/add-a-custom-linkifier),\n        regular expression patterns that are automatically linkified when they\n        appear in messages and topics.\n\n        `POST {{ api_url }}/v1/realm/filters`\n      parameters:\n        - $ref: \"#/components/parameters/LinkifierPattern\"\n        - $ref: \"#/components/parameters/LinkifierURLFormatString\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      id:\n                        type: integer\n                        description: |\n                          The numeric ID assigned to this filter.\n                    example: {\"id\": 42, \"result\": \"success\", \"msg\": \"\"}\n  /realm/filters/{filter_id}:\n    delete:\n      operationId: remove-linkifier\n      summary: Remove a linkifier\n      tags: [\"server_and_organizations\"]\n      description: |\n        Remove [linkifiers](/help/add-a-custom-linkifier), regular\n        expression patterns that are automatically linkified when they appear\n        in messages and topics.\n\n        `DELETE {{ api_url }}/v1/realm/filters/{filter_id}`\n      parameters:\n        - name: filter_id\n          in: path\n          description: |\n            The ID of the linkifier that you want to remove.\n          schema:\n            type: integer\n          example: 43\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n    patch:\n      operationId: update-linkifier\n      summary: Update a linkifier\n      tags: [\"server_and_organizations\"]\n      description: |\n        Update a [linkifier](/help/add-a-custom-linkifier), regular\n        expression patterns that are automatically linkified when they appear\n        in messages and topics.\n\n        `PATCH {{ api_url }}/v1/realm/filters/{filter_id}`\n\n        **Changes**: New in Zulip 4.0 (feature level 57).\n      parameters:\n        - name: filter_id\n          in: path\n          description: |\n            The ID of the linkifier that you want to update.\n          schema:\n            type: integer\n          example: 2\n          required: true\n        - $ref: \"#/components/parameters/LinkifierPattern\"\n        - $ref: \"#/components/parameters/LinkifierURLFormatString\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n  /realm/playgrounds:\n    post:\n      operationId: add-code-playground\n      summary: Add a code playground\n      tags: [\"server_and_organizations\"]\n      description: |\n        Configure [code playgrounds](/help/code-blocks#code-playgrounds) for the organization.\n\n        `POST {{ api_url }}/v1/realm/playgrounds`\n\n        **Changes**: New in Zulip 4.0 (feature level 49). A parameter encoding bug was\n        fixed in Zulip 4.0 (feature level 57).\n      parameters:\n        - name: name\n          in: query\n          description: |\n            The user-visible display name of the playground which can be\n            used to pick the target playground, especially when multiple\n            playground options exist for that programming language.\n          schema:\n            type: string\n          example: Python playground\n          required: true\n        - name: pygments_language\n          in: query\n          description: |\n            The name of the Pygments language lexer for that\n            programming language.\n          schema:\n            type: string\n          example: Python\n          required: true\n        - name: url_prefix\n          in: query\n          description: |\n            The url prefix for the playground.\n          schema:\n            type: string\n          example: https://python.example.com\n          required: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      id:\n                        type: integer\n                        description: |\n                          The numeric ID assigned to this playground.\n                    example: {\"id\": 1, \"result\": \"success\", \"msg\": \"\"}\n  /realm/playgrounds/{playground_id}:\n    delete:\n      operationId: remove-code-playground\n      summary: Remove a code playground\n      tags: [\"server_and_organizations\"]\n      description: |\n        Remove a [code playground](/help/code-blocks#code-playgrounds) previously\n        configured for an organization.\n\n        `DELETE {{ api_url }}/v1/realm/playgrounds/{playground_id}`\n\n        **Changes**: New in Zulip 4.0 (feature level 49).\n      parameters:\n        - name: playground_id\n          in: path\n          description: |\n            The ID of the playground that you want to remove.\n          schema:\n            type: integer\n          example: 1\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n  /register:\n    post:\n      operationId: register-queue\n      summary: Register an event queue\n      tags: [\"real_time_events\"]\n      description: |\n        `POST {{ api_url }}/v1/register`\n\n        This powerful endpoint can be used to register a Zulip \"event queue\"\n        (subscribed to certain types of \"events\", or updates to the messages\n        and other Zulip data the current user has access to), as well as to\n        fetch the current state of that data.\n\n        (`register` also powers the `call_on_each_event` Python API, and is\n        intended primarily for complex applications for which the more convenient\n        `call_on_each_event` API is insufficient).\n\n        This endpoint returns a `queue_id` and a `last_event_id`; these can be\n        used in subsequent calls to the\n        [\"events\" endpoint](/api/get-events) to request events from\n        the Zulip server using long-polling.\n\n        The server will queue events for up to 10 minutes of inactivity.\n        After 10 minutes, your event queue will be garbage-collected. The\n        server will send `heartbeat` events every minute, which makes it easy\n        to implement a robust client that does not miss events unless the\n        client loses network connectivity with the Zulip server for 10 minutes\n        or longer.\n\n        Once the server garbage-collects your event queue, the server will\n        [return an error](/api/get-events#bad_event_queue_id-errors)\n        with a code of `BAD_EVENT_QUEUE_ID` if you try to fetch events from\n        the event queue. Your software will need to handle that error\n        condition by re-initializing itself (e.g. this is what triggers your\n        browser reloading the Zulip web app when your laptop comes back online\n        after being offline for more than 10 minutes).\n\n        When prototyping with this API, we recommend first calling `register`\n        with no `event_types` parameter to see all the available data from all\n        supported event types. Before using your client in production, you\n        should set appropriate `event_types` and `fetch_event_types` filters\n        so that your client only requests the data it needs. A few minutes\n        doing this often saves 90% of the total bandwidth and other resources\n        consumed by a client using this API.\n\n        See the\n        [events system developer documentation](https://zulip.readthedocs.io/en/latest/subsystems/events-system.html)\n        if you need deeper details about how the Zulip event queue system\n        works, avoids clients needing to worry about large classes of\n        potentially messy races, etc.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - event_types\n      parameters:\n        - name: apply_markdown\n          in: query\n          description: |\n            Set to `true` if you would like the content to be rendered in HTML\n            format (otherwise the API will return the raw text that the user\n            entered)\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - $ref: \"#/components/parameters/ClientGravatar\"\n        - name: slim_presence\n          in: query\n          description: |\n            Setting this to `true` will make presence dictionaries be keyed by\n            user_id instead of email.\n\n            **Changes**: New in Zulip 3.0 (Unstable with no feature level yet).\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - $ref: \"#/components/parameters/Event_types\"\n        - $ref: \"#/components/parameters/AllPublicStreams\"\n        - $ref: \"#/components/parameters/IncludeSubscribers\"\n        - name: client_capabilities\n          in: query\n          description: |\n            Dictionary containing details on features the client supports that are\n            relevant to the format of responses sent by the server.\n\n            - `notification_settings_null`: Boolean for whether the\n              client can handle the current API with null values for\n              stream-level notification settings (which means the stream\n              is not customized and should inherit the user's global\n              notification settings for stream messages).\n              \u003cbr /\u003e\n              New in Zulip 2.1.0; in earlier Zulip releases, stream-level\n              notification settings were simple booleans.\n\n            - `bulk_message_deletion`: Boolean for whether the client's\n              handler for the `delete_message` event type has been\n              updated to process the new bulk format (with a\n              `message_ids`, rather than a singleton `message_id`).\n              Otherwise, the server will send `delete_message` events\n              in a loop.\n              \u003cbr /\u003e\n              New in Zulip 3.0 (feature level 13). This\n              capability is for backwards-compatibility; it will be\n              required in a future server release.\n\n            - `user_avatar_url_field_optional`: Boolean for whether the\n              client required avatar URLs for all users, or supports\n              using `GET /avatar/{user_id}` to access user avatars. If the\n              client has this capability, the server may skip sending a\n              `avatar_url` field in the `realm_user` at its sole discretion\n              to optimize network performance. This is an important optimization\n              in organizations with 10,000s of users.\n              \u003cbr /\u003e\n              New in Zulip 3.0 (feature level 18).\n\n            - `stream_typing_notifications`: Boolean for whether the client\n              supports stream typing notifications.\n              \u003cbr /\u003e\n              New in Zulip 4.0 (feature level 58). This capability is\n              for backwards-compatibility; it will be required in a\n              future server release.\n\n            - `user_settings_object`: Boolean for whether the client supports the modern\n              `user_settings` event type. If False, the server will additionally send the\n              legacy `update_display_settings` and `update_global_notifications` event\n              types for backwards-compatibility with clients that predate this API migration.\n              \u003cbr /\u003e\n              \u003cbr /\u003e\n              Because the feature level 89 API changes were merged together, clients can\n              safely make a request with this client capability and requesting all of the\n              `user_settings`, `update_display_settings`, and\n              `update_global_notifications` event types, and get exactly one copy of\n              settings data on any server version. (And then use the `zulip_feature_level`\n              in the `/register` response or the presence/absence of a `user_settings` key\n              to determine where to look).\n              \u003cbr /\u003e\n              New in Zulip 5.0 (feature level 89). This capability is for\n              backwards-compatibility; it will be removed in a future server release.\n          content:\n            application/json:\n              schema:\n                type: object\n              example: {\"notification_settings_null\": true}\n        - name: fetch_event_types\n          in: query\n          description: |\n            Same as the `event_types` parameter except that the values in\n            `fetch_event_types` are used to fetch initial data. If\n            `fetch_event_types` is not provided, `event_types` is used and if\n            `event_types` is not provided, this parameter defaults to `None`.\n\n            Event types not supported by the server are ignored, in order to simplify\n            the implementation of client apps that support multiple server versions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              example: [\"message\"]\n        - $ref: \"#/components/parameters/Narrow\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      queue_id:\n                        type: string\n                        nullable: true\n                        description: |\n                          The ID of the queue that has been allocated for your client.\n\n                          Will be None only for unauthenticated access in realms that have\n                          enabled the [public access option](/help/public-access-option).\n                      last_event_id:\n                        type: integer\n                        description: |\n                          The initial value of `last_event_id` to pass to `GET /api/v1/events`.\n                      zulip_feature_level:\n                        type: integer\n                        description: |\n                          The server's current [Zulip feature level](/api/changelog).\n                      zulip_version:\n                        type: string\n                        description: |\n                          The server's version number. This is often a release version number,\n                          like `2.1.7`. But for a server running a [version from Git][git-release],\n                          it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.\n\n                          [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions\n                      zulip_merge_base:\n                        type: string\n                        description: |\n                          The `git merge-base` between `zulip_verson` and official branches\n                          in the public\n                          [Zulip server and web app repository](https://github.com/zulip/zulip),\n                          in the same format as `zulip_version`. This will equal\n                          `zulip_version` if the server is not running a fork of the Zulip server.\n\n                          This will be `\"\"` if the server does not know its `merge-base`.\n\n                          **Changes**: New in Zulip 5.0 (feature level 88).\n                      alert_words:\n                        type: array\n                        description: |\n                          Present if `alert_words` is present in `fetch_event_types`.\n\n                          An array of strings, each an [alert word](/help/pm-mention-alert-notifications#alert-words)\n                          that the current user has configured.\n                        items:\n                          type: string\n                      custom_profile_fields:\n                        type: array\n                        description: |\n                          Present if `custom_profile_fields` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary contains the\n                          details of a single custom profile field that is available to users\n                          in this Zulip organization. This must be combined with the custom profile\n                          field values on individual user objects to display users' full profiles.\n                        items:\n                          $ref: \"#/components/schemas/CustomProfileField\"\n                      custom_profile_field_types:\n                        type: object\n                        description: |\n                          Present if `custom_profile_fields` is present in `fetch_event_types`.\n\n                          An array of objects; each object describes a type of custom profile field\n                          that could be configured on this Zulip server. Each custom profile type\n                          has a id and the `type` property of a custom profile field is equal\n                          to one of these ids.\n\n                          This attribute is only useful for clients containing UI for changing\n                          the set of configured custom profile fields in a Zulip organization.\n                        additionalProperties:\n                          type: object\n                          description: |\n                            `{FIELD_TYPE}`: Dictionary which contains the details\n                            of the field type with the field type as the name of the\n                            property itself. The current supported field types are as follows:\n\n                            - `SHORT_TEXT`\n                            - `LONG_TEXT`\n                            - `DATE` for date-based fields.\n                            - `CHOICE` for a list of options.\n                            - `URL` for links.\n                            - `EXTERNAL_ACCOUNT` for external accounts.\n                            - `USER` for selecting a user for the field.\n                          additionalProperties: false\n                          properties:\n                            id:\n                              type: integer\n                              description: |\n                                The id of the custom profile field type.\n                            name:\n                              type: string\n                              description: |\n                                The name of the custom profile field type.\n                      demo_organization_scheduled_deletion_date:\n                        type: integer\n                        description: |\n                          Present if the realm is a demo organization.\n\n                          The UNIX timestamp (UTC) when the demo organization will be\n                          automatically deleted. Clients should use this to display a\n                          prominent warning to the user that the organization will be\n                          deleted at the indicated time.\n\n                          **Changes**: New in Zulip 5.0 (feature level 94).\n                      drafts:\n                        type: array\n                        description: |\n                          An array containing draft objects for the user. These drafts are being\n                          stored on the backend for the purpose of syncing across devices. This\n                          array will be empty if `enable_drafts_synchronization` is set to `false`.\n                        items:\n                          $ref: \"#/components/schemas/Draft\"\n                      hotspots:\n                        type: array\n                        description: |\n                          Present if `hotspots` is present in `fetch_event_types`.\n\n                          An array of dictionaries, where each dictionary contains details about\n                          a single onboarding hotspot that should be shown to new users.\n\n                          We expect that only official Zulip clients will interact with these data.\n                        items:\n                          $ref: \"#/components/schemas/Hotspot\"\n                      max_message_id:\n                        type: integer\n                        deprecated: true\n                        description: |\n                          Present if `message` is present in `fetch_event_types`.\n\n                          The highest message ID among all messages the user has received as of the\n                          moment of this request.\n\n                          **Deprecated**: This field may be removed in future versions as it no\n                          longer has a clear purpose. Clients wishing to fetch the latest messages\n                          should pass `anchor=\"latest\"` to `GET /messages`.\n                      max_stream_name_length:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum allowed length for a stream name. Clients should use\n                          these properties rather than hardcoding field sizes, as they may\n                          change in a future Zulip release.\n\n                          **Changes**: New in Zulip 4.0 (feature level 53). Previously,\n                          this required `stream` in `fetch_event_types`, was called\n                          `stream_name_max_length`, and always had value 60.\n                      max_stream_description_length:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum allowed length for a stream description. Clients should use\n                          these properties rather than hardcoding field sizes, as they may\n                          change in a future Zulip release.\n\n                          **Changes**: New in Zulip 4.0 (feature level 53). Previously,\n                          this required `stream` in `fetch_event_types`, was called\n                          `stream_description_max_length`, and always had value 1024.\n                      max_topic_length:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum allowed length for a topic. Clients should use\n                          these properties rather than hardcoding field sizes, as they may\n                          change in a future Zulip release.\n\n                          **Changes**: New in Zulip 4.0 (feature level 53). Previously,\n                          this always had value 60.\n                      max_message_length:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum allowed length for a message. Clients should use\n                          these properties rather than hardcoding field sizes, as they may\n                          change in a future Zulip release.\n\n                          **Changes**: New in Zulip 4.0 (feature level 53). Previously,\n                          this always had value 10000.\n                      muted_topics:\n                        type: array\n                        description: |\n                          Present if `muted_topics` is present in `fetch_event_types`.\n\n                          Array of tuples, where each tuple describes a muted topic.\n                          The first element of tuple is the stream name in which the topic\n                          has to be muted, the second element is the topic name to be muted\n                          and the third element is an integer UNIX timestamp representing\n                          when the topic was muted.\n                        items:\n                          type: array\n                          items:\n                            oneOf:\n                              - type: string\n                              - type: integer\n                      muted_users:\n                        type: array\n                        description: |\n                          Present if `muted_users` is present in `fetch_event_types`.\n\n                          A list of dictionaries where each dictionary describes\n                          a [muted user](/api/mute-user).\n\n                          **Changes**: New in Zulip 4.0 (feature level 48).\n                        items:\n                          type: object\n                          additionalProperties: false\n                          description: |\n                            Object containing the user id and timestamp of a muted user.\n                          properties:\n                            id:\n                              type: integer\n                              description: |\n                                The ID of the muted user.\n                            timestamp:\n                              type: integer\n                              description: |\n                                An integer UNIX timestamp representing when the user was muted.\n                      presences:\n                        type: object\n                        description: |\n                          Present if `presence` is present in `fetch_event_types`.\n\n                          A dictionary where each entry describes the presence details for another\n                          user in the Zulip organization.\n\n                          Users who have been offline for multiple weeks may not appear in this object.\n                        additionalProperties:\n                          type: object\n                          description: |\n                            `{user_id} or {user_email}`: Depending on the value of `slim_presence`.\n                            Each entry contains the details of the presence of the user with the specific\n                            id or email.\n                          additionalProperties:\n                            $ref: \"#/components/schemas/Presence\"\n                      server_timestamp:\n                        type: number\n                        description: |\n                          Present if `presence` is present in `fetch_event_types`.\n\n                          The time when the server fetched the\n                          `presences` data included in the response.\n                          Matches the similar field in presence\n                          responses.\n\n                          **Changes**: New in Zulip 5.0 (feature level 70).\n                      realm_domains:\n                        type: array\n                        description: |\n                          Present if `realm_domains` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes a domain within\n                          which users can join the organization without and invitation.\n                        items:\n                          $ref: \"#/components/schemas/RealmDomain\"\n                      realm_emoji:\n                        description: |\n                          Present if `realm_emoji` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes a custom\n                          emoji that has been uploaded in this Zulip organization.\n                        oneOf:\n                          - type: object\n                            additionalProperties:\n                              $ref: \"#/components/schemas/RealmEmoji\"\n                          - type: array\n                            items:\n                              type: integer\n                      realm_linkifiers:\n                        type: array\n                        description: |\n                          Present if `realm_linkifiers` is present in `fetch_event_types`.\n\n                          Array of objects where each object describes a single\n                          [linkifier](/help/add-a-custom-linkifier).\n\n                          **Changes**: New in Zulip 4.0 (feature level 54). Clients can\n                          access these data on older server versions via the previous\n                          `realm_filters` key.\n                        items:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            pattern:\n                              type: string\n                              description: |\n                                The string regex pattern which represents the pattern that\n                                should be linkified on matching.\n                            url_format:\n                              type: string\n                              description: |\n                                The URL with which the pattern matching string should be linkified.\n                            id:\n                              type: integer\n                              description: |\n                                The ID of the linkifier.\n                      realm_filters:\n                        type: array\n                        deprecated: true\n                        items:\n                          type: array\n                          items:\n                            oneOf:\n                              - type: integer\n                              - type: string\n                        description: |\n                          Legacy property for linkifiers. Present if `realm_filters` is\n                          present in `fetch_event_types`.\n\n                          An array of tuples (fixed-length arrays) where each tuple describes\n                          a single [linkifier](/help/add-a-custom-linkifier).\n                          The first element of the tuple is a string regex pattern which represents\n                          the pattern that should be linkified on matching.\n\n                          The second element is the URL with which the\n                          pattern matching string should be linkified with and the third element\n                          is the id of the realm filter.\n\n                          **Changes**: Deprecated in Zulip 4.0 (feature level 54), replaced by\n                          the `realm_linkifiers` key instead.\n                      realm_playgrounds:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/RealmPlayground\"\n                        description: |\n                          Present if `realm_playgrounds` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes a\n                          [code playground](/help/code-blocks#code-playgrounds) configured for this Zulip organization.\n\n                          **Changes**: New in Zulip 4.0 (feature level 49).\n                      realm_user_groups:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/UserGroup\"\n                        description: |\n                          Present if `realm_user_groups` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes a\n                          [user group](/help/user-groups) in the Zulip organization.\n                      realm_bots:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Bot\"\n                        description: |\n                          Present if `realm_bot` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes a bot that the\n                          current user can administer. If the current user is an organization\n                          administrator, this will include all bots in the organization. Otherwise,\n                          it will only include bots owned by the user (either because the user created\n                          the bot or an administrator transferred the bot's ownership to the user).\n                      realm_embedded_bots:\n                        type: array\n                        items:\n                          type: object\n                          additionalProperties: false\n                          description: |\n                            Object containing details of an embedded bot. Embedded bots are an experimental\n                            feature not enabled in production yet.\n                          properties:\n                            name:\n                              type: string\n                              description: |\n                                The name of the bot.\n                            config:\n                              $ref: \"#/components/schemas/Config\"\n                        description: |\n                          Present if `realm_embedded_bots` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes an type of embedded\n                          bot that is available to be configured on this Zulip server.\n\n                          Clients only need these data if they contain UI for creating or administering bots.\n                      realm_incoming_webhook_bots:\n                        description: |\n                          Present if `realm_incoming_webhook_bots` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary describes an type of incoming webhook\n                          integration that is available to be configured on this Zulip server.\n\n                          Clients only need these data if they contain UI for creating or administering bots.\n                        type: array\n                        items:\n                          type: object\n                          additionalProperties: false\n                          description: |\n                            Object containing details of the bot.\n                          properties:\n                            name:\n                              type: string\n                              description: |\n                                The name of the bot.\n                            config:\n                              $ref: \"#/components/schemas/Config\"\n                      recent_private_conversations:\n                        description: |\n                          Present if `recent_private_conversations` is present in `fetch_event_types`.\n\n                          An array of dictionaries containing data on all private message and group private message\n                          conversations that the user has received (or sent) messages in, organized by\n                          conversation. This data set is designed to support UI elements such as the\n                          \"Private messages\" widget in the web application showing recent private message\n                          conversations that the user has participated in.\n\n                          \"Recent\" is defined as the server's discretion; the original implementation\n                          interpreted that as \"the 1000 most recent private messages the user received\".\n                        type: array\n                        items:\n                          type: object\n                          additionalProperties: false\n                          description: |\n                            Object describing a single recent private conversation in the user's history.\n                          properties:\n                            max_message_id:\n                              type: integer\n                              description: |\n                                The highest message id of the conversation, intended to support sorting\n                                the conversations by recency.\n                            user_ids:\n                              type: array\n                              items:\n                                type: integer\n                              description: |\n                                The list of users other than the current user in the private message\n                                conversation. This will be an empty list for private messages sent to\n                                oneself.\n                      subscriptions:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Subscriptions\"\n                        description: |\n                          Present if `subscription` is present in `fetch_event_types`.\n\n                          A array of dictionaries where each dictionary describes the properties\n                          of a stream the user is subscribed to (as well as that user's\n                          personal per-stream settings).\n                      unsubscribed:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/Subscriptions\"\n                        description: |\n                          Present if `subscription` is present in `fetch_event_types`.\n\n                          A array of dictionaries where each dictionary describes one of the\n                          streams the user has unsubscribed from but was previously subscribed to\n                          along with the subscription details.\n\n                          Unlike `never_subscribed`, the user might have messages in their personal\n                          message history that were sent to these streams.\n                      never_subscribed:\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: \"#/components/schemas/BasicStreamBase\"\n                            - additionalProperties: false\n                              properties:\n                                stream_id: {}\n                                name: {}\n                                description: {}\n                                date_created: {}\n                                invite_only: {}\n                                rendered_description: {}\n                                is_web_public: {}\n                                stream_post_policy: {}\n                                message_retention_days:\n                                  nullable: true\n                                history_public_to_subscribers: {}\n                                first_message_id:\n                                  nullable: true\n                                is_announcement_only: {}\n                                stream_weekly_traffic:\n                                  type: integer\n                                  nullable: true\n                                  description: |\n                                    The average number of messages sent to the stream in recent weeks,\n                                    rounded to the nearest integer.\n\n                                    Null means the stream was recently created and there is\n                                    insufficient data to estimate the average traffic.\n                                subscribers:\n                                  type: array\n                                  items:\n                                    type: integer\n                                  description: |\n                                    A list of user IDs of users who are subscribed\n                                    to the stream. Included only if `include_subscribers` is `true`.\n\n                                    If a user is not allowed to know the subscribers for\n                                    a stream, we will send an empty array. API authors\n                                    should use other data to determine whether users like\n                                    guest users are forbidden to know the subscribers.\n\n                        description: |\n                          Present if `subscription` is present in `fetch_event_types`.\n\n                          A array of dictionaries where each dictionary describes one of the\n                          streams that is visible to the user and the user has never been subscribed\n                          to.\n\n                          Important for clients containing UI where one can browse streams to subscribe\n                          to.\n                      unread_msgs:\n                        type: object\n                        items:\n                          $ref: \"#/components/schemas/BasicStream\"\n                        description: |\n                          Present if `message` and `update_message_flags` are both present in\n                          `event_types`.\n\n                          A set of data structures describing the conversations containing\n                          the 50000 most recent unread messages the user has received. This will usually\n                          contain every unread message the user has received, but clients should support\n                          users with even more unread messages (and not hardcode the number 50000).\n                        additionalProperties: false\n                        properties:\n                          count:\n                            type: integer\n                            description: |\n                              The total number of unread messages to display; this includes private\n                              and group private messages, as well as all messages to unmuted topics\n                              on unmuted streams.\n                          pms:\n                            type: array\n                            description: |\n                              An array of dictionaries where each entry contains details\n                              of unread private messages with a specific user.\n                            items:\n                              type: object\n                              description: |\n                                Object containing the details of a unread private message with\n                                a specific user. Note that in rare situations, it is possible\n                                for a message that you sent to another user to be marked as\n                                unread and thus appear here.\n                              additionalProperties: false\n                              properties:\n                                other_user_id:\n                                  type: integer\n                                  description: |\n                                    The user id of the other participant in this non-group private\n                                    message conversation. Will be your own user ID for messages\n                                    that you sent to only yourself.\n                                sender_id:\n                                  deprecated: true\n                                  type: integer\n                                  description: |\n                                    Old name for `other_user_id`. Clients should access this\n                                    field in Zulip server versions that do not yet support\n                                    `other_user_id`.\n\n                                    **Changes**: Deprecated in Zulip 5.0 (feature level 119).\n                                    We expect to provide a next version of the full `unread_msgs`\n                                    API before removing this legacy name.\n                                message_ids:\n                                  type: array\n                                  description: |\n                                    The message ids of the recent unread PM messages sent by the other user.\n                                  items:\n                                    type: integer\n                          streams:\n                            type: array\n                            description: |\n                              An array of dictionaries where each dictionary contains\n                              details of all unread messages of a single subscribed stream,\n                              including muted streams.\n\n                              **Changes**: Prior to Zulip 5.0 (feature level 90), the\n                              dictionaries included an additional `sender_ids` key listing\n                              the set of IDs of users who had sent the unread messages.\n                            items:\n                              type: object\n                              description: |\n                                `{message_id}`: Object containing the details of a unread stream\n                                message with the message_id as the key.\n                              additionalProperties: false\n                              properties:\n                                topic:\n                                  type: string\n                                  description: |\n                                    The topic under which the message was sent.\n                                stream_id:\n                                  type: integer\n                                  description: |\n                                    The id of the stream to which the message was sent.\n                                unread_message_ids:\n                                  type: array\n                                  description: |\n                                    The message ids of the recent unread messages sent in this stream.\n                                  items:\n                                    type: integer\n                          huddles:\n                            type: array\n                            description: |\n                              An array of dictionaries where each dictionary contains\n                              details of all unread group private messages of a single\n                              group.\n                            items:\n                              type: object\n                              description: |\n                                Object containing the details of a unread group PM\n                                messages of a single group.\n                              additionalProperties: false\n                              properties:\n                                user_ids_string:\n                                  type: string\n                                  description: |\n                                    A string containing the IDs of all users in the group\n                                    private message conversation separated by commas\n                                    (,). Example: \"1,2,3\".\n                                message_ids:\n                                  type: array\n                                  description: |\n                                    The message ids of the recent unread messages which have been sent in\n                                    this group.\n                                  items:\n                                    type: integer\n                          mentions:\n                            type: array\n                            description: |\n                              Array containing the ids of all messages in which the user has been mentioned.\n                              For muted streams, wildcard mentions will not be considered for this array.\n                            items:\n                              type: integer\n                          old_unreads_missing:\n                            type: boolean\n                            description: |\n                              True if this data set was truncated because the user has too many\n                              unread messages. When truncation occurs, only the most recent\n                              `MAX_UNREAD_MESSAGES` (currently 50000) messages will be considered\n                              when forming this response. When true, we recommend that clients\n                              display a warning, as they are likely to produce erroneous results\n                              until reloaded with the user having fewer than `MAX_UNREAD_MESSAGES`\n                              unread messages.\n\n                              **Changes**: New in Zulip 4.0 (feature level 44).\n                      starred_messages:\n                        type: array\n                        items:\n                          type: integer\n                        description: |\n                          Present if `starred_messages` is present in `fetch_event_types`.\n\n                          Array containing the ids of all messages which have been\n                          [starred](/help/star-a-message) by the user.\n                      streams:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/BasicStream\"\n                        description: |\n                          Present if `stream` is present in `fetch_event_types`.\n\n                          Array of dictionaries where each dictionary contains details about\n                          a single stream in the organization that is visible to the user.\n\n                          For organization administrators, this will include all private streams\n                          in the organization.\n                      realm_default_streams:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/BasicStream\"\n                        description: |\n                          Present if `default_streams` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary contains details\n                          about a single [default stream](/help/set-default-streams-for-new-users)\n                          for the Zulip organization.\n                      realm_default_stream_groups:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/DefaultStreamGroup\"\n                        description: |\n                          Present if `default_stream_groups` is present in `fetch_event_types`.\n\n                          An array of dictionaries where each dictionary contains details\n                          about a single default stream group configured for this\n                          Zulip organization.\n\n                          Default stream groups are an experimental feature.\n                      stop_words:\n                        type: array\n                        items:\n                          type: string\n                        description: |\n                          Present if `stop_words` is present in `fetch_event_types`.\n\n                          An array containing the stop words used by the Zulip server's\n                          full-text search implementation. Useful for showing helpful\n                          error messages when a search returns limited results because\n                          a stop word in the query was ignored.\n                      user_status:\n                        type: object\n                        description: |\n                          Present if `user_status` is present in `fetch_event_types`.\n\n                          A dictionary which contains the [status](/help/status-and-availability)\n                          of all users in the Zulip organization who have set a status.\n\n                          **Changes**: The emoji parameters are new in Zulip 5.0 (feature level 86).\n                          Previously, Zulip did not support emoji associated with statuses.\n                        additionalProperties:\n                          description: |\n                            `{user_id}`: Object containing the status details of a user\n                            with the key of the object being the id of the user.\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            away:\n                              type: boolean\n                              description: |\n                                If present, the user has marked themself \"away\".\n                            status_text:\n                              type: string\n                              description: |\n                                If present, the text content of the user's status message.\n                            emoji_name:\n                              type: string\n                              description: |\n                                If present, the name for the emoji to associate with the user's status.\n\n                                **Changes**: New in Zulip 5.0 (feature level 86).\n                            emoji_code:\n                              type: string\n                              description: |\n                                If present, a unique identifier, defining the specific emoji codepoint\n                                requested, within the namespace of the `reaction_type`.\n\n                                **Changes**: New in Zulip 5.0 (feature level 86).\n                            reaction_type:\n                              type: string\n                              description: |\n                                If present, a string indicating the type of emoji. Each emoji\n                                `reaction_type` has an independent namespace for values of `emoji_code`.\n\n                                Must be one of the following values:\n\n                                - `unicode_emoji` : In this namespace, `emoji_code` will be a\n                                  dash-separated hex encoding of the sequence of Unicode codepoints\n                                  that define this emoji in the Unicode specification.\n\n                                - `realm_emoji` : In this namespace, `emoji_code` will be the ID of\n                                  the uploaded [custom emoji](/help/custom-emoji).\n\n                                - `zulip_extra_emoji` : These are special emoji included with Zulip.\n                                  In this namespace, `emoji_code` will be the name of the emoji (e.g.\n                                  \"zulip\").\n\n                                **Changes**: New in Zulip 5.0 (feature level 86).\n                      user_settings:\n                        type: object\n                        description: |\n                          Present if `user_settings` is present in `fetch_event_types`.\n\n                          A dictionary containing the user's personal settings.\n\n                          **Changes**: New in Zulip 5.0 (feature level 89). Previously,\n                          these settings appeared in the top-level object, where they are\n                          available for clients without the `user_settings_object` client\n                          capability for backwards-compatibility.\n                        additionalProperties: false\n                        properties:\n                          twenty_four_hour_time:\n                            type: boolean\n                            description: |\n                              Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).\n                          dense_mode:\n                            type: boolean\n                            description: |\n                              This setting has no effect at present. It is reserved for use in controlling\n                              the default font size in Zulip.\n                          starred_message_counts:\n                            type: boolean\n                            description: |\n                              Whether clients should display the [number of starred\n                              messages](/help/star-a-message#display-the-number-of-starred-messages).\n                          fluid_layout_width:\n                            type: boolean\n                            description: |\n                              Whether to use the [maximum available screen width](/help/enable-full-width-display)\n                              for the web app's center panel (message feed, recent topics) on wide screens.\n                          high_contrast_mode:\n                            type: boolean\n                            description: |\n                              This setting is reserved for use to control variations in Zulip's design\n                              to help visually impaired users.\n                          color_scheme:\n                            type: integer\n                            description: |\n                              Controls which [color theme](/help/dark-theme) to use.\n\n                              - 1 - Automatic\n                              - 2 - Dark theme\n                              - 3 - Light theme\n\n                              Automatic detection is implementing using the standard `prefers-color-scheme`\n                              media query.\n                          translate_emoticons:\n                            type: boolean\n                            description: |\n                              Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)\n                              in messages the user sends.\n                          display_emoji_reaction_users:\n                            type: boolean\n                            description: |\n                              Whether to display the names of reacting users on a message.\n\n                              When enabled, clients should display the names of reacting\n                              users, rather than a count, for messages with few total\n                              reactions. The ideal cutoff may depend on the space\n                              available for displaying reactions; the official web\n                              application displays names when \u003c=3 total reactions are\n                              present with this setting enabled.\n\n                              **Changes**: New in Zulip 6.0 (feature level 125).\n                          default_language:\n                            type: string\n                            description: |\n                              What [default language](/help/change-your-language) to use for the account.\n\n                              This controls both the Zulip UI as well as email notifications sent to the user.\n\n                              The value needs to be a standard language code that the Zulip server has\n                              translation data for; for example, `\"en\"` for English or `\"de\"` for German.\n                          default_view:\n                            type: string\n                            description: |\n                              The [default view](/help/configure-default-view) used when opening a new\n                              Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.\n\n                              - \"recent_topics\" - Recent topics view\n                              - \"all_messages\" - All messages view\n                          escape_navigates_to_default_view:\n                            type: boolean\n                            description: |\n                              Whether the escape key navigates to the\n                              [configured default view](/help/configure-default-view).\n\n                              **Changes**: New in Zulip 5.0 (feature level 107).\n                          left_side_userlist:\n                            type: boolean\n                            description: |\n                              Whether the users list on left sidebar in narrow windows.\n\n                              This feature is not heavily used and is likely to be reworked.\n                          emojiset:\n                            type: string\n                            description: |\n                              The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),\n                              used to display emoji to the user everywhere they appear in the UI.\n\n                              - \"google\" - Google modern\n                              - \"google-blob\" - Google classic\n                              - \"twitter\" - Twitter\n                              - \"text\" - Plain text\n                          demote_inactive_streams:\n                            type: integer\n                            description: |\n                              Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.\n\n                              - 1 - Automatic\n                              - 2 - Always\n                              - 3 - Never\n                          timezone:\n                            type: string\n                            description: |\n                              The user's [configured time zone](/help/change-your-timezone).\n\n                              Time zone values supported by the server are served at\n                              [/static/generated/timezones.json](/static/generated/timezones.json).\n                          enter_sends:\n                            type: boolean\n                            description: |\n                              Whether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)\n                              in the compose box is enabled.\n                          enable_drafts_synchronization:\n                            type: boolean\n                            description: |\n                              A boolean parameter to control whether synchronizing drafts is enabled for\n                              the user. When synchronization is disabled, all drafts stored in the server\n                              will be automatically deleted from the server.\n\n                              This does not do anything (like sending events) to delete local copies of\n                              drafts stored in clients.\n                          enable_stream_desktop_notifications:\n                            type: boolean\n                            description: |\n                              Enable visual desktop notifications for stream messages.\n                          enable_stream_email_notifications:\n                            type: boolean\n                            description: |\n                              Enable email notifications for stream messages.\n                          enable_stream_push_notifications:\n                            type: boolean\n                            description: |\n                              Enable mobile notifications for stream messages.\n                          enable_stream_audible_notifications:\n                            type: boolean\n                            description: |\n                              Enable audible desktop notifications for stream messages.\n                          notification_sound:\n                            type: string\n                            description: |\n                              Notification sound name.\n                          enable_desktop_notifications:\n                            type: boolean\n                            description: |\n                              Enable visual desktop notifications for private messages and @-mentions.\n                          enable_sounds:\n                            type: boolean\n                            description: |\n                              Enable audible desktop notifications for private messages and\n                              @-mentions.\n                          email_notifications_batching_period_seconds:\n                            type: integer\n                            description: |\n                              The duration (in seconds) for which the server should wait to batch\n                              email notifications before sending them.\n                          enable_offline_email_notifications:\n                            type: boolean\n                            description: |\n                              Enable email notifications for private messages and @-mentions received\n                              when the user is offline.\n                          enable_offline_push_notifications:\n                            type: boolean\n                            description: |\n                              Enable mobile notification for private messages and @-mentions received\n                              when the user is offline.\n                          enable_online_push_notifications:\n                            type: boolean\n                            description: |\n                              Enable mobile notification for private messages and @-mentions received\n                              when the user is online.\n                          enable_digest_emails:\n                            type: boolean\n                            description: |\n                              Enable digest emails when the user is away.\n                          enable_marketing_emails:\n                            type: boolean\n                            description: |\n                              Enable marketing emails. Has no function outside Zulip Cloud.\n                          enable_login_emails:\n                            type: boolean\n                            description: |\n                              Enable email notifications for new logins to account.\n                          message_content_in_email_notifications:\n                            type: boolean\n                            description: |\n                              Include the message's content in email notifications for new messages.\n                          pm_content_in_desktop_notifications:\n                            type: boolean\n                            description: |\n                              Include content of private messages in desktop notifications.\n                          wildcard_mentions_notify:\n                            type: boolean\n                            description: |\n                              Whether wildcard mentions (E.g. @**all**) should send notifications\n                              like a personal mention.\n                          desktop_icon_count_display:\n                            type: integer\n                            description: |\n                              Unread count badge (appears in desktop sidebar and browser tab)\n\n                              - 1 - All unreads\n                              - 2 - Private messages and mentions\n                              - 3 - None\n                          realm_name_in_notifications:\n                            type: boolean\n                            description: |\n                              Include organization name in subject of message notification emails.\n                          presence_enabled:\n                            type: boolean\n                            description: |\n                              Display the presence status to other users when online.\n                          available_notification_sounds:\n                            type: array\n                            items:\n                              type: string\n                            description: |\n                              Array containing the names of the notification sound options\n                              supported by this Zulip server. Only relevant to support UI\n                              for configuring notification sounds.\n                          emojiset_choices:\n                            description: |\n                              Array of dictionaries where each dictionary describes an emoji set\n                              supported by this version of the Zulip server.\n\n                              Only relevant to clients with configuration UI for choosing an emoji set;\n                              the currently selected emoji set is available in the `emojiset` key.\n\n                              See [PATCH /settings](/api/update-settings) for details on\n                              the meaning of this setting.\n                            type: array\n                            items:\n                              type: object\n                              description: |\n                                Object describing a emoji set.\n                              additionalProperties: false\n                              properties:\n                                key:\n                                  type: string\n                                  description: |\n                                    The key or the name of the emoji set which will be the value\n                                    of `emojiset` if this emoji set is chosen.\n                                text:\n                                  type: string\n                                  description: |\n                                    The text describing the emoji set.\n                          send_private_typing_notifications:\n                            type: boolean\n                            description: |\n                              Whether the user has chosen to send [typing\n                              notifications](/help/status-and-availability#typing-notifications)\n                              when composing private messages. The client should send typing\n                              notifications for private messages if and only if this setting is enabled.\n\n                              **Changes**: New in Zulip 5.0 (feature level 105).\n                          send_stream_typing_notifications:\n                            type: boolean\n                            description: |\n                              Whether the user has chosen to send [typing\n                              notifications](/help/status-and-availability#typing-notifications)\n                              when composing stream messages. The client should send typing\n                              notifications for stream messages if and only if this setting is enabled.\n\n                              **Changes**: New in Zulip 5.0 (feature level 105).\n                          send_read_receipts:\n                            type: boolean\n                            description: |\n                              Whether other users are allowed to see whether you've\n                              read messages.\n\n                              **Changes**: New in Zulip 5.0 (feature level 105).\n                      has_zoom_token:\n                        type: boolean\n                        description: |\n                          Present if `video_calls` is present in `fetch_event_types`.\n\n                          A boolean which signifies whether the user has a zoom token and has thus completed\n                          OAuth flow for the [Zoom integration](/help/start-a-call). Clients need\n                          to know whether initiating Zoom OAuth is required before creating a Zoom call.\n                      giphy_api_key:\n                        type: string\n                        description: |\n                          Present if `giphy` is present in `fetch_event_types`.\n\n                          GIPHY's client-side SDKs needs this API key to use the GIPHY API.\n                          GIPHY API keys are not secret (their main purpose appears to be\n                          allowing GIPHY to block a problematic app). Please don't use our API\n                          key for an app unrelated to Zulip.\n\n                          Developers of clients should also read the\n                          [GIPHY API TOS](https://support.giphy.com/hc/en-us/articles/360028134111-GIPHY-API-Terms-of-Service-)\n                          before using this API key.\n\n                          **Changes**: Added in Zulip 4.0 (feature level 47).\n                      enable_desktop_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_digest_emails:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_login_emails:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_marketing_emails:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      email_notifications_batching_period_seconds:\n                        deprecated: true\n                        type: integer\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_offline_email_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_offline_push_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_online_push_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_sounds:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_stream_desktop_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_stream_email_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_stream_push_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_stream_audible_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      wildcard_mentions_notify:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      message_content_in_email_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      notification_sound:\n                        deprecated: true\n                        type: string\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      pm_content_in_desktop_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      desktop_icon_count_display:\n                        deprecated: true\n                        type: integer\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      realm_name_in_notifications:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      presence_enabled:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          The current value of this global notification setting for the user.\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      available_notification_sounds:\n                        deprecated: true\n                        type: array\n                        items:\n                          type: string\n                        description: |\n                          Present if `update_global_notifications` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in their\n                          client_capabilities` when registering the event queue.\n\n                          Array containing the names of the notification sound options supported by\n                          this Zulip server. Only relevant to support UI for configuring notification\n                          sounds.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      color_scheme:\n                        deprecated: true\n                        type: integer\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          The color scheme selected by the user.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      default_language:\n                        deprecated: true\n                        type: string\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          The default language chosen by the user.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      demote_inactive_streams:\n                        deprecated: true\n                        type: integer\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has chosen to demote inactive streams.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      dense_mode:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has switched on dense mode. Dense mode is an experimental\n                          feature that is only available in development environments.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      emojiset:\n                        deprecated: true\n                        type: string\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          The name of the emoji set that the user has chosen.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      enable_drafts_synchronization:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`.\n\n                          Whether drafts synchronization is enabled for the user. If disabled,\n                          clients will receive an error when trying to use the `drafts` endpoints.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n\n                          New in Zulip 5.0 (feature level 87).\n                      fluid_layout_width:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has chosen for the layout width to be fluid.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      default_view:\n                        deprecated: true\n                        type: string\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          The [default view](/help/configure-default-view) in Zulip, represented\n                          as the URL suffix after `#` to be rendered when Zulip loads.\n\n                          Currently supported values are `all_messages` and `recent_topics`.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      high_contrast_mode:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether has switched on high contrast mode.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      left_side_userlist:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has chosen for the userlist to be displayed\n                          on the left side of the screen (for desktop app and web app) in narrow\n                          windows.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      starred_message_counts:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has chosen the number of starred messages to\n                          be displayed similar to unread counts.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      timezone:\n                        deprecated: true\n                        type: string\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          The time zone configured for the user. This is used primarily to display\n                          the user's time zone to other users.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      translate_emoticons:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has chosen for emoticons to be translated into emoji\n                          in the Zulip compose box.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      twenty_four_hour_time:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user has chosen a twenty four hour time display (true)\n                          or a twelve hour one (false).\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                      emojiset_choices:\n                        deprecated: true\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Array of dictionaries where each dictionary describes an emoji set\n                          supported by this version of the Zulip server.\n\n                          Only relevant to clients with configuration UI for choosing an emoji set;\n                          the currently selected emoji set is available in the `emojiset` key.\n\n                          See [PATCH /settings](/api/update-settings) for details on\n                          the meaning of this setting.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and access the `user_settings` object instead.\n                        type: array\n                        items:\n                          type: object\n                          description: |\n                            Object describing a emoji set.\n                          additionalProperties: false\n                          properties:\n                            key:\n                              type: string\n                              description: |\n                                The key or the name of the emoji set which will be the value\n                                of `emojiset` if this emoji set is chosen.\n                            text:\n                              type: string\n                              description: |\n                                The text describing the emoji set.\n                      realm_add_custom_emoji_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for which users can upload new custom emoji\n                          in this organization.\n\n                          - 1 = Members only\n                          - 2 = Administrators only\n                          - 3 = [Full members][calc-full-member] only\n                          - 4 = Moderators only\n\n                          **Changes**: New in Zulip 5.0 (feature level 85) replacing the\n                          previous `realm_add_emoji_by_admins_only` boolean.\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_allow_edit_history:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether this organization is configured to allow users to access\n                          [message edit history](/help/view-a-messages-edit-history).\n                      realm_delete_own_message_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] defining which users can delete\n                          messages that they had sent.\n\n                          - 1 = members only\n                          - 2 = admins only\n                          - 3 = [full members][calc-full-member] only\n                          - 4 = admins and moderators only\n                          - 5 = everyone\n\n                          **Changes**: New in Zulip 5.0 (feature level 101), replacing the\n                          previous `allow_message_deleting` boolean;\n                          `true` corresponded to `everyone`, and `false` to `admins only`.\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_bot_creation_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy](/api/roles-and-permissions#permission-levels)\n                          for which users can create bot users in this organization.\n                      realm_create_public_stream_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for which users can create public streams\n                          in this organization.\n\n                          - 1 = members only\n                          - 2 = admins only\n                          - 3 = [full members][calc-full-member] only\n                          - 4 = admins and moderators only\n\n                          **Changes**: Before Zulip 5.0 (feature level 102), permission to\n                          create streams was controlled by the `realm_create_stream_policy` setting.\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_create_private_stream_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for which users can create private streams\n                          in this organization.\n\n                          - 1 = members only\n                          - 2 = admins only\n                          - 3 = [full members][calc-full-member] only\n                          - 4 = admins and moderators only\n\n                          **Changes**: Before Zulip 5.0 (feature level 102), permission to\n                          create streams was controlled by the `realm_create_stream_policy` setting.\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_create_web_public_stream_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Has no effect and should not be displayed in settings UI\n                          unless the Zulip server has the `WEB_PUBLIC_STREAMS_ENABLED`\n                          server-level setting enabled and the organization has enabled\n                          the `enable_spectator_access` realm setting.\n\n                          The [policy][permission-level] for which users can create web\n                          public streams in this organization. Allowed\n                          values are:\n\n                          - 2 = admins only\n                          - 4 = admins and moderators only\n                          - 6 = nobody\n                          - 7 = owners only\n\n                          **Changes**: Added in Zulip 5.0 (feature level 103).\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                      realm_invite_to_stream_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy](/api/roles-and-permissions#permission-levels)\n                          for which users can add other users to streams in this organization.\n                      realm_wildcard_mention_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for who can use wildcard mentions\n                          in large streams.\n\n                          - 1 =\u003e Any user can use wildcard mentions in large streams.\n                          - 2 =\u003e Only members can use wildcard mentions in large streams.\n                          - 3 =\u003e Only [full members][calc-full-member] can use wildcard mentions in large streams.\n                          - 4 =\u003e Only stream and organization administrators can use wildcard mentions in large streams.\n                          - 5 =\u003e Only organization administrators can use wildcard mentions in large streams.\n                          - 6 =\u003e Nobody can use wildcard mentions in large streams.\n                          - 7 =\u003e Only organization administrators and moderators can use wildcard mentions in large streams.\n\n                          All users will receive a warning/reminder when using\n                          mentions in large streams, even when permitted to do so.\n\n                          **Changes**: New in Zulip 4.0 (feature level 33). Moderators option added in\n                          Zulip 4.0 (feature level 62).\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_default_language:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [notifications language for the organization](/help/change-the-default-language-for-your-organization).\n                      realm_description:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The description of the organization, used on login and registration pages.\n                      realm_digest_emails_enabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization has enabled [weekly digest emails](/help/digest-emails).\n                      realm_disallow_disposable_email_addresses:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization disallows disposable email\n                          addresses.\n                      realm_email_address_visibility:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for which users in this organization can see\n                          the real email addresses of other users.\n\n                          - 1 = everyone\n                          - 2 = members only\n                          - 3 = administrators only\n                          - 4 = nobody (though note that administrators can change this setting).\n                          - 5 = moderators only\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                      realm_email_changes_disabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether users are allowed to change their own email address in this\n                          organization. This is typically disabled for organizations that\n                          synchronize accounts from LDAP or a similar corporate database.\n                      realm_invite_required:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether an invitation is required to join this organization.\n                      realm_invite_to_realm_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          [Policy][permission-level] for [who can invite new\n                          users](/help/restrict-account-creation#change-who-can-send-invitations)\n                          to join the organization:\n\n                          - 1 = Members only\n                          - 2 = Administrators only\n                          - 3 = [Full members][calc-full-member] only\n                          - 4 = Moderators only\n                          - 6 = Nobody\n\n                          **Changes**: New in Zulip 4.0 (feature level 50) replacing the\n                          previous `realm_invite_by_admins_only` boolean.\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_move_messages_between_streams_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for which users can move messages\n                          from one stream to another.\n\n                          - 1 = Members only\n                          - 2 = Administrators only\n                          - 3 = [Full members][calc-full-member] only\n                          - 4 = Moderators only\n\n                          **Changes**: New in Zulip 4.0 (feature level 56)\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_inline_image_preview:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether this organization has been configured to enable\n                          [previews of linked images](/help/allow-image-link-previews).\n                      realm_inline_url_embed_preview:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether this organization has been configured to enable\n                          [previews of linked websites](/help/allow-image-link-previews).\n                      realm_mandatory_topics:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether [topics are required](/help/require-topics) for messages in this organization.\n                      realm_message_retention_days:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The default [message retention policy](/help/message-retention-policy)\n                          for this organization. It can have one special value:\n\n                          - `-1` denoting that the messages will be retained forever for this realm, by default.\n\n                          **Changes**: Prior to Zulip 3.0 (feature level 22), no limit was\n                          encoded as `null` instead of `-1`. Clients can correctly handle all\n                          server versions by treating both `-1` and `null` as indicating\n                          unlimited message retention.\n                      realm_name:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The name of the organization, used in login pages etc.\n                      realm_name_changes_disabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Indicates whether users are\n                          [allowed to change](/help/restrict-name-and-email-changes) their name\n                          via the Zulip UI in this organization. Typically disabled\n                          in organizations syncing this type of account information from\n                          an external user database like LDAP.\n                      realm_avatar_changes_disabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Indicates whether users are\n                          [allowed to change](/help/restrict-name-and-email-changes) their avatar\n                          via the Zulip UI in this organization. Typically disabled\n                          in organizations syncing this type of account information from\n                          an external user database like LDAP.\n                      realm_emails_restricted_to_domains:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether [new users joining](/help/restrict-account-creation#configuring-email-domain-restrictions)\n                          this organization are required to have an email\n                          address in one of the `realm_domains` configured for the organization.\n                      realm_send_welcome_emails:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether or not this organization is configured to send the standard Zulip\n                          [welcome emails](/help/disable-welcome-emails) to new users joining the organization.\n                      realm_message_content_allowed_in_email_notifications:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether notification emails in this organization are allowed to\n                          contain Zulip the message content, or simply indicate that a new\n                          message was sent.\n                      realm_enable_spectator_access:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether web-public streams and related anonymous access APIs/features\n                          are enabled in this organization.\n\n                          Can only be enabled if the `WEB_PUBLIC_STREAMS_ENABLED`\n                          [server setting][server-settings] is enabled on the Zulip\n                          server. See also the `create_web_public_stream_policy` realm\n                          setting.\n\n                          **Changes**: New in Zulip 5.0 (feature level 109).\n\n                          [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html\n                      realm_want_advertise_in_communities_directory:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization has given permission to be advertised in the\n                          Zulip [communities directory](/help/communities-directory).\n\n                          Useful only to clients supporting changing this setting for the\n                          organization.\n\n                          Giving permission via this setting does not guarantee that an\n                          organization will be listed in the Zulip communities directory.\n\n                          **Changes**: New in Zulip 6.0 (feature level 129).\n                      realm_video_chat_provider:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The configured video call provider for the organization.\n                      realm_giphy_rating:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The configured GIPHY rating for the organization.\n\n                          **Changes**: New in Zulip 4.0 (feature level 55).\n                      realm_waiting_period_threshold:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Members whose accounts have been created at least this many days ago\n                          will be treated as [full members][calc-full-member]\n                          for the purpose of settings that restrict access to new members.\n\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_digest_weekday:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The day of the week when the organization will send\n                          its weekly digest email to inactive users.\n                      realm_private_message_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          [Policy](/api/roles-and-permissions#permission-levels)\n                          for [who can send private messages](/help/restrict-private-messages)\n                          in this organization.\n\n                          - 1 = Everyone\n                          - 2 = Nobody\n                      realm_user_group_edit_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The organization's [policy][permission-level] for\n                          [who can manage user groups][user-group-permissions].\n\n                          - 1 = All members can create and edit user groups\n                          - 2 = Only organization administrators can create and edit user groups\n                          - 3 = Only [full members][calc-full-member] can create and edit user groups.\n                          - 4 = Only organization administrators and moderators can create and edit user groups.\n\n                          [user-group-permissions]: /help/user-groups#configure-who-can-create-and-manage-user-groups\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_default_code_block_language:\n                        type: string\n                        nullable: true\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The default pygments language code to be used for a code blocks\n                          in this organization. Null if no default has been set.\n                      realm_message_content_delete_limit_seconds:\n                        type: integer\n                        nullable: true\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Messages sent more than this many seconds ago cannot be deleted\n                          with this organization's\n                          [message deletion policy](/help/configure-message-editing-and-deletion).\n\n                          Will not be 0. A 'null' value means no limit: messages can be deleted\n                          regardless of how long ago they were sent.\n\n                          **Changes**: No limit was represented using the\n                          special value `0` before Zulip 5.0 (feature level 100).\n                      realm_authentication_methods:\n                        type: object\n                        additionalProperties:\n                          description: |\n                            Boolean describing whether the authentication method (i.e its key)\n                            is enabled in this organization.\n                          type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Dictionary of 'authentication_method_name': 'boolean' with each\n                          entry describing whether the authentication name can be used for\n                          authenticating into the organization.\n                      realm_allow_message_editing:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether this organizations [message edit policy](/help/configure-message-editing-and-deletion)\n                          allows editing the content of messages.\n                      realm_edit_topic_policy:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [policy][permission-level] for which users can edit topics of any message.\n\n                          - 1 = members only\n                          - 2 = admins only\n                          - 3 = [full members][calc-full-member] only\n                          - 4 = moderators only\n                          - 5 = everyone\n\n                          **Changes**: New in Zulip 5.0 (feature level 75), replacing the\n                          previous `allow_community_topic_editing` boolean.\n\n                          [permission-level]: /api/roles-and-permissions#permission-levels\n                          [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n                      realm_message_content_edit_limit_seconds:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Messages sent more than this many seconds ago cannot be edited\n                          with this organization's\n                          [message edit policy](/help/configure-message-editing-and-deletion).\n                      realm_community_topic_editing_limit_seconds:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Messages sent more than this many seconds ago cannot have\n                          their topics edited by other users with this organization's\n                          [message edit policy](/help/configure-message-editing-and-deletion).\n\n                          **Changes**: New in Zulip 3.0 (feature level 11). Previously this\n                          value was hardcoded to 86400 seconds (1 day).\n                      realm_icon_url:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The URL of the organization's [profile icon](/help/create-your-organization-profile).\n                      realm_icon_source:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          String indicating whether the organization's\n                          [profile icon](/help/create-your-organization-profile) was uploaded\n                          by a user or is the default. Useful for UI allowing editing the organization's icon.\n\n                          - \"G\" means generated by Gravatar (the default).\n                          - \"U\" means uploaded by an organization administrator.\n                      max_icon_file_size_mib:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum file size allowed for the organization's\n                          icon. Useful for UI allowing editing the organization's icon.\n\n                          **Changes**: New in Zulip 5.0 (feature level 72). Previously,\n                          this was called `max_icon_file_size`.\n                      realm_logo_url:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The URL of the organization's wide logo configured in the\n                          [organization profile](/help/create-your-organization-profile).\n                      realm_logo_source:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          String indicating whether the organization's\n                          [profile wide logo](/help/create-your-organization-profile) was uploaded\n                          by a user or is the default. Useful for UI allowing editing the\n                          organization's wide logo.\n\n                          - \"D\" means the logo is the default Zulip logo.\n                          - \"U\" means uploaded by an organization administrator.\n                      realm_night_logo_url:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The URL of the organization's dark theme wide-format logo configured in the\n                          [organization profile](/help/create-your-organization-profile).\n                      realm_night_logo_source:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          String indicating whether the organization's dark theme\n                          [profile wide logo](/help/create-your-organization-profile) was uploaded\n                          by a user or is the default. Useful for UI allowing editing the\n                          organization's wide logo.\n\n                          - \"D\" means the logo is the default Zulip logo.\n                          - \"U\" means uploaded by an organization administrator.\n                      max_logo_file_size_mib:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum file size allowed for the uploaded organization logos.\n\n                          **Changes**: New in Zulip 5.0 (feature level 72). Previously,\n                          this was called `max_logo_file_size`.\n                      realm_bot_domain:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The fake email domain that will be used for new bots created this\n                          organization. Useful for UI for creating bots.\n                      realm_uri:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The URL for the organization.\n                      realm_available_video_chat_providers:\n                        type: object\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Dictionary where each entry describes a supported\n                          [video call provider](/help/start-a-call)\n                          that is configured on this server and could be selected by an\n                          organization administrator.\n\n                          Useful for administrative settings UI that allows changing the\n                          video call provider.\n                        additionalProperties:\n                          description: |\n                            `{provider_name}`: Dictionary containing the details of the\n                            video call provider with the name of the chat provider as\n                            the key.\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            name:\n                              type: string\n                              description: |\n                                The name of the video call provider.\n                            id:\n                              type: integer\n                              description: |\n                                The ID of the video call provider.\n                      realm_presence_disabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether online presence of other users is shown in this\n                          organization.\n                      settings_send_digest_emails:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether this Zulip server is configured to allow organizations to\n                          enable [digest emails](/help/digest-emails).\n\n                          Relevant for administrative settings UI that can change the digest\n                          email settings.\n                      realm_is_zephyr_mirror_realm:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization is a Zephyr mirror realm.\n                      realm_email_auth_enabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization has enabled Zulip's default email and password\n                          authentication feature. Determines whether Zulip stores a password\n                          for the user and clients should offer any UI for changing the user's\n                          Zulip password.\n                      realm_password_auth_enabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization allows any sort of password-based\n                          authentication (whether via EmailAuthBackend or LDAP passwords).\n\n                          Determines whether a client might ever need to display a password prompt\n                          (clients will primarily look at this attribute in [server_settings](/api/get-server-settings)\n                          before presenting a login page).\n                      realm_push_notifications_enabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether push notifications are enabled for this organization. Typically\n                          `false` for self-hosted servers that have not configured the\n                          [Mobile push notifications service](https://zulip.readthedocs.io/en/latest/production/mobile-push-notifications.html).\n                      realm_upload_quota_mib:\n                        type: integer\n                        nullable: true\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The total quota for uploaded files in this organization.\n\n                          Clients are not responsible for checking this quota; it is included\n                          in the API only for display purposes.\n\n                          Null if there is no limit.\n\n                          **Changes**: New in Zulip 5.0 (feature level 72). Previously,\n                          this was called `realm_upload_quota`.\n                      realm_org_type:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The [organization type](/help/organization-type) for the realm.\n                          Useful only to clients supporting changing this setting for the\n                          organization, or clients implementing onboarding content or\n                          other features that varies with organization type.\n\n                          - 0 = Unspecified\n                          - 10 = Business\n                          - 20 = Open-source project\n                          - 30 = Education (non-profit)\n                          - 35 = Education (for-profit)\n                          - 40 = Research\n                          - 50 = Event or conference\n                          - 60 = Non-profit (registered)\n                          - 70 = Government\n                          - 80 = Political group\n                          - 90 = Community\n                          - 100 = Personal\n                          - 1000 = Other\n\n                          **Changes**: New in Zulip 6.0 (feature level 128).\n                      realm_plan_type:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The plan type of the organization.\n\n                          - 1 = Self-hosted organization (SELF_HOSTED)\n                          - 2 = Zulip Cloud free plan (LIMITED)\n                          - 3 = Zulip Cloud Standard plan (STANDARD)\n                          - 4 = Zulip Cloud Standard plan, sponsored for free (STANDARD_FREE)\n                      zulip_plan_is_not_limited:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the organization is using a limited (Zulip Cloud Free) plan.\n                      upgrade_text_for_wide_organization_logo:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Text to use when displaying UI for wide organization logos, a feature\n                          that is currently not available on the Zulip Cloud Free plan.\n\n                          Useful only for clients supporting administrative UI for uploading\n                          a new wide organization logo to brand the organization.\n                      realm_default_external_accounts:\n                        type: object\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Dictionary where each entry describes a default external\n                          account type that can be configured with Zulip's custom\n                          profile fields feature.\n                        additionalProperties:\n                          description: |\n                            `{site_name}`: Dictionary containing the details of the\n                            default external account provider with the name of the\n                            website as the key.\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            name:\n                              type: string\n                              description: |\n                                The name of the external account provider\n                            text:\n                              type: string\n                              description: |\n                                The text describing the external account.\n                            hint:\n                              type: string\n                              description: |\n                                The help text to be displayed for the\n                                custom profile field in user-facing\n                                settings UI for configuring custom\n                                profile fields for this account.\n                            url_pattern:\n                              type: string\n                              description: |\n                                The regex pattern of the URL of a profile page\n                                on the external site.\n                      jitsi_server_url:\n                        type: string\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The base URL the organization uses to create Jitsi video calls.\n                      development_environment:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether this Zulip server is a development environment. Used\n                          to control certain features or UI (such as error popups)\n                          that should only apply when connected to a Zulip development\n                          environment.\n                      server_generation:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          A timestamp indicating when the process hosting this\n                          event queue was started. Clients will likely only find\n                          this value useful for inclusion in detailed error reports.\n                      password_min_length:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          This Zulip server's configured minimum required length for passwords.\n                          Necessary for password change UI to show whether the password\n                          will be accepted.\n                      password_min_guesses:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          This Zulip server's configured minimum `zxcvbn` minimum guesses.\n                          Necessary for password change UI to show whether the password\n                          will be accepted.\n                      giphy_rating_options:\n                        type: object\n                        description: |\n                          Dictionary where each entry describes a valid rating\n                          that is configured on this server and could be selected by an\n                          organization administrator.\n\n                          Useful for administrative settings UI that allows changing the\n                          allowed rating of GIFs.\n                        additionalProperties:\n                          description: |\n                            `{rating_name}`: Dictionary containing the details of the\n                            rating with the name of the rating as\n                            the key.\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            name:\n                              type: string\n                              description: |\n                                The description of the rating option.\n                            id:\n                              type: integer\n                              description: |\n                                The ID of the rating option.\n                      max_file_upload_size_mib:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum file size that can be uploaded to this Zulip server.\n                      max_avatar_file_size_mib:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The maximum avatar size that can be uploaded to this Zulip server.\n                      server_inline_image_preview:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the server is configured with support for inline image previews.\n                          Clients containing administrative UI for changing\n                          `realm_inline_image_preview` should consult this field before offering\n                          that feature.\n                      server_inline_url_embed_preview:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the server is configured with support for inline URL previews.\n                          Clients containing administrative UI for changing\n                          `realm_inline_url_embed_preview` should consult this field before offering\n                          that feature.\n                      server_avatar_changes_disabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the server allows avatar changes. Similar to\n                          `realm_avatar_changes_disabled` but based on the `AVATAR_CHANGES_DISABLED`\n                          Zulip server level setting.\n                      server_name_changes_disabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the server allows name changes. Similar to\n                          `realm_name_changes_disabled` but based on the `NAME_CHANGES_DISABLED`\n                          Zulip server level setting.\n                      server_needs_upgrade:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Whether the server is running an old version based on the Zulip\n                          [server release lifecycle](https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#upgrade-nag),\n                          such that the web app will display to the current user a prominent warning.\n\n                          **Changes**: New in Zulip 5.0 (feature level 74).\n                      server_web_public_streams_enabled:\n                        type: boolean\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The value of the `WEB_PUBLIC_STREAMS_ENABLED` Zulip server level\n                          setting. A server that has disabled this setting intends to not offer [web\n                          public streams](/help/public-access-option) to realms it hosts. (Zulip Cloud\n                          defaults to `True`; self-hosted servers default to `False`).\n\n                          Clients should use this to determine whether to offer UI for the\n                          realm-level setting for enabling we-public streams\n                          (`realm_enable_spectator_access`).\n\n                          **Changes**: New in Zulip 5.0 (feature level 110).\n                      event_queue_longpoll_timeout_seconds:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          Recommended client-side HTTP request timeout for [`GET /events`](/api/get-events) calls.\n                          This is guaranteed to be somewhat greater than the heartbeat frequency. It is important\n                          that clients respect this parameter, so that increases in the heartbeat frequency do not\n                          break clients.\n\n                          **Changes**: New in Zulip 5.0 (feature level 74). Previously,\n                          this was hardcoded to 90 seconds, and clients should use that as a fallback\n                          value when interacting with servers where this field is not present.\n                      realm_notifications_stream_id:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The ID of the stream to which notifications announcing the\n                          creation of new streams are sent. -1 if such notifications are disabled.\n\n                          Since these notifications are sent by the server, this field is\n                          primarily relevant to clients containing UI for changing it.\n                      realm_signup_notifications_stream_id:\n                        type: integer\n                        description: |\n                          Present if `realm` is present in `fetch_event_types`.\n\n                          The ID of the stream to which notifications announcing\n                          that new users have joined the organization are sent.\n                          -1 if such notifications are disabled.\n\n                          Since these notifications are sent by the server, this field is\n                          primarily relevant to clients containing UI for changing it.\n                      realm_user_settings_defaults:\n                        type: object\n                        additionalProperties: false\n                        description: |\n                          Present if `realm_user_settings_defaults` is present in `fetch_event_types`.\n\n                          A dictionary containing the default values of settings for new users.\n\n                          **Changes**: New in Zulip 5.0 (feature level 95).\n                        properties:\n                          twenty_four_hour_time:\n                            type: boolean\n                            description: |\n                              Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).\n\n                              **Changes**: New in Zulip 5.0 (feature level 99).\n                              This value was previously available as\n                              `realm_default_twenty_four_hour_time` in\n                              the top-level response object (only when `realm` was\n                              present in `fetch_event_types`).\n                          dense_mode:\n                            type: boolean\n                            description: |\n                              This setting has no effect at present. It is reserved for use in\n                              controlling the default font size in Zulip.\n                          starred_message_counts:\n                            type: boolean\n                            description: |\n                              Whether clients should display the [number of starred\n                              messages](/help/star-a-message#display-the-number-of-starred-messages).\n                          fluid_layout_width:\n                            type: boolean\n                            description: |\n                              Whether to use the [maximum available screen width](/help/enable-full-width-display)\n                              for the web app's center panel (message feed, recent topics) on wide screens.\n                          high_contrast_mode:\n                            type: boolean\n                            description: |\n                              This setting is reserved for use to control variations in Zulip's design\n                              to help visually impaired users.\n                          color_scheme:\n                            type: integer\n                            description: |\n                              Controls which [color theme](/help/dark-theme) to use.\n\n                              - 1 - Automatic\n                              - 2 - Dark theme\n                              - 3 - Light theme\n\n                              Automatic detection is implementing using the standard `prefers-color-scheme`\n                              media query.\n                          translate_emoticons:\n                            type: boolean\n                            description: |\n                              Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)\n                              in messages the user sends.\n                          display_emoji_reaction_users:\n                            type: boolean\n                            description: |\n                              Whether to display the names of reacting users on a message.\n\n                              When enabled, clients should display the names of reacting\n                              users, rather than a count, for messages with few total\n                              reactions. The ideal cutoff may depend on the space\n                              available for displaying reactions; the official web\n                              application displays names when \u003c=3 total reactions are\n                              present with this setting enabled.\n\n                              **Changes**: New in Zulip 6.0 (feature level 125).\n                          default_language:\n                            type: string\n                            description: |\n                              What [default language](/help/change-your-language) to use for the account.\n\n                              This controls both the Zulip UI as well as email notifications sent to the user.\n\n                              The value needs to be a standard language code that the Zulip server has\n                              translation data for; for example, `\"en\"` for English or `\"de\"` for German.\n                          default_view:\n                            type: string\n                            description: |\n                              The [default view](/help/configure-default-view) used when opening a new\n                              Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.\n\n                              - \"recent_topics\" - Recent topics view\n                              - \"all_messages\" - All messages view\n                          escape_navigates_to_default_view:\n                            type: boolean\n                            description: |\n                              Whether the escape key navigates to the\n                              [configured default view](/help/configure-default-view).\n\n                              **Changes**: New in Zulip 5.0 (feature level 107).\n                          left_side_userlist:\n                            type: boolean\n                            description: |\n                              Whether the users list on left sidebar in narrow windows.\n\n                              This feature is not heavily used and is likely to be reworked.\n                          emojiset:\n                            type: string\n                            description: |\n                              The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),\n                              used to display emoji to the user everywhere they appear in the UI.\n\n                              - \"google\" - Google modern\n                              - \"google-blob\" - Google classic\n                              - \"twitter\" - Twitter\n                              - \"text\" - Plain text\n                          demote_inactive_streams:\n                            type: integer\n                            description: |\n                              Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.\n\n                              - 1 - Automatic\n                              - 2 - Always\n                              - 3 - Never\n                          enable_stream_desktop_notifications:\n                            type: boolean\n                            description: |\n                              Enable visual desktop notifications for stream messages.\n                          enable_stream_email_notifications:\n                            type: boolean\n                            description: |\n                              Enable email notifications for stream messages.\n                          enable_stream_push_notifications:\n                            type: boolean\n                            description: |\n                              Enable mobile notifications for stream messages.\n                          enable_stream_audible_notifications:\n                            type: boolean\n                            description: |\n                              Enable audible desktop notifications for stream messages.\n                          notification_sound:\n                            type: string\n                            description: |\n                              Notification sound name.\n                          enable_desktop_notifications:\n                            type: boolean\n                            description: |\n                              Enable visual desktop notifications for private messages and @-mentions.\n                          enable_sounds:\n                            type: boolean\n                            description: |\n                              Enable audible desktop notifications for private messages and\n                              @-mentions.\n                          enable_offline_email_notifications:\n                            type: boolean\n                            description: |\n                              Enable email notifications for private messages and @-mentions received\n                              when the user is offline.\n                          enable_offline_push_notifications:\n                            type: boolean\n                            description: |\n                              Enable mobile notification for private messages and @-mentions received\n                              when the user is offline.\n                          enable_online_push_notifications:\n                            type: boolean\n                            description: |\n                              Enable mobile notification for private messages and @-mentions received\n                              when the user is online.\n                          enable_digest_emails:\n                            type: boolean\n                            description: |\n                              Enable digest emails when the user is away.\n                          enable_marketing_emails:\n                            type: boolean\n                            description: |\n                              Enable marketing emails. Has no function outside Zulip Cloud.\n                          enable_login_emails:\n                            type: boolean\n                            description: |\n                              Enable email notifications for new logins to account.\n                          message_content_in_email_notifications:\n                            type: boolean\n                            description: |\n                              Include the message's content in email notifications for new messages.\n                          pm_content_in_desktop_notifications:\n                            type: boolean\n                            description: |\n                              Include content of private messages in desktop notifications.\n                          wildcard_mentions_notify:\n                            type: boolean\n                            description: |\n                              Whether wildcard mentions (E.g. @**all**) should send notifications\n                              like a personal mention.\n                          desktop_icon_count_display:\n                            type: integer\n                            description: |\n                              Unread count badge (appears in desktop sidebar and browser tab)\n\n                              - 1 - All unreads\n                              - 2 - Private messages and mentions\n                              - 3 - None\n                          realm_name_in_notifications:\n                            type: boolean\n                            description: |\n                              Include organization name in subject of message notification emails.\n                          presence_enabled:\n                            type: boolean\n                            description: |\n                              Display the presence status to other users when online.\n                          enter_sends:\n                            type: boolean\n                            description: |\n                              Whether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)\n                              in the compose box is enabled.\n                          enable_drafts_synchronization:\n                            type: boolean\n                            description: |\n                              A boolean parameter to control whether synchronizing drafts is enabled for\n                              the user. When synchronization is disabled, all drafts stored in the server\n                              will be automatically deleted from the server.\n\n                              This does not do anything (like sending events) to delete local copies of\n                              drafts stored in clients.\n                          email_notifications_batching_period_seconds:\n                            type: integer\n                            description: |\n                              The duration (in seconds) for which the server should wait to batch\n                              email notifications before sending them.\n                          available_notification_sounds:\n                            type: array\n                            items:\n                              type: string\n                            description: |\n                              Array containing the names of the notification sound options\n                              supported by this Zulip server. Only relevant to support UI\n                              for configuring notification sounds.\n                          emojiset_choices:\n                            description: |\n                              Array of dictionaries where each dictionary describes an emoji set\n                              supported by this version of the Zulip server.\n\n                              Only relevant to clients with configuration UI for choosing an emoji set;\n                              the currently selected emoji set is available in the `emojiset` key.\n\n                              See [PATCH /settings](/api/update-settings) for details on\n                              the meaning of this setting.\n                            type: array\n                            items:\n                              type: object\n                              description: |\n                                Object describing a emoji set.\n                              additionalProperties: false\n                              properties:\n                                key:\n                                  type: string\n                                  description: |\n                                    The key or the name of the emoji set which will be the value\n                                    of `emojiset` if this emoji set is chosen.\n                                text:\n                                  type: string\n                                  description: |\n                                    The text describing the emoji set.\n                          send_private_typing_notifications:\n                            type: boolean\n                            description: |\n                              Whether [typing notifications](/help/status-and-availability#typing-notifications) be sent when composing\n                              private messages.\n\n                              **Changes**: New in Zulip 5.0 (feature level 105).\n                          send_stream_typing_notifications:\n                            type: boolean\n                            description: |\n                              Whether [typing notifications](/help/status-and-availability#typing-notifications) be sent when composing\n                              stream messages.\n\n                              **Changes**: New in Zulip 5.0 (feature level 105).\n                          send_read_receipts:\n                            type: boolean\n                            description: |\n                              Whether other users are allowed to see whether you've\n                              read messages.\n\n                              **Changes**: New in Zulip 5.0 (feature level 105).\n                      realm_users:\n                        type: array\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          A array of dictionaries where each entry describes a user\n                          whose account has not been deactivated. Note that unlike\n                          the usual User dictionary, this does not contain the `is_active`\n                          key, as all the users present in this array have active accounts.\n\n                          See also `cross_realm_bots` and `realm_non_active_users`.\n                        items:\n                          $ref: \"#/components/schemas/User\"\n                      realm_non_active_users:\n                        type: array\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          A array of dictionaries where each entry describes a user\n                          whose account has been deactivated. Note that unlike\n                          the usual User dictionary this does not contain the `is_active`\n                          key as all the users present in this array have deactivated\n                          accounts.\n                        items:\n                          $ref: \"#/components/schemas/User\"\n                      avatar_source:\n                        type: string\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The avatar data source type for the current user.\n\n                          Value values are `G` (gravatar) and `U` (uploaded by user).\n                      avatar_url_medium:\n                        type: string\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The avatar URL for the current user at 500x500 resolution, appropriate\n                          for use in settings UI showing the user's avatar.\n                      avatar_url:\n                        type: string\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The URL of the avatar for the current user at 100x100\n                          resolution. See also `avatar_url_medium`.\n                      can_create_streams:\n                        type: boolean\n                        deprecated: true\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is allowed to create at least one type\n                          of stream with the organization's [stream creation\n                          policy](/help/configure-who-can-create-streams). Its value will\n                          always equal `can_create_public_streams || can_create_private_streams`.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 102), when\n                          the new `create_private_stream_policy` and\n                          `create_public_stream_policy` properties introduced the\n                          possibility that a user could only create one type of stream.\n\n                          This field will be removed in a future release.\n                      can_create_public_streams:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is allowed to create public streams with\n                          the organization's [stream creation policy](/help/configure-who-can-create-streams).\n\n                          **Changes**: New in Zulip 5.0 (feature level 102). In older\n                          versions, the deprecated `can_create_streams` property should be\n                          used to determine whether the user can create public streams.\n                      can_create_private_streams:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is allowed to create private streams with\n                          the organization's [stream creation policy](/help/configure-who-can-create-streams).\n\n                          **Changes**: New in Zulip 5.0 (feature level 102). In older\n                          versions, the deprecated `can_create_streams` property should be\n                          used to determine whether the user can create private streams.\n                      can_create_web_public_streams:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is allowed to create public streams with\n                          the organization's [stream creation policy](/help/configure-who-can-create-streams).\n\n                          Note that this will be false if the Zulip server does not have the\n                          `WEB_PUBLIC_STREAMS_ENABLED` setting enabled or if the organization has\n                          not enabled the `enable_spectator_access` realm setting.\n\n                          **Changes**: New in Zulip 5.0 (feature level 103).\n                      can_subscribe_other_users:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is allowed to subscribe other users to streams with\n                          the organization's [streams policy](/help/configure-who-can-invite-to-streams).\n                      can_invite_others_to_realm:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user [is allowed to invite others][who-can-send-invitations]\n                          to the organization.\n\n                          **Changes**: New in Zulip 4.0 (feature level 51).\n\n                          [who-can-send-invitations]: /help/restrict-account-creation#change-who-can-send-invitations\n                      is_admin:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is an [organization administrator](/api/roles-and-permissions).\n                      is_owner:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is an [organization owner](/api/roles-and-permissions).\n                      is_billing_admin:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is a billing administrator.\n\n                          **Changes**: New in Zulip 5.0 (feature level 73).\n                      is_moderator:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is an [organization moderator](/api/roles-and-permissions).\n\n                          **Changes**: New in Zulip 4.0 (feature level 60).\n                      is_guest:\n                        type: boolean\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Whether the current user is a [guest user](/api/roles-and-permissions).\n                      enter_sends:\n                        deprecated: true\n                        type: boolean\n                        description: |\n                          Present if `update_display_settings` is present in `fetch_event_types`\n                          and only for clients that did not include `user_settings_object` in\n                          their client_capabilities` when registering the event queue.\n\n                          Whether the user setting for [sending on pressing Enter](/help/enable-enter-to-send)\n                          in the compose box is enabled.\n\n                          **Changes**: Deprecated in Zulip 5.0 (feature level 89). Clients\n                          connecting to newer servers should declare the `user_settings_object`\n                          client capability and process the `user_settings` event type instead.\n                          Prior to Zulip 5.0 (feature level 84) this field was present\n                          in response if 'realm_user' was present in `fetch_event_types`, not\n                          `update_display_settings`.\n                      user_id:\n                        type: integer\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The unique ID for the current user.\n                      email:\n                        type: string\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The Zulip display email address for the current user. See also\n                          `delivery_email`; these may be the same or different depending\n                          on the organization's `email_address_visibility` policy.\n                      delivery_email:\n                        type: string\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The user's email address, appropriate for UI for changing\n                          the user's email address. See also `email`.\n                      full_name:\n                        type: string\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          The full name of the current user.\n                      cross_realm_bots:\n                        type: array\n                        description: |\n                          Present if `realm_user` is present in `fetch_event_types`.\n\n                          Array of dictionaries where each dictionary contains details of\n                          a single cross realm bot. Cross-realm bots are special system bot accounts\n                          like Notification Bot.\n\n                          Most clients will want to combine this with `realm_users` in many\n                          contexts.\n                        items:\n                          allOf:\n                            - $ref: \"#/components/schemas/UserBase\"\n                            - additionalProperties: false\n                              properties:\n                                user_id: {}\n                                delivery_email: {}\n                                email: {}\n                                full_name: {}\n                                date_joined: {}\n                                is_active: {}\n                                is_owner: {}\n                                is_admin: {}\n                                is_guest: {}\n                                is_billing_admin: {}\n                                is_bot: {}\n                                # Referenced schema properties are rendered before any\n                                # non-referenced properties in the API documentation, so\n                                # `is_system_bot` appears last instead of in this order.\n                                # General practice should be to define properties in the\n                                # same order that they are rendered in the API documentation.\n                                # TODO: See if we can match the order of properties as\n                                # listed here when rendered in the API documentation.\n                                is_system_bot:\n                                  type: boolean\n                                  description: |\n                                    Whether the user is a system bot. System bots are special\n                                    bot user accounts that are managed by the system, rather than\n                                    the organization's administrators.\n\n                                    **Changes**: This field was called `is_cross_realm_bot`\n                                    before Zulip 5.0 (feature level 83).\n                                bot_type:\n                                  nullable: true\n                                bot_owner_id:\n                                  nullable: true\n                                role: {}\n                                timezone: {}\n                                avatar_url:\n                                  nullable: true\n                                avatar_version: {}\n                                profile_data: {}\n                    example:\n                      {\n                        \"last_event_id\": -1,\n                        \"msg\": \"\",\n                        \"queue_id\": \"1517975029:0\",\n                        \"realm_emoji\":\n                          {\n                            \"1\":\n                              {\n                                \"author_id\": 5,\n                                \"deactivated\": false,\n                                \"id\": \"1\",\n                                \"name\": \"green_tick\",\n                                \"source_url\": \"/user_avatars/1/emoji/images/1.png\",\n                              },\n                            \"2\":\n                              {\n                                \"author_id\": 3,\n                                \"deactivated\": false,\n                                \"id\": \"2\",\n                                \"name\": \"animated_img\",\n                                \"source_url\": \"/user_avatars/1/emoji/images/animated_img.gif\",\n                                \"still_url\": \"/user_avatars/1/emoji/images/still/animated_img.png\",\n                              },\n                          },\n                        \"result\": \"success\",\n                        \"zulip_feature_level\": 2,\n                        \"zulip_version\": \"5.0-dev-1650-gc3fd37755f\",\n                        \"zulip_merge_base\": \"5.0-dev-1646-gea6b21cd8c\",\n                      }\n  /server_settings:\n    get:\n      operationId: get-server-settings\n      summary: Get server settings\n      tags: [\"server_and_organizations\"]\n      x-response-description: |\n        Please note that not all of these attributes are guaranteed to appear in a\n        response, for two reasons:\n\n        * This endpoint has evolved over time, so responses from older Zulip servers\n          might be missing some keys (in which case a client should assume the\n          appropriate default).\n        * If a `/server_settings` request is made to the root domain of a\n          multi-subdomain server, like the root domain of zulip.com, the settings\n          that are realm-specific are not known and thus not provided.\n      description: |\n        Fetch global settings for a Zulip server.\n\n        `GET {{ api_url }}/v1/server_settings`\n\n        **Note:** this endpoint does not require any authentication at all, and you can use it to check:\n\n        - If this is a Zulip server, and if so, what version of Zulip it's running.\n        - What a Zulip client (e.g. a mobile app or\n          [zulip-terminal](https://github.com/zulip/zulip-terminal/)) needs to\n          know in order to display a login prompt for the server (e.g. what\n          authentication methods are available).\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - additionalProperties: false\n                    description: |\n                      A typical successful JSON response for a single-organization server may look like:\n                    properties:\n                      result: {}\n                      msg: {}\n                      authentication_methods:\n                        type: object\n                        additionalProperties: false\n                        deprecated: true\n                        description: |\n                          Each key-value pair in the object indicates whether the authentication\n                          method is enabled on this server.\n\n                          **Changes**: Deprecated in Zulip 2.1, in favor of the more expressive\n                          `external_authentication_methods`.\n                        properties:\n                          password:\n                            description: |\n                              Whether the user can authenticate using password.\n                            type: boolean\n                          dev:\n                            description: |\n                              Whether the user can authenticate using development API key.\n                            type: boolean\n                          email:\n                            description: |\n                              Whether the user can authenticate using email.\n                            type: boolean\n                          ldap:\n                            description: |\n                              Whether the user can authenticate using LDAP.\n                            type: boolean\n                          remoteuser:\n                            description: |\n                              Whether the user can authenticate using REMOTE_USER.\n                            type: boolean\n                          github:\n                            description: |\n                              Whether the user can authenticate using their GitHub account.\n                            type: boolean\n                          azuread:\n                            description: |\n                              Whether the user can authenticate using their Azure Active Directory account.\n                            type: boolean\n                          gitlab:\n                            description: |\n                              Whether the user can authenticate using their GitLab account.\n                            type: boolean\n                          apple:\n                            description: |\n                              Whether the user can authenticate using their Apple account.\n                            type: boolean\n                          google:\n                            description: |\n                              Whether the user can authenticate using their Google account.\n                            type: boolean\n                          saml:\n                            description: |\n                              Whether the user can authenticate using SAML.\n                            type: boolean\n                          openid connect:\n                            description: |\n                              Whether the user can authenticate using OpenID Connect.\n                            type: boolean\n                      external_authentication_methods:\n                        type: array\n                        description: |\n                          A list of dictionaries describing the available external\n                          authentication methods (E.g. Google, GitHub, or SAML)\n                          enabled for this organization.\n\n                          The list is sorted in the order in which these\n                          authentication methods should be displayed.\n\n                          **Changes**: New in Zulip 2.1.\n                        items:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            name:\n                              type: string\n                              description: |\n                                A unique, table, machine-readable name for the authentication method,\n                                intended to be used by clients with special behavior for specific\n                                authentication methods to correctly identify the method.\n                            display_name:\n                              type: string\n                              description: |\n                                Display name of the authentication method, to be used in all buttons\n                                for the authentication method.\n                            display_icon:\n                              type: string\n                              nullable: true\n                              description: |\n                                URL for an image to be displayed as an icon in all buttons for\n                                the external authentication method.\n\n                                When null, no icon should be displayed.\n                            login_url:\n                              type: string\n                              description: |\n                                URL to be used to initiate authentication using this method.\n                            signup_url:\n                              type: string\n                              description: |\n                                URL to be used to initiate account registration using this method.\n                      zulip_feature_level:\n                        type: integer\n                        description: |\n                          An integer indicating what features are\n                          available on the server. The feature level increases monotonically;\n                          a value of N means the server supports all API features introduced\n                          before feature level N. This is designed to provide a simple way\n                          for client apps to decide whether the server supports a given\n                          feature or API change. See the [changelog](/api/changelog) for\n                          details on what each feature level means.\n\n                          **Changes**. New in Zulip 3.0. We recommend using an implied value\n                          of 0 for Zulip servers that do not send this field.\n                      zulip_version:\n                        type: string\n                        description: |\n                          The server's version number. This is often a release version number,\n                          like `2.1.7`. But for a server running a [version from Git][git-release],\n                          it will be a Git reference to the commit, like `5.0-dev-1650-gc3fd37755f`.\n\n                          [git-release]: https://zulip.readthedocs.io/en/latest/overview/release-lifecycle.html#git-versions\n                      zulip_merge_base:\n                        type: string\n                        description: |\n                          The `git merge-base` between `zulip_verson` and official branches\n                          in the public\n                          [Zulip server and web app repository](https://github.com/zulip/zulip),\n                          in the same format as `zulip_version`. This will equal\n                          `zulip_version` if the server is not running a fork of the Zulip server.\n\n                          This will be `\"\"` if unavailable.\n\n                          **Changes**: New in Zulip 5.0 (feature level 88).\n                      push_notifications_enabled:\n                        type: boolean\n                        description: |\n                          Whether mobile/push notifications are enabled.\n                      is_incompatible:\n                        type: boolean\n                        description: |\n                          Whether the Zulip client that has sent a request to this endpoint is\n                          deemed incompatible with the server.\n                      email_auth_enabled:\n                        type: boolean\n                        description: |\n                          Setting for allowing users authenticate with an email-password\n                          combination.\n                      require_email_format_usernames:\n                        type: boolean\n                        description: |\n                          Whether all valid usernames for authentication to this\n                          organization will be email addresses. This is important\n                          for clients to know whether to do client side validation\n                          of email address format in a login prompt.\n\n                          This value will be false if the server has [LDAP\n                          authentication][ldap-auth] enabled with a username and\n                          password combination.\n\n                          [ldap-auth]: https://zulip.readthedocs.io/en/latest/production/authentication-methods.html#ldap-including-active-directory\n                      realm_uri:\n                        type: string\n                        description: |\n                          The organization's canonical URL.\n                      realm_name:\n                        type: string\n                        description: |\n                          The organization's name (for display purposes).\n                      realm_icon:\n                        type: string\n                        description: |\n                          The URL for the organization's logo formatted as a square image,\n                          used for identifying the organization in small locations in the\n                          mobile and desktop apps.\n                      realm_description:\n                        type: string\n                        description: |\n                          HTML description of the organization, as configured by the [organization\n                          profile](/help/create-your-organization-profile).\n                      realm_web_public_access_enabled:\n                        type: boolean\n                        description: |\n                          Whether the organization has enabled the creation of\n                          [web-public streams](/help/public-access-option) and\n                          at least one web-public stream on the server currently\n                          exists. Clients that support viewing content\n                          in web-public streams without an account can\n                          use this to determine whether to offer that\n                          feature on the login page for an organization.\n\n                          **Changes**: New in Zulip 5.0 (feature level 116).\n                    example:\n                      {\n                        \"authentication_methods\":\n                          {\n                            \"password\": true,\n                            \"dev\": true,\n                            \"email\": true,\n                            \"ldap\": false,\n                            \"remoteuser\": false,\n                            \"github\": true,\n                            \"azuread\": false,\n                            \"google\": true,\n                            \"saml\": true,\n                          },\n                        \"zulip_version\": \"5.0-dev-1650-gc3fd37755f\",\n                        \"zulip_merge_base\": \"5.0-dev-1646-gea6b21cd8c\",\n                        \"push_notifications_enabled\": false,\n                        \"msg\": \"\",\n                        \"is_incompatible\": false,\n                        \"email_auth_enabled\": true,\n                        \"require_email_format_usernames\": true,\n                        \"realm_uri\": \"http://localhost:9991\",\n                        \"realm_name\": \"Zulip Dev\",\n                        \"realm_icon\": \"https://secure.gravatar.com/avatar/62429d594b6ffc712f54aee976a18b44?d=identicon\",\n                        \"realm_description\": \"\u003cp\u003eThe Zulip development environment default organization.  It's great for testing!\u003c/p\u003e\",\n                        \"realm_web_public_access_enabled\": false,\n                        \"result\": \"success\",\n                        \"external_authentication_methods\":\n                          [\n                            {\n                              \"name\": \"saml:idp_name\",\n                              \"display_name\": \"SAML\",\n                              \"display_icon\": null,\n                              \"login_url\": \"/accounts/login/social/saml/idp_name\",\n                              \"signup_url\": \"/accounts/register/social/saml/idp_name\",\n                            },\n                            {\n                              \"name\": \"google\",\n                              \"display_name\": \"Google\",\n                              \"display_icon\": \"/static/images/landing-page/logos/googl_e-icon.png\",\n                              \"login_url\": \"/accounts/login/social/google\",\n                              \"signup_url\": \"/accounts/register/social/google\",\n                            },\n                            {\n                              \"name\": \"github\",\n                              \"display_name\": \"GitHub\",\n                              \"display_icon\": \"/static/images/landing-page/logos/github-icon.png\",\n                              \"login_url\": \"/accounts/login/social/github\",\n                              \"signup_url\": \"/accounts/register/social/github\",\n                            },\n                          ],\n                      }\n  /settings:\n    patch:\n      operationId: update-settings\n      summary: Update settings\n      tags: [\"users\"]\n      description: |\n        This endpoint is used to edit the current user's settings.\n\n        `PATCH {{ api_url }}/v1/settings`\n\n        **Changes**: Prior to Zulip 5.0 (feature level 80), this\n        endpoint only supported the `full_name`, `email`,\n        `old_password`, and `new_password` parameters. Notification\n        settings were managed by `PATCH /settings/notifications`, and\n        all other settings by `PATCH /settings/display`.\n\n        The feature level 80 migration to merge these endpoints did not\n        change how request parameters are encoded. However, it did change\n        the handling of any invalid parameters present in a request\n        (see feature level 78 change below).\n\n        The `/settings/display` and `/settings/notifications`\n        endpoints are now deprecated aliases for this endpoint for\n        backwards-compatibility, and will be removed once clients have\n        migrated to use this endpoint.\n\n        **Changes**: Prior to Zulip 5.0 (feature level 78),\n        the `/settings` endpoint indicated which parameters it had\n        processed by including in the response object `\"key\": value`\n        entries for values successfully changed by the request. That\n        was replaced by the more ergonomic\n        `ignored_parameters_unsupported` response parameter.\n\n        The `/settings/notifications` and `/settings/display` endpoints\n        also had this behavior before they became aliases of `/settings`\n        in Zulip 5.0 (see feature level 80 change above).\n\n        Before these changes, request parameters that were not supported\n        (or were unchanged) were silently ignored.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - left_side_userlist\n                - emojiset\n      parameters:\n        - name: full_name\n          in: query\n          description: |\n            A new display name for the user.\n          schema:\n            type: string\n          example: NewName\n        - name: email\n          in: query\n          description: |\n            Asks the server to initiate a confirmation sequence to change the user's email\n            address to the indicated value. The user will need to demonstrate control of the\n            new email address by clicking a confirmation link sent to that address.\n          schema:\n            type: string\n          example: newname@example.com\n        - name: old_password\n          in: query\n          description: |\n            The user's old Zulip password (or LDAP password, if LDAP authentication is in use).\n\n            Required only when sending the `new_password` parameter.\n          schema:\n            type: string\n          example: old12345\n        - name: new_password\n          in: query\n          description: |\n            The user's new Zulip password (or LDAP password, if LDAP authentication is in use).\n\n            The `old_password` parameter must be included in the request.\n          schema:\n            type: string\n          example: new12345\n        - name: twenty_four_hour_time\n          in: query\n          description: |\n            Whether time should be [displayed in 24-hour notation](/help/change-the-time-format).\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: dense_mode\n          in: query\n          description: |\n            This setting has no effect at present. It is reserved for use in controlling\n            the default font size in Zulip.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: starred_message_counts\n          in: query\n          description: |\n            Whether clients should display the [number of starred\n            messages](/help/star-a-message#display-the-number-of-starred-messages).\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: fluid_layout_width\n          in: query\n          description: |\n            Whether to use the [maximum available screen width](/help/enable-full-width-display)\n            for the web app's center panel (message feed, recent topics) on wide screens.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: high_contrast_mode\n          in: query\n          description: |\n            This setting is reserved for use to control variations in Zulip's design\n            to help visually impaired users.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: color_scheme\n          in: query\n          description: |\n            Controls which [color theme](/help/dark-theme) to use.\n\n            - 1 - Automatic\n            - 2 - Dark theme\n            - 3 - Light theme\n\n            Automatic detection is implementing using the standard `prefers-color-scheme`\n            media query.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n              - 3\n          example: 1\n        - name: enable_drafts_synchronization\n          in: query\n          description: |\n            A boolean parameter to control whether synchronizing drafts is enabled for\n            the user. When synchronization is disabled, all drafts stored in the server\n            will be automatically deleted from the server.\n\n            This does not do anything (like sending events) to delete local copies of\n            drafts stored in clients.\n\n            **Changes**: New in Zulip 5.0 (feature level 87).\n          schema:\n            type: boolean\n          example: true\n        - name: translate_emoticons\n          in: query\n          description: |\n            Whether to [translate emoticons to emoji](/help/enable-emoticon-translations)\n            in messages the user sends.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: display_emoji_reaction_users\n          in: query\n          description: |\n            Whether to display the names of reacting users on a message.\n\n            When enabled, clients should display the names of reacting users, rather than\n            a count, for messages with few total reactions. The ideal cutoff may depend on\n            the space available for displaying reactions; the official web application\n            displays names when \u003c=3 total reactions are present with this setting enabled.\n\n            **Changes**: New in Zulip 6.0 (feature level 125).\n          schema:\n            type: boolean\n          example: false\n        - name: default_language\n          in: query\n          description: |\n            What [default language](/help/change-your-language) to use for the account.\n\n            This controls both the Zulip UI as well as email notifications sent to the user.\n\n            The value needs to be a standard language code that the Zulip server has\n            translation data for; for example, `\"en\"` for English or `\"de\"` for German.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n\n            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).\n          schema:\n            type: string\n          example: en\n        - name: default_view\n          in: query\n          description: |\n            The [default view](/help/configure-default-view) used when opening a new\n            Zulip web app window or hitting the `Esc` keyboard shortcut repeatedly.\n\n            - \"recent_topics\" - Recent topics view\n            - \"all_messages\" - All messages view\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n\n            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).\n          schema:\n            type: string\n          example: all_messages\n        - name: escape_navigates_to_default_view\n          in: query\n          description: |\n            Whether the escape key navigates to the\n            [configured default view](/help/configure-default-view).\n\n            **Changes**: New in Zulip 5.0 (feature level 107).\n          schema:\n            type: boolean\n          example: true\n        - name: left_side_userlist\n          in: query\n          description: |\n            Whether the users list on left sidebar in narrow windows.\n\n            This feature is not heavily used and is likely to be reworked.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: emojiset\n          in: query\n          description: |\n            The user's configured [emoji set](/help/emoji-and-emoticons#use-emoticons),\n            used to display emoji to the user everywhere they appear in the UI.\n\n            - \"google\" - Google modern\n            - \"google-blob\" - Google classic\n            - \"twitter\" - Twitter\n            - \"text\" - Plain text\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n\n            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).\n          schema:\n            type: string\n          example: \"google\"\n        - name: demote_inactive_streams\n          in: query\n          description: |\n            Whether to [demote inactive streams](/help/manage-inactive-streams) in the left sidebar.\n\n            - 1 - Automatic\n            - 2 - Always\n            - 3 - Never\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n              - 3\n          example: 1\n        - name: timezone\n          in: query\n          description: |\n            The user's [configured time zone](/help/change-your-timezone).\n\n            Time zone values supported by the server are served at\n            [/static/generated/timezones.json](/static/generated/timezones.json).\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/display` endpoint.\n\n            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 64).\n          schema:\n            type: string\n          example: \"Asia/Kolkata\"\n        - name: enable_stream_desktop_notifications\n          in: query\n          description: |\n            Enable visual desktop notifications for stream messages.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_stream_email_notifications\n          in: query\n          description: |\n            Enable email notifications for stream messages.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_stream_push_notifications\n          in: query\n          description: |\n            Enable mobile notifications for stream messages.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_stream_audible_notifications\n          in: query\n          description: |\n            Enable audible desktop notifications for stream messages.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: notification_sound\n          in: query\n          description: |\n            Notification sound name.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n\n            Unnecessary JSON-encoding of this parameter was removed in Zulip 4.0 (feature level 63).\n          schema:\n            type: string\n          example: ding\n        - name: enable_desktop_notifications\n          in: query\n          description: |\n            Enable visual desktop notifications for private messages and @-mentions.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_sounds\n          in: query\n          description: |\n            Enable audible desktop notifications for private messages and\n            @-mentions.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: email_notifications_batching_period_seconds\n          in: query\n          description: |\n            The duration (in seconds) for which the server should wait to batch\n            email notifications before sending them.\n\n            **Changes**: New in Zulip 5.0 (feature level 82)\n          schema:\n            type: integer\n          example: 120\n        - name: enable_offline_email_notifications\n          in: query\n          description: |\n            Enable email notifications for private messages and @-mentions received\n            when the user is offline.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_offline_push_notifications\n          in: query\n          description: |\n            Enable mobile notification for private messages and @-mentions received\n            when the user is offline.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_online_push_notifications\n          in: query\n          description: |\n            Enable mobile notification for private messages and @-mentions received\n            when the user is online.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_digest_emails\n          in: query\n          description: |\n            Enable digest emails when the user is away.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_marketing_emails\n          in: query\n          description: |\n            Enable marketing emails. Has no function outside Zulip Cloud.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enable_login_emails\n          in: query\n          description: |\n            Enable email notifications for new logins to account.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: message_content_in_email_notifications\n          in: query\n          description: |\n            Include the message's content in email notifications for new messages.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: pm_content_in_desktop_notifications\n          in: query\n          description: |\n            Include content of private messages in desktop notifications.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: wildcard_mentions_notify\n          in: query\n          description: |\n            Whether wildcard mentions (E.g. @**all**) should send notifications\n            like a personal mention.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: desktop_icon_count_display\n          in: query\n          description: |\n            Unread count badge (appears in desktop sidebar and browser tab)\n\n            - 1 - All unreads\n            - 2 - Private messages and mentions\n            - 3 - None\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n              - 3\n          example: 1\n        - name: realm_name_in_notifications\n          in: query\n          description: |\n            Include organization name in subject of message notification emails.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: presence_enabled\n          in: query\n          description: |\n            Display the presence status to other users when online.\n\n            **Changes**: Before Zulip 5.0 (feature level 80), this setting was managed by\n            the `PATCH /settings/notifications` endpoint.\n          schema:\n            type: boolean\n          example: true\n        - name: enter_sends\n          in: query\n          description: |\n            Whether pressing Enter in the compose box sends a message\n            (or saves a message edit).\n\n            **Changes**: Before Zulip 5.0 (feature level 81), this setting was managed by\n            the `POST /users/me/enter-sends` endpoint, with the same parameter format.\n          schema:\n            type: boolean\n          example: true\n        - name: send_private_typing_notifications\n          in: query\n          description: |\n            Whether [typing notifications](/help/status-and-availability#typing-notifications) be sent when composing\n            private messages.\n\n            **Changes**: New in Zulip 5.0 (feature level 105).\n          schema:\n            type: boolean\n          example: true\n        - name: send_stream_typing_notifications\n          in: query\n          description: |\n            Whether [typing notifications](/help/status-and-availability#typing-notifications) be sent when composing\n            stream messages.\n\n            **Changes**: New in Zulip 5.0 (feature level 105).\n          schema:\n            type: boolean\n          example: true\n        - name: send_read_receipts\n          in: query\n          description: |\n            Whether other users are allowed to see whether you've\n            read messages.\n\n            **Changes**: New in Zulip 5.0 (feature level 105).\n          schema:\n            type: boolean\n          example: true\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      ignored_parameters_unsupported:\n                        $ref: \"#/components/schemas/IgnoredParametersUnsupported\"\n                    example:\n                      {\n                        \"ignored_parameters_unsupported\": [\"name\", \"password\"],\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                      }\n  /streams/{stream_id}/members:\n    get:\n      operationId: get-subscribers\n      summary: Get the subscribers of a stream\n      tags: [\"streams\"]\n      description: |\n        Get all users subscribed to a stream.\n\n        `Get {{ api_url }}/v1/streams/{stream_id}/members`\n      parameters:\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      subscribers:\n                        type: array\n                        items:\n                          type: integer\n                        description: |\n                          A list containing the IDs of all active users who are subscribed\n                          to the stream.\n                    example:\n                      {\"result\": \"success\", \"msg\": \"\", \"subscribers\": [11, 26]}\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid stream ID\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the requested stream does not exist,\n                      or where the user does not have permission to access the target stream:\n  /streams:\n    get:\n      operationId: get-streams\n      summary: Get all streams\n      tags: [\"streams\"]\n      description: |\n        Get all streams that the user has access to.\n\n        `GET {{ api_url }}/v1/streams`\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - \"\"\n          - type: include\n            parameters:\n              enum:\n                - include_public\n            description: |\n              You may pass in one or more of the parameters mentioned above\n              as URL query parameters, like so:\n      parameters:\n        - name: include_public\n          in: query\n          description: |\n            Include all public streams.\n          schema:\n            type: boolean\n            default: true\n          example: false\n        - name: include_web_public\n          in: query\n          description: |\n            Include all web-public streams.\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - name: include_subscribed\n          in: query\n          description: |\n            Include all streams that the user is subscribed to.\n          schema:\n            type: boolean\n            default: true\n          example: false\n        - name: include_all_active\n          in: query\n          description: |\n            Include all active streams. The user must have administrative privileges\n            to use this parameter.\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - name: include_default\n          in: query\n          description: |\n            Include all default streams for the user's realm.\n          schema:\n            type: boolean\n            default: false\n          example: true\n        - name: include_owner_subscribed\n          in: query\n          description: |\n            If the user is a bot, include all streams that the bot's owner is\n            subscribed to.\n          schema:\n            type: boolean\n            default: false\n          example: true\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      streams:\n                        description: |\n                          A list of `stream` objects with details on the requested streams.\n                        type: array\n                        items:\n                          allOf:\n                            - $ref: \"#/components/schemas/BasicStreamBase\"\n                            - additionalProperties: false\n                              properties:\n                                stream_id: {}\n                                name: {}\n                                description: {}\n                                date_created: {}\n                                invite_only: {}\n                                rendered_description: {}\n                                is_web_public: {}\n                                stream_post_policy: {}\n                                message_retention_days:\n                                  nullable: true\n                                history_public_to_subscribers: {}\n                                first_message_id:\n                                  nullable: true\n                                is_announcement_only: {}\n                                is_default:\n                                  type: boolean\n                                  description: |\n                                    Whether the given stream is a\n                                    [default stream](/help/set-default-streams-for-new-users). Only\n                                    returned if the `include_default` parameter is `true`.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"streams\":\n                          [\n                            {\n                              \"description\": \"A Scandinavian country\",\n                              \"invite_only\": false,\n                              \"name\": \"Denmark\",\n                              \"stream_id\": 1,\n                            },\n                            {\n                              \"description\": \"Yet another Italian city\",\n                              \"invite_only\": false,\n                              \"name\": \"Rome\",\n                              \"stream_id\": 2,\n                            },\n                            {\n                              \"description\": \"Located in the United Kingdom\",\n                              \"invite_only\": false,\n                              \"name\": \"Scotland\",\n                              \"stream_id\": 3,\n                            },\n                            {\n                              \"description\": \"A northeastern Italian city\",\n                              \"invite_only\": false,\n                              \"name\": \"Venice\",\n                              \"stream_id\": 4,\n                            },\n                            {\n                              \"description\": \"A city in Italy\",\n                              \"invite_only\": false,\n                              \"name\": \"Verona\",\n                              \"stream_id\": 5,\n                            },\n                            {\n                              \"description\": \"New stream for testing\",\n                              \"invite_only\": false,\n                              \"name\": \"new stream\",\n                              \"stream_id\": 6,\n                            },\n                          ],\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"User not authorized for this query\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the user is not authorized to use the\n                      `include_all_active` parameter (i.e. because they are not an organization\n                      administrator):\n  /streams/{stream_id}:\n    get:\n      operationId: get-stream-by-id\n      summary: Get a stream by ID\n      tags: [\"streams\"]\n      description: |\n        Fetch details for the stream with the ID `stream_id`.\n\n        `GET {{ api_url }}/v1/streams/{stream_id}`\n\n        **Changes**: New in Zulip 6.0 (feature level 132).\n      parameters:\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      stream:\n                        $ref: \"#/components/schemas/BasicStream\"\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"stream\":\n                          {\n                            \"description\": \"A Scandinavian country\",\n                            \"first_message_id\": 1,\n                            \"history_public_to_subscribers\": True,\n                            \"invite_only\": False,\n                            \"is_announcement_only\": False,\n                            \"is_web_public\": False,\n                            \"message_retention_days\": null,\n                            \"name\": \"Denmark\",\n                            \"rendered_description\": \"\u003cp\u003eA Scandinavian country\u003c/p\u003e\",\n                            \"stream_id\": 7,\n                            \"stream_post_policy\": 1,\n                          },\n                      }\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/CodedError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid stream ID\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the stream ID is not valid.\n    delete:\n      operationId: archive-stream\n      summary: Archive a stream\n      tags: [\"streams\"]\n      description: |\n        [Archive the stream](/help/archive-a-stream) with the ID `stream_id`.\n\n        `DELETE {{ api_url }}/v1/streams/{stream_id}`\n      parameters:\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid stream ID\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the supplied stream does not exist:\n    patch:\n      operationId: update-stream\n      summary: Update a stream\n      tags: [\"streams\"]\n      description: |\n        Configure the stream with the ID `stream_id`. This endpoint supports\n        an organization administrator editing any property of a stream,\n        including:\n\n        - Stream [name](/help/rename-a-stream) and [description](/help/change-the-stream-description)\n        - Stream [permissions](/help/stream-permissions), including\n          [privacy](/help/change-the-privacy-of-a-stream) and [who can\n          send](/help/stream-sending-policy).\n\n        `PATCH {{ api_url }}/v1/streams/{stream_id}`\n      x-curl-examples-parameters:\n        oneOf:\n          - type: include\n            parameters:\n              enum:\n                - new_name\n                - description\n                - is_private\n      parameters:\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n        - name: description\n          in: query\n          description: |\n            The new description for the stream. Limited Zulip markdown is allowed in this\n            field.\n\n            **Changes**: Removed unnecessary JSON-encoding of this parameter in\n            Zulip 4.0 (feature level 64).\n          schema:\n            type: string\n          example: \"Discuss Italian history and travel destinations.\"\n          required: false\n          allowEmptyValue: true\n        - name: new_name\n          in: query\n          description: |\n            The new name for the stream.\n\n            **Changes**: Removed unnecessary JSON-encoding of this parameter in\n            Zulip 4.0 (feature level 64).\n          schema:\n            type: string\n          example: Italy\n          required: false\n        - name: is_private\n          in: query\n          description: |\n            Change whether the stream is a private stream.\n          schema:\n            type: boolean\n          example: true\n          required: false\n        - name: is_announcement_only\n          in: query\n          deprecated: true\n          description: |\n            Whether the stream is limited to announcements.\n\n            **Changes**: Deprecated in Zulip 3.0 (feature level 1), use\n            `stream_post_policy` instead.\n          schema:\n            type: boolean\n          example: true\n          required: false\n        - name: is_web_public\n          in: query\n          description: |\n            Change whether the stream is a web-public stream.\n\n            Note that creating web-public streams requires the\n            `WEB_PUBLIC_STREAMS_ENABLED` [server setting][server-settings]\n            to be enabled on the Zulip server in question, the organization\n            to have enabled the `enable_spectator_access` realm setting, and\n            the current use to have permission under the organization's\n            `create_web_public_stream_policy` realm setting.\n\n            [server-settings]: https://zulip.readthedocs.io/en/stable/production/settings.html\n\n            **Changes**: New in Zulip 5.0 (feature level 98).\n          schema:\n            type: boolean\n          example: true\n          required: false\n        - $ref: \"#/components/parameters/StreamPostPolicy\"\n        - $ref: \"#/components/parameters/HistoryPublicToSubscribers\"\n        - $ref: \"#/components/parameters/MessageRetentionDays\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid stream ID\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response for when the supplied stream does not exist:\n  /streams/{stream_id}/delete_topic:\n    post:\n      operationId: delete-topic\n      summary: Delete a topic\n      tags: [\"streams\"]\n      description: |\n        Delete all messages in a topic.\n\n        `POST {{ api_url }}/v1/streams/{stream_id}/delete_topic`\n\n        Topics are a field on messages (not an independent\n        data structure), so deleting all the messages in the topic\n        deletes the topic from Zulip.\n      parameters:\n        - $ref: \"#/components/parameters/StreamIdInPath\"\n        - name: topic_name\n          in: query\n          description: |\n            The name of the topic to delete.\n          schema:\n            type: string\n          example: new coffee machine\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"result\": \"error\",\n                        \"msg\": \"Must be an organization administrator\",\n                        \"code\": \"UNAUTHORIZED_PRINCIPAL\",\n                      }\n                    description: |\n                      Error when the user does not have permission\n                      to delete topics in this organization:\n  /typing:\n    post:\n      operationId: set-typing-status\n      summary: Set \"typing\" status\n      tags: [\"users\"]\n      description: |\n        Notify other users whether the current user is typing a message.\n\n        `POST {{ api_url }}/v1/typing`\n\n        Clients implementing Zulip's typing notifications protocol should work as follows:\n\n        - Send a request to this endpoint with `op = \"start\"` when a user starts typing a message,\n          and also every `TYPING_STARTED_WAIT_PERIOD = 10` seconds that the user continues to\n          actively type or otherwise interact with the compose UI (e.g. interacting with the\n          compose box emoji picker).\n        - Send a request to this endpoint with `op = \"stop\"` when a user pauses using the\n          compose UI for at least `TYPING_STOPPED_WAIT_PERIOD = 5` seconds or cancels\n          the compose action (if it had previously sent a \"start\" operation for that\n          compose action).\n        - Start displaying \"Sender is typing\" for a given conversation when the client\n          receives an `op = \"start\"` event from the [`GET /events`](/api/get-events#typing-start)\n          endpoint.\n        - Continue displaying \"Sender is typing\" until they receive an `op = \"stop\"` event\n          from the [`GET /events`](/api/get-events#typing-stop) endpoint or\n          `TYPING_STARTED_EXPIRY_PERIOD = 15` seconds have passed without a new `op = \"start\"`\n          event for that conversation.\n        - Support for displaying stream typing notifications was new in Zulip 4.0\n          (feature level 58). Clients should indicate they support processing stream typing\n          events via the `stream_typing_notifications` value in the `client_capabilities`\n          parameter to [`POST /register`](/api/register-queue#parameter-client_capabilities)\n          endpoint.\n\n        This protocol is designed to allow the server-side typing notifications implementation\n        to be stateless while being resilient; network failures cannot result in a user being\n        incorrectly displayed as perpetually typing.\n\n        See\n        [the typing notification docs](https://zulip.readthedocs.io/en/latest/subsystems/typing-indicators.html)\n        for additional design details on Zulip's typing notifications protocol.\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - topic\n      parameters:\n        - name: type\n          in: query\n          description: |\n            Type of the message being composed.\n\n            **Changes**: New in Zulip 4.0 (feature level 58). Previously, typing\n            notifications were only for private messages.\n          schema:\n            type: string\n            enum:\n              - private\n              - stream\n            default: private\n          example: private\n        - name: op\n          in: query\n          description: |\n            Whether the user has started (`\"start\"`) or stopped (`\"stop\"`) typing.\n          schema:\n            type: string\n            enum:\n              - start\n              - stop\n          example: start\n          required: true\n        - name: to\n          in: query\n          description: |\n            For `\"private\"` type it is the user_ids of the recipients of the message being typed.\n            Send a JSON-encoded list of user_ids. (Use a list even if there is only one\n            recipient.)\n\n            For `\"stream\"` type it is a single element list containing ID of stream in\n            which the message is being typed.\n\n            **Changes**: Support for typing notifications for stream messages\n            is new in Zulip 4.0 (feature level 58). Previously, typing\n            notifications were only for private messages.\n\n            Before Zulip 2.0, this parameter accepted only a JSON-encoded\n            list of email addresses. Support for the email address-based format was\n            removed in Zulip 3.0 (feature level 11).\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [9, 10]\n          required: true\n        - name: topic\n          in: query\n          description: |\n            Topic to which message is being typed. Required for the `\"stream\"` type.\n            Ignored in the case of `\"private\"` type.\n\n            **Changes**: New in Zulip 4.0 (feature level 58). Previously, typing\n            notifications were only for private messages.\n          schema:\n            type: string\n          example: typing notifications\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Cannot send to multiple streams\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON error response for when user sends to multiple streams:\n\n  /user_groups/create:\n    post:\n      operationId: create-user-group\n      summary: Create a user group\n      tags: [\"users\"]\n      description: |\n        Create a new [user group](/help/user-groups).\n\n        `POST {{ api_url }}/v1/user_groups/create`\n      parameters:\n        - name: name\n          in: query\n          description: |\n            The name of the user group.\n          schema:\n            type: string\n          example: marketing\n          required: true\n        - name: description\n          in: query\n          description: |\n            The description of the user group.\n          schema:\n            type: string\n          example: The marketing team.\n          required: true\n        - name: members\n          in: query\n          description: |\n            An array containing the user IDs of the initial members for the\n            new user group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [1, 2, 3, 4]\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"result\": \"error\",\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid user ID: 500\",\n                      }\n                    description: |\n                      An example JSON error response for when the one of the users does not exist:\n  /user_groups/{user_group_id}/members:\n    post:\n      operationId: update-user-group-members\n      summary: Update user group members\n      tags: [\"users\"]\n      description: |\n        Update the members of a [user group](/help/user-groups).\n\n        `POST {{ api_url }}/v1/user_groups/{user_group_id}/members`\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - delete\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n        - name: delete\n          in: query\n          description: |\n            The list of user ids to be removed from the user group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [10]\n          required: false\n        - name: add\n          in: query\n          description: |\n            The list of user ids to be added to the user group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [12, 13]\n          required: false\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n    get:\n      operationId: get-user-group-members\n      summary: Get user group members\n      tags: [\"users\"]\n      description: |\n        Get the members of a [user group](/help/user-groups).\n\n        `GET {{ api_url }}/v1/user_groups/{user_group_id}/members`\n\n        **Changes**: New in Zulip 6.0 (feature level 127).\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n        - $ref: \"#/components/parameters/DirectMemberOnly\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      members:\n                        type: array\n                        items:\n                          type: integer\n                        description: |\n                          A list containing the user IDs of members of the user group.\n                    example:\n                      {\"msg\": \"\", \"result\": \"success\", \"members\": [10, 12]}\n  /user_groups/{user_group_id}:\n    patch:\n      operationId: update-user-group\n      summary: Update a user group\n      tags: [\"users\"]\n      description: |\n        Update the name or description of a [user group](/help/user-groups).\n\n        `PATCH {{ api_url }}/v1/user_groups/{user_group_id}`\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n        - name: name\n          in: query\n          description: |\n            The new name of the group.\n          schema:\n            type: string\n          example: marketing team\n          required: true\n        - name: description\n          in: query\n          description: |\n            The new description of the group.\n          schema:\n            type: string\n          example: The marketing team.\n          required: true\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid user group\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON response when the user group ID is invalid:\n    delete:\n      operationId: remove-user-group\n      summary: Delete a user group\n      tags: [\"users\"]\n      description: |\n        Delete a [user group](/help/user-groups).\n\n        `DELETE {{ api_url }}/v1/user_groups/{user_group_id}`\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n\n        \"400\":\n          description: Bad request.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonError\"\n                  - example:\n                      {\n                        \"code\": \"BAD_REQUEST\",\n                        \"msg\": \"Invalid user group\",\n                        \"result\": \"error\",\n                      }\n                    description: |\n                      An example JSON error response for an invalid user group id:\n\n  /user_groups:\n    get:\n      operationId: get-user-groups\n      summary: Get user groups\n      tags: [\"users\"]\n      description: |\n        {!api-members-only.md!}\n\n        Fetches all of the user groups in the organization.\n\n        `GET {{ api_url }}/v1/user_groups`\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      user_groups:\n                        type: array\n                        items:\n                          type: object\n                          additionalProperties: false\n                          properties:\n                            description:\n                              type: string\n                              description: |\n                                The human-readable description of the user group.\n                            id:\n                              type: integer\n                              description: |\n                                The user group's integer id.\n                            members:\n                              type: array\n                              description: |\n                                The integer user IDs of the user group members.\n                              items:\n                                type: integer\n                            direct_subgroup_ids:\n                              type: array\n                              description: |\n                                The integer user group IDs of the direct subgroups.\n\n                                **Changes**: New in Zulip 6.0 (feature level 131).\n                                Introduced in feature level 127 as `subgroups`, but\n                                clients can ignore older events as this feature level\n                                predates subgroups being fully implemented.\n                              items:\n                                type: integer\n                            name:\n                              type: string\n                              description: |\n                                User group name.\n                            is_system_group:\n                              type: boolean\n                              description: |\n                                Whether the user group is a system group which cannot be\n                                modified by users.\n\n                                **Changes**: New in Zulip 5.0 (feature level 93).\n                        description: |\n                          A list of `user_group` objects, which contain a `description`, a `name`,\n                          their `id` and the list of members of the user group.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"user_groups\":\n                          [\n                            {\n                              \"description\": \"Characters of Hamlet\",\n                              \"id\": 1,\n                              \"name\": \"hamletcharacters\",\n                              \"members\": [3, 4],\n                              \"direct_subgroup_ids\": [],\n                              \"is_system_group\": false,\n                            },\n                            {\n                              \"description\": \"Moderators\",\n                              \"id\": 2,\n                              \"name\": \"other users\",\n                              \"members\": [1, 2],\n                              \"direct_subgroup_ids\": [1, 2],\n                              \"is_system_group\": true,\n                            },\n                          ],\n                      }\n  /user_groups/{user_group_id}/subgroups:\n    post:\n      operationId: update-user-group-subgroups\n      summary: Update subgroups of a user group\n      tags: [\"users\"]\n      description: |\n        Update the subgroups of a [user group](/help/user-groups).\n\n        `POST {{ api_url }}/v1/user_groups/{user_group_id}/subgroups`\n\n        **Changes**: New in Zulip 6.0 (feature level 127).\n      x-curl-examples-parameters:\n        oneOf:\n          - type: exclude\n            parameters:\n              enum:\n                - delete\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n        - name: delete\n          in: query\n          description: |\n            The list of user group ids to be removed from the user group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [10]\n          required: false\n        - name: add\n          in: query\n          description: |\n            The list of user group ids to be added to the user group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n              example: [1, 2]\n          required: false\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SimpleSuccess\"\n    get:\n      operationId: get-user-group-subgroups\n      summary: Get subgroups of the user group\n      tags: [\"users\"]\n      description: |\n        Get the subgroups of a [user group](/help/user-groups).\n\n        `GET {{ api_url }}/v1/user_groups/{user_group_id}/subgroups`\n\n        **Changes**: New in Zulip 6.0 (feature level 127).\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n        - name: direct_subgroup_only\n          in: query\n          description: |\n            Whether to consider only direct subgroups of the user group\n            or subgroups of subgroups also.\n          schema:\n            type: boolean\n            default: false\n          example: true\n          required: false\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      subgroups:\n                        type: array\n                        items:\n                          type: integer\n                        description: |\n                          A list containing the IDs of subgroups of the user group.\n                    example:\n                      {\"msg\": \"\", \"result\": \"success\", \"subgroups\": [2, 3]}\n  /user_groups/{user_group_id}/members/{user_id}:\n    get:\n      operationId: get-is-user-group-member\n      summary: Get user group membership status\n      tags: [\"users\"]\n      description: |\n        Check whether a user is member of user group.\n\n        `GET {{ api_url }}/v1/user_groups/{user_group_id}/members/{user_id}`\n\n        **Changes**: New in Zulip 6.0 (feature level 127).\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupId\"\n        - $ref: \"#/components/parameters/UserId\"\n        - $ref: \"#/components/parameters/DirectMemberOnly\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      is_user_group_member:\n                        type: boolean\n                        description: |\n                          Whether the user is member of user group.\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"is_user_group_member\": false,\n                      }\n  /real-time:\n    # This entry is a hack; it exists to give us a place to put the text\n    # documenting the parameters for call_on_each_event and friends.\n    post:\n      tags: [\"real_time_events\"]\n      description: |\n        (Ignored)\n      parameters:\n        - $ref: \"#/components/parameters/Event_types\"\n        - $ref: \"#/components/parameters/Narrow\"\n        - $ref: \"#/components/parameters/AllPublicStreams\"\n      security:\n        - basicAuth: []\n      responses:\n        # Makeshift response for this hack entry.\n        \"200\":\n          description: Success\n  /rest-error-handling:\n    post:\n      operationId: rest-error-handling\n      summary: Error handling\n      tags: [\"real_time_events\"]\n      description: |\n        Common error to many endpoints\n      responses:\n        \"400\":\n          description: |\n            Bad request.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/InvalidApiKeyError\"\n                  - $ref: \"#/components/schemas/MissingArgumentError\"\n                  - $ref: \"#/components/schemas/UserNotAuthorizedError\"\n        \"401\":\n          description: |\n            Unauthorized.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/UserDeactivatedError\"\n                  - $ref: \"#/components/schemas/RealmDeactivatedError\"\n        \"429\":\n          description: |\n            Rate limit exceeded.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/RateLimitedError\"\n  /zulip-outgoing-webhook:\n    post:\n      operationId: zulip-outgoing-webhooks\n      summary: Outgoing webhooks\n      tags: [\"webhooks\"]\n      description: |\n        Outgoing webhooks allow you to build or set up Zulip integrations which are\n        notified when certain types of messages are sent in Zulip.\n      responses:\n        \"200\":\n          description: |\n            Success\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                description: |\n                  This is an example of the JSON payload that the Zulip server will `POST`\n                  to your server:\n                properties:\n                  bot_email:\n                    type: string\n                    description: |\n                      Email of the bot user.\n                  bot_full_name:\n                    type: string\n                    description: |\n                      The full name of the bot user.\n                  data:\n                    type: string\n                    description: |\n                      The message content, in raw Markdown format (not rendered to HTML).\n                  trigger:\n                    type: string\n                    description: |\n                      What aspect of the message triggered the outgoing webhook notification.\n                      Possible values include `private_message` and `mention`.\n                  token:\n                    type: string\n                    description: |\n                      A string of alphanumeric characters that can be used to authenticate the\n                      webhook request (each bot user uses a fixed token). You can get the token used by a given outgoing webhook bot\n                      in the `zuliprc` file downloaded when creating the bot.\n                  message:\n                    description: |\n                      A dictionary containing details on the message that triggered the\n                      outgoing webhook, in the format used by [`GET /messages`](/api/get-messages).\n                    allOf:\n                      - $ref: \"#/components/schemas/MessagesBase\"\n                      - additionalProperties: false\n                        properties:\n                          avatar_url:\n                            nullable: true\n                          client: {}\n                          content: {}\n                          content_type: {}\n                          display_recipient: {}\n                          edit_history: {}\n                          id: {}\n                          is_me_message: {}\n                          last_edit_timestamp: {}\n                          reactions: {}\n                          recipient_id: {}\n                          sender_email: {}\n                          sender_full_name: {}\n                          sender_id: {}\n                          sender_realm_str: {}\n                          stream_id: {}\n                          subject: {}\n                          submessages: {}\n                          timestamp: {}\n                          topic_links: {}\n                          type: {}\n                          rendered_content:\n                            type: string\n                            description: |\n                              The content/body of the message rendered in HTML.\n                example:\n                  {\n                    \"data\": \"@**Outgoing webhook test** Zulip is the world\\u2019s most productive group chat!\",\n                    \"trigger\": \"mention\",\n                    \"token\": \"xvOzfurIutdRRVLzpXrIIHXJvNfaJLJ0\",\n                    \"message\":\n                      {\n                        \"subject\": \"Verona2\",\n                        \"sender_email\": \"iago@zulip.com\",\n                        \"timestamp\": 1527876931,\n                        \"client\": \"website\",\n                        \"submessages\": [],\n                        \"recipient_id\": 20,\n                        \"topic_links\": [],\n                        \"sender_full_name\": \"Iago\",\n                        \"avatar_url\": \"https://secure.gravatar.com/avatar/1f4f1575bf002ae562fea8fc4b861b09?d=identicon\u0026version=1\",\n                        \"rendered_content\": \"\u003cp\u003e\u003cspan class=\\\"user-mention\\\" data-user-id=\\\"25\\\"\u003e@Outgoing webhook test\u003c/span\u003e Zulip is the world\\u2019s most productive group chat!\u003c/p\u003e\",\n                        \"sender_id\": 5,\n                        \"stream_id\": 5,\n                        \"content\": \"@**Outgoing webhook test** Zulip is the world\\u2019s most productive group chat!\",\n                        \"display_recipient\": \"Verona\",\n                        \"type\": \"stream\",\n                        \"id\": 112,\n                        \"is_me_message\": false,\n                        \"reactions\": [],\n                        \"sender_realm_str\": \"zulip\",\n                      },\n                    \"bot_email\": \"outgoing-bot@localhost\",\n                    \"bot_full_name\": \"Outgoing webhook test\",\n                  }\n\n  /calls/bigbluebutton/create:\n    get:\n      tags: [\"streams\"]\n      operationId: create-big-blue-button-video-call\n      summary: Create BigBlueButton video call\n      description: |\n        Create a video call URL for a BigBlueButton video call.\n        Requires BigBlueButton to be configured on the Zulip server.\n      parameters:\n        - in: query\n          name: meeting_name\n          schema:\n            type: string\n          required: true\n          description: |\n            Title to use for the BigBlueButton meeting.\n\n            A good choice is something like \"{stream_name} meeting\".\n      responses:\n        \"200\":\n          description: Success.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/JsonSuccessBase\"\n                  - $ref: \"#/components/schemas/SuccessDescription\"\n                  - additionalProperties: false\n                    properties:\n                      result: {}\n                      msg: {}\n                      url:\n                        description: |\n                          The URL for the BigBlueButton video call.\n                        type: string\n                        example: \"/calls/bigbluebutton/join?meeting_id=%22zulip-something%22\u0026password=%22something%22\u0026name=%22your_meeting_name%22\u0026checksum=%22somechecksum%22\"\n                    example:\n                      {\n                        \"msg\": \"\",\n                        \"result\": \"success\",\n                        \"url\": \"/calls/bigbluebutton/join?meeting_id=%22zulip-something%22\u0026password=%22something%22\u0026checksum=%22somechecksum%22\",\n                      }\n\ncomponents:\n  #######################\n  # Security definitions\n  #######################\n  securitySchemes:\n    BasicAuth:\n      type: http\n      scheme: basic\n      description: |\n        Basic authentication, with the user's email as the username, and the API\n        key as the password. The API key can be fetched using the\n        `/fetch_api_key` or `/dev_fetch_api_key` endpoints.\n\n  schemas:\n    IgnoredParametersUnsupported:\n      type: array\n      items:\n        type: string\n      description: |\n        An array of any parameters sent in the request that are not\n        supported by the endpoint. While this can be expected, e.g. when sending\n        both current and legacy names for a parameter to a Zulip server of\n        unknown version, this often indicates either a bug in the client\n        implementation or an attempt to configure a new feature while\n        connected to an older Zulip server that does not support said feature.\n\n        **Changes**: Added to `POST /users/me/subscriptions/properties` in\n        Zulip 5.0 (feature level 111).\n\n        Added to `PATCH /realm/user_settings_defaults` in Zulip 5.0 (feature level 96).\n\n        Introduced in `PATCH /settings` in Zulip 5.0 (feature level 78).\n    EventIdSchema:\n      type: integer\n      description: |\n        The ID of the event. Events appear in increasing order but may not be consecutive.\n    EventTypeSchema:\n      type: string\n      description: |\n        The event's type, relevant both for client-side dispatch and server-side\n        filtering by event type in [POST /register](/api/register-queue).\n    Attachments:\n      type: object\n      description: |\n        Dictionary containing details of a file uploaded by a user.\n      additionalProperties: false\n      properties:\n        id:\n          type: integer\n          description: |\n            The unique ID for the attachment.\n        name:\n          type: string\n          description: |\n            Name of the uploaded file.\n        path_id:\n          type: string\n          description: |\n            A representation of the path of the file within the\n            repository of user-uploaded files. If the `path_id` of a\n            file is `{realm_id}/ab/cdef/temp_file.py`, its URL will be:\n            `{server_url}/user_uploads/{realm_id}/ab/cdef/temp_file.py`.\n        size:\n          type: integer\n          description: |\n            Size of the file in bytes.\n        create_time:\n          type: integer\n          description: |\n            Time when the attachment was uploaded as a UNIX timestamp\n            multiplied by 1000 (matching the format of getTime() in JavaScript).\n\n            **Changes**: Changed in Zulip 2.2 (feature level 22). This field was\n            previously a floating point number.\n        messages:\n          type: array\n          description: |\n            Contains basic details on any Zulip messages that have been\n            sent referencing this [uploaded file](/api/upload-file).\n            This includes messages sent by any user in the Zulip\n            organization who sent a message containing a link to the\n            uploaded file.\n          items:\n            type: object\n            additionalProperties: false\n            properties:\n              date_sent:\n                type: integer\n                description: |\n                  Time when the message was sent as a UNIX timestamp\n                  multiplied by 1000 (matching the format of getTime() in JavaScript).\n\n                  **Changes**: Changed in Zulip 2.2 (feature level 22). This\n                  field was previously strangely called `name` and was a floating\n                  point number.\n              id:\n                type: integer\n                description: |\n                  The unique message ID. Messages should always be\n                  displayed sorted by ID.\n    BasicStream:\n      allOf:\n        - $ref: \"#/components/schemas/BasicStreamBase\"\n        - additionalProperties: false\n          properties:\n            stream_id: {}\n            name: {}\n            description: {}\n            date_created: {}\n            invite_only: {}\n            rendered_description: {}\n            is_web_public: {}\n            stream_post_policy: {}\n            message_retention_days:\n              nullable: true\n            history_public_to_subscribers: {}\n            first_message_id:\n              nullable: true\n            is_announcement_only: {}\n    BasicStreamBase:\n      type: object\n      description: |\n        Object containing basic details about the stream.\n      properties:\n        stream_id:\n          type: integer\n          description: |\n            The unique ID of the stream.\n        name:\n          type: string\n          description: |\n            The name of the stream.\n        description:\n          type: string\n          description: |\n            The short description of the stream in text/markdown format,\n            intended to be used to prepopulate UI for editing a stream's\n            description.\n        date_created:\n          type: integer\n          description: |\n            The UNIX timestamp for when the stream was created, in UTC seconds.\n\n            **Changes**: New in Zulip 4.0 (feature level 30).\n        invite_only:\n          type: boolean\n          description: |\n            Specifies whether the stream is private or not.\n            Only people who have been invited can access a private stream.\n        rendered_description:\n          type: string\n          description: |\n            The short description of the stream rendered as HTML, intended to\n            be used when displaying the stream description in a UI.\n\n            One should use the standard Zulip rendered_markdown CSS when\n            displaying this content so that emoji, LaTeX, and other syntax\n            work correctly. And any client-side security logic for\n            user-generated message content should be applied when displaying\n            this HTML as though it were the body of a Zulip message.\n        is_web_public:\n          type: boolean\n          description: |\n            Whether the stream has been configured to allow unauthenticated\n            access to its message history from the web.\n        stream_post_policy:\n          type: integer\n          description: |\n            [Policy][permission-level] for which users can post messages to the stream.\n\n            - 1 =\u003e Any user can post.\n            - 2 =\u003e Only administrators can post.\n            - 3 =\u003e Only [full members][calc-full-member] can post.\n            - 4 =\u003e Only moderators can post.\n\n            **Changes**: New in Zulip 3.0, replacing the previous\n            `is_announcement_only` boolean.\n\n            [permission-level]: /api/roles-and-permissions#permission-levels\n            [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n        message_retention_days:\n          type: integer\n          nullable: true\n          description: |\n            Number of days that messages sent to this stream will be stored\n            before being automatically deleted by the [message retention\n            policy](/help/message-retention-policy). There are two special values:\n\n            - `null`, the default, means the stream will inherit the organization\n              level setting.\n            - `-1` encodes retaining messages in this stream forever.\n\n            **Changes**: New in Zulip 3.0 (feature level 17).\n        history_public_to_subscribers:\n          type: boolean\n          description: |\n            Whether the history of the stream is public to its subscribers.\n\n            Currently always true for public streams (i.e. invite_only=False implies\n            history_public_to_subscribers=True), but clients should not make that\n            assumption, as we may change that behavior in the future.\n        first_message_id:\n          type: integer\n          nullable: true\n          description: |\n            The id of the first message in the stream.\n\n            Intended to help clients determine whether they need to display\n            UI like the \"more topics\" widget that would suggest the stream\n            has older history that can be accessed.\n\n            Null is used for streams with no message history.\n        is_announcement_only:\n          type: boolean\n          deprecated: true\n          description: |\n            Whether the given stream is announcement only or not.\n\n            **Changes**: Deprecated in Zulip 3.0 (feature level 1), use\n            `stream_post_policy` instead.\n    BasicBot:\n      allOf:\n        - $ref: \"#/components/schemas/BasicBotBase\"\n        - additionalProperties: false\n          properties:\n            user_id: {}\n            full_name: {}\n            api_key: {}\n            default_sending_stream:\n              nullable: true\n            default_events_register_stream:\n              nullable: true\n            default_all_public_streams: {}\n            avatar_url: {}\n            owner_id:\n              nullable: true\n            services:\n              items: {} # https://github.com/p1c2u/openapi-core/issues/380\n    BasicBotBase:\n      type: object\n      properties:\n        user_id:\n          type: integer\n          description: |\n            The user id of the bot.\n        full_name:\n          type: string\n          description: |\n            The full name of the bot.\n        api_key:\n          type: string\n          description: |\n            The API key of the bot which it uses to make API requests.\n        default_sending_stream:\n          type: string\n          nullable: true\n          description: |\n            The default sending stream of the bot. Null if the bot doesn't\n            have a default sending stream.\n        default_events_register_stream:\n          type: string\n          nullable: true\n          description: |\n            The default stream for which the bot receives events/register data. Null if\n            the bot doesn't have such a default stream.\n        default_all_public_streams:\n          type: boolean\n          description: |\n            Whether the bot can send messages to all streams by default.\n        avatar_url:\n          type: string\n          description: |\n            The URL of the bot's avatar.\n        owner_id:\n          type: integer\n          nullable: true\n          description: |\n            The user id of the bot's owner.\n\n            Null if the bot has no owner.\n        services:\n          type: array\n          description: |\n            The \"Services\" array contains extra configuration fields only relevant\n            for Outgoing webhook bots and Embedded bots. It is always a single-element\n            array.\n\n            We consider this part of the Zulip API to be unstable; it is used only for\n            UI elements for administering bots and is likely to change.\n          items:\n            description: |\n              Object containing details extra details. Which fields appear depend\n              on the type of bot.\n            oneOf:\n              - type: object\n                additionalProperties: false\n                description: |\n                  When the bot is an outgoing webhook bot.\n                properties:\n                  base_url:\n                    type: string\n                    description: |\n                      The URL the outgoing webhook is configured to post to.\n                  token:\n                    type: string\n                    description: |\n                      A unique token that the third-party service can use to confirm\n                      that the request is indeed coming from Zulip.\n                  interface:\n                    type: integer\n                    description: |\n                      Integer indicating what format requests are posted in:\n\n                      - 1 = Zulip's native outgoing webhook format.\n                      - 2 = Emulate the Slack outgoing webhook format.\n              - type: object\n                additionalProperties: false\n                description: |\n                  When the bot is an embedded bot.\n                properties:\n                  service_name:\n                    type: string\n                    description: |\n                      The name of the bot.\n                  config_data:\n                    $ref: \"#/components/schemas/Config\"\n    Bot:\n      allOf:\n        - $ref: \"#/components/schemas/BasicBotBase\"\n        - description: |\n            Object containing details of a bot.\n          additionalProperties: false\n          properties:\n            user_id: {}\n            full_name: {}\n            api_key: {}\n            default_sending_stream:\n              nullable: true\n            default_events_register_stream:\n              nullable: true\n            default_all_public_streams: {}\n            avatar_url: {}\n            owner_id:\n              nullable: true\n            services:\n              items: {} # https://github.com/p1c2u/openapi-core/issues/380\n            email:\n              type: string\n              description: |\n                The email of the bot.\n            bot_type:\n              type: integer\n              nullable: true\n              description: |\n                An integer describing the type of bot:\n\n                - `1` for a `Generic` bot.\n                - `2` for an `Incoming webhook` bot.\n                - `3` for an `Outgoing webhook` bot.\n                - `4` for an `Embedded` bot.\n            is_active:\n              type: boolean\n              description: |\n                A boolean describing whether the user account has been deactivated.\n    Config:\n      type: object\n      description: |\n        A \"string: string\" dictionary which describes the configuration\n        for the embedded bot (usually details like API keys).\n      additionalProperties:\n        description: |\n          String describing the config data.\n        type: string\n    CustomProfileField:\n      type: object\n      additionalProperties: false\n      description: |\n        Dictionary containing the details of a custom profile field configured\n        for this organization.\n      properties:\n        id:\n          type: integer\n          description: |\n            The ID of the custom profile field. This will be referenced in custom\n            the profile fields section of user objects.\n        type:\n          type: integer\n          description: |\n            An integer indicating the type of the custom profile field, which determines\n            how it is configured and displayed to users.\n\n            See the [Add custom profile fields](/help/add-custom-profile-fields)\n            article for details on what each type means.\n\n            - **1**: Short text\n            - **2**: Long text\n            - **3**: List of options\n            - **4**: Date picker\n            - **5**: Link\n            - **6**: Person picker\n            - **7**: External account\n        order:\n          type: integer\n          description: |\n            Custom profile fields are displayed in both settings UI and\n            UI showing users' profiles in increasing `order`.\n        name:\n          type: string\n          description: |\n            The name of the custom profile field.\n        hint:\n          type: string\n          description: |\n            The help text to be displayed for the custom profile field in user-facing\n            settings UI for configuring custom profile fields.\n        field_data:\n          type: string\n          description: |\n            Field types 3 (List of options) and 7 (External account) support storing\n            additional configuration for the field type in the `field_data` attribute.\n\n            For field type 3 (List of options), this attribute is a JSON dictionary\n            defining the choices and the order they will be displayed in the\n            dropdown UI for individual users to select an option.\n\n            The interface for field type 7 is not yet stabilized.\n    Hotspot:\n      type: object\n      additionalProperties: false\n      description: |\n        Dictionary containing details of a single hotspot.\n      properties:\n        delay:\n          type: number\n          description: |\n            The delay after which the user should be shown the hotspot.\n        name:\n          type: string\n          description: |\n            The name of the hotspot.\n        title:\n          type: string\n          description: |\n            The title of the hotspot, as will be displayed to the user.\n        description:\n          type: string\n          description: |\n            The description of the hotspot, as will be displayed to the\n            user.\n    RealmEmoji:\n      type: object\n      additionalProperties: false\n      description: |\n        `{emoji_id}`: Object containing details about the emoji with\n        the specified ID. It has the following properties:\n      properties:\n        id:\n          type: string\n          description: |\n            The ID for this emoji, same as the object's key.\n        name:\n          type: string\n          description: |\n            The user-friendly name for this emoji. Users in the organization\n            can use this emoji by writing this name between colons (`:name :`).\n        source_url:\n          type: string\n          description: |\n            The path relative to the organization's URL where the\n            emoji's image can be found.\n        still_url:\n          type: string\n          nullable: true\n          description: |\n            Only non-null when the emoji's image is animated.\n\n            The path relative to the organization's URL where a still\n            (not animated) version of the emoji can be found. (This is\n            currently always the first frame of the animation).\n\n            This is useful for clients to display the emoji in contexts\n            where continuously animating it would be a bad user experience\n            (E.g. because it would be distracting).\n\n            **Changes**: New in Zulip 5.0 (added as optional field in\n            feature level 97 and then made mandatory, but nullable, in\n            feature level 113).\n        deactivated:\n          type: boolean\n          description: |\n            Whether the emoji has been deactivated or not.\n        author_id:\n          type: integer\n          nullable: true\n          description: |\n            The user ID of the user who uploaded the custom emoji.\n            Will be null if the uploader is unknown.\n\n            **Changes**: New in Zulip 3.0 (feature level 7). Previously\n            was accessible via and `author` object with an `id` field.\n    RealmDomain:\n      type: object\n      additionalProperties: false\n      description: |\n        Object containing details of the newly added domain.\n      properties:\n        domain:\n          type: string\n          description: |\n            The new allowed domain.\n        allow_subdomains:\n          type: boolean\n          description: |\n            Whether subdomains are allowed for this domain.\n    RealmPlayground:\n      type: object\n      additionalProperties: false\n      description: |\n        Object containing details about a realm playground.\n      properties:\n        id:\n          type: integer\n          description: |\n            The unique ID for the realm playground.\n        name:\n          type: string\n          description: |\n            The user-visible display name of the playground. Clients\n            should display this in UI for picking which playground to\n            open a code block in, to differentiate between multiple\n            configured playground options for a given pygments\n            language.\n\n            **Changes**: New in Zulip 4.0 (feature level 49).\n        pygments_language:\n          type: string\n          description: |\n            The name of the Pygments language lexer for that\n            programming language.\n        url_prefix:\n          type: string\n          description: |\n            The url prefix for the playground.\n    RealmExport:\n      type: object\n      additionalProperties: false\n      description: |\n        Object containing details about a realm export.\n      properties:\n        id:\n          type: integer\n          description: |\n            The id of the export.\n        acting_user_id:\n          type: integer\n          description: |\n            The id of the user who did the export.\n        export_time:\n          type: number\n          description: |\n            The UNIX timestamp of when the export was made.\n        deleted_timestamp:\n          type: number\n          nullable: true\n          description: |\n            The timestamp of when the export was deleted.\n            Null if it wasn't.\n        failed_timestamp:\n          type: number\n          nullable: true\n          description: |\n            The timestamp of when the export failed.\n            Null if it didn't.\n        export_url:\n          type: string\n          nullable: true\n          description: |\n            The URL of the export. `null` if there's no URL.\n        pending:\n          type: boolean\n          description: |\n            Whether the export is pending or not.\n    UserGroup:\n      type: object\n      additionalProperties: false\n      description: |\n        Object containing the user group's attributes.\n      properties:\n        name:\n          type: string\n          description: |\n            The name of the user group.\n        description:\n          type: string\n          description: |\n            The description of the user group.\n        members:\n          type: array\n          items:\n            type: integer\n          description: |\n            Array containing the id of the users who are\n            members of this user group.\n        direct_subgroup_ids:\n          type: array\n          items:\n            type: integer\n          description: |\n            Array containing the id of the direct_subgroups of\n            this user group.\n\n            **Changes**: New in Zulip 6.0 (feature level 131).\n            Introduced in feature level 127 as `subgroups`, but\n            clients can ignore older events as this feature level\n            predates subgroups being fully implemented.\n        id:\n          type: integer\n          description: |\n            The ID of the user group.\n        is_system_group:\n          type: boolean\n          description: |\n            Whether the user group is a system group which cannot be\n            directly modified by users.\n\n            **Changes**: New in Zulip 5.0 (feature level 93).\n    Subscriptions:\n      type: object\n      additionalProperties: false\n      properties:\n        stream_id:\n          type: integer\n          description: |\n            The unique ID of a stream.\n        name:\n          type: string\n          description: |\n            The name of a stream.\n        description:\n          type: string\n          description: |\n            The [description](/help/change-the-stream-description) of the stream in text/markdown format,\n            intended to be used to prepopulate UI for editing a stream's\n            description.\n\n            See also `rendered_description`.\n        rendered_description:\n          type: string\n          description: |\n            The [description](/help/change-the-stream-description) of the stream rendered as HTML, intended to\n            be used when displaying the stream description in a UI.\n\n            One should use the standard Zulip rendered_markdown CSS when\n            displaying this content so that emoji, LaTeX, and other syntax\n            work correctly. And any client-side security logic for\n            user-generated message content should be applied when displaying\n            this HTML as though it were the body of a Zulip message.\n\n            See also `description`.\n        date_created:\n          type: integer\n          description: |\n            The UNIX timestamp for when the stream was created, in UTC seconds.\n\n            **Changes**: New in Zulip 4.0 (feature level 30).\n        invite_only:\n          type: boolean\n          description: |\n            Specifies whether the stream is private or not.\n            Only people who have been invited can access a private stream.\n        # TODO: This subscribers item should probably be declared optional more\n        # explicitly in the OpenAPI format?\n        subscribers:\n          type: array\n          items:\n            type: integer\n          description: |\n            A list of user IDs of users who are also subscribed\n            to a given stream. Included only if `include_subscribers` is `true`.\n        desktop_notifications:\n          type: boolean\n          nullable: true\n          description: |\n            A boolean specifying whether desktop notifications\n            are enabled for the given stream.\n\n            A null value means the value of this setting\n            should be inherited from the user-level default\n            setting, enable_stream_desktop_notifications, for\n            this stream.\n        email_notifications:\n          type: boolean\n          nullable: true\n          description: |\n            A boolean specifying whether email notifications\n            are enabled for the given stream.\n\n            A null value means the value of this setting\n            should be inherited from the user-level default\n            setting, enable_stream_email_notifications, for\n            this stream.\n        wildcard_mentions_notify:\n          type: boolean\n          nullable: true\n          description: |\n            A boolean specifying whether wildcard mentions\n            trigger notifications as though they were personal\n            mentions in this stream.\n\n            A null value means the value of this setting\n            should be inherited from the user-level default\n            setting, wildcard_mentions_notify, for\n            this stream.\n        push_notifications:\n          type: boolean\n          nullable: true\n          description: |\n            A boolean specifying whether push notifications\n            are enabled for the given stream.\n\n            A null value means the value of this setting\n            should be inherited from the user-level default\n            setting, enable_stream_push_notifications, for\n            this stream.\n        audible_notifications:\n          type: boolean\n          nullable: true\n          description: |\n            A boolean specifying whether audible notifications\n            are enabled for the given stream.\n\n            A null value means the value of this setting\n            should be inherited from the user-level default\n            setting, enable_stream_audible_notifications, for\n            this stream.\n        pin_to_top:\n          type: boolean\n          description: |\n            A boolean specifying whether the given stream has been pinned\n            to the top.\n        email_address:\n          type: string\n          description: |\n            Email address of the given stream, used for\n            [sending emails to the stream](/help/message-a-stream-by-email).\n        is_muted:\n          type: boolean\n          description: |\n            Whether the user has muted the stream. Muted streams do\n            not count towards your total unread count and do not show up in\n            `All messages` view (previously known as `Home` view).\n\n            **Changes**: Prior to Zulip 2.1, this feature was\n            represented by the more confusingly named `in_home_view` (with the\n            opposite value, `in_home_view=!is_muted`).\n        in_home_view:\n          type: boolean\n          deprecated: true\n          description: |\n            Legacy property for if the given stream is muted, with inverted meeting.\n\n            **Deprecated**; clients should use is_muted where available.\n        is_announcement_only:\n          type: boolean\n          deprecated: true\n          description: |\n            Whether only organization administrators can post to the stream.\n\n            **Changes**: Deprecated in Zulip 3.0 (feature level 1), use\n            `stream_post_policy` instead.\n        is_web_public:\n          type: boolean\n          description: |\n            Whether the stream has been configured to allow unauthenticated\n            access to its message history from the web.\n        role:\n          type: integer\n          enum:\n            - 20\n            - 50\n          description: |\n            The user's role within the stream (distinct from the user's\n            [organization-level role](/help/roles-and-permissions)).\n            Valid values are:\n\n            - 20 =\u003e Stream administrator.\n            - 50 =\u003e Subscriber.\n\n            **Changes**: New in Zulip 4.0 (feature level 31).\n        color:\n          type: string\n          description: |\n            The user's personal color for the stream.\n        stream_post_policy:\n          type: integer\n          description: |\n            [Policy][permission-level] for which users can post messages to the stream.\n\n            - 1 =\u003e Any user can post.\n            - 2 =\u003e Only administrators can post.\n            - 3 =\u003e Only [full members][calc-full-member] can post.\n            - 4 =\u003e Only moderators can post.\n\n            **Changes**: New in Zulip 3.0, replacing the previous\n            `is_announcement_only` boolean.\n\n            [permission-level]: /api/roles-and-permissions#permission-levels\n            [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n        message_retention_days:\n          type: integer\n          nullable: true\n          description: |\n            Number of days that messages sent to this stream will be stored\n            before being automatically deleted by the [message retention\n            policy](/help/message-retention-policy). There are two special values:\n\n            - `null`, the default, means the stream will inherit the organization\n              level setting.\n            - `-1` encodes retaining messages in this stream forever.\n\n            **Changes**: New in Zulip 3.0 (feature level 17).\n        history_public_to_subscribers:\n          type: boolean\n          description: |\n            Whether the history of the stream is public to its subscribers.\n\n            Currently always true for public streams (i.e. invite_only=False implies\n            history_public_to_subscribers=True), but clients should not make that\n            assumption, as we may change that behavior in the future.\n        first_message_id:\n          type: integer\n          nullable: true\n          description: |\n            The id of the first message in the stream.\n\n            Intended to help clients determine whether they need to display\n            UI like the \"more topics\" widget that would suggest the stream\n            has older history that can be accessed.\n\n            Null is used for streams with no message history.\n        stream_weekly_traffic:\n          type: integer\n          nullable: true\n          description: |\n            The average number of messages sent to the stream in recent weeks,\n            rounded to the nearest integer.\n\n            Null means the stream was recently created and there is\n            insufficient data to estimate the average traffic.\n    DefaultStreamGroup:\n      type: object\n      description: |\n        Dictionary containing details of a default stream\n        group.\n      additionalProperties: false\n      properties:\n        name:\n          type: string\n          description: |\n            Name of the default stream group.\n        description:\n          type: string\n          description: |\n            Description of the default stream group.\n        id:\n          type: integer\n          description: |\n            id of the default stream group.\n        streams:\n          type: array\n          description: |\n            Array containing details about the streams\n            in the default stream group.\n          items:\n            $ref: \"#/components/schemas/BasicStream\"\n    EmojiReaction:\n      allOf:\n        - $ref: \"#/components/schemas/EmojiReactionBase\"\n        - additionalProperties: false\n          properties:\n            emoji_code: {}\n            emoji_name: {}\n            reaction_type: {}\n            user_id: {}\n            user: {}\n    EmojiBase:\n      type: object\n      properties:\n        emoji_name:\n          type: string\n          description: |\n            Name of the emoji.\n        emoji_code:\n          type: string\n          description: |\n            A unique identifier, defining the specific emoji codepoint requested,\n            within the namespace of the `reaction_type`.\n        reaction_type:\n          type: string\n          description: |\n            A string indicating the type of emoji. Each emoji `reaction_type`\n            has an independent namespace for values of `emoji_code`.\n\n            Must be one of the following values:\n\n            - `unicode_emoji` : In this namespace, `emoji_code` will be a\n              dash-separated hex encoding of the sequence of Unicode codepoints\n              that define this emoji in the Unicode specification.\n\n            - `realm_emoji` : In this namespace, `emoji_code` will be the ID of\n              the uploaded [custom emoji](/help/custom-emoji).\n\n            - `zulip_extra_emoji` : These are special emoji included with Zulip.\n              In this namespace, `emoji_code` will be the name of the emoji (e.g.\n              \"zulip\").\n    EmojiReactionBase:\n      allOf:\n        - $ref: \"#/components/schemas/EmojiBase\"\n        - properties:\n            user_id:\n              type: integer\n              description: |\n                The ID of the user who added the reaction.\n\n                **Changes**: New in Zulip 3.0 (feature level 2). The `user`\n                object is deprecated and will be removed in the future.\n            user:\n              type: object\n              additionalProperties: false\n              deprecated: true\n              description: |\n                **Deprecated** and to be removed in a future release\n                once core clients have migrated to use the adjacent\n                `user_id` field introduced in Zulip 3.0 (feature level\n                2). Clients supporting older Zulip server versions\n                should just use the user ID below as they would the\n                `user_id` field.\n\n                Dictionary with data on the user who added the\n                reaction, including the user ID as the `id`\n                field. Note that reactions data received from the\n                [events API](/api/get-events) has a slightly different\n                `user` dictionary format, with the user ID field\n                called `user_id` instead.\n              properties:\n                id:\n                  type: integer\n                  description: |\n                    ID of the user.\n                email:\n                  type: string\n                  description: |\n                    Email of the user.\n                full_name:\n                  type: string\n                  description: |\n                    Full name of the user.\n                is_mirror_dummy:\n                  type: boolean\n                  description: |\n                    Whether the user is a mirror dummy.\n    MessagesEvent:\n      allOf:\n        - $ref: \"#/components/schemas/MessagesBase\"\n        - additionalProperties: false\n          properties:\n            avatar_url:\n              nullable: true\n            client: {}\n            content: {}\n            content_type: {}\n            display_recipient: {}\n            edit_history: {}\n            id: {}\n            is_me_message: {}\n            last_edit_timestamp: {}\n            reactions: {}\n            recipient_id: {}\n            sender_email: {}\n            sender_full_name: {}\n            sender_id: {}\n            sender_realm_str: {}\n            stream_id: {}\n            subject: {}\n            submessages: {}\n            timestamp: {}\n            topic_links: {}\n            type: {}\n    MessagesBase:\n      type: object\n      description: |\n        Object containing details of the message.\n      properties:\n        avatar_url:\n          type: string\n          nullable: true\n          description: |\n            The URL of the user's avatar. Can be null only if client_gravatar was passed,\n            which means that the user has not uploaded an avatar in Zulip, and the\n            client should compute the gravatar URL by hashing the\n            user's email address itself for this user.\n        client:\n          type: string\n          description: |\n            A Zulip \"client\" string, describing what Zulip client\n            sent the message.\n        content:\n          type: string\n          description: |\n            The content/body of the message.\n        content_type:\n          type: string\n          description: |\n            The HTTP `content_type` for the message content. This\n            will be `text/html` or `text/x-markdown`, depending on\n            whether `apply_markdown` was set.\n        display_recipient:\n          oneOf:\n            - type: string\n            - type: array\n              items:\n                type: object\n                additionalProperties: false\n                properties:\n                  id:\n                    type: integer\n                    description: |\n                      ID of the user.\n                  email:\n                    type: string\n                    description: |\n                      Email of the user.\n                  full_name:\n                    type: string\n                    description: |\n                      Full name of the user.\n                  is_mirror_dummy:\n                    type: boolean\n                    description: |\n                      Whether the user is a mirror dummy.\n          description: |\n            Data on the recipient of the message;\n            either the name of a stream or a dictionary containing basic data on\n            the users who received the message.\n        edit_history:\n          type: array\n          items:\n            type: object\n            additionalProperties: false\n            properties:\n              prev_content:\n                type: string\n                description: |\n                  Only present if message's content was edited.\n\n                  The content of the message immediately prior to this\n                  edit event.\n              prev_rendered_content:\n                type: string\n                description: |\n                  Only present if message's content was edited.\n\n                  The rendered HTML representation of `prev_content`.\n              prev_rendered_content_version:\n                type: integer\n                description: |\n                  Only present if message's content was edited.\n\n                  The Markdown processor version number for the message\n                  immediately prior to this edit event.\n              prev_stream:\n                type: integer\n                description: |\n                  Only present if message's stream was edited.\n\n                  The stream ID of the message immediately prior to this\n                  edit event.\n              prev_topic:\n                type: string\n                description: |\n                  Only present if message's topic was edited.\n\n                  The topic of the message immediately prior to this\n                  edit event.\n\n                  **Changes**: New in Zulip 5.0 (feature level 118).\n                  Previously, this field was called `prev_subject`;\n                  clients are recommended to rename `prev_subject` to\n                  `prev_topic` if present for compatibility with\n                  older Zulip servers.\n              stream:\n                type: integer\n                description: |\n                  Only present if message's stream was edited.\n\n                  The ID of the stream containing the message\n                  immediately after this edit event.\n\n                  **Changes**: New in Zulip 5.0 (feature level 118).\n              timestamp:\n                type: integer\n                description: |\n                  The UNIX timestamp for the edit.\n              topic:\n                type: string\n                description: |\n                  Only present if message's topic was edited.\n\n                  The topic of the message immediately after this edit event.\n\n                  **Changes**: New in Zulip 5.0 (feature level 118).\n              user_id:\n                type: integer\n                nullable: true\n                description: |\n                  The ID of the user that made the edit.\n\n                  Will be null only for edit history\n                  events predating March 2017.\n\n                  Clients can display edit history events where this\n                  is null as modified by either the sender (for content\n                  edits) or an unknown user (for topic edits).\n            required:\n              - user_id\n              - timestamp\n          description: |\n            An array of objects, with each object documenting the\n            changes in a previous edit made to the the message,\n            ordered chronologically from most recent to least recent\n            edit.\n\n            Not present if the message has never been edited or if the realm has\n            [disabled viewing of message edit history][disable-edit-history].\n\n            Every object will contain `user_id` and `timestamp`.\n\n            The other fields are optional, and will be present or not\n            depending on whether the stream, topic, and/or message\n            content were modified in the edit event. For example, if\n            only the topic was edited, only `prev_topic` and `topic`\n            will be present in addition to `user_id` and `timestamp`.\n\n            [disable-edit-history]: /help/disable-message-edit-history\n        id:\n          type: integer\n          description: |\n            The unique message ID. Messages should always be\n            displayed sorted by ID.\n        is_me_message:\n          type: boolean\n          description: |\n            Whether the message is a [/me status message][status-messages]\n\n            [status-messages]: /help/format-your-message-using-markdown#status-messages\n        last_edit_timestamp:\n          type: integer\n          description: |\n            The UNIX timestamp for when the message was last edited,\n            in UTC seconds.\n\n            Not present if the message has never been edited.\n        reactions:\n          type: array\n          description: |\n            Data on any reactions to the message.\n          items:\n            $ref: \"#/components/schemas/EmojiReaction\"\n        recipient_id:\n          type: integer\n          description: |\n            A unique ID for the set of users receiving the\n            message (either a stream or group of users). Useful primarily\n            for hashing.\n        sender_email:\n          type: string\n          description: |\n            The Zulip display email address of the message's sender.\n        sender_full_name:\n          type: string\n          description: |\n            The full name of the message's sender.\n        sender_id:\n          type: integer\n          description: |\n            The user ID of the message's sender.\n        sender_realm_str:\n          type: string\n          description: |\n            A string identifier for the realm the sender is in. Unique only within\n            the context of a given Zulip server.\n\n            E.g. on `example.zulip.com`, this will be `example`.\n        stream_id:\n          type: integer\n          description: |\n            Only present for stream messages; the ID of the stream.\n        subject:\n          type: string\n          description: |\n            The `topic` of the message. Currently always `\"\"` for private messages,\n            though this could change if Zulip adds support for topics in private\n            message conversations.\n\n            The field name is a legacy holdover from when topics were\n            called \"subjects\" and will eventually change.\n        submessages:\n          type: array\n          items:\n            type: string\n          description: |\n            Data used for certain experimental Zulip integrations.\n        timestamp:\n          type: integer\n          description: |\n            The UNIX timestamp for when the message was sent,\n            in UTC seconds.\n        topic_links:\n          type: array\n          items:\n            type: object\n            additionalProperties: false\n            properties:\n              text:\n                type: string\n                description: |\n                  The original link text present in the topic.\n              url:\n                type: string\n                description: |\n                  The expanded target url which the link points to.\n          description: |\n            Data on any links to be included in the `topic`\n            line (these are generated by [custom linkification\n            filters](/help/add-a-custom-linkifier) that match content in the\n            message's topic.)\n\n            **Changes**: This field contained a list of urls before\n            Zulip 4.0 (feature level 46).\n\n            New in Zulip 3.0 (feature level 1): Previously, this field was called\n            `subject_links`; clients are recommended to rename `subject_links` to `topic_links`\n            if present for compatibility with older Zulip servers.\n        type:\n          type: string\n          description: |\n            The type of the message: `stream` or `private`.\n    Presence:\n      type: object\n      description: |\n        `{client_name}`: Object containing the details of the user's\n        presence on a particular platform with the client's platform\n        name being the object key.\n      additionalProperties: false\n      properties:\n        client:\n          type: string\n          description: |\n            The client's platform name.\n        status:\n          type: string\n          enum:\n            - idle\n            - active\n          description: |\n            The status of the user on this client. It is either `idle`\n            or `active`.\n        timestamp:\n          type: integer\n          description: |\n            The UNIX timestamp of when this client sent the user's presence\n            to the server with the precision of a second.\n        pushable:\n          type: boolean\n          description: |\n            Whether the client is capable of showing mobile/push notifications\n            to the user.\n    Draft:\n      type: object\n      description: |\n        A dictionary for representing a message draft.\n      properties:\n        id:\n          type: integer\n          description: |\n            The unique ID of the draft. It will only used whenever the drafts are\n            fetched. This field should not be specified when the draft is being\n            created or edited.\n        type:\n          type: string\n          description: |\n            The type of the draft. Either unaddressed (empty string), \"stream\",\n            or \"private\" (for PMs and private group messages).\n          enum:\n            - \"\"\n            - stream\n            - private\n        to:\n          type: array\n          description: |\n            An array of the tentative target audience IDs. For \"stream\"\n            messages, this should contain exactly 1 ID, the ID of the\n            target stream. For private messages, this should be an array\n            of target user IDs. For unaddressed drafts, this is ignored,\n            and clients should send an empty array.\n          items:\n            type: integer\n        topic:\n          type: string\n          description: |\n            For stream message drafts, the tentative topic name. For private\n            or unaddressed messages, this will be ignored and should ideally\n            be the empty string. Should not contain null bytes.\n        content:\n          type: string\n          description: |\n            The body of the draft. Should not contain null bytes.\n        timestamp:\n          type: number\n          description: |\n            A Unix timestamp (seconds only) representing when the draft was\n            last edited. When creating a draft, this key need not be present\n            and it will be filled in automatically by the server.\n          example: 1595479019\n      additionalProperties: false\n      required:\n        - type\n        - to\n        - topic\n        - content\n    User:\n      allOf:\n        - $ref: \"#/components/schemas/UserBase\"\n        - additionalProperties: false\n          properties:\n            user_id: {}\n            delivery_email: {}\n            email: {}\n            full_name: {}\n            date_joined: {}\n            is_active: {}\n            is_owner: {}\n            is_admin: {}\n            is_guest: {}\n            is_billing_admin: {}\n            is_bot: {}\n            bot_type:\n              nullable: true\n            bot_owner_id:\n              nullable: true\n            role: {}\n            timezone: {}\n            avatar_url:\n              nullable: true\n            avatar_version: {}\n            profile_data: {}\n    UserBase:\n      type: object\n      description: |\n        A dictionary containing basic data on a given Zulip user.\n      properties:\n        user_id:\n          type: integer\n          description: |\n            The unique ID of the user.\n        delivery_email:\n          type: string\n          description: |\n            The user's real email address. This field is present only if\n            [email address visibility](/help/restrict-visibility-of-email-addresses) is\n            limited and you are an administrator with access to real email addresses\n            under the configured policy.\n        email:\n          type: string\n          description: |\n            The Zulip API email address of the user or bot.\n\n            If you do not have permission to view the email address of the target user,\n            this will be a fake email address that is usable for the Zulip API but nothing else.\n        full_name:\n          type: string\n          description: |\n            Full name of the user or bot, used for all display purposes.\n        date_joined:\n          type: string\n          description: |\n            The time the user account was created.\n        is_active:\n          type: boolean\n          description: |\n            A boolean specifying whether the user account has been deactivated.\n        is_owner:\n          type: boolean\n          description: |\n            A boolean specifying whether the user is an organization owner.\n            If true, `is_admin` will also be true.\n\n            **Changes**: New in Zulip 3.0 (feature level 8).\n        is_admin:\n          type: boolean\n          description: |\n            A boolean specifying whether the user is an organization administrator.\n        is_guest:\n          type: boolean\n          description: |\n            A boolean specifying whether the user is a guest user.\n        is_billing_admin:\n          type: boolean\n          description: |\n            A boolean specifying whether the user is a billing administrator.\n\n            **Changes**: New in Zulip 5.0 (feature level 73).\n        is_bot:\n          type: boolean\n          description: |\n            A boolean specifying whether the user is a bot or full account.\n        bot_type:\n          type: integer\n          nullable: true\n          description: |\n            An integer describing the type of bot:\n\n            - `null` if the user isn't a bot.\n            - `1` for a `Generic` bot.\n            - `2` for an `Incoming webhook` bot.\n            - `3` for an `Outgoing webhook` bot.\n            - `4` for an `Embedded` bot.\n        bot_owner_id:\n          type: integer\n          nullable: true\n          description: |\n            If the user is a bot (i.e. `is_bot` is `True`),\n            `bot_owner` is the user ID of the bot's owner (usually, whoever\n            created the bot).\n\n            Will be null for legacy bots that do not have an owner.\n\n            **Changes**: New in Zulip 3.0 (feature level\n            1). In previous versions, there was a `bot_owner` field\n            containing the email address of the bot's owner.\n        role:\n          type: integer\n          enum:\n            - 100\n            - 200\n            - 300\n            - 400\n            - 600\n          description: |\n            [Organization-level role](/api/roles-and-permissions) of the user.\n            Possible values are:\n\n            - Organization owner =\u003e 100\n            - Organization administrator =\u003e 200\n            - Organization moderator =\u003e 300\n            - Member =\u003e 400\n            - Guest =\u003e 600\n\n            **Changes**: New in Zulip 4.0 (feature level 59).\n        timezone:\n          type: string\n          description: |\n            The time zone of the user.\n        avatar_url:\n          type: string\n          nullable: true\n          description: |\n            URL for the user's avatar. Will be `null` if the `client_gravatar`\n            query parameter was set to `True` and the user's avatar is hosted by\n            the Gravatar provider (i.e. the user has never uploaded an avatar).\n\n            **Changes**: In Zulip 3.0 (feature level 18), if the client has the\n            `user_avatar_url_field_optional` capability, this will be missing at\n            the server's sole discretion.\n        avatar_version:\n          type: integer\n          description: |\n            Version for the user's avatar. Used for cache-busting requests\n            for the user's avatar. Clients generally shouldn't need to use this;\n            most avatar URLs sent by Zulip will already end with `?v={avatar_version}`.\n        profile_data:\n          $ref: \"#/components/schemas/profile_data\"\n    profile_data:\n      type: object\n      description: |\n        Only present if `is_bot` is false; bots can't have custom profile fields.\n\n        A dictionary containing custom profile field data for the user. Each entry\n        maps the integer ID of a custom profile field in the organization to a\n        dictionary containing the user's data for that field. Generally the data\n        includes just a single `value` key; for those custom profile fields\n        supporting Markdown, a `rendered_value` key will also be present.\n      additionalProperties:\n        type: object\n        additionalProperties: false\n        description: |\n          `{id}`: Object with data about what value user filled in the custom\n          profile field with id `id`.\n        properties:\n          value:\n            type: string\n            description: |\n              User's personal value for this custom profile field.\n          rendered_value:\n            type: string\n            description: |\n              The `value` rendered in HTML. Will only be present for\n              custom profile field types that support Markdown rendering.\n\n              This user-generated HTML content should be rendered\n              using the same CSS and client-side security protections\n              as are used for message content.\n    JsonResponseBase:\n      type: object\n      properties:\n        result:\n          type: string\n    SuccessDescription:\n      description: |\n        A typical successful JSON response may look like:\n    JsonSuccess:\n      allOf:\n        - $ref: \"#/components/schemas/JsonSuccessBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n    JsonSuccessBase:\n      allOf:\n        - $ref: \"#/components/schemas/JsonResponseBase\"\n        - required:\n            - result\n            - msg\n          properties:\n            result:\n              enum:\n                - success\n            msg:\n              type: string\n          example: {\"msg\": \"\", \"result\": \"success\"}\n    JsonError:\n      allOf:\n        - $ref: \"#/components/schemas/JsonErrorBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n    JsonErrorBase:\n      allOf:\n        - $ref: \"#/components/schemas/JsonResponseBase\"\n        - required:\n            - result\n            - msg\n          properties:\n            result:\n              enum:\n                - error\n            msg:\n              type: string\n    ApiKeyResponse:\n      allOf:\n        - $ref: \"#/components/schemas/JsonSuccessBase\"\n        - required:\n            - api_key\n            - email\n          additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n            api_key:\n              type: string\n              description: |\n                The API key that can be used to authenticate as the requested user.\n            email:\n              type: string\n              description: |\n                The email address of the user who owns the API key\n          example:\n            {\n              \"api_key\": \"gjA04ZYcqXKalvYMA8OeXSfzUOLrtbZv\",\n              \"email\": \"iago@zulip.com\",\n              \"msg\": \"\",\n              \"result\": \"success\",\n            }\n    CodedError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedErrorBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n            code: {}\n    CodedErrorBase:\n      allOf:\n        - $ref: \"#/components/schemas/JsonErrorBase\"\n        - properties:\n            result: {}\n            msg: {}\n            code:\n              type: string\n              description: |\n                A string that identifies the error.\n    BadEventQueueIdError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedErrorBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n            code: {}\n            queue_id:\n              type: string\n              description: |\n                The string that identifies the invalid event queue.\n          example:\n            {\n              \"code\": \"BAD_EVENT_QUEUE_ID\",\n              \"msg\": \"Bad event queue id: 1518820930:1\",\n              \"queue_id\": \"1518820930:1\",\n              \"result\": \"error\",\n            }\n    InvalidMessageError:\n      allOf:\n        - $ref: \"#/components/schemas/JsonErrorBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n          example:\n            {\n              \"msg\": \"Invalid message(s)\",\n              \"code\": \"BAD_REQUEST\",\n              \"result\": \"error\",\n            }\n    NonExistingStreamError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedErrorBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n            code: {}\n            stream:\n              type: string\n              description: |\n                The name of the stream that could not be found.\n          example:\n            {\n              \"code\": \"STREAM_DOES_NOT_EXIST\",\n              \"msg\": \"Stream 'nonexistent_stream' does not exist\",\n              \"result\": \"error\",\n              \"stream\": \"nonexistent_stream\",\n            }\n    AddSubscriptionsResponse:\n      allOf:\n        - $ref: \"#/components/schemas/JsonSuccessBase\"\n        - additionalProperties: false\n          properties:\n            result: {}\n            msg: {}\n            subscribed:\n              type: object\n              description: |\n                A dictionary where the key is the email address of the user/bot and the\n                value is a list of the names of the streams that were subscribed to as a\n                result of the query.\n              additionalProperties:\n                description: |\n                  `{email_address}`: List of the names of the streams that were subscribed\n                  to as a result of the query.\n                type: array\n                items:\n                  type: string\n            already_subscribed:\n              type: object\n              description: |\n                A dictionary where the key is the email address of the user/bot and the\n                value is a list of the names of the streams that the user/bot is already\n                subscribed to.\n              additionalProperties:\n                description: |\n                  `{email_address}`: List of the names of the streams that the user is\n                  already subscribed to.\n                type: array\n                items:\n                  type: string\n            unauthorized:\n              type: array\n              items:\n                type: string\n              description: |\n                A list of names of streams that the requesting user/bot was not\n                authorized to subscribe to. Only present if `authorization_errors_fatal=false`.\n    InvalidApiKeyError:\n      allOf:\n        - $ref: \"#/components/schemas/JsonError\"\n        - example: {\"msg\": \"Invalid API key\", \"result\": \"error\"}\n          description: |\n            ## Invalid API key\n\n            A typical failed JSON response for when the API key is invalid:\n    MissingArgumentError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedErrorBase\"\n        - additionalProperties: false\n          description: |\n            ## Missing request parameter(s)\n\n            A typical failed JSON response for when a required request parameter\n            is not supplied:\n          properties:\n            result: {}\n            msg: {}\n            code: {}\n            var_name:\n              type: string\n              description: |\n                It contains the information about the missing parameter.\n          example:\n            {\n              \"code\": \"REQUEST_VARIABLE_MISSING\",\n              \"msg\": \"Missing 'content' argument\",\n              \"result\": \"error\",\n              \"var_name\": \"content\",\n            }\n    UserNotAuthorizedError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedError\"\n        - example:\n            {\n              \"code\": \"BAD_REQUEST\",\n              \"msg\": \"User not authorized for this query\",\n              \"result\": \"error\",\n            }\n          description: |\n            ## User not authorized for query\n\n            A typical failed JSON response for when the user is not authorized for\n            a query:\n    UserDeactivatedError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedError\"\n        - example:\n            {\n              \"code\": \"USER_DEACTIVATED\",\n              \"msg\": \"Account is deactivated\",\n              \"result\": \"error\",\n            }\n          description: |\n            ## User account deactivated\n\n            **Changes**: These errors used the HTTP 403 status code\n            before Zulip 5.0 (feature level 76).\n\n            A typical failed json response for when user's account is deactivated:\n    RateLimitedError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedError\"\n        - example:\n            {\n              \"code\": \"RATE_LIMIT_HIT\",\n              \"msg\": \"API usage exceeded rate limit\",\n              \"result\": \"error\",\n              \"retry-after\": 28.706807374954224,\n            }\n          description: |\n            ## Rate limit exceeded\n\n            The `retry-after` parameter in the response indicates how many seconds\n            the client must wait before making additional requests.\n\n            **Changes**: The `code` field was not present in rate\n            limit errors before Zulip 4.0 (feature level 36).\n\n            A typical failed JSON response for when a rate limit is exceeded:\n    RealmDeactivatedError:\n      allOf:\n        - $ref: \"#/components/schemas/CodedError\"\n        - example:\n            {\n              \"code\": \"REALM_DEACTIVATED\",\n              \"msg\": \"This organization is deactivated\",\n              \"result\": \"error\",\n            }\n          description: |\n            ## Realm deactivated\n\n            **Changes**: These errors used the HTTP 403 status code\n            before Zulip 5.0 (feature level 76).\n\n            A typical failed json response for when user's organization is deactivated:\n\n  ###################\n  # Shared responses\n  ###################\n  responses:\n    SimpleSuccess:\n      description: Success.\n      content:\n        application/json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/JsonSuccess\"\n              - $ref: \"#/components/schemas/SuccessDescription\"\n\n  ####################\n  # Shared parameters\n  ####################\n  parameters:\n    Event_types:\n      name: event_types\n      in: query\n      description: |\n        A JSON-encoded array indicating which types of events you're interested\n        in. Values that you might find useful include:\n\n        - **message** (messages)\n        - **subscription** (changes in your subscriptions)\n        - **realm_user** (changes to users in the organization and\n          their properties, such as their name).\n\n        If you do not specify this parameter, you will receive all\n        events, and have to filter out the events not relevant to\n        your client in your client code. For most applications, one\n        is only interested in messages, so one specifies:\n        `event_types=['message']`\n\n        Event types not supported by the server are ignored, in order to simplify\n        the implementation of client apps that support multiple server versions.\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: string\n          example: [\"message\"]\n      required: false\n    Narrow:\n      name: narrow\n      in: query\n      description: |\n        A JSON-encoded array of arrays of length 2 indicating the\n        narrow for which you'd like to receive events for. For\n        instance, to receive events for the stream `Denmark`, you\n        would specify `narrow=[['stream', 'Denmark']]`. Another\n        example is `narrow=[['is', 'private']]` for private messages.\n        Default is `[]`.\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: array\n              items:\n                type: string\n            default: []\n          example: [[\"stream\", \"Denmark\"]]\n      required: false\n    AllPublicStreams:\n      name: all_public_streams\n      in: query\n      description: |\n        Whether you would like to request message events from all public\n        streams. Useful for workflow bots that you'd like to see all new messages\n        sent to public streams. (You can also subscribe the user to private streams).\n      schema:\n        type: boolean\n        default: false\n      example: true\n    UserGroupId:\n      name: user_group_id\n      in: path\n      description: |\n        The ID of the target user group.\n      schema:\n        type: integer\n      example: 22\n      required: true\n    QueueId:\n      name: queue_id\n      in: query\n      description: |\n        The ID of an event queue that was previously registered via\n        `POST /api/v1/register` (see [Register a queue](/api/register-queue)).\n      schema:\n        type: string\n      example: 1375801870:2942\n      required: true\n    StreamIdInPath:\n      name: stream_id\n      in: path\n      description: |\n        The ID of the stream to access.\n      schema:\n        type: integer\n      example: 1\n      required: true\n    ClientGravatar:\n      name: client_gravatar\n      in: query\n      description: |\n        Whether the client supports computing gravatars URLs. If\n        enabled, `avatar_url` will be included in the response only\n        if there is a Zulip avatar, and will be `null` for users who\n        are using gravatar as their avatar. This option\n        significantly reduces the compressed size of user data,\n        since gravatar URLs are long, random strings and thus do not\n        compress well. The `client_gravatar` field is set to `true` if\n        clients can compute their own gravatars.\n\n        **Changes**: The default value of this parameter was `false`\n        prior to Zulip 5.0 (feature level 92).\n      schema:\n        type: boolean\n        default: true\n      example: false\n    RequiredContent:\n      name: content\n      in: query\n      description: |\n        The content of the message. Maximum message size of 10000 bytes.\n      schema:\n        type: string\n      example: Hello\n      required: true\n    OptionalContent:\n      name: content\n      in: query\n      description: |\n        The content of the message. Maximum message size of 10000 bytes.\n      schema:\n        type: string\n      example: Hello\n    MessageId:\n      name: message_id\n      in: path\n      description: |\n        The target message's ID.\n      schema:\n        type: integer\n      example: 43\n      required: true\n    UserId:\n      name: user_id\n      in: path\n      description: |\n        The target user's ID.\n      schema:\n        type: integer\n      example: 12\n      required: true\n    MutedUserId:\n      name: muted_user_id\n      in: path\n      description: |\n        The ID of the user to mute/un-mute.\n      schema:\n        type: integer\n      example: 10\n      required: true\n    StreamPostPolicy:\n      name: stream_post_policy\n      in: query\n      description: |\n        [Policy][permission-level] for which users can post messages to the stream.\n\n        - 1 =\u003e Any user can post.\n        - 2 =\u003e Only administrators can post.\n        - 3 =\u003e Only [full members][calc-full-member] can post.\n        - 4 =\u003e Only moderators can post.\n\n        **Changes**: New in Zulip 3.0, replacing the previous\n        `is_announcement_only` boolean.\n\n        [permission-level]: /api/roles-and-permissions#permission-levels\n        [calc-full-member]: /api/roles-and-permissions#determining-if-a-user-is-a-full-member\n      schema:\n        type: integer\n        default: 1\n      example: 2\n      required: false\n    HistoryPublicToSubscribers:\n      name: history_public_to_subscribers\n      in: query\n      description: |\n        Whether the stream's message history should be available to\n        newly subscribed members, or users can only access messages\n        they actually received while subscribed to the stream.\n\n        Corresponds to the [shared history](/help/stream-permissions)\n        option in documentation.\n      schema:\n        type: boolean\n      example: false\n      required: false\n\n    IncludeSubscribers:\n      name: include_subscribers\n      in: query\n      description: |\n        Whether each returned stream object should include a `subscribers`\n        field containing a list of the user IDs of its subscribers.\n\n        (This may be significantly slower in organizations with\n        thousands of users subscribed to many streams.)\n\n        **Changes**: New in Zulip 2.1.0.\n      schema:\n        type: boolean\n        default: false\n      example: true\n    IncludeCustomProfileFields:\n      name: include_custom_profile_fields\n      in: query\n      description: |\n        Whether the client wants [custom profile field](/help/add-custom-profile-fields)\n        data to be included in the response.\n\n        **Changes**: New in Zulip 2.1.0. Previous versions do no offer these\n        data via the API.\n      schema:\n        type: boolean\n        default: false\n      example: true\n    Principals:\n      name: principals\n      in: query\n      description: |\n        A list of user ids (preferred) or Zulip display email\n        addresses of the users to be subscribed to or unsubscribed\n        from the streams specified in the `subscriptions` parameter. If\n        not provided, then the requesting user/bot is subscribed.\n\n        **Changes**: The integer format is new in Zulip 3.0 (feature level 9).\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: array\n                items:\n                  type: string\n              - type: array\n                items:\n                  type: integer\n          example: [\"ZOE@zulip.com\"]\n    ReactionType:\n      name: reaction_type\n      in: query\n      description: |\n        A string indicating the type of emoji. Each emoji `reaction_type`\n        has an independent namespace for values of `emoji_code`.\n\n        If an API client is adding/removing a vote on an existing reaction,\n        it should pass this parameter using the value the server provided\n        for the existing reaction for specificity. Supported values:\n\n        - `unicode_emoji` : In this namespace, `emoji_code` will be a\n          dash-separated hex encoding of the sequence of Unicode codepoints\n          that define this emoji in the Unicode specification.\n\n        - `realm_emoji` : In this namespace, `emoji_code` will be the ID of\n          the uploaded [custom emoji](/help/custom-emoji).\n\n        - `zulip_extra_emoji` : These are special emoji included with Zulip.\n          In this namespace, `emoji_code` will be the name of the emoji (e.g.\n          \"zulip\").\n\n        **Changes**: In Zulip 3.0 (feature level 2), this become\n        optional for [custom emoji](/help/custom-emoji);\n        previously, this endpoint assumed `unicode_emoji` if this\n        parameter was not specified.\n      schema:\n        type: string\n      example: \"unicode_emoji\"\n      required: false\n    EmojiCode:\n      name: emoji_code\n      in: query\n      description: |\n        A unique identifier, defining the specific emoji codepoint requested,\n        within the namespace of the `reaction_type`.\n\n        For most API clients, you won't need this, but it's important\n        for Zulip apps to handle rare corner cases when\n        adding/removing votes on an emoji reaction added previously by\n        another user.\n\n        If the existing reaction was added when the Zulip server was\n        using a previous version of the emoji data mapping between\n        Unicode codepoints and human-readable names, sending the\n        `emoji_code` in the data for the original reaction allows the\n        Zulip server to correctly interpret your upvote as an upvote\n        rather than a reaction with a \"different\" emoji.\n      schema:\n        type: string\n      example: \"1f419\"\n      required: false\n    MessageRetentionDays:\n      name: message_retention_days\n      in: query\n      description: |\n        Number of days that messages sent to this stream will be stored\n        before being automatically deleted by the [message retention\n        policy](/help/message-retention-policy). Two special string format\n        values are supported:\n\n        - \"realm_default\" =\u003e Return to the organization-level setting.\n        - \"unlimited\" =\u003e Retain messages forever.\n\n        **Changes**: Prior to Zulip 5.0 (feature level 91), retaining\n        messages forever was encoded using `\"forever\"` instead of\n        `\"unlimited\"`.\n\n        New in Zulip 3.0 (feature level 17).\n      schema:\n        oneOf:\n          - type: string\n          - type: integer\n      example: \"20\"\n      required: false\n    LinkifierPattern:\n      name: pattern\n      in: query\n      description: |\n        The [Python regular\n        expression](https://docs.python.org/3/howto/regex.html) that should\n        trigger the linkifier.\n      schema:\n        type: string\n      example: \"#(?P\u003cid\u003e[0-9]+)\"\n      required: true\n    LinkifierURLFormatString:\n      name: url_format_string\n      in: query\n      description: |\n        The URL used for the link. If you used named groups for the `pattern`,\n        you can insert their content here with\n        `%(name_of_the_capturing_group)s`.\n      schema:\n        type: string\n      example: https://github.com/zulip/zulip/issues/%(id)s\n      required: true\n    DirectMemberOnly:\n      name: direct_member_only\n      in: query\n      description: |\n        Whether to consider only the direct members of user group and not members\n        of its subgroups. Default is `False`.\n      schema:\n        type: boolean\n      example: false\n      required: false\n",
			"canonicalURL": "/github.com/zulip/zulip@7c992422f01e2091b50f4d0db997f19619b36cf0/-/blob/zerver/openapi/zulip.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/zulip/zulip/blob/7c992422f01e2091b50f4d0db997f19619b36cf0/zerver/openapi/zulip.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /realm/filters: post: operation \"add-linkifier\": security: unknown security schema \"basicAuth\""
}