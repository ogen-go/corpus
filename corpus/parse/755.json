{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/meilisearch/specifications"
		},
		"file": {
			"name": "open-api.yaml",
			"path": "open-api.yaml",
			"content": "openapi: 3.1.0\ninfo:\n  title: Meilisearch Core API\n  description: 'Search documents, configure and manage the Meilisearch engine.'\n  version: 0.25.0\n  contact:\n    name: Meilisearch\n    email: bonjour@Meilisearch.com\n  license:\n    name: MIT\n    url: 'https://github.com/Meilisearch/Meilisearch/blob/main/LICENSE'\n  summary: 'An open source, blazingly fast and hyper relevant search-engine that will improve your search experience.'\nservers:\n  - url: '{protocol}://{domain}:{port}'\n    variables:\n      protocol:\n        enum:\n          - https\n          - http\n        default: https\n      domain:\n        default: example.meilisearch.com\n      port:\n        default: '7700'\n    description: 'https://example.meilisearch.com:7700'\ncomponents:\n  schemas:\n    timestamp:\n      type: string\n      description: An `ISO-8601` format for date/time/duration.\n      example: '2019-11-20T09:40:33.711324Z'\n    index:\n      type: object\n      additionalProperties: false\n      examples:\n        - uid: movies\n          name: movies\n          primaryKey: movie_id\n          createdAt: '2019-11-20T09:40:33.711324Z'\n          updatedAt: '2019-11-20T09:40:33.711324Z'\n      description: ''\n      title: ''\n      properties:\n        uid:\n          type: string\n          example: movies\n          description: Unique identifier for the index\n        name:\n          type: string\n          description: Name of the index\n        primaryKey:\n          type:\n            - string\n            - 'null'\n          nullable: true\n          example: movie_id\n          description: Custom primaryKey for documents\n        createdAt:\n          $ref: '#/components/schemas/timestamp'\n        updatedAt:\n          $ref: '#/components/schemas/timestamp'\n      required:\n        - uid\n        - name\n        - createdAt\n        - updatedAt\n    document:\n      type: object\n      additionalProperties: true\n      example:\n        id: 25684\n        title: American Ninja 5\n        poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n        overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n        release_date: '1993-01-01'\n      description: 'A document made of attribute. The maximum number of attribute for a document is 65,535.'\n    matchesInfo:\n      type: object\n      properties:\n        start:\n          type: integer\n        length:\n          type: integer\n      additionalProperties: false\n      required:\n        - start\n        - length\n      description: Starting position and length in bytes of the matched term in the returned value\n    hit:\n      type: object\n      additionalProperties: true\n      example:\n        id: 25684\n        title: American Ninja 5\n        poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n        overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n        release_date: '1993-01-01'\n        _formatted:\n          id: 25684\n          title: American Ninja 5\n          poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n          overview: 'When a scientists daughter is kidnapped, American \u003cem\u003eNinja\u003c/em\u003e, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the \u003cem\u003eninja\u003c/em\u003e.'\n          release_date: '1993-01-01'\n        _matchesInfo:\n          overview:\n            - start: 49\n              length: 5\n            - start: 155\n              length: 5\n      examples:\n        - id: 25684\n          title: American Ninja 5\n          poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n          overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n          release_date: '1993-01-01'\n          _formatted:\n            id: 25684\n            title: American Ninja 5\n            poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n            overview: 'When a scientists daughter is kidnapped, American \u003cem\u003eNinja\u003c/em\u003e, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the \u003cem\u003eninja\u003c/em\u003e.'\n            release_date: '1993-01-01'\n          _matchesInfo:\n            overview:\n              - start: 49\n                length: 5\n              - start: 155\n                length: 5\n      description: ''\n      properties:\n        _formatted:\n          type: object\n          description: Only present if `attributesToHighlight`/`attributesToCrop` is not empty. Return highlighted and cropped fields.\n          additionalProperties: true\n        _matchesInfo:\n          type: object\n          description: Only present if matches = `true`. Array of all search query occurrences in all fields.\n          properties:\n            '':\n              $ref: '#/components/schemas/matchesInfo'\n        attribute:\n          type:\n            - string\n            - number\n          description: Retrieve attributes of the document. `attributesToRetrieve` controls these fields.\n        _geoDistance:\n          type: number\n          description: 'Using _geoPoint({lat}, {lng}) built-in sort rule at search leads the engine to return a _geoDistance within the search results. This field represents the distance in meters of the document from the specified _geoPoint.'\n    documentId:\n      oneOf:\n        - type: number\n        - type: string\n      example: 468219\n    filter:\n      description: |\n        Attribute(s) to filter on.\n\n        Can be made of 3 syntaxes\n\n        - Nested Array: `[\"something \u003e 1\", \"genres=comedy\", [\"genres=horror\", \"title=batman\"]]`\n        - String: `\"something \u003e 1 AND genres=comedy AND (genres=horror OR title=batman)\"`\n        - Mixed: `[\"something \u003e 1 AND genres=comedy\", \"genres=horror OR title=batman\"]`\n\n        \u003e info\n        \u003e _geoRadius({lat}, {lng}, {distance_in_meters}) built-in filter rule can be used to filter documents within a geo circle.\n\n        \u003e warn\n        \u003e Attribute(s) used in `filter` should be declared as filterable attributes. See [Filtering and Faceted Search](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html).\n      example:\n        - 'director:Mati Diop'\n        - - 'genres:Comedy'\n          - 'genres:Romance'\n      title: filter\n      oneOf:\n        - type: array\n          items:\n            type: string\n            pattern: '^[^:]+:[^:]+$'\n        - type: string\n          properties: {}\n          pattern: '^[^:]+:[^:]+$'\n        - type: array\n          items:\n            anyOf:\n              - type: array\n                items: {}\n              - type: string\n    sort:\n      description: |\n        Fields on which you want to sort the results.\n\n        \u003e warn\n        \u003e Attribute(s) used in `sort` should be declared as sortable attributes. See [Sorting](https://docs.meilisearch.com/reference/features/sorting.html).\n\n        \u003e info\n        \u003e _geoPoint({lat}, {long}) built-in sort rule can be used to sort documents around a geo point.\n      example:\n        - 'price:desc'\n      title: sort\n      oneOf:\n        - type: array\n          items:\n            type: string\n    searchResponse:\n      type: object\n      additionalProperties: false\n      title: ''\n      properties:\n        hits:\n          type: array\n          description: Array of documents matching the search.\n          items:\n            $ref: '#/components/schemas/hit'\n        offset:\n          type: integer\n          description: Number of documents skipped.\n        limit:\n          type: integer\n          description: Number of returned documents.\n        nbHits:\n          type: integer\n          description: Total number of candidates for this search in the database.\n        exhaustiveNbHits:\n          type: boolean\n          description: Whether `nbHits` is exhaustive.\n        facetsDistribution:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: integer\n          description: |\n            [Distribution of the given facets](https://docs.meilisearch.com/reference/features/search_parameters.html#facets-distribution).\n          example:\n            genres:\n              action: 273\n              animation: 118\n              adventure: 132\n              fantasy: 67\n              comedy: 475\n              mystery: 70\n              thriller: 217\n        exhaustiveFacetsCount:\n          type: boolean\n          description: Whether `facetsDistribution` is exhaustive.\n        processingTimeMs:\n          type: integer\n          description: Processing time of the query.\n        query:\n          type: string\n          description: Query originating the response.\n          example: ninja\n      required:\n        - hits\n        - offset\n        - limit\n        - nbHits\n        - exhaustiveNbHits\n        - processingTimeMs\n        - query\n    task:\n      type: object\n      description: |\n        Meilisearch is an asynchronous API. It means that the API does not behave as you would typically expect when handling the request's responses.\n\n        Some operations are put in a queue and will be executed in turn (asynchronously). In this case, the server response contains the identifier to track the execution of the operation.\n\n        [Learn More](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html).\n      additionalProperties: false\n      examples:\n        - uid: 0\n          indexUid: movies\n          status: succeeded\n          type: documentAddition\n          details:\n            receivedDocuments: 10\n            indexedDocuments: 10\n          duration: PT5S\n          enqueuedAt: '2021-01-01T09:39:00.000000Z'\n          startedAt: '2021-01-01T09:40:00.000000Z'\n          finishedAt: '2021-01-01T09:40:05.000000Z'\n      properties:\n        uid:\n          type: integer\n          description: The unique sequential identifier of the task\n        indexUid:\n          type: string\n          description: The unique identifier of the index where this task is operated\n        status:\n          type: string\n          description: The status of the task\n          enum:\n            - enqueued\n            - processing\n            - succeeded\n            - failed\n          example: succeeded\n        type:\n          type: string\n          description: The type of the task\n          enum:\n            - documentAddition\n            - documentPartial\n            - documentDeletion\n            - indexCreation\n            - indexUpdate\n            - indexDeletion\n            - settingsUpdate\n            - clearAll\n        details:\n          type: object\n          description: Details information of the task payload.\n          properties:\n            receivedDocuments:\n              type: integer\n              description: Number of documents received for documentAddition or documentPartial task.\n            indexedDocuments:\n              type: integer\n              description: Number of documents finally indexed for documentAddition or documentPartial task.\n            receivedDocumentsIds:\n              type: integer\n              description: Number of document ids received for documentDeletion task.\n            deletedDocuments:\n              type: integer\n              description: 'Number of documents finally deleted for documentDeletion, indexDeletion or clearAll task.'\n            primaryKey:\n              type: string\n              description: Value for the primaryKey field encountered if any for indexCreation or indexUpdate task.\n            settings:\n              $ref: '#/components/schemas/settings'\n        error:\n          description: Error object containing error details and context when a task has a failed status.\n          $ref: '#/components/schemas/error'\n        duration:\n          type: string\n          description: Total elasped time the engine was in processing state expressed as a `ISO-8601` duration format. Default is set to `null`\n          nullable: true\n        enqueuedAt:\n          description: Represent the date and time as a `ISO-8601` format when the task has been enqueued\n          $ref: '#/components/schemas/timestamp'\n        startedAt:\n          $ref: '#/components/schemas/timestamp'\n          description: Represent the date and time as a `ISO-8601` format when the task has been dequeued and started to be processed. Default is set to `null`\n          nullable: true\n        finishedAt:\n          $ref: '#/components/schemas/timestamp'\n          description: Represent the date and time as a `ISO-8601` format when the task has failed or succeeded. Default is set to `null`\n          nullable: true\n      required:\n        - uid\n        - indexUid\n        - status\n        - type\n        - enqueuedAt\n        - startedAt\n        - finishedAt\n    synonyms:\n      type: object\n      description: List of associated words treated similarly. A word associated to an array of word as synonyms.\n      example:\n        wolverine:\n          - xmen\n          - logan\n        logan:\n          - wolverine\n          - xmen\n        wow:\n          - world of warcraft\n    stopWords:\n      type: array\n      description: List of words ignored when present in search queries.\n      items:\n        type: string\n      example:\n        - of\n        - the\n        - to\n    sortableAttributes:\n      type: array\n      description: List of attributes to sort on at search.\n      items:\n        type: string\n      example:\n        - price\n        - author\n        - title\n    rankingRules:\n      type: array\n      description: |\n        List of ranking rules sorted by order of importance. The order is customizable.\n\n        [A list of ordered built-in ranking rules](https://docs.meilisearch.com/learn/core_concepts/relevancy.html).\n      items:\n        type: string\n      example:\n        - words\n        - typo\n        - proximity\n        - attribute\n        - sort\n        - exactness\n        - 'release_date:asc'\n      examples: []\n    filterableAttributes:\n      type: array\n      description: |\n        Attributes to use for facetting and filtering. See [Filtering and Faceted Search](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html).\n      items:\n        type: string\n      example:\n        - genres\n        - director\n      title: filterableAttributes\n    distinctAttribute:\n      type: string\n      description: Search returns documents with distinct (different) values of the given field.\n      nullable: true\n    searchableAttributes:\n      type: array\n      description: Fields in which to search for matching query words sorted by order of importance.\n      items:\n        type: string\n      example:\n        - title\n        - description\n        - genre\n    displayedAttributes:\n      type: array\n      description: Fields displayed in the returned documents.\n      items:\n        type: string\n      example:\n        - title\n        - description\n        - genre\n        - release_date\n    settings:\n      type: object\n      description: |\n        [Learn more about the settings in this guide](https://docs.meilisearch.com/reference/features/settings.html).\n      additionalProperties: false\n      properties:\n        synonyms:\n          $ref: '#/components/schemas/synonyms'\n        stopWords:\n          $ref: '#/components/schemas/stopWords'\n        rankingRules:\n          $ref: '#/components/schemas/rankingRules'\n        filterableAttributes:\n          $ref: '#/components/schemas/filterableAttributes'\n        distinctAttribute:\n          $ref: '#/components/schemas/distinctAttribute'\n        searchableAttributes:\n          $ref: '#/components/schemas/searchableAttributes'\n        displayedAttributes:\n          $ref: '#/components/schemas/displayedAttributes'\n      required:\n        - synonyms\n        - stopWords\n        - rankingRules\n        - filterableAttributes\n        - distinctAttribute\n        - searchableAttributes\n        - displayedAttributes\n    stats:\n      type: object\n      additionalProperties: false\n      title: ''\n      examples:\n        - numberOfDocuments: 10\n          isIndexing: true\n          fieldDistribution:\n            genre: 10\n            author: 9\n      properties:\n        numberOfDocuments:\n          type: integer\n          description: Number of documents contained in the index.\n        isIndexing:\n          type: boolean\n          description: Whether or not the index is currently ingesting document\n        fieldDistribution:\n          type: object\n          additionalProperties:\n            type: integer\n          description: How many documents contains a field\n      required:\n        - numberOfDocuments\n        - isIndexing\n        - fieldDistribution\n    dumps:\n      type: object\n      additionalProperties: false\n      examples:\n        - uid: 20210719-114144097\n          status: done\n          startedAt: '2021-07-19T14:31:16.920473Z'\n          finishedAt: '2021-07-19T14:32:16.920473Z'\n      title: dumps\n      description: ''\n      properties:\n        uid:\n          type: string\n          example: 20200929-114144097\n          description: ' Unique identifier for the dump'\n        status:\n          type: string\n          enum:\n            - in_progress\n            - failed\n            - done\n          example: in_progress\n          description: Status of the dump\n        startedAt:\n          $ref: '#/components/schemas/timestamp'\n        finishedAt:\n          $ref: '#/components/schemas/timestamp'\n      required:\n        - uid\n        - status\n        - startedAt\n    error:\n      title: error\n      type: object\n      properties:\n        message:\n          type: string\n        code:\n          type: string\n        type:\n          type: string\n        link:\n          type: string\n      required:\n        - message\n        - code\n        - type\n        - link\n      description: ''\n    key:\n      title: key\n      type: object\n      properties:\n        key:\n          type: string\n          description: The generated key. Generated by Meilisearch.\n          example: d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\n          readOnly: true\n        actions:\n          type: array\n          description: 'A list of actions permitted for the key. [\"*\"] for all actions.'\n          uniqueItems: false\n          items:\n            type: string\n            example: documents.add\n            enum:\n              - search\n              - documents.add\n              - documents.get\n              - documents.delete\n              - indexes.create\n              - indexes.get\n              - indexes.update\n              - indexes.delete\n              - tasks.get\n              - settings.get\n              - settings.update\n              - stats.get\n              - dumps.create\n              - dumps.get\n              - version\n        indexes:\n          type: array\n          description: 'A list of accesible indexes permitted for the key. [\"*\"] for all indexes.'\n          items:\n            type: string\n            example: movies\n        description:\n          type:\n            - string\n            - 'null'\n          description: A description for the key. null if empty.\n          default: null\n        expiresAt:\n          type:\n            - string\n            - 'null'\n          description: Represent the expiration date and time as ISO-8601 format. null equals to no expiration time.\n        createdAt:\n          type: string\n          description: Represent the date and time as ISO-8601 format when the API key has been created. Generated by Meilisearch.\n          example: '2021-11-12T10:00:00Z'\n          readOnly: true\n        updatedAt:\n          type:\n            - string\n            - 'null'\n          description: Represent the date and time as ISO-8601 format when the API key has been updated. Generated by Meilisearch.\n          default: null\n          readOnly: true\n      required:\n        - actions\n        - indexes\n        - expiresAt\n      description: API keys are stored and managed by the master key holder. These are the keys used by the technical teams to interact with Meilisearch at the level of the client/server code. API keys can have restrictions on which methods can be accessed via an actions list; they can also expiresAt a specific date time and be restricted to a specific set of indexes.\n  parameters:\n    indexUid:\n      name: indexUid\n      in: path\n      description: Index Unique Identifier\n      required: true\n      schema:\n        type: string\n        example: movies\n    documentId:\n      name: documentId\n      in: path\n      description: The document identifier\n      required: true\n      schema:\n        type: any\n    taskUid:\n      name: taskUid\n      in: path\n      description: The task unique identifier\n      required: true\n      schema:\n        type: number\n    primaryKey:\n      name: primaryKey\n      in: query\n      description: |\n        The [primary key](https://docs.meilisearch.com/learn/core_concepts/documents.html#primary-key) of the documents. primaryKey is optional.\n        If you want to set the primary key of your index through this route, it only has to be done the first time you add documents to the index. After which it will be ignored if given.\n      schema:\n        type: string\n    limit:\n      name: limit\n      in: query\n      description: Maximum number of documents to return.\n      schema:\n        type: number\n        default: 20\n    offset:\n      name: offset\n      in: query\n      description: Number of documents to skip.\n      schema:\n        type: number\n        default: 0\n    q:\n      name: q\n      in: query\n      description: Query string.\n      schema:\n        type: string\n        example: back to the future\n        default: '\"\"'\n    attributesToRetrieve:\n      name: attributesToRetrieve\n      in: query\n      description: 'Comma-separated list of attributes whose fields will be present in the returned documents. Defaults to the [displayedAttributes list](https://docs.meilisearch.com/reference/features/settings.html#displayed-attributes) which contains by default all attributes found in the documents.'\n      schema:\n        type: string\n        items:\n          type: string\n        example: 'title,description'\n        default: '*'\n    attributesToHighlight:\n      name: attributesToHighlight\n      in: query\n      description: Comma-separated list of attributes whose values will contain highlighted matching terms. Highlighted attributes are returned in `_formatted` response object.\n      schema:\n        type: string\n        items:\n          type: string\n          default:\n            - ''\n        example: 'title,description'\n    attributesToCrop:\n      name: attributesToCrop\n      in: query\n      required: false\n      schema:\n        type: string\n        example: 'overview:10'\n      description: Comma-separated list of attributes whose values have to be cropped. Cropped attributes are returned in `_formatted` response object.\n    cropLength:\n      name: cropLength\n      in: query\n      required: false\n      schema:\n        type: integer\n        example: 5\n        default: 200\n      description: Length used to crop field values.\n    facetsDistribution:\n      name: facetsDistribution\n      in: query\n      schema:\n        type: string\n        example: 'genres,author'\n      description: 'Comma-separated list of attributes whose fields will be distributed as a facet. If you have [set up filterableAttributes](https://docs.meilisearch.com/reference/features/settings.html#filterable-attributes), you can retrieve the count of matching terms for each facets.[Learn more about facet distribution in the dedicated guide](https://docs.meilisearch.com/reference/features/search_parameters.html#facets-distribution)'\n    matches:\n      name: matches\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: 'false'\n      description: Defines whether an `_matchesInfo` object that contains information about the matches should be returned or not.\n    sort:\n      name: sort\n      in: query\n      required: false\n      schema:\n        type: string\n        example: 'price:asc'\n      description: |\n        Fields on which you want to sort the results.\n\n        \u003e warn\n        \u003e Attribute(s) used in `sort` should be declared as sortable attributes. See [Sorting](https://docs.meilisearch.com/reference/features/sorting.html).\n\n        \u003e info\n        \u003e _geoPoint({lat}, {long}) built-in sort rule can be used to sort documents around a geo point.\n    filter:\n      name: filter\n      in: query\n      required: false\n      schema:\n        example: something \u003e 1 AND genres=comedy AND (genres=horror OR title=batman)\n      description: |\n        Attribute(s) to filter on.\n\n        Can be made of 3 syntaxes\n\n        - Nested Array: `[\"something \u003e 1\", \"genres=comedy\", [\"genres=horror\", \"title=batman\"]]`\n        - String: `something \u003e 1 AND genres=comedy AND (genres=horror OR title=batman)`\n        - Mixed: `[\"something \u003e 1 AND genres=comedy\", \"genres=horror OR title=batman\"]`\n\n        \u003e info\n        \u003e _geoRadius({lat}, {lng}, {distance_in_meters}) built-in filter rule can be used to filter documents within a geo circle.\n\n        \u003e warn\n        \u003e Attribute(s) used in `filter` should be declared as filterable attributes. See [Filtering and Faceted Search](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html).\n    Content-Type:\n      name: Content-Type\n      in: header\n      required: true\n      schema:\n        type: string\n        enum:\n          - application/json\n      description: Payload content-type\n  responses:\n    '202':\n      description: Accepted\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              uid:\n                type: number\n                description: 'This `uid` allows you to [track the current task](https://docs.meilisearch.com/reference/api/tasks.html).'\n              indexUid:\n                type: string\n                description: The unique identifier of the index where this task is operated\n              status:\n                type: string\n                description: The status of the task\n                example: enqueued\n              enqueuedAt:\n                $ref: '#/components/schemas/timestamp'\n                description: Represent the date and time as `ISO-8601` format when the task has been enqueued\n            additionalProperties: false\n            required:\n              - uid\n              - indexUid\n              - status\n              - enqueuedAt\n          examples:\n            Example:\n              value:\n                uid: 0\n                indexUid: movies\n                status: enqueued\n                enqueuedAt: '2021-07-19T14:31:16.920473Z'\n    '204':\n      description: No Content\n    '401':\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          examples:\n            Unauthorized:\n              value:\n                message: The Authorization header is missing. It must use the bearer authorization method.\n                code: missing_authorization_header\n                type: auth\n                link: 'https://docs.meilisearch.com/errors#missing_authorization_header'\n    '413':\n      description: Payload Too Large\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          examples:\n            Payload Too Large:\n              value:\n                message: The provided payload reached the size limit.\n                code: payload_too_large\n                type: invalid_request\n                link: 'https://docs.meilisearch.com/errors#payload_too_large'\n  securitySchemes:\n    apiKey:\n      type: http\n      in: header\n      scheme: bearer\n      description: |-\n        An API key is a token that you provide when making API calls. Include the token in a header parameter called `Authorization`.\n\n        Example: `Authorization: Bearer 8fece4405662dd830e4cb265e7e047aab2e79672a760a12712d2a263c9003509`\n  examples: {}\ntags:\n  - name: Indexes\n    description: |\n      An index is an entity that gathers a set of [documents](https://docs.meilisearch.com/learn/core_concepts/documents.html) with its own settings.\n      [Learn more about indexes](https://docs.meilisearch.com/learn/core_concepts/indexes.html).\n  - name: Documents\n    description: |\n      Documents are objects composed of fields that can store any type of data.\n      Each field contains an attribute and its associated value.\n      Documents are stored inside [indexes](https://docs.meilisearch.com/learn/core_concepts/indexes.html).\n      [Learn more about documents](https://docs.meilisearch.com/learn/core_concepts/documents.html).\n  - name: Search\n    description: |\n      Meilisearch exposes 2 routes to perform searches:\n      * A POST route: this is the preferred route when using API authentication, as it allows [preflight request](https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request) caching and better performances.\n      * A GET route: the usage of this route is discouraged, unless you have good reason to do otherwise (specific caching abilities for example).\n      Other than the differences mentioned above, the two routes are strictly equivalent.\n  - name: Tasks\n    description: |\n      The `tasks` route gives information about the progress of the [asynchronous operations](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html).\n  - name: Keys\n    description: |\n      Manage API `keys` for a Meilisearch instance. Each key has a given set of permissions.\n      You must have the master key to access the `keys` route.\n      [More information about the keys and their rights](https://docs.meilisearch.com/reference/features/security.html).\n  - name: Settings\n    description: |\n      `Settings` is a list of all the __customization__ possible for an index.\n      It is possible to update all the settings in one go or individually with the dedicated routes. Updates in the settings route are __partial__. This means that any parameters not provided in the body will be left unchanged.\n      Updating the settings means overwriting the default settings of Meilisearch. You can reset to default values using the `DELETE` routes.\n  - name: Stats\n    description: |\n      `Stats` gives extended information and metrics about indexes and the Meilisearch database.\n  - name: Health\n    description: |\n      The health check endpoint enables you to periodically test the health of your Meilisearch instance.\n  - name: Version\n    description: |\n      Current version of Meilisearch.\n  - name: Dumps\n    description: |\n      The `dumps` route allows the creation of database dumps. Dumps are `.dump` files that can be used to launch Meilisearch. Dumps are compatible between Meilisearch versions.\n      Creating a dump is also referred to as exporting it, whereas launching Meilisearch with a dump is referred to as importing it.\n      During a [dump export](https://docs.meilisearch.com/reference/api/dump.html#create-a-dump), all indexes of the current instance are exported—together with their documents and settings—and saved as a single `.dump` file.\n      During a dump import, all indexes contained in the indicated `.dump` file are imported along with their associated documents and settings. Any existing index with the same uid as an index in the dump file will be overwritten.\n      Dump imports are [performed at launch](https://docs.meilisearch.com/reference/features/configuration.html#import-dump) using an option.\npaths:\n  /dumps:\n    post:\n      operationId: dumps.create\n      summary: Create a Dump\n      description: |\n        Triggers a dump creation process. Once the process is complete, a dump is created in the [dumps directory](https://docs.meilisearch.com/reference/features/configuration.html#dumps-destination). If the dumps directory does not exist yet, it will be created.\n      tags:\n        - Dumps\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          description: Accepted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dumps'\n              examples:\n                Created:\n                  value:\n                    uid: 20210719-114144097\n                    status: in_progress\n                    startedAt: '2021-07-19T14:31:16.920473Z'\n        '401':\n          $ref: '#/components/responses/401'\n  '/dumps/{dumpUid}/status':\n    get:\n      operationId: dumps.get\n      summary: Get dump status\n      description: |\n        Get the status of a dump creation process using the uid returned after calling the [dump creation route](https://docs.meilisearch.com/reference/api/dump.html#create-a-dump).\n\n        The returned status could be:\n\n        * `in_progress`: Dump creation is in progress.\n        * `failed`: An error occured during dump process, and the task was aborted.\n        * `done`: Dump creation is finished and was successful.\n      tags:\n        - Dumps\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/dumps'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n              examples:\n                Not Found:\n                  value:\n                    message: Dump `20201001-110357260` not found\n                    code: dump_not_found\n                    type: invalid_request\n                    link: 'https://docs.meilisearch.com/errors#dump_not_found'\n    parameters:\n      - schema:\n          type: string\n        name: dumpUid\n        in: path\n        required: true\n  /health:\n    get:\n      operationId: health.check\n      summary: Get health\n      description: Get health of the Meilisearch instance.\n      tags:\n        - Health\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    enum:\n                      - available\n                required:\n                  - status\n              examples:\n                '200':\n                  value:\n                    status: available\n      x-internal: false\n  /indexes:\n    get:\n      operationId: indexes.list\n      summary: List Indexes\n      description: List all indexes.\n      tags:\n        - Indexes\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/index'\n              examples:\n                Example:\n                  value:\n                    - uid: movies\n                      name: movies\n                      primaryKey: movie_id\n                      createdAt: '2019-11-20T09:40:33.711324Z'\n                      updatedAt: '2019-11-20T09:40:33.711324Z'\n        '401':\n          $ref: '#/components/responses/401'\n    post:\n      operationId: indexes.create\n      summary: Create Index\n      description: Create an index.\n      tags:\n        - Indexes\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                uid:\n                  type: string\n                primaryKey:\n                  type: string\n              additionalProperties: false\n              required:\n                - uid\n            examples:\n              Example:\n                value:\n                  uid: movies\n                  primaryKey: movie_id\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/index'\n              examples: {}\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n              examples:\n                Index already exists:\n                  value:\n                    message: 'Index `:indexUid` already exists.'\n                    code: index_already_exists\n                    type: invalid_request\n                    link: 'https://docs.meilisearch.com/errors#index_already_exists'\n                Invalid Index Uid:\n                  value:\n                    message: '`:indexUid` is not a valid index uid. Index uid can be an integer or a string containing only alphanumeric characters, hyphens (-) and underscores (_).'\n                    code: invalid_index_uid\n                    type: invalid_request\n                    link: 'https://docs.meilisearch.com/errors#invalid_index_uid'\n        '401':\n          $ref: '#/components/responses/401'\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n  '/indexes/{indexUid}':\n    get:\n      operationId: indexes.get\n      summary: Get Index\n      description: Get information about an index.\n      tags:\n        - Indexes\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/index'\n              examples:\n                Example:\n                  value:\n                    uid: movies\n                    name: movies\n                    primaryKey: movie_id\n                    createdAt: '2019-11-20T09:40:33.711324Z'\n                    updatedAt: '2019-11-20T09:40:33.711324Z'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    put:\n      operationId: indexes.update\n      summary: Update Index\n      description: Update an index. Add a primaryKey if it doesn't already exists yet.\n      tags:\n        - Indexes\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                primaryKey:\n                  type: string\n              additionalProperties: false\n              required:\n                - primaryKey\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/index'\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n              examples:\n                Primary Key Already Present:\n                  value:\n                    message: 'Index `:indexUid` already has a primary key.'\n                    code: index_primary_key_already_exists\n                    type: invalid_request\n                    link: 'https://docs.meilisearch.com/errors#index_primary_key_already_exists'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.remove\n      summary: Delete Index\n      description: Delete an index.\n      tags:\n        - Indexes\n      security:\n        - apiKey: []\n      responses:\n        '204':\n          $ref: '#/components/responses/204'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/documents':\n    get:\n      operationId: indexes.documents.list\n      summary: Get Documents\n      description: |\n        Get [documents](https://docs.meilisearch.com/learn/core_concepts/documents.html) by batch.\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/document'\n              examples:\n                Example:\n                  value:\n                    - id: 25684\n                      title: American Ninja 5\n                      poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n                      overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n                      release_date: '1993-01-01'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/attributesToRetrieve'\n    post:\n      operationId: indexes.documents.create\n      summary: Add or replace documents\n      description: |\n        Add a list of [documents](https://docs.meilisearch.com/learn/core_concepts/documents.html) or replace them if they already exist.\n\n        If you send an already existing document (same [id](https://docs.meilisearch.com/learn/core_concepts/documents.html#primary-key)) the whole existing document will be overwritten by the new document. Fields previously in the document not present in the new document are removed.\n\n        For a partial update of the document see Add or update documents route.\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n\n        \u003e info\n        \u003e Use the reserved `_geo` object to add geo coordinates to a document. `_geo` is an object made of `lat` and `lng` field.\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items: null\n            examples: {}\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '413':\n          $ref: '#/components/responses/413'\n      parameters:\n        - schema:\n            type: string\n            enum:\n              - application/json\n              - text/csv\n              - application/x-ndjson\n          in: header\n          name: Content-Type\n          required: true\n          description: The content-type associated with the format to be indexed\n    put:\n      operationId: indexes.documents.upsert\n      summary: Add or update documents\n      description: |-\n        Add a list of documents or update them if they already exist.\n\n        If you send an already existing document (same [id](https://docs.meilisearch.com/learn/core_concepts/documents.html#primary-key)) the old document will be only partially updated according to the fields of the new document. Thus, any fields not present in the new document are kept and remained unchanged.\n\n        To completely overwrite a document, see Add or replace documents route.\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n\n        \u003e info\n        \u003e Use the reserved `_geo` object to add geo coordinates to a document. `_geo` is an object made of `lat` and `lng` field.\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/document'\n            examples:\n              Example:\n                value:\n                  - id: 25684\n                    title: American Ninja 5\n                    poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n                    overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n                    release_date: '1993-01-01'\n        description: ''\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '413':\n          $ref: '#/components/responses/413'\n      parameters:\n        - schema:\n            type: string\n            enum:\n              - application/json\n              - text/csv\n              - application/x-ndjson\n          in: header\n          name: Content-Type\n          description: The content-type associated with the format to be indexed\n          required: true\n    delete:\n      operationId: indexes.documents.removeAll\n      summary: Delete all documents\n      description: Delete all documents in the specified index.\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/documents/delete-batch':\n    post:\n      operationId: indexes.documents.removeBatch\n      summary: Delete documents\n      description: Delete a selection of documents based on array of document id's.\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              description: An array of document ids to delete\n              items:\n                type:\n                  - string\n                  - number\n            examples:\n              Example:\n                value:\n                  - 1\n                  - 2\n                  - 3\n                  - a string id\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/documents/{documentId}':\n    get:\n      operationId: indexes.documents.get\n      summary: Get one document\n      description: 'Get one [document](https://docs.meilisearch.com/learn/core_concepts/documents.html) using its unique id.'\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/document'\n              examples: {}\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    delete:\n      operationId: indexes.documents.remove\n      summary: Delete one document\n      description: Delete one document based on its unique id.\n      tags:\n        - Documents\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n      - $ref: '#/components/parameters/documentId'\n  '/indexes/{indexUid}/search':\n    get:\n      operationId: indexes.documents.searchGet\n      summary: Search\n      description: |\n        Search for documents matching a specific query in the given index.\n\n        This route should only be used when no API key is required. If an API key is required, use the POST route instead.\n      tags:\n        - Search\n      security:\n        - apiKey: []\n      parameters:\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/attributesToRetrieve'\n        - $ref: '#/components/parameters/attributesToHighlight'\n        - $ref: '#/components/parameters/attributesToCrop'\n        - $ref: '#/components/parameters/cropLength'\n        - $ref: '#/components/parameters/facetsDistribution'\n        - $ref: '#/components/parameters/filter'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/matches'\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/searchResponse'\n              examples:\n                Example:\n                  value:\n                    hits:\n                      - id: 25684\n                        title: American Ninja 5\n                        poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n                        overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n                        release_date: '1993-01-01'\n                        _formatted:\n                          id: 25684\n                          title: American Ninja 5\n                          poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n                          overview: 'When a scientists daughter is kidnapped, American \u003cem\u003eNinja\u003c/em\u003e, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the \u003cem\u003eninja\u003c/em\u003e.'\n                          release_date: '1993-01-01'\n                        _matchesInfo:\n                          overview:\n                            - start: 49\n                              length: 5\n                            - start: 155\n                              length: 5\n                    limit: 0\n                    offset: 0\n                    nbHits: 0\n                    query: string\n                    exhaustiveNbHits: true\n                    processingTimeMs: 0\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.documents.search\n      summary: Search\n      description: |\n        Search for documents matching a specific query in the given index.\n\n        This is the preferred route to perform search when an API key is required, as it allows for [preflight requests](https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request) to be cached. Caching preflight requests improves considerably the speed of the search.\n      tags:\n        - Search\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                q:\n                  type: string\n                  description: Query string.\n                  default: '\"\"'\n                  example: '\"Back to the future\"'\n                attributesToRetrieve:\n                  type: array\n                  description: 'Array of attributes whose fields will be present in the returned documents. Defaults to the [displayedAttributes list](https://docs.meilisearch.com/reference/features/settings.html#displayed-attributes) which contains by default all attributes found in the documents.'\n                  items:\n                    type: string\n                    example: '[\"title\", \"overview\"]'\n                    default: '[\"*\"]'\n                attributesToHighlight:\n                  type: array\n                  description: Array of attributes whose values will contain highlighted matching terms. Highlighted attributes are returned in `_formatted` response object.\n                  items:\n                    type: string\n                    example: '[\"title\", \"overview\"]'\n                    default: '[]'\n                attributesToCrop:\n                  type: array\n                  description: Array of attributes whose values have to be cropped. Cropped attributes are returned in `_formatted` response object.\n                  items:\n                    type: string\n                    example: '[\"overview\", \"author\"]'\n                    default: '[]'\n                cropLength:\n                  type: number\n                  description: Length used to crop field values.\n                  default: 200\n                matches:\n                  type: boolean\n                  description: Defines whether an `_matchesInfo` object that contains information about the matches should be returned or not.\n                  default: false\n                filter:\n                  $ref: '#/components/schemas/filter'\n                facetsDistribution:\n                  type: array\n                  description: 'Array of attributes whose fields will be distributed as a facet. If you have [set up filterableAttributes](https://docs.meilisearch.com/reference/features/settings.html#filterable-attributes), you can retrieve the count of matching terms for each [facets](https://docs.meilisearch.com/reference/features/filtering_and_faceted_search.html#faceted-search).[Learn more about facet distribution in the dedicated guide](https://docs.meilisearch.com/reference/features/search_parameters.html#facets-distribution)'\n                  items:\n                    type: string\n                    example: '[\"genres\", \"author\"]'\n                    default: '[]'\n                offset:\n                  type: number\n                  description: Number of documents to skip.\n                  default: 0\n                limit:\n                  type: number\n                  description: Maximum number of documents returned.\n                  default: 20\n                sort:\n                  $ref: '#/components/schemas/sort'\n            examples:\n              Example:\n                value:\n                  q: Harry\n                  offset: 0\n                  limit: 20\n                  filter: (genres = Horror AND genres = Mystery) OR release_date \u003e 523242000\n                  facetsDistribution:\n                    - genres\n                    - author\n                  attributesToRetrieve:\n                    - title\n                    - overview\n                  attributesToCrop:\n                    - overview\n                  cropLength: 20\n                  attributesToHighlight:\n                    - overview\n                  matches: true\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/searchResponse'\n              examples:\n                Example:\n                  value:\n                    hits:\n                      - id: 25684\n                        title: American Ninja 5\n                        poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n                        overview: 'When a scientists daughter is kidnapped, American Ninja, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the ninja.'\n                        release_date: '1993-01-01'\n                        _formatted:\n                          id: 25684\n                          title: American Ninja 5\n                          poster: 'https://image.tmdb.org/t/p/w1280/iuAQVI4mvjI83wnirpD8GVNRVuY.jpg'\n                          overview: 'When a scientists daughter is kidnapped, American \u003cem\u003eNinja\u003c/em\u003e, attempts to find her, but this time he teams up with a youngster he has trained in the ways of the \u003cem\u003eninja\u003c/em\u003e.'\n                          release_date: '1993-01-01'\n                        _matchesInfo:\n                          overview:\n                            - start: 49\n                              length: 5\n                            - start: 155\n                              length: 5\n                    limit: 0\n                    offset: 0\n                    nbHits: 0\n                    query: string\n                    exhaustiveNbHits: true\n                    processingTimeMs: 0\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings':\n    get:\n      operationId: indexes.settings.get\n      summary: Get settings\n      description: |\n        Get the settings of an index.\n\n        [Learn more about the settings](https://docs.meilisearch.com/reference/features/settings.html).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  rankingRules:\n                    $ref: '#/components/schemas/rankingRules'\n                  distinctAttribute:\n                    $ref: '#/components/schemas/distinctAttribute'\n                  searchableAttributes:\n                    $ref: '#/components/schemas/searchableAttributes'\n                  displayedAttributes:\n                    $ref: '#/components/schemas/displayedAttributes'\n                  stopWords:\n                    $ref: '#/components/schemas/stopWords'\n                  synonyms:\n                    $ref: '#/components/schemas/synonyms'\n                  filterableAttributes:\n                    $ref: '#/components/schemas/filterableAttributes'\n                  sortableAttributes:\n                    $ref: '#/components/schemas/sortableAttributes'\n                required:\n                  - rankingRules\n                  - distinctAttribute\n                  - searchableAttributes\n                  - displayedAttributes\n                  - stopWords\n                  - synonyms\n                  - filterableAttributes\n                  - sortableAttributes\n              examples:\n                Example:\n                  value:\n                    rankingRules:\n                      - words\n                      - typo\n                      - proximity\n                      - attribute\n                      - sort\n                      - exactness\n                      - 'release_date:asc'\n                    distinctAttribute: ean13\n                    searchableAttributes:\n                      - title\n                      - description\n                      - genre\n                    displayedAttributes:\n                      - title\n                      - description\n                      - genre\n                      - release_date\n                    stopWords:\n                      - of\n                      - the\n                      - to\n                    synonyms:\n                      wolverine:\n                        - xmen\n                        - logan\n                      logan:\n                        - wolverine\n                        - xmen\n                      wow:\n                        - world of warcraft\n                    filterableAttributes:\n                      - genres\n                      - director\n                    sortableAttributes:\n                      - price\n                      - author\n                      - title\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.update\n      summary: Update settings\n      description: |\n        Update the settings of an index.\n\n        Updates in the settings route are partial. This means that any parameters not provided in the body will be left unchanged.\n        [Learn more about the settings in this guide](https://docs.meilisearch.com/reference/features/settings.html).\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                synonyms:\n                  $ref: '#/components/schemas/synonyms'\n                stopWords:\n                  $ref: '#/components/schemas/stopWords'\n                rankingRules:\n                  $ref: '#/components/schemas/rankingRules'\n                distinctAttribute:\n                  $ref: '#/components/schemas/distinctAttribute'\n                searchableAttributes:\n                  $ref: '#/components/schemas/searchableAttributes'\n                displayedAttributes:\n                  $ref: '#/components/schemas/displayedAttributes'\n                filterableAttributes:\n                  $ref: '#/components/schemas/filterableAttributes'\n                sortableAttributes:\n                  $ref: '#/components/schemas/sortableAttributes'\n            examples:\n              Example:\n                value:\n                  synonyms:\n                    wolverine:\n                      - xmen\n                      - logan\n                    logan:\n                      - wolverine\n                      - xmen\n                    wow:\n                      - world of warcraft\n                  stopWords:\n                    - of\n                    - the\n                    - to\n                  rankingRules:\n                    - words\n                    - typo\n                    - proximity\n                    - attribute\n                    - sort\n                    - exactness\n                    - 'release_date:asc'\n                  distinctAttribute: ean13\n                  searchableAttributes:\n                    - title\n                    - description\n                    - genre\n                  displayedAttributes:\n                    - title\n                    - description\n                    - genre\n                    - release_date\n                  filterableAttributes: []\n                  sortableAttributes: null\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.reset\n      summary: Reset settings\n      description: |\n        Reset the settings of an index.\n\n        All settings will be reset to their default value.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/synonyms':\n    get:\n      operationId: indexes.settings.synonyms.get\n      summary: Get synonyms\n      description: |\n        Get the list of [synonyms](https://docs.meilisearch.com/reference/features/synonyms.html) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/synonyms'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.synonyms.update\n      summary: Update synonyms\n      description: |\n        Update the list of [synonyms](https://docs.meilisearch.com/reference/features/synonyms.html) of an index. Synonyms are [normalized](https://docs.meilisearch.com/reference/features/synonyms.html#normalization).\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/synonyms'\n            examples: {}\n        description: ''\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.synonyms.reset\n      summary: Reset synonyms\n      description: |\n        Reset the list of [synonyms](https://docs.meilisearch.com/reference/features/synonyms.html) of an index to its default value (`{}`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/sortable-attributes':\n    get:\n      operationId: indexes.settings.sortable-attributes.get\n      summary: Get sortable attributes\n      description: |\n        Get the list of [sortableAttributes](https://docs.meilisearch.com//reference/features/settings.html#sortable-attributes) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/sortableAttributes'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.sortable-attributes.update\n      summary: Update sortable attributes\n      description: |\n        Update the list of [sortableAttributes](https://docs.meilisearch.com//reference/features/settings.html#sortable-attributes) of an index.\n\n        \u003e info\n        \u003e In order to enable sorting capabilities on geographic data, the `_geo` field must be added as a sortableAttribute.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/sortableAttributes'\n            examples: {}\n        description: ''\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.sortable-attributes.reset\n      summary: Reset sortable attributes\n      description: |\n        Reset the list of [sortableAttributes](https://docs.meilisearch.com//reference/features/settings.html#sortable-attributes) of an index to its default value (`[]`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - name: indexUid\n        in: path\n        description: Index Unique Identifier\n        required: true\n        schema:\n          type: string\n          example: movies\n  '/indexes/{indexUid}/settings/stop-words':\n    get:\n      operationId: indexes.settings.stopWords.get\n      summary: Get stop-words\n      description: |\n        Get the list of [stop-words](https://docs.meilisearch.com/reference/features/stop_words.html) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/stopWords'\n              examples: {}\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.stopWords.update\n      summary: Update stop-words\n      description: |\n        Update the list of [stop-words](https://docs.meilisearch.com/reference/features/stop_words.html) of an index.\n\n        If a list of stop-words already exists it will be overwritten (replaced).\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/stopWords'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.stopWords.reset\n      summary: Reset stop-words\n      description: |\n        Reset the list of [stop-words](https://docs.meilisearch.com/reference/features/stop_words.html) of an index to its default value (`[]`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/ranking-rules':\n    get:\n      operationId: indexes.settings.rankingRules.get\n      summary: Get ranking rules\n      description: |\n        Get the [ranking rules](https://docs.meilisearch.com/learn/core_concepts/relevancy.html#ranking-rules) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/rankingRules'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.rankingRules.update\n      summary: Update ranking rules\n      description: |\n        Update the [ranking rules](https://docs.meilisearch.com/learn/core_concepts/relevancy.html#ranking-rules) of an index.\n\n        To add your own ranking rule, you have to communicate either `asc` for ascending order or `desc` for descending order followed by the field name in brackets.\n\n        * To apply an ascending custom ranking rule: `attribute_name:asc`\n        * To apply a descending custom ranking rule: `attribute_name:desc`\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/rankingRules'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.rankingRules.reset\n      summary: Reset ranking rules\n      description: |\n        Reset the [ranking rules](https://docs.meilisearch.com/learn/core_concepts/relevancy.html#ranking-rules) of an index to its default value.\n\n        Default Value:\n        ```json\n        [\"words\", \"typo\", \"proximity\", \"attribute\", \"sort\", \"exactness\"]\n        ```\n\n        To remove all ranking rules, which is not recommended in any case, you would send an empty array to the add or replace ranking rules route.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/filterable-attributes':\n    get:\n      operationId: indexes.settings.filterableAttributes.get\n      summary: Get Filterable Attributes\n      description: |\n        Get the [filterable attributes](https://docs.meilisearch.com/reference/features/settings.html#filterable-attributes) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/filterableAttributes'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.filterableAttributes.update\n      summary: Update Filterable Attributes\n      description: |\n        Update the [filterable attributes](https://docs.meilisearch.com/reference/features/settings.html#filterable-attributes) of an index.\n\n        \u003e info\n        \u003e In order to enable filtering capabilities on geographic data, the `_geo` field must be added as a filterableAttribute.\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/filterableAttributes'\n        description: ''\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.filterableAttributes.reset\n      summary: Reset Filterable Attributes\n      description: |\n        Reset the [filterable attributes](https://docs.meilisearch.com/reference/features/settings.html#filterable-attributes) of an index to its default value (`[]`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/distinct-attribute':\n    get:\n      operationId: indexes.settings.distinctAttribute.get\n      summary: Get distinct attribute\n      description: |\n        Get the [distinct attribute](https://docs.meilisearch.com/reference/features/settings.html#distinct-attribute) field of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/distinctAttribute'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.distinctAttribute.update\n      summary: Update distinct attribute\n      description: |\n        Update the [distinct attribute](https://docs.meilisearch.com/reference/features/settings.html#distinct-attribute) field of an index.\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/distinctAttribute'\n        description: ''\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.distinctAttribute.reset\n      summary: Reset distinct attribute\n      description: |\n        Reset the [distinct attribute](https://docs.meilisearch.com/reference/features/settings.html#distinct-attribute) field of an index to its default value (`null`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/searchable-attributes':\n    get:\n      operationId: indexes.settings.searchableAttributes.get\n      summary: Get searchable attributes\n      description: |\n        Get the [searchable attributes](https://docs.meilisearch.com/reference/features/field_properties.html#searchable-fields) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/searchableAttributes'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.searchableAttributes.update\n      summary: Update searchable attributes\n      description: |\n        Update the [searchable attributes](https://docs.meilisearch.com/reference/features/field_properties.html#searchable-fields) of an index.\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/searchableAttributes'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.searchableAttributes.reset\n      summary: Reset searchable attributes\n      description: |\n        Reset the [searchable attributes](https://docs.meilisearch.com/reference/features/field_properties.html#searchable-fields) of an index to its default value (`['*']`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/settings/displayed-attributes':\n    get:\n      operationId: indexes.settings.displayedAttributes.get\n      summary: Get displayed attributes\n      description: |\n        Get the [displayed attributes](https://docs.meilisearch.com/reference/features/settings.html#displayed-attributes) of an index.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/displayedAttributes'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    post:\n      operationId: indexes.settings.displayedAttributes.update\n      summary: Update displayed attributes\n      description: |\n        Update the [displayed attributes](https://docs.meilisearch.com/reference/features/settings.html#displayed-attributes) of an index.\n\n        \u003e info\n        \u003e If the provided index does not exist, it will be created.\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/displayedAttributes'\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n    delete:\n      operationId: indexes.settings.displayedAttributes.reset\n      summary: Reset displayed attributes\n      description: |\n        Reset the [displayed attributes](https://docs.meilisearch.com/reference/features/settings.html#displayed-attributes) of an index to its default value (`['*']`).\n      tags:\n        - Settings\n      security:\n        - apiKey: []\n      responses:\n        '202':\n          $ref: '#/components/responses/202'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/stats':\n    get:\n      operationId: indexes.stats.get\n      summary: Get stat of an index\n      description: Get stats of an index.\n      tags:\n        - Stats\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/stats'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/tasks':\n    get:\n      operationId: indexes.tasks.list\n      summary: Get all tasks of an index\n      description: |\n        Get all [tasks](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html) of an [index](https://docs.meilisearch.com/learn/core_concepts/indexes.html).\n      tags:\n        - Tasks\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/task'\n              examples:\n                Example:\n                  value:\n                    results:\n                      - uid: 1\n                        indexUid: movies\n                        status: succeeded\n                        type: documentAddition\n                        details:\n                          receivedDocuments: 79000\n                          indexedDocuments: 79000\n                        duration: PT2S\n                        enqueuedAt: '2021-01-01T09:39:00.000000Z'\n                        startedAt: '2021-01-01T09:39:01.000000Z'\n                        finishedAt: '2021-01-01T09:39:02.000000Z'\n                      - uid: 0\n                        indexUid: movies\n                        status: failed\n                        type: documentAddition\n                        details:\n                          receivedDocuments: 67493\n                          indexedDocuments: 0\n                        error:\n                          message: 'Document does not have a `:primaryKey` attribute: `:documentRepresentation`.'\n                          code: missing_document_id\n                          type: invalid_request\n                          link: 'https://docs.meilisearch.com/errors#missing_document_id'\n                        duration: PT5S\n                        enqueuedAt: '2021-01-01T09:38:00.000000Z'\n                        startedAt: '2021-01-01T09:38:02.000000Z'\n                        finishedAt: '2021-01-01T09:38:07.000000Z'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n  '/indexes/{indexUid}/tasks/{taskUid}':\n    get:\n      operationId: indexes.tasks.get\n      summary: Get a task of an index\n      description: |\n        Get a [task](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html) of an [index](https://docs.meilisearch.com/learn/core_concepts/indexes.html).\n      tags:\n        - Tasks\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/task'\n              examples:\n                Example:\n                  value:\n                    uid: 1\n                    indexUid: movies\n                    status: succeeded\n                    type: documentAddition\n                    details:\n                      receivedDocuments: 79000\n                      indexedDocuments: 79000\n                    duration: PT1S\n                    enqueuedAt: '2021-01-01T09:39:00.000000Z'\n                    startedAt: '2021-01-01T09:39:01.000000Z'\n                    finishedAt: '2021-01-01T09:39:02.000000Z'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n    parameters:\n      - $ref: '#/components/parameters/indexUid'\n      - $ref: '#/components/parameters/taskUid'\n  /keys:\n    get:\n      operationId: keys.list\n      summary: Get API Keys\n      description: |\n        Get API Keys\n      tags:\n        - Keys\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/key'\n              examples:\n                example-1:\n                  value:\n                    results:\n                      - key: d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\n                        actions:\n                          - documents.add\n                        indexes:\n                          - movies\n                        description: An API Key\n                        expiresAt: '2022-11-12T10:00:00Z'\n                        createdAt: '2021-11-12T10:00:00Z'\n                        updatedAt: '2021-11-12T10:00:00Z'\n        '401':\n          $ref: '#/components/responses/401'\n  '/keys/{key}':\n    get:\n      summary: Get an API key\n      tags:\n        - Keys\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/key'\n              examples:\n                Fetch an API Key details:\n                  value:\n                    description: Indexing Products API key\n                    key: d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\n                    actions:\n                      - documents.add\n                    indexes:\n                      - products\n                    expiresAt: '2021-11-13T00:00:00Z'\n                    createdAt: '2021-11-12T10:00:00Z'\n                    updatedAt: '2021-11-12T10:00:00Z'\n      operationId: keys.get\n      description: Get an API Key\n    parameters:\n      - schema:\n          type: string\n        name: key\n        in: path\n        required: true\n        description: The API key value\n    delete:\n      summary: Delete an API key\n      operationId: keys.delete\n      tags:\n        - Keys\n      security:\n        - apiKey: []\n      responses:\n        '204':\n          $ref: '#/components/responses/204'\n      description: ''\n    patch:\n      summary: Update an API key\n      operationId: keys.update\n      tags:\n        - Keys\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/key'\n              examples:\n                Patch an API Key Response:\n                  value:\n                    description: Indexing Products API key\n                    key: d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\n                    actions:\n                      - documents.add\n                    indexes:\n                      - products\n                    expiresAt: '2021-11-13T00:00:00Z'\n                    createdAt: '2021-11-12T10:00:00Z'\n                    updatedAt: '2021-11-12T15:00:00Z'\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n      description: Update an API Key\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/key'\n            examples:\n              Patch an API Key Request:\n                value:\n                  description: Indexing Products API key\n    post:\n      summary: Create an API Key\n      operationId: keys.create\n      tags:\n        - Keys\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/key'\n              examples:\n                Create an API Key:\n                  value:\n                    description: Indexing Products API key\n                    key: d0552b41536279a0ad88bd595327b96f01176a60c2243e906c52ac02375f9bc4\n                    actions:\n                      - documents.add\n                    indexes:\n                      - products\n                    expiresAt: '2021-11-13T00:00:00Z'\n                    createdAt: '2021-11-12T10:00:00Z'\n                    updatedAt: '2021-11-12T10:00:00Z'\n      parameters:\n        - $ref: '#/components/parameters/Content-Type'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/key'\n            examples:\n              API Key Creation:\n                value:\n                  description: Indexing Products API key\n                  actions:\n                    - documents.add\n                  indexes:\n                    - products\n                  expiresAt: '2021-11-13T00:00:00Z'\n  /stats:\n    get:\n      operationId: stats.list\n      summary: Get stats of all indexes\n      description: Get stats of all indexes.\n      tags:\n        - Stats\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: false\n                properties:\n                  databaseSize:\n                    type: number\n                  lastUpdate:\n                    $ref: '#/components/schemas/timestamp'\n                  indexes:\n                    type: object\n                    properties:\n                      indexUid:\n                        $ref: '#/components/schemas/stats'\n                required:\n                  - databaseSize\n                  - lastUpdate\n                  - indexes\n              examples:\n                Stats Of All Indexes:\n                  value:\n                    databaseSize: 567\n                    lastUpdate: '2019-11-20T09:40:33.711324Z'\n                    indexes:\n                      movies:\n                        numberOfDocuments: 10\n                        isIndexing: true\n                        fieldDistribution:\n                          genre: 10\n                          author: 9\n        '401':\n          $ref: '#/components/responses/401'\n  /version:\n    get:\n      operationId: version.get\n      summary: Get version of Meilisearch\n      description: Get version of Meilisearch.\n      tags:\n        - Version\n      security:\n        - apiKey: []\n      responses:\n        '200':\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  commitSha:\n                    type: string\n                    example: b46889b5f0f2f8b91438a08a358ba8f05fc09fc1\n                  commitDate:\n                    type: string\n                    example: '2021-07-08'\n                  pkgVersion:\n                    type: string\n                    example: 0.1.1\n                additionalProperties: false\n                required:\n                  - commitSha\n                  - commitDate\n                  - pkgVersion\n              examples:\n                Example:\n                  value:\n                    commitSha: b46889b5f0f2f8b91438a08a358ba8f05fc09fc1\n                    commitDate: '2021-07-08'\n                    pkgVersion: 0.23.0\n        '401':\n          $ref: '#/components/responses/401'\n  /tasks:\n    get:\n      summary: Get all tasks\n      description: 'Get all [tasks](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html)'\n      tags:\n        - tasks\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  results:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/task'\n              examples:\n                Example:\n                  value:\n                    results:\n                      - uid: 1\n                        indexUid: movies\n                        status: succeeded\n                        type: documentAddition\n                        details:\n                          receivedDocuments: 79000\n                          indexedDocuments: 79000\n                        duration: PT1S\n                        enqueuedAt: '2021-01-01T09:39:00.000000Z'\n                        startedAt: '2021-01-01T09:39:01.000000Z'\n                        finishedAt: '2021-01-01T09:39:02.000000Z'\n                      - uid: 0\n                        indexUid: movies_Review\n                        status: failed\n                        type: documentAddition\n                        details:\n                          receivedDocuments: 67493\n                          indexedDocuments: 0\n                        error:\n                          message: 'Document does not have a `:primaryKey` attribute: `:documentRepresentation`.'\n                          code: missing_document_id\n                          type: invalid_request\n                          link: 'https://docs.meilisearch.com/errors#missing_document_id'\n                        duration: PT5S\n                        enqueuedAt: '2021-01-01T09:38:00.000000Z'\n                        startedAt: '2021-01-01T09:38:02.000000Z'\n                        finishedAt: '2021-01-01T09:38:07.000000Z'\n      operationId: tasks.list\n      parameters: []\n      security:\n        - apiKey: []\n  '/tasks/:taskUid':\n    get:\n      summary: Get a task\n      description: 'Get a [task](https://docs.meilisearch.com/learn/advanced/asynchronous_operations.html) '\n      tags:\n        - tasks\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/task'\n              examples:\n                Example:\n                  value:\n                    uid: 1\n                    indexUid: movies\n                    status: succeeded\n                    type: documentAddition\n                    details:\n                      receivedDocuments: 79000\n                      indexedDocuments: 79000\n                    duration: PT1S\n                    enqueuedAt: '2021-01-01T09:39:00.000000Z'\n                    startedAt: '2021-01-01T09:39:01.000000Z'\n                    finishedAt: '2021-01-01T09:39:02.000000Z'\n        '401':\n          $ref: '#/components/responses/401'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/error'\n              examples:\n                Example:\n                  value:\n                    message: 'Task :taskUid not found.'\n                    code: task_not_found\n                    type: invalid_request\n                    link: 'https://docs.meilisearch.com/errors/#task_not_found'\n      operationId: tasks.get\n      parameters: []\n      security:\n        - apiKey: []\n    parameters:\n      - $ref: '#/components/parameters/taskUid'\nsecurity: []\n"
		}
	},
	"Error": "callback: json: cannot unmarshal array into Go struct field Schema.type of type string"
}