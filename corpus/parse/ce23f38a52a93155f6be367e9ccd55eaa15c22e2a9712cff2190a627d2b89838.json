{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/yoshinorin/qualtet"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "docs/api/openapi.yml",
			"byteSize": 10980,
			"content": "openapi: 3.1.0\ninfo:\n  title: Qualtet API\n  description: |\n    # Description\n    This API documentation regarding OpenAPI specification. Generated by [ReDoc](https://github.com/Rebilly/ReDoc)\n  version: 1.0.0\nexternalDocs:\n  description: Source code\n  url: 'https://github.com/yoshinorin/qualtet'\nservers:\n  - url: http://example.com/\npaths:\n  /status:\n    get:\n      summary: Get API server status\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: string\n                    example: operational\n  /token:\n    post:\n      summary: Create a IDToken\n      description: |\n        Create a IDToken\n      responses:\n        201:\n          description: Create a IDToken succeeded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/idToken'\n        400:\n          description: Payload is wrong\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/errorMessage'\n        401:\n          description: Unauthorized\n  /archives:\n    get:\n      summary: Get all articles\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/article'\n  /articles:\n    get:\n      summary: Get articles with count\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    description: The numbers of all articles.\n                    type: integer\n                    example: 99\n                  articles:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/simpleArticle'\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: integer\n          description: The numbers of page for pagination.\n        - in: query\n          name: limit\n          schema:\n            type: integer\n          description: The numbers of items to return. Max is 10.\n  /authors:\n    get:\n      summary: Get all authors\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/author'\n  /authors/{authorName}:\n    get:\n      summary: Get an author\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: '#/components/schemas/author'\n        404:\n          description: Author not found\n          # content: TODO\n  /contents:\n    post:\n      summary: Create a content\n      description: |\n        Create a new content\n      responses:\n        201:\n          description: Create a content succeeded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/requestContent'\n        400:\n          description: BadRequest\n        401:\n          description: Unauthorized\n        404:\n          description: Content type is not found\n          # content: TODO\n  /contents/{contentPath}:\n    get:\n      summary: Get a content\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/responseContent'\n        404:\n          description: Content not found\n          # content: TODO\n  /tags:\n    get:\n      summary: Get a tags\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/tag'\n  /tags/{tagName}:\n    get:\n      summary: Get an articles by tagName\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/simpleArticle'\n        404:\n          description: Content not found\n          # content: TODO\n  /content-types/{contentPath}:\n    get:\n      summary: Get content-types\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/contentType'\n  /content-types/{contentTypeName}:\n    get:\n      summary: Get a content-type with name\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/contentType'\n  /sitemaps:\n    get:\n      summary: Get an articles url \u0026 updated date for sitemaps.xml\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/sitemaps'\n  /feed/{feedName}:\n    get:\n      summary: Get a feeds\n      responses:\n        200:\n          description: Response when Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/feed'\ncomponents:\n  schemas:\n    idToken:\n      type: object\n      properties:\n        token:\n          type: string\n          example: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3Mi....\"\n    author:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          example: \"01fgvhk1bz6546e4b1s2hdw0pw\"\n        name:\n          type: string\n          example: JohnDoe\n        displayName:\n          type: string\n          example: John\n        createdAt:\n          type: long\n          description: Unix time\n          example: 1625065318\n    contentType:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          example: \"01fgvhjxftxfjvxg3xbvv78kr1\"\n        name:\n          type: string\n          example: \"article\"\n    externalResource:\n      type: object\n      properties:\n        kind:\n          type: string\n          example: \"js\"\n        values:\n          type: array\n          example: \"['mathjax','marmaid']\"\n    tag:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          example: \"01frdbdb6s2mxshxzk3wan0f6d\"\n        name:\n          type: string\n          example: \"diary\"\n    simpleArticle:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          example: \"01fgvhme5b7cj0m5agr9f4g2ca\"\n        title:\n          type: string\n          example: \"Post Title\"\n        publishedAt:\n          type: long\n          description: Unix time\n          example: 1625065318\n    article:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          example: \"01fgvhme5b7cj0m5agr9f4g2ca\"\n        title:\n          type: string\n          example: \"Post Title\"\n        content:\n          type: string\n          example: \"Post Content.... RAW strings\"\n        publishedAt:\n          type: long\n          description: Unix time\n          example: 1625065509\n        updatedAt:\n          type: long\n          description: Unix time\n          example: 1625065592\n    feed:\n      type: object\n      properties:\n        title:\n          type: string\n          example: \"Post Title\"\n        link:\n          type: string\n          format: url(excludes domain part)\n          example: \"/post/test-article\"\n        id:\n          type: string\n          format: url(excludes domain part)\n          example: \"/post/test-article\"\n        published:\n          type: long\n          description: Unix time\n          example: 1625065509\n        updated:\n          type: long\n          description: Unix time\n          example: 1625065592\n    requestContent:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          example: \"01fgvhme5b7cj0m5agr9f4g2ca\"\n        authorId:\n          type: string\n          format: ulid\n          example: \"01fgvhk1bz6546e4b1s2hdw0pw\"\n        contentTypeId:\n          type: string\n          format: ulid\n          example: \"01fgvhjxftxfjvxg3xbvv78kr1\"\n        path:\n          type: string\n          example: \"/2020/01/01/new-year\"\n        externalResources:\n          type: array\n          items:\n            $ref: '#/components/schemas/externalResource'\n        title:\n          type: string\n          example: \"Post Title\"\n        rawContent:\n          type: string\n          example: \"Post Content.... RAW strings\"\n        htmlContent:\n          type: string\n          example: \"Post Content.... HTML strings\"\n        tags:\n          type: array\n          example: \"['diary', 'tech']\"\n        publishedAt:\n          type: long\n          description: Unix time\n          example: 1625065509\n        updatedAt:\n          type: long\n          description: Unix time\n          example: 1625065509\n    responseContent:\n      type: object\n      properties:\n        title:\n          type: string\n          example: \"Post Title\"\n        robotsAttributes:\n          type: string\n          example: \"noarchive, noimageindex\"\n        externalResources:\n          type: array\n          items:\n            $ref: '#/components/schemas/externalResource'\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/tag'\n        description:\n          type: string\n          example: \"Post description... not HTML strings\"\n        content:\n          type: string\n          example: \"Post Content.... HTML strings\"\n        authorName:\n          type: string\n          description: \"This field return from `authors.display_name` coloumn value.\"\n          example: \"Jhon Due\"\n        publishedAt:\n          type: long\n          description: Unix time\n          example: 1625065509\n        updatedAt:\n          type: long\n          description: Unix time\n          example: 1627095819\n    sitemaps:\n      type: object\n      properties:\n        loc:\n          type: string\n          example: \"https://example.com/aaa/bbb/ccc\"\n        lastMod:\n          type: string\n          example: \"YYYY-MM-DD\"\n    errorMessage:\n      type: object\n      properties:\n        message:\n          type: string\n          example: Something is wrong\n",
			"canonicalURL": "/github.com/yoshinorin/qualtet@11db7ec4abc53d6e1f2cc8deb787d21151189901/-/blob/docs/api/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/yoshinorin/qualtet/blob/11db7ec4abc53d6e1f2cc8deb787d21151189901/docs/api/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"feed\": parse schema: property \"published\": parse schema: at 1:1409: unexpected schema type: \"long\""
}