{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/interuss/dss"
		},
		"file": {
			"name": "scd.yaml",
			"size": 0,
			"path": "interfaces/automated-testing/scd/scd.yaml",
			"byteSize": 25144,
			"content": "openapi: 3.0.2\ninfo:\n  title: Strategic Coordination Test Data Injection\n  version: 0.0.1\n  description: \u003e-\n    This interface is implemented by every USS wishing to be tested by the automated testing framework.\n    The automated testing suite calls this interface to inject test data into the USS system under test.\n\ncomponents:\n  securitySchemes:\n    Authority:\n      type: oauth2\n      flows:\n        clientCredentials:\n          tokenUrl: https://auth.example.com/oauth/token\n          scopes:\n            utm.inject_test_data: |-\n              Client may inject test data into a USS for the purpose of conducting automated tests.\n      description: |-\n        Authorization from, or on behalf of, an authorization authority, augmenting standard scd authorization for the purpose of automated testing.\n\n  schemas:\n    StatusResponse:\n      type: object\n      required:\n        - status\n      properties:\n        status:\n          description: \u003e-\n            The status of the USS automated testing interface.\n\n            - `Starting`: the USS is starting and the automated test driver should wait before sending requests.\n\n            - `Ready`: the USS is ready to receive test requests.\n          type: string\n          enum: [Starting, Ready]\n          example: Ready\n    ################################################################################\n    #################### Start of ASTM-standard definitions    #####################\n    #################### interfaces/astm-utm/Protocol/utm.yaml #####################\n    ################################################################################\n    UUIDv4Format:\n      description: \u003e-\n        String whose format matches a version-4 UUID according to RFC 4122.\n      maxLength: 36\n      minLength: 36\n      type: string\n      format: uuid\n      pattern: \u003e-\n        ^[0-9a-fA-F]{8}\\\\-[0-9a-fA-F]{4}\\\\-4[0-9a-fA-F]{3}\\\\-[8-b][0-9a-fA-F]{3}\\\\-[0-9a-fA-F]{12}$\n      example: 03e5572a-f733-49af-bc14-8a18bd53ee39\n    EntityID:\n      description: \u003e-\n        Identifier for an Entity communicated through the DSS.  Formatted as a\n        UUIDv4.\n      anyOf:\n        - $ref: '#/components/schemas/UUIDv4Format'\n      example: 2f8343be-6482-4d1b-a474-16847e01af1e\n    Time:\n      required:\n        - value\n        - format\n      type: object\n      properties:\n        value:\n          type: string\n          description: \u003e-\n            RFC3339-formatted time/date string.  The time zone must be 'Z'.\n          format: date-time\n          example: '1985-04-12T23:20:50.52Z'\n        format:\n          type: string\n          enum:\n            - RFC3339\n\n    Radius:\n      required:\n        - value\n        - units\n      type: object\n      properties:\n        value:\n          format: float\n          description: \u003e-\n            Distance from the centerpoint of a circular area, along the WGS84\n            ellipsoid.\n          type: number\n          minimum: 0\n          exclusiveMinimum: true\n          example: 300.183\n        units:\n          type: string\n          description: \u003e-\n            FIXM-compatible units.  Only meters (\"M\") are acceptable for UTM.\n          enum:\n            - M\n    Altitude:\n      type: object\n      required:\n        - value\n        - reference\n        - units\n      properties:\n        value:\n          description: \u003e-\n            The numeric value of the altitude. Note that min and max values are\n            added as a sanity check. As use cases evolve and more options are\n            made available in terms of units of measure or reference systems,\n            these bounds may be re-evaluated.\n          type: number\n          format: double\n          minimum: -8000\n          exclusiveMinimum: false\n          maximum: 100000\n          exclusiveMaximum: false\n        reference:\n          description: \u003e-\n            A code indicating the reference for a vertical distance. See AIXM\n            5.1 and FIXM 4.2.0. Currently, UTM only allows WGS84 with no\n            immediate plans to allow other options. FIXM and AIXM allow for\n            'SFC' which is equivalent to AGL.\n          type: string\n          enum:\n            - W84\n        units:\n          description: \u003e-\n            The reference quantities used to express the value of altitude. See\n            FIXM 4.2. Currently, UTM only allows meters with no immediate plans\n            to allow other options.\n          type: string\n          enum:\n            - M\n    Latitude:\n      description: \u003e-\n        Degrees of latitude north of the equator, with reference to the WGS84\n        ellipsoid.\n      maximum: 90\n      exclusiveMaximum: false\n      minimum: -90\n      exclusiveMinimum: false\n      type: number\n      format: double\n      example: 34.123\n    Longitude:\n      description: \u003e-\n        Degrees of longitude east of the Prime Meridian, with reference to the\n        WGS84 ellipsoid.\n      minimum: -180\n      exclusiveMaximum: false\n      maximum: 180\n      exclusiveMinimum: false\n      type: number\n      format: double\n      example: -118.456\n    Polygon:\n      description: \u003e-\n        An enclosed area on the earth. The bounding edges of this polygon are\n        defined to be the shortest paths between connected vertices.  This\n        means, for instance, that the edge between two points both defined at a\n        particular latitude is not generally contained at that latitude. The\n        winding order must be interpreted as the order which produces the\n        smaller area. The path between two vertices is defined to be the\n        shortest possible path between those vertices. Edges may not cross.\n        Vertices may not be duplicated.  In particular, the final polygon vertex\n        must not be identical to the first vertex.\n      required:\n        - vertices\n      type: object\n      properties:\n        vertices:\n          minItems: 3\n          type: array\n          items:\n            $ref: '#/components/schemas/LatLngPoint'\n    LatLngPoint:\n      description: Point on the earth's surface.\n      required:\n        - lat\n        - lng\n      type: object\n      properties:\n        lng:\n          $ref: '#/components/schemas/Longitude'\n        lat:\n          $ref: '#/components/schemas/Latitude'\n    Circle:\n      description: A circular area on the surface of the earth.\n      type: object\n      properties:\n        center:\n          $ref: '#/components/schemas/LatLngPoint'\n        radius:\n          $ref: '#/components/schemas/Radius'\n    Volume3D:\n      description: \u003e-\n        A three-dimensional geographic volume consisting of a\n        vertically-extruded shape. Exactly one outline must be specified.\n      type: object\n      properties:\n        outline_circle:\n          anyOf:\n            - $ref: '#/components/schemas/Circle'\n          description: A circular geographic shape on the surface of the earth.\n        outline_polygon:\n          anyOf:\n            - $ref: '#/components/schemas/Polygon'\n          description: \u003e-\n            A polygonal geographic shape on the surface of the earth.\n        altitude_lower:\n          description: \u003e-\n            Minimum bounding altitude of this volume. Must be less than\n            altitude_upper, if specified.\n          anyOf:\n            - $ref: '#/components/schemas/Altitude'\n        altitude_upper:\n          description: \u003e-\n            Maximum bounding altitude of this volume. Must be greater than\n            altitude_lower, if specified.\n          anyOf:\n            - $ref: '#/components/schemas/Altitude'\n    Volume4D:\n      description: Contiguous block of geographic spacetime.\n      required:\n        - volume\n      type: object\n      properties:\n        volume:\n          $ref: '#/components/schemas/Volume3D'\n        time_start:\n          description: Beginning time of this volume. Must be before time_end.\n          anyOf:\n            - $ref: '#/components/schemas/Time'\n        time_end:\n          description: End time of this volume. Must be after time_start.\n          anyOf:\n            - $ref: '#/components/schemas/Time'\n    OperationalIntentState:\n      description: \u003e-\n        State of an operational intent.\n        'Accepted': Operational intent is created and shared, but not yet in\n        use; see standard text for more details.\n        The create or update request for this operational intent reference must\n        include a Key containing all OVNs for all relevant Entities.\n        'Activated': Operational intent is in active use; see standard text for\n        more details.\n        The create or update request for this operational intent reference must\n        include a Key containing all OVNs for all relevant Entities.\n        'Nonconforming': UA is temporarily outside its volumes, but the\n        situation is expected to be recoverable; see standard text for more\n        details.\n        In this state, the `/uss/v1/operational_intents/{entityid}/telemetry`\n        USS-USS endpoint should respond, if available, to queries from USS\n        peers.  The create or update request for this operational intent may\n        omit a Key in this case because the operational intent is being adjusted\n        as flown and cannot necessarily deconflict.\n        'Contingent': UA is considered unrecoverably unable to conform with its\n        coordinate operational intent; see standard text for more details.\n        This state must transition to Ended.  In this state, the\n        `/uss/v1/operational_intents/{entityid}/telemetry` USS-USS endpoint\n        should respond, if available, to queries from USS peers.  The create or\n        update request for this operational intent may omit a Key in this case\n        because the operational intent is being adjusted as flown and cannot\n        necessarily deconflict.\n      type: string\n      enum:\n        - Accepted\n        - Activated\n        - Nonconforming\n        - Contingent\n    Priority:\n      description: \u003e-\n        Ordinal priority of the operational intent, as defined by the\n        regulator.  Operational intents with lesser values are lower priority\n        than all operational intents with greater values.  A lower-priority\n        operational intent may not create a conflict with a higher-priority\n        operational intent.  A higher-priority operational intent may create a\n        conflict with a lower-priority operational intent.  The regulator\n        specifies whether an operational intent may create a conflict with other\n        operational intents of the same priority.\n      type: integer\n      default: 0\n    ################################################################################\n    ####################### End of ASTM-standard definitions #######################\n    ################################################################################\n\n    OperationalIntentTestInjection:\n      description: \u003e-\n        Parameters that define an operational intent: this injection is used to\n        create a operational intent reference in the DSS and also responding to\n        requests for details of that operational intent (by other USSes or the\n        test driver). The USS under test will need to process this data to both\n        create a valid operational intent reference and responding to a query for\n        details.\n      required:\n        - state\n        - priority\n        - volumes\n        - off_nominal_volumes\n      type: object\n      properties:\n        state:\n          $ref: '#/components/schemas/OperationalIntentState'\n        priority:\n          $ref: '#/components/schemas/Priority'\n        volumes:\n          description: \u003e-\n            Nominal volumes, as would be reported by a USS's operational_intents endpoint.\n          type: array\n          items:\n            $ref: '#/components/schemas/Volume4D'\n        off_nominal_volumes:\n          description: \u003e-\n            Off-Nominal volumes, as would be reported by a USS's operational_intents endpoint.\n          type: array\n          items:\n            $ref: '#/components/schemas/Volume4D'\n    FlightAuthorisationData:\n      description: |-\n        A dataset to hold details of a UAS flight authorization request. Full description of a flight authorisation including mandatory information required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664 for an UAS flight authorisation request. Reference: https://eur-lex.europa.eu/legal-content/EN/TXT/HTML/?uri=CELEX:32021R0664\u0026from=EN#d1e32-178-1\n      type: object\n      properties:\n        uas_serial_number:\n          type: string\n          description: Unique serial number of the unmanned aircraft or, if the unmanned aircraft is privately built, the unique serial number of the add-on. This is expressed in the ANSI/CTA-2063 Physical Serial Number format. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 1.\n          example: MFR1C123456789ABC\n        operation_mode:\n          $ref: '#/components/schemas/OperationMode'\n        operation_category:\n          type: string\n          enum:\n            - Unknown\n            - Open\n            - Specific\n            - Certified\n          description: |-\n            Category of UAS operation (‘open’, ‘specific’, ‘certified’) as defined in COMMISSION DELEGATED REGULATION (EU) 2019/945. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 4.\n          example: Open\n        uas_class:\n          $ref: '#/components/schemas/UASClass'\n        identification_technologies:\n          type: array\n          items:\n            type: string\n          description: Technology used to identify the UAS. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 6.\n          example: ['ADS-B', 'ASTMNetRID']\n        uas_type_certificate:\n          description: |-\n            Provisional field. Not applicable as of September 2021. Required only if `uas_class` is set to `other` by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 4.\n          type: string\n          example: ''\n        connectivity_methods:\n          type: array\n          items:\n            type: string\n          description: Connectivity methods. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 7.\n          example: ['cellular']\n        endurance_minutes:\n          description: Endurance of the UAS. This is expressed in minutes. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 8.\n          type: number\n          format: int32\n          example: 20\n        emergency_procedure_url:\n          type: string\n          format: url\n          description: The URL at which the applicable emergency procedure in case of a loss of command and control link may be retrieved. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 9.\n          example: https://utm_uss.com/emergency_procedure\n        operator_id:\n          type: string\n          description: |-\n            Registration number of the UAS operator.\n            The format is defined in EASA Easy Access Rules for Unmanned Aircraft Systems GM1 to AMC1\n            Article 14(6) Registration of UAS operators and ‘certified’ UAS.\n            Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 10.\n          example: FIN87astrdge12k8\n        uas_id:\n          description: |-\n            When applicable, the registration number of the unmanned aircraft.\n            This is expressed using the nationality and registration mark of the unmanned aircraft in\n            line with ICAO Annex 7.\n            Specified by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 10.\n          type: string\n          example: HB-XXXX\n      required:\n        - uas_serial_number\n        - operation_mode\n        - uas_class\n        - identification_technologies\n        - operator_id\n        - operation_category\n        - connectivity_methods\n        - endurance_minutes\n        - emergency_procedure_url\n\n    OperationMode:\n      type: string\n      enum:\n        - Undeclared\n        - Vlos\n        - Bvlos\n      description: Specify if the operation is a `VLOS` or `BVLOS` operation. Required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 2.\n      example: Vlos\n\n    UASClass:\n      type: string\n      enum:\n        - Other\n        - C0\n        - C1\n        - C2\n        - C3\n        - C4\n        - C5\n        - C6\n      description: Specify the class of the UAS to be flown, the specifition matches EASA class identification label categories. UAS aircraft class as defined in COMMISSION DELEGATED REGULATION (EU) 2019/945 (C0 to C4) and COMMISSION DELEGATED REGULATION (EU) 2020/1058 (C5 and C6). This field is required by ANNEX IV of COMMISSION IMPLEMENTING REGULATION (EU) 2021/664, paragraph 4.\n      example: C0\n    InjectFlightRequest:\n      type: object\n      properties:\n        operational_intent:\n          $ref: '#/components/schemas/OperationalIntentTestInjection'\n\n        flight_authorisation:\n          $ref: '#/components/schemas/FlightAuthorisationData'\n    InjectFlightResponse:\n      type: object\n      required:\n        - result\n      properties:\n        result:\n          description: \u003e-\n            The result of the flight submission\n\n              - `Planned`: The flight submission data was valid and the flight was successfully processed by the USS and is now authorized.\n\n              - `Rejected`: The flight submission data provided was invalid and/or could not be used to attempt to authorize the flight.\n\n              - `ConflictWithFlight`: The flight submission data was valid, but the flight could not be authorized because of a disallowed conflict with another flight.\n\n              - `Failed`: The USS was not able to successfully authorize the flight due to a problem with the USS or a downstream system\n\n          type: string\n          enum: [Planned, Rejected, ConflictWithFlight, Failed]\n          example: ConflictWithFlight\n        notes:\n          description: \u003e-\n            Human-readable explanation of the observed result.  This explanation\n            should be available to a human reviewing the test results, and\n            ideally should explain why an undesirable result was obtained.  For\n            instance, if the injection attempt Failed, then these notes may\n            indicate that the attempt failed because the DSS indicated 400 to a\n            valid request (perhaps also including the valid request as proof).\n          type: string\n          example: Requested flight intersected operational intent c036326c-c97b-4926-bf9f-c60dc83d2b57\n        operational_intent_id:\n          description: The id of the operational intent communicated to the DSS. This value is only required when the result of the flight submission is `Planned`.\n          anyOf:\n            - $ref: '#/components/schemas/EntityID'\n    DeleteFlightResponse:\n      type: object\n      required:\n      - result\n      properties:\n        result:\n          description: \u003e-\n            The result of attempted flight cancellation/closure\n\n              - `Closed`: The flight was closed successfully by the USS and is now out of the UTM system.\n\n              - `Failed`: The flight could not be closed successfully by the USS.\n\n          enum: [Closed, Failed]\n          example: Failed\n        notes:\n          description: \u003e-\n            Human-readable explanation of the observed result.\n          type: string\n          example: DSS was unreachable when attempting to delete operational intent reference\n    ClearAreaRequest:\n      type: object\n      required:\n      - request_id\n      - extent\n      properties:\n        request_id:\n          description: \u003e-\n            Unique string identifying this request.  If a second request with an\n            identical ID is received, the USS may return the same response from\n            the previous operation rather than attempting to clear the area\n            again (the USS may also attempt to clear the area again).\n          type: string\n        extent:\n          description: \u003e-\n            The USS should cancel and remove any flight where any part of that\n            flight intersects this area.\n          anyOf:\n            - $ref: '#/components/schemas/Volume4D'\n    ClearAreaOutcome:\n      type: object\n      required:\n      - timestamp\n      properties:\n        success:\n          description: \u003e-\n            True if, and only if, all flights in the specified area owned by the\n            USS were canceled and removed.\n          type: bool\n          default: false\n        message:\n          description: \u003e-\n            If the USS was unable to clear the entire area, this message can\n            provide information on the problem encountered.\n          type: string\n          example: \u003e-\n            DSS at dss.example.com returned 500 when attempting to delete\n            operational intent 57e98b17-aefa-4eee-a376-5140e4a8385f\n        timestamp:\n          description: \u003e-\n            The time at which this operation was performed by the USS.\n          type: string\n          format: datetime\n    ClearAreaResponse:\n      type: object\n      required:\n      - outcome\n      properties:\n        outcome:\n          $ref: '#/components/schemas/ClearAreaOutcome'\n\npaths:\n  /v1/status:\n    get:\n      security:\n        - Authority:\n            - utm.inject_test_data\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusResponse'\n          description: \u003e-\n            The USS automated testing interface is activated and its status was retrieved successfully.\n        '401':\n          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.\n        '403':\n          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.\n        '404':\n          description: The USS automated testing interface is not activated.\n      summary: Retrieve the status of the USS automated testing interface\n      description: Get the status of the USS automated testing interface\n\n  /v1/flights/{flight_id}:\n    parameters:\n    - name: flight_id\n      in: path\n      required: true\n      description: A UUID string identifying the injected flight.\n      schema:\n        $ref: '#/components/schemas/UUIDv4Format'\n\n    put:\n      security:\n        - Authority:\n            - utm.inject_test_data\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/InjectFlightRequest'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InjectFlightResponse'\n          description: Requested data was processed successfully\n        '401':\n          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.\n        '403':\n          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.\n\n      summary: Inject flight\n      operationId: injectFlight\n      description: \u003e-\n        This endpoint simulates the operator intention to submit a flight operation / flight request.\n\n    delete:\n      security:\n      - Authority:\n        - utm.inject_test_data\n\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteFlightResponse'\n          description: Flight was deleted from the system successfully\n        '401':\n          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.\n        '403':\n          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.\n\n      summary: Delete flight\n      operationId: deleteFlight\n      description: \u003e-\n        This endpoint simulates the operator intention to cancel or end a flight operation.\n\n  /v1/clear_area_requests:\n    post:\n      security:\n      - Authority:\n        - utm.inject_test_data\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ClearAreaRequest'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClearAreaResponse'\n          description: Requested area was cleared successfully\n        '401':\n          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.\n        '403':\n          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.\n\n      summary: Clear area\n      operationId: clearArea\n      description: \u003e-\n        This endpoint requests that the USS cancel and remove all flights in the specified area.\n"
		}
	},
	"Error": "parse: parse spec: paths: /v1/clear_area_requests: post: operation \"clearArea\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/ClearAreaResponse\": parse schema: outcome: parse schema: reference \"#/components/schemas/ClearAreaOutcome\": parse schema: success: parse schema: unexpected schema type: \"bool\""
}