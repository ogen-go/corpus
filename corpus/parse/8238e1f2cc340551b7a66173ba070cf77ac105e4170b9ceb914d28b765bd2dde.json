{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/airbusgeo/playground-docs"
		},
		"file": {
			"name": "tile_geo_process_api.yaml",
			"size": 0,
			"path": "api/tile_geo_process_api.yaml",
			"byteSize": 11793,
			"content": "openapi: 3.0.0\n\n#\n# Info\n#\ninfo:\n  title: 'Tile Geo Process API'\n  description: |\n    This document describes the Airbus DS Intelligence \"Tile Geo Process\" API specification. It is based on the Airbus Defense and Space \"Geo Process\" API specification but provides a more precise implementation. Tile Geo Process services that are provided to Airbus DS Intelligence must implement this specification.\n\n    The only execution mode for Geo Process Services is synchronous.\n\n    This API provides two endpoints with a fixed path /api/v1/openapi and /api/v1/describe.\n    The path prefix for the others endpoints are implementation specific, for example the /process endpoint could be implemented at /process or /mypath/process or /api/v1/process.\n    As been the only fixed endpoint with implementation specific data, /api/v1/describe contains the _links attribute that has to reference all implemented endpoints for the service.\n    With this main service entry and the provided links it is possible for a client to discover and address others endpoints of the service.\n\n    The Intelligence Playground is an evaluation environment to test algorithms on OneAtlas imagery from Airbus and Partners.\n  version: \"1.0.1\"\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n\n  contact:\n    name: Airbus DS Intelligence\n    url: 'https://www.intelligence-airbusds.com/'\n\n  x-logo:\n    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png\n\n#\n# External docs\n#\nexternalDocs:\n  description: Intelligence Playground Documentation\n  url: 'http://playground-docs.readthedocs.io'\n\n#\n# Tags\n#\ntags:\n  - name: Mandatory\n    description: |\n      Mandatory resources.\n      Defines the main entry point of the service.\n  - name: Synchronous\n    description: |\n      Mandatory resources for the synchronous mode.\n      Endpoints may be specific to each implementation.\n      Referenced via the _links attribute of the describe resource.\n  - name: Optional\n    description: |\n      Optional, implementation specific resources for low level\n      description and monitoring.\n      Endpoints may be specific to each implementation.\n      Referenced via the _links attribute of the describe resource.\n\n#\n# Paths\n#\npaths:\n  #\n  # OpenAPI schema\n  #\n  /api/v1/openapi:\n    get:\n      tags:\n        - Mandatory\n      summary: Open API specification of this service in YAML format\n      description: |\n        Returns Open API specification of this service in YAML format.\n        Subset of this API with implemented services.\n      responses:\n        '200':\n          description: Process Open API web UI.\n\n  #\n  # Describe\n  #\n  /api/v1/describe:\n    get:\n      tags:\n        - Mandatory\n      summary: Describes process service\n      description: |\n        Returns the description of the process.\n      operationId: describe\n      responses:\n        '200':\n          description: Process description.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Describe'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Job execution\n  #\n  /process:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    post:\n      tags:\n        - Synchronous\n      summary: Launch synchronous process execution on tile(s)\n      description: |\n        Execute the process as a synchronous process. The response contains a JSON object as defined\n        in the output attribute of the description resource.\n      operationId: process\n      requestBody:\n        description: |\n          Process input parameters as defined by the JSON Schema in the input\n          attribute of the description resource.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProcessInput'\n      responses:\n        '200':\n          description: Success.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/OutputResponse'\n        '400':\n          $ref: '#/components/responses/InvalidInput'\n        '500':\n          description: Internal error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '503':\n          description: |\n            Service not available. Max number of simultaneous process execution\n            reached.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Instance versions\n  #\n  /version:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Optional\n      summary: Low level version description\n      description: |\n        Implementation specific.\n        Returns build, compiler or version control versions.\n      operationId: version\n      responses:\n        '200':\n          $ref: '#/components/responses/Version'\n\n  #\n  # Instance health check\n  #\n  /health:\n    servers:\n      - url: '/{customPath}'\n        variables:\n          customPath:\n            default: ''\n    get:\n      tags:\n        - Mandatory\n      summary: Check if the service is alive\n      description: |\n        The response is a HTTP status code 200 containing in the body 'OK'.\n      operationId: healthcheck\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n\n#\n# Components\n#\ncomponents:\n\n  #\n  # Security\n  #\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT #recommended\n\n  #\n  # Responses\n  #\n  responses:\n    OutputResponse:\n      description: |\n        Process output as defined in the output attribute of the description resource.\n\n    NotFound:\n      description: Entity not found.\n\n    NotAvailable:\n      description: Service not available.\n      \n    InvalidInput:\n      description: Invalid input for operation.\n\n    Version:\n      description: Version.\n      content:\n        text/plain:\n          schema:\n            type: string\n\n    Success:\n      description: Success. OK as content.\n      content:\n        text/plain:\n          schema:\n            type: string\n\n  #\n  # Schemas\n  #\n  schemas:\n\n    #\n    # Describe schema\n    #\n    Describe:\n      description: |\n        Process description.\n      type: object\n      required:\n        - name\n        - title\n        - family\n        - version\n        - description\n        - organization\n        - email\n        - requirements\n        - capabilities\n        - resources\n        - input\n        - output\n        - _links\n      properties:\n        name:\n          description: Technical name of the process. May be the Docker image name.\n          type: string\n          example: eu.gcr.io/myproject/cat-detection:latest\n        title:\n          description: The title of the process.\n          type: string\n          example: 'Cat detection'\n        family:\n          description: The process family.\n          type: string\n          example: 'object-detection'\n        version:\n          description: The version of the process.\n          type: string\n          example: 1.0\n        description:\n          description: The description of the process.\n          type: string\n          example: 'Detect cats on tiles'\n        organization:\n          description: Identifier of the organization or entity publishing the process.\n          type: string\n          example: 'Airbus DS Intelligence'\n        email:\n          description: Contact email.\n          type: string\n          example: 'cat-detection@airbus.com'\n        keywords:\n          description: List of keywords or tags.\n          type: array\n          items:\n            type: string\n          example: ['cat', 'dog']\n        requirements:\n          # Requirements of the process service\n          $ref: 'shared.yaml#/components/schemas/Requirements'\n        capabilities:\n          # Capabilities of the process service\n          $ref: 'shared.yaml#/components/schemas/Capabilities'\n        resources:\n          # Hardware resources needed for process execution.\n          $ref: 'shared.yaml#/components/schemas/Resources'\n        input:\n          # Process execution input interface.\n          $ref: '#/components/schemas/ProcessInput'\n        output:\n          # Process execution output interface.\n          $ref: 'shared.yaml#/components/schemas/ProcessOutput'\n        batched:\n          description: True if batched mode provided i.e. capable of receiving an array of payloads\n          type: boolean\n          default: false\n          example: false\n        _links:\n          $ref: 'shared.yaml#/components/schemas/Links'\n\n    #\n    # ProcessInput schema\n    #\n    ProcessInput:\n      description: |\n        Process input parameters as defined by the JSON Schema in the input\n        attribute of the description resource.\n      type: object\n      required:\n        - resolution\n        - tiles\n      properties:\n        resolution:\n          description: The input tile resolution\n          type: number\n          example: 0.5\n        tiles:\n          description: The N tiles required by the process\n          type: array\n          items:\n            description: The tile image base64 encoded, may be JPEG or PNG format\n            type: string\n          example: [\"gABAQEASA....BIAADQBoUG\", \"hvdGzaG9w....IDMuM4QklN\"]      \n        metadata:\n          description: The list of metadata required by the process as indicated in describe/requirements\n          type: object\n          properties:\n            incidenceAngle:\n              type: array\n              items:\n                description: The incidence angle for each tile\n                type: number\n              example: [16.2370419275, 11.5333279292]\n            acquisitionDate:\n              type: array\n              items:\n                description: The acquisition date for each tile\n                type: string\n              example: [\"2017-05-21T10:10:31.610Z\", \"2018-03-23T10:08:36.603Z\"]\n\n    #\n    # Reference schema\n    #\n    Reference:\n      description: |\n        Reference object.\n      type: object\n      required:\n        - href\n      properties:\n        relation:\n          description: Description of the relation.\n          type: string\n        href:\n          description: Determine the target URI of the related resource.\n          type: string\n          format: uri\n          example: http://myservice.com/api/v1/describe\n        type:\n          description: Expected content type of the response of the reference.\n          type: string\n          example: application/json\n        method:\n          # HTTP verb to distinguish between several possible actions on the same ressource. GET if omitted.\n          $ref: '#/components/schemas/ReferenceMethod'\n\n    #\n    # ReferenceMethod schema\n    #\n    ReferenceMethod:\n      description: |\n        HTTP verbs to access resources.\n      type: string\n      enum:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n\n    #\n    # Error schema\n    #\n    Error:\n      description: |\n        Error returned when request fails\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: End user error description.\n          type: string\n        hint:\n          description: Internal / developper error message (no trace).\n          type: string\n        correlationId:\n          description: System request identifier from request header.\n          type: string\n        timestamp:\n          description: Error timestamp.\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: paths: /api/v1/describe: get: operation \"describe\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Describe\": parse schema: _links: parse schema: reference \"shared.yaml#/components/schemas/Links\": resolve reference \"shared.yaml#/components/schemas/Links\": invalid schema reference \"shared.yaml#/components/schemas/Links\""
}