{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/neondatabase/neon"
		},
		"file": {
			"name": "openapi_spec.yml",
			"size": 0,
			"path": "pageserver/src/http/openapi_spec.yml",
			"byteSize": 22889,
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: Page Server API\n  description: Neon Pageserver API\n  version: \"1.0\"\n  license:\n    name: \"Apache\"\n    url: https://github.com/neondatabase/neon/blob/main/LICENSE\nservers:\n  - url: \"\"\npaths:\n  /v1/status:\n    description: Healthcheck endpoint\n    get:\n      description: Healthcheck\n      security: []\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - id\n                properties:\n                  id:\n                    type: integer\n\n  /v1/tenant/{tenant_id}:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    get:\n      description: Get tenant status\n      responses:\n        \"200\":\n          description: Currently returns the flag whether the tenant has inprogress timeline downloads\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TenantInfo\"\n        \"400\":\n          description: Error when no tenant id found in path or no timeline id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/timeline:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    get:\n      description: Get timelines for tenant\n      responses:\n        \"200\":\n          description: TimelineInfo\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TimelineInfo\"\n        \"400\":\n          description: Error when no tenant id found in path\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/timeline/{timeline_id}:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n      - name: timeline_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    get:\n      description: Get info about the timeline\n      responses:\n        \"200\":\n          description: TimelineInfo\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TimelineInfo\"\n        \"400\":\n          description: Error when no tenant id found in path or no timeline id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      description: \"Attempts to delete specified timeline. On 500 errors should be retried\"\n      responses:\n        \"200\":\n          description: Ok\n        \"400\":\n          description: Error when no tenant id found in path or no timeline id\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/timeline/{timeline_id}/get_lsn_by_timestamp:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n      - name: timeline_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    get:\n      description: Get LSN by a timestamp\n      parameters:\n        - name: timestamp\n          in: query\n          required: true\n          schema:\n            type: string\n            format: date-time\n          description: A timestamp to get the LSN\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Error when no tenant id found in path, no timeline id or invalid timestamp\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /v1/tenant/{tenant_id}/attach:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n\n    post:\n      description: Schedules attach operation to happen in the background for given tenant\n      responses:\n        \"202\":\n          description: Tenant attaching scheduled\n        \"400\":\n          description: Error when no tenant id found in path parameters\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"404\":\n          description: Timeline not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NotFoundError\"\n        \"409\":\n          description: Tenant download is already in progress\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/detach:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    post:\n      description: |\n        Remove tenant data (including all corresponding timelines) from pageserver's memory and file system.\n        Files on the remote storage are not affected.\n      responses:\n        \"200\":\n          description: Tenant detached\n        \"400\":\n          description: Error when no tenant id found in path parameters\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/ignore:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    post:\n      description: |\n        Remove tenant data (including all corresponding timelines) from pageserver's memory.\n        Files on local disk and remote storage are not affected.\n\n        Future pageserver restarts won't load the data back until `load` is called on such tenant.\n      responses:\n        \"200\":\n          description: Tenant ignored\n        \"400\":\n          description: Error when no tenant id found in path parameters\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/load:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    post:\n      description: |\n        Schedules an operation that attempts to load a tenant from the local disk and\n        synchronise it with the remote storage (if enabled), repeating pageserver's restart logic for tenant load.\n        If the tenant was ignored before, removes the ignore mark and continues with load scheduling.\n\n        Errors if the tenant is absent on disk, already present in memory or fails to schedule its load.\n        Scheduling a load does not mean that the tenant would load successfully, check tenant status to ensure load correctness.\n      responses:\n        \"202\":\n          description: Tenant scheduled to load successfully\n        \"400\":\n          description: Error when no tenant id found in path parameters\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/size:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    get:\n      description: |\n        Calculate tenant's size, which is a mixture of WAL (bytes) and logical_size (bytes).\n      responses:\n        \"200\":\n          description: OK,\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - id\n                  - size\n                properties:\n                  id:\n                    type: string\n                    format: hex\n                  size:\n                    type: integer\n                    description: |\n                      Size metric in bytes.\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /v1/tenant/{tenant_id}/timeline/:\n    parameters:\n      - name: tenant_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: hex\n    post:\n      description: |\n        Create a timeline. Returns new timeline id on success.\\\n        If no new timeline id is specified in parameters, it would be generated. It's an error to recreate the same timeline.\n        If no pg_version is specified, assume DEFAULT_PG_VERSION hardcoded in the pageserver.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                new_timeline_id:\n                  type: string\n                  format: hex\n                ancestor_timeline_id:\n                  type: string\n                  format: hex\n                ancestor_start_lsn:\n                  type: string\n                  format: hex\n                pg_version:\n                  type: integer\n      responses:\n        \"201\":\n          description: TimelineInfo\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TimelineInfo\"\n        \"400\":\n          description: Malformed timeline create request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"409\":\n          description: Timeline already exists, creation skipped\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /v1/tenant/:\n    get:\n      description: Get tenants list\n      responses:\n        \"200\":\n          description: TenantInfo\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TenantInfo\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      description: |\n        Create a tenant. Returns new tenant id on success.\\\n        If no new tenant id is specified in parameters, it would be generated. It's an error to recreate the same tenant.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TenantCreateInfo\"\n      responses:\n        \"201\":\n          description: New tenant created successfully\n          content:\n            application/json:\n              schema:\n                type: string\n                format: hex\n        \"400\":\n          description: Malformed tenant create request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"409\":\n          description: Tenant already exists, creation skipped\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConflictError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /v1/tenant/config:\n    put:\n      description: |\n        Update tenant's config.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TenantConfigInfo\"\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TenantInfo\"\n        \"400\":\n          description: Malformed tenant config request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n        \"401\":\n          description: Unauthorized Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UnauthorizedError\"\n        \"403\":\n          description: Forbidden Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ForbiddenError\"\n        \"500\":\n          description: Generic operation error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  securitySchemes:\n    JWT:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    TenantInfo:\n      type: object\n      required:\n        - id\n        - state\n      properties:\n        id:\n          type: string\n        state:\n          type: string\n        current_physical_size:\n          type: integer\n        has_in_progress_downloads:\n          type: boolean\n    TenantCreateInfo:\n      type: object\n      properties:\n        new_tenant_id:\n          type: string\n          format: hex\n        tenant_id:\n          type: string\n          format: hex\n        gc_period:\n          type: string\n        gc_horizon:\n          type: integer\n        pitr_interval:\n          type: string\n        checkpoint_distance:\n          type: integer\n        checkpoint_timeout:\n          type: string\n        compaction_period:\n          type: string\n        compaction_threshold:\n          type: string\n    TenantConfigInfo:\n      type: object\n      properties:\n        tenant_id:\n          type: string\n          format: hex\n        gc_period:\n          type: string\n        gc_horizon:\n          type: integer\n        pitr_interval:\n          type: string\n        checkpoint_distance:\n          type: integer\n        checkpoint_timeout:\n          type: string\n        compaction_period:\n          type: string\n        compaction_threshold:\n          type: string\n    TimelineInfo:\n      type: object\n      required:\n        - timeline_id\n        - tenant_id\n        - last_record_lsn\n        - disk_consistent_lsn\n        - state\n        - latest_gc_cutoff_lsn\n      properties:\n        timeline_id:\n          type: string\n          format: hex\n        tenant_id:\n          type: string\n          format: hex\n        last_record_lsn:\n          type: string\n          format: hex\n        disk_consistent_lsn:\n          type: string\n          format: hex\n        remote_consistent_lsn:\n          type: string\n          format: hex\n        ancestor_timeline_id:\n          type: string\n          format: hex\n        ancestor_lsn:\n          type: string\n          format: hex\n        prev_record_lsn:\n          type: string\n          format: hex\n        current_logical_size:\n          type: integer\n        current_physical_size:\n          type: integer\n        wal_source_connstr:\n          type: string\n        last_received_msg_lsn:\n          type: string\n          format: hex\n        last_received_msg_ts:\n          type: integer\n        state:\n          type: string\n        latest_gc_cutoff_lsn:\n          type: string\n          format: hex\n    Error:\n      type: object\n      required:\n        - msg\n      properties:\n        msg:\n          type: string\n    UnauthorizedError:\n      type: object\n      required:\n        - msg\n      properties:\n        msg:\n          type: string\n    ForbiddenError:\n      type: object\n      required:\n        - msg\n      properties:\n        msg:\n          type: string\n    NotFoundError:\n      type: object\n      required:\n        - msg\n      properties:\n        msg:\n          type: string\n    ConflictError:\n      type: object\n      required:\n        - msg\n      properties:\n        msg:\n          type: string\n\nsecurity:\n  - JWT: []\n",
			"canonicalURL": "/github.com/neondatabase/neon@42c6ddef8edcd1e0dae8cba5a4c8c1f2b3d70589/-/blob/pageserver/src/http/openapi_spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/neondatabase/neon/blob/42c6ddef8edcd1e0dae8cba5a4c8c1f2b3d70589/pageserver/src/http/openapi_spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at pageserver/src/http/openapi_spec.yml:10:10: server URL must not be empty"
}