{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ioggstream/python-course"
		},
		"file": {
			"name": "ex-03-02-path-ok.yaml",
			"size": 0,
			"path": "connexion-101/notebooks/oas3/ex-03-02-path-ok.yaml",
			"byteSize": 2179,
			"content": "# Complete this file with the required informations\n#  using your swagger-editor. You should\n# - fix all the eventual error\n# - add the missing parameters\n# so that the file become a valid OAS3 spec.\nopenapi: 3.0.0\ninfo:\n  title: Status API\n  version: \"0.1\"\n\n# One or more server\n#   You can add production, staging and test environments.\n#   We are using the custom `x-sandbox` to identify\n#   sandbox instances\nservers:\n  - description: Development server\n    url: https://localhost:8443/datetime/v1\n  - description: Test server\n    url: https://api.example.com/datetime/v1\n    x-sandbox: true\n    # The following custom parameter can be used\n    # to declare how to check the API.\n    x-healthCheck:\n      url: https://api.example.com/datetime/v1/status\n      interval: 300\n      timeout: 15\n\n#\n# Complete the /status path\n#\npaths:\n  /status:\n    get:\n      summary: Return the application status.\n      description: |\n        Return the application status.\n        The returned object is always a problem+json.\n        Implement this so that it randomically\n        returns an error (eg. 429 or 503)\n        for testing purposes.\n      operationId: api.get_status\n      responses:\n        '200':\n          description: |\n            The application is working properly.\n          content:\n            application/problem+json:\n              schema:\n                $ref: \"#/components/schemas/Problem\"\n              example:\n                title: OK\n                status: 200\n                detail: The app is running smoothly.\n\n        'default':  # EXERCIS SOLUTION, REMOVE\n          description: |\n            If none of the above statuses is returned, then this applies:\n            the application is not working properly.\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Problem'\n              example:\n                title: Internal Server Errror\n                status: 500\n                detail: API is not responding correctly\n\ncomponents:\n  schemas:\n    Problem:  # EXERCIS SOLUTION, REMOVE\n      $ref: 'https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/schemas/Problem'\n"
		}
	},
	"Error": "parse: parse spec: paths: /status: get: operation \"api.get_status\": responses: default: content: \"application/problem+json\": schema: parse schema: reference \"#/components/schemas/Problem\": parse schema: reference \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/schemas/Problem\": resolve reference \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/schemas/Problem\": invalid schema reference \"https://teamdigitale.github.io/openapi/0.0.5/definitions.yaml#/schemas/Problem\""
}