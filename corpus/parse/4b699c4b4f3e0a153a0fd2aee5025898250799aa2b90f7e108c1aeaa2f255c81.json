{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Unmanic/unmanic"
		},
		"file": {
			"name": "api_schema_v2.yaml",
			"size": 0,
			"path": "unmanic/webserver/docs/api_schema_v2.yaml",
			"byteSize": 125703,
			"content": "components:\n  schemas:\n    BadEndpoint:\n      properties:\n        error:\n          description: Return status code and reason\n          example: '404: Endpoint not found'\n          type: string\n      required:\n      - error\n      type: object\n    BadMethod:\n      properties:\n        error:\n          description: Return status code and reason\n          example: '405: Method ''GET'' not allowed'\n          type: string\n      required:\n      - error\n      type: object\n    BadRequest:\n      properties:\n        error:\n          description: Return status code and reason\n          example: '400: Failed request schema validation'\n          type: string\n        messages:\n          description: Attached request body validation errors\n          example: \u0026id001\n            name:\n            - The thing that went wrong.\n          type: object\n        traceback:\n          description: Attached exception traceback (if developer mode is enabled)\n          example: \u0026id002\n          - 'Traceback (most recent call last):\n\n            '\n          - '...'\n          - 'json.decoder.JSONDecodeError: Expecting value: line 3 column 14 (char\n            45)\n\n            '\n          items:\n            type: string\n          type: array\n      required:\n      - error\n      - messages\n      type: object\n    BaseSuccess:\n      properties:\n        success:\n          description: This is always \"True\" when a request succeeds\n          example: true\n          type: boolean\n      required:\n      - success\n      type: object\n    CompletedTasks:\n      properties:\n        recordsTotal:\n          description: Total number of records in this table\n          example: 329\n          type: integer\n        recordsFiltered:\n          default: 10\n          description: Total number of records after filters have been applied\n          example: 10\n          type: integer\n        results:\n          description: Results\n          items:\n            $ref: '#/components/schemas/CompletedTasksTableResults'\n          minItems: 0\n          type: array\n        successCount:\n          description: Total count of times with a success status in the results list\n          example: 337\n          type: integer\n        failedCount:\n          description: Total count of times with a failed status in the results list\n          example: 2\n          type: integer\n      required:\n      - failedCount\n      - results\n      - successCount\n      type: object\n    CompletedTasksLog:\n      properties:\n        command_log:\n          description: Long string...\n          example: Long string...\n          type: string\n        command_log_lines:\n          description: The long string broken up into an array of lines\n          example:\n          - ''\n          - '\u003cb\u003eRUNNER: \u003c/b\u003e'\n          - 'Video Encoder H264 - libx264 [Pass #1]'\n          - ''\n          - \u003cb\u003eCOMMAND:\u003c/b\u003e\n          - ''\n          - '...'\n          items:\n            type: string\n          type: array\n      required:\n      - command_log\n      - command_log_lines\n      type: object\n    CompletedTasksLogRequest:\n      properties:\n        task_id:\n          description: The ID of the task\n          example: 1\n          type: integer\n      required:\n      - task_id\n      type: object\n    CompletedTasksTableResults:\n      properties:\n        id:\n          description: Item ID\n          example: 1\n          type: integer\n        task_label:\n          description: Item label\n          example: example.mp4\n          type: string\n        task_success:\n          description: Item success status\n          example: true\n          type: boolean\n        finish_time:\n          description: Item finish time\n          example: 1627392616.6400812\n          type: integer\n      required:\n      - finish_time\n      - id\n      - task_label\n      - task_success\n      type: object\n    DirectoryListingResults:\n      properties:\n        directories:\n          description: A list of directories in the given path\n          example:\n          - label: /home\n            value: home\n          - label: /tmp\n            value: tmp\n          items:\n            type: object\n          minItems: 0\n          type: array\n        files:\n          description: A list of files in the given path\n          example:\n          - label: /file1.txt\n            value: file1.txt\n          - label: /file2.txt\n            value: file2.txt\n          items:\n            type: object\n          minItems: 0\n          type: array\n      required:\n      - directories\n      - files\n      type: object\n    DocumentContentSuccess:\n      properties:\n        content:\n          description: Document contents read line-by-line into a list\n          example:\n          - 'First line\n\n            '\n          - 'Second line\n\n            '\n          - '\n\n            '\n          items:\n            type: string\n          minItems: 1\n          type: array\n      required:\n      - content\n      type: object\n    InternalError:\n      properties:\n        error:\n          description: Return status code and reason\n          example: '500: Caught exception message'\n          type: string\n        messages:\n          description: Attached request body validation errors\n          example: *id001\n          type: object\n        traceback:\n          description: Attached exception traceback (if developer mode is enabled)\n          example: *id002\n          items:\n            type: string\n          type: array\n      required:\n      - error\n      - messages\n      type: object\n    LibraryResults:\n      properties:\n        id:\n          description: ''\n          example: 1\n          type: integer\n        name:\n          description: The name of the library\n          example: Default\n          type: string\n        path:\n          description: The library path\n          example: /library\n          type: string\n        locked:\n          description: If the library is locked and cannot be deleted\n          example: false\n          type: boolean\n        enable_remote_only:\n          description: If the library is configured for remote files only\n          example: false\n          type: boolean\n        enable_scanner:\n          description: If the library is configured to execute library scans\n          example: false\n          type: boolean\n        enable_inotify:\n          description: If the library is configured to monitor for file changes\n          example: false\n          type: boolean\n        tags:\n          description: A list of tags associated with this library\n          example:\n          - GPU\n          - priority\n          items:\n            type: string\n          type: array\n      required:\n      - enable_inotify\n      - enable_remote_only\n      - enable_scanner\n      - id\n      - locked\n      - name\n      - path\n      - tags\n      type: object\n    PendingTasks:\n      properties:\n        recordsTotal:\n          description: Total number of records in this table\n          example: 329\n          type: integer\n        recordsFiltered:\n          default: 10\n          description: Total number of records after filters have been applied\n          example: 10\n          type: integer\n        results:\n          description: Results\n          items:\n            $ref: '#/components/schemas/PendingTasksTableResults'\n          minItems: 0\n          type: array\n      required:\n      - results\n      type: object\n    PendingTasksTableResults:\n      properties:\n        id:\n          description: Item ID\n          example: 1\n          type: integer\n        abspath:\n          description: File absolute path\n          example: example.mp4\n          type: string\n        priority:\n          description: The current priority (higher is greater)\n          example: 100\n          type: integer\n        type:\n          description: The type of the pending task - local or remote\n          example: local\n          type: string\n        status:\n          description: The current status of the pending task\n          example: pending\n          type: string\n        checksum:\n          description: The uploaded file md5 checksum\n          example: 5425ab3df5cdbad2e1099bb4cb963a4f\n          type: string\n        library_id:\n          description: The ID of the library for which this task was created\n          example: 1\n          type: integer\n        library_name:\n          description: The name of the library for which this task was created\n          example: Default\n          type: string\n      required:\n      - abspath\n      - id\n      - priority\n      - status\n      - type\n      type: object\n    PluginFlowDataResults:\n      properties:\n        plugin_id:\n          description: The plugin ID\n          example: encoder_video_h264_nvenc\n          type: string\n        name:\n          description: The plugin name\n          example: Video Encoder H264 - h264_nvenc\n          type: string\n        author:\n          description: The plugin author\n          example: encoder_video_h264_nvenc\n          type: string\n        description:\n          description: The plugin description\n          example: Ensure all video streams are encoded with the H264 codec using\n            the h264_nvenc encoder.\n          type: string\n        version:\n          description: The plugin version\n          example: Josh.5\n          type: string\n        icon:\n          description: The plugin icon\n          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png\n          type: string\n      required:\n      - author\n      - description\n      - icon\n      - name\n      - plugin_id\n      - version\n      type: object\n    PluginReposListResults:\n      properties:\n        repos:\n          description: Results\n          items:\n            $ref: '#/components/schemas/PluginReposMetadataResults'\n          minItems: 0\n          type: array\n      required:\n      - repos\n      type: object\n    PluginReposMetadataResults:\n      properties:\n        id:\n          description: The plugin repo ID\n          example: repository.josh5\n          type: string\n        name:\n          description: The plugin repo name\n          example: Josh.5 Development Plugins for Unmanic\n          type: string\n        icon:\n          description: The plugin repo icon\n          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/icon.png\n          type: string\n        path:\n          description: The plugin repo URL path\n          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/repo/repo.json\n          type: string\n      required:\n      - icon\n      - id\n      - name\n      - path\n      type: object\n    PluginStatus:\n      properties:\n        installed:\n          description: Is the plugin installed\n          example: true\n          type: boolean\n        update_available:\n          description: Does the plugin have an update available\n          example: true\n          type: boolean\n      type: object\n    PluginTypesResults:\n      properties:\n        results:\n          description: List of Plugin Type IDs supported by this installation\n          example:\n          - library_management.file_test\n          - postprocessor.file_move\n          - postprocessor.task_result\n          - worker.process_item\n          items:\n            type: string\n          type: array\n      required:\n      - results\n      type: object\n    PluginsConfigInputItem:\n      properties:\n        key_id:\n          description: The config input base64 encoded key (used for linking keys\n            containing spaces, etc.)\n          example: c8f122656ed2acabde9b57101a4c8ec7\n          type: string\n        key:\n          description: The config input key or name\n          example: downmix_dts_hd_ma\n          type: string\n        value:\n          description: The current value of this config input\n          example: false\n        input_type:\n          description: The config input type\n          example: checkbox\n          type: string\n        label:\n          description: The label used to define this config input\n          example: Downmix DTS-HD Master Audio (max 5.1 channels)?\n          type: string\n        select_options:\n          description: Additional options if the input_type is set to 'select'\n          example:\n          - label: First Option\n            value: first\n          - label: Second Option\n            value: second\n          items:\n            type: object\n          type: array\n        slider_options:\n          description: Additional options if the input_type is set to 'slider'\n          example:\n            max: 8\n            min: 1\n            suffix: M\n          type: object\n        display:\n          description: Should the setting input be displayed (visible, hidden)\n          example: visible\n          type: string\n      required:\n      - display\n      - input_type\n      - key\n      - key_id\n      - label\n      - select_options\n      - slider_options\n      - value\n      type: object\n    PluginsData:\n      properties:\n        recordsTotal:\n          description: Total number of records in this table\n          example: 329\n          type: integer\n        recordsFiltered:\n          default: 10\n          description: Total number of records after filters have been applied\n          example: 10\n          type: integer\n        results:\n          description: Results\n          items:\n            $ref: '#/components/schemas/PluginsTableResults'\n          minItems: 0\n          type: array\n      required:\n      - results\n      type: object\n    PluginsDataPanelTypesData:\n      properties:\n        results:\n          description: Results\n          items:\n            $ref: '#/components/schemas/PluginFlowDataResults'\n          minItems: 0\n          type: array\n      required:\n      - results\n      type: object\n    PluginsInfoResults:\n      properties:\n        plugin_id:\n          description: The plugin ID\n          example: encoder_video_h264_nvenc\n          type: string\n        name:\n          description: The plugin name\n          example: Video Encoder H264 - h264_nvenc\n          type: string\n        author:\n          description: The plugin author\n          example: encoder_video_h264_nvenc\n          type: string\n        description:\n          description: The plugin description\n          example: Ensure all video streams are encoded with the H264 codec using\n            the h264_nvenc encoder.\n          type: string\n        version:\n          description: The plugin version\n          example: Josh.5\n          type: string\n        icon:\n          description: The plugin icon\n          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png\n          type: string\n        tags:\n          description: The plugin tags\n          example: video,encoder,ffmpeg,worker,nvenc,nvdec,nvidia\n          type: string\n        status:\n          allOf:\n          - $ref: '#/components/schemas/PluginStatus'\n          description: The plugin status\n        changelog:\n          description: The plugin changelog\n          example: \"[b][color=56adda]0.0.1[/color][/b]\\u2022 initial version\"\n          type: string\n        has_config:\n          description: The plugin has the ability to be configured\n          example: true\n          type: boolean\n        settings:\n          description: The plugin settings\n          items:\n            $ref: '#/components/schemas/PluginsConfigInputItem'\n          type: array\n      required:\n      - author\n      - description\n      - icon\n      - name\n      - plugin_id\n      - status\n      - tags\n      - version\n      type: object\n    PluginsInstallableResults:\n      properties:\n        plugins:\n          description: Results\n          items:\n            $ref: '#/components/schemas/PluginsMetadataInstallableResults'\n          minItems: 0\n          type: array\n      required:\n      - plugins\n      type: object\n    PluginsMetadataInstallableResults:\n      properties:\n        plugin_id:\n          description: The plugin ID\n          example: encoder_video_h264_nvenc\n          type: string\n        name:\n          description: The plugin name\n          example: Video Encoder H264 - h264_nvenc\n          type: string\n        author:\n          description: The plugin author\n          example: encoder_video_h264_nvenc\n          type: string\n        description:\n          description: The plugin description\n          example: Ensure all video streams are encoded with the H264 codec using\n            the h264_nvenc encoder.\n          type: string\n        version:\n          description: The plugin version\n          example: Josh.5\n          type: string\n        icon:\n          description: The plugin icon\n          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png\n          type: string\n        tags:\n          description: The plugin tags\n          example: video,encoder,ffmpeg,worker,nvenc,nvdec,nvidia\n          type: string\n        status:\n          allOf:\n          - $ref: '#/components/schemas/PluginStatus'\n          description: The plugin status\n        changelog:\n          description: The plugin changelog\n          example: \"[b][color=56adda]0.0.1[/color][/b]\\u2022 initial version\"\n          type: string\n        has_config:\n          description: The plugin has the ability to be configured\n          example: true\n          type: boolean\n        package_url:\n          description: The plugin package download URL\n          example: https://raw.githubusercontent.com/Unmanic/unmanic-plugins/repo/plugin_id/plugin_id-1.0.0.zip\n          type: string\n        changelog_url:\n          description: The plugin package download URL\n          example: https://raw.githubusercontent.com/Unmanic/unmanic-plugins/repo/plugin_id/changelog.md\n          type: string\n        repo_name:\n          description: The name of the repository that this plugin is in\n          example: Official Repo\n          type: string\n        repo_id:\n          description: The ID of the repository that this plugin is in\n          example: '158899500680826593283708490873332175078'\n          type: string\n      required:\n      - author\n      - description\n      - icon\n      - name\n      - plugin_id\n      - status\n      - tags\n      - version\n      type: object\n    PluginsTableResults:\n      properties:\n        plugin_id:\n          description: The plugin ID\n          example: encoder_video_h264_nvenc\n          type: string\n        name:\n          description: The plugin name\n          example: Video Encoder H264 - h264_nvenc\n          type: string\n        author:\n          description: The plugin author\n          example: encoder_video_h264_nvenc\n          type: string\n        description:\n          description: The plugin description\n          example: Ensure all video streams are encoded with the H264 codec using\n            the h264_nvenc encoder.\n          type: string\n        version:\n          description: The plugin version\n          example: Josh.5\n          type: string\n        icon:\n          description: The plugin icon\n          example: https://raw.githubusercontent.com/Josh5/unmanic-plugins/master/source/encoder_video_h264_nvenc/icon.png\n          type: string\n        tags:\n          description: The plugin tags\n          example: video,encoder,ffmpeg,worker,nvenc,nvdec,nvidia\n          type: string\n        status:\n          allOf:\n          - $ref: '#/components/schemas/PluginStatus'\n          description: The plugin status\n        changelog:\n          description: The plugin changelog\n          example: \"[b][color=56adda]0.0.1[/color][/b]\\u2022 initial version\"\n          type: string\n        has_config:\n          description: The plugin has the ability to be configured\n          example: true\n          type: boolean\n        id:\n          description: Item table ID\n          example: 1\n          type: integer\n      required:\n      - author\n      - description\n      - icon\n      - id\n      - name\n      - plugin_id\n      - status\n      - tags\n      - version\n      type: object\n    RequestAddCompletedToPendingTasks:\n      properties:\n        id_list:\n          description: List of table IDs\n          example: \u0026id003 []\n          items:\n            type: integer\n          minItems: 1\n          type: array\n        library_id:\n          default: 0\n          example: 1\n          type: integer\n      required:\n      - id_list\n      type: object\n    RequestDatabaseItemById:\n      properties:\n        id:\n          description: The ID of the table item\n          example: 1\n          type: integer\n      required:\n      - id\n      type: object\n    RequestDirectoryListingData:\n      properties:\n        current_path:\n          default: /\n          example: /\n          type: string\n        list_type:\n          default: all\n          example: directories\n          type: string\n      type: object\n    RequestHistoryTableData:\n      properties:\n        start:\n          default: 0\n          description: Start row number to select from\n          example: 0\n          type: integer\n        length:\n          default: 10\n          description: Number of rows to select\n          example: 10\n          type: integer\n        search_value:\n          default: ''\n          description: String to filter search results by\n          example: items with this text in the value\n          type: string\n        status:\n          default: all\n          description: Filter on the status\n          example: all\n          type: string\n        after:\n          description: Filter entries since datetime\n          example: 2022-04-07 01:45\n          format: date-time\n          nullable: true\n          type: string\n        before:\n          description: Filter entries prior to datetime\n          example: 2022-04-07 01:55\n          format: date-time\n          nullable: true\n          type: string\n        order_by:\n          default: finish_time\n          example: finish_time\n          type: string\n        order_direction:\n          description: Order direction ('asc' or 'desc')\n          enum:\n          - asc\n          - desc\n          example: desc\n          type: string\n      type: object\n    RequestLibraryById:\n      properties:\n        id:\n          description: The ID of the library\n          example: 1\n          type: integer\n      required:\n      - id\n      type: object\n    RequestPendingTableData:\n      properties:\n        start:\n          default: 0\n          description: Start row number to select from\n          example: 0\n          type: integer\n        length:\n          default: 10\n          description: Number of rows to select\n          example: 10\n          type: integer\n        search_value:\n          default: ''\n          description: String to filter search results by\n          example: items with this text in the value\n          type: string\n        status:\n          default: all\n          description: Filter on the status\n          example: all\n          type: string\n        after:\n          description: Filter entries since datetime\n          example: 2022-04-07 01:45\n          format: date-time\n          nullable: true\n          type: string\n        before:\n          description: Filter entries prior to datetime\n          example: 2022-04-07 01:55\n          format: date-time\n          nullable: true\n          type: string\n        order_by:\n          default: priority\n          example: priority\n          type: string\n        order_direction:\n          description: Order direction ('asc' or 'desc')\n          enum:\n          - asc\n          - desc\n          example: desc\n          type: string\n      type: object\n    RequestPendingTaskCreate:\n      properties:\n        path:\n          description: The absolute path to a file\n          example: /library/TEST_FILE.mkv\n          type: string\n        library_id:\n          description: The ID of the library to append this task to\n          example: 1\n          type: integer\n        library_name:\n          description: The name of the library to append this task to\n          example: Default\n          type: string\n        type:\n          description: The type of pending task to create (local/remote)\n          example: local\n          type: string\n        priority_score:\n          description: Apply a priority score to the created task to either increase\n            or decrease its position in the queue\n          example: 1000\n          type: integer\n      required:\n      - path\n      type: object\n    RequestPendingTasksLibraryUpdate:\n      properties:\n        id_list:\n          description: List of table IDs\n          example: *id003\n          items:\n            type: integer\n          minItems: 1\n          type: array\n        library_name:\n          example: Default\n          type: string\n      required:\n      - id_list\n      - library_name\n      type: object\n    RequestPendingTasksReorder:\n      properties:\n        id_list:\n          description: List of table IDs\n          example: *id003\n          items:\n            type: integer\n          minItems: 1\n          type: array\n        position:\n          description: Position to move given list of items to ('top' or 'bottom')\n          enum:\n          - top\n          - bottom\n          example: top\n          type: string\n      required:\n      - id_list\n      - position\n      type: object\n    RequestPluginsById:\n      properties:\n        plugin_id:\n          example: encoder_video_hevc_vaapi\n          type: string\n        repo_id:\n          description: The ID of the repository that this plugin is in\n          example: '158899500680826593283708490873332175078'\n          type: string\n      required:\n      - plugin_id\n      type: object\n    RequestPluginsFlowByPluginType:\n      properties:\n        plugin_type:\n          example: library_management.file_test\n          type: string\n        library_id:\n          default: 1\n          example: 1\n          type: integer\n      required:\n      - plugin_type\n      type: object\n    RequestPluginsInfo:\n      properties:\n        plugin_id:\n          example: encoder_video_hevc_vaapi\n          type: string\n        repo_id:\n          description: The ID of the repository that this plugin is in\n          example: '158899500680826593283708490873332175078'\n          type: string\n        prefer_local:\n          default: true\n          example: true\n          type: boolean\n        library_id:\n          default: 0\n          example: 1\n          type: integer\n      required:\n      - plugin_id\n      type: object\n    RequestPluginsSettingsReset:\n      properties:\n        plugin_id:\n          example: encoder_video_hevc_vaapi\n          type: string\n        library_id:\n          default: 0\n          example: 1\n          type: integer\n      required:\n      - plugin_id\n      type: object\n    RequestPluginsSettingsSave:\n      properties:\n        plugin_id:\n          example: encoder_video_hevc_vaapi\n          type: string\n        settings:\n          description: The plugin settings\n          items:\n            $ref: '#/components/schemas/PluginsConfigInputItem'\n          type: array\n        library_id:\n          default: 0\n          example: 1\n          type: integer\n      required:\n      - plugin_id\n      - settings\n      type: object\n    RequestPluginsTableData:\n      properties:\n        start:\n          default: 0\n          description: Start row number to select from\n          example: 0\n          type: integer\n        length:\n          default: 10\n          description: Number of rows to select\n          example: 10\n          type: integer\n        search_value:\n          default: ''\n          description: String to filter search results by\n          example: items with this text in the value\n          type: string\n        status:\n          default: all\n          description: Filter on the status\n          example: all\n          type: string\n        after:\n          description: Filter entries since datetime\n          example: 2022-04-07 01:45\n          format: date-time\n          nullable: true\n          type: string\n        before:\n          description: Filter entries prior to datetime\n          example: 2022-04-07 01:55\n          format: date-time\n          nullable: true\n          type: string\n        order_by:\n          default: name\n          example: name\n          type: string\n        order_direction:\n          description: Order direction ('asc' or 'desc')\n          enum:\n          - asc\n          - desc\n          example: desc\n          type: string\n      type: object\n    RequestRemoteInstallationLinkConfig:\n      properties:\n        uuid:\n          description: The uuid of the remote installation\n          example: 7cd35429-76ab-4a29-8649-8c91236b5f8b\n          type: string\n      required:\n      - uuid\n      type: object\n    RequestSavingPluginsFlowByPluginType:\n      properties:\n        plugin_type:\n          example: library_management.file_test\n          type: string\n        library_id:\n          default: 1\n          example: 1\n          type: integer\n        plugin_flow:\n          description: Saved flow\n          items:\n            $ref: '#/components/schemas/PluginFlowDataResults'\n          minItems: 1\n          type: array\n      required:\n      - plugin_flow\n      - plugin_type\n      type: object\n    RequestSettingsRemoteInstallationAddressValidation:\n      properties:\n        address:\n          description: The address of the remote installation\n          example: 192.168.1.2:8888\n          type: string\n        auth:\n          description: Authentication type\n          example: Basic\n          nullable: true\n          type: string\n        username:\n          description: An optional username\n          example: foo\n          nullable: true\n          type: string\n        password:\n          description: An optional password\n          example: bar\n          nullable: true\n          type: string\n      required:\n      - address\n      type: object\n    RequestTableUpdateByIdList:\n      properties:\n        id_list:\n          description: List of table IDs\n          example: *id003\n          items:\n            type: integer\n          minItems: 1\n          type: array\n      required:\n      - id_list\n      type: object\n    RequestUpdatePluginReposList:\n      properties:\n        repos_list:\n          description: A list of repost to save\n          example:\n          - https://raw.githubusercontent.com/Josh5/unmanic-plugins/repo/repo.json\n          items:\n            type: string\n          minItems: 0\n          type: array\n      required:\n      - repos_list\n      type: object\n    RequestWorkerById:\n      properties:\n        worker_id:\n          example: '1'\n          type: string\n      required:\n      - worker_id\n      type: object\n    SessionStateSuccess:\n      properties:\n        level:\n          description: User level\n          example: 0\n          type: integer\n        picture_uri:\n          description: User picture\n          example: https://c8.patreon.com/2/200/561356054\n          type: string\n        name:\n          description: User name\n          example: ExampleUsername123\n          type: string\n        email:\n          description: User email\n          example: example@gmail.com\n          type: string\n        created:\n          description: Session time created\n          example: 1627793093.676484\n          type: number\n        uuid:\n          description: Installation uuid\n          example: b429fcc7-9ce1-bcb3-2b8a-b094747f226e\n          type: string\n      required:\n      - level\n      - uuid\n      type: object\n    SettingsLibrariesList:\n      properties:\n        libraries:\n          description: Results\n          items:\n            $ref: '#/components/schemas/LibraryResults'\n          minItems: 1\n          type: array\n      required:\n      - libraries\n      type: object\n    SettingsLibraryConfigReadAndWrite:\n      properties:\n        library_config:\n          description: The library configuration\n          example:\n            enable_inotify: false\n            enable_scanner: false\n            id: 1\n            name: Default\n            path: /library\n            priority_score: 0\n            tags: []\n          type: object\n        plugins:\n          description: The library's enabled plugins\n          example:\n            enabled_plugins:\n            - description: Notify Plex on completion of a task.\n              icon: https://raw.githubusercontent.com/Josh5/unmanic.plugin.notify_plex/master/icon.png\n              library_id: 1\n              name: Notify Plex\n              plugin_id: notify_plex\n          type: object\n      required:\n      - library_config\n      type: object\n    SettingsLibraryPluginConfigExport:\n      properties:\n        plugins:\n          description: The library's enabled plugins\n          example: \u0026id004\n            enabled_plugins:\n            - description: Ensure all audio streams are encoded with the AC3 codec\n                using the native FFmpeg ac3 encoder.\n              icon: https://raw.githubusercontent.com/Josh5/unmanic.plugin.encoder_audio_ac3/master/icon.png\n              library_id: 1\n              name: Audio Encoder AC3\n              plugin_id: encoder_audio_ac3\n            plugin_flow:\n              library_management.file_test:\n              - author: Josh.5\n                description: Ensure all audio streams are encoded with the AC3 codec\n                  using the native FFmpeg ac3 encoder.\n                icon: https://raw.githubusercontent.com/Josh5/unmanic.plugin.encoder_audio_ac3/master/icon.png\n                name: Audio Encoder AC3\n                plugin_id: encoder_audio_ac3\n                version: 0.0.2\n              postprocessor.file_move: []\n              postprocessor.task_result: []\n              worker.process_item:\n              - author: Josh.5\n                description: Ensure all audio streams are encoded with the AC3 codec\n                  using the native FFmpeg ac3 encoder.\n                icon: https://raw.githubusercontent.com/Josh5/unmanic.plugin.encoder_audio_ac3/master/icon.png\n                name: Audio Encoder AC3\n                plugin_id: encoder_audio_ac3\n                version: 0.0.2\n          type: object\n        library_config:\n          description: The library configuration\n          example: \u0026id005\n            enable_inotify: false\n            enable_scanner: false\n            id: 1\n            name: Default\n            path: /library\n            priority_score: 0\n            tags: []\n          type: object\n      required:\n      - plugins\n      type: object\n    SettingsLibraryPluginConfigImport:\n      properties:\n        plugins:\n          description: The library's enabled plugins\n          example: *id004\n          type: object\n        library_config:\n          description: The library configuration\n          example: *id005\n          type: object\n        library_id:\n          example: 1\n          type: integer\n      required:\n      - library_id\n      - plugins\n      type: object\n    SettingsReadAndWrite:\n      properties:\n        settings:\n          description: The current settings\n          example:\n            cache_path: /tmp/unmanic\n            debugging: false\n            enable_library_scanner: false\n            follow_symlinks: true\n            library_path: /library\n            run_full_scan_on_start: false\n            schedule_full_scan_minutes: 1440\n            ui_port: 8888\n          type: object\n      required:\n      - settings\n      type: object\n    SettingsRemoteInstallationData:\n      properties:\n        installation:\n          description: The data from the remote installation\n          example: {}\n          type: object\n      required:\n      - installation\n      type: object\n    SettingsRemoteInstallationLinkConfig:\n      properties:\n        link_config:\n          description: The configuration for the remote installation link\n          example:\n            address: 10.0.0.2:8888\n            auth: None\n            available: true\n            enable_checksum_validation: false\n            enable_config_missing_libraries: false\n            enable_distributed_worker_count: false\n            enable_receiving_tasks: false\n            enable_sending_tasks: false\n            enable_task_preloading: true\n            last_updated: 1636166593.013826\n            name: API schema generated\n            password: ''\n            preloading_count: 2\n            username: ''\n            version: 0.1.3\n          type: object\n        distributed_worker_count_target:\n          description: The target count of workers to be distributed across any configured\n            linked installations\n          example: 4\n          type: integer\n      required:\n      - link_config\n      type: object\n    SettingsSystemConfig:\n      properties:\n        configuration:\n          description: The current system configuration\n          example: {}\n          type: object\n      required:\n      - configuration\n      type: object\n    SettingsWorkerGroupConfig:\n      properties:\n        id:\n          description: ''\n          example: 1\n          nullable: true\n          type: integer\n        locked:\n          description: If the worker group is locked and cannot be deleted\n          example: false\n          type: boolean\n        name:\n          description: The name of the worker group\n          example: Default Group\n          type: string\n        number_of_workers:\n          description: The number of workers in this group\n          example: 3\n          type: integer\n        worker_event_schedules:\n          description: Any scheduled evenets for this worker group\n          items:\n            $ref: '#/components/schemas/WorkerEventScheduleResults'\n          minItems: 0\n          type: array\n        tags:\n          description: A list of tags associated with this worker\n          example:\n          - GPU\n          - priority\n          items:\n            type: string\n          type: array\n      required:\n      - id\n      - locked\n      - name\n      - number_of_workers\n      - tags\n      - worker_event_schedules\n      type: object\n    TaskDownloadLink:\n      properties:\n        link_id:\n          description: The ID used to download the file /unmanic/downloads/{link_id}\n          example: 2960645c-a4e2-4b05-8866-7bd469ee9ef8\n          type: string\n      required:\n      - link_id\n      type: object\n    VersionReadSuccess:\n      properties:\n        version:\n          description: Application version\n          example: 1.0.0\n          type: string\n      required:\n      - version\n      type: object\n    WorkerEventScheduleResults:\n      properties:\n        repetition:\n          description: ''\n          example: daily\n          type: string\n        schedule_task:\n          description: The type of task. ['count', 'pause', 'resume']\n          example: count\n          type: string\n        schedule_time:\n          description: ''\n          example: The time when the task should be executed on\n          type: string\n        schedule_worker_count:\n          description: The worker count to set (only valid if schedule_task is count)\n          example: 4\n          type: integer\n      required:\n      - repetition\n      - schedule_task\n      - schedule_time\n      type: object\n    WorkerGroupsList:\n      properties:\n        worker_groups:\n          description: Results\n          items:\n            $ref: '#/components/schemas/SettingsWorkerGroupConfig'\n          minItems: 0\n          type: array\n      required:\n      - worker_groups\n      type: object\n    WorkerStatusResults:\n      properties:\n        id:\n          description: ''\n          example: W0\n          type: string\n        name:\n          description: ''\n          example: Worker-W0\n          type: string\n        idle:\n          description: Flag - is worker idle\n          example: true\n          type: boolean\n        paused:\n          description: Flag - is worker paused\n          example: false\n          type: boolean\n        start_time:\n          description: The time when this worker started processing a task\n          example: '1635746377.0021548'\n          nullable: true\n          type: string\n        current_file:\n          description: The basename of the file currently being processed\n          example: file.mp4\n          type: string\n        current_task:\n          description: The Task ID\n          example: 1\n          nullable: true\n          type: integer\n        worker_log_tail:\n          description: The log lines produced by the worker\n          example:\n          - \"\\n\\nRUNNER: \\nRemux Video Files [Pass #1]\\n\\n\"\n          - '\n\n            Executing plugin runner... Please wait'\n          - '\n\n            Runner did not request to execute a command'\n          - '\n\n\n            No Plugin requested to run commands for this file ''/tmp/unmanic/unmanic_remote_pending_library-1635746225.3336523/file.mp4'''\n          items:\n            type: string\n          minItems: 0\n          type: array\n        runners_info:\n          description: The status of the plugin runner currently processing the file\n          example:\n            video_remuxer:\n              author: Josh.5\n              description: Remux a video file to the configured container\n              icon: https://raw.githubusercontent.com/Josh5/unmanic.plugin.video_remuxer/master/icon.png\n              name: Remux Video Files\n              plugin_id: video_remuxer\n              status: complete\n              success: true\n              version: 0.0.5\n          type: object\n        subprocess:\n          description: The status of the process currently being executed\n          example:\n            elapsed: None\n            percent: None\n            pid: 140408939493120\n          type: object\n      required:\n      - current_file\n      - current_task\n      - id\n      - idle\n      - name\n      - paused\n      - runners_info\n      - start_time\n      - subprocess\n      - worker_log_tail\n      type: object\n    WorkerStatusSuccess:\n      properties:\n        workers_status:\n          description: Results\n          items:\n            $ref: '#/components/schemas/WorkerStatusResults'\n          minItems: 0\n          type: array\n      required:\n      - workers_status\n      type: object\n  securitySchemes:\n    BasicAuth:\n      scheme: basic\n      type: http\ninfo:\n  description: Documentation for the Unmanic application API\n  title: Unmanic API\n  version: '2'\nopenapi: 3.0.0\npaths:\n  /docs/privacypolicy:\n    get:\n      description: Returns the privacy policy.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DocumentContentSuccess'\n          description: 'Sample response: Returns the privacy policy.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /docs/logs/zip:\n    get:\n      description: Returns the all log files as zip.\n      responses:\n        '200':\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: 'Sample response: Returns the all log files as zip.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /filebrowser/list:\n    post:\n      description: Returns a list of files and/or subdirectories in a given directory.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestDirectoryListingData'\n        description: Requested a list of files and/or subdirectories in a given directory.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DirectoryListingResults'\n          description: 'Sample response: Returns a list of files and/or subdirectories\n            in a given directory.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /history/tasks:\n    post:\n      description: Returns a list of completed tasks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestHistoryTableData'\n        description: Returns a list of completed tasks.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompletedTasks'\n          description: 'Sample response: Returns a list of completed tasks.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n    delete:\n      description: Delete a list of completed tasks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Requested list of items to delete.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /history/reprocess:\n    post:\n      description: Add a list of completed tasks back to the Pending Tasks queue.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestAddCompletedToPendingTasks'\n        description: Requested list of items to reprocess.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /history/task/log:\n    post:\n      description: Request the details of a completed task.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompletedTasksLogRequest'\n        description: Requested the details of a completed task.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompletedTasksLog'\n          description: 'Success: The details of a requested completed task.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/tasks:\n    post:\n      description: Returns a list of pending tasks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPendingTableData'\n        description: Returns a list of pending tasks.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PendingTasks'\n          description: 'Sample response: Returns a list of pending tasks.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n    delete:\n      description: Delete a list of pending tasks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Requested list of items to delete.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/rescan:\n    post:\n      description: Triggers a library scan.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/reorder:\n    post:\n      description: Reorder a list of pending tasks.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPendingTasksReorder'\n        description: Requested list of items to reorder.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/create:\n    post:\n      description: Create a new pending tasks from an absolute path\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPendingTaskCreate'\n        description: Specify path and library to create a pending tasks from.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PendingTasksTableResults'\n          description: Successful request; Returns data for the generated task\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/library/update:\n    post:\n      description: Set the library of a list of created tasks who's status has not\n        yet been updated.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPendingTasksLibraryUpdate'\n        description: The ID list of the task to update and the Library Name to use.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/status/get:\n    post:\n      description: Set the status of a list of pending tasks\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Set the status of a list of pending tasks.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PendingTasksTableResults'\n          description: 'Sample response: Returns a list of tasks with their status.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/status/set/ready:\n    post:\n      description: Set the status of a list of created pending tasks as ready for\n        processing\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Set the status of a list of created pending tasks as ready for\n          processing.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/download/file/id/{task_id}:\n    get:\n      description: Request a link for downloading a task file\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskDownloadLink'\n          description: Successful request; Returns download link ID\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /pending/download/data/id/{task_id}:\n    get:\n      description: Request a link for downloading a task data\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TaskDownloadLink'\n          description: Successful request; Returns download link ID\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/installed:\n    post:\n      description: Returns a list of installed plugins.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPluginsTableData'\n        description: Requested a list of installed plugins.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginsData'\n          description: 'Sample response: Returns a list of installed plugins.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/enable:\n    post:\n      description: DEPRECATED! Enable a list of plugins.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Requested list of plugins to enable.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/disable:\n    post:\n      description: DEPRECATED! Disable a list of plugins.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Requested list of plugins to disable.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/update:\n    post:\n      description: Update a list of plugins given their DB table IDs.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Requested list of plugins to update.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/remove:\n    delete:\n      description: Remove a list of plugins given their DB table IDs.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestTableUpdateByIdList'\n        description: Requested list of plugins to remove.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/info:\n    post:\n      description: Returns a the metadata and settings of a requested plugin.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPluginsInfo'\n        description: Requested a single plugin's info.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginsInfoResults'\n          description: 'Sample response: Returns a the metadata and settings of a\n            requested plugin.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/settings/update:\n    post:\n      description: Saves the settings of a single plugin.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPluginsSettingsSave'\n        description: Requested a plugins settings be updated.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/settings/reset:\n    post:\n      description: Reset the settings of a single plugin.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPluginsSettingsReset'\n        description: Requested a plugins settings be reset.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/installable:\n    get:\n      description: Returns a list of installable plugins.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginsInstallableResults'\n          description: 'Sample response: Returns a list of installable plugins.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/install:\n    post:\n      description: Installs a plugin by its Plugin ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPluginsById'\n        description: Requested a plugin be installed by its Plugin ID.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/flow:\n    post:\n      description: Returns the plugin flow for a requested plugin type.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestPluginsFlowByPluginType'\n        description: Requests the plugin flow of a given plugin type.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginsInstallableResults'\n          description: 'Sample response: Returns the plugin flow for a requested plugin\n            type.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/flow/types:\n    get:\n      description: Returns a list of all plugin types that have flows.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginTypesResults'\n          description: 'Sample response: Returns a list of all plugin types that have\n            flows.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/flow/save:\n    post:\n      description: Saves the plugin flow for a requested plugin type.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestSavingPluginsFlowByPluginType'\n        description: Requests saving the plugin flow for a given plugin type.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginsInstallableResults'\n          description: 'Sample response: Save the plugin flow for a requested plugin\n            type.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/repos/update:\n    post:\n      description: Updates the plugin repo list.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestUpdatePluginReposList'\n        description: Requested an update to the plugin repo list.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/repos/list:\n    get:\n      description: Returns a list of plugin repos.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginReposListResults'\n          description: 'Sample response: Returns a list of plugin repos.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/repos/reload:\n    post:\n      description: Reload plugin repositories remote data.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /plugins/panels/enabled:\n    get:\n      description: Returns a list of installed plugins.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginsDataPanelTypesData'\n          description: 'Success: Returns a list of installed plugins.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /session/state:\n    get:\n      description: Returns the application session state.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionStateSuccess'\n          description: 'Sample response: Returns the application session state.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /session/reload:\n    post:\n      description: Reload the current session.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/read:\n    get:\n      description: Returns the application settings.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsReadAndWrite'\n          description: 'Sample response: Returns the application settings.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/write:\n    post:\n      description: Save a given dictionary of settings.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SettingsReadAndWrite'\n        description: Requested a dictionary of settings to save.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/configuration:\n    get:\n      description: Returns the system configuration.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsSystemConfig'\n          description: 'Sample response: Returns the system configuration.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/link/validate:\n    post:\n      description: Validate a remote installation address\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestSettingsRemoteInstallationAddressValidation'\n        description: The details of the remote installation to validate\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsRemoteInstallationData'\n          description: 'Sample response: Returns the remote installation data.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/worker_groups:\n    get:\n      description: Returns a list of all worker groups.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkerGroupsList'\n          description: 'Sample response: Returns a list of all worker groups.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/worker_group/read:\n    post:\n      description: Read the configuration of a worker group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestDatabaseItemById'\n        description: The ID of the worker group\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsWorkerGroupConfig'\n          description: 'Sample response: Returns the worker group configuration.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/worker_group/write:\n    post:\n      description: Write the configuration of a worker group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SettingsWorkerGroupConfig'\n        description: The config of a worker group that is to be saved\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/worker_group/remove:\n    delete:\n      description: Remove a worker group\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestDatabaseItemById'\n        description: Requested a worker group to remove.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/link/read:\n    post:\n      description: Read the configuration of a remote installation link\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestRemoteInstallationLinkConfig'\n        description: The UUID of the remote installation\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsRemoteInstallationLinkConfig'\n          description: 'Sample response: Returns the remote installation link configuration.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/link/write:\n    post:\n      description: Write the configuration of a remote installation link\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SettingsRemoteInstallationLinkConfig'\n        description: The UUID of the remote installation and its configuration\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/link/remove:\n    delete:\n      description: Remove a configuration for a remote installation link\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestRemoteInstallationLinkConfig'\n        description: Requested a remote installation link to remove.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/libraries:\n    get:\n      description: Returns a list of all libraries.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsLibrariesList'\n          description: 'Sample response: Returns a list of all libraries.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/library/read:\n    post:\n      description: Read the configuration of one library\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestLibraryById'\n        description: The ID of the library\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsLibraryConfigReadAndWrite'\n          description: 'Sample response: Returns the remote installation link configuration.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/library/write:\n    post:\n      description: Write the configuration of one library\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SettingsLibraryConfigReadAndWrite'\n        description: Requested a dictionary of settings to save.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/library/remove:\n    delete:\n      description: Remove a library\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestLibraryById'\n        description: Requested a library to remove.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/library/export:\n    post:\n      description: Export the plugin configuration of one library\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestLibraryById'\n        description: The ID of the library\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SettingsLibraryPluginConfigExport'\n          description: 'Sample response: Returns the remote installation link configuration.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /settings/library/import:\n    post:\n      description: Import the configuration of one library\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SettingsLibraryPluginConfigImport'\n        description: Requested a dictionary of settings to save.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /upload/pending/file:\n    post:\n      description: Returns a list of pending tasks.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                fileName:\n                  format: binary\n                  type: string\n              type: object\n        description: Returns a list of pending tasks.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PendingTasksTableResults'\n          description: Successful request; Returns data for the generated task\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /version/read:\n    get:\n      description: Returns the application version.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionReadSuccess'\n          description: 'Sample response: Returns the application version.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/worker/pause:\n    post:\n      description: Pauses a worker by its ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestWorkerById'\n        description: Requested a worker be paused by its ID.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/worker/pause/all:\n    post:\n      description: Pause all workers.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/worker/resume:\n    post:\n      description: Resumes a worker by its ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestWorkerById'\n        description: Requested a worker be resumed by its ID.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/worker/resume/all:\n    post:\n      description: Resumes all workers.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/worker/terminate:\n    delete:\n      description: Terminates a worker by its ID.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RequestWorkerById'\n        description: Requested a worker be terminated by its ID.\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/worker/terminate/all:\n    delete:\n      description: Terminate all workers.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BaseSuccess'\n          description: Successful request; Returns success status\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\n  /workers/status:\n    get:\n      description: Returns the status of all workers.\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WorkerStatusSuccess'\n          description: 'Sample response: Returns the status of all workers.'\n        '400':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadRequest'\n          description: Bad request; Check `messages` for any validation errors\n        '404':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadEndpoint'\n          description: Bad request; Requested endpoint not found\n        '405':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/BadMethod'\n          description: Bad request; Requested method is not allowed\n        '500':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InternalError'\n          description: Internal error; Check `error` for exception\nsecurity:\n- BasicAuth: []\nservers:\n- description: Local environment\n  url: http://localhost:8888/unmanic/api/v2/\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /pending/download/data/id/{task_id}: get: parse path \"/pending/download/data/id/{task_id}\": path parameter not specified: \"task_id\""
}