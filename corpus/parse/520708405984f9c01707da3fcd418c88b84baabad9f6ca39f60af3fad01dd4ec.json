{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CSML-by-Clevy/csml-engine"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "csml_server/swagger.yaml",
			"byteSize": 29245,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.8.1\n  title: CSML Engine\n  description: CSML Engine Server API specifications\n  termsOfService: http://csml.dev/terms/\n  contact:\n    name: CSML dev team\n    email: contact@csml.dev\n    url: https://csml.dev\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\nservers:\n  - url: http://localhost:5000\n\npaths:\n  /status:\n    get:\n      description: Get the server status\n      operationId: status\n      tags:\n        - status\n      responses:\n        \"200\":\n          description: Success Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusResponse\"\n        default:\n          description: Error Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /run:\n    post:\n      description: Process an incoming client chat request\n      operationId: run\n      tags:\n        - chat\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - $ref: \"#/components/schemas/RunRequestBot\"\n                - $ref: \"#/components/schemas/RunRequestLatestVersion\"\n                - $ref: \"#/components/schemas/RunRequestSpecificVersion\"\n      responses:\n        \"200\":\n          description: Success Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunResponse\"\n        default:\n          description: Error Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /validate:\n    post:\n      description: Validate a CSML bot\n      operationId: validate\n      tags:\n        - lint\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BotModel\"\n      responses:\n        \"200\":\n          description: Success Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidateResponse\"\n        default:\n          description: Error Response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /bots:\n    post:\n      description: Save a new version of a bot\n      operationId: createBotVersion\n      tags:\n        - bot versioning\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BotModel\"\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NewBotVersionResponse\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /bots/{bot_id}/versions:\n    get:\n      description: Get the last few versions of a bot\n      operationId: getLastBotVersions\n      tags:\n        - bot versioning\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: path\n          description: ID of bot to retrieve\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of versions to retrieve\n          required: false\n          schema:\n            type: integer\n            default: 25\n        - name: pagination_key\n          in: query\n          description: pagination key (if the previous request had susequent results)\n          required: false\n          schema:\n            type: string\n            default: none\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BotVersionsResponse\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /bots/{bot_id}/versions/{version_id}:\n    get:\n      description: Get the requested version\n      operationId: getBotVersion\n      tags:\n        - bot versioning\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: path\n          description: ID of bot\n          required: true\n          schema:\n            type: string\n        - name: version_id\n          in: path\n          description: ID of version\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BotVersionModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n    delete:\n      description: Delete the requested version\n      operationId: deleteBotVersion\n      tags:\n        - bot versioning\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: path\n          description: ID of bot\n          required: true\n          schema:\n            type: string\n        - name: version_id\n          in: path\n          description: ID of version\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /conversations:\n    get:\n      description: Get all past conversations for a client\n      operationId: getConversations\n      tags:\n        - conversations\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ConversationModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /conversations/open:\n    post:\n      description: Get the currently open conversation for the given client, or an empty response if there is none\n      operationId: getOpenConversation\n      tags:\n        - conversations\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientModel\"\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ConversationModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /conversations/close:\n    post:\n      description: Close any open conversation for the given client\n      operationId: closeOpenConversations\n      tags:\n        - conversations\n      security:\n        - ApiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ClientModel\"\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /messages:\n    get:\n      description: Get a client's message history\n      operationId: getMessages\n      tags:\n        - messages\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: limit\n          in: query\n          description: max number of messages to retrieve\n          required: false\n          schema:\n            type: integer\n            default: 25\n        - name: pagination_key\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/StateModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /state:\n    get:\n      description: Get a client's current state\n      operationId: getState\n      tags:\n        - state\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/StateModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /memories:\n    get:\n      description: Get a client's current memories\n      operationId: getMemories\n      tags:\n        - memory\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/MemoryModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      description: Create a new memory for a client\n      operationId: createMemory\n      tags:\n        - memory\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/MemoryModel\"\n      responses:\n        \"201\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MemoryModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      description: Delete all memories for a client\n      operationId: deleteMemories\n      tags:\n        - memory\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /memories/{key}:\n    get:\n      description: Get a given memory for a client\n      operationId: getMemory\n      tags:\n        - memory\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MemoryModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      description: Delete a given memory\n      operationId: deleteMemory\n      tags:\n        - memory\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: key\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /data/clients:\n    delete:\n      description: Delete all the data belonging to a client\n      operationId: deleteClientData\n      security:\n        - ApiKeyAuth: []\n      tags:\n        - data\n      parameters:\n        - name: bot_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: channel_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /data/bots/{bot_id}:\n    delete:\n      description: Delete all the data in a bot\n      operationId: deleteBotData\n      tags:\n        - data\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\n  /bots/{bot_id}:\n    get:\n      description: Get the latest version of a bot\n      operationId: getLatestBotVersion\n      tags:\n        - bot versioning\n      security:\n        - ApiKeyAuth: []\n      parameters:\n        - name: bot_id\n          in: path\n          description: ID of bot to retrieve\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/BotVersionModel\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      security:\n        - ApiKeyAuth: []\n      description: Delete all versions of a bot\n      operationId: deleteBot\n      tags:\n        - bot versioning\n      parameters:\n        - name: bot_id\n          in: path\n          description: ID of bot\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: \"\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-Api-Key\n  schemas:\n    BotModel:\n      type: object\n      required:\n        - id\n        - name\n        - default_flow\n        - flows\n      properties:\n        id:\n          type: string\n          example: MyBotId\n        name:\n          type: string\n          example: MyBot\n        env:\n          type: object\n          example: { \"SOME_KEY\": \"SOME_VALUE\" }\n        modules:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ModuleModel\"\n\n        default_flow:\n          type: string\n          example: Default\n        apps_endpoint:\n          $ref: \"#/components/schemas/AppsEndpoint\"\n        flows:\n          type: array\n          items:\n            $ref: \"#/components/schemas/FlowModel\"\n        no_interruption_delay:\n          type: integer\n          example: 30\n          description: number of seconds after which the user can send a new event while the bot is speaking\n\n    BotVersionModel:\n      allOf:\n        - $ref: \"#/components/schemas/BotModel\"\n        - type: object\n          properties:\n            version_id:\n              type: string\n            engine_version:\n              $ref: \"#/components/schemas/EngineVersion\"\n\n    FlowModel:\n      type: object\n      required:\n        - id\n        - content\n        - commands\n      properties:\n        id:\n          type: string\n          example: \"94c6d714-7cab-4164-9e50-ee80ec866471\"\n        name:\n          type: string\n          example: Default\n        content:\n          type: string\n          example: 'start:\\n  say \"Hello\"\\n  goto end'\n        commands:\n          type: array\n          items:\n            type: string\n            example: \"trigger keyword\"\n\n    ModuleModel:\n      type: object\n      required:\n        - name\n      example: {\"name\": \"buttons\", \"url\": \"https://raw.githubusercontent.com/CSML-by-Clevy/csml-modules/master/modules/buttons.csml\"}\n      properties:\n        name:\n          type: string\n          description: a unique reference name for this module\n        url:\n          type: string\n          description: where this module can be downloaded from. Either url or flow must be present\n        auth:\n          type: string\n          description: \"if the module is hosted on a private repository, the token to use for authentication (`Authorization: Bearer TOKEN` header). Optional\"\n        version:\n          type: string\n          description: a version reference for persistence. Optional\n        flow:\n          $ref: \"#/components/schemas/FlowModel\"\n          description: the content of the module. Either url or flow must be present\n\n    EventModel:\n      type: object\n      required:\n        - client\n        - payload\n      properties:\n        request_id:\n          type: string\n          description: \"Unique identifier for the incoming request. Will be generated if not provided.\"\n          example: \"f5a727c5-a702-4896-bd0d-a45acbae0e22\"\n        client:\n          $ref: \"#/components/schemas/ClientModel\"\n        payload:\n          $ref: \"#/components/schemas/PayloadModel\"\n        metadata:\n          type: object\n          description: Additional metadata about the context of the request. Will be available under the '_metadata' variable in the actual conversation.\n          example: '{\"username\": \"johndoe\", \"email\": \"johndoe@company.com\"}'\n        callback_url:\n          type: string\n          example: \"\"\n          description: if defined, all messages will be POSTed to this URL as they are emitted by the CSML engine\n        ttl_duration:\n          type: integer\n          example: 30\n          description: number of days after which to expire chatbot usage data. Don't expire data if not set. Overrides corresponding engine environment variable\n        low_data_mode:\n          type: boolean\n          description: if set to true, the chatbot will not store the contents of sent/received messages. Overrides corresponding engine environment variable\n\n    PayloadModel:\n      type: object\n      description: The actual payload of the request made by the user\n      required:\n        - content_type\n        - content\n      properties:\n        content_type:\n          type: string\n          example: \"text\"\n        content:\n          type: object\n          example: '{\"text\": \"Hi from the user!\"}'\n        secure:\n          type: boolean\n          default: false\n          description: Whether to treat the incoming event as a secure input\n\n    ConversationModel:\n      type: object\n      description: A Conversation definition\n      required:\n        - client\n        - flow_id\n        - step_id\n        - status\n      properties:\n        id:\n          type: string\n          example: \"7db5c125-e150-4df4-8cf7-b605c4f4fdcd\"\n        client:\n          $ref: \"#/components/schemas/ClientModel\"\n        flow_id:\n          type: string\n          example: \"Default\"\n        step_id:\n          type: string\n          example: \"start\"\n        last_interaction_at:\n          type: string\n          format: date-time\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n\n    StateModel:\n      type: object\n      required:\n        - type\n        - value\n      properties:\n        type:\n          type: string\n        value:\n          anyOf:\n            - type: string\n            - type: number\n            - type: object\n            - type: array\n\n    MemoryModel:\n      type: object\n      required:\n        - key\n        - value\n      properties:\n        key:\n          type: string\n        value:\n          anyOf:\n            - type: string\n            - type: number\n            - type: object\n            - type: array\n\n    ClientModel:\n      type: object\n      description: The Client object\n      required:\n        - bot_id\n        - channel_id\n        - user_id\n      properties:\n        bot_id:\n          type: string\n          example: \"MyBotId\"\n        channel_id:\n          type: string\n          example: \"4d0341db-1a13-4470-8c26-c15a03cce502\"\n        user_id:\n          type: string\n          example: \"2fc4648b-a3f9-42db-a799-1f5b6852b1e3\"\n\n    MessageModel:\n      type: object\n      required:\n        - payload\n      properties:\n        payload:\n          $ref: \"#/components/schemas/PayloadModel\"\n        interaction_order:\n          type: integer\n        conversation_id:\n          type: string\n        direction:\n          type: string\n          enum:\n            - SEND\n            - RECEIVE\n\n    LintErrorModel:\n      type: object\n      properties:\n        flow:\n          type: string\n        step:\n          type: string\n        line:\n          type: integer\n        column:\n          type: integer\n        message:\n          type: string\n          example: \"An explicit error message\"\n\n    RunRequestBot:\n      type: object\n      description: Handle chat requests with the full target bot specified in the body\n      required:\n        - bot\n        - event\n      properties:\n        bot:\n          $ref: \"#/components/schemas/BotModel\"\n        event:\n          $ref: \"#/components/schemas/EventModel\"\n    RunRequestLatestVersion:\n      type: object\n      description: Handle chat requests with the latest saved version of a given bot_id\n      required:\n        - bot_id\n        - event\n      properties:\n        bot_id:\n          type: string\n          example: MyBotID\n        apps_endpoint:\n          $ref: \"#/components/schemas/AppsEndpoint\"\n        event:\n          $ref: \"#/components/schemas/EventModel\"\n    RunRequestSpecificVersion:\n      type: object\n      description: Handle chat requests with a specific saved version of a given bot_id\n      required:\n        - bot_id\n        - version_id\n        - event\n      properties:\n        bot_id:\n          type: string\n          example: MyBotID\n        version_id:\n          type: string\n          example: \"86ba492a-b6fe-4c22-95ec-55be4e1c83f0\"\n        apps_endpoint:\n          $ref: \"#/components/schemas/AppsEndpoint\"\n        event:\n          $ref: \"#/components/schemas/EventModel\"\n\n    RunResponse:\n      type: object\n      properties:\n        messages:\n          type: array\n          items:\n            $ref: \"#/components/schemas/MessageModel\"\n        conversation_end:\n          type: boolean\n          description: Whether the conversation ends after this (either it continues to a new flow or a goto end is found)\n        request_id:\n          type: string\n          example: \"cc3ecb87-68f9-4e2b-86e0-d6483210c69e\"\n        received_at:\n          type: string\n          format: date-time\n        interaction_id:\n          type: string\n          example: \"08d620f3-c2b9-4814-b228-56e7810e8e23\"\n        client:\n          $ref: \"#/components/schemas/ClientModel\"\n\n    ValidateResponse:\n      type: object\n      properties:\n        valid:\n          type: boolean\n          example: false\n        errors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LintErrorModel\"\n\n    BotVersionsResponse:\n      type: object\n      required:\n        - bot versioning\n      properties:\n        pagination_key:\n          type: string\n          default: null\n          description: Only set if there are more results. You can add this query param to a subsequent request to get the next batch of versions.\n        bots:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n              version_id:\n                type: string\n              engine_version:\n                $ref: \"#/components/schemas/EngineVersion\"\n              name:\n                type: string\n              default_flow:\n                type: string\n              created_at:\n                type: string\n                format: date-time\n\n    NewBotVersionResponse:\n      type: object\n      properties:\n        version_id:\n          type: string\n          example: \"c3001dfb-8a10-4815-bb4e-6cd98b0ef5e7\"\n        engine_version:\n          $ref: \"#/components/schemas/EngineVersion\"\n\n    StatusResponse:\n      type: object\n      properties:\n        server_ready:\n          type: boolean\n          description: If true, the server is ready to take requests!\n        database_type:\n          type: string\n          enum:\n            - mongodb\n            - dynamodb\n          description: The type of database configured\n        server_port:\n          type: number\n          example: 5000\n          description: The port where the server is listening on\n        server_auth_enabled:\n          type: boolean\n          description: Whether the server requires an X-Api-Key header for all requests\n        encryption_enabled:\n          type: boolean\n          description: Whether the data is encrypted in the database\n        debug_mode_enabled:\n          type: boolean\n          description: Whether the server is in debug mode\n\n    AppsEndpoint:\n      type: string\n      description: optional endpoint to call for external App() calls\n      format: url\n\n    EngineVersion:\n      type: string\n      description: The version of the engine this resource was handled with. Can be used for compatibility checks later on.\n      example: \"1.8.1\"\n\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"BotVersionsResponse\": parse schema: property \"pagination_key\": unexpected default \"null\" value"
}