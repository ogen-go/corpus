{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/python/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml",
			"byteSize": 79052,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e-\n    This spec is mainly for testing Petstore server and contains fake endpoints,\n    models. Please do not use this for any other purpose. Special characters: \"\n    \\\n  version: 1.0.0\n  title: OpenAPI Petstore\n  license:\n    name: Apache-2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: pet\n    description: Everything about your Pets\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\npaths:\n  /foo:\n    get:\n      responses:\n        default:\n          description: response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  string:\n                    $ref: '#/components/schemas/Foo'\n  /pet:\n    servers:\n      - url: 'https://petstore.swagger.io/v2'\n      - url: 'https://path-server-test.petstore.local/v2'\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: Add a new pet to the store\n      operationId: addPet\n      responses:\n        '200':\n          description: Ok\n        '405':\n          description: Invalid input\n      security:\n        - http_signature_test: []\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: ''\n      operationId: updatePet\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n        '405':\n          description: Validation exception\n      security:\n        - http_signature_test: []\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid status value\n      security:\n        - http_signature_test: []\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: \u003e-\n        Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid tag value\n      security:\n        - http_signature_test: []\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      deprecated: true\n  '/pet/{petId}':\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: ''\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: ''\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n  '/pet/{petId}/uploadImage':\n    post:\n      tags:\n        - pet\n      summary: uploads an image\n      description: ''\n      operationId: uploadImage\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                file:\n                  description: file to upload\n                  type: string\n                  format: binary\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n      security:\n        - api_key: []\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: ''\n      operationId: placeOrder\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid Order\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n  '/store/order/{order_id}':\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003c= 5 or \u003e 10. Other values\n        will generate exceptions\n      operationId: getOrderById\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 5\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: \u003e-\n        For valid response try integer IDs with value \u003c 1000. Anything above\n        1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: order_id\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithArrayInput\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: ''\n      operationId: createUsersWithListInput\n      responses:\n        default:\n          description: successful operation\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: ''\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        '400':\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: ''\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  '/user/{username}':\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: ''\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be fetched. Use user1 for testing.\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '400':\n          description: Invalid user supplied\n        '404':\n          description: User not found\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '404':\n          description: User not found\n  /fake_classname_test:\n    patch:\n      tags:\n        - 'fake_classname_tags 123#$%^'\n      summary: To test class name in snake case\n      description: To test class name in snake case\n      operationId: Classname\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      security:\n        - api_key_query: []\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n  /fake:\n    patch:\n      tags:\n        - fake\n      summary: To test \"client\" model\n      description: To test \"client\" model\n      operationId: ClientModel\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n    get:\n      tags:\n        - fake\n      summary: To test enum parameters\n      description: To test enum parameters\n      operationId: EnumParameters\n      parameters:\n        - name: enum_header_string_array\n          in: header\n          description: Header parameter enum test (string array)\n          schema:\n            type: array\n            items:\n              type: string\n              default: $\n              enum:\n                - '\u003e'\n                - $\n        - name: enum_header_string\n          in: header\n          description: Header parameter enum test (string)\n          schema:\n            type: string\n            enum:\n              - _abc\n              - '-efg'\n              - (xyz)\n            default: '-efg'\n        - name: enum_query_string_array\n          in: query\n          description: Query parameter enum test (string array)\n          schema:\n            type: array\n            items:\n              type: string\n              default: $\n              enum:\n                - '\u003e'\n                - $\n        - name: enum_query_string\n          in: query\n          description: Query parameter enum test (string)\n          schema:\n            type: string\n            enum:\n              - _abc\n              - '-efg'\n              - (xyz)\n            default: '-efg'\n        - name: enum_query_integer\n          in: query\n          description: Query parameter enum test (double)\n          schema:\n            type: integer\n            format: int32\n            enum:\n              - 1\n              - -2\n        - name: enum_query_double\n          in: query\n          description: Query parameter enum test (double)\n          schema:\n            type: number\n            format: double\n            enum:\n              - 1.1\n              - -1.2\n      responses:\n        '200':\n          description: Success\n        '404':\n          description: Not found\n          content:\n            application/json:\n              schema:\n                type: object\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                enum_form_string_array:\n                  description: Form parameter enum test (string array)\n                  type: array\n                  items:\n                    type: string\n                    default: $\n                    enum:\n                      - '\u003e'\n                      - $\n                enum_form_string:\n                  description: Form parameter enum test (string)\n                  type: string\n                  enum:\n                    - _abc\n                    - '-efg'\n                    - (xyz)\n                  default: '-efg'\n    post:\n      tags:\n        - fake\n      summary: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      description: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      operationId: EndpointParameters\n      responses:\n        '200':\n          description: Success\n        '404':\n          description: User not found\n      security:\n        - http_basic_test: []\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                integer:\n                  description: None\n                  type: integer\n                  minimum: 10\n                  maximum: 100\n                int32:\n                  description: None\n                  type: integer\n                  format: int32\n                  minimum: 20\n                  maximum: 200\n                int64:\n                  description: None\n                  type: integer\n                  format: int64\n                number:\n                  description: None\n                  type: number\n                  minimum: 32.1\n                  maximum: 543.2\n                float:\n                  description: None\n                  type: number\n                  format: float\n                  maximum: 987.6\n                double:\n                  description: None\n                  type: number\n                  format: double\n                  minimum: 67.8\n                  maximum: 123.4\n                string:\n                  description: None\n                  type: string\n                  pattern: '/[a-z]/i'\n                pattern_without_delimiter:\n                  description: None\n                  type: string\n                  pattern: '^[A-Z].*'\n                byte:\n                  description: None\n                  type: string\n                  format: byte\n                binary:\n                  description: None\n                  type: string\n                  format: binary\n                date:\n                  description: None\n                  type: string\n                  format: date\n                dateTime:\n                  description: None\n                  type: string\n                  format: date-time\n                  default: '2010-02-01T10:20:10.11111+01:00'\n                  example: '2020-02-02T20:20:20.22222Z'\n                password:\n                  description: None\n                  type: string\n                  format: password\n                  minLength: 10\n                  maxLength: 64\n                callback:\n                  description: None\n                  type: string\n              required:\n                - number\n                - double\n                - pattern_without_delimiter\n                - byte\n    delete:\n      tags:\n        - fake\n      security:\n        - bearer_test: []\n      summary: Fake endpoint to test group parameters (optional)\n      description: Fake endpoint to test group parameters (optional)\n      operationId: GroupParameters\n      x-group-parameters: true\n      parameters:\n        - name: required_string_group\n          in: query\n          description: Required String in group parameters\n          required: true\n          schema:\n            type: integer\n        - name: required_boolean_group\n          in: header\n          description: Required Boolean in group parameters\n          required: true\n          schema:\n            type: boolean\n        - name: required_int64_group\n          in: query\n          description: Required Integer in group parameters\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: string_group\n          in: query\n          description: String in group parameters\n          schema:\n            type: integer\n        - name: boolean_group\n          in: header\n          description: Boolean in group parameters\n          schema:\n            type: boolean\n        - name: int64_group\n          in: query\n          description: Integer in group parameters\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: succeeded\n  /fake/refs/number:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer number types\n      operationId: NumberWithValidations\n      requestBody:\n        description: Input number as post body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NumberWithValidations'\n        required: false\n      responses:\n        '200':\n          description: Output number\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NumberWithValidations'\n  /fake/refs/mammal:\n    post:\n      tags:\n        - fake\n      description: Test serialization of mammals\n      operationId: Mammal\n      requestBody:\n        description: Input mammal\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/mammal'\n        required: true\n      responses:\n        '200':\n          description: Output mammal\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/mammal'\n  /fake/refs/string:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer string types\n      operationId: String\n      requestBody:\n        description: Input string as post body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/String'\n        required: false\n      responses:\n        '200':\n          description: Output string\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/String'\n      x-codegen-request-body-name: body\n  /fake/refs/boolean:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer boolean types\n      operationId: Boolean\n      requestBody:\n        description: Input boolean as post body\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Boolean'\n        required: false\n      responses:\n        '200':\n          description: Output boolean\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Boolean'\n      x-codegen-request-body-name: body\n  /fake/refs/arraymodel:\n    post:\n      tags:\n        - fake\n      description: Test serialization of ArrayModel\n      operationId: ArrayModel\n      requestBody:\n        description: Input model\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AnimalFarm'\n        required: false\n      responses:\n        '200':\n          description: Output model\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnimalFarm'\n      x-codegen-request-body-name: body\n  /fake/refs/composed_one_of_number_with_validations:\n    post:\n      tags:\n        - fake\n      description: Test serialization of object with $refed properties\n      operationId: ComposedOneOfDifferentTypes\n      requestBody:\n        description: Input model\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ComposedOneOfDifferentTypes'\n        required: false\n      responses:\n        '200':\n          description: Output model\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComposedOneOfDifferentTypes'\n  /fake/refs/object_model_with_ref_props:\n    post:\n      tags:\n        - fake\n      description: Test serialization of object with $refed properties\n      operationId: ObjectModelWithRefProps\n      requestBody:\n        description: Input model\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectModelWithRefProps'\n        required: false\n      responses:\n        '200':\n          description: Output model\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectModelWithRefProps'\n      x-codegen-request-body-name: body\n  /fake/refs/enum:\n    post:\n      tags:\n        - fake\n      description: Test serialization of outer enum\n      operationId: StringEnum\n      requestBody:\n        description: Input enum\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StringEnum'\n        required: false\n      responses:\n        '200':\n          description: Output enum\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringEnum'\n      x-codegen-request-body-name: body\n  /fake/refs/array-of-enums:\n    post:\n      tags:\n        - fake\n      summary: Array of Enums\n      operationId: ArrayOfEnums\n      requestBody:\n        description: Input enum\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ArrayOfEnums'\n        required: false\n      responses:\n        200:\n          description: Got named array of enums\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArrayOfEnums'\n  /fake/additional-properties-with-array-of-enums:\n    get:\n      tags:\n        - fake\n      summary: Additional Properties with Array of Enums\n      operationId: AdditionalPropertiesWithArrayOfEnums\n      requestBody:\n        description: Input enum\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AdditionalPropertiesWithArrayOfEnums'\n        required: false\n      responses:\n        200:\n          description: Got object with additional properties with array of enums\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AdditionalPropertiesWithArrayOfEnums'\n  /fake/jsonFormData:\n    get:\n      tags:\n        - fake\n      summary: test json serialization of form data\n      description: ''\n      operationId: JsonFormData\n      responses:\n        '200':\n          description: successful operation\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                param:\n                  description: field1\n                  type: string\n                param2:\n                  description: field2\n                  type: string\n              required:\n                - param\n                - param2\n  /fake/inline-additionalProperties:\n    post:\n      tags:\n        - fake\n      summary: test inline additionalProperties\n      description: ''\n      operationId: InlineAdditionalProperties\n      responses:\n        '200':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: string\n        description: request body\n        required: true\n  /fake/body-with-query-params:\n    put:\n      tags:\n        - fake\n      operationId: BodyWithQueryParams\n      parameters:\n        - name: query\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n  /another-fake/dummy:\n    patch:\n      tags:\n        - $another-fake?\n      summary: To test special tags\n      description: To test special tags and operation ID starting with number\n      operationId: '123_test_@#$%_special_tags'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n  /fake/body-with-file-schema:\n    put:\n      tags:\n        - fake\n      description: \u003e-\n        For this test, the body for this request much reference a schema named\n        `File`.\n      operationId: BodyWithFileSchema\n      responses:\n        '200':\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileSchemaTestClass'\n        required: true\n  /fake/case-sensitive-params:\n    put:\n      tags:\n        - fake\n      description: Ensures that original naming is used in endpoint params, that way we won't have collisions\n      operationId: CaseSensitiveParams\n      parameters:\n        - name: someVar\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: SomeVar\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: some_var\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n  /fake/test-query-parameters:\n    put:\n      tags:\n        - fake\n      description: To test the collection format in query parameters\n      operationId: QueryParameterCollectionFormat\n      parameters:\n        - name: pipe\n          in: query\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: ioutil\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: http\n          in: query\n          required: true\n          style: spaceDelimited\n          schema:\n            type: array\n            items:\n              type: string\n        - name: url\n          in: query\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - name: context\n          in: query\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: refParam\n          in: query\n          required: true\n          schema:\n            $ref: '#/components/schemas/StringWithValidation'\n      responses:\n        \"200\":\n          description: Success\n  '/fake/{petId}/uploadImageWithRequiredFile':\n    post:\n      tags:\n        - pet\n      summary: uploads an image (required)\n      description: ''\n      operationId: uploadFileWithRequiredFile\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to update\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                requiredFile:\n                  description: file to upload\n                  type: string\n                  format: binary\n              required:\n                - requiredFile\n  /fake/parameterCollisions/{1}/{aB}/{Ab}/{self}/{A-B}/:\n    post:\n      tags:\n        - fake\n      summary: parameter collision case\n      operationId: parameterCollisions\n      parameters:\n        - name: 1\n          in: query\n          schema:\n            type: string\n        - name: aB\n          in: query\n          schema:\n            type: string\n        - name: Ab\n          in: query\n          schema:\n            type: string\n        - name: self\n          in: query\n          schema:\n            type: string\n        - name: A-B\n          in: query\n          schema:\n            type: string\n        - name: 1\n          in: header\n          schema:\n            type: string\n        - name: aB\n          in: header\n          schema:\n            type: string\n        - name: self\n          in: header\n          schema:\n            type: string\n        - name: A-B\n          in: header\n          schema:\n            type: string\n        - name: 1\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: aB\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: Ab\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: self\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: A-B\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: 1\n          in: cookie\n          schema:\n            type: string\n        - name: aB\n          in: cookie\n          schema:\n            type: string\n        - name: Ab\n          in: cookie\n          schema:\n            type: string\n        - name: self\n          in: cookie\n          schema:\n            type: string\n        - name: A-B\n          in: cookie\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema: {}\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema: {}\n  /fake/uploadFile:\n    post:\n      tags:\n        - fake\n      summary: uploads a file using multipart/form-data\n      description: ''\n      operationId: uploadFile\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                additionalMetadata:\n                  description: Additional data to pass to server\n                  type: string\n                file:\n                  description: file to upload\n                  type: string\n                  format: binary\n              required:\n                - file\n  /fake/uploadFiles:\n    post:\n      tags:\n        - fake\n      summary: uploads files using multipart/form-data\n      description: ''\n      operationId: uploadFiles\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                files:\n                  type: array\n                  items:\n                    type: string\n                    format: binary\n  /fake/uploadDownloadFile:\n    post:\n      tags:\n        - fake\n      summary: uploads a file and downloads a file using application/octet-stream\n      description: ''\n      operationId: uploadDownloadFile\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: file to download\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: file to upload\n  /fake/health:\n    get:\n      tags:\n        - fake\n      summary: Health check endpoint\n      responses:\n        200:\n          description: The instance started successfully\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthCheckResult'\n  /fake/inlineComposition/:\n    post:\n      tags:\n        - fake\n      summary: testing composed schemas at inline locations\n      operationId: inlineComposition\n      parameters:\n        - name: compositionAtRoot\n          in: query\n          schema:\n            allOf:\n              - type: string\n                minLength: 1\n        - name: compositionInProperty\n          in: query\n          schema:\n            type: object\n            properties:\n              someProp:\n                allOf:\n                  - type: string\n                    minLength: 1\n      requestBody:\n        content:\n          application/json:\n            schema:\n              allOf:\n                - type: string\n                  minLength: 1\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                someProp:\n                  allOf:\n                    - type: string\n                      minLength: 1\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - type: string\n                    minLength: 1\n            multipart/form-data:\n              schema:\n                type: object\n                properties:\n                  someProp:\n                    allOf:\n                      - type: string\n                        minLength: 1\n  '/fake/objInQuery':\n    get:\n      tags:\n        - fake\n      summary: user list\n      operationId: objectInQuery\n      parameters:\n        - name: mapBean\n          in: query\n          required: false\n          description: mapBean\n          style: deepObject\n          explode: true\n          schema:\n            type: object\n            properties:\n              keyword:\n                title: keyword\n                type: string\n      responses:\n        '200':\n          description: ok\n  '/fake/refObjInQuery':\n    get:\n      tags:\n        - fake\n      summary: user list\n      operationId: refObjectInQuery\n      parameters:\n        - name: mapBean\n          in: query\n          required: false\n          description: mapBean\n          style: deepObject\n          explode: true\n          schema:\n            $ref: '#/components/schemas/Foo'\n      responses:\n        '200':\n          description: ok\n  '/fake/jsonWithCharset':\n    post:\n      tags:\n        - fake\n      summary: json with charset tx and rx\n      operationId: jsonWithCharset\n      requestBody:\n        content:\n          application/json; charset=utf-8:\n            schema: {}\n      responses:\n        200:\n          description: success\n          content:\n            application/json; charset=utf-8:\n              schema: {}\n  \"/fake/responseWithoutSchema\":\n    get:\n      tags:\n        - fake\n      summary: receives a response without schema\n      operationId: responseWithoutSchema\n      responses:\n        '200':\n          description: contents without schema definition\n          content:\n            application/json: {}\n            application/xml: {}\n  /fake/jsonPatch:\n    patch:\n      summary: json patch\n      description: json patch route with a requestBody\n      operationId: jsonPatch\n      tags:\n        - fake\n      requestBody:\n        content:\n          application/json-patch+json:\n            schema:\n              $ref: '#/components/schemas/JSONPatchRequest'\n      responses:\n        '200':\n          description: OK\n  /fake/deleteCoffee/{id}:\n    delete:\n      operationId: deleteCoffee\n      summary: Delete coffee\n      description: Delete the coffee identified by the given id, (delete without request body)\n      tags:\n        - fake\n      parameters:\n        - name: id\n          in: path\n          description: The internal object id\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n        '202':\n          description: header only\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: string\n                format: number\n        default:\n          description: Unexpected error\n  /fake/queryParamWithJsonContentType:\n    get:\n      operationId: queryParamWithJsonContentType\n      summary: query param with json content-type\n      tags:\n        - fake\n      parameters:\n        - name: someParam\n          in: query\n          description: The internal object id\n          required: true\n          content:\n            application/json:\n              schema: {}\n      responses:\n        200:\n          description: success\n          content:\n            application/json:\n              schema: {}\nservers:\n  - url: 'http://{server}.swagger.io:{port}/v2'\n    description: petstore server\n    variables:\n      server:\n        enum:\n          - 'petstore'\n          - 'qa-petstore'\n          - 'dev-petstore'\n        default: 'petstore'\n      port:\n        enum:\n          - 80\n          - 8080\n        default: 80\n  - url: https://localhost:8080/{version}\n    description: The local server\n    variables:\n      version:\n        enum:\n          - 'v1'\n          - 'v2'\n        default: 'v2'\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/User'\n      description: List of user object\n      required: true\n    Client:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Client'\n      description: client model\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    api_key_query:\n      type: apiKey\n      name: api_key_query\n      in: query\n    http_basic_test:\n      type: http\n      scheme: basic\n    bearer_test:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    http_signature_test:\n      # Test the 'HTTP signature' security scheme.\n      # Each HTTP request is cryptographically signed as specified\n      # in https://datatracker.ietf.org/doc/draft-cavage-http-signatures/\n      type: http\n      scheme: signature\n  schemas:\n    Foo:\n      type: object\n      properties:\n        bar:\n          $ref: '#/components/schemas/Bar'\n    Bar:\n      type: string\n      default: bar\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n          example: '2020-02-02T20:20:20.000222Z'\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    Category:\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n          default: default-name\n      xml:\n        name: Category\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-is-unique: true\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n        objectWithNoDeclaredProps:\n          type: object\n          # Note: the 'additionalProperties' keyword is not specified, which is\n          # equivalent to allowing undeclared properties of any type.\n          description: test code generation for objects\n            Value must be a map of strings to values. It cannot be the 'null' value.\n        objectWithNoDeclaredPropsNullable:\n          type: object\n          # Note: the 'additionalProperties' keyword is not specified, which is\n          # equivalent to allowing undeclared properties of any type.\n          description: test code generation for nullable objects.\n            Value must be a map of strings to values or the 'null' value.\n          nullable: true\n        anyTypeProp:\n          description: test code generation for any type\n            Here the 'type' attribute is not specified, which means the value can be anything,\n            including the null value, string, number, boolean, array or object.\n            See https://github.com/OAI/OpenAPI-Specification/issues/1389\n        anyTypeExceptNullProp:\n          description: any type except 'null'\n            Here the 'type' attribute is not specified, which means the value can be anything,\n            including the null value, string, number, boolean, array or object.\n          not:\n            type: 'null'\n        anyTypePropNullable:\n          description: test code generation for any type\n            Here the 'type' attribute is not specified, which means the value can be anything,\n            including the null value, string, number, boolean, array or object.\n            The 'nullable' attribute does not change the allowed values.\n          nullable: true\n      xml:\n        name: User\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      description: Pet object that needs to be added to the store\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-is-unique: true\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: '#/components/schemas/Tag'\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    Return:\n      description: Model for testing reserved words\n      properties:\n        return:\n          description: this is a reserved python keyword\n          type: integer\n          format: int32\n      xml:\n        name: Return\n    Name:\n      description: Model for testing model name same as property name\n      required:\n        - name\n      properties:\n        name:\n          type: integer\n          format: int32\n        snake_case:\n          readOnly: true\n          type: integer\n          format: int32\n        property:\n          description: this is a reserved python keyword\n          type: string\n      xml:\n        name: Name\n    200_response:\n      description: model with an invalid class name for python, starts with a number\n      properties:\n        name:\n          type: integer\n          format: int32\n        class:\n          description: this is a reserved python keyword\n          type: string\n      xml:\n        name: Name\n    ClassModel:\n      description: Model for testing model with \"_class\" property\n      properties:\n        _class:\n          type: string\n    Dog:\n      allOf:\n        - $ref: '#/components/schemas/Animal'\n        - type: object\n          properties:\n            breed:\n              type: string\n    Cat:\n      allOf:\n        - $ref: '#/components/schemas/Animal'\n        - type: object\n          properties:\n            declawed:\n              type: boolean\n    Address:\n      type: object\n      additionalProperties:\n        type: integer\n    Animal:\n      type: object\n      discriminator:\n        propertyName: className\n      required:\n        - className\n      properties:\n        className:\n          type: string\n        color:\n          type: string\n          default: red\n    AnimalFarm:\n      type: array\n      items:\n        $ref: '#/components/schemas/Animal'\n    FormatTest:\n      type: object\n      required:\n        - number\n        - byte\n        - date\n        - password\n      properties:\n        integer:\n          type: integer\n          maximum: 100\n          minimum: 10\n          multipleOf: 2\n        int32:\n          type: integer\n          format: int32\n        int32withValidations:\n          type: integer\n          format: int32\n          maximum: 200\n          minimum: 20\n        int64:\n          type: integer\n          format: int64\n        number:\n          maximum: 543.2\n          minimum: 32.1\n          type: number\n          multipleOf: 32.5\n        float:\n          description: this is a reserved python keyword\n          type: number\n          format: float\n          maximum: 987.6\n          minimum: 54.3\n        float32:\n          type: number\n          format: float\n        double:\n          type: number\n          format: double\n          maximum: 123.4\n          minimum: 67.8\n        float64:\n          type: number\n          format: double\n        arrayWithUniqueItems:\n          type: array\n          items:\n            type: number\n          uniqueItems: true\n        string:\n          type: string\n          pattern: '/[a-z]/i'\n        byte:\n          type: string\n          format: byte\n        binary:\n          type: string\n          format: binary\n        date:\n          type: string\n          format: date\n          example: '2020-02-02'\n        dateTime:\n          type: string\n          format: date-time\n          example: '2007-12-03T10:15:30+01:00'\n        uuid:\n          type: string\n          format: uuid\n          example: 72f98069-206d-4f12-9f12-3d1e525a8e84\n        uuidNoExample:\n          type: string\n          format: uuid\n        password:\n          type: string\n          format: password\n          maxLength: 64\n          minLength: 10\n        pattern_with_digits:\n          description: A string that is a 10 digit number. Can have leading zeros.\n          type: string\n          pattern: '^\\d{10}$'\n        pattern_with_digits_and_delimiter:\n          description: A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.\n          type: string\n          pattern: '/^image_\\d{1,3}$/i'\n        noneProp:\n          type: 'null'\n    EnumClass:\n      type: string\n      default: '-efg'\n      enum:\n        - _abc\n        - '-efg'\n        - (xyz)\n        - COUNT_1M\n        - COUNT_50M\n    ObjectModelWithArgAndArgsProperties:\n      type: object\n      properties:\n        arg:\n          type: string\n        args:\n          type: string\n      required:\n      - arg\n      - args\n    Enum_Test:\n      type: object\n      required:\n        - enum_string_required\n      properties:\n        enum_string:\n          type: string\n          enum:\n            - UPPER\n            - lower\n            - ''\n        enum_string_required:\n          type: string\n          enum:\n            - UPPER\n            - lower\n            - ''\n        enum_integer:\n          type: integer\n          format: int32\n          enum:\n            - 1\n            - -1\n        enum_number:\n          type: number\n          format: double\n          enum:\n            - 1.1\n            - -1.2\n        stringEnum:\n          $ref: '#/components/schemas/StringEnum'\n        IntegerEnum:\n          $ref: '#/components/schemas/IntegerEnum'\n        StringEnumWithDefaultValue:\n          $ref: '#/components/schemas/StringEnumWithDefaultValue'\n        IntegerEnumWithDefaultValue:\n          $ref: '#/components/schemas/IntegerEnumWithDefaultValue'\n        IntegerEnumOneValue:\n          $ref: '#/components/schemas/IntegerEnumOneValue'\n    AdditionalPropertiesClass:\n      type: object\n      properties:\n        map_property:\n          type: object\n          additionalProperties:\n            type: string\n        map_of_map_property:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n        anytype_1: {}\n        map_with_undeclared_properties_anytype_1:\n          type: object\n        map_with_undeclared_properties_anytype_2:\n          type: object\n          properties: {}\n        map_with_undeclared_properties_anytype_3:\n          type: object\n          additionalProperties: true\n        empty_map:\n          type: object\n          description: an object with no declared properties and no undeclared\n            properties, hence it's an empty map.\n          additionalProperties: false\n        map_with_undeclared_properties_string:\n          type: object\n          additionalProperties:\n            type: string\n    MixedPropertiesAndAdditionalPropertiesClass:\n      type: object\n      properties:\n        uuid:\n          type: string\n          format: uuid\n        dateTime:\n          type: string\n          format: date-time\n        map:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Animal'\n    Client:\n      type: object\n      properties:\n        client:\n          type: string\n    ReadOnlyFirst:\n      type: object\n      properties:\n        bar:\n          type: string\n          readOnly: true\n        baz:\n          type: string\n    hasOnlyReadOnly:\n      type: object\n      properties:\n        bar:\n          type: string\n          readOnly: true\n        foo:\n          type: string\n          readOnly: true\n    Capitalization:\n      type: object\n      properties:\n        smallCamel:\n          type: string\n        CapitalCamel:\n          type: string\n        small_Snake:\n          type: string\n        Capital_Snake:\n          type: string\n        SCA_ETH_Flow_Points:\n          type: string\n        ATT_NAME:\n          description: |\n            Name of the pet\n          type: string\n    MapTest:\n      type: object\n      properties:\n        map_map_of_string:\n          type: object\n          additionalProperties:\n            type: object\n            additionalProperties:\n              type: string\n        map_of_enum_string:\n          type: object\n          additionalProperties:\n            type: string\n            enum:\n              - UPPER\n              - lower\n        direct_map:\n          type: object\n          additionalProperties:\n            type: boolean\n        indirect_map:\n          $ref: '#/components/schemas/StringBooleanMap'\n    ArrayTest:\n      type: object\n      properties:\n        array_of_string:\n          type: array\n          items:\n            type: string\n        array_array_of_integer:\n          type: array\n          items:\n            type: array\n            items:\n              type: integer\n              format: int64\n        array_array_of_model:\n          type: array\n          items:\n            type: array\n            items:\n              $ref: '#/components/schemas/ReadOnlyFirst'\n    NumberOnly:\n      type: object\n      properties:\n        JustNumber:\n          type: number\n    ArrayOfNumberOnly:\n      type: object\n      properties:\n        ArrayNumber:\n          type: array\n          items:\n            type: number\n    ArrayOfArrayOfNumberOnly:\n      type: object\n      properties:\n        ArrayArrayNumber:\n          type: array\n          items:\n            type: array\n            items:\n              type: number\n    EnumArrays:\n      type: object\n      properties:\n        just_symbol:\n          type: string\n          enum:\n            - '\u003e='\n            - $\n        array_enum:\n          type: array\n          items:\n            type: string\n            enum:\n              - fish\n              - crab\n    StringEnum:\n      nullable: true\n      type: string\n      enum:\n        - \"placed\"\n        - \"approved\"\n        - \"delivered\"\n        - 'single quoted'\n        - |-\n          multiple\n          lines\n        - \"double quote \\n with newline\"\n        - null\n    IntegerEnum:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n    IntegerEnumBig:\n      type: integer\n      enum:\n        - 10\n        - 11\n        - 12\n    StringEnumWithDefaultValue:\n      type: string\n      enum:\n        - placed\n        - approved\n        - delivered\n      default: placed\n    IntegerEnumWithDefaultValue:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n      default: 0\n    IntegerEnumOneValue:\n      type: integer\n      enum:\n        - 0\n    NullableString:\n      nullable: true\n      type: string\n    ObjectModelWithRefProps:\n      description: a model that includes properties which should stay primitive (String + Boolean) and one which is defined as a class, NumberWithValidations\n      type: object\n      properties:\n        myNumber:\n          $ref: '#/definitions/NumberWithValidations'\n        myString:\n          $ref: '#/definitions/String'\n        myBoolean:\n          $ref: '#/definitions/Boolean'\n    NumberWithValidations:\n      type: number\n      minimum: 10\n      maximum: 20\n    ComposedAnyOfDifferentTypesNoValidations:\n      anyOf:\n        - type: object\n        - type: string\n          format: date\n        - type: string\n          format: date-time\n        - type: string\n          format: binary\n        - type: string\n          format: byte\n        - type: string\n        - type: object\n        - type: boolean\n        - type: 'null'\n        - type: array\n          items: {}\n        - type: number\n        - type: number\n          format: float\n        - type: number\n          format: double\n        - type: integer\n        - type: integer\n          format: int32\n        - type: integer\n          format: int64\n    ComposedOneOfDifferentTypes:\n      description: this is a model that allows payloads of type object or number\n      oneOf:\n        - $ref: '#/components/schemas/NumberWithValidations'\n        - $ref: '#/components/schemas/Animal'\n        - type: 'null'\n        - type: string\n          format: date\n        - type: object\n          minProperties: 4\n          maxProperties: 4\n        - type: array\n          maxItems: 4\n          minItems: 4\n          items: {}\n        - type: string\n          format: date-time\n          pattern: '^2020.*'\n    Number:\n      type: number\n    String:\n      type: string\n    Boolean:\n      type: boolean\n      x-codegen-body-parameter-name: boolean_post_body\n    StringBooleanMap:\n      additionalProperties:\n        type: boolean\n    FileSchemaTestClass:\n      type: object\n      properties:\n        file:\n          $ref: '#/components/schemas/File'\n        files:\n          type: array\n          items:\n            $ref: '#/components/schemas/File'\n    File:\n      type: object\n      description: Must be named `File` for test.\n      properties:\n        sourceURI:\n          description: Test capitalization\n          type: string\n    ObjectWithDifficultlyNamedProps:\n      type: object\n      description: model with properties that have invalid names for python\n      properties:\n        '$special[property.name]':\n          type: integer\n          format: int64\n        123-list:\n          type: string\n        123Number:\n          type: integer\n          readOnly: true\n      required:\n        - 123-list\n    _special_model.name_:\n      type: object\n      description: model with an invalid class name for python\n      properties:\n        a:\n          type: string\n    HealthCheckResult:\n      type: object\n      properties:\n        NullableMessage:\n          nullable: true\n          type: string\n      description: Just a string to inform instance is up and running. Make it nullable in hope to get it as pointer in generated model.\n    NullableClass:\n      type: object\n      properties:\n        integer_prop:\n          type: integer\n          nullable: true\n        number_prop:\n          type: number\n          nullable: true\n        boolean_prop:\n          type: boolean\n          nullable: true\n        string_prop:\n          type: string\n          nullable: true\n        date_prop:\n          type: string\n          format: date\n          nullable: true\n        datetime_prop:\n          type: string\n          format: date-time\n          nullable: true\n        array_nullable_prop:\n          type: array\n          nullable: true\n          items:\n            type: object\n        array_and_items_nullable_prop:\n          type: array\n          nullable: true\n          items:\n            type: object\n            nullable: true\n        array_items_nullable:\n          type: array\n          items:\n            type: object\n            nullable: true\n        object_nullable_prop:\n          type: object\n          nullable: true\n          additionalProperties:\n            type: object\n        object_and_items_nullable_prop:\n          type: object\n          nullable: true\n          additionalProperties:\n            type: object\n            nullable: true\n        object_items_nullable:\n          type: object\n          additionalProperties:\n            type: object\n            nullable: true\n      additionalProperties:\n        type: object\n        nullable: true\n    fruit:\n      properties:\n        color:\n          type: string\n      oneOf:\n        - $ref: '#/components/schemas/apple'\n        - $ref: '#/components/schemas/banana'\n    apple:\n      type: object\n      properties:\n        cultivar:\n          type: string\n          pattern: ^[a-zA-Z\\s]*$\n        origin:\n          type: string\n          pattern: /^[A-Z\\s]*$/i\n      required:\n        - cultivar\n      nullable: true\n    banana:\n      type: object\n      properties:\n        lengthCm:\n          type: number\n      required:\n        - lengthCm\n    mammal:\n      oneOf:\n        - $ref: '#/components/schemas/whale'\n        - $ref: '#/components/schemas/zebra'\n        - $ref: '#/components/schemas/Pig'\n      discriminator:\n        propertyName: className\n    whale:\n      type: object\n      properties:\n        hasBaleen:\n          type: boolean\n        hasTeeth:\n          type: boolean\n        className:\n          type: string\n          enum:\n            - whale\n      required:\n        - className\n    zebra:\n      type: object\n      properties:\n        type:\n          type: string\n          enum:\n            - plains\n            - mountain\n            - grevys\n        className:\n          type: string\n          enum:\n            - zebra\n      required:\n        - className\n      additionalProperties: true\n    Pig:\n      oneOf:\n        - $ref: '#/components/schemas/BasquePig'\n        - $ref: '#/components/schemas/DanishPig'\n      discriminator:\n        propertyName: className\n    BasquePig:\n      type: object\n      properties:\n        className:\n          type: string\n          enum:\n            - BasquePig\n      required:\n        - className\n    DanishPig:\n      type: object\n      properties:\n        className:\n          type: string\n          enum:\n            - DanishPig\n      required:\n        - className\n    gmFruit:\n      properties:\n        color:\n          type: string\n      anyOf:\n        - $ref: '#/components/schemas/apple'\n        - $ref: '#/components/schemas/banana'\n    fruitReq:\n      oneOf:\n        - type: 'null'\n        - $ref: '#/components/schemas/appleReq'\n        - $ref: '#/components/schemas/bananaReq'\n    appleReq:\n      type: object\n      properties:\n        cultivar:\n          type: string\n        mealy:\n          type: boolean\n      required:\n        - cultivar\n      additionalProperties: false\n    bananaReq:\n      type: object\n      properties:\n        lengthCm:\n          type: number\n        sweet:\n          type: boolean\n      required:\n        - lengthCm\n      additionalProperties: false\n    # go-experimental is unable to make Triangle and Quadrilateral models\n    # correctly https://github.com/OpenAPITools/openapi-generator/issues/6149\n    Drawing:\n      type: object\n      properties:\n        mainShape:\n          # A property whose value is a 'oneOf' type, and the type is referenced instead\n          # of being defined inline. The value cannot be null.\n          $ref: '#/components/schemas/Shape'\n        shapeOrNull:\n          # A property whose value is a 'oneOf' type, and the type is referenced instead\n          # of being defined inline. The value may be null because ShapeOrNull has 'null'\n          # type as a child schema of 'oneOf'.\n          $ref: '#/components/schemas/ShapeOrNull'\n        nullableShape:\n          # A property whose value is a 'oneOf' type, and the type is referenced instead\n          # of being defined inline. The value may be null because NullableShape has the\n          # 'nullable: true' attribute. For this specific scenario this is exactly the\n          # same thing as 'shapeOrNull'.\n          $ref: '#/components/schemas/NullableShape'\n        shapes:\n          type: array\n          items:\n            $ref: '#/components/schemas/Shape'\n      additionalProperties:\n        # Here the additional properties are specified using a referenced schema.\n        # This is just to validate the generated code works when using $ref\n        # under 'additionalProperties'.\n        $ref: '#/components/schemas/fruit'\n    Shape:\n      oneOf:\n        - $ref: '#/components/schemas/Triangle'\n        - $ref: '#/components/schemas/Quadrilateral'\n      discriminator:\n        propertyName: shapeType\n    ShapeOrNull:\n      description: The value may be a shape or the 'null' value.\n        This is introduced in OAS schema \u003e= 3.1.\n      oneOf:\n        - type: 'null'\n        - $ref: '#/components/schemas/Triangle'\n        - $ref: '#/components/schemas/Quadrilateral'\n      discriminator:\n        propertyName: shapeType\n    NullableShape:\n      description: The value may be a shape or the 'null' value.\n        For a composed schema to validate a null payload,\n        one of its chosen oneOf schemas must be type null\n        or nullable (introduced in OAS schema \u003e= 3.0)\n      oneOf:\n        - $ref: '#/components/schemas/Triangle'\n        - $ref: '#/components/schemas/Quadrilateral'\n        - type: \"null\"\n    TriangleInterface:\n      properties:\n        shapeType:\n          type: string\n          enum:\n            - 'Triangle'\n        triangleType:\n          type: string\n      required:\n        - shapeType\n        - triangleType\n    Triangle:\n      oneOf:\n        - $ref: '#/components/schemas/EquilateralTriangle'\n        - $ref: '#/components/schemas/IsoscelesTriangle'\n        - $ref: '#/components/schemas/ScaleneTriangle'\n      discriminator:\n        propertyName: triangleType\n      # Note: the 'additionalProperties' keyword is not specified, which is\n      # equivalent to allowing undeclared properties of any type.\n    EquilateralTriangle:\n      allOf:\n        - $ref: '#/components/schemas/TriangleInterface'\n        - type: object\n          properties:\n            triangleType:\n              type: string\n              enum:\n                - 'EquilateralTriangle'\n    IsoscelesTriangle:\n      allOf:\n        - $ref: '#/components/schemas/TriangleInterface'\n        - type: object\n          properties:\n            triangleType:\n              type: string\n              enum:\n                - 'IsoscelesTriangle'\n    ScaleneTriangle:\n      allOf:\n        - $ref: '#/components/schemas/TriangleInterface'\n        - type: object\n          properties:\n            triangleType:\n              type: string\n              enum:\n                - 'ScaleneTriangle'\n    QuadrilateralInterface:\n      properties:\n        shapeType:\n          type: string\n          enum:\n            - 'Quadrilateral'\n        quadrilateralType:\n          type: string\n      required:\n        - shapeType\n        - quadrilateralType\n    Quadrilateral:\n      oneOf:\n        - $ref: '#/components/schemas/SimpleQuadrilateral'\n        - $ref: '#/components/schemas/ComplexQuadrilateral'\n      discriminator:\n        propertyName: quadrilateralType\n    SimpleQuadrilateral:\n      allOf:\n        - $ref: '#/components/schemas/QuadrilateralInterface'\n        - type: object\n          properties:\n            quadrilateralType:\n              type: string\n              enum:\n                - 'SimpleQuadrilateral'\n    ComplexQuadrilateral:\n      allOf:\n        - $ref: '#/components/schemas/QuadrilateralInterface'\n        - type: object\n          properties:\n            quadrilateralType:\n              type: string\n              enum:\n                - 'ComplexQuadrilateral'\n    GrandparentAnimal:\n      type: object\n      required:\n        - pet_type\n      properties:\n        pet_type:\n          type: string\n      discriminator:\n        propertyName: pet_type\n    ParentPet:\n      type: object\n      allOf:\n        - $ref: '#/components/schemas/GrandparentAnimal'\n    ChildCat:\n      allOf:\n        - $ref: '#/components/schemas/ParentPet'\n        - type: object\n          properties:\n            name:\n              type: string\n    ArrayOfEnums:\n      type: array\n      items:\n        $ref: '#/components/schemas/StringEnum'\n    AdditionalPropertiesWithArrayOfEnums:\n      type: object\n      additionalProperties:\n        type: array\n        items:\n          $ref: '#/components/schemas/EnumClass'\n    DateTimeTest:\n      type: string\n      default: '2010-01-01T10:10:10.000111+01:00'\n      example: '2010-01-01T10:10:10.000111+01:00'\n      format: date-time\n    ObjectInterface:\n      type: object\n    ObjectWithValidations:\n      type: object\n      minProperties: 2\n    SomeObject:\n      allOf:\n        - $ref: '#/components/schemas/ObjectInterface'\n    ArrayWithValidationsInItems:\n      type: array\n      maxItems: 2\n      items:\n        type: integer\n        format: int64\n        maximum: 7\n    ArrayHoldingAnyType:\n      type: array\n      items:\n        description: any type can be stored here\n    DateWithValidations:\n      type: string\n      format: date\n      pattern: '^2020.*'\n    DateTimeWithValidations:\n      type: string\n      format: date-time\n      pattern: '^2020.*'\n    NoAdditionalProperties:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n      required:\n        - id\n      additionalProperties: false\n    IntegerMax10:\n      type: integer\n      format: int64\n      maximum: 10\n    IntegerMin15:\n      type: integer\n      format: int64\n      minimum: 15\n    StringWithValidation:\n      type: string\n      minLength: 7\n    Player:\n      type: object\n      description: a model that includes a self reference this forces properties and additionalProperties\n        to be lazy loaded in python models because the Player class has not fully loaded when defining\n        properties\n      properties:\n        name:\n          type: string\n        enemyPlayer:\n          $ref: '#/components/schemas/Player'\n    BooleanEnum:\n      type: boolean\n      enum:\n        - true\n    ComposedObject:\n      type: object\n      allOf:\n        - {}\n    ComposedNumber:\n      type: number\n      allOf:\n        - {}\n    ComposedString:\n      type: string\n      allOf:\n        - {}\n    ComposedBool:\n      type: boolean\n      allOf:\n        - {}\n    ComposedArray:\n      type: array\n      items: {}\n      allOf:\n        - {}\n    ComposedNone:\n      type: 'null'\n      allOf:\n        - {}\n    Currency:\n      type: string\n      enum:\n        - eur\n        - usd\n    Money:\n      type: object\n      properties:\n        amount:\n          type: string\n          format: number\n        currency:\n          $ref: '#/components/schemas/Currency'\n      required:\n        - amount\n        - currency\n    DecimalPayload:\n      type: string\n      format: number\n    ObjectWithDecimalProperties:\n      type: object\n      properties:\n        length:\n          $ref: '#/components/schemas/DecimalPayload'\n        width:\n          type: string\n          format: number\n        cost:\n          $ref: '#/components/schemas/Money'\n    ObjectWithInlineCompositionProperty:\n      type: object\n      properties:\n        someProp:\n          allOf:\n            - type: string\n              minLength: 1\n    UUIDString:\n      type: string\n      format: uuid\n      minLength: 1\n    AnyTypeNotString:\n      not:\n        type: string\n    JSONPatchRequest:\n      type: array\n      items:\n        oneOf:\n          - $ref: '#/components/schemas/JSONPatchRequestAddReplaceTest'\n          - $ref: '#/components/schemas/JSONPatchRequestRemove'\n          - $ref: '#/components/schemas/JSONPatchRequestMoveCopy'\n    JSONPatchRequestAddReplaceTest:\n      type: object\n      additionalProperties: false\n      required:\n        - value\n        - op\n        - path\n      properties:\n        path:\n          description: A JSON Pointer path.\n          type: string\n        value:\n          description: The value to add, replace or test.\n        op:\n          description: The operation to perform.\n          type: string\n          enum:\n            - add\n            - replace\n            - test\n    JSONPatchRequestRemove:\n      type: object\n      additionalProperties: false\n      required:\n        - op\n        - path\n      properties:\n        path:\n          description: A JSON Pointer path.\n          type: string\n        op:\n          description: The operation to perform.\n          type: string\n          enum:\n            - remove\n    JSONPatchRequestMoveCopy:\n      type: object\n      additionalProperties: false\n      required:\n        - from\n        - op\n        - path\n      properties:\n        from:\n          description: A JSON Pointer path.\n          type: string\n        path:\n          description: A JSON Pointer path.\n          type: string\n        op:\n          description: The operation to perform.\n          type: string\n          enum:\n            - move\n            - copy\n    AdditionalPropertiesValidator:\n      type: object\n      allOf:\n        - type: object\n          additionalProperties: true\n        - type: object\n          additionalProperties:\n            minLength: 3\n        - type: object\n          additionalProperties:\n            maxLength: 5\n    AnyTypeAndFormat:\n      type: object\n      properties:\n        uuid:\n          format: uuid\n        date:\n          format: date\n        date-time:\n          format: date-time\n        number:\n          format: number\n        binary:\n          format: binary\n        int32:\n          format: int32\n        int64:\n          format: int64\n        double:\n          format: double\n        float:\n          format: float\n    FromSchema:\n      type: object\n      properties:\n        data:\n          type: string\n        id:\n          type: integer\n    ObjectWithInvalidNamedRefedProperties:\n      type: object\n      properties:\n        from:\n          $ref: \"#/components/schemas/FromSchema\"\n        \"!reference\":\n          $ref: \"#/components/schemas/ArrayWithValidationsInItems\"\n      required:\n        - from\n        - \"!reference\"\n    ObjectWithOptionalTestProp:\n      type: object\n      properties:\n        test:\n          type: string\n    ObjectWithAllOfWithReqTestPropFromUnsetAddProp:\n      allOf:\n        - $ref: '#/components/schemas/ObjectWithOptionalTestProp'\n        - type: object\n          required: [ test ]\n          properties:\n            name:\n              type: string",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@3a8265b6eec3ca372e28d49de38cf6f4b032a937/-/blob/modules/openapi-generator/src/test/resources/3_0/python/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/3a8265b6eec3ca372e28d49de38cf6f4b032a937/modules/openapi-generator/src/test/resources/3_0/python/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ObjectModelWithRefProps\": resolve \"#/components/schemas/ObjectModelWithRefProps\": property \"myNumber\": at modules/openapi-generator/src/test/resources/3_0/python/petstore-with-fake-endpoints-models-for-testing-with-http-signature.yaml:2308:17: $ref: resolve \"#/definitions/NumberWithValidations\": resolve: can't find value for \"definitions/NumberWithValidations\""
}