{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/bump-sh/cli"
		},
		"file": {
			"name": "openapi.v3.json",
			"size": 0,
			"path": "examples/valid/openapi.v3.json",
			"byteSize": 9267,
			"content": "{\n  \"components\": {\n    \"requestBodies\": {\n      \"Preview\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"properties\": {\n                \"definition\": {\n                  \"description\": \"Serialized definition of the version. This should be an OpenAPI 2.x, 3.x or AsyncAPI 2.x file serialized as a string, in YAML or JSON.\\n\",\n                  \"example\": \"{asyncapi: \\\"2.0\\\", \\\"info\\\": { \\\"title: ... }}\\n\",\n                  \"type\": \"string\"\n                },\n                \"references\": {\n                  \"description\": \"Import external references used by `definition`. It's usually resources not accessible by Bump servers, like local files or internal URLs.\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Reference\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"specification\": {\n                  \"description\": \"Specification for the definition, as a path: `speficiation_name/specification_version/format`. Example: `openapi/v2/yaml`.\",\n                  \"enum\": [\n                    \"openapi/v2/yaml\",\n                    \"openapi/v2/json\",\n                    \"openapi/v3/yaml\",\n                    \"openapi/v3/json\"\n                  ],\n                  \"example\": \"openapi/v2/yaml\",\n                  \"type\": \"string\"\n                },\n                \"validation\": {\n                  \"description\": \"Validation strategy:\\n- `basic`: basic validation (default)\\n- `strict`: validate the file against its specification\\n\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"definition\"\n              ]\n            }\n          }\n        },\n        \"description\": \"The version object\"\n      },\n      \"Version\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"properties\": {\n                \"auto_create_documentation\": {\n                  \"default\": false,\n                  \"description\": \"Create the documentation if not existing yet. Must be used with a `hub_id` or `hub_slug`, and a `documentation_slug`.\",\n                  \"type\": \"boolean\"\n                },\n                \"definition\": {\n                  \"description\": \"Serialized definition of the version. This should be an OpenAPI 2.x, 3.x or AsyncAPI 2.x file serialized as a string, in YAML or JSON.\\n\",\n                  \"example\": \"{openapi: \\\"3.0\\\", \\\"info\\\": { \\\"title: ... }}\\n\",\n                  \"type\": \"string\"\n                },\n                \"documentation_id\": {\n                  \"description\": \"UUID of the documentation. Required if `documentation_slug` is empty.\",\n                  \"type\": \"string\"\n                },\n                \"documentation_slug\": {\n                  \"description\": \"Slug of the documentation. Required if `documentation_id` is empty.\",\n                  \"type\": \"string\"\n                },\n                \"hub_id\": {\n                  \"description\": \"UUID of the hub if the documentation is part of a hub.\",\n                  \"type\": \"string\"\n                },\n                \"hub_slug\": {\n                  \"description\": \"Slug of the hub if the documentation is part of a hub.\",\n                  \"type\": \"string\"\n                },\n                \"references\": {\n                  \"description\": \"Import external references used by `definition`. It's usually resources not accessible by Bump servers, like local files or internal URLs.\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/Reference\"\n                  },\n                  \"type\": \"array\"\n                },\n                \"specification\": {\n                  \"description\": \"Specification for the definition, as a path: `speficiation_name/specification_version/format`. Example: `openapi/v2/yaml`.\",\n                  \"enum\": [\n                    \"openapi/v2/yaml\",\n                    \"openapi/v2/json\",\n                    \"openapi/v3/yaml\",\n                    \"openapi/v3/json\"\n                  ],\n                  \"example\": \"openapi/v2/yaml\",\n                  \"type\": \"string\"\n                },\n                \"validation\": {\n                  \"description\": \"Validation strategy:\\n- `basic`: basic validation (default)\\n- `strict`: validate the file against its specification\\n\",\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"definition\"\n              ]\n            }\n          }\n        },\n        \"description\": \"The version object\"\n      }\n    },\n    \"responses\": {\n      \"InvalidDefinition\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"$ref\": \"schemas/all.yml#/Error\"\n            }\n          }\n        },\n        \"description\": \"Definition is not valid.\"\n      }\n    },\n    \"schemas\": {\n      \"Pong\": {\n        \"properties\": {\n          \"pong\": {\n            \"description\": \"Sentence about ping and pong\",\n            \"example\": \"And that's how ping-pong ball is bumped\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Preview\": {\n        \"properties\": {\n          \"expires_at\": {\n            \"description\": \"Preview expiration date and time.\",\n            \"example\": \"2010-04-14T17:05:00+01:00\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"description\": \"Unique id for the preview URL: `https://bump.sh/preview/:id`.\",\n            \"example\": \"3ef8f52f-9056-4113-840e-2f7183b90e06\",\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Reference\": {\n        \"properties\": {\n          \"content\": {\n            \"description\": \"Content of the external reference, as a string.\",\n            \"type\": \"string\"\n          },\n          \"location\": {\n            \"description\": \"Location of the external reference as it's called from `definition`, without the relative path (the part after `#/`). Can be an URL of a file system path.\",\n            \"example\": \"https://example.com/api/models/pet.yml\",\n            \"type\": \"string\"\n          }\n        },\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"info\": {\n    \"description\": \"This is the official Bump API documentation. Obviously created with Bump.\\n\",\n    \"title\": \"Bump Api\",\n    \"version\": \"1.0\"\n  },\n  \"openapi\": \"3.0.2\",\n  \"paths\": {\n    \"/ping\": {\n      \"get\": {\n        \"description\": \"Responds a pong if the API is up and running.\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Pong\"\n                }\n              }\n            },\n            \"description\": \"Success\"\n          },\n          \"default\": {\n            \"description\": \"API is currently down\"\n          }\n        },\n        \"summary\": \"Check the API status\"\n      }\n    },\n    \"/previews\": {\n      \"post\": {\n        \"description\": \"Create a preview for a given documentation file. The preview will have a unique temporary URL, and will be active for 30 minutes.\\n\",\n        \"requestBody\": {\n          \"$ref\": \"#/components/requestBodies/Preview\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/Preview\"\n                }\n              }\n            },\n            \"description\": \"Success\"\n          },\n          \"422\": {\n            \"$ref\": \"#/components/responses/InvalidDefinition\"\n          }\n        },\n        \"summary\": \"Create a preview\"\n      }\n    },\n    \"/validations\": {\n      \"post\": {\n        \"description\": \"Validate a definition against its schema (OpenAPI or AsyncAPI) and return errors without creating a new version. This is useful in a CI process, to validate that a changed definition file is valid and won't fail when being deployed on Bump.\\n\",\n        \"requestBody\": {\n          \"$ref\": \"#/components/requestBodies/Version\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          },\n          \"422\": {\n            \"$ref\": \"#/components/responses/InvalidDefinition\"\n          }\n        },\n        \"summary\": \"Validate a documentation definition\"\n      }\n    },\n    \"/versions\": {\n      \"post\": {\n        \"description\": \"Deploy a new version for a given documentation, which will become the current version.\\n\",\n        \"requestBody\": {\n          \"$ref\": \"#/components/requestBodies/Version\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\"\n          },\n          \"422\": {\n            \"$ref\": \"#/components/responses/InvalidDefinition\"\n          }\n        },\n        \"summary\": \"Create a new version\"\n      }\n    }\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://bump.sh/api/v1\"\n    }\n  ],\n  \"x-topics\": [\n    {\n      \"content\": \"# Api token authentication\\n\\nUse the token from your documentation settings as the username of the basic auth, with no password.\\n\\nExample: `curl https://bump.sh/api/v1/docs/1/versions -u DOC_TOKEN:`\\n\\nNote that adding a colon after your token prevents cURL from asking for a password.\\n\",\n      \"title\": \"Authentication\"\n    }\n  ]\n}\n"
		}
	},
	"Error": "parse: parse spec: paths: /validations: post: operation \"\": responses: 422: resolve \"#/components/responses/InvalidDefinition\" reference: content: \"application/json\": schema: parse schema: resolve \"schemas/all.yml#/Error\": find schema: external base \"schemas/all.yml\" is not supported"
}