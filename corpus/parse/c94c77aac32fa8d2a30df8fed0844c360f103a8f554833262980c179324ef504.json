{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Pigmice2733/peregrine-backend"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "internal/server/openapi.yaml",
			"byteSize": 44364,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 3.0.0\n  title: Peregrine API documentation\nservers:\n  - url: http://edge.api.peregrine.ga:8080/\n  - url: http://api.peregrine.ga:8080/\n  - url: http://localhost:8080/\npaths:\n  /:\n    get:\n      summary: Get server uptime and health information\n      operationId: health\n      responses:\n        \"200\":\n          description: Server uptime and health information\n          content:\n            application/json:\n              schema:\n                required:\n                  - startTime\n                  - uptime\n                  - listen\n                  - services\n                  - ok\n                properties:\n                  uptime:\n                    description: Amount of time the server has been up\n                    type: string\n                    example: 9.614298073s\n                  services:\n                    description: Health of the services peregrine depends upon\n                    required:\n                      - tba\n                      - postgresql\n                    properties:\n                      tba:\n                        description: The Blue Alliance API health\n                        type: boolean\n                        example: true\n                      postgresql:\n                        description: PostgreSQL health\n                        type: boolean\n                        example: false\n                  ok:\n                    description: Health of peregrine and all of it's dependencies\n                    type: boolean\n                    example: false\n  /authenticate:\n    post:\n      summary: Retrieve tokens for authorization\n      operationid: authenticate\n      tags:\n        - authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              required:\n                - username\n                - password\n              properties:\n                username:\n                  type: string\n                  description: An alphanumeric string between 4 and 32 characters\n                  example: franklin\n                password:\n                  type: string\n                  description: A string between 8 and 128 characters\n                  example: Q6qA6A22WLTO\n      responses:\n        \"200\":\n          description: Successful authentication\n          content:\n            application/json:\n              schema:\n                required:\n                  - refreshToken\n                  - accessToken\n                properties:\n                  refreshToken:\n                    $ref: \"#/components/schemas/refreshToken\"\n                  accessToken:\n                    $ref: \"#/components/schemas/accessToken\"\n        \"401\":\n          description: Failed to authenticate due to an incorrect username or password\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Unauthorized\n        \"422\":\n          description: Failed to validate username or password, or request body syntax was invalid\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Unprocessable Entity\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ValidationError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /refresh:\n    post:\n      summary: Retrieve a new access token via a refresh token\n      operationId: refresh\n      tags:\n        - authentication\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              required:\n                - refreshToken\n              properties:\n                refreshToken:\n                  $ref: \"#/components/schemas/refreshToken\"\n      responses:\n        \"200\":\n          description: Sucessfully generated a new access token\n          content:\n            application/json:\n              schema:\n                required:\n                  - accessToken\n                properties:\n                  accessToken:\n                    $ref: \"#/components/schemas/accessToken\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"422\":\n          description: Request body syntax was invalid\n          content:\n            text/plain:\n              schema:\n                type: string\n                example: Unprocessable Entity\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /users:\n    post:\n      summary: Create a new user\n      description:\n        Note that if you specify roles higher than your own roles they will be reset.\n        For example, you can't create a verified user in another realm if you're not\n        a global admin, and you can't create an admin if you're not an admin.\n      operationId: createUser\n      security:\n        - BearerAuth: []\n      tags:\n        - users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/user\"\n      responses:\n        \"201\":\n          description: Successfully created user\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"409\":\n          $ref: \"#/components/responses/conflictError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    get:\n      summary: Get all visible users\n      description:\n        Note that only admins can get users. Global admins can get all users, and realm\n        admins can get all users in their realm.\n      operationId: getUsers\n      security:\n        - BearerAuth: []\n      tags:\n        - users\n      responses:\n        \"200\":\n          description: Successfully fetched users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/user\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /users/{id}:\n    parameters:\n      - in: path\n        name: id\n        schema:\n          $ref: \"#/components/schemas/id\"\n        required: true\n        description: Numeric User ID\n    get:\n      summary: Get a user\n      operationId: getUser\n      security:\n        - BearerAuth: []\n      tags:\n        - users\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/user\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    patch:\n      summary: Update all or parts of a user\n      description:\n        Any null or undefined fields will not be updated. Global admins can patch any user,\n        realm admins can patch users in their realm, and any user can patch themselves.\n      operationId: patchUser\n      security:\n        - BearerAuth: []\n      tags:\n        - users\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/user\"\n      responses:\n        \"204\":\n          description: Successfully patched user\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    delete:\n      summary: Delete a user\n      operationId: deleteUser\n      security:\n        - BearerAuth: []\n      tags:\n        - users\n      responses:\n        \"204\":\n          description: Successfully deleted user\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /schemas:\n    get:\n      summary: Get all visible schemas\n      description:\n        Note that this endpoint will return all schemas if you're a global admin, realm and public schemas\n        if you're authenticated, and just public schemas if you're not authenticated.\n      operationId: getSchemas\n      tags:\n        - schemas\n      security:\n        - BearerAuth: []\n      parameters:\n        - in: query\n          name: year\n          schema:\n            type: integer\n            example: 2018\n          required: false\n          description: Get schemas for a specified year\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/schema\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    post:\n      summary: Create a new schema\n      description:\n        Note that only global admins can create a schema for a year. Realm admins can only create a schema\n        for their realm. Normal users cannot create schemas. Also note if an ID is included on the schema\n        it will be ignored.\n      operationId: createSchema\n      security:\n        - BearerAuth: []\n      tags:\n        - schemas\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/schema\"\n      responses:\n        \"201\":\n          description: Successfully created schema\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"409\":\n          $ref: \"#/components/responses/conflictError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /schemas/{id}:\n    parameters:\n      - in: path\n        name: id\n        schema:\n          $ref: \"#/components/schemas/id\"\n        required: true\n        description: Numeric Schema ID\n    get:\n      summary: Get a schema by ID\n      operationId: getSchema\n      security:\n        - BearerAuth: []\n      tags:\n        - schemas\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/schema\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /years:\n    get:\n      summary: Get all years for all visible events\n      operationId: getEventYears\n      security:\n        - BearerAuth: []\n      tags:\n        - events\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  example: 2020\n  /events:\n    get:\n      summary: Get all visible events\n      operationId: getEvents\n      security:\n        - BearerAuth: []\n      tags:\n        - events\n      parameters:\n        - in: query\n          name: year\n          schema:\n            type: integer\n            example: 2020\n          required: false\n          description: A year to fetch events from. Leave unspecified for all years.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/event\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n    get:\n      summary: Get a specific event\n      operationId: getEvent\n      security:\n        - BearerAuth: []\n      tags:\n        - events\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/event\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    put:\n      summary: Create a new custom event (not on TBA)\n      operationId: putEvent\n      description:\n        This endpoint allows realm admins and global admins to create custom events. This can\n        be useful if an offseason event isn't on The Blue Alliance and you still want to scout\n        it.\n      tags:\n        - events\n      security:\n        - BearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/event\"\n      responses:\n        \"201\":\n          description: Successfully created event\n        \"204\":\n          description: Successfully replaced existing event\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/stats:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n    get:\n      summary: Get stats summary for all teams at an event\n      operationId: getEventStats\n      tags:\n        - stats\n      security:\n        - BearerAuth: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  required:\n                    - team\n                    - summary\n                  properties:\n                    team:\n                      type: string\n                      example: frc2733\n                    summary:\n                      $ref: \"#/components/schemas/stats\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/matches/{matchKey}/teams/{teamKey}/stats:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n      - $ref: \"#/components/parameters/matchKey\"\n      - $ref: \"#/components/parameters/teamKey\"\n    get:\n      summary: Get stats summary for team in specific match\n      operationId: getMatchTeamStats\n      tags:\n        - stats\n      security:\n        - BearerAuth: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                required:\n                  - team\n                  - summary\n                properties:\n                  team:\n                    type: string\n                    example: frc2733\n                  summary:\n                    $ref: \"#/components/schemas/stats\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/matches:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n      - in: query\n        name: team\n        schema:\n          type: array\n          items:\n            $ref: \"#/components/schemas/teamKey\"\n        description: Filter matches with specified teams. Supports multiple teams.\n        style: form\n        explode: true\n    get:\n      summary: Get all matches for an event\n      operationId: getMatches\n      security:\n        - BearerAuth: []\n      tags:\n        - matches\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/match\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    post:\n      summary: Create a new match for an event\n      operationId: createMatch\n      description:\n        Note that global admins can create matches on any event, and realm admins\n        can create matches on events in their realm. Normal users cannot create\n        matches.\n      tags:\n        - matches\n      security:\n        - BearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/match\"\n      responses:\n        \"201\":\n          description: Successfully created event\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/matches/{matchKey}:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n      - $ref: \"#/components/parameters/matchKey\"\n    get:\n      summary: Get a match\n      description:\n        Note that you can only get matches for events you have access to. A global admin\n        can get matches for any event, otherwise you can only get matches for public events\n        and events in your realm.\n      security:\n        - BearerAuth: []\n      operationId: getMatch\n      tags:\n        - matches\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/match\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/teams:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n    get:\n      summary: Get ranking information for all teams at an event\n      operationId: getEventTeams\n      tags:\n        - teams\n      security:\n        - BearerAuth: []\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/eventTeam\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/teams/{teamKey}:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n      - $ref: \"#/components/parameters/teamKey\"\n    get:\n      summary: Get ranking information about a team at an event\n      operationId: getTeamRankingData\n      security:\n        - BearerAuth: []\n      tags:\n        - teams\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/eventTeam\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/teams/{teamKey}/comments:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n      - $ref: \"#/components/parameters/teamKey\"\n    get:\n      summary: Get comments about a team at an event\n      operationId: getTeamEventComments\n      security:\n        - BearerAuth: []\n      tags:\n        - comments\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/comment\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /reports:\n    get:\n      summary: Get reports\n      parameters:\n        - in: query\n          name: event\n          schema:\n            type: string\n            example: 2019abca\n          required: false\n          description: Get only reports from a specific event\n        - in: query\n          name: team\n          schema:\n            type: string\n            example: frc2733\n          required: false\n          description: Get only reports from a specific team\n        - in: query\n          name: match\n          schema:\n            type: string\n            example: qm2\n          required: false\n          description: Get only reports from a specific match\n        - in: query\n          name: reporter\n          schema:\n            $ref: \"#/components/schemas/id\"\n          required: false\n          description: Get only reports from a specific user\n      operationId: getReports\n      security:\n        - BearerAuth: []\n      tags:\n        - reports\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/report\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    post:\n      summary: Submit a report\n      security:\n        - BearerAuth: []\n      operationId: postReport\n      tags:\n        - reports\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/upload-report\"\n      responses:\n        \"201\":\n          description: Submitted new report\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/id\"\n        \"204\":\n          description: Successfully replaced existing report\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/id\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /reports/{id}:\n    parameters:\n      - in: path\n        name: id\n        schema:\n          $ref: \"#/components/schemas/id\"\n        required: true\n        description: Numeric Report ID\n    get:\n      summary: Get report\n      operationId: getReport\n      security:\n        - BearerAuth: []\n      tags:\n        - reports\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/report\"\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    put:\n      summary: Update existing report\n      operationId: putReports\n      security:\n        - BearerAuth: []\n      tags:\n        - reports\n      parameters:\n        - in: query\n          name: replace\n          schema:\n            type: boolean\n            example: false\n          required: false\n          description: If true, replace any conflicting reports.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/upload-report\"\n      responses:\n        \"204\":\n          description: Successfully update existing report\n        \"400\":\n          $ref: \"#/components/responses/badRequestError\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    delete:\n      summary: Delete existing report\n      security:\n        - BearerAuth: []\n      operationId: deleteReport\n      tags:\n        - reports\n      responses:\n        \"204\":\n          description: Successfully deleted report\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /events/{eventKey}/matches/{matchKey}/comments/{teamKey}:\n    parameters:\n      - $ref: \"#/components/parameters/eventKey\"\n      - $ref: \"#/components/parameters/matchKey\"\n      - $ref: \"#/components/parameters/teamKey\"\n    get:\n      summary: Get comments for a team in a match at an event\n      operationId: getTeamMatchComments\n      security:\n        - BearerAuth: []\n      tags:\n        - comments\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/comment\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    put:\n      summary: Submit a comment for a team in a match at an event\n      security:\n        - BearerAuth: []\n      operationId: postTeamMatchComment\n      tags:\n        - comments\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/comment\"\n      responses:\n        \"201\":\n          description: Submitted new comment\n        \"204\":\n          description: Successfully replaced existing comment\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /teams/{teamKey}:\n    parameters:\n      - $ref: \"#/components/parameters/teamKey\"\n    get:\n      summary: Get general info for a specific team\n      operationId: getTeam\n      tags:\n        - teams\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/team\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /leaderboard:\n    get:\n      summary: Get a count of reports submitted for each reporter\n      operationId: getLeaderboard\n      tags:\n        - leaderboard\n      parameters:\n        - in: query\n          name: year\n          schema:\n            type: integer\n            example: 2020\n          required: false\n          description: Count reports for events in specified year only. Leave empty for all years.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  properties:\n                    reporterId:\n                      type: integer\n                      example: 4 # josiah\n                    reports:\n                      type: integer\n                      example: 9001\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /realms:\n    get:\n      summary: Get all realms\n      operationId: getRealms\n      security:\n        - BearerAuth: []\n      tags:\n        - realms\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/realm\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    post:\n      summary: Create a new realm\n      description: Only global admins can create realms.\n      operationId: createRealm\n      tags:\n        - realms\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/realm\"\n      responses:\n        \"201\":\n          description: Successfully created realm\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/realm\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"409\":\n          $ref: \"#/components/responses/conflictError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n  /realms/{id}:\n    get:\n      summary: Get a realm by ID\n      operationId: getRealm\n      security:\n        - BearerAuth: []\n      tags:\n        - realms\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/realm\"\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"409\":\n          $ref: \"#/components/responses/conflictError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    post:\n      summary: Update a realm\n      description: Global admins can update any realm. Realm admins can update their realm.\n      operationId: updateRealm\n      tags:\n        - realms\n      security:\n        - BearerAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/realm\"\n      responses:\n        \"204\":\n          description: Successfully updated realm\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"404\":\n          $ref: \"#/components/responses/notFoundError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\n    delete:\n      summary: Delete a realm\n      operationId: deleteRealm\n      security:\n        - BearerAuth: []\n      tags:\n        - realms\n      responses:\n        \"204\":\n          description: Successfully deleted realm\n        \"401\":\n          $ref: \"#/components/responses/unauthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/forbiddenError\"\n        \"409\":\n          $ref: \"#/components/responses/conflictError\"\n        \"422\":\n          $ref: \"#/components/responses/unprocessableEntityError\"\n        \"500\":\n          $ref: \"#/components/responses/internalServerError\"\ncomponents:\n  parameters:\n    teamKey:\n      in: path\n      name: teamKey\n      schema:\n        $ref: \"#/components/schemas/teamKey\"\n      required: true\n      description: Team Key\n    eventKey:\n      in: path\n      name: eventKey\n      schema:\n        $ref: \"#/components/schemas/eventKey\"\n      required: true\n      description: Event Key\n    matchKey:\n      in: path\n      name: matchKey\n      schema:\n        $ref: \"#/components/schemas/matchKey\"\n      required: true\n      description: Match Key\n  responses:\n    internalServerError:\n      description: Failed due to an internal server error\n      content:\n        text/plain:\n          schema:\n            $ref: \"#/components/schemas/internalServerError\"\n    unauthorizedError:\n      description: Invalid access token, please obtain a new access token\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Unauthorized\n    forbiddenError:\n      description: Your access token is valid, but you lack the roles to perform this operation\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Forbidden\n    notFoundError:\n      description: Unable to find that resource\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Not Found\n    unprocessableEntityError:\n      description: Request body syntax was invalid\n      content:\n        text/plain:\n          schema:\n            type: string\n            example: Unprocessable Entity\n    conflictError:\n      description: A resource with a similar unique key exists (e.g. username or id)\n      content:\n        text/plain:\n          type: string\n          example: Conflict\n    badRequestError:\n      description: Your request was invalid\n      content:\n        text/plain:\n          type: string\n          example: Bad Request\n        application/json:\n          schema:\n            required:\n              - error\n            properties:\n              error:\n                type: string\n                example: conflicts\n              id:\n                $ref: \"#/components/schemas/id\"\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    teamKey:\n      type: string\n      example: frc2733\n    eventKey:\n      type: string\n      example: 2018pncmp\n    matchKey:\n      type: string\n      example: qm30\n    realm:\n      required:\n        - name\n        - shareReports\n        - id\n      properties:\n        name:\n          type: string\n          example: Pigmice\n        shareReports:\n          type: boolean\n          example: true\n        id:\n          $ref: \"#/components/schemas/id\"\n    reportStat:\n      required:\n        - name\n        - value\n      properties:\n        name:\n          type: string\n          example: Sandstorm 2\n        value:\n          type: number\n          example: 2\n    report:\n      required:\n        - id\n        - eventKey\n        - matchKey\n        - teamKey\n        - data\n        - comment\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        eventKey:\n          type: string\n          example: 2019abca\n        matchKey:\n          type: string\n          example: qm5\n        teamKey:\n          type: string\n          example: frc2733\n        realmId:\n          $ref: \"#/components/schemas/id\"\n        reporterId:\n          $ref: \"#/components/schemas/id\"\n        data:\n          $ref: \"#/components/schemas/reportData\"\n        comment:\n          type: string\n          example: \"Played good defense\"\n    upload-report:\n      required:\n        - eventKey\n        - matchKey\n        - teamKey\n      properties:\n        eventKey:\n          type: string\n          example: 2019abca\n        matchKey:\n          type: string\n          example: qm5\n        teamKey:\n          type: string\n          example: frc2733\n        realmId:\n          $ref: \"#/components/schemas/id\"\n        reporterId:\n          $ref: \"#/components/schemas/id\"\n        data:\n          $ref: \"#/components/schemas/reportData\"\n        comment:\n          type: string\n          example: \"Played good defense\"\n    comment:\n      required:\n        - comment\n        - matchKey\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        reporterId:\n          $ref: \"#/components/schemas/id\"\n        comment:\n          type: string\n          example: \"Played good defense\"\n        matchKey:\n          $ref: \"#/components/schemas/matchKey\"\n    reportData:\n      type: array\n      items:\n        $ref: \"#/components/schemas/reportStat\"\n    match:\n      required:\n        - key\n        - redAlliance\n        - blueAlliance\n      properties:\n        key:\n          $ref: \"#/components/schemas/matchKey\"\n        time:\n          type: string\n          format: date-time\n          example: \"2018-04-06T23:21:38Z\"\n        scheduledTime:\n          type: string\n          format: date-time\n          example: \"2018-04-06T23:18:00Z\"\n        redScore:\n          type: integer\n          example: 426\n        blueScore:\n          type: integer\n          example: 265\n        redAlliance:\n          type: array\n          items:\n            type: string\n            example: frc5468\n        blueAlliance:\n          type: array\n          items:\n            type: string\n            example: frc4488\n        videos:\n          type: array\n          items:\n            type: string\n            example: https://www.youtube.com/watch?v=7ApbONq-B2Q\n    stats:\n      type: array\n      items:\n        description: A list of stat max/avgs\n        required:\n          - max\n          - avg\n          - name\n        properties:\n          max:\n            type: number\n            format: double\n            example: 4\n          avg:\n            type: number\n            format: double\n            example: 2.25\n          name:\n            type: string\n            example: Rocket Hatches Lvl 1\n    event:\n      required:\n        - key\n        - name\n        - startDate\n        - endDate\n        - webcasts\n        - locationName\n        - lat\n        - lon\n      properties:\n        key:\n          $ref: \"#/components/schemas/eventKey\"\n        realmId:\n          $ref: \"#/components/schemas/id\"\n        schemaId:\n          $ref: \"#/components/schemas/id\"\n        name:\n          type: string\n          example: Gibraltar\n        district:\n          type: string\n          example: fim\n        fullDistrict:\n          type: string\n          example: FIRST In Michigan\n        week:\n          type: integer\n          example: 4\n        startDate:\n          type: string\n          format: date-time\n          example: \"2019-02-28T05:00:00Z\"\n        endDate:\n          type: string\n          format: date-time\n          example: \"2019-03-02T05:00:00Z\"\n        webcasts:\n          type: array\n          items:\n            type: string\n            example: https://www.twitch.tv/firstinspires\n        locationName:\n          type: string\n          example: UW-Milwaukee Panther Arena\n        lat:\n          type: number\n          format: double\n          example: 43.0417381\n        lon:\n          type: number\n          format: double\n          example: -87.9168724\n    eventTeam:\n      required:\n        - team\n      properties:\n        team:\n          type: string\n          example: frc2733\n        rank:\n          type: integer\n          format: int32\n          example: 12\n        rankingScore:\n          type: number\n          format: double\n          example: 3.6\n    team:\n      required:\n        - key\n      properties:\n        key:\n          type: string\n          example: frc2733\n        nickname:\n          type: string\n          example: RAGE Robotics ⚙️\n    id:\n      description: Auto-increment 64-bit integer that identifies a resource\n      type: integer\n      format: int64\n      example: 1\n    schema:\n      required:\n        - id\n        - schema\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        year:\n          type: integer\n          format: int64\n          example: 2018\n        realmId:\n          $ref: \"#/components/schemas/id\"\n        schema:\n          $ref: \"#/components/schemas/statDescriptions\"\n    statDescriptions:\n      type: array\n      items:\n        required:\n          - name\n        properties:\n          name:\n            type: string\n            example: Cargo Placed\n          reportReference:\n            type: string\n            example: Cargo Placed\n          tbaReference:\n            type: string\n            example: endgameRobot{{.RobotPosition}}\n          anyOf:\n            $ref: \"#/components/schemas/anyOf\"\n          sum:\n            $ref: \"#/components/schemas/sum\"\n          hide:\n            type: boolean\n            example: true\n          period:\n            type: string\n            example: auto\n          type:\n            type: string\n            enum: [number, boolean, string]\n    anyOf:\n      type: array\n      items:\n        properties:\n          name:\n            type: string\n            example: endgame\n          equals:\n            type: string\n            example: HabLevel1\n        required:\n          - name\n          - equals\n    sum:\n      type: array\n      items:\n        properties:\n          name:\n            type: string\n            example: endgame\n        required:\n          - name\n    user:\n      required:\n        - id\n        - username\n        - password\n        - realmId\n        - firstName\n        - lastName\n      properties:\n        id:\n          $ref: \"#/components/schemas/id\"\n        username:\n          type: string\n          example: franklin\n        password:\n          type: string\n          example: Sxam0dO3aMQW\n          writeOnly: true\n        realmId:\n          $ref: \"#/components/schemas/id\"\n        firstName:\n          type: string\n          example: Franklin\n        lastName:\n          type: string\n          example: Harding\n        stars:\n          $ref: \"#/components/schemas/stars\"\n        roles:\n          $ref: \"#/components/schemas/roles\"\n    stars:\n      type: array\n      items:\n        type: string\n        example: 2018pncmp\n    roles:\n      required:\n        - isSuperAdmin\n        - isAdmin\n        - isVerified\n      properties:\n        isSuperAdmin:\n          type: boolean\n          example: true\n        isAdmin:\n          type: boolean\n          example: true\n        isVerified:\n          type: boolean\n          example: false\n    accessToken:\n      type: string\n      description: Short lived (1 day) JWT for API authorization\n      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwZXJlZ3JpbmVSb2xlcyI6eyJpc1N1cGVyQWRtaW4iOnRydWUsImlzQWRtaW4iOnRydWUsImlzVmVyaWZpZWQiOnRydWV9LCJwZXJlZ3JpbmVSZWFsbSI6MSwiZXhwIjoxNTQ3NjcyNDE2LCJzdWIiOiIxIn0.FMsGteZSZ53YmBFAKFHTde_vTymvuT0iFfLGPmcbkDQ\n    refreshToken:\n      type: string\n      description: Long lived (4 week) JWT for generating new access tokens without re-authenticating\n      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwZXJlZ3JpbmVQYXNzd29yZENoYW5nZWQiOiIyMDE5LTAxLTA5VDIyOjUxOjMxWiIsImV4cCI6MTU1MDAwNTIxNiwic3ViIjoiMSJ9.cCnaInxuIdrkZLTkVpx4i9iALoUzQTIYKWc5OtTroiM\n    internalServerError:\n      type: string\n      example: Internal Server Error\n    ValidationError:\n      required:\n        - error\n      properties:\n        error:\n          type: string\n          example: \"Key: 'baseUser.Password' Error:Field validation for 'Password' failed on the 'gte' tag\"\n",
			"canonicalURL": "/github.com/Pigmice2733/peregrine-backend@6eacc0ade63715323885682f9dc653a93202f193/-/blob/internal/server/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Pigmice2733/peregrine-backend/blob/6eacc0ade63715323885682f9dc653a93202f193/internal/server/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/realms/{id}\": get: operation \"getRealm\": at 1:21815: parse path \"/realms/{id}\": path parameter not specified: \"id\""
}