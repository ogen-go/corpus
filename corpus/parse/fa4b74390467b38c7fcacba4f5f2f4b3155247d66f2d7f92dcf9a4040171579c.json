{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/qoollo/bob"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "config-examples/openapi.yaml",
			"byteSize": 19844,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"Bob Node API\"\n  description: Bob HTTP Rest API\n  version: 0.0.0\npaths:\n  /status:\n    get:\n      summary: Returns information about self\n      operationId: getStatus\n      responses:\n        \"200\":\n          description: \"A JSON with node info\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Node\"\n  /status/space:\n    get:\n      summary: Get space info\n      operationId: getSpaceInfo\n      responses:\n        \"200\":\n          description: \"Space info\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SpaceInfo\"\n  /metrics:\n    get:\n      summary: Get metrics\n      operationId: getMetrics\n      responses:\n        \"200\":\n          description: \"Metrics\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MetricsSnapshotModel\"\n  /version:\n    get:\n      summary: Returns server version\n      operationId: getVersion\n      responses:\n        \"200\":\n          description: \"Version info\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VersionInfo\"\n  /nodes:\n    get:\n      summary: Returns a list of known nodes\n      operationId: getNodes\n      responses:\n        \"200\":\n          description: \"A JSON array of nodes info and vdisks on them\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Node\"\n        \"403\":\n          description: \"Permission denied\"\n  /metadata/distrfunc:\n    get:\n      summary: Returns information about key distribution function\n      operationId: distributionFunction\n      responses:\n        \"200\":\n          description: \"Distribution function information\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DistrFunc\"\n        \"403\":\n          description: \"Permission denied\"\n  /vdisks:\n    get:\n      summary: Returns a list of vdisks\n      operationId: getVDisks\n      responses:\n        \"200\":\n          description: \"A JSON array of vdisks info\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/VDisk\"\n        \"403\":\n          description: \"Permission denied\"\n  /vdisks/{VDiskId}:\n    get:\n      summary: Returns a vdisk info by ID\n      operationId: getVDisk\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n      responses:\n        \"200\":\n          description: \"A JSON with vdisk info\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VDisk\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /vdisks/{VDiskId}/records/count:\n    get:\n      summary: Returns count of records of this on node\n      operationId: getRecords\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n      responses:\n        \"200\":\n          description: \"Records count\"\n          content:\n            application/json:\n              schema:\n                type: integer\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /vdisks/{VDiskId}/partitions:\n    get:\n      summary: Returns a list of partitions\n      operationId: getPartitions\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n      responses:\n        \"200\":\n          description: \"Node info and JSON array with partitions info\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VDiskPartitions\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /vdisks/{VDiskId}/partitions/{partitionId}:\n    get:\n      summary: Returns a partition info by ID\n      operationId: getPartition\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n        - name: partitionId\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"A JSON with partition info\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Partition\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /vdisks/{VDiskId}/partitions/by_timestamp/{timestamp}:\n    delete:\n      summary: Delete partitions by timestamp\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n        - name: timestamp\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"400\":\n          description: \"Bad request (partitions with the timestamp not found on the vdisk or it is active)\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /vdisks/{VDiskId}/partitions/by_timestamp/{timestamp}/{action}:\n    post:\n      summary: Attach/Detach a partition by timestamp\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n        - name: timestamp\n          in: path\n          required: true\n          schema:\n            type: integer\n        - in: path\n          name: action\n          schema:\n            type: string\n            enum:\n              - attach\n              - detach\n          required: true\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /disks/list:\n    get:\n      summary: Returns the list of disks with their states\n      operationID: getDisks\n      responses:\n        \"200\":\n          description: \"A JSON array with disks and their states\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/DiskState\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /disks/\u003cdisk_name\u003e/stop:\n    post:\n      summary: Stops all disks controller for disk\n      parameters:\n        - $ref: \"#/components/parameters/DiskNameParam\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"406\":\n          description: \"Not acceptable backend\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /disks/\u003cdisk_name\u003e/start:\n    post:\n      summary: Trying to start all disk controllers for disk\n      parameters:\n        - $ref: \"#/components/parameters/DiskNameParam\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"406\":\n          description: \"Not acceptable backend\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /vdisks/\u003cvdisk_id\u003e/remount:\n    post:\n      summary: Remount partitions on vdisk\n      parameters:\n        - $ref: \"#/components/parameters/VDiskIdParam\"\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /blobs/outdated:\n    delete:\n      summary: Close active blobs of holders not used recently\n      operationId: finalizeOldBlobs\n      responses:\n        \"200\":\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n  /alien:\n    get:\n      summary: Returns an alien dir info\n      operationId: getAlien\n      responses:\n        \"200\":\n          description: \"Alien Node name\"\n          content:\n            application/json:\n              schema:\n                type: string\n  /configuration:\n    get:\n      summary: Returns configuration of the node\n      operationId: getConfiguration\n      responses:\n        \"200\":\n          description: Configuration object\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NodeConfiguration\"\n        \"403\":\n          description: \"Permission denied\"\n  /alien/detach:\n    post:\n      summary: Detach alien partitions\n      operationId: detachAlienPartitions\n      responses:\n        \"200\":\n          description: Successfully deatched alien partitions\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"406\":\n          description: \"Not acceptable backend\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /alien/dir:\n    get:\n      summary: Return directory of alien\n      operationId: getAlienDir\n      responses:\n        \"200\":\n          description: \"Directory\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Dir\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"406\":\n          description: \"Not acceptable backend\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n\n  /vdisks/\u003cvdisk_id\u003e/replicas/local/dirs:\n    get:\n      summary: Returns directories of local replicas of vdisk\n      operationId: getReplicasLocalDirs\n      responses:\n        \"200\":\n          description: \"A JSON array with dirs\"\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Dir\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n  /data/\u003ckey\u003e:\n    get:\n      summary: Returns data by key\n      operationId: getDataByKey\n      parameters:\n        - $ref: \"#/components/parameters/DataKeyParam\"\n      responses:\n        \"200\":\n          description: \"Binary data with inferred content type\"\n        \"400\":\n          description: \"Bad request (invalid key)\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"404\":\n          description: \"Not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n    post:\n      summary: Add data to storage by key\n      operationId: postDataByKey\n      parameters:\n        - $ref: \"#/components/parameters/DataKeyParam\"\n      requestBody:\n        description: Binary data\n        required: true\n      responses:\n        \"200\":\n          description: \"Data successfully added\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"400\":\n          description: \"Bad request (invalid key)\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n    delete:\n      summary: Delete data from storage by key\n      operationId: deleteDataByKey\n      parameters:\n        - $ref: \"#/components/parameters/DataKeyParam\"\n      responses:\n        \"200\":\n          description: \"Successfully deleted\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"400\":\n          description: \"Bad request (invalid key)\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n        \"403\":\n          description: \"Permission denied\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusExt\"\n\ncomponents:\n  responses:\n    DefaultError:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n  parameters:\n    DiskNameParam:\n      name: DiskName\n      in: path\n      required: true\n      schema:\n        type: string\n    VDiskIdParam:\n      name: VDiskId\n      in: path\n      required: true\n      schema:\n        type: integer\n    DataKeyParam:\n      name: DataKey\n      in: path\n      required: true\n      schema:\n        type: string\n  schemas:\n    Node:\n      properties: \n        name:\n          type: string\n        address:\n          type: string\n        vdisks:\n          type: array\n          items:\n            $ref: \"#/components/schemas/VDisk\"\n      required:\n        - name\n        - address\n    DiskState:\n      properties:\n        name:\n          type: string\n        path:\n          type: string\n        is_active:\n          type: boolean\n      required:\n        - name\n        - path\n        - is_active\n    VDisk:\n      properties:\n        id:\n          type: integer\n        replicas:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Replica\"\n      required:\n        - id\n    Replica:\n      properties:\n        node:\n          type: string\n        disk:\n          type: string\n        path:\n          type: string\n      required:\n        - type\n        - disk\n        - path\n    VDiskPartitions:\n      properties:\n        vdisk:\n          type: integer\n        node:\n          type: string\n        disk:\n          type: string\n        partitions:\n          type: array\n          items:\n            type: string\n    Partition:\n      properties:\n        vdisk_id:\n          type: integer\n        node_name:\n          type: string\n        disk_name:\n          type: string\n        timestamp:\n          type: integer\n        records_count:\n          type: integer\n    Error:\n      type: object\n      properties:\n        code:\n          type: string\n        message:\n          type: string\n      required:\n        - code\n        - message\n    Dir:\n      type: object\n      properties:\n        name:\n          type: string\n        path:\n          type: string\n        children:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Dir\"\n    DistrFunc:\n      type: object\n      properties:\n        func:\n          type: string\n          enum:\n            - Mod\n    Version:\n      type: object\n      properties:\n        version:\n          type: string\n        build_time:\n          type: string\n    VersionInfo:\n      type: object\n      properties:\n        bobversion:\n          $ref: \"#/components/schemas/Version\"\n        pearlversion:\n          $ref: \"#/components/schemas/Version\"\n    NodeConfiguration:\n      type: object\n      properties:\n        blob_file_name_prefix:\n          type: string\n        root_dir_name:\n          type: string\n    SpaceInfo:\n      type: object\n      properties:\n        total_disk_space_bytes:\n          type: integer\n        free_disk_space_bytes:\n          type: integer\n        used_disk_space_bytes:\n          type: integer\n    MetricsEntryModel:\n      type: object\n      properties:\n        value:\n          type: integer\n        timestamp:\n          type: integer\n    MetricsMap:\n      type: object\n      properties:\n        metric1:\n          $ref: \"#/components/schemas/MetricsEntryModel\"\n        metric2:\n          $ref: \"#/components/schemas/MetricsEntryModel\"\n    MetricsSnapshotModel:\n      type: object\n      properties:\n        metrics:\n          $ref: \"#/components/schemas/MetricsMap\"\n    StatusExt:\n      type: object\n      properties:\n        status:\n          type: integer\n        ok:\n          type: boolean\n        msg:\n          type: string\n\n",
			"canonicalURL": "/github.com/qoollo/bob@91a91f1bf2e5661b6bbd1efb71aa1356f3bd9e25/-/blob/config-examples/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/qoollo/bob/blob/91a91f1bf2e5661b6bbd1efb71aa1356f3bd9e25/config-examples/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/data/\u003ckey\u003e\": post: operation \"postDataByKey\": requestBody: at 1:6029: content must have at least one entry"
}