{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaloAltoNetworks/gaia"
		},
		"file": {
			"name": "enforcer.json",
			"size": 0,
			"path": "openapi3_autogen/enforcer.json",
			"byteSize": 25001,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"components\": {\n    \"schemas\": {\n      \"enforcer\": {\n        \"description\": \"Contains all parameters associated with a registered enforcer. The\\nobject is mainly maintained by the enforcers themselves. Users can read the\\nobject in order to understand the current status of the enforcers.\",\n        \"properties\": {\n          \"FQDN\": {\n            \"description\": \"Contains the fully qualified domain name (FQDN) of the server where the\\nenforcer is running.\",\n            \"example\": \"server1.domain.com\",\n            \"type\": \"string\"\n          },\n          \"ID\": {\n            \"description\": \"Identifier of the object.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"annotations\": {\n            \"additionalProperties\": {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            \"description\": \"Stores additional information about an entity.\",\n            \"type\": \"object\"\n          },\n          \"associatedTags\": {\n            \"description\": \"List of tags attached to an entity.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"certificate\": {\n            \"description\": \"The certificate of the enforcer.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"certificateRequest\": {\n            \"description\": \"If not empty during a create or update operation, the provided certificate\\nsigning request (CSR) will be validated and signed by the Microsegmentation\\nConsole, providing a renewed certificate.\",\n            \"example\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIICvDCCAaQCAQAwdzELMAkGA1UEBhMCVVMxDTALBgNVBAgMBFV0YWgxDzANBgNV\\nBAcMBkxpbmRvbjEWMBQGA1UECgwNRGlnaUNlcnQgSW5jLjERMA8GA1UECwwIRGln\\naUNlcnQxHTAbBgNVBAMMFGV4YW1wbGUuZGlnaWNlcnQuY29tMIIBIjANBgkqhkiG\\n9w0BAQEFAAOCAQ8AMIIBCgKCAQEA8+To7d+2kPWeBv/orU3LVbJwDrSQbeKamCmo\\nwp5bqDxIwV20zqRb7APUOKYoVEFFOEQs6T6gImnIolhbiH6m4zgZ/CPvWBOkZc+c\\n1Po2EmvBz+AD5sBdT5kzGQA6NbWyZGldxRthNLOs1efOhdnWFuhI162qmcflgpiI\\nWDuwq4C9f+YkeJhNn9dF5+owm8cOQmDrV8NNdiTqin8q3qYAHHJRW28glJUCZkTZ\\nwIaSR6crBQ8TbYNE0dc+Caa3DOIkz1EOsHWzTx+n0zKfqcbgXi4DJx+C1bjptYPR\\nBPZL8DAeWuA8ebudVT44yEp82G96/Ggcf7F33xMxe0yc+Xa6owIDAQABoAAwDQYJ\\nKoZIhvcNAQEFBQADggEBAB0kcrFccSmFDmxox0Ne01UIqSsDqHgL+XmHTXJwre6D\\nhJSZwbvEtOK0G3+dr4Fs11WuUNt5qcLsx5a8uk4G6AKHMzuhLsJ7XZjgmQXGECpY\\nQ4mC3yT3ZoCGpIXbw+iP3lmEEXgaQL0Tx5LFl/okKbKYwIqNiyKWOMj7ZR/wxWg/\\nZDGRs55xuoeLDJ/ZRFf9bI+IaCUd1YrfYcHIl3G87Av+r49YVwqRDT0VDV7uLgqn\\n29XI1PpVUNCPQGn9p/eX6Qo7vpDaPybRtA2R7XLKjQaF9oXWeCUqy1hvJac9QFO2\\n97Ob1alpHPoZ7mWiEuJwjBPii6a9M9G30nUo39lBi1w=\\n-----END CERTIFICATE REQUEST-----\",\n            \"type\": \"string\"\n          },\n          \"collectInfo\": {\n            \"description\": \"Indicates to the enforcer whether or not it needs to collect information.\",\n            \"type\": \"boolean\"\n          },\n          \"collectedInfo\": {\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"deprecated\": true,\n            \"description\": \"Represents the latest information collected by the enforcer.\",\n            \"type\": \"object\"\n          },\n          \"controller\": {\n            \"description\": \"The Microsegmentation Console identifier managing this object. This property is\\nmostly\\nuseful when federating multiple Microsegmentation Consoles.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"createTime\": {\n            \"description\": \"Creation date of the object.\",\n            \"format\": \"date-time\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"currentVersion\": {\n            \"description\": \"The version number of the installed enforcer binary.\",\n            \"type\": \"string\"\n          },\n          \"description\": {\n            \"description\": \"Description of the object.\",\n            \"type\": \"string\"\n          },\n          \"detectedHostModeContainers\": {\n            \"description\": \"This field indicates whether the enforcer has detected host mode containers.\",\n            \"type\": \"boolean\"\n          },\n          \"enforcementStatus\": {\n            \"default\": \"Inactive\",\n            \"description\": \"Status of the enforcement for host services.\",\n            \"enum\": [\n              \"Inactive\",\n              \"Active\",\n              \"Failed\"\n            ]\n          },\n          \"lastCollectionID\": {\n            \"description\": \"Identifies the last collection.\",\n            \"example\": \"xxx-xxx-xxx-xxx -\",\n            \"type\": \"string\"\n          },\n          \"lastCollectionTime\": {\n            \"description\": \"Identifies when the information was collected.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"lastMigrationTime\": {\n            \"description\": \"Last migration date of the enforcer.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"lastSyncTime\": {\n            \"description\": \"The time and date of the last heartbeat.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"localCA\": {\n            \"description\": \"Contains the initial chain of trust for the enforcer. This value is only\\ngiven when you retrieve a single enforcer.\",\n            \"type\": \"string\"\n          },\n          \"logLevel\": {\n            \"default\": \"Info\",\n            \"description\": \"Log level of the enforcer.\",\n            \"enum\": [\n              \"Info\",\n              \"Debug\",\n              \"Warn\",\n              \"Error\",\n              \"Trace\"\n            ]\n          },\n          \"logLevelDuration\": {\n            \"default\": \"10s\",\n            \"description\": \"Determines the duration of which the log level will be active, using [Golang\\nduration syntax](https://golang.org/pkg/time/#example_Duration).\",\n            \"type\": \"string\"\n          },\n          \"machineID\": {\n            \"description\": \"A unique identifier for every machine as detected by the enforcer. It is\\nbased on hardware information such as the SMBIOS UUID, MAC addresses of\\ninterfaces, or cloud provider IDs.\",\n            \"example\": \"3F23E8DF-C56D-45CF-89B8-A867F3956409\",\n            \"type\": \"string\"\n          },\n          \"metadata\": {\n            \"description\": \"Contains tags that can only be set during creation, must all start\\nwith the '@' prefix, and should only be used by external systems.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"migrationStatus\": {\n            \"default\": \"None\",\n            \"description\": \"Defines the migration status.\",\n            \"enum\": [\n              \"None\",\n              \"Running\",\n              \"Failed\"\n            ]\n          },\n          \"name\": {\n            \"description\": \"Name of the entity.\",\n            \"example\": \"the name\",\n            \"type\": \"string\"\n          },\n          \"namespace\": {\n            \"description\": \"Namespace tag attached to an entity.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"nextAvailableVersion\": {\n            \"description\": \"Defines the next version the enforcer will be migrated to.\",\n            \"type\": \"string\"\n          },\n          \"normalizedTags\": {\n            \"description\": \"Contains the list of normalized tags of the entities.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"readOnly\": true,\n            \"type\": \"array\"\n          },\n          \"operationalStatus\": {\n            \"default\": \"Registered\",\n            \"description\": \"The status of the enforcer.\",\n            \"enum\": [\n              \"Registered\",\n              \"Connected\",\n              \"Disconnected\",\n              \"Initialized\"\n            ]\n          },\n          \"previousOperationalStatus\": {\n            \"description\": \"Holds the previous operational status if it has changed.\",\n            \"enum\": [\n              \"Connected\",\n              \"Disconnected\",\n              \"Initialized\",\n              \"Registered\"\n            ],\n            \"readOnly\": true\n          },\n          \"protected\": {\n            \"description\": \"Defines if the object is protected.\",\n            \"type\": \"boolean\"\n          },\n          \"publicToken\": {\n            \"description\": \"The public token of the server that will be included in the datapath and\\nis signed by the private certificate authority.\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          },\n          \"startTime\": {\n            \"description\": \"The time and date on which this enforcer was started. The enforcer reports\\nthis and the value is preserved across disconnects.\",\n            \"format\": \"date-time\",\n            \"type\": \"string\"\n          },\n          \"subnets\": {\n            \"description\": \"Local subnets of this enforcer.\",\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"unreachable\": {\n            \"description\": \"The Microsegmentation Console sets this value to `true` if it hasn't heard from\\nthe enforcer in the last five minutes.\",\n            \"readOnly\": true,\n            \"type\": \"boolean\"\n          },\n          \"updateTime\": {\n            \"description\": \"Last update date of the object.\",\n            \"format\": \"date-time\",\n            \"readOnly\": true,\n            \"type\": \"string\"\n          }\n        },\n        \"required\": [\n          \"FQDN\",\n          \"name\"\n        ],\n        \"type\": \"object\"\n      }\n    }\n  },\n  \"info\": {\n    \"contact\": {\n      \"email\": \"dev@aporeto.com\",\n      \"name\": \"Aporeto Inc.\",\n      \"url\": \"go.aporeto.io/api\"\n    },\n    \"license\": {\n      \"name\": \"TODO\"\n    },\n    \"termsOfService\": \"https://localhost/TODO\",\n    \"title\": \"enforcer\",\n    \"version\": \"1.0\"\n  },\n  \"paths\": {\n    \"/enforcers\": {\n      \"get\": {\n        \"description\": \"Retrieves the list of enforcers.\",\n        \"operationId\": \"get-all-enforcers\",\n        \"parameters\": [\n          {\n            \"description\": \"Filtering query. Consequent `q` parameters will form an or.\",\n            \"example\": \"associatedTags contains ['$name=hello'] or type == 'Docker'\",\n            \"in\": \"query\",\n            \"name\": \"q\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/enforcer\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/enforcer\",\n          \"squall\"\n        ]\n      },\n      \"post\": {\n        \"description\": \"Creates a new enforcer.\",\n        \"operationId\": \"create-a-new-enforcer\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/enforcer\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/enforcer\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/enforcer\",\n          \"squall\"\n        ]\n      }\n    },\n    \"/enforcers/{id}\": {\n      \"delete\": {\n        \"description\": \"Deletes the enforcer with the given ID.\",\n        \"operationId\": \"delete-enforcer-by-ID\",\n        \"parameters\": [\n          {\n            \"description\": \"Filtering query. Consequent `q` parameters will form an or.\",\n            \"example\": \"associatedTags contains ['$name=hello'] or type == 'Docker'\",\n            \"in\": \"query\",\n            \"name\": \"q\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/enforcer\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/enforcer\",\n          \"squall\"\n        ]\n      },\n      \"get\": {\n        \"description\": \"Retrieves the enforcer with the given ID.\",\n        \"operationId\": \"get-enforcer-by-ID\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/enforcer\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/enforcer\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"put\": {\n        \"description\": \"Updates the enforcer with the given ID.\",\n        \"operationId\": \"update-enforcer-by-ID\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/enforcer\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/enforcer\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/enforcer\",\n          \"squall\"\n        ]\n      }\n    },\n    \"/enforcers/{id}/auditprofiles\": {\n      \"get\": {\n        \"description\": \"Returns a list of the audit profiles that must be applied to this enforcer.\",\n        \"operationId\": \"get-all-auditprofiles-for-a-given-enforcer\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./auditprofile#/components/schemas/auditprofile\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/audit\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/enforcers/{id}/debugbundles\": {\n      \"get\": {\n        \"description\": \"Retrieves the list of debug bundles.\",\n        \"operationId\": \"get-all-debugbundles-for-a-given-enforcer\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./debugbundle#/components/schemas/debugbundle\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"debug\",\n          \"guy\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"post\": {\n        \"description\": \"Uploads a debug bundle.\",\n        \"operationId\": \"create-a-new-debugbundle-for-a-given-enforcer\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"./debugbundle#/components/schemas/debugbundle\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"./debugbundle#/components/schemas/debugbundle\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"debug\",\n          \"guy\"\n        ]\n      }\n    },\n    \"/enforcers/{id}/enforcerprofiles\": {\n      \"get\": {\n        \"description\": \"Returns the enforcer profile that must be used by a enforcer.\",\n        \"operationId\": \"get-all-enforcerprofiles-for-a-given-enforcer\",\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./enforcerprofile#/components/schemas/enforcerprofile\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/enforcerconfig\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/enforcers/{id}/enforcerrefreshes\": {\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ],\n      \"post\": {\n        \"description\": \"Sends a enforcer refresh command.\",\n        \"operationId\": \"create-a-new-enforcerrefresh-for-a-given-enforcer\",\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"./enforcerrefresh#/components/schemas/enforcerrefresh\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"./enforcerrefresh#/components/schemas/enforcerrefresh\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core/policy\",\n          \"gaga\"\n        ]\n      }\n    },\n    \"/enforcers/{id}/hostservices\": {\n      \"get\": {\n        \"description\": \"Returns a list of the host services policies that apply to this enforcer.\",\n        \"operationId\": \"get-all-hostservices-for-a-given-enforcer\",\n        \"parameters\": [\n          {\n            \"description\": \"Valid when retrieved for a given enforcer and returns the applied services.\",\n            \"in\": \"query\",\n            \"name\": \"appliedServices\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Instructs Microsegmentation Console to cache the services that were resolved.\",\n            \"in\": \"query\",\n            \"name\": \"setServices\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./hostservice#/components/schemas/hostservice\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/hosts\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/enforcers/{id}/poke\": {\n      \"get\": {\n        \"description\": \"Sends a poke empty object. This is used to ensure a enforcer is up and running.\",\n        \"operationId\": \"get-all-poke-for-a-given-enforcer\",\n        \"parameters\": [\n          {\n            \"description\": \"Deprecated.\",\n            \"example\": 1000,\n            \"in\": \"query\",\n            \"name\": \"cpuload\",\n            \"schema\": {\n              \"type\": \"number\"\n            }\n          },\n          {\n            \"description\": \"If set, changes the enforcement status of the enforcer along with the poke.\",\n            \"in\": \"query\",\n            \"name\": \"enforcementStatus\",\n            \"schema\": {\n              \"enum\": [\n                \"Failed\",\n                \"Inactive\",\n                \"Active\"\n              ]\n            }\n          },\n          {\n            \"description\": \"If set, it will trigger a full poke (slower).\",\n            \"in\": \"query\",\n            \"name\": \"forceFullPoke\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"Deprecated.\",\n            \"example\": 1000,\n            \"in\": \"query\",\n            \"name\": \"memory\",\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          },\n          {\n            \"description\": \"Deprecated.\",\n            \"example\": 10,\n            \"in\": \"query\",\n            \"name\": \"processes\",\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          },\n          {\n            \"description\": \"If set, terminates a session for a enforcer.\",\n            \"in\": \"query\",\n            \"name\": \"sessionClose\",\n            \"schema\": {\n              \"type\": \"boolean\"\n            }\n          },\n          {\n            \"description\": \"If set, sends the current session ID of a enforcer.\",\n            \"example\": \"1233\",\n            \"in\": \"query\",\n            \"name\": \"sessionID\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"description\": \"If set, changes the status of the enforcer along with the poke.\",\n            \"in\": \"query\",\n            \"name\": \"status\",\n            \"schema\": {\n              \"enum\": [\n                \"Registered\",\n                \"Connected\",\n                \"Disconnected\"\n              ]\n            }\n          },\n          {\n            \"description\": \"time of report. If not set, local server time will be used.\",\n            \"in\": \"query\",\n            \"name\": \"ts\",\n            \"schema\": {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"description\": \"If set, version of the current running enforcer.\",\n            \"example\": \"v1.10\",\n            \"in\": \"query\",\n            \"name\": \"version\",\n            \"schema\": {\n              \"type\": \"string\"\n            }\n          },\n          {\n            \"description\": \"Can be set to help Microsegmentation Console target the correct shard where the enforcer is stored.\",\n            \"in\": \"query\",\n            \"name\": \"zhash\",\n            \"schema\": {\n              \"type\": \"integer\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./poke#/components/schemas/poke\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"core\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    },\n    \"/enforcers/{id}/trustedcas\": {\n      \"get\": {\n        \"description\": \"Returns the list of certificate authorities that should be trusted by this\\nenforcer.\",\n        \"operationId\": \"get-all-trustedcas-for-a-given-enforcer\",\n        \"parameters\": [\n          {\n            \"description\": \"Type of certificate to get.\",\n            \"example\": \"Any\",\n            \"in\": \"query\",\n            \"name\": \"type\",\n            \"schema\": {\n              \"enum\": [\n                \"Any\",\n                \"X509\",\n                \"SSH\"\n              ]\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"items\": {\n                    \"$ref\": \"./trustedca#/components/schemas/trustedca\"\n                  },\n                  \"type\": \"array\"\n                }\n              }\n            },\n            \"description\": \"n/a\"\n          }\n        },\n        \"tags\": [\n          \"policy/enforcerconfig\",\n          \"squall\"\n        ]\n      },\n      \"parameters\": [\n        {\n          \"in\": \"path\",\n          \"name\": \"id\",\n          \"required\": true,\n          \"schema\": {\n            \"type\": \"string\"\n          }\n        }\n      ]\n    }\n  },\n  \"tags\": [\n    {\n      \"description\": \"This tag is for group 'core/enforcer'\",\n      \"name\": \"core/enforcer\"\n    },\n    {\n      \"description\": \"This tag is for package 'squall'\",\n      \"name\": \"squall\"\n    }\n  ]\n}\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /enforcers/{id}/hostservices: get: operation \"get-all-hostservices-for-a-given-enforcer\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: resolve \"./hostservice#/components/schemas/hostservice\": find schema: external base \"./hostservice\" is not supported"
}