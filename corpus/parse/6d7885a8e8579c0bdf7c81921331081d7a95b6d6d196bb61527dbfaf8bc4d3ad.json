{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mahbubcseju/Rasa_Japanese"
		},
		"file": {
			"name": "rasa.yml",
			"size": 0,
			"path": "rasa/docs/_static/spec/rasa.yml",
			"byteSize": 42857,
			"content": "openapi: 3.0.1\ninfo:\n  title: \"Rasa - Server Endpoints\"\n  version: \"1.0.0\"\n  description: \u003e-\n    The Rasa server provides endpoints to retrieve trackers of\n    conversations as well as endpoints to modify them. Additionally,\n    endpoints for training and testing models are provided.\nservers:\n  - url: \"http://localhost:5005\"\n    description: \"Local development server\"\n\npaths:\n  /:\n    get:\n      tags:\n      - Server Information\n      summary: Health endpoint of Rasa Server\n      description: \u003e-\n        This URL can be used as an endpoint to run\n        health checks against. When the server is running\n        this will return 200.\n      responses:\n        200:\n          description: Up and running\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Welcome text of Rasa Server\n              example: \u003e-\n                Hello from Rasa: 1.0.0\n\n  /version:\n    get:\n      tags:\n      - Server Information\n      summary: Version of Rasa\n      description: \u003e-\n        Returns the version of Rasa.\n      responses:\n        200:\n          description: Version of Rasa\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                    description: \u003e-\n                      Rasa version number\n                  minimum_compatible_version:\n                    type: string\n                    description: \u003e-\n                      Minimum version this Rasa version is\n                      able to load models from\n              example:\n                version: 1.0.0\n                minimum_compatible_version: 1.0.0\n\n  /status:\n    get:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Server Information\n      summary: Status of the currently loaded Rasa model\n      description: \u003e-\n        Information about the currently loaded Rasa model.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  fingerprint:\n                    type: object\n                    description: Fingerprint of the loaded model\n                    example:\n                      config:\n                        - 7625d69d93053ac8520a544d0852c626\n                      domain:\n                        - 229b51e41876bbcbbbfbeddf79548d5a\n                      messages:\n                        - cf7eda7edcae128a75ee8c95d3bbd680\n                      stories:\n                        - b5facea681fd00bc7ecc6818c70d9639\n                      trained_at: 1556527123.42784\n                      version: 1.0.0\n                  model_file:\n                    type: string\n                    description: Path of the loaded model\n                    example: 20190429-103105.tar.gz\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n\n\n  /conversations/{conversation_id}/tracker:\n    get:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Retrieve a conversations tracker\n      description: \u003e-\n        The tracker represents the state of the conversation.\n        The state of the tracker is created by applying a\n        sequence of events, which modify the state. These\n        events can optionally be included in the response.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      - $ref: '#/components/parameters/include_events'\n      - $ref: '#/components/parameters/until'\n      responses:\n        200:\n          $ref: '#/components/responses/200Tracker'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /conversations/{conversation_id}/tracker/events:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Append events to a tracker\n      description: \u003e-\n        Appends one or multiple new events to the tracker state of the conversation.\n        Any existing events will be kept and the new events will be\n        appended, updating the existing state.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      - $ref: '#/components/parameters/include_events'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n              - $ref: '#/components/schemas/Event'\n              - type: array\n                items:\n                  $ref: '#/components/schemas/Event'\n      responses:\n        200:\n          $ref: '#/components/responses/200Tracker'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n    put:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Replace a trackers events\n      description: \u003e-\n        Replaces all events of a tracker with the passed\n        list of events. This endpoint should not be used to\n        modify trackers in a production setup, but rather\n        for creating training data.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      - $ref: '#/components/parameters/include_events'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventList'\n      responses:\n        200:\n          $ref: '#/components/responses/200Tracker'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /conversations/{conversation_id}/story:\n    get:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Retrieve an end-to-end story corresponding to a conversation\n      description: \u003e-\n        The story represents the whole conversation in end-to-end\n        format. This can be posted to the '/test/stories' endpoint and used\n        as a test.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      - $ref: '#/components/parameters/until'\n      responses:\n        200:\n          $ref: '#/components/responses/200Story'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /conversations/{conversation_id}/execute:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Run an action in a conversation\n      description: \u003e-\n        Runs the action, calling the action server if necessary.\n        Any responses sent by the executed action will be returned as\n        part of the endpoints result, they will not be sent over a\n        connected output channel.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      - $ref: '#/components/parameters/include_events'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionRequest'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  tracker:\n                    $ref: '#/components/schemas/Tracker'\n                  messages:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/BotMessage'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /conversations/{conversation_id}/predict:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Predict the next action\n      description: \u003e-\n        Runs the conversations tracker through the model's\n        policies to predict the scores of all actions present\n        in the model's domain. Actions are returned in the\n        'scores' array, sorted on their 'score' values.\n        The state of the tracker is not modified.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictResult'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n\n  /conversations/{conversation_id}/messages:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Tracker\n      summary: Add a message to a tracker\n      description: \u003e-\n        Adds a message to a tracker. This doesn't trigger\n        the prediction loop. It will log the message\n        on the tracker and return, no actions will be\n        predicted or run. This is often used together with the\n        predict endpoint.\n      parameters:\n      - $ref: '#/components/parameters/conversation_id'\n      - $ref: '#/components/parameters/include_events'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Message'\n      responses:\n        200:\n          $ref: '#/components/responses/200Tracker'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /model/train:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Train a Rasa model\n      description: \u003e-\n        Trains a Rasa model. Depending on the data given only a dialogue model,\n        only a NLU model, or a model combining a trained dialogue model with an\n        NLU model will be trained. The trained model is not loaded by default.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TrainingRequest'\n      responses:\n        200:\n          description: Zipped Rasa model\n          headers:\n            filename:\n              schema:\n                type: string\n              description: File name of the trained model.\n          content:\n            application/octet-stream:\n              schema:\n                $ref: '#/components/schemas/TrainingResult'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /model/test/stories:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Evaluate stories\n      description: \u003e-\n        Evaluates one or multiple stories against the currently\n        loaded Rasa model.\n      parameters:\n      - $ref: '#/components/parameters/e2e'\n      requestBody:\n        required: true\n        content:\n          text/markdown:\n            schema:\n              $ref: '#/components/schemas/StoriesTrainingData'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EvaluationStoriesResult'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /model/test/intents:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Perform an intent evaluation\n      description: \u003e-\n        Evaluates intents against the currently loaded Rasa model or the model specified in the query.\n      parameters:\n      - $ref: '#/components/parameters/model'\n      requestBody:\n        required: true\n        content:\n          text/markdown:\n            schema:\n              $ref: '#/components/schemas/NLUTrainingData'\n      responses:\n        200:\n          description: Intent evaluation result\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EvaluationIntentsResult'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /model/predict:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Predict an action on a temporary state\n      description: \u003e-\n        Predicts the next action on the tracker state as it is\n        posted to this endpoint. Rasa will create a temporary\n        tracker from the provided events and will use it to\n        predict an action. No messages will be sent and no\n        action will be run.\n      parameters:\n      - $ref: '#/components/parameters/include_events'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EventList'\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PredictResult'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        409:\n          $ref: '#/components/responses/409Conflict'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /model/parse:\n    post:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Parse a message using the Rasa model\n      description: \u003e-\n        Predicts the intent and entities of the message\n        posted to this endpoint. No messages will be stored\n        to a conversation and no action will be run. This will\n        just retrieve the NLU parse results.\n      parameters:\n      - $ref: '#/components/parameters/emulation_mode'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  type: string\n                  description: Message to be parsed\n                  example: \"Hello, I am Rasa!\"\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParseResult'\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n  /model:\n    put:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Replace the currently loaded model\n      description: \u003e-\n        Updates the currently loaded model.\n        First, tries to load the model from the local storage system.\n        Secondly, tries to load the model from the provided model server configuration.\n        Last, tries to load the model from the provided remote storage.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ModelRequest'\n      responses:\n        204:\n          description: Model was successfully replaced.\n        400:\n          $ref: '#/components/responses/400BadRequest'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n    delete:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Model\n      summary: Unload the trained model\n      description: \u003e-\n        Unloads the currently loaded trained model from the server.\n      responses:\n        204:\n          description: Model was sucessfully unloaded.\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n\n  /domain:\n    get:\n      security:\n      - TokenAuth: []\n      - JWT: []\n      tags:\n      - Domain\n      summary: Retrieve the loaded domain\n      description: \u003e-\n        Returns the domain specification the currently loaded\n        model is using.\n      responses:\n        200:\n          description: Domain was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Domain'\n            application/yaml:\n              schema:\n                $ref: '#/components/schemas/Domain'\n        401:\n          $ref: '#/components/responses/401NotAuthenticated'\n        403:\n          $ref: '#/components/responses/403NotAuthorized'\n        406:\n          $ref: '#/components/responses/406InvalidHeader'\n        500:\n          $ref: '#/components/responses/500ServerError'\n\n\ncomponents:\n\n  securitySchemes:\n\n    TokenAuth:\n      type: apiKey\n      in: query\n      name: token\n    JWT:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n\n  parameters:\n\n    conversation_id:\n      in: path\n      name: conversation_id\n      description: Id of the conversation\n      example: default\n      schema:\n        type: string\n      required: true\n    batch_size:\n      in: query\n      name: batch_size\n      description: Batch size to use for training.\n      example: 5\n      schema:\n        type: number\n        default: 5\n      required: false\n    epochs:\n      in: query\n      name: epochs\n      description: Number of epochs to train.\n      example: 30\n      schema:\n        type: number\n        default: 30\n      required: false\n    e2e:\n      in: query\n      name: e2e\n      description: Perform an end-to-end evaluation on the posted stories.\n      example: false\n      schema:\n        type: boolean\n        default: false\n      required: false\n    model:\n      in: query\n      name: model\n      description: \u003e-\n        Model that should be used for evaluation.\n        If the parameter is set, the model will be\n        fetched with the currently loaded configuration\n        setup. However, the currently loaded model\n        will not be updated. The state of the server\n        will not change. If the parameter is not set,\n        the currently loaded model will be used for\n        the evaluation.\n      example: rasa-model.tar.gz\n      schema:\n        type: string\n      required: false\n    include_events:\n      in: query\n      name: include_events\n      description: \u003e-\n        Specify which events of the tracker the response\n        should contain.\n      example: AFTER_RESTART\n      schema:\n        type: string\n        default: AFTER_RESTART\n        enum:\n          - AFTER_RESTART\n          - ALL\n          - APPLIED\n          - NONE\n    emulation_mode:\n      in: query\n      name: emulation_mode\n      description: \u003e-\n        Specify the emulation mode.\n      example: LUIS\n      schema:\n        type: string\n        enum:\n          - WIT\n          - LUIS\n          - DIALOGFLOW\n    until:\n      in: query\n      name: until\n      description: \u003e-\n        All events previous to the passed timestamp will be replayed.\n        Events that occur exactly at the target time will be included.\n      example: 1559744410\n      schema:\n        type: number\n        default: None\n      required: false\n\n  responses:\n\n    200Tracker:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Tracker'\n    200Story:\n      description: Success\n      content:\n        text/markdown:\n          example: \u003e-\n            ## story_00055028\n\n            * greet: hello\n             - utter_ask_howcanhelp\n            * inform: I'm looking for a [moderately priced](price:moderate)\n            [Indian](cuisine) restaurant for [two](people) people\n             - utter_on_it\n             - utter_ask_location\n    400BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            version: \"1.0.0\"\n            status: \"failure\"\n            reason: \"BadRequest\"\n            code: 400\n    401NotAuthenticated:\n      description: User is not authenticated.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            version: \"1.0.0\"\n            status: \"failure\"\n            reason: \"NotAuthenticated\"\n            message: \u003e-\n              User is not authenticated to access resource.\n            code: 403\n    403NotAuthorized:\n      description: User has insufficient permission.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            version: \"1.0.0\"\n            status: \"failure\"\n            reason: \"NotAuthorized\"\n            message: \u003e-\n              User has insufficient permission to access resource.\n            code: 403\n    406InvalidHeader:\n      description: Invalid header provided.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            version: \"1.0.0\"\n            status: \"failure\"\n            reason: \"InvalidHeader\"\n            message: \u003e-\n              Invalid header was provided with the request.\n            code: 406\n    409Conflict:\n      description: The request conflicts with the currently loaded model.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            version: \"1.0.0\"\n            status: \"failure\"\n            reason: \"Conflict\"\n            message: \u003e-\n              The request conflicts with the currently loaded model.\n            code: 409\n    500ServerError:\n      description: An unexpected error occurred.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            version: \"1.0.0\"\n            status: \"ServerError\"\n            message: \u003e-\n              An unexpected error occurred.\n            code: 500\n\n\n  schemas:\n\n    ModelRequest:\n      type: object\n      properties:\n        model_file:\n          type: string\n          description: Path to model file\n          example: \"/models/20190512.tar.gz\"\n        model_server:\n          $ref: '#/components/schemas/EndpointConfig'\n        remote_storage:\n          description: Name of remote storage system\n          type: string\n          example: \"aws\"\n          enum:\n            - aws\n            - gcs\n            - azure\n\n    ActionRequest:\n      type: object\n      properties:\n        name:\n          description: \u003e-\n            Name of the action to be executed.\n          type: string\n          example: utter_greet\n        policy:\n          description: \u003e-\n            Name of the policy that predicted the action (optional).\n          type: string\n        confidence:\n          description: \u003e-\n            Confidence of the prediction (optional).\n          type: number\n          example: 0.987232\n      required: [\"name\"]\n\n    Message:\n      type: object\n      properties:\n        text:\n          type: string\n          description: \u003e-\n            Message text\n          example: Hello!\n        sender:\n          type: string\n          description: \u003e-\n            Origin of the message - who sent it\n          example: user\n          enum:\n            - user\n        parse_data:\n          $ref: '#/components/schemas/ParseResult'\n      required: [\"text\", \"sender\"]\n\n    Entity:\n      type: object\n      description: Entities within a message\n      properties:\n        start:\n          type: integer\n          description: Char offset of the start\n        end:\n          type: integer\n          description: Char offset of the end\n        value:\n          type: string\n          description: Found value for entity\n        entity:\n          type: string\n          description: Type of the entity\n        confidence:\n          type: number\n      required: [\"start\", \"end\", \"value\", \"entity\"]\n\n    Intent:\n      type: object\n      description: Intent of the text\n      properties:\n        confidence:\n          type: number\n          description: Confidence of the intent\n          example: 0.6323\n        name:\n          type: string\n          description: Intent name\n          example: greet\n      required: [\"confidence\", \"name\"]\n\n    ParseResult:\n      type: object\n      properties:\n        entities:\n          type: array\n          description: Parsed entities\n          items:\n            $ref: '#/components/schemas/Entity'\n        intent:\n          $ref: '#/components/schemas/Intent'\n        intent_ranking:\n          type: array\n          description: Scores of all intents\n          items:\n            $ref: '#/components/schemas/Intent'\n        text:\n          type: string\n          description: Text of the message\n          example: \"Hello!\"\n      description: \u003e-\n        NLU parser information. If set, message\n        will not be passed through NLU, but instead\n        this parsing information will be used.\n      required: [\"text\"]\n\n    Event:\n      type: object\n      properties:\n        event:\n          type: string\n          description: Event name\n          example: \"slot\"\n        timestamp:\n          type: integer\n          description: Time of application\n          example: 1559744410\n      required: [\"event\"]\n\n    EventList:\n      type: array\n      items:\n        $ref: '#/components/schemas/Event'\n\n    Domain:\n      type: object\n      description: The bot's domain.\n      properties:\n        config:\n          type: object\n          description: Addional option\n          properties:\n            store_entities_as_slots:\n              type: boolean\n              description: Store all entites as slot when found\n              example: false\n        intents:\n          type: array\n          description: All intent names and properties\n          items:\n            $ref: '#/components/schemas/IntentDescription'\n        entities:\n          type: array\n          description: All entity names\n          items:\n            type: string\n          example: ['person', 'location']\n        slots:\n          description: Slot names and configuration\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/SlotDescription'\n        templates:\n          description: Bot response templates\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/TemplateDescription'\n        actions:\n          description: Available action names\n          type: array\n          items:\n            type: string\n          example: ['utter_greet', 'utter_goodbye', 'action_listen']\n\n    BotMessage:\n      type: object\n      properties:\n        recipient_id:\n          type: string\n          description: Id of the message receiver\n        text:\n          type: string\n          description: Message\n        image:\n          type: string\n          description: Image URL\n        buttons:\n          type: array\n          description: Quick reply buttons\n          items:\n            type: object\n            properties:\n              title:\n                type: string\n                description: Button caption\n              payload:\n                type: string\n                description: Payload to be sent if button is clicked\n        attachement:\n          type: array\n          description: Additional information\n          items:\n            type: object\n            properties:\n              title:\n                type: string\n                description: Attachement caption\n              payload:\n                type: string\n                description: Attachement payload\n\n    Tracker:\n      type: object\n      description: Conversation tracker which stores the conversation state.\n      properties:\n        conversation_id:\n          type: string\n          description: Id of the conversation\n          example: default\n        slots:\n          type: array\n          description: Slot values\n          items:\n            $ref: '#/components/schemas/Slot'\n        latest_message:\n          $ref: '#/components/schemas/ParseResult'\n        latest_event_time:\n          type: number\n          description: Most recent event time\n          example: 1537645578.314389\n        followup_action:\n          type: string\n          description: Deterministic scheduled next action\n        paused:\n          type: boolean\n          description: Bot is pasued\n          example: false\n        events:\n          type: array\n          description: Event history\n          items:\n            $ref: '#/components/schemas/Event'\n        latest_input_channel:\n          type: string\n          description: Communication channel\n          example: rest\n        latest_action_name:\n          type: string\n          description: Name of last bot action\n          example: action_listen\n        active_form:\n          type: object\n          description: Name of the active form\n          properties:\n            name:\n              type: string\n              description: Name of the acive form\n              example: restaurant_form\n\n    Error:\n      type: object\n      properties:\n        version:\n          type: string\n          description: Rasa version\n        status:\n          type: string\n          enum: [\"failure\"]\n          description: Status of the requested action\n        message:\n          type: string\n          description: Error message\n        reason:\n          type: string\n          description: Error category\n        details:\n          type: object\n          description: Additional error information\n        help:\n          type: string\n          description: Optional URL to additonal material\n        code:\n          type: number\n          description: HTTP status code\n\n    PredictResult:\n      type: object\n      properties:\n        scores:\n          type: array\n          description: Prediction results\n          items:\n            type: object\n            properties:\n              action:\n                type: string\n                description: Action name\n                example: utter_greet\n              score:\n                type: number\n                description: Assigned score\n                example: 1.0\n        policy:\n          type: string\n          description: \u003e-\n            Policy which predicted the most likely action\n          example: policy_2_KerasPolicy\n        tracker:\n          $ref: '#/components/schemas/Tracker'\n\n    EndpointConfig:\n      type: object\n      properties:\n        url:\n          type: string\n          description: URL pointing to model\n        params:\n          type: object\n          description: Parameters of request\n        headers:\n          type: object\n          description: HTTP headers\n        basic_auth:\n          description: Basic authentification data\n          type: object\n        token:\n          description: Token\n          type: string\n        token_name:\n          description: Name of token\n          type: string\n        wait_time_between_pulls:\n          type: integer\n          description: Time to wait between pulls from model server\n\n    TrainingRequest:\n      type: object\n      properties:\n        domain:\n          $ref: '#/components/schemas/DomainFile'\n        config:\n          $ref: '#/components/schemas/ConfigFile'\n        nlu:\n          $ref: '#/components/schemas/NLUTrainingData'\n        stories:\n          $ref: '#/components/schemas/StoriesTrainingData'\n        out:\n          type: string\n          description: Output directory\n          example: models\n        force:\n          type: boolean\n          description: \u003e-\n            Force a model training even if the data has not changed\n          example: false\n      required: [\"config\"]\n\n    NLUTrainingData:\n      type: string\n      description: Rasa NLU training data in markdown format\n      example:  \u003e-\n        ## intent:greet\n        - hey\n        - hello\n\n        ## intent:goodbye\n        - cu\n        - goodbye\n\n    StoriesTrainingData:\n      type: string\n      description: Rasa Core stories in markdown format\n      example: \u003e-\n        ## happy path\n        * greet\n          - utter_greet\n        * mood_great\n          - utter_happy\n\n        ## sad path 1\n        * greet\n          - utter_greet\n        * mood_unhappy\n\n    DomainFile:\n      type: string\n      description: Rasa domain in plain text\n      example: \u003e-\n        intents:\n          - greet\n          - goodbye\n          - affirm\n          - deny\n          - mood_great\n          - mood_unhappy\n\n        actions:\n        - utter_greet\n        - utter_cheer_up\n        - utter_did_that_help\n        - utter_happy\n        - utter_goodbye\n\n        templates:\n          utter_greet:\n          - text: \"Hey! How are you?\"\n\n          utter_cheer_up:\n          - text: \"Here is something to cheer you up:\"\n            image: \"https://i.imgur.com/nGF1K8f.jpg\"\n\n          utter_did_that_help:\n          - text: \"Did that help you?\"\n\n          utter_happy:\n          - text: \"Great carry on!\"\n\n          utter_goodbye:\n          - text: \"Bye\"\n\n    ConfigFile:\n      type: string\n      description: Rasa config in plain text\n      example: \u003e-\n        # Configuration for Rasa NLU.\n        # https://rasa.com/docs/nlu/components/\n        language: en\n        pipeline: supervised_embeddings\n\n        # Configuration for Rasa Core.\n        # https://rasa.com/docs/core/policies\n        policies:\n          - name: MemoizationPolicy\n          - name: KerasPolicy\n\n    TrainingResult:\n      type: string\n      format: binary\n\n    EvaluationIntentsResult:\n      type: object\n      properties:\n        intent_evaluation:\n          type: object\n          description: Rasa NLU intent evaluation\n          properties:\n            report:\n              type: string\n              example:  \u003e-\n                # intent evaluation report\n                          precision    recall  f1-score   support\n\n                goodbye        1.00      1.00      1.00         4\n                greet          1.00      1.00      1.00         6\n                affirm         1.00      1.00      1.00         5\n                deny           1.00      1.00      1.00         6\n                mood_great     1.00      1.00      1.00         8\n                mood_unhappy   1.00      1.00      1.00        10\n\n                micro avg      1.00      1.00      1.00        39\n                macro avg      1.00      1.00      1.00        39\n                weighted avg   1.00      1.00      1.00        39\n            accuracy:\n              type: number\n              example: 0.19047619047619047\n            f1_score:\n              type: number\n              example: 0.06095238095238095\n            precision:\n              type: number\n              example: 0.036281179138321996\n            predictions:\n              type: array\n              items:\n                type: object\n                properties:\n                  intent:\n                    type: string\n                    example: greet\n                  predicted:\n                    type: string\n                    example: greet\n                  text:\n                    type: string\n                    example: \"hey\"\n                  confidence:\n                    type: number\n                    example: 0.9973567\n        entity_evaluation:\n          type: object\n          description: Rasa NLU entity evaluation\n          properties:\n            extractor_name:\n              type: object\n              description: Entity evaluation result for entity extractor\n              example: CRFEntityExtractor\n              properties:\n                report:\n                  type: string\n                  example: \u003e-\n                    # entity evaluation report\n                               precision     recall  f1-score   support\n\n                    no_entity       1.00      1.00      1.00        70\n\n                    micro avg       1.00      1.00      1.00        70\n                    macro avg       1.00      1.00      1.00        70\n                    weighted avg    1.00      1.00      1.00        70\n                precision:\n                  type: number\n                  example: 0.9769792\n                f1_score:\n                  type: number\n                  example: 0.967869\n                accuracy:\n                  type: number\n                  example: 0.978567\n\n    EvaluationStoriesResult:\n      type: object\n      properties:\n        actions:\n          type: array\n          items:\n            type: object\n            properties:\n              action:\n                type: string\n                description: Name of the actual action\n                example: utter_ask_howcanhelp\n              predicted:\n                type: string\n                description: Name of the predicted action\n                example: utter_ask_howcanhelp\n              policy:\n                type: string\n                description: Machine-learning policy used in the prediction\n                example: policy_0_MemoizationPolicy\n              confidence:\n                type: string\n                description: Confidence score of the prediction\n                example: 1.0\n          description: \u003e-\n            Accuracy of the classification,\n            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html\n        is_end_to_end_evaluation:\n          type: boolean\n          description: True if evaluation is end-to-end, false otherwise\n          example: true\n        precision:\n          type: number\n          description: \u003e-\n            Precision of the classification, see\n            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html\n          example: 1.0\n        f1:\n          type: number\n          description: \u003e-\n            F1 score of the classification,\n            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html\n          example: 0.9333333333333333\n        accuracy:\n          type: number\n          description: \u003e-\n            Accuracy of the classification,\n            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html\n          example: 0.9\n        in_training_data_fraction:\n          type: number\n          description: \u003e-\n            Fraction of stories that are present in the training data of the\n            model loaded at evaluation time.\n          example: 0.8571428571428571\n        report:\n          type: string\n          description: \u003e-\n            Sklearn classifcation report, see\n            http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html\n          example:  \u003e-\n            # classification report\n                                   precision    recall  f1-score   support\n                    action_listen       1.00      1.00      1.00         3\n                            greet       1.00      1.00      1.00         1\n                           inform       1.00      1.00      1.00         2\n             utter_ask_howcanhelp       1.00      1.00      1.00         1\n               utter_ask_location       1.00      1.00      1.00         1\n              utter_ask_numpeople       0.00      0.00      0.00         0\n                      utter_on_it       1.00      0.50      0.67         2\n\n                      avg / total       1.00      0.90      0.93        10\n\n    Slot:\n      type: object\n      additionalProperties:\n        $ref: '#/components/schemas/SlotValue'\n      example:\n        slot_name: slot_value\n\n    SlotValue:\n      oneOf:\n        - type: string\n        - type: array\n          items:\n            type: string\n\n    SlotDescription:\n      type: object\n      properties:\n        auto_fill:\n          type: boolean\n        initial_value:\n          type: string\n          nullable: true\n        type:\n          type: string\n        values:\n          type: array\n          items:\n            type: string\n      required: ['type', 'auto_fill']\n\n    TemplateDescription:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Template text\n      required: ['text']\n\n    IntentDescription:\n      type: object\n      additionalProperties:\n        type: object\n        properties:\n          use_entities:\n            type: boolean\n\n"
		}
	},
	"Error": "parse: parse spec: paths: /conversations/{conversation_id}/tracker: get: operation \"\": parameters: parse parameter \"\": resolve \"#/components/parameters/until\" reference: schema: parse default: expected type \"number\", got \"string\""
}