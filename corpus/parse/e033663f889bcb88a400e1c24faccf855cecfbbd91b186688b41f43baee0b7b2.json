{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RHEnVision/provisioning-backend"
		},
		"file": {
			"name": "path.yaml",
			"size": 0,
			"path": "cmd/spec/path.yaml",
			"byteSize": 10962,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: \"THIS API IS IN DEVELOPMENT - ENDPOINTS MIGHT CHANGE\"\n  license:\n    name: GPL-3.0\n  title: provisioning-api\n  version: 1.0.0\n\npaths:\n  /pubkeys/{ID}:\n    get:\n      operationId: getPubkeyById\n      description: \u003e\n        A pubkey represents an SSH public portion of a key pair with name and body.\n        Pubkeys must have unique name and body (SSH public key fingerprint) per each account.\n        To find if a pubkey was uploaded to particular cloud, check PubkeyResource resource.\n      parameters:\n        - name: ID\n          in: path\n          required: true\n          description: 'Database ID of resource.'\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: 'Returned on success.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.PubkeyResponse'\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n    delete:\n      operationId: removePubkeyById\n      description: \u003e\n        A pubkey represents an SSH public portion of a key pair with name and body.\n        If a pubkey was uploaded to one or more clouds, the deletion request will\n        attempt to delete those SSH keys from all clouds. This means in order to delete\n        a pubkey the account must have valid credentials to all cloud accounts the pubkey\n        was uploaded to, otherwise the delete operation will fail and the pubkey will\n        not be deleted from Provisioning database.\n      parameters:\n        - name: ID\n          in: path\n          required: true\n          description: 'Database ID of resource.'\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"204\":\n          description: The Pubkey was deleted successfully.\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /pubkeys:\n    post:\n      operationId: createPubkey\n      description: \u003e\n        A pubkey represents an SSH public portion of a key pair with name and body.\n        When pubkey is created, it is stored in the Provisioning database. Pubkeys are\n        uploaded to clouds when an instance is launched.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/v1.PubkeyRequest\"\n        description: request body\n        required: true\n      responses:\n        '200':\n          description: 'Returned on success.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.PubkeyResponse'\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n    get:\n      operationId: getPubkeyList\n      description: \u003e\n        A pubkey represents an SSH public portion of a key pair with name and body.\n        This operation returns list of all pubkeys for particular account.\n      responses:\n        '200':\n          description: 'Returned on success.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/v1.PubkeyResponse'\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /sources:\n    get:\n      description: 'Return list of provisioning sources'\n      operationId: getSourceList\n      responses:\n        '200':\n          description: Returned on success.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/v1.SourceResponse'\n        '500':\n          $ref: \"#/components/responses/InternalError\"\n  /sources/{ID}/instance_types:\n      get:\n        description: 'Return a list of instance types (DEPRECATED: use /instance_types)'\n        operationId: getInstanceTypeList\n        parameters:\n        - in: path\n          name: ID\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: 'Source ID from Sources Database'\n        - in: query\n          name: region\n          schema:\n            type: string\n          required: true\n          description: List instance types of the specified region\n        responses:\n          '200':\n            description: Return on success.\n            content:\n              application/json:\n                schema:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/v1.InstanceTypeResponse'\n          '404':\n            $ref: \"#/components/responses/NotFound\"\n          '500':\n            $ref: \"#/components/responses/InternalError\"\n  /instance_types/{PROVIDER}:\n    get:\n      description: \u003e\n        Return a list of instance types for particular provider. A region must be provided. A zone must be provided\n        for Azure.\n      operationId: getInstanceTypeListAll\n      parameters:\n        - in: path\n          name: PROVIDER\n          schema:\n            type: string\n          required: true\n          description: 'Cloud provider: aws, azure'\n        - in: query\n          name: region\n          schema:\n            type: string\n          required: true\n          description: Region to list instance types within. This is required.\n        - in: query\n          name: zone\n          schema:\n            type: string\n          required: false\n          description: Availability zone (or location) to list instance types within. Not applicable for AWS EC2 as\n            all zones within a region are the same (will lead to an error when used). Required for Azure.\n      responses:\n        '200':\n          description: \u003e\n            Return on success. Instance types have a field \"supported\" that indicates\n            whether that particular type is supported by Red Hat. Typically, instances\n            with less than 1.5 GiB RAM are not supported, but other rules may apply.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/v1.InstanceTypeResponse'\n        '404':\n          $ref: \"#/components/responses/NotFound\"\n        '500':\n          $ref: \"#/components/responses/InternalError\"\n  /reservations:\n    get:\n      operationId: getReservationsList\n      description: \u003e\n        A reservation is a way to activate a job, keeps all data needed for a job to start.\n        This operation returns list of all reservations for particular account. To get a\n        reservation with common fields, use /reservations/ID. To get a detailed reservation\n        with all fields which are different per provider, use /reservations/aws/ID.\n      responses:\n        '200':\n          description: 'Returned on success.'\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/v1.ReservationResponse'\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /reservations/{ID}:\n    get:\n      description: 'Return a generic reservation by id'\n      operationId: getReservationByID\n      parameters:\n      - in: path\n        name: ID\n        schema:\n          type: integer\n          format: int64\n        required: true\n        description: 'Reservation ID'\n      responses:\n        \"200\":\n          description: 'Returns generic reservation information like status or creation time.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.ReservationResponse'\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /reservations/aws:\n    post:\n      operationId: createAwsReservation\n      description: \u003e\n        A reservation is a way to activate a job, keeps all data needed for a job to start.\n        An AWS reservation is a reservation created for an AWS job. Image Builder UUID image\n        is required, the service will also launch any AMI image prefixed with \"ami-\".\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/v1.AWSReservationRequest'\n        description: aws request body\n        required: true\n      responses:\n        '200':\n          description: 'Returned on success.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.AWSReservationResponse'\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /reservations/aws/{ID}:\n    get:\n      description: 'Return an AWS reservation with details by id'\n      operationId: getAWSReservationByID\n      parameters:\n        - in: path\n          name: ID\n          schema:\n            type: integer\n            format: int64\n          required: true\n          description: 'Reservation ID, must be an AWS reservation otherwise 404 is returned'\n      responses:\n        \"200\":\n          description: 'Returns detailed reservation information for an AWS reservation.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.AWSReservationResponse'\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /reservations/noop:\n    post:\n      operationId: createNoopReservation\n      description: \u003e\n        A reservation is a way to activate a job, keeps all data needed for a job to start.\n        A Noop reservation actually does nothing and immediately finish background job.\n        This reservation has no input payload\n      responses:\n        '200':\n          description: 'Returned on success.'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/v1.NoopReservationResponse'\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n  /availability_status/sources:\n    post:\n      operationId: availabilityStatus\n      description: \u003e\n        Schedules a background operation of Sources availability check. These checks are\n        are performed in separate process at it's own pace. Results are sent via Kafka\n        to Sources. There is no output from this REST operation available, no tracking\n        of jobs is possible.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/v1.AvailabilityStatusRequest'\n        description: availability status request with source id\n        required: true\n      responses:\n        '200':\n          description: 'Returned on success, empty response.'\n        \"500\":\n          $ref: '#/components/responses/InternalError'\n",
			"canonicalURL": "/github.com/RHEnVision/provisioning-backend@0de9ebb3e761b640da4e3917f3ed187991da84d2/-/blob/cmd/spec/path.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/RHEnVision/provisioning-backend/blob/0de9ebb3e761b640da4e3917f3ed187991da84d2/cmd/spec/path.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/availability_status/sources\": post: operation \"availabilityStatus\": requestBody: parse content: application/json: schema: parse schema: at cmd/spec/path.yaml:304:21: $ref: resolve \"#/components/schemas/v1.AvailabilityStatusRequest\": resolve: can't find value for \"components/schemas/v1.AvailabilityStatusRequest\""
}