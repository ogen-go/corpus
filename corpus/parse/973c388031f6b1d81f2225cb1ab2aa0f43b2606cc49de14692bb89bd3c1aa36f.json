{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hypothesis/h"
		},
		"file": {
			"name": "hypothesis-v1.yaml",
			"size": 0,
			"path": "docs/_extra/api-reference/hypothesis-v1.yaml",
			"byteSize": 36886,
			"content": "openapi: 3.0.0\n# -----------------------------------------------------------------------------\n# API metadata\n# -----------------------------------------------------------------------------\ninfo:\n  title: Hypothesis API\n  version: 1.0.0\n  termsOfService: https://hypothes.is/terms-of-service\n  license:\n    name: BSD (2-Clause)\n    url: https://github.com/hypothesis/h/blob/master/LICENSE\n  description: |\n\n    # Hypothesis API\n\n    This is a reference for the Hypothesis HTTP API version 1.0.\n\n    See [the API overview](https://h.readthedocs.io/en/latest/api/)\n    for an introduction to the API and information about other versions.\n\n    ## Versions\n\n    There are currently two versions of the Hypothesis API.\n\n    * [v1: Stable](https://h.readthedocs.io/en/latest/api-reference/v1/) —\n      This version is recommended for all users at this time\n    * [v2: Experimental](https://h.readthedocs.io/en/latest/api-reference/v2/)\n\n    By default, API requests will receive the **v1** version of the Hypothesis API.\n    Though not required, we urge clients to set an `Accept` header with a media\n    type corresponding to the desired version, e.g.\n\n    ```\n    Accept: application/vnd.hypothesis.v1+json\n    ```\n\n    If an `Accept` header is set with an unrecognized media type, the API will\n    return an HTTP 406 (Not Acceptable) error.\n\n    Responses to API requests include a header indicating which API version was used\n    to handle the request, e.g.:\n\n    ```\n    Hypothesis-Media-Type: application/vnd.hypothesis.v1+json\n    ```\n\n    ## Authorization\n\n    API requests which only read public data do not require authorization.\n\n    Other requests need to be authenticated and authorized. To learn more, see:\n\n    * [The Authentication section of this document](https://h.readthedocs.io/en/latest/api-reference/v1/#section/Authentication)\n    * [Hypothesis API authorization documentation](https://h.readthedocs.io/en/latest/api/authorization)\n\n    ## Expanding Resources\n\n    Resources often contain links to related resources in their response bodies.\n    Some endpoints support resource expansion, allowing those related resources\n    to be expanded inline within the response.\n\n\n    To expand resources (where supported), use the `expand` request parameter.\n    Documentation for endpoints identify which resources are expandable, if any.\n\n    ```\n    GET /api/things?expand=organization\u0026expand=foobar\n    ```\n\n    Values for `expand` are the fields to expand. The above would expand\n    `organization` and `foobar` fields within the (hypothetical) returned `thing`\n    objects. You can expand multiple fields by providing multiple values in the\n    `expand` Array.\n\n    ## Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure\n    of requests. The body of the response will be JSON in the following format:\n\n    ```\n    {\n      \"status\": \"failure\",\n      \"reason\": \"a human-readable string about what went wrong\"\n    }\n    ```\n\n    ### HTTP Status Codes\n\n    Any API service may raise any of the following common errors.\n\n    | Code        | Title         | Notes                                       |\n    | ----------- | ------------- | ---------------------------------------------\n    | 400         | Bad Request   | The server could not process the request because it was malformed |\n    | 403         | Unauthorized  | v1 of the API only returns 404s, to avoid leaking resource existence |\n    | 404         | Not Found     | Resource not found or permission failure    |\n    | 409         | Conflict      | Resource could not be created because of a conflict—resource already exists |\n    | 406         | Not Acceptable | The request's `Accept` header designates an unacceptable media type |\n    | 500         | Server Error  | An error occurred with our API |\n\nservers:\n  - url: https://api.hypothes.is/api\n\n# -----------------------------------------------------------------------------\n# Reusable tags for grouping operations\n# -----------------------------------------------------------------------------\ntags:\n  - name: general\n  - name: annotations\n  - name: groups\n  - name: profile\n  - name: users\n\n# -----------------------------------------------------------------------------\n# Reusable components\n# -----------------------------------------------------------------------------\ncomponents:\n  # -------------------------\n  # Reusable parameters\n  # -------------------------\n  parameters:\n    AnnotationID:\n      name: id\n      in: path\n      required: true\n      schema:\n        description: The annotation's unique identifier\n        type: string\n    GroupID:\n      name: id\n      in: path\n      required: true\n      schema:\n        description: |\n          Either a unique identifier generated by the service or an authority-provided identifier\n        oneOf:\n          - type: string\n            description: A short string — the group ID assigned by the service\n            example: 4j7Dko3R\n          - type: string\n            pattern: \"group:[a-zA-Z0-9._\\\\-+!~*()']{1,1024}@.*$\"\n            description: Unique identifier assigned by the group's owning authority\n            example: 'group:338facc93@myauthority.net'\n    GroupExpand:\n      name: expand\n      in: query\n      required: false\n      description: |\n        One or more relations to expand for a group resource\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - organization\n            - scopes\n    Username:\n      name: username\n      in: path\n      required: true\n      description: |\n        The user's username\n      schema:\n        type: string\n    UserID:\n      name: user\n      in: path\n      required: true\n      description: |\n        Unique identifier for a user, with specified authority.\n        The userID should be of the format `acct:\u003cusername\u003e@\u003cauthority\u003e`\n      schema:\n        type: string\n        pattern: 'acct:^[A-Za-z0-9._]{3,30}@.*$'\n\n  # -------------------------\n  # Reusable responses\n  # -------------------------\n  responses:\n    NoContent:\n      description: Success (No Content)\n    BadRequest:\n      description: Bad Request\n      content:\n        application/*json:\n          schema:\n            $ref: './schemas/errors.yaml#/Error'\n    Conflict:\n      description: Conflict\n      content:\n        application/*json:\n          schema:\n            $ref: './schemas/errors.yaml#/Error'\n    NotFound:\n      description: Not Found or Permission Denied\n      content:\n        application/*json:\n          schema:\n            $ref: './schemas/errors.yaml#/Error'\n    NotAcceptable:\n      description: Not Acceptable\n      content:\n        application/*json:\n          schema:\n            $ref: './schemas/errors.yaml#/Error'\n\n  # --------------------------\n  # Resusable security schemes\n  # --------------------------\n  securitySchemes:\n    AuthClient:\n      type: http\n      scheme: basic\n      description: |\n        An AuthClient is a special registered set of credentials associated with a\n        particular \"authority\", (typically formatted as a domain, e.g. `myauthority.com`).\n        Requests authenticated in this manner allow the retrieval and manipulation\n        of resources (e.g. users, groups) across an entire authority, not just for\n        a single authenticated user.\n\n        These credentials must be pre-registered with the service provider.\n\n    AuthClientForwardedUser:\n      type: apiKey\n      in: header\n      name: X-Forwarded-User\n      description: |\n        May only be used in conjunction with AuthClient authentication. Allows\n        requests with AuthClient authentication to perform actions \"on behalf of\"\n        users within the registered authority. The value of this header should be\n        the userid of the intended forwarded user, e.g. `acct:username@myauthority.net`\n\n    ApiKey:\n      type: http\n      scheme: bearer\n      description: |\n        An API key corresponds to a single user. Requests authenticated in this\n        manner may retrieve and manipulate resources based on the authorization\n        of the associated user.\n\n  # ------------------------------\n  # Resusable resource schemas\n  # ------------------------------\n  schemas:\n    Annotation:\n      $ref: './schemas/annotation.yaml#/Annotation'\n    AnnotationCreate:\n      $ref: './schemas/annotation-create.yaml#/Annotation'\n    Group:\n      $ref: './schemas/group.yaml#/Group'\n    GroupCreate:\n      $ref: './schemas/group-new.yaml#/Group'\n    GroupUpdate:\n      $ref: './schemas/group-update.yaml#/Group'\n    Profile:\n      $ref: './schemas/profile.yaml#/Profile'\n    User:\n      $ref: './schemas/user.yaml#/User'\n    UserFull:\n      $ref: './schemas/user.yaml#/UserFull'\n    UserCreate:\n      $ref: './schemas/user-new.yaml#/User'\n    UserUpdate:\n      $ref: './schemas/user-update.yaml#/User'\n\n# -----------------------------------------------------------------------------\n# API OPERATIONS\n# -----------------------------------------------------------------------------\npaths:\n  # ---------------------------------------------------------------------------\n  # Service Root\n  # ---------------------------------------------------------------------------\n  /:\n    get:\n      tags:\n        - general\n      summary: Service root\n      description: Provides a list of links to resources offered by the API.\n      responses:\n        '200':\n          description: Success\n      security: []\n\n  # ---------------------------------------------------------------------------\n  # Operations on Annotation collections\n  # ---------------------------------------------------------------------------\n  /annotations:\n    # ---------------------------------------------------------------------------\n    # POST annotations - Create an annotation\n    # ---------------------------------------------------------------------------\n    post:\n      tags:\n        - annotations\n      summary: Create a new annotation\n      security:\n        - ApiKey: []\n      requestBody:\n        description: |\n          Full representation of Annotation resource and applicable relationships.\n          _Note_: While the API accepts arbitrary Annotation selectors in the\n          `target.selector` property, the Hypothesis client currently supports\n          `TextQuoteSelector`, `RangeSelector` and `TextPositionSelector` selector.\n        required: true\n        content:\n          application/*json:\n            schema:\n              $ref: '#/components/schemas/AnnotationCreate'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n\n  # ---------------------------------------------------------------------------\n  # GET /search - Search annotations\n  # ---------------------------------------------------------------------------\n  /search:\n    get:\n      tags:\n        - annotations\n      summary: Search for annotations\n      parameters:\n        - name: limit\n          in: query\n          description: The maximum number of annotations to return.\n          schema:\n            type: integer\n            minimum: 0\n            default: 20\n            maximum: 200\n        - name: sort\n          in: query\n          schema:\n            description: The field by which annotations should be sorted.\n            type: string\n            enum: [created, updated, group, id, user]\n            default: updated\n        - name: search_after\n          in: query\n          example: 2019-01-03T19:46:09.334539+00:00\n          description: |\n            Define a start point for a subset (page) of annotation search results.\n\n            Working against the sorted, full set of annotation records matching the current\n            search query, the service will examine the values present in the field by which\n            annotations are sorted (i.e. `sort`). The returned subset\n            of search results will begin with the first annotation whose `sort` field's value\n            comes after the value of `search_after` sequentially.\n\n            The format of this property depends on the current value of `sort`.\n            When `search_after` is used in conjunction with a chronological `sort` value—e.g.\n            `updated`, `created`—this parameter should be formatted as an ISO 8601 string. It\n            may also be formatted in ms (milliseconds) since the Epoch.\n\n            *Expanded example*\n\n            Given a query containing a (URI-encoded) `search_after` value of `2019-01-03T19:46:09.334539+00:00`:\n\n            \u003e`sort=created\u0026search_after=2019-01-03T19%3A46%3A09.334539%2B00%3A00`\n\n            The returned results would begin with the record immediately subsequent to the annotation\n            created at `2019-01-03T19:46:09.334539+00:00` in the full set of results. If there is no\n            annotation in the full result set whose `created` value exactly matches\n            `2019-01-03T19:46:09.334539+00:00`,\n\n            the returned subset will begin with the first annotation whose `created` value\n            comes sequentially \"after\" `2019-01-03T19:46:09.334539+00:00` in the full, sorted set.\n\n            _Note:_ `search_after` provides an efficient, stateless paging mechanism. Its\n            use is preferred over that of `offset`.\n          schema:\n            type: string\n        - name: offset\n          in: query\n          description: |\n            The number of initial annotations to skip in the result set.\n\n            May be used for pagination of result sets. The usage of `search_after` is preferred,\n            especially for large batches, as it is considerably more efficient.\n          schema:\n            type: integer\n            maximum: 9800\n            default: 0\n        - name: order\n          in: query\n          description: The order in which the results should be sorted.\n          schema:\n            type: string\n            enum: [asc, desc]\n            default: desc\n        - name: uri\n          in: query\n          description: |\n            Limit the results to annotations matching the specific URI or equivalent URIs.\n\n            URI can be a URL (a web page address) or a URN representing another kind of\n            resource such as DOI (Digital Object Identifier) or a PDF fingerprint.\n\n            Examples:\n\n            * `http://example.com/articles/01/name` (URL)\n            * `doi:10.1.1/1234` (DOI)\n            * `urn:x-pdf:1234` (PDF fingerprint)\n          schema:\n            type: string\n            format: uri\n        - name: url\n          in: query\n          description: Alias of `uri`\n          schema:\n            type: string\n            format: uri\n        - name: uri.parts\n          in: query\n          example: 'yogur'\n          description: |\n            Limit the results to annotations containing the given keyword (tokenized chunk) in\n            the URI. The value must exactly match an individual URI keyword.\n\n            URIs are split on characters `#+/:=?.-` into their keywords.\n\n            *Expanded example*\n\n            Given a value of `yogur`, annotations with any of the following URIs would match:\n\n            * `https://www.yogur.com/foo/bar`\n            * `https://www.example.com/yogur/eatmore.html`\n            * `https://www.example.com/foo/eat-more-yogur-this-year`\n\n            The following would not be matches:\n\n            * `https://www.yogurt.com/foo/bar`\n            * `https://www.example.com/yogurt/eatmore.html`\n            * `https://www.example.com/foo/eat-more-yogurt-this-year`\n\n          schema:\n            type: string\n        - name: wildcard_uri\n          in: query\n          example: 'http://foo.com/*'\n          description: |\n            Limit the results to annotations whose URIs match the wildcard pattern.\n\n            `*` will match any character sequence (including an empty one),\n            and a `_` will match any single character. Wildcards are only permitted\n            within the path and query parts of the URI. Escaping wildcards is not supported.\n\n            Examples of valid values:\n\n            * `http://foo.com/*`\n            * `urn:x-pdf:*`\n            * `file://localhost/_bc.pdf`\n\n            Examples of invalid values (not within path or query parts of URI):\n\n            * `*foo.com`\n            * `u_n:*`\n            * `file://*`\n            * `http://foo.com*`\n\n            \u003cmark\u003eThis feature is experimental and the API may change.\u003c/mark\u003e\n          schema:\n            type: string\n        - name: user\n          in: query\n          example: acct:username@hypothes.is\n          description: Limit the results to annotations made by the specified user.\n          schema:\n            type: string\n            pattern: 'acct:^[A-Z0-9._]{3,30}@.*$'\n        - name: group\n          in: query\n          example: '8JmD3iz1'\n          description: Limit the results to annotations made in the specified group (by group ID).\n          schema:\n            type: string\n        - name: tag\n          in: query\n          example: 'artificial intelligence'\n          description: |\n            Limit the results to annotations tagged with the specified value.\n\n            For example: `artificial intelligence` will find all annotations whose tags\n            contain both `artificial` **AND** `intelligence`.\n          schema:\n            type: string\n        - name: tags\n          in: query\n          example:\n            - artificial\n            - intelligence\n          description: |\n            Similar to `tag` but allows a comma-separated list of multiple tags.\n\n            For example: `[intelligence,artificial]` will find all annotations whose tags\n            contain both `artificial` **AND** `intelligence`.\n          schema:\n            type: array\n            items:\n              type: string\n        - name: any\n          in: query\n          example: 'ribosome'\n          description: |\n            Limit the results to annotations who contain the indicated keyword\n            in any of the following fields:\n\n            * `quote`\n            * `tags`\n            * `text`\n            * `url`\n          schema:\n            type: string\n        - name: quote\n          in: query\n          example: 'unicorn helmets'\n          description: |\n            Limit the results to annotations that contain this text inside\n            the text that was annotated.\n\n            For example: `unicorn helmets` would return all annotations containing\n            `unicorn` **OR** `helmets` in their quoted (i.e. annotated) text.\n          schema:\n            type: string\n        - name: references\n          in: query\n          description: Returns annotations that are replies to this parent annotation ID.\n          schema:\n            type: string\n        - name: text\n          in: query\n          example: 'penguin strength'\n          description: |\n            Limit the results to annotations that contain this text in their\n            textual body.\n\n            For example: `penguin strength` would return all annotations containing\n            `penguin` **OR** `strength` in their text (body) content.\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - rows\n                  - total\n                properties:\n                  rows:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Annotation'\n                  total:\n                    description: Total number of results matching query.\n                    type: integer\n  # ---------------------------------------------------------------------------\n  # Operations on single Annotation resources\n  # ---------------------------------------------------------------------------\n  /annotations/{id}:\n    # -----------------------------------------------------\n    # GET annotations/{id} - Fetch an Annotation\n    # -----------------------------------------------------\n    get:\n      tags:\n        - annotations\n      summary: Fetch an Annotation\n      security:\n        - ApiKey: []\n        - {} # Unauthenticated OK, depending on annotation status\n      parameters:\n        - $ref: '#/components/parameters/AnnotationID'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n\n    # ------------------------------------------------------------------\n    # PATCH annotations/{id} - Update an Annotation (PUT also supported)\n    # ------------------------------------------------------------------\n    patch:\n      tags:\n        - annotations\n      summary: Update an Annotation\n      description: |\n        This endpoint is available under both the `PATCH` and `PUT`\n        request methods. Both endpoints have PATCH-characteristics\n        as defined in [RFC5789](https://tools.ietf.org/html/rfc5789#section-1),\n        meaning the request body does not have to include the whole annotation\n        object.\n\n        New implementations should use the `PATCH` request method, and existing\n        implementations continue to work under `PUT` but should switch to `PATCH`.\n      security:\n        - ApiKey: []\n      parameters:\n        - $ref: '#/components/parameters/AnnotationID'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Annotation'\n\n    # ------------------------------------------------------------------\n    # DELETE annotations/{id} - Delete an Annotation\n    # ------------------------------------------------------------------\n    delete:\n      tags:\n        - annotations\n      summary: Delete an Annotation\n      security:\n        - ApiKey: []\n      parameters:\n        - $ref: '#/components/parameters/AnnotationID'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - deleted\n                  - id\n                properties:\n                  deleted:\n                    type: boolean\n                    enum:\n                      - true\n                  id:\n                    type: string\n\n  # ---------------------------------------------------------------------------\n  # Annotation Moderation Operations: Flagging\n  # ---------------------------------------------------------------------------\n  /annotations/{id}/flag:\n    # --------------------------------------------------------\n    # PUT annotations/{id}/flag - Add a flag to an annotation\n    # --------------------------------------------------------\n    put:\n      tags:\n        - annotations\n      summary: Flag an annotation\n      description: |\n        Flag an annotation for review (moderation). The moderator of the group\n        containing the annotation will be notified of the flag and can decide\n        whether or not to hide the annotation. Note that flags persist and\n        cannot be removed once they are set.\n      security:\n        - ApiKey: []\n      parameters:\n        - $ref: '#/components/parameters/AnnotationID'\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n\n  # ---------------------------------------------------------------------------\n  # Annotation Moderation Operations: Hiding/Unhiding\n  # ---------------------------------------------------------------------------\n  /annotations/{id}/hide:\n    # ----------------------------------------------------------\n    # PUT annotations/{id}/hide - Hide (moderate) an annotation\n    # ----------------------------------------------------------\n    put:\n      tags:\n        - annotations\n      summary: Hide an annotation\n      description: |\n        Hide an annotation. The authenticated user needs to have the moderate\n        permission for the group that contains the annotation—this permission\n        is granted to the user who created the group.\n      security:\n        - ApiKey: []\n      parameters:\n        - $ref: '#/components/parameters/AnnotationID'\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n\n    # ----------------------------------------------------------\n    # DELETE annotations/{id}/hide - Unhide  an annotation\n    # ----------------------------------------------------------\n    delete:\n      tags:\n        - annotations\n      summary: Show an annotation\n      description: |\n        Show/\"un-hide\" an annotation. The authenticated user needs to have the\n        moderate permission for the group that contains the annotation—this\n        permission is granted to the user who created the group.\n      security:\n        - ApiKey: []\n      parameters:\n        - $ref: '#/components/parameters/AnnotationID'\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n\n  # ---------------------------------------------------------------------------\n  # Operations on Group collections\n  # ---------------------------------------------------------------------------\n\n  /groups:\n    # -----------------------------------------------------\n    # GET groups - Fetch a filtered list of Groups\n    # -----------------------------------------------------\n    get:\n      tags:\n        - groups\n      summary: Get a list of Groups\n      description: |\n        Retrieve a list of applicable Groups, filtered by authority and target\n        document (`document_uri`). Also retrieve user's private Groups.\n      security:\n        - ApiKey: []\n        - {} # Unauthenticated OK\n\n      parameters:\n        - name: authority\n          in: query\n          description: |\n            Filter returned groups to this authority. For authenticated requests,\n            the user's associated authority will supersede any provided value.\n          required: false\n          schema:\n            type: string\n            default: 'hypothes.is'\n        - name: document_uri\n          in: query\n          description: |\n            Only retrieve public (i.e. non-private) groups that apply to a\n            given document URI (i.e. the target document being annotated).\n          required: false\n          schema:\n            type: string\n            format: uri\n        - $ref: '#/components/parameters/GroupExpand'\n\n      responses:\n        '200':\n          description: Success\n          content:\n            application/*json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n\n    post:\n      tags:\n        - groups\n      summary: Create a new group\n      description: |\n        Create a new, private group for the currently-authenticated user.\n      security:\n        - AuthClientForwardedUser: []\n        - ApiKey: []\n\n      requestBody:\n        description: Full representation of Group resource\n        required: true\n        content:\n          application/*json:\n            schema:\n              $ref: '#/components/schemas/GroupCreate'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n\n  # ---------------------------------------------------------------------------\n  # Operations on individual Group resources\n  # ---------------------------------------------------------------------------\n  /groups/{id}:\n    parameters:\n      - $ref: '#/components/parameters/GroupID'\n\n    # -----------------------------------------------------\n    # GET groups/{id} - Fetch a Group\n    # -----------------------------------------------------\n    get:\n      tags:\n        - groups\n      summary: Fetch a Group\n      description: |\n        Fetch a single Group resource.\n      security:\n        - AuthClient: []\n        - ApiKey: []\n        - {} # Unauthenticated OK\n      parameters:\n        - $ref: '#/components/parameters/GroupExpand'\n\n      responses:\n        '200':\n          description: Success\n          content:\n            application/*json:\n              schema:\n                $ref: '#/components/schemas/Group'\n\n    # -----------------------------------------------------\n    # PATCH groups/{id} - Update a Group\n    # -----------------------------------------------------\n    patch:\n      tags:\n        - groups\n      summary: Update a Group\n      description: |\n        Update a Group resource.\n      security:\n        - AuthClient: []\n        - AuthClientForwardedUser: []\n        - ApiKey: []\n      requestBody:\n        description: Properties to update in Group resource\n        required: true\n        content:\n          application/*json:\n            schema:\n              $ref: '#/components/schemas/GroupUpdate'\n\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n\n    # ---------------------------------------------------------------------\n    # PUT groups/{id} - Replace (Create or Update) a Group, a.k.a. \"upsert\"\n    # ---------------------------------------------------------------------\n    put:\n      tags:\n        - groups\n      summary: Create or Update a Group\n      description: |\n        Update the group with the indicated `id` or create one if it does\n        not exist.\n      security:\n        - ApiKey: []\n        - AuthClientForwardedUser: []\n      requestBody:\n        description: Full representation of Group resource\n        required: true\n        content:\n          application/*json:\n            schema:\n              $ref: '#/components/schemas/GroupCreate'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Group'\n\n  # ---------------------------------------------------------------------------\n  # Operations on Group Membership\n  # ---------------------------------------------------------------------------\n\n  # ---------------------------------------------------------------------------\n  # GET groups/{id}/members - Get group members\n  # ---------------------------------------------------------------------------\n  /groups/{id}/members:\n    get:\n      tags:\n        - groups\n      summary: Get group members\n      description: |\n        Fetch a list of all members (users) in a group. Returned user resource only\n        contains public-facing user data. Authenticated user must have read access\n        to the group. Does not require authentication for reading members of\n        public groups. Returned members are unsorted.\n      security:\n        - AuthClient: []\n        - ApiKey: []\n        - {} # Unauthenticated OK for public groups\n      responses:\n        '200':\n          description: Success\n          content:\n            application/*json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n\n  /groups/{id}/members/{user}:\n    # ----------------------------------------------------------\n    # POST groups/{id}/members/{user} - Add user to group\n    # ----------------------------------------------------------\n    post:\n      tags:\n        - groups\n      summary: Add member to group\n      description: |\n        Add a user as a member to a group. This endpoint is only accessible to\n        requests authenticated with `AuthClient` credentials and is restricted\n        to users and groups within the associated authority.\n      security:\n        - AuthClient: []\n      parameters:\n        - $ref: '#/components/parameters/GroupID'\n        - $ref: '#/components/parameters/UserID'\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n\n    # ----------------------------------------------------------\n    # DELETE groups/{id}/members/{user} - Remove user from group\n    # ----------------------------------------------------------\n    delete:\n      tags:\n        - groups\n      summary: Remove member from group\n      description: |\n        Remove a user from a group. At present, this endpoint only allows\n        the removal as one's self (authenticated with API Key) from the\n        indicated group.\n      security:\n        - ApiKey: []\n      parameters:\n        - $ref: '#/components/parameters/GroupID'\n        - name: user\n          in: path\n          description: Currently, only the literal value `me` is accepted\n          required: true\n          schema:\n            type: string\n            enum:\n              - me\n      responses:\n        '204':\n          $ref: '#/components/responses/NoContent'\n\n  # ---------------------------------------------------------------------------\n  # Operations on the currently-authenticated user (Profile)\n  # ---------------------------------------------------------------------------\n  /profile:\n    # -----------------------------------------------------\n    # GET profile - Retrieve user profile\n    # -----------------------------------------------------\n    get:\n      tags:\n        - profile\n      summary: Fetch user's profile\n      description: |\n        Fetch profile information for the currently-authenticated user.\n      security:\n        - ApiKey: []\n        - {} # Unauthenticated OK\n      responses:\n        '200':\n          description: Success\n          content:\n            application/*json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n\n  /profile/groups:\n    # -------------------------------------------------------------\n    # GET user's groups - Retrieve groups for currently auth'd user\n    # -------------------------------------------------------------\n    get:\n      tags:\n        - profile\n      summary: Fetch user's groups\n      description: |\n        Fetch the groups for which the currently-authenticated user is a member.\n      security:\n        - ApiKey: []\n        - {} # Unauthenticated OK\n      responses:\n        '200':\n          description: Success\n          content:\n            application/*json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Group'\n\n  # ---------------------------------------------------------------------------\n  # Operations on User Collections\n  # ---------------------------------------------------------------------------\n  /users:\n    post:\n      tags:\n        - users\n      summary: Create a new user\n      description: |\n        Create a new user within the client's associated authority.\n      security:\n        - AuthClient: []\n\n      requestBody:\n        description: Full representation of User resource\n        required: true\n        content:\n          application/*json:\n            schema:\n              $ref: '#/components/schemas/UserCreate'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFull'\n\n  # ---------------------------------------------------------------------------\n  # Operations on single User Resources\n  # ---------------------------------------------------------------------------\n  /users/{user}:\n    # ----------------------------------------------------------\n    # GET users/{user} -- Fetch a user by `userid`\n    # ----------------------------------------------------------\n    get:\n      tags:\n        - users\n      summary: Fetch a user\n      description: |\n        Fetch a single user. This endpoint is only accessible to\n        requests authenticated with `AuthClient` credentials and is restricted\n        to users within the associated authority.\n      security:\n        - AuthClient: []\n      parameters:\n        - $ref: '#/components/parameters/UserID'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFull'\n\n  /users/{username}:\n    patch:\n      tags:\n        - users\n      summary: Update a user\n      description: |\n        Update an existing user.\n      security:\n        - AuthClient: []\n\n      parameters:\n        - $ref: '#/components/parameters/Username'\n      requestBody:\n        description: Properties to update in the User resource\n        required: true\n        content:\n          application/*json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFull'\n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"GroupCreate\": parse schema: resolve \"./schemas/group-new.yaml#/Group\": external \"./schemas/group-new.yaml\": file: local file reference is not allowed"
}