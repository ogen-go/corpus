{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/teinen/openapi-sample"
		},
		"file": {
			"name": "openapi-sample.yaml",
			"size": 0,
			"path": "openapi-sample.yaml",
			"byteSize": 3535,
			"content": "openapi: 3.0.0\ninfo:\n  title: Sample API\n  description: A short description of API.\n  termsOfService: http://example.com/terms/\n  contact:\n    name: API support\n    url: http://www.example.com/support\n    email: support@example.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\nservers:\n  - url: https://dev.sample-server.com/v1\n    description: Development server\n  - url: https://stg.sample-server.com/v1\n    description: Staging server\n  - url: https://api.sample-server.com/v1\n    description: Production server\npaths:\n  /users:\n    get:\n      tags:\n        - users\n      summary: Get all users.\n      description: Returns an array of User model\n      parameters: []\n      responses:\n        '200':\n          description: A JSON array of User model\n          content:\n            application/json:\n              schema: \n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n                example:\n                  - id: 1\n                    name: John Doe\n                  - id: 2\n                    name: Jane Doe\n    post:\n      tags: \n        - users\n      summary: Create a new User\n      description: Create a new User\n      parameters: []\n      requestBody:\n        description: user to create\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n            example:\n              id: 3\n              name: Richard Roe\n      responses:\n        '201':\n          description: CREATED\n  /users/{userId}:\n    get:\n      tags:\n        - users\n      summary: Get user by ID.\n      description: Returns a single User model\n      parameters: \n        - name: userId\n          in: path\n          description: user id\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: A single User model\n          content:\n            application/json:\n              schema: \n                type: object\n                items:\n                  $ref: '#/components/schemas/User'\n                example:\n                  id: 1\n                  name: John Doe\n  /products:\n    get:\n      tags:\n        - products\n      summary: Get all products.\n      description: Returns an array of Product model\n      parameters: []\n      responses:\n        '200':\n          description: A JSON array of Product model\n          content:\n            application/json:\n              schema: \n                type: array\n                items:\n                  $ref: '#/components/schemas/Product'\n                example:\n                  - id: 1\n                    name: Apple\n                    price: 200\n                  - id: 2\n                    name: Orange\n                    price: 150\ncomponents:\n  schemas:\n    User:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Product:\n      type: object\n      required:\n        - id\n        - price\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Laptop\n        price:\n          type: integer\n          example: 1200\nsecurity: \n  - api_key: []\ntags:\n  - name: users\n    description: Access to Users\n  - name: products\n    description: Access to Products\nexternalDocs:\n  description: Find more info here\n  url: https://example.com\n"
		}
	},
	"Error": "parse: parse spec: paths: /users/{userId}: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: object cannot contain 'items' field"
}