{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "samples/server/petstore/rust-server/output/openapi-v3/api/openapi.yaml",
			"byteSize": 17321,
			"content": "openapi: 3.0.1\ninfo:\n  description: API under test\n  title: My title\n  version: 1.0.7\nservers:\n- url: /\npaths:\n  /xml:\n    post:\n      description: \"\"\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/xml_array'\n      responses:\n        \"201\":\n          description: OK\n        \"400\":\n          description: Bad Request\n      summary: Post an array\n    put:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/xml_object'\n      responses:\n        \"201\":\n          description: OK\n        \"400\":\n          description: Bad Request\n  /paramget:\n    get:\n      parameters:\n      - description: The stuff to get\n        explode: false\n        in: query\n        name: uuid\n        required: false\n        schema:\n          $ref: '#/components/schemas/UuidObject'\n        style: form\n      - description: Some object to pass as query parameter\n        explode: false\n        in: query\n        name: someObject\n        required: false\n        schema:\n          $ref: '#/components/schemas/ObjectParam'\n        style: form\n      - description: Some list to pass as query parameter\n        explode: false\n        in: query\n        name: someList\n        required: false\n        schema:\n          $ref: '#/components/schemas/MyIDList'\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: JSON rsp\n      summary: Get some stuff with parameters.\n  /multiget:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: JSON rsp\n        \"201\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/_multiget_get_201_response'\n          description: XML rsp\n        \"202\":\n          content:\n            application/octet-stream:\n              schema:\n                format: binary\n                type: string\n          description: octet rsp\n        \"203\":\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: string rsp\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: Duplicate Response long text. One.\n        \"205\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: Duplicate Response long text. Two.\n        \"206\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: Duplicate Response long text. Three.\n      summary: Get some stuff.\n  /xml_other:\n    post:\n      requestBody:\n        content:\n          text/xml:\n            schema:\n              $ref: '#/components/schemas/anotherXmlObject'\n      responses:\n        \"201\":\n          content:\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: OK\n        \"400\":\n          description: Bad Request\n    put:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/anotherXmlArray'\n      responses:\n        \"201\":\n          description: OK\n        \"400\":\n          description: Bad Request\n  /xml_extra:\n    post:\n      requestBody:\n        content:\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/duplicate_xml_object'\n      responses:\n        \"201\":\n          description: OK\n        \"400\":\n          description: Bad Request\n  /uuid:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UuidObject'\n          description: Duplicate Response long text. One.\n  /required_octet_stream:\n    put:\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              format: byte\n              type: string\n        required: true\n      responses:\n        \"200\":\n          description: OK\n  /readonly_auth_scheme:\n    get:\n      responses:\n        \"200\":\n          description: Check that limiting to a single required auth scheme works\n      security:\n      - authScheme:\n        - test.read\n  /multiple_auth_scheme:\n    get:\n      responses:\n        \"200\":\n          description: Check that limiting to multiple required auth schemes works\n      security:\n      - authScheme:\n        - test.read\n        - test.write\n  /untyped_property:\n    get:\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ObjectUntypedProps'\n      responses:\n        \"200\":\n          description: Check that untyped properties works\n  /responses_with_headers:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: String\n          description: Success\n          headers:\n            Success-Info:\n              explode: false\n              required: true\n              schema:\n                type: String\n              style: simple\n            Bool-Header:\n              explode: false\n              schema:\n                type: bool\n              style: simple\n            Object-Header:\n              explode: false\n              schema:\n                $ref: '#/components/schemas/ObjectHeader'\n              style: simple\n        \"412\":\n          description: Precondition Failed\n          headers:\n            Further-Info:\n              explode: false\n              schema:\n                type: String\n              style: simple\n            Failure-Info:\n              explode: false\n              schema:\n                type: String\n              style: simple\n  /mandatory-request-header:\n    get:\n      parameters:\n      - explode: false\n        in: header\n        name: X-Header\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          description: Success\n  /register-callback:\n    post:\n      callbacks:\n        callback:\n          '{$request.query.url}/callback':\n            post:\n              operationId: callback_CallbackPost\n              responses:\n                \"204\":\n                  description: OK\n              x-callback-request: true\n      parameters:\n      - explode: true\n        in: query\n        name: url\n        required: true\n        schema:\n          format: uri\n          type: string\n        style: form\n      responses:\n        \"204\":\n          description: OK\n  /callback-with-header:\n    post:\n      callbacks:\n        callback:\n          '{$request.query.url}/callback-with-header':\n            post:\n              operationId: callback_CallbackWithHeaderPost\n              parameters:\n              - explode: false\n                in: header\n                name: Information\n                required: false\n                schema:\n                  type: string\n                style: simple\n              responses:\n                \"204\":\n                  description: OK\n              x-callback-request: true\n      parameters:\n      - explode: true\n        in: query\n        name: url\n        required: true\n        schema:\n          format: uri\n          type: string\n        style: form\n      responses:\n        \"204\":\n          description: OK\n  /rfc7807:\n    get:\n      responses:\n        \"204\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ObjectWithArrayOfObjects'\n          description: OK\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/ObjectWithArrayOfObjects'\n          description: NotFound\n        \"406\":\n          content:\n            application/problem+xml:\n              schema:\n                $ref: '#/components/schemas/ObjectWithArrayOfObjects'\n          description: NotAcceptable\n  /merge-patch-json:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/merge-patch+json:\n              schema:\n                $ref: '#/components/schemas/anotherXmlObject'\n          description: merge-patch+json-encoded response\n  /enum_in_path/{path_param}:\n    get:\n      parameters:\n      - explode: false\n        in: path\n        name: path_param\n        required: true\n        schema:\n          $ref: '#/components/schemas/StringEnum'\n        style: simple\n      responses:\n        \"200\":\n          description: Success\n  /override-server:\n    get:\n      responses:\n        \"204\":\n          description: Success.\n      servers:\n      - url: /override\n  /complex-query-param:\n    get:\n      parameters:\n      - explode: true\n        in: query\n        name: list-of-strings\n        required: false\n        schema:\n          items:\n            $ref: '#/components/schemas/StringObject'\n          type: array\n        style: form\n      responses:\n        \"200\":\n          description: Success\n  /repos/{repoId}:\n    get:\n      operationId: GetRepoInfo\n      parameters:\n      - explode: false\n        in: path\n        name: repoId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StringObject'\n          description: OK\n      tags:\n      - Repo\n      - Info\n  /repos:\n    post:\n      operationId: CreateRepo\n      requestBody:\n        content:\n          application/json:\n            example:\n              requiredParam: true\n            schema:\n              $ref: '#/components/schemas/ObjectParam'\n        required: true\n      responses:\n        \"200\":\n          description: Success\n      tags:\n      - Repo\n  /one-of:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/_one_of_get_200_response'\n          description: Success\n  /any-of:\n    get:\n      parameters:\n      - description: list of any of objects\n        explode: true\n        in: query\n        name: any-of\n        required: false\n        schema:\n          items:\n            $ref: '#/components/schemas/AnyOfObject'\n          minItems: 1\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AnyOfObject'\n          description: Success\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/12345AnyOfObject'\n          description: AlternateSuccess\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/_any_of_get_202_response'\n          description: AnyOfSuccess\n  /json-complex-query-param:\n    get:\n      parameters:\n      - content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/StringObject'\n              type: array\n        explode: true\n        in: query\n        name: list-of-strings\n        required: false\n        style: form\n      responses:\n        \"200\":\n          description: Success\ncomponents:\n  schemas:\n    AnyOfProperty:\n      description: Test containing an anyOf object\n      properties:\n        requiredAnyOf:\n          $ref: '#/components/schemas/AnyOfObject'\n        optionalAnyOf:\n          $ref: '#/components/schemas/12345AnyOfObject'\n      required:\n      - requiredAnyOf\n    AnyOfObject:\n      anyOf:\n      - $ref: '#/components/schemas/AnyOfObject_anyOf'\n      - description: Alternate option\n        type: string\n      description: Test a model containing an anyOf\n    \"12345AnyOfObject\":\n      anyOf:\n      - $ref: '#/components/schemas/_12345AnyOfObject_anyOf'\n      - description: Alternate option\n        type: string\n      description: Test a model containing an anyOf that starts with a number\n    EnumWithStarObject:\n      description: Test a model containing a special character in the enum\n      enum:\n      - FOO\n      - BAR\n      - '*'\n      type: string\n    UuidObject:\n      description: Test a model containing a UUID\n      format: uuid\n      type: string\n    xml_array:\n      items:\n        $ref: '#/components/schemas/xml_inner'\n      type: array\n      xml:\n        name: CamelXmlArray\n        wrapped: true\n    xml_inner:\n      type: string\n      xml:\n        name: camelXmlInner\n    xml_object:\n      description: An XML object\n      properties:\n        innerString:\n          type: string\n        other_inner_rename:\n          type: integer\n      title: an XML object\n      type: object\n      xml:\n        name: camelXmlObject\n        namespace: http://foo.bar\n    duplicate_xml_object:\n      description: An XML object\n      properties:\n        inner_string:\n          type: string\n        inner_array:\n          $ref: '#/components/schemas/xml_array'\n      required:\n      - inner_array\n      type: object\n      xml:\n        name: camelDuplicateXmlObject\n        namespace: http://different.bar\n    anotherXmlArray:\n      items:\n        $ref: '#/components/schemas/anotherXmlInner'\n      type: array\n      xml:\n        name: snake_another_xml_array\n        wrapped: true\n    anotherXmlInner:\n      type: string\n      xml:\n        name: snake_another_xml_inner\n    anotherXmlObject:\n      description: An XML object\n      example:\n        inner_string: inner_string\n      properties:\n        inner_string:\n          type: string\n      type: object\n      xml:\n        name: snake_another_xml_object\n        namespace: http://foo.bar\n    ObjectWithArrayOfObjects:\n      example:\n        objectArray:\n        - null\n        - null\n      properties:\n        objectArray:\n          items:\n            $ref: '#/components/schemas/StringObject'\n          type: array\n      type: object\n    StringObject:\n      type: string\n    MyIDList:\n      items:\n        $ref: '#/components/schemas/MyID'\n      type: array\n    MyID:\n      type: integer\n    ObjectUntypedProps:\n      example:\n        not_required_untyped_nullable: \"\"\n        required_untyped: \"\"\n        required_untyped_nullable: \"\"\n        not_required_untyped: \"\"\n      properties:\n        required_untyped:\n          nullable: false\n        required_untyped_nullable:\n          nullable: true\n        not_required_untyped:\n          nullable: false\n        not_required_untyped_nullable:\n          nullable: false\n      required:\n      - required_untyped\n      - required_untyped_nullable\n      type: object\n    ObjectParam:\n      example:\n        requiredParam: true\n        optionalParam: 0\n      properties:\n        requiredParam:\n          type: boolean\n        optionalParam:\n          type: integer\n      required:\n      - requiredParam\n      type: object\n    ObjectHeader:\n      properties:\n        requiredObjectHeader:\n          type: boolean\n        optionalObjectHeader:\n          type: integer\n      required:\n      - requiredObjectHeader\n      type: object\n    RequiredObjectHeader:\n      type: boolean\n    OptionalObjectHeader:\n      type: integer\n    AdditionalPropertiesWithList:\n      additionalProperties:\n        items:\n          type: string\n        type: array\n      maxProperties: 1\n      type: object\n    NullableTest:\n      properties:\n        nullable:\n          nullable: true\n          type: string\n        nullableWithNullDefault:\n          nullable: true\n          type: string\n        nullableWithPresentDefault:\n          default: default\n          nullable: true\n          type: string\n        nullableWithNoDefault:\n          nullable: true\n          type: string\n        nullableArray:\n          items:\n            type: string\n          nullable: true\n          type: array\n      required:\n      - nullable\n      type: object\n    StringEnum:\n      enum:\n      - FOO\n      - BAR\n      type: string\n    Ok:\n      type: string\n    Error:\n      type: string\n    Err:\n      type: string\n    Result:\n      type: string\n    _multiget_get_201_response:\n      properties:\n        foo:\n          type: string\n      type: object\n    _one_of_get_200_response:\n      oneOf:\n      - type: integer\n      - items:\n          type: string\n        type: array\n    _any_of_get_202_response:\n      anyOf:\n      - $ref: '#/components/schemas/StringObject'\n      - $ref: '#/components/schemas/UuidObject'\n    AnyOfObject_anyOf:\n      enum:\n      - FOO\n      - BAR\n      type: string\n    _12345AnyOfObject_anyOf:\n      enum:\n      - FOO\n      - BAR\n      - '*'\n      type: string\n  securitySchemes:\n    authScheme:\n      flows:\n        authorizationCode:\n          authorizationUrl: http://example.org\n          scopes:\n            test.read: Allowed to read state.\n            test.write: Allowed to change state.\n          tokenUrl: http://example.org\n      type: oauth2\n\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@6d44f97d6cc4bcd11752ca6556075232dc4e5fdb/-/blob/samples/server/petstore/rust-server/output/openapi-v3/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/6d44f97d6cc4bcd11752ca6556075232dc4e5fdb/samples/server/petstore/rust-server/output/openapi-v3/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/responses_with_headers\": get: responses: 200: content: application/json: schema: at 1:10685: parse schema: unexpected schema type: \"String\""
}