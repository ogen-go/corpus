{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Kotlin/dataframe"
		},
		"file": {
			"name": "openapi_advanced_example.yaml",
			"size": 0,
			"path": "dataframe-openapi/src/test/resources/openapi_advanced_example.yaml",
			"byteSize": 6874,
			"content": "openapi: \"3.0.0\"\ninfo:\n  version: 1.0.0\n  title: Swagger Petstore\n  license:\n    name: MIT\nservers:\n  - url: http://petstore.swagger.io/v1\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        '200':\n          description: A paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        '201':\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\ncomponents:\n  schemas:\n\n    Dog:\n      nullable: false\n      required:\n        - breed # required non-nullable enum -\u003e breed: Breed\n        - tag\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Dog`\n          properties:\n            bark:\n              type: boolean\n            breed:\n              type: string\n              enum: [ Dingo, Husky, Retriever, Shepherd ]\n\n    Cat:\n      required:\n        - breed # required but nullable enum -\u003e breed: Breed?\n        - eye_color # required but nullable enum\n        - hunts # required but nullable boolean\n      allOf:\n        - $ref: '#/components/schemas/Pet'\n        - type: object\n          # all other properties specific to a `Cat`\n          properties:\n            hunts:\n              nullable: true\n              type: boolean\n            age:\n              oneOf:\n                - type: integer\n                - type: number\n            breed:\n              type: string\n              enum: [ Ragdoll, Shorthair, Persian, Maine Coon, maine_coon, \"\", 1, null ]\n\n    EyeColor: # nullable enum in reference\n      type: string\n      enum:\n        - Blue\n        - Yellow\n        - Brown\n        - Green\n        - null\n\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n        - eye_color # required but nullable enum -\u003e EyeColor?\n        - pet_type\n      discriminator:\n        propertyName: pet_type\n      properties:\n        pet_type:\n          type: string\n        value:\n          anyOf:\n            - type: integer\n              format: int64\n            - type: string\n        name:\n          type: string\n        tag:\n          type: string\n        other:\n          not:\n            type: integer\n        eye_color:\n          $ref: '#/components/schemas/EyeColor'\n\n    PetRef:\n      oneOf:\n        - $ref: \"#/components/schemas/Cat\"\n        - $ref: \"#/components/schemas/Dog\"\n\n    AlsoCat:\n      $ref: \"#/components/schemas/Cat\"\n\n    Integer:\n      type: integer\n\n    IntList:\n      type: object\n      required:\n        - list\n      properties:\n        list:\n          type: array\n          items:\n            type: integer\n\n    ErrorHolder:\n      type: object\n      required:\n        - errors\n      properties:\n        errors:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Error\"\n\n    Error:\n      type: object\n      required:\n        - code\n        - message\n        - petRef\n        - objectWithAdditional\n        - objectWithAdditional2\n        - objectWithAdditional3\n      properties:\n        ints:\n          $ref: \"#/components/schemas/IntList\"\n        petRef:\n          $ref: \"#/components/schemas/PetRef\"\n        pets:\n          type: array\n          items:\n            oneOf:\n              - $ref: \"#/components/schemas/Cat\"\n              - $ref: \"#/components/schemas/Dog\"\n              - type: object\n                properties:\n                  id:\n                    type: integer\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        objectWithAdditional:\n          $ref: \"#/components/schemas/ObjectWithAdditionalProperties\"\n        objectWithAdditionalList:\n          type: array\n          items:\n            $ref: \"#/components/schemas/ObjectWithAdditionalProperties\"\n        objectWithAdditional2:\n          type: object\n          nullable: true\n          additionalProperties:\n            oneOf:\n              - type: string\n              - type: integer\n        objectWithAdditional3:\n          type: object\n          additionalProperties:\n            nullable: true\n            oneOf:\n              - type: array\n                items:\n                  type: integer\n              - $ref: \"#/components/schemas/Cat\"\n              - $ref: \"#/components/schemas/Dog\"\n              - type: object\n                properties:\n                  id:\n                    type: integer\n        array:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SomeArrayArray\"\n\n    ObjectWithAdditionalProperties:\n      type: object\n      nullable: false\n      additionalProperties:\n        nullable: false\n        type: string\n\n    SomeArrayArray:\n      type: array\n      items:\n        $ref: \"#/components/schemas/SomeArray\"\n\n    SomeArray:\n      nullable: false\n      type: array\n      items:\n        type: object\n        required:\n          - op\n          - path\n        properties:\n          op:\n            type: string\n            enum:\n              - add\n              - remove\n              - replace\n          path:\n            type: string\n          value:\n            type: object\n          objectWithAdditional:\n            type: object\n            nullable: true\n            additionalProperties:\n              type: integer\n",
			"canonicalURL": "/github.com/Kotlin/dataframe@3c7d6753f63a4a0d1b1692e525febb8b5836aac6/-/blob/dataframe-openapi/src/test/resources/openapi_advanced_example.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Kotlin/dataframe/blob/3c7d6753f63a4a0d1b1692e525febb8b5836aac6/dataframe-openapi/src/test/resources/openapi_advanced_example.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"PetRef\": resolve \"#/components/schemas/PetRef\": oneOf: $ref: resolve \"#/components/schemas/Cat\": allOf: property \"breed\": at dataframe-openapi/src/test/resources/openapi_advanced_example.yaml:120:21: parse enum values: parse value \"1\": expected type \"string\", got \"number\""
}