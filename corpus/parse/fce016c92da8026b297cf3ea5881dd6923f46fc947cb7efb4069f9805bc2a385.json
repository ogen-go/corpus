{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/holofans/holoapi"
		},
		"file": {
			"name": "swagger_v1.yaml",
			"size": 0,
			"path": "api-doc/swagger_v1.yaml",
			"byteSize": 19264,
			"content": "openapi: 3.0.0\ninfo:\n  title: HoloAPI\n  version: 1.0.2\n#  x-logo:\n#    Needs to be a reliable absolute link - this one will change on frontend rebuild.\n#    url: https://hololive.jetri.co/add82d630ceb94a7b730fe820c09e73d.png\n#    backgroundColor: \"#FFFFFF\"\n  description: |\n    # About\n    The HoloAPI platform provides compiled and reformatted data related to Virtual Youtubers. This document aims\n    to provide all of the information needed for developers to use HoloAPI's resources.\n    The whole project and documentation are open-source and are available [here](https://github.com/holofans/holoapi).\n\n    Icons by [Sorekasho](https://twitter.com/KoshmarRin).\n    ## Feedback\n    Any feedback is greatly appreciated. You can contact us on [Hololive Creators Club](https://discord.gg/xJd9Der)\n    in #holofans-api channel. We also collect impressions from twitter\n    using [#holotools](https://twitter.com/intent/tweet?text=%23holotools) hashtag.\ntags:\n  - name: Live\n    description: Information on what's currently live.\n  - name: Videos\n    description: Everything about Hololive's videos.\n  - name: Channels\n    description: Everything about Hololive's channels.\n  - name: Comments\n    description: Provides endpoints to search timestamped comments.\n\nservers:\n  - url: https://api.holotools.app/v1\n    description: Production server\ncomponents:\n  schemas:\n    LiveVideo:\n      type: object\n      properties:\n        id:\n          type: integer\n        yt_video_key:\n          type: string\n          nullable: true\n        bb_video_id:\n          type: string\n          nullable: true\n        title:\n          type: string\n        thumbnail:\n          type: string\n          nullable: true\n        live_schedule:\n          type: string\n          nullable: true\n        live_start:\n          type: string\n          nullable: true\n        live_end:\n          type: string\n          nullable: true\n        live_viewers:\n          type: string\n          nullable: true\n        channel:\n          $ref: \"#/components/schemas/Channel\"\n\n    Video:\n      allOf:\n        - $ref: \"#/components/schemas/LiveVideo\"\n        - type: object\n          properties:\n            is_uploaded:\n              type: boolean\n              nullable: true\n            duration_secs:\n              type: integer\n              nullable: true\n            is_captioned:\n              type: boolean\n              nullable: true\n\n    VideoWithComment:\n      allOf:\n        - $ref: \"#/components/schemas/Video\"\n        - type: object\n          properties:\n            comments:\n              type: array\n              items:\n                $ref: \"#/components/schemas/Comment\"\n\n    Channel:\n      type: object\n      properties:\n        id:\n          type: integer\n          example: 34\n        yt_channel_id:\n          type: string\n          nullable: true\n        bb_space_id:\n          type: string\n          nullable: true\n        name:\n          type: string\n          example: Choco Ch. 癒月ちょこ\n        description:\n          type: string\n          nullable: true\n        photo:\n          type: string\n          example: \"https://yt3.ggpht.com/a/AATXAJw7R8J8buhX7Cw1m63vK2jlKFv-9YhFf-TQaA=s800-c-k-c0xffffffff-no-rj-mo\"\n          nullable: true\n        published_at:\n          type: string\n          example: 2018-04-25T02:45:48.000Z\n        twitter_link:\n          type: string\n          example: yuzukichococh\n          nullable: true\n\n    Comment:\n      type: object\n      properties:\n        comment_key:\n          type: string\n          description: \u003e\n            The YouTube comment ID of the comment.\n            You can use this along with the yt_video_key\n            to generate a direct link to the comment.\n        message:\n          type: string\n          description: \u003e\n            Comment text.\n\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Error message.\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: Malformed or invalid parameters.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n\npaths:\n  /live:\n    get:\n      tags:\n        - Live\n      summary: Get live, upcoming and ended steams.\n      description: Fetches live, upcoming and recently ended streams.\n      parameters:\n        - name: channel_id\n          description: \u003e\n            Limit output to a single channel, identified\n            by its HoloAPI ID.\n          in: query\n          required: false\n          example: 34\n          schema:\n            type: integer\n        - name: max_upcoming_hours\n          description: \u003e\n            Sometimes members would set up Free Chat rooms.\n            Using this you can constrain how far ahead of now we will return scheduled streams.\n          in: query\n          example: 48\n          schema:\n            type: integer\n          required: false\n        - name: lookback_hours\n          description: \u003e\n            Control how far back in the past you'd like to receive recently-ended videos\n            in the `ended` field.\n            Maximum is 12 hours. Unset, we will return 6 hours of recently-ended videos.\n            By setting this to 0, the `ended` field will be empty.\n          in: query\n          example: 6\n          schema:\n            type: integer\n          required: false\n        - name: hide_channel_desc\n          description: \u003e\n            If 1, will hide the channel `description` key in all of the channel objects.\n            Default 0. Set this to 1 if the application does not need that data,\n            as a bandwidth saving measure. Cannot be used with `channel_simple`.\n          in: query\n          example: 1\n          schema:\n            type: integer\n          required: false\n        - name: channel_simple\n          description: \u003e\n            0: Displays full channel info as object.\n            1: Only returns channel as `yt_channel_key` or `bb_channel_id` string.\n            Defaults to 0. Cannot be used with `hide_channel_desc`.\n      responses:\n        \"200\":\n          description: Returns 3 arrays with live, upcoming and ended streams.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  live:\n                    description: Currently live streams.\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/LiveVideo\"\n                  upcoming:\n                    description: Upcoming and scheduled streams.\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/LiveVideo\"\n                  ended:\n                    description: Streams that ended in the last 6 hours.\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/LiveVideo\"\n                  cached:\n                    type: boolean\n                    description: Whether the response was from cache or not.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n\n  /channels/:\n    get:\n      tags:\n        - Channels\n      summary: Get channels.\n      description: Lists all channels. Use combination of limit and offset to add pagination.\n      parameters:\n        - name: limit\n          description: The number of channels to return.\n          in: query\n          schema:\n            type: integer\n            default: 25\n            maximum: 50\n        - name: offset\n          description: The number of channels to skip.\n          in: query\n          schema:\n            type: integer\n            default: 0\n        - name: sort\n          in: query\n          schema:\n            type: string\n            default: id\n          description: Column name to sort by.\n        - name: order\n          in: query\n          schema:\n            type: string\n            default: asc\n            enum: [asc, desc]\n          description: Sort order.\n        - name: name\n          in: query\n          schema:\n            type: string\n          description: Channel name search query.\n\n      responses:\n        \"200\":\n          description: Returns list of channels.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  channels:\n                    type: array\n                    description: List of channels\n                    items:\n                      $ref: \"#/components/schemas/Channel\"\n                  total:\n                    type: integer\n                    description: Count of total number of channels in this list\n                  count:\n                    type: integer\n                    description: Number of channels fetched\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n  /channels/{id}:\n    get:\n      tags:\n        - Channels\n      summary: Get one by ID.\n      description: Fetches a single channel by its HoloAPI ID.\n      parameters:\n        - name: id\n          required: true\n          in: path\n          schema:\n            type: integer\n          description: HoloAPI record ID of the channel.\n      responses:\n        \"200\":\n          description: Returns requested channel data.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Channel\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n  /channels/youtube/{yt_channel_id}:\n    get:\n      tags:\n        - Channels\n      summary: Get one by YouTube ID.\n      description: Fetches a single channel by its YouTube ID.\n      parameters:\n        - name: yt_channel_id\n          required: true\n          in: path\n          schema:\n            type: string\n          description: The YouTube ID of the channel\n      responses:\n        \"200\":\n          description: Returns requested channel data.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Channel\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n  /channels/bilibili/{bb_space_id}:\n    get:\n      tags:\n        - Channels\n      summary: Get one by bilibili space ID.\n      description: Fetches a single channel by its bilibili space ID.\n      parameters:\n        - name: bb_space_id\n          required: true\n          in: path\n          schema:\n            type: string\n          description: The bilibili space ID.\n      responses:\n        \"200\":\n          description: Returns requested channel data.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Channel\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  /videos/:\n    get:\n      tags:\n        - Videos\n      summary: Get videos.\n      description: |\n        Returns a list of videos and streams.\n        Accepts query parameters for sorting and filtering.\n        Does not include comments.\n\n      parameters:\n        - name: limit\n          description: The number of videos to return.\n          in: query\n          schema:\n            type: integer\n            default: 25\n            maximum: 50\n        - name: offset\n          description: The number of videos to skip.\n          in: query\n          schema:\n            type: integer\n            default: 0\n        - name: sort\n          in: query\n          description: Column name to sort by.\n          schema:\n            type: string\n            default: published_at\n        - name: order\n          description: Sort order.\n          in: query\n          schema:\n            type: string\n            default: desc\n            enum: [asc, desc]\n        - name: title\n          description: Video title search query.\n          in: query\n          example: かわ余\n          schema:\n            type: string\n        - name: start_date\n          description: \u003e\n            Date string, preferably in ISO-8601 format.\n            Cuts off all videos below this date.\n          in: query\n          example: \"2020-04-25\"\n          schema:\n            type: string\n        - name: end_date\n          description: \u003e\n            Date string, preferably in ISO-8601 format.\n            Cuts off all videos above this date.\n          in: query\n          example: \"2020-04-26\"\n          schema:\n            type: string\n        - name: status\n          description: Status of video to fetch.\n          in: query\n          schema:\n            type: string\n            enum: [new, live, upcoming, past, missing]\n        - name: is_uploaded\n          description: \u003e\n            Set to 1 to only return uploaded videos, otherwise\n            returns both streams and videos.\n          in: query\n          example: 1\n          schema:\n            type: integer\n            default: 0\n            enum: [0, 1]\n        - name: is_captioned\n          description: Set to 1 to return only videos with CC.\n          in: query\n          example: 1\n          schema:\n            type: integer\n            default: 0\n            enum: [0, 1]\n\n      responses:\n        \"200\":\n          description: Returns filtered list of videos.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videos:\n                    type: array\n                    description: List of videos, there are no comments here.\n                    items:\n                      $ref: \"#/components/schemas/Video\"\n                  total:\n                    type: integer\n                    description: Count of total number of videos\n                  count:\n                    type: integer\n                    description: Number of videos fetched\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n  /videos/{id}:\n    get:\n      tags:\n        - Videos\n      summary: Get one by ID.\n      description: Fetches a single video by its HoloAPI ID.\n      parameters:\n        - name: id\n          required: true\n          description: HoloAPI record ID of the video.\n          in: path\n          example: 34\n          schema:\n            type: integer\n        - name: with_comments\n          description: Set to 1 to include comments in the response.\n          in: query\n          example: 1\n          schema:\n            type: integer\n            default: 0\n            enum: [0, 1]\n      responses:\n        \"200\":\n          description: Returns requested video data.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/VideoWithComment\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n  /videos/youtube/{yt_video_key}:\n    get:\n      tags:\n        - Videos\n      summary: Get one by YouTube ID.\n      description: Fetches a single video by its YouTube ID.\n      parameters:\n        - name: yt_video_key\n          required: true\n          in: path\n          description: The YouTube ID of the video.\n          example: dQw4w9WgXcQ\n          schema:\n            type: string\n        - name: with_comments\n          description: Set to 1 to include comments in the response.\n          in: query\n          example: 1\n          schema:\n            type: integer\n            default: 0\n            enum: [0, 1]\n      responses:\n        \"200\":\n          description: Returns requested video data.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/VideoWithComment\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n  /videos/bilibili/{bb_video_id}:\n    get:\n      tags:\n        - Videos\n      summary: Get one by bilibili ID.\n      description: Fetches a single video by its bilibili ID.\n      parameters:\n        - name: bb_video_id\n          required: true\n          in: path\n          description: The bilibili video ID of the video.\n#          example: av90339804\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Returns requested video data.\n          content:\n            application/json:\n              schema:\n                type: object\n                $ref: \"#/components/schemas/Video\"\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"404\":\n          $ref: \"#/components/responses/NotFound\"\n\n  /comments/search:\n    get:\n      tags:\n        - Comments\n      summary: Search comments.\n      description: Query search comments by keyword.\n      parameters:\n        - name: q\n          description: \u003e\n            Query to search. This parameter will be sanitized and returned\n            back to you, since all the comment strings in the db have been sanitized.\n            There are no full width alphanumerics or half width kana characters.\n          in: query\n          required: true\n          schema:\n            type: string\n            example: Kimi no Shiranai\n        - name: limit\n          description: The number of videos to return.\n          in: query\n          schema:\n            type: integer\n            default: 25\n            maximum: 50\n        - name: offset\n          description: The number of videos to skip.\n          in: query\n          schema:\n            type: integer\n            default: 0\n        - name: channel_id\n          description: \u003e\n            A numerical ID obtained from the /channels endpoint\n            that uniquely identifies the channel on this platform.\n            Does not support youtube/bilibili ID.\n          in: query\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Returns search result like a list of videos with comments.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    description: \u003e\n                      List of videos, along with channel and matched comments.\n                    items:\n                      $ref: \"#/components/schemas/VideoWithComment\"\n                  count:\n                    type: integer\n                    description: Count of total number of videos.\n                  cached:\n                    type: boolean\n                    description: Whether the response was from cache or not.\n                  query:\n                    type: string\n                    description: \u003e\n                      A post-sanitized query text. This query is what\n                      was used to match comments text.\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /live: get: operation \"\": parameters: parse parameter \"channel_simple\": unsupported parameter type \"\""
}