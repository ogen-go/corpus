{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/egovernments/DIGIT-OSS"
		},
		"file": {
			"name": "common-contract.yml",
			"size": 0,
			"path": "core-services/docs/common-contract.yml",
			"byteSize": 16486,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.0.0\"\n  title: Common Object Definitions\n  description: Definitions of common objects used across the modules. These objects\n    will/may be commonly used by all eGov API deicitions. There are no paths\n    defined in this spec as these objects cannot be used solely on their own.\n  contact:\n    name: eGov\n    email: info@egovernments.org\npaths: {}\nservers:\n  # Added by API Auto Mocking Plugin\n  - description: SwaggerHub API Auto Mocking\n    url: https://virtserver.swaggerhub.com/talele08/common/1.0.0\n  - url: https://phoenix-qa.egovernments.org/common/v1/definitions\ncomponents:\n  parameters:\n    tenantId:\n      name: tenantId\n      in: query\n      description: Unique id for a tenant.\n      required: true\n      schema:\n        type: string\n        format: varchar\n    lastChangedSince:\n      name: lastChangedSince\n      description: \u003e\n        epoch of the time since when the changes on the object should be picked\n        up. Search results from this parameter should include both newly created\n        objects since this time as well as any modified objects since this time.\n        This criterion is included to help polling clients to get the changes in\n        system since a last time they synchronized with the platform.\n      in: query\n      required: false\n      schema:\n        type: integer\n        format: int64\n  schemas:\n    RequestHeader:\n      type: object\n      description: RequestHeader should be used to carry meta information about the requests\n        to the server as described in the fields below. All eGov APIs will use\n        requestHeader as a part of the request body to carry this meta\n        information. Some of this information will be returned back from the\n        server as part of the ResponseHeader in the response body to ensure\n        correlation.\n      properties:\n        apiInfo:\n          $ref: \"#/components/schemas/APIInfo\"\n        deviceDetail:\n          $ref: \"#/components/schemas/DeviceDetail\"\n        ts:\n          type: integer\n          format: int64\n          description: time in epoch\n        action:\n          type: string\n          description: API action to be performed like _create, _update, _search (denoting\n            POST, PUT, GET) or _oauth etc\n          maxLength: 32\n        key:\n          type: string\n          description: API key (API key provided to the caller in case of server to server\n            communication)\n          maxLength: 256\n        msgId:\n          type: string\n          description: Unique request message id from the caller\n          maxLength: 256\n        requesterId:\n          type: string\n          description: UserId of the user calling\n          maxLength: 256\n        authToken:\n          type: string\n          description: //session/jwt/saml token/oauth token - the usual value that would go\n            into HTTP bearer token\n        userInfo:\n          $ref: \"#/components/schemas/UserInfo\"\n        correlationId:\n          type: string\n          readOnly: true\n        signature:\n          type: string\n          description: Hash describing the current RequestHeader\n      required:\n        - apiId\n        - ver\n        - ts\n        - msgId\n        - action\n    UserInfo:\n      type: object\n      description: This is acting ID token of the authenticated user on the server. Any\n        value provided by the clients will be ignored and actual user based on\n        authtoken will be used on the server.\n      readOnly: true\n      properties:\n        tenantId:\n          type: string\n          description: Unique Identifier of the tenant to which user primarily belongs\n        uuid:\n          type: string\n          description: System Generated User id of the authenticated user.\n        userName:\n          type: string\n          description: Unique user name of the authenticated user\n        password:\n          type: string\n          description: password of the user.\n        idToken:\n          type: string\n          description: This will be the OTP.\n        mobile:\n          type: string\n          description: mobile number of the autheticated user\n        email:\n          type: string\n          description: email address of the authenticated user\n        primaryrole:\n          type: array\n          description: List of all the roles for the primary tenant\n          items:\n            $ref: \"#/components/schemas/Role\"\n        additionalroles:\n          type: array\n          description: array of additional tenantids authorized for the authenticated user\n          items:\n            $ref: \"#/components/schemas/TenantRole\"\n      required:\n        - tenantId\n        - userName\n        - primaryrole\n    Role:\n      type: object\n      description: \u003e\n        minimal representation of the Roles in the system to be carried along in\n        UserInfo with RequestHeader meta data. Actual authorization service to\n        extend this to have more role related attributes\n      properties:\n        name:\n          type: string\n          description: Unique name of the role\n          maxLength: 64\n        code:\n          type: string\n          description: Unique code of the role\n          maxLength: 64\n        tenantId:\n          type: string\n          description: The tenantId for which the role is available\n          maxLength: 64\n        description:\n          type: string\n          description: brief description of the role\n      required:\n        - code\n        - tenantId\n    TenantRole:\n      type: object\n      description: User role carries the tenant related role information for the user. A\n        user can have multiple roles per tenant based on the need of the tenant.\n        A user may also have multiple roles for multiple tenants.\n      properties:\n        tenantId:\n          type: string\n          description: tenantid for the tenant\n        roles:\n          type: array\n          description: Roles assigned for a particular tenant - array of role codes/names\n          items:\n            $ref: \"#/components/schemas/Role\"\n      required:\n        - tenantId\n        - roles\n    ResponseHeader:\n      type: object\n      readOnly: true\n      description: ResponseHeader should be used to carry metadata information about the\n        response from the server. apiId, ver and msgId in ResponseHeader should\n        always correspond to the same values in respective request's\n        RequestHeader.\n      properties:\n        ts:\n          type: integer\n          format: int64\n          description: response time in epoch\n        resMsgId:\n          type: string\n          description: unique response message id (UUID) - will usually be the correlation\n            id from the server\n          maxLength: 256\n        msgId:\n          type: string\n          description: message id of the request\n          maxLength: 256\n        status:\n          type: string\n          description: status of request processing\n          enum:\n            - COMPLETED\n            - ACCEPTED\n            - FAILED\n        signature:\n          type: string\n          description: Hash describing the current ResponseHeader\n        error:\n          type: object\n          $ref:\n            \"#/components/schemas/Error\"\n          description: Error detail from API\n        information:\n          type: object\n          description: Additional information from API\n        debug:\n          type: object\n          description: Debug information when requested\n        additionalInfo:\n          type: object\n          description: Any additional information if required e.g. status url (to find out the current status of an asynchronous processing response), additional links to perform special functions like file\n            uploads etc.\n      required:\n        - resMsgId\n        - msgId\n        - status\n    Error:\n      type: object\n      description: Error object will be returned as a part of reponse body in conjunction\n        with ResponseHeader as part of ErrorResponse whenever the request\n        processing status in the ResponseHeader is FAILED. HTTP return in this\n        scenario will usually be HTTP 400.\n      properties:\n        code:\n          type: string\n          description: Error Code will be module specific error label/code to identiffy the\n            error. All modules should also publish the Error codes with their\n            specific localized values in localization service to ensure clients\n            can print locale specific error messages. Example for error code\n            would be User.NotFound to indicate User Not Found by\n            User/Authentication service. All services must declare their\n            possible Error Codes with brief description in the error response\n            section of their API path.\n        message:\n          type: string\n          description: English locale message of the error code. Clients should make a\n            separate call to get the other locale description if configured with\n            the service. Clients may choose to cache these locale specific\n            messages to enhance performance with a reasonable TTL (May be\n            defined by the localization service based on tenant + module\n            combination).\n        description:\n          type: string\n          description: Optional long description of the error to help clients take remedial\n            action. This will not be available as part of localization service.\n        params:\n          type: array\n          description: Some error messages may carry replaceable fields (say $1, $2) to\n            provide more context to the message. E.g. Format related errors may\n            want to indicate the actual field for which the format is invalid.\n            Client's should use the values in the param array to replace those\n            fields.\n          items:\n            type: string\n      required:\n        - code\n        - message\n    ErrorRes:\n      type: object\n      description: All APIs will return ErrorRes in case of failure which will carry\n        ResponseHeader as metadata and Error object as actual representation of\n        error. In case of bulk apis, some apis may chose to return the array of\n        Error objects to indicate individual failure.\n      properties:\n        ResponseHeader:\n          $ref: \"#/components/schemas/ResponseHeader\"\n        Errors:\n          description: Error response array corresponding to Request Object array. In case\n            of single object submission or _search related paths this may be an\n            array of one error element\n          type: array\n          minLength: 1\n          items:\n            $ref: \"#/components/schemas/Error\"\n      required:\n        - ResponseHeader\n    Address:\n      type: object\n      description: \u003e\n        Representation of a address. Indiavidual APIs may choose to extend from\n        this using allOf if more details needed to be added in their case.\n      properties:\n        tenantId:\n          type: string\n          description: Unique Identifier of the tenant to which user primarily belongs\n        doorNo:\n          type: string\n          description: House number or door number.\n        plotNo:\n          type: string\n          description: Plot number of the house.\n        id:\n          type: string\n          description: System generated id for the address\n          readOnly: true\n        landmark:\n          description: additional landmark to help locate the address\n          type: string\n        city:\n          description: City of the address. Can be represented by the tenantid itself\n          type: string\n        district:\n          description: The district in which the property is located\n          type: string\n        region:\n          description: The Region in which the property is located\n          type: string\n        state:\n          description: The State in which the property is located\n          type: string\n        country:\n          description: The country in which the property is located\n          type: string\n        pincode:\n          type: string\n          description: PIN code of the address. Indian pincodes will usually be all numbers.\n        additionDetails:\n          type: string\n          description: more address detail as may be needed\n        buildingName:\n          type: string\n          description: Name of the building\n          maxLength: 64\n          minLength: 2\n        street:\n          type: string\n          description: Street Name\n          maxLength: 64\n          minLength: 2\n        locality:\n          $ref: https://raw.githubusercontent.com/egovernments/egov-services/master/docs/egov-location/contracts/v11-0-0.yml#/definitions/Boundary\n        geoLocation:\n          $ref: '#/components/schemas/GeoLocation'\n      required:\n        - tenantId\n        - locality\n    AuditDetails:\n      type: object\n      description: Collection of audit related fields used by most models\n      readOnly: true\n      properties:\n        createdBy:\n          type: string\n          description: username (preferred) or userid of the user that created the object\n        lastModifiedBy:\n          type: string\n          description: username (preferred) or userid of the user that last modified the\n            object\n        createdTime:\n          type: integer\n          format: int64\n          description: epoch of the time object is created\n        lastModifiedTime:\n          type: integer\n          format: int64\n          description: epoch of the time object is last modified\n\n    APIInfo:\n      type: object\n      description: Info of the API being called\n      properties:\n        id:\n          type: string\n          description: The id of the API being called\n          maxLength: 64\n          minLength: 2\n        version:\n          type: string\n          description: The version of the API\n          maxLength: 64\n          minLength: 2\n        path:\n          type: string\n          description: The URI of the API\n\n    DeviceDetail:\n      type: object\n      description: Contains information about the device used to access the api\n      properties:\n        id:\n          type: string\n          description: The id of the device which is trying to accessed\n        signature:\n          type: string\n          description: The electronic signature of the device\n    Document:\n      type: object\n      description: \u003e-\n        This object holds list of documents attached during the transaciton for\n        a property\n      properties:\n        id:\n          type: string\n          maxLength: 64\n          description: system id of the Document.\n        documentType:\n          type: string\n          description: \u003e-\n            unique document type code, should be validated with document type\n            master\n        fileStore:\n          type: string\n          description: File store reference key.\n        documentUid:\n          type: string\n          maxLength: 64\n          description: 'The unique id(Pancard Number,Adhar etc.) of the given Document.'\n        additionalDetails:\n          type: object\n          description: 'Json object to capture any extra information which is not accommodated by model'\n    Institution:\n      type: object\n      properties:\n        id:\n          type: string\n          maxLength: 64\n          description: Unique Identifier of the Institution(UUID).\n        tenantId:\n          type: string\n          description: tenant id of the Property\n          maxLength: 256\n        type:\n          type: string\n          description: Institution type.\n          maxLength: 64\n        designation:\n          type: string\n          maxLength: 64\n          description: Designation of the person creating/updatingentity on behalf of the institution\n        nameOfAuthorizedPerson:\n          type: string\n          maxLength: 256\n          description: Name of the person who is taking action on behalf of institution\n        additionalDetails:\n          type: object\n          description: 'Json object to capture any extra information which is not accommodated by model'\n    GeoLocation:\n      type: object\n      properties:\n        latitude:\n          type: number\n          format: double\n          description: latitude of the address\n        longitude:\n          type: number\n          format: double\n          description: longitude of the address\n        additionalDetails:\n          type: object\n          description: 'Json object to capture any extra information which is not accommodated by model'          \n          "
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Address\": parse schema: property \"locality\": parse schema: resolve \"https://raw.githubusercontent.com/egovernments/egov-services/master/docs/egov-location/contracts/v11-0-0.yml#/definitions/Boundary\": find schema: external base \"https://raw.githubusercontent.com/egovernments/egov-services/master/docs/egov-location/contracts/v11-0-0.yml\" is not supported"
}