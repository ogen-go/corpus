{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/runopsio/sequence"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/openapi.yaml",
			"byteSize": 9405,
			"content": "openapi: 3.0.0\ninfo:\n  title: Sequence\n  version: '1.0'\n  description: |-\n    ## API Reference\n    The Sequence API is organized around REST. Our API has predictable resource-oriented URLs, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.\n  contact:\n    email: rob@decimals.app\n    name: Rob\n    url: 'https://decimals.app'\nservers:\n  - url: 'https://api.decimals.app/v1'\n    description: v1\npaths:\n  /transactions:\n    post:\n      summary: Create Transactions\n      responses:\n        '201':\n          description: The Transaction object created.\n          content:\n            application/json:\n              schema:\n                title: transaction\n                type: object\n                x-examples: {}\n                description: |-\n                  The Transaction object represents an exchange of value between two accounts.\n                  Any amount of any type of currency can be exchanged.\n                properties:\n                  id:\n                    type: string\n                    format: uuid\n                    description: The id of the transaction.\n                  from:\n                    example: acc_0o5Fs0EELR0fUjHjbCnEtdUwQe3\n                    type: string\n                    description: |-\n                      The id of payer of the transaction.\n                      It can be any id you choose, if never used before, it will be created.\n                  to:\n                    type: string\n                    example: acc_1ujtsdegvSTl8PAuAdqWYSMnLOv\n                    description: |-\n                      The id of payee of the transaction.\n                      It can be any id you choose, if never used before, it will be created.\n                  date:\n                    type: string\n                    format: date-time\n                    description: The date the transaction was created.\n                  metadata:\n                    type: array\n                    description: A list of metadata you can add to the transaction.\n                    items:\n                      type: string\n                  amount:\n                    type: integer\n                  currency:\n                    type: string\n                required:\n                  - id\n                  - from\n                  - to\n                  - date\n                  - amount\n                  - currency\n              examples:\n                Simple:\n                  value:\n                    id: 123Fs0EELR0fUjHjbCnEtdUwfewa\n                    from: Alice\n                    to: Bob\n                    date: '2020-02-16T15:01:15Z'\n                    amount: 1000\n                    currency: USD\n      operationId: create-transaction\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: transaction\n              type: object\n              x-examples: {}\n              description: |-\n                The transaction object represents an exchange of value between two accounts.\n                Any amount of any type of currency can be exchanged.\n              properties:\n                from:\n                  example: acc_0o5Fs0EELR0fUjHjbCnEtdUwQe3\n                  type: string\n                  description: |-\n                    The id of payer of the transaction.\n                    It can be any id you choose, if never used before, it will be created.\n                to:\n                  type: string\n                  example: acc_1ujtsdegvSTl8PAuAdqWYSMnLOv\n                  description: |-\n                    The id of payee of the transaction.\n                    It can be any id you choose, if never used before, it will be created.\n                metadata:\n                  type: array\n                  description: A list of metadata you can add to the transaction.\n                  items:\n                    type: string\n                amount:\n                  type: integer\n                currency:\n                  type: string\n              required:\n                - from\n                - to\n                - amount\n                - currency\n            examples:\n              Simple:\n                value:\n                  from: Alice\n                  to: Bob\n                  currency: usd\n                  amount: 1000\n        description: The details of the Transaction being created.\n      description: |-\n        ## Create Transactions\n        Creates a Transaction.\n      parameters:\n        - schema:\n            type: string\n            default: application/json\n          in: header\n          name: Content-Type\n          description: ''\n      security: []\n      tags:\n        - ledger\n    parameters: []\n    get:\n      summary: List Transactions\n      operationId: get-transactions\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/transaction'\n      description: |-\n        ## List an Account Transactions\n        List Transactions from an Account.\n      parameters:\n        - schema:\n            type: string\n            example: Alice\n          in: query\n          name: account\n          description: The id of the Account.\n          required: true\n      tags:\n        - ledger\n  /balances:\n    get:\n      summary: List Balances\n      operationId: list-balances\n      parameters:\n        - schema:\n            type: string\n            example: Alice\n          in: query\n          name: account\n          description: The ID of the Account\n          required: true\n      description: |-\n        ## List an Account Balances\n        Retrieve a list of the Balances from the Account with the given ID.\n      security: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/account'\n      tags:\n        - ledger\ncomponents:\n  schemas:\n    account:\n      title: Account\n      type: array\n      description: |-\n        Accounts objects represents the holders of any value in your app.\n        It can be used to represet a customers, a merchants, terminals, or anything that logically or phisically holds any type of value for a given time.\n        An Account can have one or more Balances.\n      x-examples: {}\n      items:\n        $ref: '#/components/schemas/balance'\n      x-tags:\n        - core resources\n    balance:\n      title: Balance\n      type: object\n      x-examples: {}\n      description: |-\n        Balances are part of the Account object, representing the amounts of a given currency being held by an Account.\n        Value will move between Accounts in your app by adding (credit) and removing (debit) it from Balances.\n        Balances are created as they are used. If it exists, a debit or credit is placed to an existing balance, otherwise we create and charge it right the way.\n      properties:\n        currency:\n          type: string\n          example: usd\n          description: |-\n            Currencies are the types of commodities kept in balances.\n            If not otherwise specified, any currency can be used and will work just fine. It can be a crypto asset, loyalty points, monetary currencies, gold, or anything you can think of.\n        amount:\n          type: integer\n          example: 1000\n          description: 'Amount of this balance. A positive integer representing the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge Â¥100, a zero-decimal currency).'\n      required:\n        - currency\n        - amount\n      x-tags:\n        - core resources\n    transaction:\n      title: Transaction\n      type: object\n      x-examples: {}\n      description: |-\n        The Transaction object represents an exchange of value between two Account's Balances.\n        Transaction are exchanges of any type or amount of Currencies between Accounts.\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: The id of the transaction.\n        from:\n          type: string\n          example: Alice\n          description: |-\n            The id of payer of the transaction.\n            It can be any id you choose, if never used before, it will be created.\n        to:\n          type: string\n          example: Bob\n          description: |-\n            The id of payee of the transaction.\n            It can be any id you choose, if never used before, it will be created.\n        date:\n          type: string\n          format: date-time\n          description: The date the transaction was created.\n        metadata:\n          type: array\n          description: A list of metadata you can add to the transaction.\n          items:\n            type: string\n        currency:\n          type: string\n          example: usd\n        amount:\n          type: integer\n          example: 1000\n        balance:\n          type: integer\n          example: 5000\n          description: The Balance after the Transaction.\n      required:\n        - from\n        - to\n        - currency\n        - amount\n      x-tags:\n        - core resources\n  securitySchemes:\n    secret_key:\n      type: http\n      scheme: basic\n      description: ''\ntags:\n  - name: ledger\n  - name: analytics\nsecurity:\n  - API Key - 1: []\n"
		}
	},
	"Error": "parse: parse spec: paths: /transactions: get: operation \"get-transactions\": security: parse global security: unknown security schema \"API Key - 1\""
}