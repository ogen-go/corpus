{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/CodeForBoulder/upswyng"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "packages/server/docs/openapi.yaml",
			"byteSize": 58614,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: UpSwyng API v1\n  description: UpSwyng API v1\n  contact:\n    name: Code For Boulder\n    url: 'https://www.codeforboulder.org/'\n  version: '1.0.0'\n\nservers:\n  - url: 'http://localhost:3000/api'\n    description: Docker Compose Server\n\n# Paths are sorted alphabetically\n# variables as part of a path are sorted as last in order.\n\npaths:\n  /alert:\n    post:\n      description: 'API endpoint to create or update an alert.'\n      summary: 'Create alert'\n      security:\n        - requireAdmin: []\n      tags:\n        - alert\n      operationId: alertPost\n      requestBody:\n        description: New Alert Payload.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AlertPost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/AlertPost'\n      responses:\n        '200':\n          description: New Alert\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  alert:\n                    $ref: '#/components/schemas/AlertData'\n        '400':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /alert/search:\n    post:\n      description: 'API endpoint to get a list of Alerts. Returns the full alert (TAlertFull with user who created) if the user is a signed-in admin. Otherwise, returns TAlert'\n      summary: 'API endpoint to get a list of Alerts'\n      tags:\n        - alert\n      operationId: alertSearchPost\n      requestBody:\n        description: Parameters to search for alert.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AlertSearch'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/AlertSearch'\n      responses:\n        '200':\n          description: Alerts.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n                  alerts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AlertData'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /alert/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    get:\n      description: 'Get a single alert by ID. ex: /api/alert/5e6e9b2a8746d64922c6a412'\n      summary: 'Get an alert'\n      operationId: alertGet\n      tags:\n        - alert\n      responses:\n        '200':\n          description: Single Alert.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  alert:\n                    $ref: '#/components/schemas/AlertData'\n        '400':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n\n  /bot/check-links:\n    parameters:\n      - $ref: '#/components/parameters/slackTimestampHeader'\n    post:\n      description: \"Adds a Check Links job to the queue. This job walks through all the resources in the directory and checks if their respective website URLs are valid. \u003cbr\u003e\u003cbr\u003eCan be called from slack command `/check-links`.\"\n      summary: 'Adds a Check Links job to the queue'\n      tags:\n        - bot\n      operationId: botCheckLinksPost\n      security:\n        - slackSigned: []\n      requestBody:\n        $ref: '#/components/requestBodies/SlackBotRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/SlackBotResponse'\n        '400':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n\n  /bot/destroy-all-sessions:\n    parameters:\n      - $ref: '#/components/parameters/slackTimestampHeader'\n    post:\n      description: \"Adds a Destroy All Sessions job to the queue.\u003cbr\u003e\u003cbr\u003eCan be called from slack command `/destroy-all-sessions`.\"\n      summary: 'Adds a Destroy All Sessions job to the queue'\n      tags:\n        - bot\n      operationId: botDestroyAllSessionsPost\n      security:\n        - slackSigned: []\n      requestBody:\n        $ref: '#/components/requestBodies/SlackBotRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/SlackBotResponse'\n        '400':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n\n  /bot/sync-algolia:\n    parameters:\n      - $ref: '#/components/parameters/slackTimestampHeader'\n    post:\n      description: \"Adds 'syncAlgoliaIndex' to the queue. This job ensures that our algolia index is in sync with our database. \u003cbr\u003e\u003cbr\u003eCan be called from slack command `/sync-algolia`.\"\n      summary: \"Adds 'syncAlgoliaIndex' to the queue\"\n      tags:\n        - bot\n      operationId: botSyncAlgoliaPost\n      security:\n        - slackSigned: []\n      requestBody:\n        $ref: '#/components/requestBodies/SlackBotRequest'\n      responses:\n        '200':\n          $ref: '#/components/responses/SlackBotResponse'\n        '400':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n\n  /bot/test-job:\n    post:\n      description: \"Adds a Test Job to the Work Queue. \u003cbr\u003e\u003cbr\u003eCan be called from slack command `/test-job`. \u003cbr\u003eCommand can be like `/test-job 35`, where the second part is the delay to apply to the job. \u003cbr\u003e\u003cbr\u003eTo call from the command line: \u003cul\u003e\u003cli\u003e`curl -XPOST -d 'delay=2000\u0026shouldFail=true' 'localhost:3000/api/bot/test-job'`\u003c/li\u003e\u003c/ul\u003e\"\n      summary: \"Adds 'syncAlgoliaIndex' to the queue\"\n      tags:\n        - bot\n      operationId: botTestJobPost\n      security:\n        - slackSigned: []\n      requestBody:\n        description: 'Request body from slack / command.'\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/BotSlackTestJobPost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/BotSlackTestJobPost'\n      responses:\n        '201':\n          description: Slack Test Job Response.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  jobName:\n                    type: string\n                  jobId:\n                    type: string\n                  shouldFail:\n                    type: boolean\n                    default: true\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /category/{category}:\n    parameters:\n      - $ref: '#/components/parameters/categoryPath'\n    get:\n      description: 'Get a category with sub-categories.'\n      summary: 'Get a category'\n      tags:\n        - category\n      operationId: categoryGet\n      responses:\n        '200':\n          description: Single Category.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  category:\n                    $ref: '#/components/schemas/CategoryDocument'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n\n  /categories:\n    get:\n      description: 'Get an array of all categories.'\n      summary: 'Get all categories.'\n      tags:\n        - category\n      operationId: categoriesGet\n      responses:\n        '200':\n          description: Categories.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  categories:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/CategoryDocument'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /eventlogs:\n    post:\n      description: 'API endpoint to get a list of Event Logs. Ordered from newest to oldest.'\n      summary: 'API endpoint to get a list of Event Logs.'\n      security:\n        - requireAdmin: []\n      tags:\n        - eventlogs\n      operationId: eventlogsPost\n      requestBody:\n        description: Which eventlogs to return.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaginateEventLogsPost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PaginateEventLogsPost'\n      responses:\n        '200':\n          description: Event logs\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  estimatedTotal:\n                    $ref: '#/components/schemas/MetaCount'\n                  eventLogs:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          $ref: '#/components/schemas/Meta_id'\n                        actor:\n                          $ref: '#/components/schemas/MetaUser'\n                        detail:\n                          type: object\n                          properties:\n                            kind:\n                              $ref: '#/components/schemas/MetaEventKind'\n                            propertyNew:\n                              type: string\n                              description: New value for update type events.\n                            propertyOld:\n                              type: string\n                              description: Old value for update type events.\n                        kind:\n                          $ref: '#/components/schemas/MetaEventKind'\n                        createdAt:\n                          $ref: '#/components/schemas/MetaDateTime'\n                        updatedAt:\n                          $ref: '#/components/schemas/MetaDateTime'\n                        __v:\n                          type: integer\n                          default: 0\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n#  /hotlines:\n#    get:\n#      description: 'Get an array of all hotlines.'\n#      summary: 'Get all hotlines.'\n#      tags:\n#        - hotlines\n#      operationId: hotlinesGet\n#      responses:\n#        '200':\n#          description: Categories.\n#          content:\n#            application/json:\n#              schema:\n#                type: object\n#                properties:\n#                  hotlines:\n#                    type: array\n#                    items:\n#                      type: object\n#                      properties:\n#                        _id:\n#                          $ref: \"#/components/schemas/Meta_id\"\n#                        chatWebsite:\n#                          $ref: '#/components/schemas/MetaWebsite'\n#                        description:\n#                          type: string\n#                          default: 'Description of the hotline'\n#                        name:\n#                          type: string\n#                          default: 'Hotline Name'\n#                        phone:\n#                          $ref: '#/components/schemas/MetaPhone'\n#                        text:\n#                          type: string\n#                          default: 'Text for the hotline'\n#                        website:\n#                          $ref: '#/components/schemas/MetaWebsite'\n#        '500':\n#          $ref: '#/components/responses/ErrorUnknown'\n\n  /provider/logout:\n    get:\n      description: 'Log Out by destroying any sessions associated with request.'\n      summary: 'Log Out'\n      operationId: providerLogOutGet\n      responses:\n        '302':\n          description: \"Actual response is a Header with `Location` set as a string. OpenAPI doesn't support that type of response yet.\u003cbr\u003e\u003cbr\u003e`Location: /provider/?loggedout=true`\"\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /resource:\n    post:\n      description: 'Creates a new draft resource. Resources and updates to resources start as draft resource records. Draft resource updates are then merged into the `Resource` collection.'\n      summary: 'Create resource'\n      security:\n        - requireLoggedIn: []\n      tags:\n        - resource\n      operationId: resourcePost\n      requestBody:\n        description: New Resource Payload.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ResourcePost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/ResourcePost'\n      responses:\n        '201':\n          description: New draft resource\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  draftResource:\n                    $ref: '#/components/schemas/ResourceDraft'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '422':\n          $ref: '#/components/responses/ErrorAlreadyExists'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resource/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    get:\n      description: 'Get a resource.'\n      summary: 'Get a resource'\n      tags:\n        - resource\n      operationId: resourceGet\n      responses:\n        '200':\n          description: Single Resource.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  resource:\n                    $ref: '#/components/schemas/Resource'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources:\n    get:\n      description: 'Get an array of resources.'\n      summary: 'Get resources.'\n      tags:\n        - resource\n      operationId: resourcesGet\n      parameters:\n        - $ref: '#/components/parameters/idQueryMultipleOptional'\n      responses:\n        '200':\n          description: Array of resources.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  resources:\n                    $ref: '#/components/schemas/MetaResourceArr'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resource/draft/approve/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    post:\n      description: 'Mark a draft resource approved.'\n      summary: 'Approve draft resource'\n      tags:\n        - resource\n      operationId: resourcesDraftApprovePost\n      security:\n        - requireAdmin: []\n      requestBody:\n        $ref: '#/components/requestBodies/EmptyRequest'\n      responses:\n        '204':\n          $ref: '#/components/responses/EmptyObject'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resource/draft/delete/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    post:\n      description: 'Delete a draft resource.'\n      summary: 'Delete draft resource'\n      tags:\n        - resource\n      operationId: resourcesDraftDeletePost\n      security:\n        - requireAdmin: []\n      requestBody:\n        $ref: '#/components/requestBodies/EmptyRequest'\n      responses:\n        '204':\n          $ref: '#/components/responses/EmptyObject'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resource/draft/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    get:\n      description: 'Get a resource draft.'\n      summary: 'Get a resource draft'\n      operationId: resourceDraftGet\n      tags:\n        - resource\n      responses:\n        '200':\n          description: Single Resource Draft - `createdBy` only available to admin users.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  draftResource:\n                    $ref: '#/components/schemas/ResourceDraft'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/drafts:\n    parameters:\n      - $ref: '#/components/parameters/includeDeletedDraftsQueryOptional'\n    get:\n      description: 'Get an array of draft resources.'\n      summary: 'Get draft resources.'\n      tags:\n        - resource\n      operationId: resourcesDraftsGet\n      responses:\n        '200':\n          description: Draft resources\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  draftResources:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ResourceDraft'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/drafts/mine:\n    get:\n      description: 'Get an array of drafts the current user created.'\n      summary: 'Get draft resources for current user.'\n      tags:\n        - resource\n      operationId: resourcesDraftsMineGet\n      security:\n        - requireLoggedIn: []\n      responses:\n        '200':\n          description: Resource Drafts\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uncategorizedResources:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/ResourceDraft'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/issue/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    get:\n      description: 'Get an issue by id.'\n      summary: 'Get an issue'\n      tags:\n        - issues\n      operationId: resourceIssueGet\n      responses:\n        '200':\n          description: Issue.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  resourceIssue:\n                    type: object\n                    properties:\n                      _id:\n                        type: string\n                        default: '5e894bc235a65b002cce1116'\n                      detail:\n                        type: object\n                        properties:\n                          detailExplanation:\n                            type: string\n                            default: 'The picture is incorrect. Mike '\n                          kind:\n                            $ref: '#/components/schemas/MetaEventKindUserReport'\n                          reportedIssues:\n                            type: array\n                            items:\n                              type: string\n                              example: 'The address is wrong.'\n                      kind:\n                        $ref: '#/components/schemas/MetaEventKindUserReport'\n                      resourceId:\n                        type: string\n                        default: '5def5cb7b831a048f2a3deef'\n                      severity:\n                        type: string\n                        default: 'high'\n                      createdAt:\n                        $ref: '#/components/schemas/MetaDateTime'\n                      lastModifiedAt:\n                        $ref: '#/components/schemas/MetaDateTime'\n                      __v:\n                        type: integer\n                        default: 0\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/issues:\n    post:\n      description: 'Query for an array of issues.'\n      summary: 'Query issues.'\n      tags:\n        - issues\n      operationId: resourcesIssuesPost\n      security:\n        - requireAdmin: []\n      requestBody:\n        description: Filter which issues to return.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/IssuesQueryPost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/IssuesQueryPost'\n      responses:\n        '200':\n          description: Issues available for request.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  count:\n                    type: integer\n                    default: 12\n                  estimatedTotal:\n                    $ref: '#/components/schemas/MetaCount'\n                  resourceIssues:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          type: string\n                          default: '5f7a462dcd1b786bed19b4cb'\n                        detail:\n                          type: object\n                          properties:\n                            kind:\n                              $ref: '#/components/schemas/MetaEventKindUserReport'\n                            detailExplanation:\n                              type: string\n                              default: 'Derp'\n                            reportedIssues:\n                              type: array\n                              items:\n                                type: string\n                                example: 'The address is wrong.'\n                        kind:\n                          $ref: '#/components/schemas/MetaEventKindUserReport'\n                        resolved:\n                          type: boolean\n                          default: false\n                        resourceId:\n                          type: string\n                          default: '5def5cb7b831a048f2a3deed'\n                        severity:\n                          type: string\n                          default: 'high'\n                        createdAt:\n                          $ref: '#/components/schemas/MetaDateTime'\n                        lastModifiedAt:\n                          $ref: '#/components/schemas/MetaDateTime'\n                        __v:\n                          type: integer\n                          default: 0\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/issues/resolve/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    post:\n      description: 'Mark an issue resolved'\n      summary: 'Resolve issue'\n      tags:\n        - issues\n      operationId: resourcesIssueResolvePost\n      security:\n        - requireAdmin: []\n      requestBody:\n        $ref: '#/components/requestBodies/EmptyRequest'\n      responses:\n        '204':\n         $ref: '#/components/responses/EmptyObject'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/issues/unresolve/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    post:\n      description: 'Mark an issue unresolved'\n      summary: 'Unresolve issue'\n      tags:\n        - issues\n      operationId: resourcesIssueUnresolvePost\n      security:\n        - requireAdmin: []\n      requestBody:\n        $ref: '#/components/requestBodies/EmptyRequest'\n      responses:\n        '204':\n         $ref: '#/components/responses/EmptyObject'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/issues/user-report:\n    post:\n      description: 'Report a new issue'\n      summary: 'Report issue'\n      tags:\n        - issues\n      operationId: resourcesIssuesUserReportPost\n      requestBody:\n        description: Request body to create new issues.\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - resourceId\n                - reportedIssues\n              properties:\n                resourceId:\n                  $ref: '#/components/schemas/Meta_id'\n                reportedIssues:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      kind:\n                        $ref: '#/components/schemas/MetaEventKindUserReport'\n                      detailExplanation:\n                        type: string\n                        description: 'Text the user writes in as a detail.'\n                      reportedIssues:\n                        type: array\n                        items:\n                          type: string\n                          description: 'Schedule Incorrect, Website Inoperable'\n                detailExplanation:\n                  type: string\n      responses:\n        '201':\n          $ref: '#/components/responses/EmptyObject'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '422':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /resources/uncategorized:\n    get:\n      description: 'Get an array of uncategorized resources.'\n      summary: 'Get uncategorized resources.'\n      tags:\n        - resource\n      operationId: resourcesUncategorizedGet\n      responses:\n        '200':\n          description: Array of uncategorized resources.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  uncategorizedResources:\n                    $ref: '#/components/schemas/MetaResourceArr'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /subcategories:\n    get:\n      description: 'Get an array of all sub-categories.'\n      summary: 'Get sub-categories.'\n      tags:\n        - sub-category\n      operationId: subcategoriesGet\n      responses:\n        '200':\n          description: Subcategories.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  subcategories:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          $ref: '#/components/schemas/Meta_id'\n                        name:\n                          type: string\n                          example: 'Food Pantries'\n                        stub:\n                          type: string\n                          example: 'food_pantries'\n                        parentCategory:\n                          allOf:\n                            - $ref: '#/components/schemas/CategoryData'\n                            - type: object\n                              properties:\n                                subcategories:\n                                  type: array\n                                  items:\n                                    $ref: '#/components/schemas/Meta_id'\n                        createdAt:\n                          $ref: '#/components/schemas/MetaDateTime'\n                        lastModifiedAt:\n                          $ref: '#/components/schemas/MetaDateTime'\n                        __v:\n                          type: number\n                          default: 1\n\n  /subcategory/add-resource:\n    post:\n      description: 'Add a resource to a subcategory.'\n      summary: 'Create a resource'\n      security:\n        - requireAdmin: []\n      tags:\n        - sub-category\n      operationId: subcategoryAddResourcePost\n      requestBody:\n        description: Add Resource Payload.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddResourceSubCategoryPost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/AddResourceSubCategoryPost'\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyObject'\n        '400':\n          $ref: '#/components/responses/ErrorInvalidRequest'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /subcategory/{subcategory}:\n    parameters:\n      - $ref: '#/components/parameters/subcategoryPath'\n    get:\n      description: 'Get a sub-category by stub name.'\n      summary: 'Get a sub-category'\n      tags:\n        - sub-category\n      operationId: subcategoryGet\n      responses:\n        '200':\n          description: Subcategory.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  subcategory:\n                    type: object\n                    properties:\n                      _id:\n                        $ref: '#/components/schemas/Meta_id'\n                      name:\n                        type: string\n                        example: 'Food Pantries'\n                      stub:\n                        type: string\n                        example: 'food_pantries'\n                      parentCategory:\n                        $ref: '#/components/schemas/ParentCategory'\n                      resources:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Resource'\n                      createdAt:\n                        $ref: '#/components/schemas/MetaDateTime'\n                      lastModifiedAt:\n                        $ref: '#/components/schemas/MetaDateTime'\n                      __v:\n                        type: number\n                        default: 1\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n\n  /users:\n    post:\n      description: 'Get an array of all sub-categories.'\n      summary: 'Get users.'\n      tags:\n        - users\n      security:\n        - requireAdmin: []\n      operationId: usersGet\n      requestBody:\n        description: Filter which users to return.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PaginatePost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/PaginatePost'\n      responses:\n        '200':\n          description: Subcategories.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  estimatedTotal:\n                    $ref: '#/components/schemas/MetaCount'\n                  users:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        _id:\n                          $ref: '#/components/schemas/Meta_id'\n                        email:\n                          type: string\n                          example: 'dev.upswyng@gmail.com'\n                        isAdmin:\n                          type: boolean\n                          default: false\n                        isSuperAdmin:\n                          type: boolean\n                          default: false\n                        providers:\n                          type: array\n                          items:\n                            type: string\n                            enum:\n                              - facebook\n                              - google\n                              - slack\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /users/{id}:\n    parameters:\n      - $ref: '#/components/parameters/idPath'\n    get:\n      description: 'Get a user by _id.'\n      summary: 'Get a user'\n      tags:\n        - users\n      security:\n        - requireAdmin: []\n      operationId: userIdGet\n      responses:\n        '200':\n          description: User.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/MetaUser'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n    post:\n      description: 'Update user by _id'\n      summary: 'Update user'\n      tags:\n        - users\n      security:\n        - requireSuperAdmin: []\n      operationId: userIdPost\n      requestBody:\n        description: User details to update\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdatePost'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/UserUpdatePost'\n      responses:\n        '200':\n          description: User.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/MetaUser'\n        '401':\n          $ref: '#/components/responses/ErrorAuthentication'\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n        '500':\n          $ref: '#/components/responses/ErrorUnknown'\n\n  /weather:\n    parameters:\n      - $ref: '#/components/parameters/latitudeQuery'\n      - $ref: '#/components/parameters/longitudeQuery'\n    get:\n      description: 'Get weather data for location.'\n      summary: 'Get weather data'\n      operationId: weatherGet\n      responses:\n        '200':\n          description: Weather data.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  coord:\n                    type: object\n                    properties:\n                      lon:\n                        type: number\n                      lat:\n                        type: number\n                  weather:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: number\n                        main:\n                          type: string\n                        description:\n                          type: string\n                        icon:\n                          type: string\n                  base:\n                    type: string\n                  main:\n                    type: object\n                    properties:\n                      temp:\n                        type: number\n                      feels_like:\n                        type: number\n                      temp_min:\n                        type: number\n                      temp_max:\n                        type: number\n                      pressure:\n                        type: number\n                      humidity:\n                        type: number\n                  visibility:\n                    type: number\n                  wind:\n                    type: object\n                    properties:\n                      speed:\n                        type: number\n                      deg:\n                        type: number\n                      gust:\n                        type: number\n                  clouds:\n                    type: object\n                    properties:\n                      all:\n                        type: number\n                  dt:\n                    type: number\n                  sys:\n                    type: object\n                    properties:\n                      type:\n                        type: number\n                      id:\n                        type: number\n                      country:\n                        type: string\n                      sunrise:\n                        type: number\n                      sunset:\n                        type: number\n                  timezone:\n                    $ref: '#/components/schemas/MetaTimeZone'\n                  id:\n                    type: number\n                  name:\n                    type: string\n                  cod:\n                    type: number\n                  createdDate:\n                    type: string\n                  lifespan:\n                    type: number\n        '404':\n          $ref: '#/components/responses/ErrorNotFound'\n\ncomponents:\n  schemas:\n    AlertData:\n      type: object\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        category:\n          type: string\n          example: 5d8f030ac0e6672699a500c2\n          nullable: true\n          default: null\n        color:\n          type: string\n          default: 'gold'\n        createdBy:\n          $ref: '#/components/schemas/MetaCreatedBy'\n        detail:\n          type: string\n          nullable: true\n        end:\n          $ref: '#/components/schemas/MetaDateTime'\n        icon:\n          type: string\n          default: 'https://upload.wikimedia.org/wikipedia/commons/9/99/OOjs_UI_icon_alert-yellow.svg'\n        isApproved:\n          type: boolean\n          default: false\n        isCancelled:\n          type: boolean\n          default: false\n        lastModifiedBy:\n          $ref: '#/components/schemas/MetaUser'\n        start:\n          $ref: '#/components/schemas/MetaDateTime'\n        title:\n          type: string\n          default: 'alert description from postman'\n        wasProcessed:\n          type: boolean\n          default: false\n        createdAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        lastModifiedAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        __v:\n          type: integer\n          default: 0\n    AlertSearch:\n      allOf:\n        - $ref: '#/components/schemas/EndTimeObj'\n        - type: object\n          properties:\n            includeCancelled:\n              type: boolean\n              nullable: true\n              default: true\n            includeUnapproved:\n              type: boolean\n              nullable: true\n              default: false\n        - $ref: '#/components/schemas/StartTimeObj'\n    CategoryDataNoColor:\n      type: object\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        name:\n          type: string\n          example: Food\n        stub:\n          type: string\n          example: food\n        createdAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        lastModifiedAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        __v:\n          type: number\n          default: 1\n    CategoryData:\n      allOf:\n        - $ref: '#/components/schemas/CategoryDataNoColor'\n        - type: object\n          properties:\n            color:\n              type: string\n    EndTimeObj:\n      type: object\n      properties:\n        end:\n          type: string\n          format: date-time\n    ParentCategory:\n      allOf:\n        - $ref: '#/components/schemas/CategoryData'\n        - type: object\n          properties:\n            subcategories:\n              type: array\n              items:\n                $ref: '#/components/schemas/Meta_id'\n    Resource:\n      type: object\n      properties:\n        _id:\n          description: 'DO NOT normally reference this, use `resourceId`'\n          type: string\n          example: '5d8f030ac0e6672699a500c2'\n        address:\n          $ref: '#/components/schemas/MetaAddress'\n        createdAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        createdBy:\n          $ref: '#/components/schemas/MetaCreatedBy'\n        deleted:\n          $ref: '#/components/schemas/MetaDeleted'\n        description:\n          $ref: '#/components/schemas/MetaDescription'\n        kudos:\n          type: integer\n        lastModifiedAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        lastModifiedBy:\n          $ref: '#/components/schemas/MetaUser'\n        latitude:\n          $ref: '#/components/schemas/MetaLatitude'\n        legacyId:\n          $ref: '#/components/schemas/MetaLegacyId'\n        longitude:\n          $ref: '#/components/schemas/MetaLongitude'\n        name:\n          type: string\n        phone:\n          $ref: '#/components/schemas/MetaPhone'\n        resourceId:\n          $ref: '#/components/schemas/Meta_id'\n        schedule:\n          $ref: '#/components/schemas/MetaSchedule'\n        services:\n          $ref: '#/components/schemas/MetaServicesArr'\n        streetViewImage:\n          $ref: '#/components/schemas/MetaStreetViewImage'\n        subcategories:\n          $ref: '#/components/schemas/SubCategoryWithResources'\n        website:\n          $ref: '#/components/schemas/MetaWebsite'\n    ResourceDraft:\n      type: object\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        address:\n          $ref: '#/components/schemas/MetaAddress'\n        createdAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        createdBy:\n          $ref: '#/components/schemas/MetaCreatedBy'\n        deleted:\n          $ref: '#/components/schemas/MetaDeleted'\n        description:\n          $ref: '#/components/schemas/MetaDescription'\n        kudos:\n          type: integer\n          default: 0\n        latitude:\n          $ref: '#/components/schemas/MetaLatitude'\n        legacyId:\n          $ref: '#/components/schemas/MetaLegacyId'\n        longitude:\n          $ref: '#/components/schemas/MetaLongitude'\n        name:\n          type: string\n          default: 'Community Food Share'\n        phone:\n          $ref: '#/components/schemas/MetaPhone'\n        schedule:\n          $ref: '#/components/schemas/MetaSchedule'\n        services:\n          $ref: '#/components/schemas/MetaServicesArr'\n        streetViewImage:\n          $ref: '#/components/schemas/MetaStreetViewImage'\n        subcategories:\n          type: array\n          items:\n            type: object\n            properties:\n              _id:\n                $ref: '#/components/schemas/Meta_id'\n              name:\n                type: string\n                example: 'Food Pantries'\n              stub:\n                type: string\n                example: 'food_pantries'\n              parentCategory:\n                allOf:\n                  - $ref: '#/components/schemas/CategoryData'\n                  - type: object\n                    properties:\n                      subcategories:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Meta_id'\n              createdAt:\n                $ref: '#/components/schemas/MetaDateTime'\n              lastModifiedAt:\n                $ref: '#/components/schemas/MetaDateTime'\n              __v:\n                type: integer\n        website:\n          $ref: '#/components/schemas/MetaWebsite'\n    SlackBotResponse:\n      type: object\n      properties:\n        blocks:\n          type: array\n          items:\n            type: object\n            properties:\n              text:\n                type: object\n                properties:\n                  text:\n                    type: string\n                    example: 'Tell upswyngbot /COMMAND to run the job'\n                  type:\n                    $ref: '#/components/schemas/MetaSlackType'\n              type:\n                $ref: '#/components/schemas/MetaSlackType'\n        response_type:\n          type: string\n          enum:\n            - in_channel\n    Subcategory:\n      type: object\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        name:\n          type: string\n          example: 'Food Pantries'\n        stub:\n          type: string\n          example: 'food_pantries'\n        parentCategory:\n          allOf:\n            - $ref: '#/components/schemas/CategoryData'\n            - type: object\n              properties:\n                subcategories:\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/Meta_id'\n        createdAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        lastModifiedAt:\n          $ref: '#/components/schemas/MetaDateTime'\n        __v:\n          type: integer\n    SubCategoryWithResources:\n      allOf:\n        - $ref: '#/components/schemas/Subcategory'\n        - type: object\n          properties:\n            resources:\n              type: array\n              items:\n                $ref: '#/components/schemas/Resource'\n    StartTimeObj:\n      type: object\n      properties:\n        start:\n          type: string\n          format: date-time\n    # Document Types\n    CategoryDocument:\n      allOf:\n        - $ref: '#/components/schemas/CategoryData'\n        - type: object\n          properties:\n            subcategories:\n              type: array\n              items:\n                allOf:\n                  - $ref: '#/components/schemas/CategoryData'\n                  - type: object\n                    properties:\n                      resources:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Resource'\n    # Post Request Bodies\n    AddResourceSubCategoryPost:\n      type: object\n      properties:\n        subcategoryId:\n          $ref: '#/components/schemas/Meta_id'\n        resourceId:\n          $ref: '#/components/schemas/Meta_id'\n    AlertPost:\n      type: object\n      required:\n        - _id\n        - color\n        - end\n        - icon\n        - start\n        - title\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        color:\n          type: string\n        end:\n          $ref: '#/components/schemas/MetaDateTime'\n        icon:\n          type: string\n        isApproved:\n          type: boolean\n        isCancelled:\n          type: boolean\n        start:\n          $ref: '#/components/schemas/MetaDateTime'\n        title:\n          type: string\n    BotSlackJobPost:\n      type: object\n      properties:\n        response_url:\n          type: string\n          example: 'hooks.slack.com'\n    BotSlackTestJobPost:\n      type: object\n      properties:\n        delay:\n          type: integer\n        shouldFail:\n          type: string\n          enum:\n            - false\n            - true\n        response_url:\n          type: string\n          example: 'hooks.slack.com'\n    PaginateEventLogsPost:\n      allOf:\n        - $ref: '#/components/schemas/PaginatePost'\n        - type: object\n          properties:\n            resourceId:\n              $ref: '#/components/schemas/Meta_id'\n    IssuesQueryPost:\n      allOf:\n        - $ref: '#/components/schemas/PaginatePost'\n        - type: object\n          properties:\n            includeResolved:\n              type: boolean\n              default: false\n            minimumSeverity:\n              type: string\n              default: low\n              enum:\n                - low\n                - medium\n                - high\n    PaginatePost:\n      type: object\n      properties:\n        limit:\n          type: integer\n          default: 20\n        offset:\n          type: integer\n          default: 0\n    ResourcePost:\n      type: object\n      properties:\n        draftResource:\n          type: object\n          required:\n            - address\n            - description\n            - latitude\n            - longitude\n            - name\n            - phone\n            - resourceId\n            - schedule\n            - services\n            - streetViewImage\n            - subcategories\n            - website\n          properties:\n            address:\n              $ref: '#/components/schemas/MetaAddress'\n            description:\n              $ref: '#/components/schemas/MetaDescription'\n            latitude:\n              type: number\n              nullable: true\n              default: null\n            longitude:\n              type: number\n              nullable: true\n              default: null\n            name:\n              type: string\n            phone:\n              $ref: '#/components/schemas/MetaPhone'\n            resourceId:\n              $ref: '#/components/schemas/Meta_id'\n            schedule:\n              $ref: '#/components/schemas/MetaSchedule'\n            services:\n              $ref: '#/components/schemas/MetaServicesArr'\n            streetViewImage:\n              $ref: '#/components/schemas/MetaStreetViewImage'\n            subcategories:\n              type: array\n              items:\n                $ref: '#/components/schemas/Meta_id'\n            website:\n              $ref: '#/components/schemas/MetaWebsite'\n    UserUpdatePost:\n      type: object\n      properties:\n        isAdmin:\n          type: boolean\n        isSuperAdmin:\n          type: boolean\n    # Common\n    ErrorObj:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Description of error.\n          example: 'Error description'\n    # Meta\n    Meta_id:\n      type: string\n      example: 5d8f030ac0e6672699a500c2\n    MetaAddress:\n      type: object\n      properties:\n        address1:\n          type: string\n          example: 123 Someplace Avenue\n        city:\n          type: string\n          example: Boulder\n        state:\n          type: string\n          example: CO\n        zip:\n          type: integer\n          example: 80301\n    MetaCount:\n      type: integer\n      default: 0\n      example: 29\n    MetaCreatedBy:\n      description: 'User object that only appears for admin users, otherwise field will be omitted.'\n      type: object\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        email:\n          type: string\n          example: 'dev.upswyng@gmail.com'\n        isAdmin:\n          type: boolean\n          default: false\n        isSuperAdmin:\n          type: boolean\n          default: false\n        name:\n          type: string\n          example: \"Ursella UpSwyng\"\n        providers:\n          type: array\n          items:\n            type: string\n            enum:\n              - facebook\n              - google\n              - slack\n    MetaDateTime:\n      type: string\n      format: date-time\n      example: '2019-09-28T06:51:53.633Z'\n    MetaDeleted:\n      type: boolean\n      description: \"We leave entries in the DB so they don't get resynced from Strapped, but for all intents \u0026 purposes this resource doesn't exist.\"\n      default: false\n    MetaDescription:\n      type: string\n      example: 'Weekly groceries for families whose children are enrolled in the free or reduced lunch program at their school.'\n    MetaEventKind:\n      type: string\n      enum:\n          - alert_live\n          - draft_approved\n          - draft_created\n          - draft_deleted\n          - resource_issue_reopened\n          - resource_issue_resolved\n          - user_permission_changed\n    MetaEventKindUserReport:\n      type: string\n      default: 'user_report'\n      example: 'user_report'\n      enum:\n        - 'user_report'\n    MetaLatitude:\n      type: number\n      nullable: true\n      default: null\n      example: 40.0584971\n    MetaLongitude:\n      type: number\n      nullable: true\n      default: null\n      example: -105.11954379999997\n    MetaLegacyId:\n      type: string\n      example: -KZnRX-8rV1552vd0P7_\n    MetaPhone:\n      type: string\n      example: (303) 555-0112\n    MetaResourceArr:\n      type: array\n      items:\n        allOf:\n          - $ref: '#/components/schemas/Resource'\n          - type: object\n            properties:\n              subcategories:\n                allOf:\n                  - $ref: '#/components/schemas/CategoryDataNoColor'\n                  - type: object\n                    properties:\n                      parentCategory:\n                        $ref: '#/components/schemas/CategoryData'\n    MetaSchedule:\n      type: object\n      properties:\n        alwaysOpen:\n          type: boolean\n        timezone:\n          $ref: '#/components/schemas/MetaTimeZone'\n        _items:\n          type: array\n          items:\n            type: object\n            properties:\n              comment:\n                type: string\n              fromTime:\n                type: integer\n              recurrenceRule:\n                type: string\n                example: 'RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=WE'\n              toTime:\n                type: integer\n    MetaServicesArr:\n      type: array\n      items:\n        type: string\n        example: 'Groceries for low-income Seniors/Families'\n    MetaSlackType:\n      type: string\n      enum:\n        - mrkdwn\n        - section\n    MetaStreetViewImage:\n      type: string\n      example: 'http://media.upswyng.org/images/5def5cbab831a048f2a3df03.jpg'\n      nullable: true\n    MetaTimeZone:\n      type: string\n      example: 'America/Denver'\n    MetaUser:\n      type: object\n      properties:\n        _id:\n          $ref: '#/components/schemas/Meta_id'\n        email:\n          type: string\n          example: 'dev.upswyng@gmail.com'\n        isAdmin:\n          type: boolean\n          default: false\n        isSuperAdmin:\n          type: boolean\n          default: false\n        name:\n          type: string\n          example: \"Ursella UpSwyng\"\n        providers:\n          type: array\n          items:\n            type: string\n            enum:\n              - facebook\n              - google\n              - slack\n    MetaWebsite:\n      type: string\n      example: 'https://www.upswyng.org/'\n\n  securitySchemes:\n    requireAdmin:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    requireLoggedIn:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    requireSuperAdmin:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n    slackSigned:\n      type: apiKey\n      in: header\n      name: 'X-Slack-Signature'\n\n  parameters:\n    categoryPath:\n      name: category\n      in: path\n      description: Single category stub name.\n      example: transit\n      required: true\n      schema:\n        type: string\n        example: food\n    idPath:\n      name: id\n      in: path\n      description: Single object _id.\n      required: true\n      schema:\n        $ref: '#/components/schemas/Meta_id'\n    idQueryOptional:\n      name: id\n      in: query\n      description: _id for an entry\n      required: false\n      schema:\n        type: string\n        example: 5def5cb7b831a048f2a3deed\n    idQueryMultipleOptional:\n      name: id\n      in: query\n      description: 'Single `_id` or multiple comma separated `_id,_id,_id` for one or more entries.'\n      required: false\n      schema:\n        type: string\n        example: 5def5cb7b831a048f2a3deed\n    includeDeletedDraftsQueryOptional:\n      name: include-deleted\n      in: query\n      description: Whether to include drafts for resources that are already deleted\n      required: false\n      schema:\n        type: boolean\n    latitudeQuery:\n      name: latitude\n      in: query\n      description: Latitude, probably for current user\n      required: true\n      schema:\n        type: number\n        example: 40.015\n    longitudeQuery:\n      name: longitude\n      in: query\n      description: Longitude, probably for current user\n      required: true\n      schema:\n        type: number\n        example: -105.2705\n    slackTimestampHeader:\n      in: header\n      name: X-Slack-Request-Timestamp\n      required: true\n      schema:\n        type: string\n        format: date-time\n    subcategoryPath:\n      name: subcategory\n      in: path\n      description: Single subcategory stub name.\n      example: food_pantry\n      required: true\n      schema:\n        type: string\n\n  responses:\n    EmptyObject:\n      description: Empty json object.\n      content:\n        application/json:\n          schema:\n            type: object\n    ErrorAlreadyExists:\n      description: Resource already exists and cannot be created again.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorObj'\n    ErrorAuthentication:\n      description: Invalid user credentials submitted.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorObj'\n    ErrorInvalidRequest:\n      description: Known invalid request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorObj'\n    ErrorNotFound:\n      description: Resource invalid or not found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorObj'\n    ErrorUnknown:\n      description: Unknown invalid request.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorObj'\n    SlackBotResponse:\n      description: Slack Response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/SlackBotResponse'\n\n  requestBodies:\n    EmptyRequest:\n      description: Empty request body\n      content:\n        application/json: {}\n    SlackBotRequest:\n      description: 'Request body from slack / command.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/BotSlackJobPost'\n        application/x-www-form-urlencoded:\n          schema:\n            $ref: '#/components/schemas/BotSlackJobPost'\n\ntags:\n  - name: alert\n    description: 'Create and get alerts for display.'\n  - name: bot\n    description: 'Endpoints for slack bot to interact with.'\n  - name: category\n    description: 'Categories'\n  - name: sub-category\n    description: 'SubCategories'\n  - name: eventlogs\n    description: 'Event logs'\n#  - name: hotlines\n#    description: 'Hotlines'\n  - name: issues\n    description: 'Endpoints for issues reported on resources'\n  - name: resource\n    description: 'Resources'\n  - name: users\n    description: 'Users'\n",
			"canonicalURL": "/github.com/CodeForBoulder/upswyng@de376d3704fb63514bdb0a7c50b933d3737e1e12/-/blob/packages/server/docs/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/CodeForBoulder/upswyng/blob/de376d3704fb63514bdb0a7c50b933d3737e1e12/packages/server/docs/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"BotSlackTestJobPost\": parse schema: property \"shouldFail\": parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}