{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/kosatnkn/catalyst"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/openapi.yaml",
			"byteSize": 7627,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: Catalyst\n  description: \u003e\n    A REST API base written in Golang\n  version: v2.5.1\n\nservers:\n  - url: http://localhost:3000/api\n    description: Mock\n\npaths:\n\n  # -------------------------------------------------\n  # API Information\n  # -------------------------------------------------\n\n  /:\n    get: # Get API information\n      tags:\n        - information\n      summary: Sends information about the API\n      description: \u003e\n        Provides information about the API like `name`, `version`, `purpose`.\n      responses:\n        '200':\n          description: API Details\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: object\n                    properties:\n                      name:\n                        type: string\n                        enum:\n                          - $ref: '#/info/title'\n                      version:\n                        type: string\n                        enum:\n                          - $ref: '#/info/version'\n                      purpose:\n                        type: string\n                        enum:\n                          - $ref: '#/info/description'\n\n  # -------------------------------------------------\n  # Sample\n  # -------------------------------------------------\n\n  /samples:\n    get: # Get samples\n      tags:\n        - samples\n      summary: Return a collection of samples\n      parameters:\n        - name: filters\n          in: query\n          description: Additional filters JSON in string serialized format\n          schema:\n            $ref: '#/components/schemas/filters'\n        - in: query\n          name: paginator\n          description: Paginator JSON in string serialized format\n          schema:\n            $ref: '#/components/schemas/paginator'\n      responses:\n        200:\n          description: Samples collection\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/res_sample'\n        400:\n          description: Domain Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n        500:\n          description: Service Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n\n    post: # Create new sample\n      tags:\n        - samples\n      summary: Create a new sample\n      description: \u003e\n        Create new sample from provided data.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/req_sample'\n        required: true\n      responses:\n        201:\n          description: Sample created\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/identifier'\n        400:\n          description: Domain Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n        422:\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/validation_error'\n        500:\n          description: Service Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n\n  /samples/{id}:\n    get: # Get sample by id\n      tags:\n        - samples\n      summary: Return a single sample by id\n      parameters:\n        - name: id\n          in: path\n          description: Identifier\n          required: true\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Sample\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  data:\n                    $ref: '#/components/schemas/res_sample'\n        400:\n          description: Domain Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n        500:\n          description: Service Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n\n    put: # Edit sample\n      tags:\n        - samples\n      summary: Update a sample\n      parameters:\n        - name: id\n          in: path\n          description: Identifier\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/req_sample'\n        required: true\n      responses:\n        204:\n          description: Sample updated\n        400:\n          description: Domain Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n        422:\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/validation_error'\n        500:\n          description: Service Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n\n    delete: # Delete sample\n      tags:\n        - samples\n      summary: Delete a sample\n      parameters:\n        - name: id\n          in: path\n          description: Identifier\n          required: true\n          schema:\n            type: integer\n      responses:\n        204:\n          description: Sample deleted\n        400:\n          description: Domain Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n        500:\n          description: Service Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/generic_error'\n\n\n# -------------------------------------------------\n# Components\n# -------------------------------------------------\n\ncomponents:\n\n  schemas:\n  \n    identifier: \n      type: object\n      properties:\n        id:\n          type: integer\n          minimum: 1\n          maximum: 99999\n    \n    filters:\n      type: string\n      example: '[{\"key\": \"value\"}]'\n  \n    paginator: \n      type: string\n      example: '{\"page\": 1, \"size\": 10}'\n      \n    req_sample: \n      type: object\n      properties:\n        name:\n          type: string\n        password:\n          type: string\n    \n    res_sample: \n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          \n    generic_error:\n      type: object\n      properties:\n        errors:\n          type: object\n          properties:\n            code:\n              type: string\n            message:\n              type: string\n            trace:\n              type: string\n          required:\n            - code\n            - message\n    \n    validation_error:\n      type: object\n      properties:\n        errors:\n          type: object\n          properties:\n            field: \n              type: array\n              items: \n                type: string\n      required:\n        - errors\n",
			"canonicalURL": "/github.com/kosatnkn/catalyst@79d90fadd772ecb67eb95611e8eed776f077a2ba/-/blob/docs/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/kosatnkn/catalyst/blob/79d90fadd772ecb67eb95611e8eed776f077a2ba/docs/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/\": at 1:952: get: at 1:959: responses: 200: at 1:1067: at 1:1078: content: application/json: at 1:1098: schema: at 1:1108: parse schema: property \"data\": at 1:1130: parse schema: property \"name\": at 1:1152: parse enum values: parse value \"{\\\"$ref\\\":\\\"#/info/title\\\"}\": expected type \"string\", got \"object\""
}