{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikimedia/restbase"
		},
		"file": {
			"name": "summary_new.yaml",
			"size": 0,
			"path": "v1/summary_new.yaml",
			"byteSize": 8697,
			"content": "openapi: 3.0.1\ninfo:\n  version: 1.0.0-beta\n  title: MediaWiki Summary API\n  description: Page content summary API\n  termsOfService: https://github.com/wikimedia/restbase#restbase\n  contact:\n    name: Services\n    email: services@lists.wikimedia.org\n    url: https://www.mediawiki.org/wiki/Services\n  license:\n    name: Apache licence, v2\n    url: https://www.apache.org/licenses/LICENSE-2.0\npaths:\n  /summary/{title}:\n    x-route-filters:\n      - path: ./lib/access_check_filter.js\n        options:\n          redirect_cache_control: '{{options.response_cache_control}}'\n      - path: ./lib/ensure_content_type.js\n      - path: ./lib/language_variants_filter.js\n    get:\n      tags:\n        - Page content\n      summary: Get basic metadata and simplified article introduction.\n      description: |\n        The summary response includes an extract of the first paragraph of the page in plain text\n        and HTML as well as the type of page. This is useful for page previews (fka. Hovercards,\n        aka. Popups) on the web and link previews in the apps.\n\n        Stability: [stable](https://www.mediawiki.org/wiki/Wikimedia_Product/Wikimedia_Product_Infrastructure_team/API_endpoint_stability_policy#Stable)\n\n        Please follow [wikitech-l](https://lists.wikimedia.org/mailman/listinfo/wikitech-l) or [mediawiki-api-announce](https://lists.wikimedia.org/mailman/listinfo/mediawiki-api-announce) for announcements of breaking changes.\n      parameters:\n        - name: title\n          in: path\n          description: 'Page title. Use underscores instead of spaces. Use percent-encoding. Example: `Main_Page`.'\n          required: true\n          schema:\n            type: string\n        - name: redirect\n          in: query\n          description: |\n            Requests for [redirect pages](https://www.mediawiki.org/wiki/Help:Redirects) return HTTP 302 with a redirect target in `Location` header and content in the body.\n            To get a 200 response instead, supply `false` to the `redirect` parameter.\n          schema:\n            type: boolean\n        - name: Accept-Language\n          in: header\n          description: |\n            The desired language variant code for wikis where LanguageConverter is enabled. Example: `sr-el` for Latin transcription of the Serbian language.\n          schema:\n            type: string\n      responses:\n        200:\n          description: The summary for the given page\n          headers:\n            ETag:\n              description: |\n                Syntax: \"{revision}/{tid}\". Example: \"701384379/154d7bca-c264-11e5-8c2f-1b51b33b59fc\"\n              schema:\n                type: string\n          content:\n            application/json; charset=utf-8; profile=\"https://www.mediawiki.org/wiki/Specs/Summary/1.4.2\":\n              schema:\n                $ref: '#/components/schemas/summary'\n        301:\n          description: |\n            A permanent redirect is returned if the supplied article title was not in the normalized form.\n            To avoid this kind of redirect, you can use the [mediawiki-title](https://github.com/wikimedia/mediawiki-title) library to perform\n            title normalization client-side.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        302:\n          description: |\n            The page is a [redirect page](https://www.mediawiki.org/wiki/Help:Redirects).\n            The `location` header points to the redirect target.\n            If you would like to avoid automatically following redirect pages, set the `redirect=false` query parameter.\n\n            Beware that redirected pre-flighted cross-origin requests (such as those sending custom request headers like `Api-User-Agent`)\n            will fail in most current browsers [due to a spec bug](https://github.com/whatwg/fetch/issues/204).\n        404:\n          description: Unknown page title\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n        default:\n          description: Error\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/problem'\n      x-setup-handler:\n        # Set up a simple key-value bucket.\n        - init:\n            method: put\n            uri: /{domain}/sys/key_value/page_summary\n            headers:\n              content-type: application/json\n            body:\n              valueType: json\n      x-request-handler:\n        - storage:\n            request:\n              method: get\n              headers:\n                cache-control: '{{cache-control}}'\n              uri: /{domain}/sys/key_value/page_summary/{request.params.title}\n            catch:\n              status: 404\n            return_if:\n              # Typical case: Return straight from storage.\n              status: 2xx\n            return:\n              status: 200\n              headers:\n                content-type: '{{storage.headers.content-type}}'\n                etag: '{{storage.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n                content-language: '{{storage.headers.content-language}}'\n                vary: '{{storage.headers.vary}}'\n              body: '{{storage.body}}'\n\n        # Storage miss. Call the Action API to get the textextract.\n        - extract:\n            request:\n              method: get\n              headers:\n                accept-language: '{{accept-language}}'\n              uri: '{{options.host}}/{domain}/v1/page/summary/{title}'\n            response:\n              status: '{{extract.status}}'\n              headers: '{{extract.headers}}'\n              body: '{{changeProtocol(extract.body)}}'\n        - store_and_return:\n            request:\n              method: put\n              uri: /{domain}/sys/key_value/page_summary/{request.params.title}\n              headers:\n                if-none-hash-match: '*'\n                content-type: 'application/json'\n                cache-control: '{{request.headers.cache-control}}'\n                x-store-etag: '{{extract.headers.etag}}'\n                x-store-content-language: '{{extract.headers.content-language}}'\n                x-store-content-type: '{{extract.headers.content-type}}'\n                x-store-vary: '{{extract.headers.vary}}'\n              body: '{{extract.body}}'\n            # With the if-none-hash-match header the storage will return 412\n            # if the content is not changed. In that case, return from the\n            # handler completely, and avoid issuing purges.\n            # Also don't emit an event if nothing new was actually stored (code 202)\n            catch:\n              status:\n                - 202\n                - 412\n            return_if:\n              status:\n                - 202\n                - 412\n            return:\n              status: 200\n              headers:\n                etag: '{{extract.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n                content-language: '{{extract.headers.content-language}}'\n                content-type: '{{extract.headers.content-type}}'\n                vary: '{{extract.headers.vary}}'\n              body: '{{extract.body}}'\n        - emit_change_event:\n            request:\n              method: post\n              uri: /{domain}/sys/events/\n              body:\n                - meta:\n                    uri: //{request.params.domain}/api/rest_v1/page/summary/{request.params.title}\n            return:\n              status: 200\n              headers:\n                etag: '{{extract.headers.etag}}'\n                cache-control: '{{options.response_cache_control}}'\n                content-language: '{{extract.headers.content-language}}'\n                content-type: '{{extract.headers.content-type}}'\n                vary: '{{extract.headers.vary}}'\n              body: '{{extract.body}}'\n\n      x-monitor: true\n      x-amples:\n        - title: Get summary from storage\n          request:\n            params:\n              domain: en.wikipedia.org\n              title: San_Francisco\n          response:\n            status: 200\n            headers:\n              etag: /.+/\n              content-type: /^application\\/json/\n            body:\n              extract: /.+/\n              extract_html: /.+/\n              thumbnail:\n                source: /^https:/\n              originalimage:\n                source: /^https:/\n              lang: en\n              dir: ltr\n              description: /.+/\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /summary/{title}: get: operation \"\": responses: 404: content: \"application/problem+json\": schema: parse schema: resolve \"#/components/schemas/problem\": find schema: resolve \"#/components/schemas/problem\": can't find value for \"components/schemas/problem\""
}