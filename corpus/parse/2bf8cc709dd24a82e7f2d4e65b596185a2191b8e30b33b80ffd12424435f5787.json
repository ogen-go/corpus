{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alma-cdk/openapix"
		},
		"file": {
			"name": "todo-api.yaml",
			"size": 0,
			"path": "examples/todo-api/schema/todo-api.yaml",
			"byteSize": 3256,
			"content": "openapi: 3.0.3\ninfo:\n  title: Todo API\n  description: \u003e\n    Defines an example API for managing Todo items by partially implementing the [{JSON} Placeholder TODOs](https://jsonplaceholder.typicode.com) API.\n  version: \"0.0.1\"\npaths:\n  \"/todos\":\n    post:\n      operationId: newTodo\n      summary: New Todo Item\n      description: Use this when you need to create a new Todo Item.\n      requestBody:\n        description: Request body definition for creating a new Todo\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TodoRequest'\n      responses:\n        \"200\":\n          description: Success\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/TodoResponse\"\n        \"400\":\n          description: Invalid Request\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/InvalidRequestResponse\"\n\n  \"/todos/{todoId}\":\n    get:\n      operationId: getTodo\n      summary: Get Todo Item\n      description: Use this when you need to get an existing Todo Item.\n      parameters:\n        - name: todoId\n          in: path\n          required: true\n          schema:\n            type: int\n            example: 1\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            \"application/json\":\n              schema:\n                $ref: \"#/components/schemas/TodoResponse\"\n\ncomponents:\n  schemas:\n    TodoRequest:\n      description: Request body definition for creating a new Todo\n      type: object\n      required:\n      - title\n      - userId\n      properties:\n        title:\n          type: string\n          description: Title for the new Todo\n          example: Make Coffee\n        userId:\n          type: integer\n          description: To which User (ID) this Todo item belongs to\n          example: 1\n        body:\n          type: string\n          description: Describes the Todo item\n          example: We need Coffee to be able to convert caffeine into code.\n        completed:\n          type: boolean\n          description: Is this Todo completed or not\n          default: false\n          example: false\n    InvalidRequestResponse:\n      description: Shown when request validation failed for creating a new Todo item\n      type: object\n      properties:\n        message:\n          type: string\n          example: Invalid request body\n    TodoResponse:\n      description: Response body definition for Todo item\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title for the new Todo\n          example: Make Coffee\n        body:\n          type: string\n          description: Describes the Todo item\n          example: We need Coffee to be able to convert caffeine into code.\n        userId:\n          type: integer\n          description: To which User (ID) this Todo item belongs to\n          example: 1\n        completed:\n          type: boolean\n          description: Is this Todo completed or not\n          default: false\n          example: false\n        id:\n          type: integer\n          description: Unique ID for the Todo item\n          example: 201\n",
			"canonicalURL": "/github.com/alma-cdk/openapix@088fdd2354b46a372499a4e3699a16b11c6e1dfa/-/blob/examples/todo-api/schema/todo-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/alma-cdk/openapix/blob/088fdd2354b46a372499a4e3699a16b11c6e1dfa/examples/todo-api/schema/todo-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/todos/{todoId}\": at 1:2266: get: operation \"getTodo\": at 1:2273: parameters: parse parameter \"todoId\": at 1:2381: at 1:2435: schema: at 1:2435: parse schema: unexpected schema type: \"int\""
}