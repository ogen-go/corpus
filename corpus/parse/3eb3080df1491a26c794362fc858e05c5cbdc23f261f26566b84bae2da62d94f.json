{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vanilla/vanilla"
		},
		"file": {
			"name": "statuses.yml",
			"size": 0,
			"path": "applications/dashboard/openapi/statuses.yml",
			"byteSize": 7200,
			"content": "openapi: 3.0.2\ninfo:\npaths:\n    /discussions/statuses:\n        get:\n            summary: Get known discussion statuses.\n            tags:\n                - Statuses\n            parameters:\n                - name: subType\n                  in: query\n                  schema:\n                      type: string\n                - name: state\n                  in: query\n                  schema:\n                      type: string\n                      enum:\n                          - open\n                          - closed\n            responses:\n                \"200\":\n                    description: OK\n                    content:\n                        application/json:\n                            schema:\n                                type: array\n                                items:\n                                    $ref: \"#/components/schemas/RecordStatus\"\n                \"400\":\n                    description: Bad Request\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BasicError\"\n        post:\n            summary: Create a new discussion status.\n            tags:\n                - Statuses\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/RecordStatusPost\"\n                required: true\n            responses:\n                \"201\":\n                    $ref: \"#/components/responses/RecordStatusResponse\"\n                \"400\":\n                    description: Bad Request\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BasicError\"\n                \"403\":\n                    $ref: \"#/components/responses/PermissionError\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n    /discussions/statuses/{id}:\n        parameters:\n            - name: id\n              in: path\n              required: true\n              schema:\n                  type: integer\n        get:\n            summary: Get a discussion status by its ID.\n            tags:\n                - Statuses\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/RecordStatusResponse\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n        patch:\n            summary: Update a discussion status.\n            tags:\n                - Statuses\n            requestBody:\n                content:\n                    application/json:\n                        schema:\n                            $ref: \"#/components/schemas/RecordStatusPatch\"\n            responses:\n                \"200\":\n                    $ref: \"#/components/responses/RecordStatusResponse\"\n                \"400\":\n                    description: Bad Request, e.g. attempting to update a system-defined status\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BasicError\"\n                \"403\":\n                    $ref: \"#/components/responses/PermissionError\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\n        delete:\n            summary: Delete a discussion status.\n            tags:\n                - Statuses\n            responses:\n                \"204\":\n                    description: OK\n                \"400\":\n                    description: Bad Request, e.g. attempting to delete a system-defined status\n                    content:\n                        application/json:\n                            schema:\n                                $ref: \"#/components/schemas/BasicError\"\n                \"403\":\n                    $ref: \"#/components/responses/PermissionError\"\n                \"404\":\n                    $ref: \"#/components/responses/NotFound\"\ncomponents:\n    responses:\n        RecordStatusResponse:\n            description: OK\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/RecordStatus\"\n    schemas:\n        RecordStatus:\n            type: object\n            properties:\n                statusID:\n                    description: Unique numeric ID of a status.\n                    type: string\n                name:\n                    description: Name of status\n                    type: string\n                state:\n                    description: State of the item associated with this status\n                    type: string\n                    enum:\n                        - open\n                        - closed\n                recordType:\n                    description: Type of resource to which this status applies\n                    type: string\n                    minLength: 1\n                recordSubtype:\n                    description: Subtype of resource to which this status applies\n                    type: string\n                    nullable: true\n                isDefault:\n                    description: True if this status is to be assigned to the resource upon its creation, false otherwise\n                    type: boolean\n                    default: false\n                isSystem:\n                    description: True if this status is defined by the application and is not accessible for modification or deletion.\n                    type: boolean\n                    default: false\n        RecordStatusPatch:\n            type: object\n            properties:\n                name:\n                    description: Name of status\n                    type: string\n                isDefault:\n                    description: True if this status is to be assigned to the resource upon its creation, false otherwise\n                    type: boolean\n                state:\n                    description: State of the item associated with this status\n                    type: string\n                    enum:\n                        - open\n                        - closed\n                recordSubtype:\n                    description: Subtype of resource to which this status applies\n                    type: string\n                    nullable: true\n        RecordStatusPost:\n            type: object\n            properties:\n                name:\n                    description: Name of status\n                    type: string\n                isDefault:\n                    description: True if this status is to be assigned to the resource upon its creation, false otherwise\n                    type: boolean\n                state:\n                    description: State of the item associated with this status\n                    type: string\n                    enum:\n                        - open\n                        - closed\n                recordSubtype:\n                    description: Subtype of resource to which this status applies\n                    type: string\n                    nullable: true\n            required:\n                - name\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /discussions/statuses: get: operation \"\": responses: 400: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/BasicError\": find schema: resolve \"#/components/schemas/BasicError\": can't find value for \"components/schemas/BasicError\""
}