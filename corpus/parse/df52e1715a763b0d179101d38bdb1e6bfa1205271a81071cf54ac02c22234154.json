{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dustin/gopro-plus"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api.yaml",
			"byteSize": 23444,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0-oas3\n  title: GoPro-Plus API\n  description: The API surface of the GoPro Plus service (reverse-engineered).\n  contact:\n    name: Dustin\n    email: dustin@spy.net\n    url: https://github.com/dustin/gopro-api\nsecurityDefinitions:\n  password:\n    type: oauth2\n    tokenUrl: 'https://api.gopro.com/v1/oauth2/token'\n    flow: password\n    scopes:\n      root: things\n      'root:channels': things\n      public: things\n      me: things\n      upload: things\n      media_library_beta: things\n      live: things\n\nservers:\n  - url: https://api.gopro.com/media\n    description: GoPro Plus endpoint\n\nsecurity:\n  - password:\n      - root\n      - 'root:channels'\n      - public\n      - me\n      - upload\n      - media_library_beta\n      - live\npaths:\n  /media/search:\n    get:\n      summary: Search/list all media items.\n      parameters:\n        - name: fields\n          in: query\n          required: true\n          description: The list of fields to return (see the medium\n            object for a field list)\n          schema:\n            type: string\n        - name: order_by\n          in: query\n          required: true\n          description: Field to sort by.\n          schema:\n            type: string\n        - name: per_page\n          in: query\n          required: true\n          description: How many items to return per page.\n          schema:\n            type: integer\n        - name: page\n          in: query\n          required: true\n          description: Page number to return.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: The list of errors (if any) describing deletion failures.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _pages:\n                    $ref: \"#/schemas/pageinfo\"\n                  _embedded:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        errors:\n                          $ref: \"#/schemas/error\"\n                        media:\n                          type: array\n                          items:\n                            $ref: \"#/schemas/medium\"\n  /media/{medium_id}:\n    get:\n      summary: \"Get data for a given medium ID\"\n      parameters:\n        - name: medium_id\n          in: path\n          required: true\n          description: \"The medium ID to look up\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/schemas/medium\"\n\n    put:\n      summary: \"Update a medium in place.\"\n      parameters:\n        - name: medium_id\n          in: path\n          required: true\n          description: \"The medium ID to update\"\n          schema:\n            type: string\n\n      requestBody:\n        description: An updated medium value to modify in place.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/schemas/medium\"\n      responses:\n        '204':\n          description: OK\n\n  /media:\n    delete:\n      summary: \"Delete one or more items\"\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: \"The comma-separated list of media IDs to delete\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/schemas/error\"\n\n    post:\n      summary: Create a new medium\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                file_extension:\n                  type: string\n                  example: \"MP4\"\n                filename:\n                  type: string\n                type:\n                  type: string\n                  enum:\n                    - \"photo\"\n                    - \"video\"\n                    - \"timelapse\"\n                    - \"timelapse_video\"\n                    - \"burst\"\n                on_public_profile:\n                  type: boolean\n                content_title:\n                  type: string\n                content_source:\n                  example: \"web_media_library\"\n                  type: string\n                access_token:\n                  type: string\n                gopro_user_id:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/schemas/medium\"\n      description: See [upload process documentation](https://github.com/dustin/gopro-plus/wiki/GoPro-Plus-API) for a more detailed description of sequence of calls required to upload media.\n\n  /media/{medium_id}/download:\n    get:\n      summary: \"Get download URLs for variants\"\n      parameters:\n        - name: medium_id\n          in: path\n          required: true\n          description: \"The medium ID for which to find download URls\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/schemas/fileinfo\"\n\n  /media/{medium_id}/moments:\n    get:\n      summary: \"Get moments for a medium\"\n      parameters:\n        - name: medium_id\n          in: path\n          required: true\n          description: \"The medium ID for which to find download URls\"\n          schema:\n            type: string\n        - name: fields\n          in: query\n          required: true\n          description: \"The fields to return (typically just time)\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _pages:\n                    $ref: \"#/schemas/pageinfo\"\n                  _embedded:\n                    type: object\n                    properties:\n                      moments:\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            moment:\n                              type: object\n                              properties:\n                                id:\n                                  type: string\n                                time:\n                                  type: integer\n                                  description: moment offset\n\n  /derivatives:\n    post:\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                medium_id:\n                  type: string\n                file_extension:\n                  type: string\n                  example: \"MP4\"\n                type:\n                  type: string\n                label:\n                  type: string\n                available:\n                  type: boolean\n                item_count:\n                  type: integer\n                camera_positions:\n                  type: string\n                  example: \"default\"\n                on_public_profile:\n                  type: boolean\n                access_token:\n                  type: string\n                gopro_user_id:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/schemas/derivative\"\n\n  /user-uploads:\n    post:\n      summary: \"Create an upload of a part of a derivative.\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                derivative_id:\n                  type: string\n                camera_position:\n                  type: string\n                  example: \"default\"\n                item_number:\n                  type: integer\n                access_token:\n                  type: string\n                gopro_user_id:\n                  type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    description: \"New upload ID\"\n                    type: string\n\n  /user-uploads/{derivative_id}:\n    put:\n      summary: \"Mark an upload as complete.\"\n      parameters:\n        - name: derivative_id\n          in: path\n          required: true\n          description: \"The derivative in question\"\n          schema:\n            type: string\n\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                page:\n                  description: \"Page number\"\n                  example: 1\n                  type: integer\n                per_page:\n                  description: \"How many results per page\"\n                  example: 1\n                  type: integer\n                item_number:\n                  description: \"Part number of the upload to look up\"\n                  type: integer\n                camera_position:\n                  example: \"default\"\n                  description: \"Camera position of the upload to look up\"\n                  type: string\n                file_size:\n                  example: \"default\"\n                  description: \"Size of the file being uploaded\"\n                  type: integer\n                part_size:\n                  example: \"default\"\n                  description: \"Chunk size for upload parts\"\n                  type: integer\n      responses:\n        '204':\n          description: OK\n\n    get:\n      summary: \"Get active uploads for a derivative.\"\n      parameters:\n        - name: derivative_id\n          in: path\n          required: true\n          description: \"The derivative in question\"\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: true\n          description: \"Page number\"\n          example: 1\n          schema:\n            type: integer\n        - name: per_page\n          in: query\n          required: true\n          description: \"How many results per page\"\n          example: 1\n          schema:\n            type: integer\n        - name: item_number\n          in: query\n          required: true\n          description: \"Part number of the upload to look up\"\n          schema:\n            type: integer\n        - name: camera_position\n          in: query\n          required: true\n          example: \"default\"\n          description: \"Camera position of the upload to look up\"\n          schema:\n            type: string\n        - name: file_size\n          in: query\n          required: true\n          example: \"default\"\n          description: \"Size of the file being uploaded\"\n          schema:\n            type: integer\n        - name: part_size\n          in: query\n          required: true\n          example: \"default\"\n          description: \"Chunk size for upload parts\"\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    Content-Length:\n                      type: string\n                    part:\n                      type: integer\n                    url:\n                      type: string\n\n  /moments:\n    post:\n      summary: \"Create new moments.\"\n      requestBody:\n        description: A complete moment.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                medium_id:\n                  type: string\n                time:\n                  type: array\n                  items:\n                    type: number\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  medium_id:\n                    type: string\n                  time:\n                    type: array\n                    items:\n                      type: number\n\n  /collections:\n    get:\n      summary: \"Get a list of shares\"\n      parameters:\n        - name: fields\n          in: query\n          required: true\n          description: The list of fields to return (e.g., type,title,media_count,created_at,medium_token)\n          schema:\n            type: string\n        - name: per_page\n          in: query\n          required: true\n          description: How many items to return per page.\n          schema:\n            type: integer\n        - name: page\n          in: query\n          required: true\n          description: Page number to return.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  _pages:\n                    $ref: \"#/schemas/pageinfo\"\n                  _embedded:\n                    type: object\n                    properties:\n                      collections:\n                        type: array\n                        items:\n                          $ref: \"#/schemas/collection\"\n\n    post:\n      summary: \"Create a new collection.\"\n      requestBody:\n        description: A collection title.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                title:\n                  type: string\n      responses:\n        '209':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/schemas/collection\"\n\n\n  /collections/{collection_id}:\n    get:\n      summary: \"Get a collection.\"\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: \"The collection ID to update\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/schemas/collection\"\n\n    put:\n      summary: \"Update a collection.\"\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: \"The collection ID to update\"\n          schema:\n            type: string\n\n      requestBody:\n        description: An object representing the fields to update.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n                media_ids:\n                  type: array\n                  items:\n                    type: string\n      responses:\n        '204':\n          description: OK\n\n    delete:\n      summary: \"Delete a collection\"\n      parameters:\n        - name: collection_id\n          in: path\n          required: true\n          description: \"The collection ID to delete\"\n          schema:\n            type: string\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n\n  /devices/my-devices:\n    get:\n      summary: \"List all your GoPro devices.\"\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    serial_number:\n                      type: string\n                    friendly_name:\n                      type: string\n                    model_name:\n                      type: string\n                    current_software_version:\n                      type: string\n                    model_info:\n                      type: object\n                      properties:\n                        id:\n                          type: integer\n                        name:\n                          type: string\n                        model_string:\n                          type: string\n                        serial:\n                          type: string\n                        meta:\n                          type: object\n                          properties:\n                            external_name:\n                              type: string\n                            image_url:\n                              type: string\n                            shop_url:\n                              type: string\n                            release_date:\n                              type: string\n                            product_url_name:\n                              type: string\n                    strong:\n                      type: boolean\n\nschemas:\n  error:\n    type: array\n    items:\n      type: object\n      properties:\n        reason:\n          type: string\n        code:\n          type: integer\n        description:\n          type: string\n        id:\n          type: string\n  pageinfo:\n    type: object\n    properties:\n      current_page:\n        type: integer\n      per_page:\n        type: integer\n      total_items:\n        type: integer\n      total_pages:\n        type: integer\n  fileinfo:\n    type: object\n    properties:\n      filename:\n        type: string\n      _embedded:\n        type: object\n        properties:\n          files:\n            type: array\n            items:\n              type: object\n              properties:\n                camera_position:\n                  type: string\n                head:\n                  type: string\n                url:\n                  type: string\n                height:\n                  type: integer\n                width:\n                  type: integer\n                item_number:\n                  type: integer\n                orientation:\n                  type: integer\n                transforms:\n                  type: array\n                  items:\n                    type: string\n          variations:\n            type: array\n            items:\n              type: object\n              properties:\n                label:\n                  type: string\n                head:\n                  type: string\n                url:\n                  type: string\n                height:\n                  type: integer\n                width:\n                  type: integer\n                quality:\n                  type: string\n                type:\n                  type: string\n                transforms:\n                  type: array\n                  items:\n                    type: string\n          sidecar_files:\n            type: array\n            items:\n              type: object\n              properties:\n                label:\n                  type: string\n                fps:\n                  type: integer\n                head:\n                  type: string\n                url:\n                  type: string\n                type:\n                  type: string\n          sprites:\n            type: array\n            items:\n              type: object\n              properties:\n                frame:\n                  type: object\n                  properties:\n                    count:\n                      type: integer\n                    width:\n                      type: integer\n                    height:\n                      type: integer\n                fps:\n                  type: integer\n                heads:\n                  type: array\n                  items:\n                    type: string\n                urls:\n                  type: array\n                  items:\n                    type: string\n                height:\n                  type: integer\n                width:\n                  type: integer\n                type:\n                  type: string\n                transforms:\n                  type: array\n                  items:\n                    type: string\n\n  medium:\n    type: object\n    properties:\n      captured_at:\n        type: string\n        format: date-time\n      content_title:\n        type: string\n      content_type:\n        type: string\n      created_at:\n        type: string\n        format: date-time\n      gopro_user_id:\n        type: string\n      file_size:\n        type: integer\n      height:\n        type: integer\n      fov:\n        type: string\n      id:\n        type: string\n      moments_count:\n        type: integer\n      on_public_profile:\n        type: boolean\n      orientation:\n        type: integer\n      play_as:\n        type: string\n      ready_to_edit:\n        type: boolean\n      ready_to_view:\n        type: string\n        enum:\n          - \"ready\"\n          - \"failure\"\n          - \"loading\"\n          - \"registered\"\n          - \"transcoding\"\n          - \"processing\"\n          - \"uploading\"\n      resolution:\n        type: string\n      source_duration:\n        type: string\n      token:\n        type: string\n      type:\n        type: string\n        enum:\n          - \"photo\"\n          - \"video\"\n          - \"timelapse\"\n          - \"timelapse_video\"\n          - \"burst\"\n      width:\n        type: integer\n\n  collection:\n    type: object\n    properties:\n      created_at:\n        type: string\n        format: date-time\n      updatedat:\n        type: string\n        format: date-time\n      id:\n        type: string\n      media_count:\n        type: integer\n      medium_token:\n        type: string\n      title:\n        type: string\n      type:\n        type: string\n      revision_number:\n        type: integer\n      livestream_collection:\n        type: boolean\n      client_updated_at:\n        type: string\n        format: date-time\n      medium_ids:\n        type: array\n        items:\n          type: string\n\n  derivative:\n    type: object\n    properties:\n      available:\n        type: boolean\n      bitrate:\n        type: string\n      camera_positions:\n        type: string\n      created_at:\n        type: string\n        format: date-time\n      file_extension:\n        type: string\n        example: \"jpg\"\n      file_size:\n        type: string\n      fps:\n        type: string\n      gopro_user_id:\n        type: string\n      gumi:\n        type: string\n      height:\n        type: integer\n      is_public:\n        type: boolean\n      item_count:\n        type: integer\n      label:\n        type: string\n      medium_id:\n        type: string\n      profile:\n        type: string\n      transcode_source:\n        type: string\n      type:\n        type: string\n        example: \"Source\"\n      updated_at:\n        type: string\n        format: date-time\n      width:\n        type: integer\n      id:\n        type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /moments: post: security: unknown security schema \"password\""
}