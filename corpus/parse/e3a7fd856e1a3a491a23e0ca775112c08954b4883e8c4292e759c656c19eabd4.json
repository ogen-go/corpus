{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/contentjet/contentjet-api"
		},
		"file": {
			"name": "spec.yml",
			"size": 0,
			"path": "spec.yml",
			"byteSize": 54855,
			"content": "openapi: 3.0.0\n\ninfo:\n  title: contentjet\n  version: 0.1.0\n\npaths:\n  # Spec\n  /spec:\n    get:\n      tags:\n        - OpenAPI\n      summary: Retrieve OpenAPI 3.0 specification\n      description: Returns the OpenAPI 3.0 specification of the API\n      responses:\n        200:\n          description: OpenAPI 3.0 specification response\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /authenticate:\n    post:\n      tags:\n        - Authentication\n      summary: Authenticate with OAuth2\n      description: Authenticate using OAuth2 with the [Resource Owner Password Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.3).\n        For programatic access, see `authentication` under Client.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  format: email\n                password:\n                  type: string\n                  minLength: 6\n                  maxLength: 64\n                grant_type:\n                  type: string\n                  pattern: \"^password$\"\n              required:\n                - username\n                - password\n                - grant_type\n      responses:\n        200:\n          description: Authentication response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                  expires_in:\n                    type: integer\n                  refresh_token:\n                    type: string\n                  token_type:\n                    type: string\n                    pattern: \"^bearer$\"\n\n  /token-refresh:\n    post:\n      tags:\n        - Authentication\n      summary: Refresh an authentication token\n      description: Refreshes a valid authentication token.\n      security:\n        - OAuth2: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                refresh_token:\n                  type: string\n              required:\n                - refresh_token\n      responses:\n        200:\n          description: Token refresh response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                  expires_in:\n                    type: integer\n                  refresh_token:\n                    type: string\n                  token_type:\n                    type: string\n                    pattern: \"^bearer$\"\n\n  # User\n  /user/:\n    get:\n      tags:\n        - User\n      summary: List users\n      description: Returns a paginated list of users\n      security:\n        - OAuth2:\n          - 'user:list'\n      responses:\n        200:\n          description: List projects response\n          content:\n            application/json:\n              schema:\n                properties:\n                  page:\n                    type: integer\n                  totalPages:\n                    type: integer\n                  totalRecords:\n                    type: integer\n                  results:\n                    items:\n                      $ref: '#/components/schemas/User'\n\n  /user/{userId}:\n    get:\n      tags:\n        - User\n      summary: Retrieve user\n      description: Returns a user\n      parameters:\n        - $ref: '#/components/parameters/UserId'\n      security:\n        - OAuth2:\n          - 'user:retrieve'\n      responses:\n        200:\n          description: Retrieve user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /user/me:\n    get:\n      tags:\n        - User\n      summary: Retrieve the authenticated user\n      description: Returns the authenticated user.\n      security:\n        - OAuth2: []\n      responses:\n        200:\n          description: Retrieve authenticated user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n    put:\n      tags:\n        - User\n      summary: Update the authenticated user\n      description: Updates the authenticated user. Note only the user's name may be changed.\n      security:\n        - OAuth2: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n              required:\n                - name\n              example:\n                name: Ned Flanders\n      responses:\n        200:\n          description: Update authenticated user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /user/sign-up:\n    post:\n      tags:\n        - User\n      summary: Create new user\n      description: Signs up a new user. Note the user will be created with `isActive` set to `false` and a verification email will be sent to the email address contained in the request.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n                name:\n                  type: string\n                password:\n                  type: string\n                  minLength: 6\n                  maxLength: 64\n                inviteToken:\n                  type: string\n              required:\n                - email\n                - name\n                - password\n                - inviteToken\n      responses:\n        201:\n          description: Update authenticated user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /user/verify:\n    post:\n      tags:\n        - User\n      summary: Verify a user\n      description: Accepts the JWT contained within the URL emailed to the user when invoking the `/user/signup` endpoint. This endpoint verifies the JWT and if valid sets the user's `isActive` field to `true`.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n              required:\n                - token\n      responses:\n        200:\n          description: User verification response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /user/request-password-reset:\n    post:\n      tags:\n        - User\n      summary: Request password reset\n      description: Invoking this enpoint will send a unique reset password link to the user's email address\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  format: email\n              required:\n                - email\n      responses:\n        200:\n          description: User verification response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /user/set-password:\n    post:\n      tags:\n        - User\n      summary: Set user password\n      description: Sets a user's password. This endpoint requires a JWT token which is part of the unique\n        url emailed to the user when invoking the `/user/request-password-reset` endpoint. See also `/user/change-password`.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n                password:\n                  type: string\n                  minLength: 6\n                  maxLength: 64\n              required:\n                - token\n                - password\n      responses:\n        200:\n          description: Set password response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  /user/change-password:\n    post:\n      tags:\n        - User\n      summary: Change user password\n      description: Changes the authenticated user's password\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                password:\n                  type: string\n                  minLength: 6\n                  maxLength: 64\n                newPassword:\n                  type: string\n                  minLength: 6\n                  maxLength: 64\n              required:\n                - password\n                - newPassword\n      responses:\n        200:\n          description: Change password response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  # Project\n  /project/:\n    post:\n      tags:\n        - Project\n      summary: Create project\n      description: Creates a project. Note only users administrators (users with isAdmin = true) can create projects.\n      security:\n        - OAuth2:\n          - 'project:create'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  maxLength: 64\n                metadata:\n                  type: string\n                  maxLength: 3000\n              required:\n                - name\n              example:\n                name: My first project\n      responses:\n        201:\n          description: Create project response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n    get:\n      tags:\n        - Project\n      summary: List projects\n      description: Returns a paginated list of projects\n      security:\n        - OAuth2:\n          - 'project:list'\n      responses:\n        200:\n          description: List projects response\n          content:\n            application/json:\n              schema:\n                properties:\n                  page:\n                    type: integer\n                  totalPages:\n                    type: integer\n                  totalRecords:\n                    type: integer\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Project'\n                example:\n                  page: 1\n                  totalPages: 1\n                  totalRecords: 1\n                  results:\n                      - id: 327\n                        name: My project\n                        userId: 17\n                        createdAt: '2017-11-03'\n                        modifiedAt: '2017-11-15'\n\n  /project/{projectId}:\n    get:\n      tags:\n        - Project\n      summary: Retrieve project\n      description: Returns a project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'project:retrieve'\n      responses:\n        200:\n          description: Retrieve project response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n    put:\n      tags:\n        - Project\n      summary: Update project\n      description: Updates a project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'project:update'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  minLength: 1\n                  maxLength: 64\n                metadata:\n                  type: string\n                  maxLength: 3000\n      responses:\n        200:\n          description: Update project response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n\n  /project/{projectId}/update-member:\n    post:\n      tags:\n        - Project\n      summary: Update a user's membership within the project\n      description: Update a user's membership within the project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'project:update'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                userId:\n                  type: integer\n                membershipIsActive:\n                  type: boolean\n                membershipType:\n                  type: string\n                  enum:\n                    - author\n                    - admin\n              required:\n                - userId\n      responses:\n        201:\n          description: Update member response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n\n  # Entry type\n  /project/{projectId}/entry-type/:\n    get:\n      tags:\n        - Entry type\n      summary: List entry types\n      description: Returns a list of entry types\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'entryType:list'\n      responses:\n        200:\n          description: Entry type list response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryType'\n\n    post:\n      tags:\n        - Entry type\n      summary: Create entry type\n      description: Creates a new entry type in the specified project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'entryType:create'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntryType'\n      responses:\n        201:\n          description: Create entry type response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryType'\n\n  /project/{projectId}/entry-type/{entryTypeId}:\n    get:\n      tags:\n        - Entry type\n      summary: Retrieve entry type\n      description: Returns an entry type\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/EntryTypeId'\n      security:\n        - OAuth2:\n          - 'entryType:retrieve'\n      responses:\n        200:\n          description: Retrieve entry type response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryType'\n\n    put:\n      tags:\n        - Entry type\n      summary: Update entry type\n      description: Updates an entry type\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/EntryTypeId'\n      security:\n        - OAuth2:\n          - 'entryType:update'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntryType'\n      responses:\n        201:\n          description: Update entry type response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntryType'\n\n  # Entry\n  /project/{projectId}/entry/:\n    get:\n      tags:\n        - Entry\n      summary: List entries\n      description: Returns a list of published entries. An entry is published\n        if the date value of it's `published` field is in the past. Default ordering\n        is by descending modified date (last modified first).\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - name: tags\n          in: query\n          description: Limit to entries containing a comma separated list of tags. Note\n            tags are OR'd together. e.g `?tags=summer,winter,autumn`\n          schema:\n            type: string\n        - name: entryType\n          in: query\n          description: Limit to entries of a specific entry type by id. e.g `?entryType=7`.\n          schema:\n            type: integer\n        - name: nonPublished\n          in: query\n          description: If present both published and non-published entries will be\n            returned. e.g `?nonPublished=1`.\n          schema:\n            type: integer\n        - name: search\n          in: query\n          description: Search entries containing words in their title. Note this is\n            NOT full-text search.\n          schema:\n            type: string\n        - name: orderBy\n          in: query\n          description: Order entries by `createdAt` or `modifiedAt`. Direction is ascending\n            but can be changed to descending by prefixing '-' e.g. `?orderBy=-createdAt`\n          schema:\n            type: string\n            enum:\n              - createdAt\n              - -createdAt\n              - modifiedAt\n              - -modifiedAt\n        - name: page\n          in: query\n          description: Page number.\n          schema:\n            type: integer\n        - name: pageSize\n          in: query\n          description: The number of results per page.\n          schema:\n            type: integer\n      security:\n        - OAuth2:\n          - 'entry:list'\n      responses:\n        200:\n          description: Entry list response\n          content:\n            application/json:\n              schema:\n                properties:\n                  page:\n                    type: integer\n                  totalPages:\n                    type: integer\n                  totalRecords:\n                    type: integer\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Entry'\n\n    post:\n      tags:\n        - Entry\n      summary: Create entry\n      description: Creates a new entry in the specified project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'entry:create'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Entry'\n      responses:\n        201:\n          description: Create entry response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n\n  /project/{projectId}/entry/{entryId}:\n    get:\n      tags:\n        - Entry\n      summary: Retrieve entry\n      description: Returns an entry\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/EntryId'\n      security:\n        - OAuth2:\n          - 'entry:retrieve'\n      responses:\n        200:\n          description: Retrieve entry response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n\n    put:\n      tags:\n        - Entry\n      summary: Update entry\n      description: Updates an entry\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/EntryId'\n      security:\n        - OAuth2:\n          - 'entry:update'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Entry'\n      responses:\n        201:\n          description: Update entry response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Entry'\n\n    delete:\n      tags:\n        - Entry\n      summary: Delete entry\n      description: Deletes an entry\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/EntryId'\n      security:\n        - OAuth2:\n          - 'entry:delete'\n      responses:\n        204:\n          description: Delete entry response\n\n  # Entry tag\n  /project/{projectId}/entry-tag/:\n    get:\n      tags:\n        - Entry tag\n      summary: List entry tags\n      description: Returns a list of entry tags\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'entryTag:list'\n      responses:\n        200:\n          description: Entry tag list response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  # Media tag\n  /project/{projectId}/media-tag/:\n    get:\n      tags:\n        - Media tag\n      summary: List media tags\n      description: Returns a list of media tags\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'mediaTag:list'\n      responses:\n        200:\n          description: Media tag list response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n\n  # Media\n  /project/{projectId}/media/upload:\n    post:\n      tags:\n        - Media\n      summary: Upload file\n      description: Upload file to project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'media:create'\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n              required:\n                - file\n      responses:\n        201:\n          description: Upload file response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Media'\n\n  /project/{projectId}/media/:\n    get:\n      tags:\n        - Media\n      summary: List media\n      description: List media for the specified project. Default ordering is\n        by descending creation date (newest first).\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - name: tags\n          in: query\n          description: Limit to media containing a comma separated list of tags. Note\n            tags are OR'd together. e.g `?tags=summer,winter,autumn`\n          schema:\n            type: string\n        - name: search\n          in: query\n          description: Search media containing words in their name. Note this is\n            NOT full-text search.\n          schema:\n            type: string\n        - name: orderBy\n          in: query\n          description: Order media by `createdAt` or `modifiedAt`. Direction is ascending\n            but can be changed to descending by prefixing '-' e.g. `?orderBy=-createdAt`\n          schema:\n            type: string\n            enum:\n              - createdAt\n              - -createdAt\n              - modifiedAt\n              - -modifiedAt\n      security:\n        - OAuth2:\n          - 'media:list'\n      responses:\n        200:\n          description: List media response\n          content:\n            application/json:\n              schema:\n                properties:\n                  page:\n                    type: integer\n                  totalPages:\n                    type: integer\n                  totalRecords:\n                    type: integer\n                  results:\n                    items:\n                      $ref: '#/components/schemas/Media'\n\n  /project/{projectId}/media/{mediaId}:\n    get:\n      tags:\n        - Media\n      summary: Retrieve media\n      description: Retrieve media\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/MediaId'\n      security:\n        - OAuth2:\n          - 'media:retrieve'\n      responses:\n        200:\n          description: Retrieve media response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Media'\n\n    put:\n      tags:\n        - Media\n      summary: Update media\n      description: Update media\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/MediaId'\n      security:\n        - OAuth2:\n          - 'media:update'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                description:\n                  type: string\n                  maxLength: 64\n                tags:\n                  type: array\n                  items:\n                    type: string\n              required:\n                - description\n                - tags\n      responses:\n        200:\n          description: Update media response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Media'\n\n    delete:\n      tags:\n        - Media\n      summary: Delete media\n      description: Deletes media. Note this only removes the record from the\n        database. It does not remove the file from storage.\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/MediaId'\n      security:\n        - OAuth2:\n          - 'media:delete'\n      responses:\n        204:\n          description: Delete media response\n\n  # Project invite\n  /project/{projectId}/invite/:\n    post:\n      tags:\n        - Project invite\n      summary: Invite user to project\n      description: Invite user to project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'projectInvite:create'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  maxLength: 128\n                email:\n                  type: string\n                  format: email\n              required:\n                - name\n                - email\n      responses:\n        201:\n          description: Project invite response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectInvite'\n\n    get:\n      tags:\n        - Project invite\n      summary: List invites\n      description: List pending invites for the project. An invite is pending if `accepted = false`.\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'projectInvite:list'\n      responses:\n        200:\n          description: Invite list response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProjectInvite'\n\n  /project/{projectId}/invite/{projectInviteId}:\n    get:\n      tags:\n        - Project invite\n      summary: Retrieve project invite\n      description: Returns a project invite\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/ProjectInviteId'\n      security:\n        - OAuth2:\n          - 'projectInvite:retrieve'\n      responses:\n        200:\n          description: Retrieve project invite response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectInvite'\n\n    delete:\n      tags:\n        - Project invite\n      summary: Delete project invite\n      description: Deletes a project invite\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/ProjectInviteId'\n      security:\n        - OAuth2:\n          - 'projectInvite:delete'\n      responses:\n        204:\n          description: Delete project invite response\n\n  /project/{projectId}/invite/accept:\n    put:\n      tags:\n        - Project invite\n      summary: Accept pending invite\n      description: Accepts a pending invite. Note `token` is a JWT which is part of\n        the unique URL emailed to the user when an invite is created.\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                token:\n                  type: string\n              required:\n                - token\n      responses:\n        200:\n          description: Project invite response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectInvite'\n\n  /project/{projectId}/invite/bulk-delete:\n    post:\n      tags:\n        - Project invite\n      summary: Bulk deletes project invites\n      description: Bulk deletes project invites matching ids contained in the submitted list\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'projectInvite:delete'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: integer\n              example:\n                - 13\n                - 432\n                - 987\n                - 7\n      responses:\n        204:\n          description: Bulk delete invite response\n\n  # Web hook\n  /project/{projectId}/web-hook/:\n    get:\n      tags:\n        - Web hook\n      summary: List web hooks\n      description: Returns a list of web hooks\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'webHook:list'\n      responses:\n        200:\n          description: List web hooks response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WebHook'\n\n    post:\n      tags:\n        - Web hook\n      summary: Create web hook\n      description: Creates a web hook for the project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'webHook:create'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                name:\n                  type: string\n                  maxLength: 64\n              required:\n                - name\n      responses:\n        200:\n          description: Create web hook response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebHook'\n\n  /project/{projectId}/web-hook/{webHookId}:\n    get:\n      tags:\n        - Web hook\n      summary: Retrieve web hook\n      description: Retrieve web hook\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/WebHookId'\n      security:\n        - OAuth2:\n          - 'webHook:retrieve'\n      responses:\n        200:\n          description: Retrieve web hook response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebHook'\n\n    put:\n      tags:\n        - Web hook\n      summary: Create web hook\n      description: Creates a web hook for the project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/WebHookId'\n      security:\n        - OAuth2:\n          - 'webHook:update'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/WebHook'\n      responses:\n        200:\n          description: Update web hook response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WebHook'\n\n    delete:\n      tags:\n        - Web hook\n      summary: Delete web hook\n      description: Deletes a web hook from the project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/WebHookId'\n      security:\n        - OAuth2:\n          - 'webHook:delete'\n      responses:\n        204:\n          description: Update web hook response\n\n  # Client\n  /project/{projectId}/client/:\n    get:\n      tags:\n        - Client\n      summary: List clients\n      description: Returns a list of clients\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'client:list'\n      responses:\n        200:\n          description: List clients response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Client'\n\n    post:\n      tags:\n        - Client\n      summary: Create client\n      description: Creates a client for the project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      security:\n        - OAuth2:\n          - 'client:create'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties: false\n              properties:\n                name:\n                  type: string\n                  maxLength: 64\n              required:\n                - name\n      responses:\n        200:\n          description: Create client response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n\n  /project/{projectId}/client/{clientId}:\n    get:\n      tags:\n        - Client\n      summary: Retrieve client\n      description: Retrieve client\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/ClientId'\n      security:\n        - OAuth2:\n          - 'client:retrieve'\n      responses:\n        200:\n          description: Retrieve client response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n\n    delete:\n      tags:\n        - Client\n      summary: Delete client\n      description: Deletes a client from the project\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n        - $ref: '#/components/parameters/ClientId'\n      security:\n        - OAuth2:\n          - 'client:delete'\n      responses:\n        204:\n          description: Update client response\n\n  /project/{projectId}/client/authenticate:\n    post:\n      tags:\n        - Client\n      summary: Authenticate with OAuth2\n      description: Authenticate using OAuth2 with the [Client Credentials Grant](https://tools.ietf.org/html/rfc6749#section-4.4).\n        This authentication method is intended for programatic access and is scoped to grant **read only** access to items\n        within the Project.\n      parameters:\n        - $ref: '#/components/parameters/ProjectId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                client_id:\n                  type: string\n                  minLength: 32\n                  maxLength: 32\n                client_secret:\n                  type: string\n                  minLength: 32\n                  maxLength: 32\n                grant_type:\n                  type: string\n                  pattern: \"^client_credentials$\"\n              required:\n                - client_id\n                - client_secret\n                - grant_type\n      responses:\n        200:\n          description: Authentication response\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  access_token:\n                    type: string\n                  expires_in:\n                    type: integer\n                  token_type:\n                    type: string\n                    pattern: \"^bearer$\"\n\n\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: '/authenticate'\n          refreshUrl: '/token-refresh'\n          scopes:\n            'entry:create': Create entry\n            'entry:delete': Delete entry\n            'entry:list': List entry\n            'entry:retrieve': Retrieve entry\n            'entry:update': Update entry\n            'entryTag:create': Create entryTag\n            'entryTag:delete': Delete entryTag\n            'entryTag:list': List entryTag\n            'entryTag:retrieve': Retrieve entryTag\n            'entryTag:update': Update entryTag\n            'entryType:create': Create entryType\n            'entryType:delete': Delete entryType\n            'entryType:list': List entryType\n            'entryType:retrieve': Retrieve entryType\n            'entryType:update': Update entryType\n            'media:create': Create media\n            'media:delete': Delete media\n            'media:list': List media\n            'media:retrieve': Retrieve media\n            'media:update': Update media\n            'mediaTag:create': Create mediaTag\n            'mediaTag:delete': Delete mediaTag\n            'mediaTag:list': List mediaTag\n            'mediaTag:retrieve': Retrieve mediaTag\n            'mediaTag:update': Update mediaTag\n            'project:create': Create project\n            'project:delete': Delete project\n            'project:list': List project\n            'project:retrieve': Retrieve project\n            'project:update': Update project\n            'projectInvite:create': Create projectInvite\n            'projectInvite:delete': Delete projectInvite\n            'projectInvite:list': List projectInvite\n            'projectInvite:retrieve': Retrieve projectInvite\n            'projectInvite:update': Update projectInvite\n            'projectMembership:create': Create projectMembership\n            'projectMembership:delete': Delete projectMembership\n            'projectMembership:list': List projectMembership\n            'projectMembership:retrieve': Retrieve projectMembership\n            'projectMembership:update': Update projectMembership\n            'user:create': Create user\n            'user:delete': Delete user\n            'user:list': List user\n            'user:retrieve': Retrieve user\n            'user:update': Update user\n            'webHook:create': Create webHook\n            'webHook:delete': Delete webHook\n            'webHook:list': List webHook\n            'webHook:retrieve': Retrieve webHook\n            'webHook:update': Update webHook\n            'client:create': Create client\n            'client:delete': Delete client\n            'client:list': List client\n            'client:retrieve': Retrieve client\n            'client:update': Update client\n        clientCredentials:\n          tokenUrl: '/authenticate'\n          scopes:\n            'entry:list': List entry\n            'entry:retrieve': Retrieve entry\n            'entryTag:list': List entryTag\n            'entryTag:retrieve': Retrieve entryTag\n            'entryType:list': List entryType\n            'entryType:retrieve': Retrieve entryType\n            'media:list': List media\n            'media:retrieve': Retrieve media\n            'mediaTag:list': List mediaTag\n            'mediaTag:retrieve': Retrieve mediaTag\n            'project:list': List project\n            'project:retrieve': Retrieve project\n            'projectInvite:list': List projectInvite\n            'projectInvite:retrieve': Retrieve projectInvite\n            'projectMembership:list': List projectMembership\n            'projectMembership:retrieve': Retrieve projectMembership\n            'user:list': List user\n            'user:retrieve': Retrieve user\n            'webHook:list': List webHook\n            'webHook:retrieve': Retrieve webHook\n            'client:list': List client\n            'client:retrieve': Retrieve client\n\n  parameters:\n    ProjectId:\n      name: projectId\n      in: path\n      description: Project id\n      required: true\n      schema:\n        type: integer\n\n    UserId:\n      name: userId\n      in: path\n      description: User id\n      required: true\n      schema:\n        type: integer\n\n    EntryId:\n      name: entryId\n      in: path\n      description: Entry id\n      required: true\n      schema:\n        type: integer\n\n    MediaId:\n      name: mediaId\n      in: path\n      description: Media id\n      required: true\n      schema:\n        type: integer\n\n    EntryTypeId:\n      name: entryTypeId\n      in: path\n      description: Entry type id\n      required: true\n      schema:\n        type: integer\n\n    ProjectInviteId:\n      name: projectInviteId\n      in: path\n      description: Project invite id\n      required: true\n      schema:\n        type: integer\n\n    WebHookId:\n      name: webHookId\n      in: path\n      description: Web hook id\n      required: true\n      schema:\n        type: integer\n\n    ClientId:\n      name: clientId\n      in: path\n      description: Client id\n      required: true\n      schema:\n        type: integer\n\n  schemas:\n    User:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        email:\n          type: string\n          format: email\n        isActive:\n          type: boolean\n        isAdmin:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n\n    Project:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          minLength: 1\n          maxLength: 64\n        metadata:\n          type: string\n          maxLength: 3000\n        userId:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n\n    COMMON_FIELD_PROPERTIES:\n      type: object\n      properties:\n        name:\n          type: string\n          minLength: 4\n          maxLength: 64\n        label:\n          type: string\n          minLength: 4\n          maxLength: 64\n        description:\n          type: string\n          default: ''\n          maxLength: 128\n        required:\n          type: boolean\n          default: false\n        disabled:\n          type: boolean\n          default: false\n      required:\n        - name\n        - label\n        - description\n        - required\n        - disabled\n\n    TEXT:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^TEXT$'\n            minLength:\n              type: integer\n              minimum: 0\n              maximum: 999\n            maxLength:\n              type: integer\n              minimum: 1\n              maximum: 1000\n            format:\n              type: string\n              enum:\n                - 'plaintext'\n                - 'uri'\n                - 'email'\n          required:\n            - 'fieldType'\n            - 'minLength'\n            - 'maxLength'\n            - 'format'\n\n    LONGTEXT:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^LONGTEXT$'\n            minLength:\n              type: integer\n              minimum: 0\n              maximum: 29999\n            maxLength:\n              type: integer\n              minimum: 1\n              maximum: 30000\n            format:\n              type: string\n              enum:\n                - 'plaintext'\n                - 'markdown'\n          required:\n            - 'fieldType'\n            - 'minLength'\n            - 'maxLength'\n            - 'format'\n\n    BOOLEAN:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^BOOLEAN$'\n            labelTrue:\n              type: string\n              minLength: 1\n              maxLength: 32\n            labelFalse:\n              type: string\n              minLength: 1\n              maxLength: 32\n          required:\n            - 'fieldType'\n            - 'labelTrue'\n            - 'labelFalse'\n\n    NUMBER:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^NUMBER$'\n            minValue:\n              type: number\n            maxValue:\n              type: number\n            format:\n              type: string\n              enum:\n                - 'number'\n                - 'integer'\n          required:\n            - 'fieldType'\n            - 'minValue'\n            - 'maxValue'\n            - 'format'\n\n    DATE:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^DATE$'\n            format:\n              type: string\n              enum:\n                - 'datetime'\n                - 'date'\n          required:\n            - 'fieldType'\n            - 'format'\n\n    CHOICE:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^CHOICE$'\n            choices:\n              type: array\n              items:\n                type: string\n              minLength: 2\n              maxLength: 128\n            format:\n              type: string\n              enum:\n                - 'single'\n                - 'multiple'\n          required:\n            - 'fieldType'\n            - 'choices'\n            - 'format'\n\n    COLOR:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^COLOR$'\n            format:\n              type: string\n              enum:\n                - 'rgb'\n                - 'rgba'\n          required:\n            - 'fieldType'\n            - 'format'\n\n    MEDIA:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^MEDIA$'\n            minLength:\n              type: integer\n              minimum: 0\n              maximum: 999\n            maxLength:\n              type: integer\n              minimum: 1\n              maximum: 1000\n          required:\n            - 'fieldType'\n            - 'minLength'\n            - 'maxLength'\n\n    LINK:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^LINK$'\n            minLength:\n              type: integer\n              minimum: 0\n              maximum: 999\n            maxLength:\n              type: integer\n              minimum: 1\n              maximum: 1000\n          required:\n            - 'fieldType'\n            - 'minLength'\n            - 'maxLength'\n\n    LIST:\n      allOf:\n        - $ref: '#/components/schemas/COMMON_FIELD_PROPERTIES'\n        - type: object\n          properties:\n            fieldType:\n              type: string\n              pattern: '^LIST$'\n            minLength:\n              type: integer\n              minimum: 0\n              maximum: 999\n            maxLength:\n              type: integer\n              minimum: 1\n              maximum: 1000\n          required:\n            - 'fieldType'\n            - 'minLength'\n            - 'maxLength'\n\n    EntryType:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          minLength: 1\n          maxLength: 64\n        description:\n          type: string\n          default: ''\n          maxLength: 128\n        metadata:\n          type: string\n          default: ''\n          maxLength: 3000\n        projectId:\n          type: integer\n        userId:\n          type: integer\n        fields:\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/TEXT'\n              - $ref: '#/components/schemas/LONGTEXT'\n              - $ref: '#/components/schemas/BOOLEAN'\n              - $ref: '#/components/schemas/NUMBER'\n              - $ref: '#/components/schemas/DATE'\n              - $ref: '#/components/schemas/CHOICE'\n              - $ref: '#/components/schemas/COLOR'\n              - $ref: '#/components/schemas/MEDIA'\n              - $ref: '#/components/schemas/LINK'\n              - $ref: '#/components/schemas/LIST'\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n\n    Entry:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          maxLength: 128\n        entryTypeId:\n          type: integer\n        entryType:\n          type: object\n          properties:\n            id:\n              type: integer\n            name:\n              type: string\n              minLength: 1\n              maxLength: 64\n            description:\n              type: string\n              default: ''\n              maxLength: 128\n            metadata:\n              type: string\n              default: ''\n              maxLength: 3000\n            projectId:\n              type: integer\n            userId:\n              type: integer\n        userId:\n          type: integer\n        user:\n          $ref: '#/components/schemas/User'\n        published:\n          type: string\n          format: date-time\n        tags:\n          type: array\n          items:\n            type: string\n        modifiedByUserId:\n          type: integer\n        modifiedByUser:\n          $ref: '#/components/schemas/User'\n        fields:\n          type: object\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n\n    WebHook:\n      type: object\n      additionalProperties: false\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          maxLength: 64\n        isActive:\n          type: boolean\n          default: true\n        url:\n          type: string\n          format: uri\n        projectUpdated:\n          type: boolean\n          default: true\n        projectDeleted:\n          type: boolean\n          default: true\n        entryTypeCreated:\n          type: boolean\n          default: true\n        entryTypeUpdated:\n          type: boolean\n          default: true\n        entryTypeDeleted:\n          type: boolean\n          default: true\n        entryCreated:\n          type: boolean\n          default: true\n        entryUpdated:\n          type: boolean\n          default: true\n        entryDeleted:\n          type: boolean\n          default: true\n        entryDeletedBulk:\n          type: boolean\n          default: true\n        mediaCreated:\n          type: boolean\n          default: true\n        mediaUpdated:\n          type: boolean\n          default: true\n        mediaDeleted:\n          type: boolean\n          default: true\n        mediaDeletedBulk:\n          type: boolean\n          default: true\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n      required:\n        - name\n        - isActive\n        - url\n        - projectUpdated\n        - projectDeleted\n        - entryTypeCreated\n        - entryTypeUpdated\n        - entryTypeDeleted\n        - entryCreated\n        - entryUpdated\n        - entryDeleted\n        - entryDeletedBulk\n        - mediaCreated\n        - mediaUpdated\n        - mediaDeleted\n        - mediaDeletedBulk\n\n    ProjectInvite:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          maxLength: 128\n        email:\n          type: string\n          format: email\n        userId:\n          type: integer\n        projectId:\n          type: integer\n        accepted:\n          type: boolean\n          default: false\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n\n    Media:\n      type: object\n      properties:\n        id:\n          type: integer\n        userId:\n          type: integer\n        projectId:\n          type: integer\n        name:\n          type: string\n          maxLength: 512\n        file:\n          type: string\n          maxLength: 512\n          format: uri\n        thumbnail:\n          type: string\n          maxLength: 512\n          format: uri\n        mimeType:\n          type: string\n          maxLength: 128\n        size:\n          type: integer\n          default: 0\n        width:\n          type: integer\n          default: 0\n          minimum: 0\n        height:\n          type: integer\n          default: 0\n          minimum: 0\n        description:\n          type: string\n          default: ''\n          maxLength: 64\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n        tags:\n          type: array\n          items:\n            type: string\n\n    Client:\n      type: object\n      properties:\n        id:\n          type: integer\n        projectId:\n          type: integer\n        name:\n          type: string\n          minLength: 1\n          maxLength: 64\n        clientId:\n          type: string\n          minLength: 32\n          maxLength: 32\n        clientSecret:\n          type: string\n          minLength: 32\n          maxLength: 32\n        createdAt:\n          type: string\n          format: date-time\n        modifiedAt:\n          type: string\n          format: date-time\n",
			"canonicalURL": "/github.com/contentjet/contentjet-api@ff50a6af96bc921425ee6408362b7447f1c8097b/-/blob/spec.yml",
			"externalURLs": [
				{
					"url": "https://github.com/contentjet/contentjet-api/blob/ff50a6af96bc921425ee6408362b7447f1c8097b/spec.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /project/{projectId}/entry/{entryId}: put: security: parse security scheme \"OAuth2\": oauth2: flow \"clientCredentials\": unknown scope \"entry:update\""
}