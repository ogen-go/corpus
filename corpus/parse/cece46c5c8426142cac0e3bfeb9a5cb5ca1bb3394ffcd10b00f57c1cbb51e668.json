{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/jjs-dev/jjs"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "src/apiserver_old/engine/docs/openapi.yaml",
			"byteSize": 7181,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"JJS main API\"\n  version: \"\"\n\npaths:\n  \"/contests/{name}\":\n    get:\n      operationId: getContest\n      summary: Finds contest by name\n      description: |-\n        If contest with this name does not exists, `null` is returned\n      parameters:\n        - $ref: \"#/components/parameters/contest_name\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Contest\"\n  \"/contests/{name}/participation\":\n    get:\n      operationId: getContestParticipation\n      summary: Get information about current user participation\n      description: |-\n        You should check that status is \"ACTIVE\". If it is not, you need register to contest (see updateContestParticipation).\n        Otherwise, you will not be able to submit runs\n      parameters:\n        - $ref: \"#/components/parameters/contest_name\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Participation\"\n    patch:\n      operationId: updateContestParticipation\n      summary: Update current user participation\n      description: |-\n        Using this operation you can start patricipating in contest\n      parameters:\n        - $ref: \"#/components/parameters/contest_name\"\n      responses:\n        204:\n          description: ok\n  \"/contests/{name}/problems\":\n    get:\n      operationId: listContestProblems\n      summary: Lists all problems in contest `name`\n      parameters:\n        - $ref: \"#/components/parameters/contest_name\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Problem\"\n  \"/contests/{name}/standings\":\n    get:\n      operationId: getContestStandings\n      summary: Returns standings as JSON object\n      parameters:\n        - $ref: \"#/components/parameters/contest_name\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: object\n  \"/contests\":\n    get:\n      operationId: listContests\n      summary: Lists contests\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Contest\"\n    patch:\n      operationId: patchRun\n      summary: Modifies run\n      description: |-\n        Updates run according to given arguments\n\n        On success, new run state is returned\n      parameters:\n        - $ref: \"#/components/parameters/run_id\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RunPatch\"\n\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Run\"\n    delete:\n      operationId: deleteRun\n      summary: Deletes run\n      parameters:\n        - $ref: \"#/components/parameters/run_id\"\n      responses:\n        204:\n          description: ok\n  \"/runs/{id}/live\":\n    get:\n      operationId: getRunLiveStatus\n      summary: returns incremental Live Status\n      parameters:\n        - $ref: \"#/components/parameters/run_id\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RunLiveStatusUpdate\"\n  \"/runs/{id}/binary\":\n    get:\n      operationId: getRunBinary\n      summary: Returns run build artifact as base64-encoded JSON string\n      parameters:\n        - $ref: \"#/components/parameters/run_id\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: string\n        204:\n          description: run binary is not available\n  \"/runs/{id}/protocol\":\n    get:\n      operationId: getRunProtocol\n      summary: Returns invocation protocol as JSON document\n      responses:\n        200:\n          description: ok\n          content:\n            /application/json:\n              schema:\n                type: object\n      parameters:\n        - $ref: \"#/components/parameters/run_id\"\n        - in: query\n          name: compile_log\n          description: If false, compilation logs will be excluded\n          schema:\n            type: boolean\n        - in: query\n          name: test_data\n          description: If false, test data will be excluded for all tests\n          schema:\n            type: boolean\n        - in: query\n          name: output\n          description: If false, solution stdout\u0026stderr will be excluded for all tests\n          schema:\n            type: boolean\n        - in: query\n          name: answer\n          description: If false, correct answer will be excluded for all tests\n          schema:\n            type: boolean\n        - in: query\n          name: resource_usage\n          description: If false, resource usage will be excluded for all tests\n          schema:\n            type: boolean\n  \"/toolchains\":\n    get:\n      operationId: listToolchains\n      summary: Lists toolchains\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Toolchain\"\n  \"/auth/simple\":\n    post:\n      operationId: logIn\n      summary: Login using login and password\n      description: |-\n        In future, other means to authn will be added.\n        See `SessionToken` documentation for more details.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SimpleAuthParams\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SessionToken\"\n  \"/users\":\n    post:\n      operationId: createUser\n      summary: Creates new user\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserCreateParams\"\n      responses:\n        200:\n          description: ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n\nsecurity:\n  - AccessToken: []\n\ncomponents:\n  securitySchemes:\n    AccessToken:\n      type: apiKey\n      in: header\n      name: Authorization\n      description: This token is issued by `/auth/simple` endpoint.\n        If it returned SessionToken `tok`, then AccessToken is \"Token ${tok.data}\"\n\n  parameters:\n    contest_name:\n      in: path\n      name: name\n      required: true\n      schema:\n        type: string\n    run_id:\n      in: path\n      name: id\n      required: true\n      schema:\n        type: integer\n        format: uint32\n"
		}
	},
	"Error": "parse: parse spec: paths: /contests/{name}/participation: get: operation \"getContestParticipation\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/Participation\": resolve reference \"#/components/schemas/Participation\": resolve \"#/components/schemas/Participation\": unexpected invalid"
}