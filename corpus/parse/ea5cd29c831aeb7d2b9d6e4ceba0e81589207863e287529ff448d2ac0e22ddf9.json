{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/spraakbanken/korp-backend"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "docs/api.yaml",
			"byteSize": 51437,
			"content": "openapi: 3.0.2\ninfo: \n  title: Korp API\n  version: 8.0.1\n  description: |\n    # Introduction\n    \n    Korp is a tool for searching in text corpora, developed at [Språkbanken](https://spraakbanken.gu.se/eng).\n    The Korp API is used by the [Korp frontend](https://github.com/spraakbanken/korp-frontend), but can also be used\n    independently. This documentation will give you an overview of all the\n    available commands, which in some cases include functionality not yet available in the Korp frontend.\n    \n    The [source code](https://github.com/spraakbanken/korp-backend) is made available under the MIT license\n    on GitHub.\n    \n    Most examples in this documentation will link to Språkbanken's instance of the Korp backend, to\n    take advantage of its corpora.\n    \n    ## The Basics of a Query\n    \n    Queries to the web service are made using HTTP GET requests:\n    \n    \u003e `/command?parameter=value\u0026...`\n    \n    Note that while the API documentation only lists GET requests, it is also possible to use POST requests (both regular\n    form data and JSON), with the same result. This may be needed if your query exceeds the maximum URL length.\n    \n    The service responds with a JSON object.\n    \n    Many of the commands make use of the CQP query language. For further information about CQP, please refer to\n    the [CQP Query Language Tutorial](http://cwb.sourceforge.net/files/CQP_Tutorial.pdf).\n  contact:\n    name: Språkbanken\n    url: https://spraakbanken.gu.se/\n    email: sb-info@svenska.gu.se\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n  x-logo:\n    url: https://ws.spraakbanken.gu.se/ws/korp/v8/static/raven_black.png\n    altText: Logo\n    \nservers: \n  - url: https://ws.spraakbanken.gu.se/ws/korp/v8\n\ntags:\n  - name: Information\n  - name: Concordance\n  - name: Statistics\n  - name: Word Picture\n  - name: Misc\n\npaths:\n  /info:\n    get:\n      summary: General Information\n      description: |\n        Get information about available corpora, which corpora are protected, and CWB and API version.\n        \n        ### Example\n        \n        [`/info`](https://ws.spraakbanken.gu.se/ws/korp/v8/info?indent=4)\n      tags:\n        - Information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                    description: API version.\n                    example: 8.0.0\n                  cqp_version:\n                    type: string\n                    description: CQP version.\n                    example: 3.2.1\n                  corpora:\n                    type: array\n                    description: List of corpora on the server.\n                    items:\n                      type: string\n                    example:\n                        - NOVELS\n                        - BLOGS2018\n                  protected_corpora:\n                    type: array\n                    description: List of which of the above corpora that are password protected.\n                    items:\n                      type: string\n                    example:\n                        - CLASSIFIED\n                        - MYDIARY\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /corpus_info:\n    get:\n      summary: Corpus Information\n      description: |\n        Fetch information about one or more corpora.\n        \n        ### Example\n        \n        [`/corpus_info?corpus=ROMI,PAROLE`](https://ws.spraakbanken.gu.se/ws/korp/v8/corpus_info?corpus=ROMI,PAROLE\u0026indent=4)\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n      tags:\n        - Information\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  corpora:\n                    type: object\n                    description: List of corpora.\n                    additionalProperties:\n                      type: object\n                      properties:\n                        attrs:\n                          type: object\n                          properties:\n                            p:\n                              type: array\n                              description: List of positional attributes.\n                              items:\n                                type: string\n                                description: Positional attribute.\n                                example: [baseform, pos]\n                            s:\n                              type: array\n                              description: List of structural attributes.\n                              items:\n                                type: string\n                                description: Structural attribute.\n                                example: [text_author, text_title]\n                            a:\n                              type: array\n                              description: List of align attributes, for linked corpora.\n                              items:\n                                type: string\n                                description: Align attribute.\n                                example: [link_n]\n                        info:\n                          type: object\n                          description: Miscellaneous information about the corpus given by Corpus Workbench, including any key-value pairs from the corresponding `.info` file.\n                          properties:\n                            Charset:\n                              type: string\n                              description: Character encoding of the corpus.\n                              example: utf8\n                            FirstDate:\n                              type: string\n                              description: Date and time of the oldest dated text in the corpus.\n                              example: '1976-01-01 00:00:00'\n                            LastDate:\n                              type: string\n                              description: Date and time of the newest dated text in the corpus.\n                              example: '1990-12-31 23:59:59'\n                            Size:\n                              type: string\n                              description: Number of tokens in the corpus.\n                              example: '2531038'\n                            Sentences:\n                              type: string\n                              description: Number of sentences in the corpus.\n                              example: '83643'\n                            Updated:\n                              type: string\n                              description: Date when the corpus was last updated.\n                              example: '2018-05-13'\n                          additionalProperties:\n                            type: string\n                          required:\n                                - Charset\n                                - Size\n                  total_size:\n                    type: integer\n                    description: Total number of tokens in the above corpora.\n                    example: 82762958\n                  total_sentences:\n                    type: integer\n                    description: Total number of sentences in the above corpora.\n                    example: 326556\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /query:\n    get:\n      summary: Concordance\n      description: |\n        Do a concordance search in one or more corpora.\n        \n        ### Examples\n\n        Query the corpus SUC3 and show the first 10 sentences matching the CQP query `\"och\" [] [pos=\"NN\"]`, including part of speech and base form in the result:  \n        [`/query?corpus=SUC3\u0026start=0\u0026end=9\u0026default_context=1+sentence\u0026cqp=\"och\"+[]+[pos=\"NN\"]\u0026show=msd,lemma`](https://ws.spraakbanken.gu.se/ws/korp/v8/query?corpus=SUC3\u0026start=0\u0026end=9\u0026default_context=1+sentence\u0026cqp=%22och%22+%5B%5D+%5Bpos=%22NN%22%5D\u0026show=msd,lemma\u0026indent=4)\n        \n        Query the parallel corpus SALTNLD-SV and show part of speech + the linked Dutch sentence:  \n        [`/query?corpus=SALTNLD-SV\u0026start=0\u0026end=9\u0026context=1+link\u0026cqp=\"och\"+[]+[pos=\"NN\"]\u0026show=saltnld-nl`](https://ws.spraakbanken.gu.se/ws/korp/v8/query?corpus=SALTNLD-SV\u0026start=0\u0026end=9\u0026default_context=1+link\u0026cqp=%22och%22+%5B%5D+%5Bpos=%22NN%22%5D\u0026show=saltnld-nl\u0026indent=4)\n      tags:\n        - Concordance\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n        - $ref: '#/components/parameters/CQP'\n        - $ref: '#/components/parameters/Start'\n        - $ref: '#/components/parameters/End'\n        - name: default_context\n          description: Context to show, e.g. ‘1 sentence’.\n          in: query\n          schema:\n            type: string\n            default: '10 words'\n            example: '1 sentence'\n        - name: context\n          description: Context to show for specific corpora, overriding the default. Specified using the format 'corpus:context'.\n          in: query\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n            example: ['ROMI:1 sentence', 'SUC3:10 words']\n        - $ref: '#/components/parameters/Show'\n        - $ref: '#/components/parameters/ShowStruct'\n        - $ref: '#/components/parameters/DefaultWithin'\n        - $ref: '#/components/parameters/Within'\n        - name: in_order\n          description: By default the order of the tokens in your query matters, and will only match tokens in that particular order. By setting this parameter to 'false' the order of the tokens will no longer matter, and every occurrence of each matched token will be highlighted. Requires **default_within** or **within**.\n          in: query\n          schema:\n            type: boolean\n            default: true\n        - name: sort\n          description: |\n            Sort the results *within each corpus*. The available options are:\n            * `keyword` - Sort by match\n            * `left` - Sort by left context\n            * `right` - Sort by right context\n            * `random` - Random order\n            * `any positional attribute` - Sort by given attribute\n            \n            By default no sorting is performed.\n          in: query\n          schema:\n            type: string\n        - name: random_seed\n          description: Numerical value for reproducible random order, used together with `sort=random` but not required.\n          in: query\n          schema:\n            type: integer\n            example: 984326587\n        - name: cut\n          description: Limit total number of hits per corpus to this number. The default is no limit.\n          in: query\n          schema:\n            type: integer\n            example: 25\n        - $ref: '#/components/parameters/CQPn'\n        - $ref: '#/components/parameters/ExpandPrequeries'\n        - $ref: '#/components/parameters/Incremental'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  hits:\n                    type: integer\n                    description: Total number of hits.\n                    example: 1422\n                  corpus_hits:\n                    type: object\n                    additionalProperties:\n                      type: integer\n                    example:\n                     ROMI: 1135\n                     SUC3: 287\n                  kwic:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        match:\n                          description: Specifies the position of the match in the context. If `in_order` is set to `false`, `match` will consist of a list of match objects, one per highlighted word.\n                          oneOf:\n                            - $ref: '#/components/schemas/Match'\n                            - type: array\n                              items:\n                                $ref: '#/components/schemas/Match'\n                        structs:\n                          type: object\n                          description: Structural attributes.\n                          additionalProperties:\n                            type: string\n                          example:\n                            text_author: Söderberg, Hjalmar\n                            text_title: Doktor Glas\n                        tokens:\n                          description: List of tokens with associated annotations.\n                          type: array\n                          items:\n                            type: object\n                            additionalProperties:\n                              type: string\n                            required:\n                                  - word\n                            example:\n                              word: cat\n                              pos: NN\n                        aligned:\n                          description: Hits from aligned corpora if available, otherwise omitted.\n                          type: object\n                          additionalProperties:\n                            type: array\n                            items:\n                              type: object\n                            description: List of tokens.\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /query_sample:\n    get:\n      summary: Sample Concordance\n      description: |\n        Same as regular concordance, but does a sequential search in the selected corpora in random order until at least one hit is found, then aborts. The result will be randomly sorted. Use this to get one or more random sample sentences.\n        \n        Takes the same parameters as `/query`, but `sort` will always be set to `random`. Response format is the same.\n      tags:\n        - Concordance\n      responses:\n        '200':\n          description: OK\n  /count:\n    get:\n      summary: Statistics\n      description: |\n        Given a CQP query, calculate the frequency for one or more attributes. Both absolute and relative frequency are calculated. The relative frequency is given as *hits per 1 million tokens*.\n        \n        For instances when you want to calculate statistics for *every* token in one or several corpora, the `/count_all` command should be used instead since it is optimized for that kind of query.\n        \n        If you want to base your statistics on one single token in a multi token query, prefix that token with an `@`, e.g. `[pos = \"JJ\"] @[pos = \"NN\"]`.\n        \n        When `subcqp#` parameters are used, `\"\u003ccorpus\u003e\"` and `\"total\"` above will instead each contain a list, with the first item being the result of the main `cqp` query, and the following items the results of the `subcqp#` queries. The `subcqp#` results will each have an additional key, `\"cqp\"`, containing the CQP query for that particular subquery.\n        \n        ### Example\n        \n        Get frequencies for the different word forms of the lemgram `ge..vb.1`:  \n        [`/count?corpus=ROMI\u0026cqp=[lex+contains+\"ge..vb.1\"]\u0026group_by=word\u0026ignore_case=word`](https://ws.spraakbanken.gu.se/ws/korp/v8/count?corpus=ROMI\u0026cqp=[lex+contains+%22ge..vb.1%22]\u0026group_by=word\u0026ignore_case=word\u0026indent=4)\n      tags:\n        - Statistics\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n        - $ref: '#/components/parameters/CQP'\n        - $ref: '#/components/parameters/GroupBy'\n        - $ref: '#/components/parameters/GroupByStruct'\n        - $ref: '#/components/parameters/DefaultWithin'\n        - $ref: '#/components/parameters/Within'\n        - $ref: '#/components/parameters/IgnoreCase'\n        - name: relative_to_struct\n          description: Calculate relative frequencies based on total number of tokens with the same value for the structural annotations specified here, instead of relative to corpus size.\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          example: [text_author]\n          explode: false\n        - name: split\n          description: Attributes that should be split (used for sets).\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          example: [baseform, sense]\n          explode: false\n        - name: top\n          description: \"Preserve only the first *n* annotations in a set. Format: 'annotation:n'. If *:n* is omitted only the first value will be preserved. Must be used together with `split`.\"\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n          example: ['sense:3']\n          explode: false\n        - $ref: '#/components/parameters/CQPn'\n        - $ref: '#/components/parameters/ExpandPrequeries'\n        - $ref: '#/components/parameters/SubCQPn'\n        - name: start\n          description: Start row; used for pagination.\n          in: query\n          schema:\n            type: integer\n            default: 0\n        - name: end\n          description: End row; used for pagination. By default no limit.\n          in: query\n          schema:\n            type: integer\n          example: 25\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  corpora:\n                    type: object\n                    description: Statistics per corpus. An object with corpus names as keys, and either objects or arrays of objects as values depending on whether the `subcqp#` parameter is used. When `subcqp#` is used, each value consists of an array with the first item being the result of the main `cqp` query (or the last `cqp#` query), and the following items the results of the `subcqp#` queries. The `subcqp#` results will each have an additional key, `cqp`, containing the CQP query for that particular subquery.\n                    additionalProperties:\n                      oneOf:\n                        - $ref: '#/paths/~1count/get/responses/200/content/application~1json/schema/properties/combined/oneOf/0'\n                        - type: array\n                          items:\n                            $ref: '#/paths/~1count/get/responses/200/content/application~1json/schema/properties/combined/oneOf/0'\n                  combined:\n                    description: Combined statistics for all corpora. Either an object or an array of objects depending on whether the `subcqp#` parameter is used. When `subcqp#` is used, this will consist of an array with the first item being the result of the main `cqp` query (or the last `cqp#` query), and the following items the results of the `subcqp#` queries. The `subcqp#` results will each have an additional key, `cqp`, containing the CQP query for that particular subquery.\n                    oneOf:\n                      - type: object\n                        properties:\n                          sums:\n                            type: object\n                            properties:\n                              absolute:\n                                type: integer\n                                example: 598\n                              relative:\n                                type: number\n                                example: 13.765536\n                          rows:\n                            type: array\n                            items:\n                              type: object\n                              properties:\n                                absolute:\n                                  description: Absolute frequency.\n                                  type: integer\n                                  example: 598\n                                relative:\n                                  description: Relative frequency.\n                                  type: number\n                                  example: 13.765536\n                                value:\n                                  description: An object with annotations as keys. Structural annotations are given as strings, while positional are given as arrays of strings, one string per word in the match.\n                                  type: object\n                                  additionalProperties:\n                                    anyOf:\n                                      - type: string\n                                      - type: array\n                                        items:\n                                          type: string\n                      - type: array\n                        items:\n                          $ref: '#/paths/~1count/get/responses/200/content/application~1json/schema/properties/combined/oneOf/0'\n                  count:\n                    type: integer\n                    description: Total number of different values.\n                    example: 241\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /count_all:\n    get:\n      summary: Complete Statistics\n      description: |\n        Same as regular statistics (`/count`) but without specifying `cqp`, resulting in a complete list of every value of the given attributes.\n\n        Takes the same parameters as `/count`, except it doesn't use `cqp`. Response format is the same.\n        \n        ### Example\n        \n        Get statistics for all parts of speech in one corpus:  \n        [/count_all?corpus=ROMI\u0026group_by=pos](https://ws.spraakbanken.gu.se/ws/korp/v8/count_all?corpus=ROMI\u0026group_by=pos\u0026indent=4)\n      tags:\n        - Statistics\n      responses:\n        '200':\n          description: OK\n  /count_time:\n    get:\n      summary: Statistics Over Time\n      description: |\n        Show the change in frequency of one or more search results over time.\n        \n        **Interpreting the results**\n        \n        The data points in the result indicates the number of hits *from that point onward* until the next data point, meaning that the following data:\n\n        ```json\n        \"2010\": 100,\n        \"2012\": 50,\n        \"2013\": 0,\n        \"2016\": null\n        ```\n        \n        should be interpreted as 100 hits during 2010–2011, then 50 hits during 2012, zero hits 2013–2015, and finally from 2016 onwards we have no data at all.\n        \n        **Strategies**\n\n        What should happen when you ask for time data with a granularity finer than that of the annotated material? Does a search limited to the period 2005-01-01 -- 2005-01-31 include material dated with only \"2005\"? The `strategy` parameter gives you some control over this, affecting both how `from` and `to` work, and what parts of the material contribute to the results.\n\n        The list below describes the three different strategies, and for each strategy the rules that decide what part of the material is included in the search, as well as what tokens contribute to the token count for each data point.\n\n        The term \"result time span\" below refers both to the `from` and `to` span given by the user, and the different time spans making up the data points in the result data, the size of which are determined by the `granularity` parameter. For example the data point \"2015\" representing the whole of year 2015 when `granularity` is set to 'y', and \"2015-01\" representing the whole of January 2015 with `granularity` set to 'm'.\n\n        `t1` and `t2` represents the *from* and *to* dates for an annotated part of the material, and `t1'` and `t2'` is the *from* and *to* of \"result time span\" described above.\n\n        *Strategy 1*  \n        The material time span needs to be completely contained by the result time span, or the result time span needs to be\n        completely contained by the material time span.  \n        `(t1 \u003e= t1' AND t2 \u003c= t2') OR (t1 \u003c= t1' AND t2 \u003e= t2')`\n        \n        *Strategy 2*  \n        All overlaps allowed between material time span and result time span.  \n        `t1 \u003c= t2' AND t2 \u003e= t1'`\n        \n        *Strategy 3*  \n        The material time span is completely contained by the result time span.  \n        `t1 \u003e= t1' AND t2 \u003c= t2'`\n        \n        ### Example\n        \n        Show how the use of \"tsunami\" and \"flodvåg\" (\"tidal wave\") has changed over time in the Swedish newspaper Göteborgs-Posten:  \n        [`/count_time?cqp=[lex+contains+\"tsunami\\.\\.nn\\.1|flodvåg\\.\\.nn\\.1\"]\u0026corpus=GP2001,GP2002,GP2003,GP2004,GP2005,GP2006,GP2007,GP2008,GP2009,GP2010,GP2011,GP2012\u0026subcqp0=[lex+contains+'tsunami\\.\\.nn\\.1']\u0026subcqp1=[lex+contains+'flodvåg\\.\\.nn\\.1']`](https://ws.spraakbanken.gu.se/ws/korp/v8/count_time?cqp=%5Blex+contains+%22tsunami%5C.%5C.nn%5C.1%7Cflodv%C3%A5g%5C.%5C.nn%5C.1%22%5D\u0026corpus=GP2001%2CGP2002%2CGP2003%2CGP2004%2CGP2005%2CGP2006%2CGP2007%2CGP2008%2CGP2009%2CGP2010%2CGP2011%2CGP2012\u0026subcqp0=%5Blex+contains+'tsunami%5C.%5C.nn%5C.1'%5D\u0026subcqp1=%5Blex+contains+'flodv%C3%A5g%5C.%5C.nn%5C.1'%5D\u0026indent=4)\n      tags:\n        - Statistics\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n        - $ref: '#/components/parameters/CQP'\n        - $ref: '#/components/parameters/DefaultWithin'\n        - $ref: '#/components/parameters/Within'\n        - $ref: '#/components/parameters/SubCQPn'\n        - $ref: '#/components/parameters/Granularity'\n        - $ref: '#/components/parameters/TimeFrom'\n        - $ref: '#/components/parameters/TimeTo'\n        - name: strategy\n          description:  Time matching strategy. One of 1 (default), 2 or 3. See section about strategies for explanation.\n          in: query\n          schema:\n            type: integer\n            enum: [1, 2, 3]\n            default: 1\n        - $ref: '#/components/parameters/CQPn'\n        - $ref: '#/components/parameters/ExpandPrequeries'\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  corpora:\n                    type: object\n                    description: Time statistics per corpus. An object with corpus names as keys, and either objects or arrays of objects as values depending on whether the `subcqp#` parameter is used. When `subcqp#` is used, each value consists of an array with the first item being the result of the main `cqp` query (or the last `cqp#` query), and the following items the results of the `subcqp#` queries. The `subcqp#` results will each have an additional key, `cqp`, containing the CQP query for that particular subquery.\n                    additionalProperties:\n                      oneOf:\n                        - $ref: '#/paths/~1count_time/get/responses/200/content/application~1json/schema/properties/combined/oneOf/0'\n                        - type: array\n                          items:\n                            $ref: '#/paths/~1count_time/get/responses/200/content/application~1json/schema/properties/combined/oneOf/0'\n                  combined:\n                    description: Combined time statistics for all corpora. Either an object or an array of objects depending on whether the `subcqp#` parameter is used. When `subcqp#` is used, each value consists of an array with the first item being the result of the main `cqp` query (or the last `cqp#` query), and the following items the results of the `subcqp#` queries. The `subcqp#` results will each have an additional key, `cqp`, containing the CQP query for that particular subquery.\n                    oneOf:\n                      - type: object\n                        properties:\n                          absolute:\n                            description: Absolute frequency per time period.\n                            type: object\n                            additionalProperties:\n                              type: integer\n                              nullable: true\n                            example:\n                              2017: 354\n                              2018: 115\n                              2019: null\n                          relative:\n                            description: Relative frequency per time period.\n                            type: object\n                            additionalProperties:\n                              type: number\n                              nullable: true\n                            example:\n                              2017: 65.265\n                              2018: 87.521\n                              2019: null\n                          sums:\n                            type: object\n                            properties:\n                              absolute:\n                                description: Absolute frequency sum.\n                                type: integer\n                                example: 469\n                              relative:\n                                description: Relative frequency sum.\n                                type: number\n                                example: 152.786\n                      - type: array\n                        items:\n                          $ref: '#/paths/~1count_time/get/responses/200/content/application~1json/schema/properties/combined/oneOf/0'\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /timespan:\n    get:\n      summary: Distribution Over Time\n      description: |\n        Show the distribution of all tokens in a corpus over time.\n        \n        ### Example\n\n        Show distribution of tokens in the Swedish Party Programs and Election Manifestos corpus over time:  \n        [/timespan?corpus=VIVILL](https://ws.spraakbanken.gu.se/ws/korp/v8/timespan?corpus=VIVILL\u0026indent=4)\n      tags:\n        - Statistics\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n        - $ref: '#/components/parameters/Granularity'\n        - $ref: '#/components/parameters/TimeFrom'\n        - $ref: '#/components/parameters/TimeTo'\n        - name: strategy\n          description:  Time matching strategy. One of 1 (default), 2 or 3. See section about strategies for the `/count_time` endpoint for explanation.\n          in: query\n          schema:\n            type: integer\n            enum: [1, 2, 3]\n            default: 1\n        - name: per_corpus\n          description: Include per-corpus results.\n          schema:\n            type: boolean\n            default: true\n          in: query\n        - name: combined\n          description: Include combined results.\n          schema:\n            type: boolean\n            default: true\n          in: query\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            applicatoin/json:\n              schema:\n                type: object\n                properties:\n                  corpora:\n                    type: object\n                    description: An object with corpus names as keys and time statistics objects as values.\n                    additionalProperties:\n                      description: Number of tokens per time period.\n                      type: object\n                      additionalProperties:\n                        type: integer\n                    example:\n                      ROMI:\n                        2017: 15366\n                        2018: 7437\n                  combined:\n                    type: object\n                    description: Number of tokens per time period.\n                    additionalProperties:\n                      type: integer\n                    example:\n                      2017: 15366\n                      2018: 7437\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /loglike:\n    get:\n      summary: Log-Likelihood Comparison\n      description: |\n        Compare the results of two different searches by using log-likelihood.\n        \n        A positive log-likelihood value indicates a relative increase in `set2` compared to `set1`, while a negative value indicates a relative decrease.\n        \n        ### Example\n        \n        Compare the nouns of two different corpora:  \n        [`/loglike?set1_cqp=[pos=\"NN\"]\u0026set2_cqp=[pos=\"NN\"]\u0026group_by=word\u0026max=10\u0026set1_corpus=ROMI\u0026set2_corpus=GP2012`](https://ws.spraakbanken.gu.se/ws/korp/v8/loglike?set1_cqp=[pos=%22NN%22]\u0026set2_cqp=[pos=%22NN%22]\u0026group_by=word\u0026max=10\u0026set1_corpus=ROMI\u0026set2_corpus=GP2012\u0026indent=4)\n\n      tags:\n        - Misc\n      parameters:\n        - name: set1_cqp\n          description: CQP query for query 1.\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: set2_cqp\n          description: CQP query for query 2.\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: set1_corpus\n          description: Corpus name for query 1.\n          required: true\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n            example: [ROMI, SUC3]\n          explode: false\n        - name: set2_corpus\n          description: Corpus name for query 2.\n          required: true\n          in: query\n          schema:\n            type: array\n            items:\n              type: string\n            example: [ROMI, SUC3]\n          explode: false\n        - $ref: '#/components/parameters/GroupBy'\n        - $ref: '#/components/parameters/GroupByStruct'\n        - $ref: '#/components/parameters/IgnoreCase'\n        - name: max\n          description: Max numer of results per set.\n          in: query\n          schema:\n            type: integer\n            default: 15\n            example: 50\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  average:\n                    type: number\n                    description: Log-likelihood average.\n                    example: −0,655\n                  loglike:\n                    type: object\n                    description: Log-likelihood values.\n                    additionalProperties:\n                      type: number\n                    example:\n                      cat: -5.43\n                      dog: 4.12\n                  set1:\n                    type: object\n                    description: Absolute frequency for the values in set 1.\n                    additionalProperties:\n                      type: integer\n                    example:\n                      cat: 447\n                      dog: 808\n                  set2:\n                    type: object\n                    description: Absolute frequency for the values in set 2.\n                    additionalProperties:\n                      type: integer\n                    example:\n                      cat: 254\n                      dog: 614\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /relations:\n    get:\n      summary: Word Picture\n      description: |\n        Get typical dependency relations for a given lemgram or word.\n        \n        ### Example\n        \n        Get dependency relations for the lemgram ge..vb.1:  \n        [`/relations?word=ge..vb.1\u0026type=lemgram\u0026corpus=ROMI`](https://ws.spraakbanken.gu.se/ws/korp/v8/relations?word=ge..vb.1\u0026type=lemgram\u0026corpus=ROMI\u0026indent=4)\n\n      tags:\n        - Word Picture\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n        - name: word\n          description: Word or lemgram.\n          required: true\n          in: query\n          schema:\n            type: string\n        - name: type\n          description: |\n            Search type. Available options:\n            \n            * `word` (default)\n            * `lemgram`\n          schema:\n            type: string\n            enum: [word, lemgram]\n            default: word\n          in: query\n        - name: min\n          description: Cut-off frequency. No cut-off if omitted.\n          schema:\n            type: integer\n          in: query\n        - name: max\n          description: Maximum number of results. 0 = unlimited.\n          schema:\n            type: integer\n            default: 15\n          in: query\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  relations:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        dep:\n                          description: Dependent lemgram or word.\n                          type: string\n                        depextra:\n                          description: Dependent prefix.\n                          type: string\n                        deppos:\n                          description: Dependent part of speech.\n                          type: string\n                        freq:\n                          description: Number of occurrences.\n                          type: integer\n                        head:\n                          description: Head lemgram or word.\n                          type: string\n                        headpos:\n                          description: Head part of speech.\n                          type: string\n                        mi:\n                          description: Lexicographer's mutual information score.\n                          type: number\n                          example: 17.326\n                        rel:\n                          description: Relation.\n                          type: string\n                        source:\n                          description: List of IDs, for getting the source sentences.\n                          type: array\n                          items:\n                            type: string\n                      example:\n                        dep: \"black\"\n                        depextra: \"\"\n                        deppos: \"JJ\"\n                        rel: \"AT\"\n                        headpos: \"NN\"\n                        head: \"cat\"\n                        freq: 5\n                        mi: 17.92607125616987\n                        source:\n                          - ROMI:253662\n                  time:\n                    $ref: '#/components/schemas/Time'\n  /relations_sentences:\n    get:\n      summary: Word Picture Sentences\n      description: |\n        Given the source ID for a relation (from a Word Picture query), return the sentences in which this relation occurs.\n        \n        Returns a structure identical to a regular `/query`.\n      tags:\n        - Word Picture\n      parameters:\n        - name: source\n          description: List of source IDs (from a Word Picture query).\n          schema:\n            type: array\n            items:\n              type: string\n          in: query\n          explode: false\n        - $ref: '#/components/parameters/Start'\n        - $ref: '#/components/parameters/End'\n        - $ref: '#/components/parameters/Show'\n        - $ref: '#/components/parameters/ShowStruct'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1query/get/responses/200/content/application~1json/schema'\n  /lemgram_count:\n    get:\n      summary: Lemgram Statistics\n      description: |\n        Return the number of occurrences of one or more lemgrams in one or more corpora.\n        \n        ### Example\n        \n        Get number of occurrences of the lemgrams `ge..vb.1` and `ta..vb.1` in a single corpus:  \n        [`/lemgram_count?lemgram=ge..vb.1,ta..vb.1\u0026corpus=ROMI`](https://ws.spraakbanken.gu.se/ws/korp/v8/lemgram_count?lemgram=ge..vb.1,ta..vb.1\u0026corpus=ROMI\u0026indent=4)\n      tags:\n        - Statistics\n      parameters:\n        - name: lemgram\n          description: Lemgram to look up.\n          schema:\n            type: array\n            items:\n              type: string\n          required: true\n          in: query\n          explode: false\n        - name: corpus\n          description: Corpus name. All corpora if omitted.\n          schema:\n            type: array\n            items:\n              type: string\n          in: query\n          explode: false\n        - name: count\n          description: |\n            What type of ocurrences to count. Available options are:\n            \n            * `lemgram` (default)\n            * `prefix`\n            * `suffix`\n          schema:\n            type: string\n            enum: [lemgram, prefix, suffix]\n            default: lemgram\n          in: query\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: Lemgrams as keys with absolute frequencies as values.\n                properties:\n                  time:\n                    $ref: '#/components/schemas/Time'\n                additionalProperties:\n                  type:\n                    integer\n                example:\n                  cat..nn.1: 354\n                  dog..nn.1: 85\n  /struct_values:\n    get:\n      summary: Structural Values\n      description: |\n        Get all available values for one or more structural attributes, together with number of tokens for each value. Similar to `/count_all` but without relative frequencies and with support for hierarchies.\n        \n        ### Example\n        \n        Get all authors and their titles together with token count:  \n        [`/struct_values?corpus=ROMI\u0026struct=text_author\u003etext_title\u0026count=true`](https://ws.spraakbanken.gu.se/ws/korp/v8/struct_values?corpus=ROMI\u0026struct=text_author\u003etext_title\u0026count=true\u0026indent=4)\n      tags:\n        - Misc\n      parameters:\n        - $ref: '#/components/parameters/Corpus'\n        - name: struct\n          description: \"Structural attribute. Each value can be either a plain attribute, or a hierarchy of two or more attributes, like so: `text_author\u003etext_title`.\"\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n          in: query\n          explode: false\n        - name: count\n          description: Include token count. Disabled by default.\n          schema:\n            type: boolean\n            default: false\n          in: query\n        - name: per_corpus\n          description: Include per-corpus results. Enabled by default.\n          schema:\n            type: boolean\n            default: true\n          in: query\n        - name: combined\n          description: Include combined results. Enabled by default.\n          schema:\n            type: boolean\n            default: true\n          in: query\n        - $ref: '#/components/parameters/IncrementalProgress'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                  type: object\n                  properties:\n                    corpora:\n                      description: Per corpus data.\n                      type: object\n                      additionalProperties:\n                        $ref: '#/paths/~1struct_values/get/responses/200/content/application~1json/schema/properties/combined'\n                    combined:\n                      type: object\n                      description: Structural attributes as keys. The values are either given as arrays or objects depending on if `count` is `true`.\n                      additionalProperties:\n                        oneOf:\n                          - type: array\n                            description: Structural values.\n                            items:\n                              type: string\n                          - type: object\n                            description: Strucural values as keys, token counts as values.\n                            additionalProperties:\n                              type: integer\n                    time:\n                      $ref: '#/components/schemas/Time'\n  /authenticate:\n    get:\n      summary: Authentication\n      description: Authenticate a user against an authentication system, if available. Uses basic authentication. Returns a list of protected corpora the user has access to.\n      tags:\n        - Misc\n      responses:\n       '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  corpora:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                      corpora:\n                        - CLASSIFIED\n                        - MYDIARY \n                  time:\n                    $ref: '#/components/schemas/Time'\n\nsecurity:\n  - basicAuth: []\n  \ncomponents:\n  schemas:\n    Time:\n      type: number\n      description: Execution time in seconds.\n      example: 0.0125\n    Match:\n      type: object\n      properties:\n        start:\n          type: integer\n          description: Start position of the match within the context.\n          example: 5\n        end:\n          type: integer\n          description: End position of the match within the context.\n          example: 6\n        position:\n          type: integer\n          description: Global corpus position of the match.\n          example: 73648\n  parameters:\n    Corpus:\n      name: corpus\n      description: Corpus name.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n        example: [ROMI, SUC3]\n      explode: false\n      required: true\n    CQP:\n      name: cqp\n      description: CQP query.\n      in: query\n      schema:\n        type: string\n      required: true\n      example: '[word=\"flower\"]'\n    CQPn:\n      name: 'cqp#'\n      description: 'Where # is a number, e.g. `cqp1`, `cqp2`. In addition to the `cqp` parameter, you can add additional CQP queries that will be executed on the result of the previous query (i.e. searching within search results). The final result returned to the user will be that of the last numbered query.'\n      in: query\n      schema:\n        type: string\n        example: '[pos=\"NN\"]'\n    DefaultWithin:\n      name: default_within\n      description: Prevent search from crossing boundaries of the given structural attribute, e.g. 'sentence'.\n      in: query\n      schema:\n        type: string\n        example: sentence\n    End:\n      name: end\n      description: Last result to return; used for pagination.\n      in: query\n      schema:\n        type: integer\n        default: 9\n        example: 9\n    ExpandPrequeries:\n      name: expand_prequeries\n      description: 'When using multiple CQP queries (`cqp#`), this determines whether subsequent queries should be executed on the containing sentences (or any other structural attribute defined by `within`) from the previous query, or just the actual matched tokens. Enabled by default.'\n      in: query\n      schema:\n        type: boolean\n        default: true\n    Granularity:\n      name: granularity\n      description: |\n        Time resolution. Available options are:\n        * `y` - Year (default)\n        * `m` - Month\n        * `d` - Day\n        * `h` - Hour\n        * `n` - Minute\n        * `s` - Second\n      in: query\n      schema:\n        type: string\n        enum: [y, m, d, h, n, s]\n        default: y\n    GroupBy:\n      name: group_by\n      description: Positional attribute by which the hits should be grouped. Defaults to `word` if neither `group_by` nor `group_by_struct` is defined.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n      explode: false\n      example: [pos, baseform]\n    GroupByStruct:\n      name: group_by_struct\n      description: Structural attribute by which the hits should be grouped. The value for the *first* token of the hit will be used.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n      explode: false\n      example: [text_author, text_title]\n    IgnoreCase:\n      name: ignore_case\n      description: Change all values of the given attribute(s) to lowercase.\n      in: query\n      schema:\n        type: array\n        items:\n          type: string\n      example: [word, pos]\n      explode: false\n    Incremental:\n      name: incremental\n      description: Return results incrementally when set to 'true' and more than one corpus is specified.\n      in: query\n      schema:\n        type: boolean\n        default: false\n    IncrementalProgress:\n      name: incremental\n      description: Incrementally return progress updates when the calculation for each corpus is finished.\n      in: query\n      schema:\n        type: boolean\n        default: false\n    Show:\n      name: show\n      description: Positional attributes to show. 'word' will always be included.\n      in: query\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n        example: [pos, baseform]\n        default: [word]\n    ShowStruct:\n      name: show_struct\n      description: Structural attributes to show.\n      in: query\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n        example: [text_author, text_title]\n    Start:\n      name: start\n      description: First result to return; used for pagination.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        example: 0\n    SubCQPn:\n      name: subcqp#\n      description: \"Where # is a number. Sub-queries to the main query (or last **cqp#** query). Any number of numbered subcqp-parameters can be used. These will always be executed on just the actual matched tokens from the main query (i.e. no expansion), and the result for each subquery will be included as a separate object in the final JSON, in addition to the main query result.\"\n      in: query\n      schema:\n        type: string\n    TimeFrom:\n      name: from\n      description: Only include results contained by date range specified by `from` and `to`. Must be used together with `to`. On the format `YYYYMMDDhhmmss`.\n      in: query\n      schema:\n        type: string\n    TimeTo:\n      name: to\n      description: Only include results contained by date range specified by `from` and `to`. Must be used together with `from`. On the format `YYYYMMDDhhmmss`.\n      in: query\n      schema:\n        type: string\n    Within:\n      name: within\n      description: Like default_within, but for specific corpora, overriding the default. Specified using the format 'corpus:attribute'.\n      in: query\n      explode: false\n      schema:\n        type: array\n        items:\n          type: string\n        example: ['ROMI:paragraph', 'SUC3:text']\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic",
			"canonicalURL": "/github.com/spraakbanken/korp-backend@65e759199464a26b512608cde2e52e62a5989351/-/blob/docs/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/spraakbanken/korp-backend/blob/65e759199464a26b512608cde2e52e62a5989351/docs/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: parameters: \"Granularity\": at 1:1496: at 1:1696: schema: at 1:1696: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}