{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/redhat-developer/app-services-sdk-java"
		},
		"file": {
			"name": "kafka-admin-rest.yaml",
			"size": 0,
			"path": ".openapi/kafka-admin-rest.yaml",
			"byteSize": 52693,
			"content": "---\nopenapi: 3.0.3\ninfo:\n  title: Kafka Admin REST API\n  description: An API to provide REST endpoints for query Kafka for admin operations\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0\n  version: 0.8.1-SNAPSHOT\nservers:\n- url: /\n  description: Kafka Admin REST API\nsecurity:\n- Bearer: []\ntags:\n- name: topics\n  description: Topic Management\n- name: groups\n  description: Consumer Group Management\n- name: acls\n  description: Access Control Management (ACLs)\n- name: records\n  description: Send and receive records interactively\npaths:\n  /api/v1/topics:\n    get:\n      tags:\n      - topics\n      summary: Retrieves a list of topics\n      description: \"Returns a list of all of the available topics, or the list of\\\n        \\ topics that meet the request query parameters. The topics returned are limited\\\n        \\ to those records the requestor is authorized to view.\"\n      operationId: getTopics\n      parameters:\n      - name: offset\n        in: query\n        description: \"Offset of the first record to return, zero-based\"\n        schema:\n          format: int32\n          minimum: 0\n          type: integer\n        deprecated: true\n      - name: limit\n        in: query\n        description: Maximum number of records to return\n        schema:\n          format: int32\n          minimum: 1\n          type: integer\n        deprecated: true\n      - name: size\n        in: query\n        description: Number of records per page\n        schema:\n          format: int32\n          default: \"10\"\n          minimum: 1\n          type: integer\n      - name: filter\n        in: query\n        description: Filter to apply when returning the list of topics\n        schema:\n          type: string\n      - name: page\n        in: query\n        description: Page number\n        schema:\n          format: int32\n          default: \"1\"\n          minimum: 1\n          type: integer\n      - name: order\n        in: query\n        description: Order items are sorted\n        required: false\n        schema:\n          $ref: '#/components/schemas/SortDirection'\n      - name: orderKey\n        in: query\n        description: Order key to sort the topics by.\n        required: false\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/TopicOrderKey'\n          - default: name\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: List of topics matching the request query parameters. The topics\n            returned are limited to those records the requestor is authorized to view.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TopicsList'\n    post:\n      tags:\n      - topics\n      summary: Creates a new topic\n      description: Creates a new topic for Kafka.\n      operationId: createTopic\n      requestBody:\n        description: Topic to create.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewTopicInput'\n            examples:\n              NewTopicExample:\n                $ref: '#/components/examples/NewTopicExample'\n        required: true\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"409\":\n          $ref: '#/components/responses/Conflict'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"201\":\n          description: Topic created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n  /api/v1/topics/{topicName}:\n    get:\n      tags:\n      - topics\n      summary: Retrieves a single topic\n      description: Topic\n      operationId: getTopic\n      parameters:\n      - name: topicName\n        in: path\n        description: Name of the topic to describe\n        required: true\n        schema:\n          type: string\n      responses:\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: Kafka topic details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n    delete:\n      tags:\n      - topics\n      summary: Deletes a topic\n      description: Deletes the topic with the specified name.\n      operationId: deleteTopic\n      parameters:\n      - name: topicName\n        in: path\n        description: Name of the topic to delete\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: Topic deleted successfully.\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n    patch:\n      tags:\n      - topics\n      summary: Updates a single topic\n      description: Update the configuration settings for a topic.\n      operationId: updateTopic\n      parameters:\n      - name: topicName\n        in: path\n        description: Name of the topic to update\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/TopicSettings'\n        required: true\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: Topic updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Topic'\n  /api/v1/consumer-groups:\n    get:\n      tags:\n      - groups\n      summary: List of consumer groups in the Kafka instance.\n      description: Returns a list of all consumer groups for a particular Kafka instance.\n        The consumer groups returned are limited to those records the requestor is\n        authorized to view.\n      operationId: getConsumerGroups\n      parameters:\n      - name: offset\n        in: query\n        description: \"Offset of the first record to return, zero-based\"\n        schema:\n          format: int32\n          minimum: 0\n          type: integer\n        deprecated: true\n      - name: limit\n        in: query\n        description: Maximum number of records to return\n        schema:\n          format: int32\n          minimum: 1\n          type: integer\n        deprecated: true\n      - name: size\n        in: query\n        description: Number of records per page\n        schema:\n          format: int32\n          default: \"10\"\n          minimum: 1\n          type: integer\n      - name: page\n        in: query\n        description: Page number\n        schema:\n          format: int32\n          default: \"1\"\n          minimum: 1\n          type: integer\n      - name: topic\n        in: query\n        description: Return consumer groups where the topic name contains this value\n        schema:\n          type: string\n      - name: group-id-filter\n        in: query\n        description: Return the consumer groups where the ID contains this value\n        schema:\n          type: string\n      - name: order\n        in: query\n        description: Order items are sorted\n        required: false\n        schema:\n          $ref: '#/components/schemas/SortDirection'\n      - name: orderKey\n        in: query\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/ConsumerGroupOrderKey'\n          - default: name\n      responses:\n        \"200\":\n          description: List of consumer groups matching the request parameters. The\n            consumer groups returned are limited to those records the requestor is\n            authorized to view.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerGroupList'\n              examples:\n                List of consumer groups:\n                  value:\n                    count: 1\n                    limit: 10\n                    offset: 0\n                    items:\n                    - groupId: consumer_group_1\n                      consumers:\n                      - groupId: consumer_group_1\n                        topic: topic-1\n                        partition: 0\n                        memberId: consumer_group_member1\n                        offset: 5\n                        lag: 0\n                        logEndOffset: 5\n                      - groupId: consumer_group_1\n                        topic: topic-1\n                        partition: 1\n                        memberId: consumer_group_member2\n                        offset: 3\n                        lag: 0\n                        logEndOffset: 3\n                      - groupId: consumer_group_1\n                        topic: topic-1\n                        partition: 2\n                        memberId: consumer_group_member3\n                        offset: 6\n                        lag: 1\n                        logEndOffset: 5\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n  /api/v1/consumer-groups/{consumerGroupId}:\n    get:\n      tags:\n      - groups\n      summary: Get a single consumer group by its unique ID.\n      operationId: getConsumerGroupById\n      parameters:\n      - name: consumerGroupId\n        in: path\n        description: Consumer group identifier\n        required: true\n        schema:\n          type: string\n      - name: order\n        in: query\n        description: Order items are sorted\n        required: false\n        schema:\n          $ref: '#/components/schemas/SortDirection'\n      - name: orderKey\n        in: query\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/ConsumerGroupDescriptionOrderKey'\n          - default: partition\n      - name: partitionFilter\n        in: query\n        description: Value of partition to include. Value -1 means filter is not active.\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - name: topic\n        in: query\n        description: Filter consumer groups for a specific topic\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Consumer group details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerGroup'\n              examples:\n                ConsumerGroupExample:\n                  $ref: '#/components/examples/ConsumerGroupExample'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n    delete:\n      tags:\n      - groups\n      summary: Delete a consumer group.\n      description: \"Delete a consumer group, along with its consumers.\"\n      operationId: deleteConsumerGroupById\n      parameters:\n      - name: consumerGroupId\n        in: path\n        description: Consumer group identifier\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: The consumer group was deleted successfully.\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"423\":\n          description: User cannot delete consumer group with active members.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n  /api/v1/consumer-groups/{consumerGroupId}/reset-offset:\n    post:\n      tags:\n      - groups\n      summary: Reset the offset for a consumer group.\n      description: Reset the offset for a particular consumer group.\n      operationId: resetConsumerGroupOffset\n      parameters:\n      - name: consumerGroupId\n        in: path\n        description: Consumer group identifier\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerGroupResetOffsetParameters'\n            examples:\n              ConsumerGroupOffsetResetExample:\n                $ref: '#/components/examples/ConsumerGroupOffsetResetExample'\n        required: true\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"404\":\n          $ref: '#/components/responses/NotFound'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: The consumer group offsets have been reset.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerGroupResetOffsetResult'\n  /api/v1/acls:\n    get:\n      tags:\n      - acls\n      summary: List ACL bindings\n      description: \"Returns a list of all of the available ACL bindings, or the list\\\n        \\ of bindings that meet the user's URL query parameters. If no parameters\\\n        \\ are specified, all ACL bindings known to the system will be returned (with\\\n        \\ paging).\"\n      operationId: getAcls\n      parameters:\n      - name: resourceType\n        in: query\n        description: ACL Resource Type Filter\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclResourceTypeFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding resource type\n            value: ANY\n          group:\n            summary: Match ACL bindings for consumer groups\n            value: GROUP\n          topic:\n            summary: Match ACL bindings for topics\n            value: TOPIC\n          cluster:\n            summary: Match ACL bindings for the cluster\n            value: CLUSTER\n          transactional_id:\n            summary: Match ACL bindings for transactional IDs\n            value: TRANSACTIONAL_ID\n      - name: resourceName\n        in: query\n        description: ACL Resource Name Filter\n        schema:\n          type: string\n      - name: patternType\n        in: query\n        description: ACL Pattern Type Filter\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclPatternTypeFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding pattern type\n            value: ANY\n          literal:\n            summary: Match a literal resource name or `*`\n            value: LITERAL\n          prefixed:\n            summary: Match a prefixed resource name\n            value: PREFIXED\n      - name: principal\n        in: query\n        description: |-\n          ACL Principal Filter. Either a specific user or the wildcard user `User:*` may be provided.\n          - When fetching by a specific user, the results will also include ACL bindings that apply to all users.\n          - When deleting, ACL bindings to be delete must match the provided `principal` exactly.\n        schema:\n          default: \"\"\n          type: string\n        examples:\n          wildcard:\n            summary: Match ACL entries that apply to all users\n            value: User:*\n          specific:\n            summary: Match ACL entries for a specific user\n            value: User:admin-5a1-0c1\n      - name: operation\n        in: query\n        description: \"ACL Operation Filter. The ACL binding operation provided should\\\n          \\ be valid for the resource type in the request, if not `ANY`.\"\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclOperationFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding operation\n            value: ANY\n      - name: permission\n        in: query\n        description: ACL Permission Type Filter\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclPermissionTypeFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding permission type\n            value: ANY\n          allow:\n            summary: Match only ACL bindings allowing access\n            value: ALLOW\n          deny:\n            summary: Match only ACL bindings denying access\n            value: DENY\n      - name: page\n        in: query\n        description: Page number\n        schema:\n          format: int32\n          default: \"1\"\n          minimum: 1\n          type: integer\n      - name: size\n        in: query\n        description: Number of records per page\n        schema:\n          format: int32\n          default: \"10\"\n          minimum: 1\n          type: integer\n      - name: order\n        in: query\n        description: Order items are sorted\n        required: false\n        schema:\n          $ref: '#/components/schemas/SortDirection'\n      - name: orderKey\n        in: query\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclBindingOrderKey'\n          - default: permission\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: List of ACL bindings matching the query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AclBindingListPage'\n    post:\n      tags:\n      - acls\n      summary: Create ACL binding\n      description: Creates a new ACL binding for a Kafka instance.\n      operationId: createAcl\n      requestBody:\n        description: ACL to create.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AclBinding'\n        required: true\n      responses:\n        \"201\":\n          description: ACL created successfully.\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n    delete:\n      tags:\n      - acls\n      summary: Delete ACL bindings\n      description: Deletes ACL bindings that match the query parameters.\n      operationId: deleteAcls\n      parameters:\n      - name: resourceType\n        in: query\n        description: ACL Resource Type Filter\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclResourceTypeFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding resource type\n            value: ANY\n          group:\n            summary: Match ACL bindings for consumer groups\n            value: GROUP\n          topic:\n            summary: Match ACL bindings for topics\n            value: TOPIC\n          cluster:\n            summary: Match ACL bindings for the cluster\n            value: CLUSTER\n          transactional_id:\n            summary: Match ACL bindings for transactional IDs\n            value: TRANSACTIONAL_ID\n      - name: resourceName\n        in: query\n        description: ACL Resource Name Filter\n        schema:\n          type: string\n      - name: patternType\n        in: query\n        description: ACL Pattern Type Filter\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclPatternTypeFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding pattern type\n            value: ANY\n          literal:\n            summary: Match a literal resource name or `*`\n            value: LITERAL\n          prefixed:\n            summary: Match a prefixed resource name\n            value: PREFIXED\n      - name: principal\n        in: query\n        description: |-\n          ACL Principal Filter. Either a specific user or the wildcard user `User:*` may be provided.\n          - When fetching by a specific user, the results will also include ACL bindings that apply to all users.\n          - When deleting, ACL bindings to be delete must match the provided `principal` exactly.\n        schema:\n          default: \"\"\n          type: string\n        examples:\n          wildcard:\n            summary: Match ACL entries that apply to all users\n            value: User:*\n          specific:\n            summary: Match ACL entries for a specific user\n            value: User:admin-5a1-0c1\n      - name: operation\n        in: query\n        description: \"ACL Operation Filter. The ACL binding operation provided should\\\n          \\ be valid for the resource type in the request, if not `ANY`.\"\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclOperationFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding operation\n            value: ANY\n      - name: permission\n        in: query\n        description: ACL Permission Type Filter\n        schema:\n          allOf:\n          - $ref: '#/components/schemas/AclPermissionTypeFilter'\n          - default: ANY\n        examples:\n          anything:\n            summary: Match any ACL binding permission type\n            value: ANY\n          allow:\n            summary: Match only ACL bindings allowing access\n            value: ALLOW\n          deny:\n            summary: Match only ACL bindings denying access\n            value: DENY\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: List of all ACL bindings matching the query parameters that\n            were deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AclBindingListPage'\n  /api/v1/acls/resource-operations:\n    get:\n      tags:\n      - acls\n      summary: Retrieve allowed ACL resources and operations\n      description: Retrieve the resources and associated operations that may have\n        ACLs configured.\n      operationId: getAclResourceOperations\n      responses:\n        \"200\":\n          description: Map of allowed resources and operations for ACL creation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: array\n                  items:\n                    type: string\n              examples:\n                success:\n                  summary: Map of resources to allowed ACL operations\n                  value: |-\n                    {\n                        \"cluster\": [ \"describe\", \"alter\" ],\n                        \"group\": [ \"all\", \"delete\", \"describe\", \"read\" ],\n                        \"topic\": [ \"all\", \"alter\", \"alter_configs\", \"create\", \"delete\", \"describe\", \"describe_configs\", \"read\", \"write\" ],\n                        \"transactional_id\": [ \"all\", \"describe\", \"write\" ]\n                    }\n                disabled:\n                  summary: No configuration of ACL bindings is allowed\n                  value: \"{}\"\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n  /api/v1/topics/{topicName}/records:\n    get:\n      tags:\n      - records\n      summary: Consume records from a topic\n      description: \"Consume a limited number of records from a topic, optionally specifying\\\n        \\ a partition and an absolute offset or timestamp as the starting point for\\\n        \\ message retrieval.\"\n      operationId: consumeRecords\n      parameters:\n      - name: topicName\n        in: path\n        description: Topic name\n        required: true\n        schema:\n          type: string\n      - name: include\n        in: query\n        description: List of properties to include for each record in the response\n        schema:\n          type: array\n          items:\n            $ref: '#/components/schemas/RecordIncludedProperty'\n        explode: false\n      - name: limit\n        in: query\n        description: Limit the number of records fetched and returned\n        schema:\n          format: int32\n          default: \"20\"\n          type: integer\n      - name: offset\n        in: query\n        description: \"Retrieve messages with an offset equal to or greater than this\\\n          \\ offset. If both `timestamp` and `offset` are requested, `timestamp` is\\\n          \\ given preference.\"\n        schema:\n          format: int32\n          type: integer\n      - name: partition\n        in: query\n        description: Retrieve messages only from this partition\n        schema:\n          format: int32\n          type: integer\n      - name: timestamp\n        in: query\n        description: \"Retrieve messages with a timestamp equal to or later than this\\\n          \\ timestamp. If both `timestamp` and `offset` are requested, `timestamp`\\\n          \\ is given preference.\"\n        schema:\n          format: date-time\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"200\":\n          description: List of records matching the request query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RecordList'\n    post:\n      tags:\n      - records\n      summary: Send a record to a topic\n      description: Produce (write) a single record to a topic.\n      operationId: produceRecord\n      parameters:\n      - name: topicName\n        in: path\n        description: Topic name\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Record'\n            examples:\n              RecordProduceExample:\n                $ref: '#/components/examples/RecordProduceExample'\n        required: true\n      responses:\n        \"400\":\n          $ref: '#/components/responses/BadRequest'\n        \"401\":\n          $ref: '#/components/responses/NotAuthorized'\n        \"403\":\n          $ref: '#/components/responses/Forbidden'\n        \"500\":\n          $ref: '#/components/responses/ServerError'\n        \"503\":\n          $ref: '#/components/responses/ServiceUnavailable'\n        \"201\":\n          description: Record was successfully sent to the topic\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Record'\ncomponents:\n  schemas:\n    AclBinding:\n      title: ACL Binding\n      description: Represents a binding between a resource pattern and an access control\n        entry\n      required:\n      - resourceType\n      - resourceName\n      - patternType\n      - principal\n      - operation\n      - permission\n      type: object\n      properties:\n        resourceType:\n          $ref: '#/components/schemas/AclResourceType'\n        resourceName:\n          pattern: \\S\n          type: string\n          nullable: false\n        patternType:\n          $ref: '#/components/schemas/AclPatternType'\n        principal:\n          title: ACL Principal\n          description: Identifies the user or service account to which an ACL entry\n            is bound. The literal prefix value of `User:` is required. May be used\n            to specify all users with value `User:*`.\n          pattern: \\S\n          type: string\n          example: User:user-123-abc\n          nullable: false\n        operation:\n          $ref: '#/components/schemas/AclOperation'\n        permission:\n          $ref: '#/components/schemas/AclPermissionType'\n      example:\n        resourceType: TOPIC\n        resourceName: '*'\n        patternType: LITERAL\n        principal: User:user123\n        operation: READ\n        permission: ALLOW\n    AclBindingListPage:\n      title: ACL Binding List Page\n      description: A page of ACL binding entries\n      required:\n      - items\n      - total\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/AclBinding'\n          nullable: false\n        total:\n          format: int32\n          description: Total number of entries in the full result set\n          type: integer\n          nullable: false\n        size:\n          format: int32\n          description: Number of entries per page (returned for fetch requests)\n          type: integer\n        page:\n          format: int32\n          description: Current page number (returned for fetch requests)\n          type: integer\n    AclBindingOrderKey:\n      enum:\n      - resourceType\n      - resourceName\n      - patternType\n      - principal\n      - operation\n      - permission\n      type: string\n    AclOperation:\n      title: ACL Operation\n      enum:\n      - ALL\n      - READ\n      - WRITE\n      - CREATE\n      - DELETE\n      - ALTER\n      - DESCRIBE\n      - DESCRIBE_CONFIGS\n      - ALTER_CONFIGS\n      type: string\n      nullable: false\n    AclOperationFilter:\n      title: ACL Operation Filter\n      enum:\n      - ALL\n      - READ\n      - WRITE\n      - CREATE\n      - DELETE\n      - ALTER\n      - DESCRIBE\n      - DESCRIBE_CONFIGS\n      - ALTER_CONFIGS\n      - ANY\n      type: string\n    AclPatternType:\n      title: ACL Pattern Type\n      enum:\n      - LITERAL\n      - PREFIXED\n      type: string\n      nullable: false\n    AclPatternTypeFilter:\n      title: ACL Pattern Type Filter\n      description: Use value 'MATCH' to perform pattern matching.\n      enum:\n      - LITERAL\n      - PREFIXED\n      - ANY\n      - MATCH\n      type: string\n    AclPermissionType:\n      title: ACL Permission Type\n      enum:\n      - ALLOW\n      - DENY\n      type: string\n      nullable: false\n    AclPermissionTypeFilter:\n      title: ACL Permission Type Filter\n      enum:\n      - ALLOW\n      - DENY\n      - ANY\n      type: string\n    AclResourceType:\n      title: ACL Resource Type\n      enum:\n      - GROUP\n      - TOPIC\n      - CLUSTER\n      - TRANSACTIONAL_ID\n      type: string\n      nullable: false\n    AclResourceTypeFilter:\n      title: ACL Resource Type Filter\n      enum:\n      - ANY\n      - GROUP\n      - TOPIC\n      - CLUSTER\n      - TRANSACTIONAL_ID\n      type: string\n    ConfigEntry:\n      description: Key value pair indicating possible configuration options for a\n        topic.\n      required:\n      - key\n      - value\n      type: object\n      properties:\n        key:\n          description: The key indicating what configuration entry you would like\n            to set for the topic.\n          pattern: \\S\n          type: string\n          nullable: false\n        value:\n          description: Value to indicate the setting on the topic configuration entry.\n          pattern: \\S\n          type: string\n          nullable: false\n      example:\n        key: min.insync.replicas\n        value: \"1\"\n    Consumer:\n      description: A Kafka consumer is responsible for reading records from one or\n        more topics and one or more partitions of a topic.\n      required:\n      - groupId\n      - topic\n      - partition\n      - offset\n      - lag\n      type: object\n      properties:\n        groupId:\n          description: Unique identifier for the consumer group to which this consumer\n            belongs.\n          type: string\n          nullable: false\n        topic:\n          description: The unique topic name to which this consumer belongs\n          type: string\n          nullable: false\n        partition:\n          format: int32\n          description: The partition number to which this consumer group is assigned\n            to.\n          type: integer\n          nullable: false\n        offset:\n          format: int64\n          description: Offset denotes the position of the consumer in a partition.\n          type: integer\n        logEndOffset:\n          format: int64\n          description: The log end offset is the offset of the last message written\n            to a log.\n          type: integer\n        lag:\n          format: int64\n          description: Offset Lag is the delta between the last produced message and\n            the last consumer's committed offset.\n          type: integer\n        memberId:\n          description: The member ID is a unique identifier given to a consumer by\n            the coordinator upon initially joining the group.\n          type: string\n      example:\n        groupId: consumer_group_1\n        topic: topic-1\n        partition: 0\n        memberId: consumer_group_1-0\n        offset: 5\n        lag: 0\n        logEndOffset: 5\n    ConsumerGroup:\n      description: A group of Kafka consumers\n      required:\n      - groupId\n      - consumers\n      type: object\n      properties:\n        groupId:\n          description: Unique identifier for the consumer group\n          pattern: \\S\n          type: string\n          nullable: false\n        state:\n          $ref: '#/components/schemas/ConsumerGroupState'\n        consumers:\n          description: The list of consumers associated with this consumer group\n          type: array\n          items:\n            $ref: '#/components/schemas/Consumer'\n          nullable: false\n        metrics:\n          $ref: '#/components/schemas/ConsumerGroupMetrics'\n    ConsumerGroupDescriptionOrderKey:\n      enum:\n      - offset\n      - endOffset\n      - lag\n      - partition\n      type: string\n    ConsumerGroupList:\n      description: A list of consumer groups\n      required:\n      - items\n      - total\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsumerGroup'\n          nullable: false\n        total:\n          format: int32\n          description: Total number of entries in the full result set\n          type: integer\n          nullable: false\n        size:\n          format: int32\n          description: Number of entries per page (returned for fetch requests)\n          type: integer\n        page:\n          format: int32\n          description: Current page number (returned for fetch requests)\n          type: integer\n        offset:\n          format: int32\n          description: \"Offset of the first record returned, zero-based\"\n          type: integer\n          deprecated: true\n        limit:\n          format: int32\n          description: \"Maximum number of records to return, from request\"\n          type: integer\n          deprecated: true\n        count:\n          format: int32\n          description: Total number of entries in the full result set\n          type: integer\n          deprecated: true\n      example:\n        count: 1\n        limit: 10\n        offset: 0\n        items:\n        - groupId: consumer_group_1\n          consumers:\n          - groupId: consumer_group_1\n            topic: topic-1\n            partition: 0\n            memberId: consumer_group_member1\n            offset: 5\n            lag: 0\n            logEndOffset: 5\n          - groupId: consumer_group_1\n            topic: topic-1\n            partition: 1\n            memberId: consumer_group_member2\n            offset: 3\n            lag: 0\n            logEndOffset: 3\n          - groupId: consumer_group_1\n            topic: topic-1\n            partition: 2\n            memberId: consumer_group_member3\n            offset: 6\n            lag: 1\n            logEndOffset: 5\n    ConsumerGroupMetrics:\n      type: object\n      properties:\n        laggingPartitions:\n          format: int32\n          type: integer\n        activeConsumers:\n          format: int32\n          type: integer\n        unassignedPartitions:\n          format: int32\n          type: integer\n    ConsumerGroupOrderKey:\n      enum:\n      - name\n      type: string\n    ConsumerGroupResetOffsetParameters:\n      title: Root Type for ConsumerGroupResetOffsetParameters\n      required:\n      - offset\n      type: object\n      properties:\n        offset:\n          allOf:\n          - $ref: '#/components/schemas/OffsetType'\n          - nullable: false\n        value:\n          description: Value associated with the given `offset`. Not used for `offset`\n            values `earliest` and `latest`. When `offset` is `timestamp` then `value`\n            must be a valid timestamp representing the point in time to reset the\n            consumer group. When `offset` is `absolute` then `value` must be the integer\n            offset to which the consumer group will be reset.\n          type: string\n        topics:\n          type: array\n          items:\n            $ref: '#/components/schemas/TopicsToResetOffset'\n    ConsumerGroupResetOffsetResult:\n      title: Root Type for ConsumerGroupResetOffsetResult\n      required:\n      - items\n      - total\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/ConsumerGroupResetOffsetResultItem'\n          nullable: false\n        total:\n          format: int32\n          description: Total number of entries in the full result set\n          type: integer\n          nullable: false\n        size:\n          format: int32\n          description: Number of entries per page (returned for fetch requests)\n          type: integer\n        page:\n          format: int32\n          description: Current page number (returned for fetch requests)\n          type: integer\n      example:\n        total: 2\n        page: 1\n        size: 10\n        items:\n        - topic: your-topic\n          partition: 0\n          offset: 4\n        - topic: my-topic\n          partition: 0\n          offset: 0\n    ConsumerGroupResetOffsetResultItem:\n      type: object\n      properties:\n        topic:\n          type: string\n        partition:\n          format: int32\n          type: integer\n        offset:\n          format: int64\n          type: integer\n      example:\n        topic: your-topic\n        partition: 0\n        offset: 4\n    ConsumerGroupState:\n      enum:\n      - UNKNOWN\n      - PREPARING_REBALANCE\n      - COMPLETING_REBALANCE\n      - STABLE\n      - DEAD\n      - EMPTY\n      type: string\n    Error:\n      description: General error response\n      type: object\n      properties:\n        code:\n          format: int32\n          type: integer\n        error_message:\n          type: string\n        class:\n          type: string\n          deprecated: true\n    NewTopicInput:\n      description: Input object to create a new topic.\n      required:\n      - name\n      - settings\n      type: object\n      properties:\n        name:\n          description: \"The topic name, this value must be unique.\"\n          pattern: \\S\n          type: string\n          nullable: false\n        settings:\n          allOf:\n          - $ref: '#/components/schemas/TopicSettings'\n          - nullable: false\n      example:\n        name: my-topic\n        settings:\n          numPartitions: 3\n          config:\n          - key: min.insync.replicas\n            value: \"1\"\n          - key: max.message.bytes\n            value: \"1050000\"\n    Node:\n      description: Identifier for a Kafka server / broker.\n      type: object\n      properties:\n        id:\n          format: int32\n          type: integer\n    OffsetType:\n      enum:\n      - timestamp\n      - absolute\n      - latest\n      - earliest\n      type: string\n    Partition:\n      description: Kafka topic partition\n      required:\n      - partition\n      type: object\n      properties:\n        partition:\n          format: int32\n          description: \"The partition id, unique among partitions of the same topic\"\n          type: integer\n          nullable: false\n        replicas:\n          description: List of replicas for the partition\n          type: array\n          items:\n            $ref: '#/components/schemas/Node'\n        isr:\n          description: List in-sync replicas for this partition.\n          type: array\n          items:\n            $ref: '#/components/schemas/Node'\n        leader:\n          allOf:\n          - $ref: '#/components/schemas/Node'\n          - description: Node that is the leader for this partition.\n        id:\n          format: int32\n          description: \"Unique id for the partition (deprecated, use `partition` instead)\"\n          type: integer\n          deprecated: true\n      example:\n        id: 0\n        replicas:\n        - id: 0\n        - id: 1\n        isr:\n        - id: 0\n        - id: 1\n        leader:\n          id: 1\n    Record:\n      title: Record\n      description: An individual record consumed from a topic or produced to a topic\n      required:\n      - value\n      type: object\n      properties:\n        partition:\n          format: int32\n          description: The record's partition within the topic\n          type: integer\n        offset:\n          format: int64\n          description: The record's offset within the topic partition\n          type: integer\n          readOnly: true\n        timestamp:\n          format: date-time\n          description: \"Timestamp associated with the record. The type is indicated\\\n            \\ by `timestampType`. When producing a record, this value will be used\\\n            \\ as the record's `CREATE_TIME`.\"\n          type: string\n        timestampType:\n          description: Type of timestamp associated with the record\n          type: string\n          readOnly: true\n        headers:\n          description: \"Record headers, key/value pairs\"\n          type: object\n          additionalProperties:\n            type: string\n        key:\n          description: Record key\n          type: string\n        value:\n          description: Record value\n          type: string\n          nullable: false\n    RecordIncludedProperty:\n      enum:\n      - partition\n      - offset\n      - timestamp\n      - timestampType\n      - headers\n      - key\n      - value\n      type: string\n    RecordList:\n      title: Record List\n      description: A page of records consumed from a topic\n      required:\n      - items\n      - total\n      type: object\n      properties:\n        total:\n          format: int32\n          description: Total number of records returned in this request. This value\n            does not indicate the total number of records in the topic.\n          type: integer\n          nullable: false\n        size:\n          format: int32\n          description: Not used\n          type: integer\n        page:\n          format: int32\n          description: Not used\n          type: integer\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Record'\n          nullable: false\n    SortDirection:\n      enum:\n      - asc\n      - desc\n      type: string\n    Topic:\n      title: Root Type for NewTopicInput\n      description: Kafka Topic (A feed where records are stored and published)\n      type: object\n      properties:\n        name:\n          description: The name of the topic.\n          type: string\n        isInternal:\n          type: boolean\n        partitions:\n          description: Partitions for this topic.\n          type: array\n          items:\n            $ref: '#/components/schemas/Partition'\n        config:\n          description: Topic configuration entry.\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigEntry'\n      example:\n        name: my-topic\n        config:\n        - key: min.insync.replicas\n          value: \"1\"\n        - key: max.message.bytes\n          value: \"1050000\"\n        partitions:\n        - id: 0\n          replicas:\n          - id: 0\n          - id: 1\n          isr:\n          - id: 0\n          - id: 1\n          leader:\n            id: 0\n        - id: 1\n          replicas:\n          - id: 0\n          - id: 1\n          isr:\n          - id: 0\n          - id: 1\n          leader:\n            id: 1\n    TopicOrderKey:\n      enum:\n      - name\n      - partitions\n      - retention.ms\n      - retention.bytes\n      type: string\n    TopicSettings:\n      title: Topic Settings\n      description: \"The settings that are applicable to this topic. This includes\\\n        \\ partitions, configuration information, and number of replicas.\"\n      type: object\n      properties:\n        numPartitions:\n          format: int32\n          description: \"Number of partitions for this topic. If not specified, the\\\n            \\ default for new topics is `1`. Number of partitions may not be reduced\\\n            \\ when updating existing topics\"\n          maximum: 100\n          minimum: 1\n          type: integer\n        config:\n          description: Topic configuration entries.\n          type: array\n          items:\n            $ref: '#/components/schemas/ConfigEntry'\n      example:\n        numPartitions: 2\n        config:\n        - key: min.insync.replicas\n          value: \"1\"\n        - key: max.message.bytes\n          value: \"1050000\"\n    TopicsList:\n      description: A list of topics.\n      required:\n      - items\n      - total\n      type: object\n      properties:\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/Topic'\n          nullable: false\n        total:\n          format: int32\n          description: Total number of entries in the full result set\n          type: integer\n          nullable: false\n        size:\n          format: int32\n          description: Number of entries per page (returned for fetch requests)\n          type: integer\n        page:\n          format: int32\n          description: Current page number (returned for fetch requests)\n          type: integer\n        offset:\n          format: int32\n          description: \"Offset of the first record returned, zero-based\"\n          type: integer\n          deprecated: true\n        limit:\n          format: int32\n          description: \"Maximum number of records to return, from request\"\n          type: integer\n          deprecated: true\n        count:\n          format: int32\n          description: Total number of entries in the full result set\n          type: integer\n          deprecated: true\n      example:\n        items:\n        - name: my-topic\n          config:\n          - key: min.insync.replicas\n            value: \"1\"\n          - key: max.message.bytes\n            value: \"1050000\"\n          partitions:\n          - id: 0\n            replicas:\n            - id: 0\n            - id: 1\n            isr:\n            - id: 0\n            - id: 1\n            leader:\n              id: 0\n          - id: 1\n            replicas:\n            - id: 0\n            - id: 1\n            isr:\n            - id: 0\n            - id: 1\n            leader:\n              id: 1\n        offset: 25\n        limit: 90\n        count: 94\n    TopicsToResetOffset:\n      title: Root Type for TopicsToResetOffset\n      required:\n      - topic\n      type: object\n      properties:\n        topic:\n          type: string\n          nullable: false\n        partitions:\n          type: array\n          items:\n            format: int32\n            type: integer\n  responses:\n    BadRequest:\n      description: |-\n        The client request was invalid. One or more request parameters or the request\n        body was rejected. Additional information may be found in the response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          examples:\n            badrequest:\n              summary: Invalid query parameter\n              value:\n                code: 400\n                error_message: Invalid parameter value\n    NotAuthorized:\n      description: Request authentication missing or invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Forbidden:\n      description: User is not authorized to access requested resource\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    NotFound:\n      description: The requested resource could not be found.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    Conflict:\n      description: The resource already exists.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ServerError:\n      description: Internal server error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    ServiceUnavailable:\n      description: Kafka service unavailable\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n  examples:\n    NewTopicExample:\n      description: Sample new topic with 3 partitions\n      value:\n        name: my-topic\n        settings:\n          numPartitions: 3\n          config:\n          - key: min.insync.replicas\n            value: \"1\"\n          - key: max.message.bytes\n            value: \"1050000\"\n    ConsumerGroupExample:\n      description: Sample consumer group with 3 partitions and 3 active consumers\n      value:\n        groupId: consumer_group_1\n        state: STABLE\n        consumers:\n        - groupId: consumer_group_1\n          topic: topic-1\n          partition: 0\n          offset: 5\n          logEndOffset: 5\n          lag: 0\n          memberId: consumer_group_member1\n        - groupId: consumer_group_1\n          topic: topic-1\n          partition: 1\n          offset: 3\n          logEndOffset: 3\n          lag: 0\n          memberId: consumer_group_member2\n        - groupId: consumer_group_1\n          topic: topic-1\n          partition: 2\n          offset: 5\n          logEndOffset: 6\n          lag: 1\n          memberId: consumer_group_member3\n        metrics:\n          laggingPartitions: 0\n          activeConsumers: 3\n          unassignedPartitions: 0\n    ConsumerGroupOffsetResetExample:\n      description: Sample request to reset partition `0` of topic `my-topic` to offset\n        `4`\n      value:\n        offset: absolute\n        value: \"4\"\n        topics:\n        - topic: my-topic\n          partitions:\n          - 0\n    RecordProduceExample:\n      description: \"Sample record to produce a record to partition 1, including a\\\n        \\ custom header\"\n      value:\n        partition: 1\n        headers:\n          X-Custom-Header: header-value-1\n        value: \"{ \\\"examplekey\\\": \\\"example-value\\\" }\"\n  securitySchemes:\n    Bearer:\n      type: oauth2\n      description: Access token used with OAuth 2.0\n      flows:\n        clientCredentials:\n          tokenUrl: /token\n          scopes: {}\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/v1/consumer-groups: get: operation \"getConsumerGroups\": parameters: parse parameter \"size\": schema: parse default: expected type \"integer\", got \"string\""
}