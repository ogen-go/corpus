{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/decko-commons/decko"
		},
		"file": {
			"name": "output.yml",
			"size": 0,
			"path": "decko/lib/decko/swagger/output.yml",
			"byteSize": 7288,
			"content": "---\nopenapi: 3.0.0\ninfo:\n  description: |-\n    Decko organizes data into \"cards.\" Decko's API supports retrieval and alteration of card data.\n    To get the JSON responses as described below, do _any_ of the following:\n      1. Set the http Accept header to `application/json` in your request\n      2. Add `.json` to the url, or\n      3. Add `format=json` to the query params.\n  version: 0.8.0\n  title: Decko API\n  contact:\n    email: info@decko.org\n  license:\n    name: GPL-2.0\n    url: https://opensource.org/licenses/GPL-2.0\ntags:\n- name: create\n- name: read\n- name: update\n- name: delete\npaths:\n  \"/{mark}\":\n    get:\n      tags:\n      - read\n      summary: get specified view of card\n      description: |-\n        All read operations involve producing a _view_ of a card.\n        The request can come in several variants, eg\\:\n          1. /{mark}?view={view} (standard)\n          1. /{mark}/{view}\n          1. /?mark={mark}\u0026view={view}\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/view\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n    put:\n      tags:\n      - update\n      summary: update a card\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/card\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n    delete:\n      tags:\n      - delete\n      summary: delete a card\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\n  \"/\":\n    post:\n      tags:\n      - create\n      summary: create a card\n      parameters:\n      - \"$ref\": \"#/components/parameters/cardmark\"\n      - \"$ref\": \"#/components/parameters/card\"\n      - \"$ref\": \"#/components/parameters/success\"\n      responses:\n        200:\n          \"$ref\": \"#/components/responses/200\"\n        404:\n          \"$ref\": \"#/components/responses/404\"\nexternalDocs:\n  description: Find out more about Decko\n  url: http://decko.org\nservers:\n- url: http://decko.org\ncomponents:\n  parameters:\n    cardmark:\n      name: mark\n      in: path\n      required: true\n      description: |-\n        A card's \"mark\" can be a name, an id, or a codename. Prefix ids with a tilde (~) and codenames with a colon (\\:).\n        - **name:** Every card has a unique name. A name can have many variants. For example, `Berlin`, `berlin`, and `BERLIN!` all refer to the same card. The singularized, lower-cased, underscored variant of a name is called its \"key.\"\n        - **id:** Every card stored in the database has a unique numerical id. _Note: some cards, called 'virtual cards', are not stored in the database and therefore do not have a numerical id. For example, the name `Menu+*refer to` identifies a virtual Search card that finds all the cards that refer to the `Menu` card.Because it is based on patterns that apply to all cards with names ending in `+*refer to`, there is no need to store each instance of that pattern._\n        - **codename:** Some cards also have special identifiers called \"codenames\". Card names can be edited by Decko users. If these names were used directly in code, then renaming would break that code. Codename identifiers solve this problem by providing persistent readable identifiers. Only cards referred to directly in code have codenames.\n      schema:\n        type: string\n        enum:\n        - \"{name}\"\n        - \"~{id}\"\n        - \":{codename}\"\n    view:\n      name: view\n      in: query\n      required: false\n      schema:\n        type: string\n        enum:\n        - nucleus\n        - atom\n        - molecule\n        - id\n        - codename\n        - name\n        - key\n        - content\n        - type\n        default: molecule\n      description: The view determines the contents of the response JSON.  See the\n        corresponding schema for more details.\n    card:\n      name: card\n      in: header\n      schema:\n        type: object\n        properties:\n          name:\n            type: string\n          type:\n            type: string\n          content:\n            type: string\n      description: |-\n        The card parameter contains card field data, subcard field data. It follows RubyOnRails hash parameter pattern; for example, a card's name is represented as `card[name]=foobar`.\n        The most common fields are:\n        - **name:** Every card has a unique name.\n        - **type:** The card\\'s type.  Note that every card has a type, and the value of this field should be the type card\\'s name. You can alternatively use **type_id** or **type_code** with the type card\\s id\n          or mark respectively.\n\n        - **content:** The card\\'s content (in string form)\n        - **subcards** A hash that contains information about additional cards to be handled in the same transaction.  Each key is a card name, and each value is a card hash. Eg `cards[subcards][+color][content]=red`\n    success:\n      name: success\n      in: header\n      schema:\n        type: object\n      description: parameters hash to pass on to the GET request to which a successful\n        request will be redirected.  Eg, `success[mark]=mycardname`\n  schemas:\n    nucleus view:\n      name: nucleus view\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        url:\n          type: string\n        type:\n          type: string\n        codename:\n          type: string\n    atom view:\n      name: atom view\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int32\n        name:\n          type: string\n        url:\n          type: string\n        type:\n          type: string\n        codename:\n          type: string\n        content:\n          type: string\n    molecule view:\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        url:\n          type: string\n        type:\n          \"$ref\": \"#/components/schemas/nucleus%20view\"\n        codename:\n          type: string\n        content:\n          type: string\n        html_url:\n          type: string\n        items:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n        links:\n          type: array\n          items:\n            type: string\n        ancestors:\n          type: array\n          items:\n            \"$ref\": \"#/components/schemas/atom%20view\"\n    errors view:\n      type: object\n      properties:\n        error_status:\n          type: integer\n        error:\n          type: array\n          items:\n            type: string\n  responses:\n    200:\n      description: card data\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/molecule%20view\"\n    404:\n      description: Could not find the card requested.\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/errors%20view\"\n",
			"canonicalURL": "/github.com/decko-commons/decko@55043debbc55aa25fb28f86b7f87b334ece83cf1/-/blob/decko/lib/decko/swagger/output.yml",
			"externalURLs": [
				{
					"url": "https://github.com/decko-commons/decko/blob/55043debbc55aa25fb28f86b7f87b334ece83cf1/decko/lib/decko/swagger/output.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: at 1:3061: invalid name: \"atom view\" doesn't match \"^[a-zA-Z0-9.\\\\-_]+$\""
}