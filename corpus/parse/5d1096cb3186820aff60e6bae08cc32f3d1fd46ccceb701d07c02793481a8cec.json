{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/INFURA/eth2-comply"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "pkg/eth2spec/api/openapi.yaml",
			"byteSize": 323619,
			"content": "openapi: 3.0.3\ninfo:\n  contact:\n    name: Ethereum Github\n    url: https://github.com/ethereum/eth2.0-apis/issues\n  description: API specification for the beacon node, which enables users to query\n    and participate in Ethereum 2.0 phase 0 beacon chain.\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  title: Eth2 Beacon Node API\n  version: Dev - Eth2Spec v0.12.2\nservers:\n- url: '{server_url}'\n  variables:\n    server_url:\n      default: http://public-mainnet-node.ethereum.org/api\n      description: Beacon node API url\ntags:\n- description: Set of endpoints to query beacon chain.\n  name: Beacon\n- description: Endpoints to query chain configuration, specification, and fork schedules.\n  name: Config\n- description: Set of endpoints to debug chain and shouldn't be exposed publicly.\n  name: Debug\n- description: Set of endpoints to for event subscription.\n  name: Events\n- description: Endpoints to query node related informations\n  name: Node\n- description: Endpoints intended for validator clients\n  name: Validator\n- description: |\n    Minimal set of endpoints to enable a working validator implementation.\n\n    [Checkout validator flow](./validator-flow.md) to learn how to use this api.\n  name: ValidatorRequiredApi\npaths:\n  /eth/v1/beacon/genesis:\n    get:\n      description: Retrieve details of the chain's genesis which can be used to identify\n        chain.\n      operationId: getGenesis\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetGenesisResponse'\n          description: Request successful\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: Chain genesis info is not yet known\n          description: Chain genesis info is not yet known\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Retrieve details of the chain's genesis.\n      tags:\n      - Beacon\n      - ValidatorRequiredApi\n  /eth/v1/beacon/states/{state_id}/root:\n    get:\n      description: Calculates HashTreeRoot for state with given 'stateId'. If stateId\n        is root, same value will be returned.\n      operationId: getStateRoot\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStateRootResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              example:\n                code: 404\n                message: State not found\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n          description: State not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get state SSZ HashTreeRoot\n      tags:\n      - Beacon\n  /eth/v1/beacon/states/{state_id}/fork:\n    get:\n      description: Returns [Fork](https://github.com/ethereum/eth2.0-specs/blob/v0.11.1/specs/phase0/beacon-chain.md#fork)\n        object for state with given 'stateId'.\n      operationId: getStateFork\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStateForkResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: State not found\n          description: State not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get Fork object for requested state\n      tags:\n      - Beacon\n      - ValidatorRequiredApi\n  /eth/v1/beacon/states/{state_id}/finality_checkpoints:\n    get:\n      description: |\n        Returns finality checkpoints for state with given 'stateId'.\n        In case finality is not yet achieved, checkpoint should return epoch 0 and ZERO_HASH as root.\n      operationId: getStateFinalityCheckpoints\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: State not found\n          description: State not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get state finality checkpoints\n      tags:\n      - Beacon\n  /eth/v1/beacon/states/{state_id}/validators:\n    get:\n      description: Returns filterable list of validators with their balance, status\n        and index.\n      operationId: getStateValidators\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Either hex encoded public key (with 0x prefix) or validator index\n        explode: true\n        in: query\n        name: id\n        required: false\n        schema:\n          items:\n            description: Either hex encoded public key (with 0x prefix) or validator\n              index\n            type: string\n          maxItems: 30\n          type: array\n          uniqueItems: true\n        style: form\n      - description: '[Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)'\n        explode: true\n        in: query\n        name: status\n        required: false\n        schema:\n          items:\n            allOf:\n            - description: |\n                Possible statuses:\n                - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n                - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n                - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n                - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n                - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n                - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n                - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n                - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n                - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n                [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n              enum:\n              - pending_initialized\n              - pending_queued\n              - active_ongoing\n              - active_exiting\n              - active_slashed\n              - exited_unslashed\n              - exited_slashed\n              - withdrawal_possible\n              - withdrawal_done\n              example: active_ongoing\n              type: string\n            - enum:\n              - active\n              - pending\n              - exited\n              - withdrawal\n              type: string\n          type: array\n          uniqueItems: true\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStateValidatorsResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get validators from state\n      tags:\n      - Beacon\n  /eth/v1/beacon/states/{state_id}/validators/{validator_id}:\n    get:\n      description: Returns validator specified by state and id or public key along\n        with status and balance.\n      operationId: getStateValidator\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Either hex encoded public key (with 0x prefix) or validator index\n        explode: false\n        in: path\n        name: validator_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStateValidatorResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              examples:\n                StateNotFound:\n                  value:\n                    code: 404\n                    message: State not found\n                ValidatorNotFound:\n                  value:\n                    code: 404\n                    message: Validator not found\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Not Found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get validator from state by id\n      tags:\n      - Beacon\n      - ValidatorRequiredApi\n  /eth/v1/beacon/states/{state_id}/committees/{epoch}:\n    get:\n      description: Retrieves the committees for the given state at the given epoch.\n      operationId: getEpochCommittees\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: Epoch for which to calculate committees. Defaults to beacon state\n          epoch.\n        explode: false\n        in: path\n        name: epoch\n        required: true\n        schema:\n          allOf:\n          - example: \"1\"\n            type: string\n          - {}\n        style: simple\n      - description: Committee index\n        explode: true\n        in: query\n        name: index\n        required: false\n        schema:\n          allOf:\n          - example: \"1\"\n            type: string\n          - {}\n        style: form\n      - explode: true\n        in: query\n        name: slot\n        required: false\n        schema:\n          allOf:\n          - example: \"1\"\n            type: string\n          - {}\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetEpochCommitteesResponse'\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 400\n                    message: Slot doesn't belong in epoch\n          description: Slot doesn't belong in epoch\n        \"404\":\n          content:\n            application/json:\n              example:\n                code: 404\n                message: State not found\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n          description: State not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get all committees for epoch\n      tags:\n      - Beacon\n  /eth/v1/beacon/headers:\n    get:\n      description: Retrieves block headers matching given query. By default it will\n        fetch current head slot blocks.\n      operationId: getBlockHeaders\n      parameters:\n      - explode: true\n        in: query\n        name: slot\n        required: false\n        schema:\n          allOf:\n          - example: \"1\"\n            type: string\n          - {}\n        style: form\n      - explode: true\n        in: query\n        name: parent_root\n        required: false\n        schema:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - {}\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetBlockHeadersResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get block headers\n      tags:\n      - Beacon\n  /eth/v1/beacon/headers/{block_id}:\n    get:\n      description: Retrieves block header for given block id.\n      operationId: getBlockHeader\n      parameters:\n      - description: |\n          Block identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: block_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetBlockHeaderResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: Block not found\n          description: Block not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get block header\n      tags:\n      - Beacon\n  /eth/v1/beacon/blocks:\n    post:\n      description: Instructs the beacon node to broadcast a newly signed beacon block\n        to the beacon network, to be included in the beacon chain. The beacon node\n        is not required to validate the signed `BeaconBlock`, and a successful response\n        (20X) only indicates that the broadcast has been successful. The beacon node\n        is expected to integrate the new block into its state, and therefore validate\n        the block internally, however blocks which fail the validation are still broadcast\n        but a different status code is returned (202)\n      operationId: publishBlock\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object'\n        content:\n          application/json:\n            schema:\n              description: The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock)\n                object envelope from the Eth2.0 spec.\n              properties:\n                message:\n                  allOf:\n                  - properties:\n                      slot:\n                        allOf:\n                        - example: \"1\"\n                          type: string\n                        - description: The slot to which this block corresponds.\n                      proposer_index:\n                        allOf:\n                        - example: \"1\"\n                          type: string\n                        - description: Index of validator in validator registry.\n                      parent_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: The signing merkle root of the parent `BeaconBlock`.\n                      state_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: The tree hash merkle root of the `BeaconState`\n                            for the `BeaconBlock`.\n                    type: object\n                  - properties:\n                      body:\n                        description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody)\n                          object from the Eth2.0 spec.\n                        properties:\n                          randao_reveal:\n                            allOf:\n                            - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                            - description: The RanDAO reveal value provided by the\n                                validator.\n                          eth1_data:\n                            description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                              object from the Eth2.0 spec.\n                            properties:\n                              deposit_root:\n                                allOf:\n                                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                                - description: Root of the deposit tree.\n                              deposit_count:\n                                allOf:\n                                - example: \"1\"\n                                  type: string\n                                - description: Total number of deposits.\n                              block_hash:\n                                allOf:\n                                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                                - description: Ethereum 1.x block hash.\n                            type: object\n                          graffiti:\n                            pattern: ^0x[a-fA-F0-9]{64}$\n                            type: string\n                          proposer_slashings:\n                            items:\n                              description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n                                object from the Eth2.0 spec.\n                              properties:\n                                signed_header_1:\n                                  description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                                    object envelope from the Eth2.0 spec.\n                                  properties:\n                                    message:\n                                      allOf:\n                                      - properties:\n                                          slot:\n                                            allOf:\n                                            - example: \"1\"\n                                              type: string\n                                            - description: The slot to which this\n                                                block corresponds.\n                                          proposer_index:\n                                            allOf:\n                                            - example: \"1\"\n                                              type: string\n                                            - description: Index of validator in validator\n                                                registry.\n                                          parent_root:\n                                            allOf:\n                                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                            - description: The signing merkle root\n                                                of the parent `BeaconBlock`.\n                                          state_root:\n                                            allOf:\n                                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                            - description: The tree hash merkle root\n                                                of the `BeaconState` for the `BeaconBlock`.\n                                        type: object\n                                      - properties:\n                                          body_root:\n                                            allOf:\n                                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                            - description: The tree hash merkle root\n                                                of the `BeaconBlockBody` for the `BeaconBlock`\n                                        type: object\n                                      description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                        object from the Eth2.0 spec.\n                                    signature:\n                                      example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                      pattern: ^0x[a-fA-F0-9]{192}$\n                                      type: string\n                                  type: object\n                                signed_header_2:\n                                  description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                                    object envelope from the Eth2.0 spec.\n                                  properties:\n                                    message:\n                                      allOf:\n                                      - properties:\n                                          slot:\n                                            allOf:\n                                            - example: \"1\"\n                                              type: string\n                                            - description: The slot to which this\n                                                block corresponds.\n                                          proposer_index:\n                                            allOf:\n                                            - example: \"1\"\n                                              type: string\n                                            - description: Index of validator in validator\n                                                registry.\n                                          parent_root:\n                                            allOf:\n                                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                            - description: The signing merkle root\n                                                of the parent `BeaconBlock`.\n                                          state_root:\n                                            allOf:\n                                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                            - description: The tree hash merkle root\n                                                of the `BeaconState` for the `BeaconBlock`.\n                                        type: object\n                                      - properties:\n                                          body_root:\n                                            allOf:\n                                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                            - description: The tree hash merkle root\n                                                of the `BeaconBlockBody` for the `BeaconBlock`\n                                        type: object\n                                      description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                        object from the Eth2.0 spec.\n                                    signature:\n                                      example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                      pattern: ^0x[a-fA-F0-9]{192}$\n                                      type: string\n                                  type: object\n                              type: object\n                            type: array\n                          attester_slashings:\n                            items:\n                              description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n                                object from the Eth2.0 spec.\n                              properties:\n                                attestation_1:\n                                  description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                                    object from the Eth2.0 spec.\n                                  properties:\n                                    attesting_indices:\n                                      description: Attesting validator indices\n                                      items:\n                                        example: \"1\"\n                                        type: string\n                                      maxItems: 2048\n                                      type: array\n                                    signature:\n                                      allOf:\n                                      - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                        pattern: ^0x[a-fA-F0-9]{192}$\n                                        type: string\n                                      - description: The BLS signature of the `IndexedAttestation`,\n                                          created by the validator of the attestation.\n                                    data:\n                                      description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                        object from the Eth2.0 spec.\n                                      properties:\n                                        slot:\n                                          example: \"1\"\n                                          type: string\n                                        index:\n                                          example: \"1\"\n                                          type: string\n                                        beacon_block_root:\n                                          allOf:\n                                          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                            pattern: ^0x[a-fA-F0-9]{64}$\n                                            type: string\n                                          - description: LMD GHOST vote.\n                                        source:\n                                          description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                          properties:\n                                            epoch:\n                                              example: \"1\"\n                                              type: string\n                                            root:\n                                              example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                          type: object\n                                        target:\n                                          description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                          properties:\n                                            epoch:\n                                              example: \"1\"\n                                              type: string\n                                            root:\n                                              example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                          type: object\n                                      type: object\n                                  type: object\n                                attestation_2:\n                                  description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                                    object from the Eth2.0 spec.\n                                  properties:\n                                    attesting_indices:\n                                      description: Attesting validator indices\n                                      items:\n                                        example: \"1\"\n                                        type: string\n                                      maxItems: 2048\n                                      type: array\n                                    signature:\n                                      allOf:\n                                      - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                        pattern: ^0x[a-fA-F0-9]{192}$\n                                        type: string\n                                      - description: The BLS signature of the `IndexedAttestation`,\n                                          created by the validator of the attestation.\n                                    data:\n                                      description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                        object from the Eth2.0 spec.\n                                      properties:\n                                        slot:\n                                          example: \"1\"\n                                          type: string\n                                        index:\n                                          example: \"1\"\n                                          type: string\n                                        beacon_block_root:\n                                          allOf:\n                                          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                            pattern: ^0x[a-fA-F0-9]{64}$\n                                            type: string\n                                          - description: LMD GHOST vote.\n                                        source:\n                                          description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                          properties:\n                                            epoch:\n                                              example: \"1\"\n                                              type: string\n                                            root:\n                                              example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                          type: object\n                                        target:\n                                          description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                          properties:\n                                            epoch:\n                                              example: \"1\"\n                                              type: string\n                                            root:\n                                              example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                              pattern: ^0x[a-fA-F0-9]{64}$\n                                              type: string\n                                          type: object\n                                      type: object\n                                  type: object\n                              type: object\n                            type: array\n                          attestations:\n                            items:\n                              description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                                object from the Eth2.0 spec.\n                              properties:\n                                aggregation_bits:\n                                  description: Attester aggregation bits.\n                                  example: 0x01\n                                  pattern: ^0x[a-fA-F0-9]+$\n                                  type: string\n                                signature:\n                                  allOf:\n                                  - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                    pattern: ^0x[a-fA-F0-9]{192}$\n                                    type: string\n                                  - description: BLS aggregate signature.\n                                data:\n                                  description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                    object from the Eth2.0 spec.\n                                  properties:\n                                    slot:\n                                      example: \"1\"\n                                      type: string\n                                    index:\n                                      example: \"1\"\n                                      type: string\n                                    beacon_block_root:\n                                      allOf:\n                                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                        pattern: ^0x[a-fA-F0-9]{64}$\n                                        type: string\n                                      - description: LMD GHOST vote.\n                                    source:\n                                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                      properties:\n                                        epoch:\n                                          example: \"1\"\n                                          type: string\n                                        root:\n                                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                          pattern: ^0x[a-fA-F0-9]{64}$\n                                          type: string\n                                      type: object\n                                    target:\n                                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                      properties:\n                                        epoch:\n                                          example: \"1\"\n                                          type: string\n                                        root:\n                                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                          pattern: ^0x[a-fA-F0-9]{64}$\n                                          type: string\n                                      type: object\n                                  type: object\n                              type: object\n                            type: array\n                          deposits:\n                            items:\n                              description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit)\n                                object from the Eth2.0 spec.\n                              properties:\n                                proof:\n                                  description: Branch in the deposit tree.\n                                  items:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  maxItems: 32\n                                  minItems: 32\n                                  type: array\n                                data:\n                                  description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata)\n                                    object from the Eth2.0 spec.\n                                  properties:\n                                    pubkey:\n                                      description: The validator's BLS public key,\n                                        uniquely identifying them. _48-bytes, hex\n                                        encoded with 0x prefix, case insensitive._\n                                      example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                                      pattern: ^0x[a-fA-F0-9]{96}$\n                                      type: string\n                                    withdrawal_credentials:\n                                      allOf:\n                                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                        pattern: ^0x[a-fA-F0-9]{64}$\n                                        type: string\n                                      - description: The withdrawal credentials.\n                                    amount:\n                                      allOf:\n                                      - example: \"1\"\n                                        type: string\n                                      - description: Amount in Gwei.\n                                    signature:\n                                      allOf:\n                                      - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                        pattern: ^0x[a-fA-F0-9]{192}$\n                                        type: string\n                                      - description: Container self-signature.\n                                  type: object\n                              type: object\n                            type: array\n                          voluntary_exits:\n                            items:\n                              description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit)\n                                object from the Eth2.0 spec.\n                              properties:\n                                epoch:\n                                  allOf:\n                                  - example: \"1\"\n                                    type: string\n                                  - description: Minimum epoch for processing exit.\n                                validator_index:\n                                  allOf:\n                                  - example: \"1\"\n                                    type: string\n                                  - description: Index of the exiting validator.\n                              type: object\n                            type: array\n                        type: object\n                    type: object\n                  description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n                    object from the Eth2.0 spec.\n                signature:\n                  example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                  pattern: ^0x[a-fA-F0-9]{192}$\n                  type: string\n              type: object\n        description: The `SignedBeaconBlock` object composed of `BeaconBlock` object\n          (produced by beacon node) and validator signature.\n        required: true\n      responses:\n        \"200\":\n          description: The block was validated successfully and has been broadcast.\n            It has also been integrated into the beacon node's database.\n        \"202\":\n          description: The block failed validation, but was successfully broadcast\n            anyway. It was not integrated into the beacon node's database.\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_400'\n          description: Invalid request syntax.\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n        \"503\":\n          content:\n            application/json:\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request\n                  on that endpoint\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node is currently syncing, try again later.\n      summary: Publish a signed block.\n      tags:\n      - Beacon\n      - ValidatorRequiredApi\n  /eth/v1/beacon/blocks/{block_id}:\n    get:\n      description: Retrieves block details for given block id.\n      operationId: getBlock\n      parameters:\n      - description: |\n          Block identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: block_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetBlockResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: Block not found\n          description: Block not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get block\n      tags:\n      - Beacon\n  /eth/v1/beacon/blocks/{block_id}/root:\n    get:\n      description: Retrieves hashTreeRoot of BeaconBlock/BeaconBlockHeader\n      operationId: getBlockRoot\n      parameters:\n      - description: |\n          Block identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: block_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetBlockRootResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: Block not found\n          description: Block not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get block root\n      tags:\n      - Beacon\n  /eth/v1/beacon/blocks/{block_id}/attestations:\n    get:\n      description: Retrieves attestation included in requested block.\n      operationId: getBlockAttestations\n      parameters:\n      - description: |\n          Block identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: block_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetBlockAttestationsResponse'\n          description: Success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: Block not found\n          description: Block not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get block attestations\n      tags:\n      - Beacon\n  /eth/v1/beacon/pool/attestations:\n    get:\n      description: Retrieves attestations known by the node but not necessarily incorporated\n        into any block\n      operationId: getPoolAttestations\n      parameters:\n      - explode: true\n        in: query\n        name: slot\n        required: false\n        schema:\n          example: \"1\"\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: committee_index\n        required: false\n        schema:\n          example: \"1\"\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetBlockAttestationsResponse'\n          description: Successful response\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get Attestations from operations pool\n      tags:\n      - Beacon\n    post:\n      description: Submits Attestation object to node. If attestation passes all validation\n        constraints, node MUST publish attestation on appropriate subnet.\n      operationId: submitPoolAttestations\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object_1'\n        content:\n          application/json:\n            schema:\n              description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                object from the Eth2.0 spec.\n              properties:\n                aggregation_bits:\n                  description: Attester aggregation bits.\n                  example: 0x01\n                  pattern: ^0x[a-fA-F0-9]+$\n                  type: string\n                signature:\n                  allOf:\n                  - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                    pattern: ^0x[a-fA-F0-9]{192}$\n                    type: string\n                  - description: BLS aggregate signature.\n                data:\n                  $ref: '#/components/schemas/GetBlockAttestationsResponse_data'\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Attestation is stored in pool and broadcast on appropriate\n            subnet\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 400\n                    message: Invalid attestation, it will never pass validation so\n                      it's rejected\n          description: Invalid attestation\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Submit Attestation object to node\n      tags:\n      - Beacon\n      - ValidatorRequiredApi\n  /eth/v1/beacon/pool/atttester_slashings:\n    get:\n      description: Retrieves attester slashings known by the node but not necessarily\n        incorporated into any block\n      operationId: getPoolAttesterSlashings\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse'\n          description: Successful response\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get AttesterSlashings from operations pool\n      tags:\n      - Beacon\n    post:\n      description: Submits AttesterSlashing object to node's pool and if passes validation\n        node MUST broadcast it to network.\n      operationId: submitPoolAttesterSlashings\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object_2'\n        content:\n          application/json:\n            schema:\n              description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n                object from the Eth2.0 spec.\n              properties:\n                attestation_1:\n                  $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n                attestation_2:\n                  $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 400\n                    message: Invalid attester slashing, it will never pass validation\n                      so it's rejected\n          description: Invalid attester slashing\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Submit AttesterSlashing object to node's pool\n      tags:\n      - Beacon\n  /eth/v1/beacon/pool/proposer_slashings:\n    get:\n      description: Retrieves proposer slashings known by the node but not necessarily\n        incorporated into any block\n      operationId: getPoolProposerSlashings\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPoolProposerSlashingsResponse'\n          description: Successful response\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get ProposerSlashings from operations pool\n      tags:\n      - Beacon\n    post:\n      description: Submits ProposerSlashing object to node's pool and if passes validation  node\n        MUST broadcast it to network.\n      operationId: submitPoolProposerSlashings\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object_3'\n        content:\n          application/json:\n            schema:\n              description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n                object from the Eth2.0 spec.\n              properties:\n                signed_header_1:\n                  $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n                signed_header_2:\n                  $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 400\n                    message: Invalid proposer slashing, it will never pass validation\n                      so it's rejected\n          description: Invalid proposer slashing\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Submit ProposerSlashing object to node's pool\n      tags:\n      - Beacon\n  /eth/v1/beacon/pool/voluntary_exits:\n    get:\n      description: Retrieves voluntary exits known by the node but not necessarily\n        incorporated into any block\n      operationId: getPoolVoluntaryExits\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse'\n          description: Successful response\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get SignedVoluntaryExit from operations pool\n      tags:\n      - Beacon\n    post:\n      description: Submits SignedVoluntaryExit object to node's pool and if passes\n        validation node MUST broadcast it to network.\n      operationId: submitPoolVoluntaryExit\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object_4'\n        content:\n          application/json:\n            schema:\n              description: The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit)\n                object from the Eth2.0 spec.\n              properties:\n                message:\n                  $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse_message'\n                signature:\n                  example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                  pattern: ^0x[a-fA-F0-9]{192}$\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          description: Voluntary exit is stored in node and broadcasted to network\n        \"400\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 400\n                    message: Invalid voluntary exit, it will never pass validation\n                      so it's rejected\n          description: Invalid voluntary exit\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Submit SignedVoluntaryExit object to node's pool\n      tags:\n      - Beacon\n  /eth/v1/debug/beacon/states/{state_id}:\n    get:\n      description: Returns full BeaconState object for given stateId.\n      operationId: getState\n      parameters:\n      - description: |\n          State identifier.\n          Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n        example: head\n        explode: false\n        in: path\n        name: state_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetStateResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get full BeaconState object\n      tags:\n      - Debug\n  /eth/v1/debug/beacon/heads:\n    get:\n      description: Retrieves all possible chain heads (leaves of fork choice tree).\n      operationId: getDebugChainHeads\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDebugChainHeadsResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get fork choice leaves\n      tags:\n      - Debug\n  /eth/v1/node/identity:\n    get:\n      description: Retrieves data about the node's network presence\n      operationId: getNetworkIdentity\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetNetworkIdentityResponse'\n          description: Request successful\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get node network identity\n      tags:\n      - Node\n  /eth/v1/node/peers:\n    get:\n      description: Retrieves data about the node's network peers\n      operationId: getPeers\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPeersResponse'\n          description: Request successful\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get node network peers\n      tags:\n      - Node\n  /eth/v1/node/peers/{peer_id}:\n    get:\n      description: Retrieves data about the given peer\n      operationId: getPeer\n      parameters:\n      - explode: false\n        in: path\n        name: peer_id\n        required: true\n        schema:\n          description: Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetPeerResponse'\n          description: Request successful\n        \"404\":\n          content:\n            application/json:\n              schema:\n                allOf:\n                - properties:\n                    code:\n                      description: Either specific error code in case of invalid request\n                        or http status code\n                      example: 404\n                      type: number\n                    message:\n                      description: Message describing error\n                      type: string\n                    stacktraces:\n                      description: Optional stacktraces, sent when node is in debug\n                        mode\n                      items:\n                        type: string\n                      type: array\n                  type: object\n                - example:\n                    code: 404\n                    message: Peer not found\n          description: Peer not found\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get peer\n      tags:\n      - Node\n  /eth/v1/node/version:\n    get:\n      description: Requests that the beacon node identify information about its implementation\n        in a format similar to a  [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3)\n        field.\n      operationId: getNodeVersion\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetVersionResponse'\n          description: Request successful\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get version string of the running beacon node.\n      tags:\n      - Node\n  /eth/v1/node/syncing:\n    get:\n      description: Requests the beacon node to describe if it's currently syncing\n        or not, and if it is, what block it is up to.\n      operationId: getSyncingStatus\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSyncingStatusResponse'\n          description: Request successful\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get node syncing status\n      tags:\n      - Node\n      - ValidatorRequiredApi\n  /eth/v1/node/health:\n    get:\n      description: Returns node health status in http status codes. Useful for load\n        balancers.\n      operationId: getHealth\n      responses:\n        \"200\":\n          description: Node is ready\n        \"206\":\n          description: Node is syncing but can serve incomplete data\n        \"503\":\n          description: Node not initialized or having issues\n      summary: Get health check\n      tags:\n      - Node\n  /eth/v1/config/fork_schedule:\n    get:\n      description: Retrieve all scheduled upcoming forks this node is aware of.\n      operationId: getForkSchedule\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetForkScheduleResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get scheduled upcoming forks.\n      tags:\n      - Config\n  /eth/v1/config/spec:\n    get:\n      description: |\n        Retrieve specification configuration (without Phase 1 params) used on this node.\n        [Specification params list](https://github.com/ethereum/eth2.0-specs/blob/v0.11.1/configs/mainnet.yaml)\n\n        Values are returned with following format:\n          - any value starting with 0x in the spec is returned as a hex string\n          - all other values are returned as number\n      operationId: getSpec\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetSpecResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get spec params.\n      tags:\n      - Config\n  /eth/v1/config/deposit_contract:\n    get:\n      description: Retrieve deposit contract address and genesis fork version.\n      operationId: getDepositContract\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetDepositContractResponse'\n          description: Success\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get deposit contract address.\n      tags:\n      - Config\n  /eth/v1/validator/duties/attester/{epoch}:\n    get:\n      description: |-\n        Requests the beacon node to provide a set of attestation duties, which should be performed by validators, for a particular epoch.\n        Duties should only need to be checked once per epoch, however a chain reorganization (of \u003e MIN_SEED_LOOKAHEAD epochs) could occur, resulting in a change of duties. For full safety, you should monitor chain reorganizations events.\n      operationId: getAttesterDuties\n      parameters:\n      - description: Should only be allowed 1 epoch ahead\n        explode: false\n        in: path\n        name: epoch\n        required: true\n        schema:\n          example: \"1\"\n          type: string\n        style: simple\n      - description: Validator index\n        explode: true\n        in: query\n        name: index\n        required: true\n        schema:\n          items:\n            example: \"1\"\n            type: string\n          maxItems: 100\n          minItems: 1\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAttesterDutiesResponse'\n          description: Success response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidEpoch:\n                  value:\n                    code: 400\n                    message: Cannot get attester duties for X epoch ahead\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n        \"503\":\n          content:\n            application/json:\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request\n                  on that endpoint\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node is currently syncing, try again later.\n      summary: Get attester duties\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/validator/duties/proposer/{epoch}:\n    get:\n      description: Request beacon node to provide all validators that are suppose\n        to propose block in given epoch\n      operationId: getProposerDuties\n      parameters:\n      - explode: false\n        in: path\n        name: epoch\n        required: true\n        schema:\n          example: \"1\"\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetProposerDutiesResponse'\n          description: Success response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidEpoch:\n                  value:\n                    code: 400\n                    message: Cannot get attester duties for X epoch ahead\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n        \"503\":\n          content:\n            application/json:\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request\n                  on that endpoint\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node is currently syncing, try again later.\n      summary: Get block proposers duties\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/validator/blocks/{slot}:\n    get:\n      description: Requests a beacon node to produce a valid block, which can then\n        be signed by a validator.\n      operationId: produceBlock\n      parameters:\n      - description: The slot for which the block should be proposed.\n        explode: false\n        in: path\n        name: slot\n        required: true\n        schema:\n          example: \"1\"\n          type: string\n        style: simple\n      - description: The validator's randao reveal value.\n        explode: true\n        in: query\n        name: randao_reveal\n        required: true\n        schema:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n        style: form\n      - description: Arbitrary data validator wants to include in block.\n        explode: true\n        in: query\n        name: graffiti\n        required: false\n        schema:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          format: hex\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProduceBlockResponse'\n          description: Success response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidRequest:\n                  value:\n                    code: 400\n                    message: Invalid request to produce a block\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Invalid block production request\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n        \"503\":\n          content:\n            application/json:\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request\n                  on that endpoint\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node is currently syncing, try again later.\n      summary: Produce a new block, without signature.\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/validator/attestation_data:\n    get:\n      description: Requests that the beacon node produce an AttestationData.\n      operationId: produceAttestationData\n      parameters:\n      - description: The slot for which an attestation data should be created.\n        explode: true\n        in: query\n        name: slot\n        required: true\n        schema:\n          example: \"1\"\n          type: string\n        style: form\n      - description: The committee index for which an attestation data should be created.\n        explode: true\n        in: query\n        name: committee_index\n        required: true\n        schema:\n          example: \"1\"\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProduceAttestationDataResponse'\n          description: Success response\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_400'\n          description: Invalid request syntax.\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n        \"503\":\n          content:\n            application/json:\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request\n                  on that endpoint\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node is currently syncing, try again later.\n      summary: Produce an attestation data\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/validator/aggregate_attestation:\n    get:\n      description: Aggregates all attestations matching given attestation data root\n        and slot\n      operationId: getAggregatedAttestation\n      parameters:\n      - description: HashTreeRoot of AttestationData that validator want's aggregated\n        explode: true\n        in: query\n        name: attestation_data_root\n        required: true\n        schema:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        style: form\n      - explode: true\n        in: query\n        name: slot\n        required: true\n        schema:\n          example: \"1\"\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetAggregatedAttestationResponse'\n          description: Returns aggregated `Attestation` object with same `AttestationData`\n            root.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                NotAggregator:\n                  value:\n                    code: 403\n                    message: Beacon node was not assigned to aggregate on that subnet.\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Invalid request\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Get aggregated attestation\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/validator/aggregate_and_proofs:\n    post:\n      description: Verifies given aggregate and proof and publishes it on appropriate\n        gossipsub topic.\n      operationId: publishAggregateAndProof\n      requestBody:\n        $ref: '#/components/requestBodies/inline_object_5'\n        content:\n          application/json:\n            schema:\n              properties:\n                data:\n                  items:\n                    description: The [`SignedAggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#signedaggregateandproof)\n                      object\n                    properties:\n                      message:\n                        allOf:\n                        - description: The [`AggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#aggregateandproof)\n                            without selection_proof\n                          properties:\n                            aggregator_index:\n                              example: \"1\"\n                              type: string\n                            attestation:\n                              description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                                object from the Eth2.0 spec.\n                              properties:\n                                aggregation_bits:\n                                  description: Attester aggregation bits.\n                                  example: 0x01\n                                  pattern: ^0x[a-fA-F0-9]+$\n                                  type: string\n                                signature:\n                                  allOf:\n                                  - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                    pattern: ^0x[a-fA-F0-9]{192}$\n                                    type: string\n                                  - description: BLS aggregate signature.\n                                data:\n                                  description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                    object from the Eth2.0 spec.\n                                  properties:\n                                    slot:\n                                      example: \"1\"\n                                      type: string\n                                    index:\n                                      example: \"1\"\n                                      type: string\n                                    beacon_block_root:\n                                      allOf:\n                                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                        pattern: ^0x[a-fA-F0-9]{64}$\n                                        type: string\n                                      - description: LMD GHOST vote.\n                                    source:\n                                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                      properties:\n                                        epoch:\n                                          example: \"1\"\n                                          type: string\n                                        root:\n                                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                          pattern: ^0x[a-fA-F0-9]{64}$\n                                          type: string\n                                      type: object\n                                    target:\n                                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                      properties:\n                                        epoch:\n                                          example: \"1\"\n                                          type: string\n                                        root:\n                                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                          pattern: ^0x[a-fA-F0-9]{64}$\n                                          type: string\n                                      type: object\n                                  type: object\n                              type: object\n                          type: object\n                        - properties:\n                            selection_proof:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                      signature:\n                        example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                        pattern: ^0x[a-fA-F0-9]{192}$\n                        type: string\n                  type: array\n              type: object\n      responses:\n        \"200\":\n          description: Successful response\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_400'\n          description: Invalid request syntax.\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Publish aggregate and proof\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/validator/beacon_committee_subscriptions:\n    post:\n      description: |\n        After beacon node receives this request,\n        search using discv5 for peers related to this subnet\n        and replace current peers with those ones if necessary\n        If validator `is_aggregator`, beacon node must:\n        - announce subnet topic subscription on gossipsub\n        - aggregate attestations received on that subnet\n      operationId: prepareBeaconCommitteeSubnet\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: '#/components/schemas/InlineObject'\n              title: SubscribeToBeaconCommitteeSubnetRequestBody\n              type: array\n      responses:\n        \"200\":\n          description: |\n            Slot signature is valid and beacon node has prepared the attestation subnet.\n\n            Note that, we cannot be certain Beacon node will find peers for that subnet for various reasons,\"\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_400'\n          description: Invalid request syntax.\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n        \"503\":\n          content:\n            application/json:\n              example:\n                code: 503\n                message: Beacon node is currently syncing and not serving request\n                  on that endpoint\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node is currently syncing, try again later.\n      summary: Signal beacon node to prepare for a committee subnet\n      tags:\n      - ValidatorRequiredApi\n      - Validator\n  /eth/v1/events:\n    get:\n      description: |\n        Provides endpoint to subscribe to beacon node Server-Sent-Events stream.\n        Consumers should use [eventsource](https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface)\n        implementation to listen on those events.\n      operationId: eventstream\n      parameters:\n      - description: Event types to subscribe to\n        explode: true\n        in: query\n        name: topics\n        required: true\n        schema:\n          items:\n            enum:\n            - head\n            - block\n            - attestation\n            - voluntary_exit\n            - finalized_checkpoint\n            - chain_reorg\n            type: string\n            uniqueItems: true\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            text/event-stream:\n              examples:\n                head:\n                  description: The node has finished processing, resulting in a new\n                    head\n                  value: |\n                    event: head\\n\n                    data: \"{\\\"slot\\\": \\\"10\\\", \\\"block\\\": \\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"state\\\":\\\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\\\", \\\"epoch_transition\\\": false}\"\\n\n                    \\n\n                block:\n                  description: The node has received a block (from P2P or API)\n                  value: |\n                    event: block\\n\n                    data: \"{\\\"slot\\\": \\\"10\\\", \\\"block\\\": \\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\"}\"\\n\n                    \\n\n                attestation:\n                  description: The node has received an attestation (from P2P or API)\n                  value: |\n                    event: attestation\\n\n                    data: \"{\\n      \\\"aggregation_bits\\\": \\\"0x01\\\",\\n      \\\"signature\\\": \\\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\\\",\\n      \\\"data\\\": {\\n        \\\"slot\\\": \\\"1\\\",\\n        \\\"index\\\": \\\"1\\\",\\n        \\\"beacon_block_root\\\": \\\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\\\",\\n        \\\"source\\\": {\\n          \\\"epoch\\\": \\\"1\\\",\\n          \\\"root\\\": \\\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\\\"\\n        },\\n        \\\"target\\\": {\\n          \\\"epoch\\\": \\\"1\\\",\\n          \\\"root\\\": \\\"0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\\\"\\n        }\\n      }\\n    }\"\\n\n                    \\n\n                voluntary_exit:\n                  description: The node has received a voluntary exit (from P2P or\n                    API)\n                  value: |\n                    event: voluntary_exit\\n\n                    data: \"{\\n      \\\"message\\\": {\\n        \\\"epoch\\\": \\\"1\\\",\\n        \\\"validator_index\\\": \\\"1\\\"\\n      },\\n      \\\"signature\\\": \\\"0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\\\"\\n    }\"\\n\n                    \\n\n                finalized_checkpoint:\n                  description: Finalized checkpoint has been updated\n                  value: |\n                    event: finalized_checkpoint\\n\n                    data: \"{\\\"block\\\":\\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"state\\\": \\\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\\\", \\\"epoch\\\": \\\"2\\\" }\"\\n\n                    \\n\n                chain_reorg:\n                  description: The node has reorganized its chain\n                  value: |\n                    event: chain_reorg\\n\n                    data: \"{\\\"slot\\\":\\\"200\\\", \\\"depth\\\": \\\"50\\\", \\\"old_head_block\\\": \\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"new_head_block\\\": \\\"0x76262e91970d375a19bfe8a867288d7b9cde43c8635f598d93d39d041706fc76\\\", \\\"old_head_state\\\":\\\"0x9a2fefd2fdb57f74993c7780ea5b9030d2897b615b89f808011ca5aebed54eaf\\\", \\\"new_state_head\\\": \\\"0x600e852a08c1200654ddf11025f1ceacb3c2e74bdd5c630cde0838b2591b69f9\\\", \\\"epoch\\\": \\\"2\\\" }\"\\n\n                    \\n\n              schema:\n                description: https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format\n                type: string\n          description: Opened SSE stream.\n        \"500\":\n          content:\n            application/json:\n              example:\n                code: 500\n                message: Internal server error\n              schema:\n                $ref: '#/components/schemas/inline_response_500'\n          description: Beacon node internal error.\n      summary: Subscribe to beacon node events\n      tags:\n      - Events\ncomponents:\n  parameters:\n    StateId:\n      description: |\n        State identifier.\n        Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \"justified\", \\\u003cslot\\\u003e, \\\u003chex encoded stateRoot with 0x prefix\\\u003e.\n      example: head\n      explode: false\n      in: path\n      name: state_id\n      required: true\n      schema:\n        type: string\n      style: simple\n    BlockId:\n      description: |\n        Block identifier.\n        Can be one of: \"head\" (canonical head in node's view), \"genesis\", \"finalized\", \\\u003cslot\\\u003e, \\\u003chex encoded blockRoot with 0x prefix\\\u003e.\n      example: head\n      explode: false\n      in: path\n      name: block_id\n      required: true\n      schema:\n        type: string\n      style: simple\n  requestBodies:\n    inline_object_1:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object_1'\n      required: true\n    inline_object:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object'\n      required: true\n    inline_object_5:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object_5'\n    inline_object_4:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object_4'\n      required: true\n    inline_object_3:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object_3'\n      required: true\n    inline_object_2:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/inline_object_2'\n      required: true\n  responses:\n    InvalidRequest:\n      content:\n        application/json:\n          schema:\n            properties:\n              code:\n                description: Either specific error code in case of invalid request\n                  or http status code\n                example: 400\n                type: number\n              message:\n                description: Message describing error\n                type: string\n              stacktraces:\n                description: Optional stacktraces, sent when node is in debug mode\n                items:\n                  type: string\n                type: array\n            type: object\n      description: Invalid request syntax.\n    InternalError:\n      content:\n        application/json:\n          example:\n            code: 500\n            message: Internal server error\n          schema:\n            properties:\n              code:\n                description: Either specific error code in case of invalid request\n                  or http status code\n                example: 404\n                type: number\n              message:\n                description: Message describing error\n                type: string\n              stacktraces:\n                description: Optional stacktraces, sent when node is in debug mode\n                items:\n                  type: string\n                type: array\n            type: object\n      description: Beacon node internal error.\n    CurrentlySyncing:\n      content:\n        application/json:\n          example:\n            code: 503\n            message: Beacon node is currently syncing and not serving request on that\n              endpoint\n          schema:\n            properties:\n              code:\n                description: Either specific error code in case of invalid request\n                  or http status code\n                example: 404\n                type: number\n              message:\n                description: Message describing error\n                type: string\n              stacktraces:\n                description: Optional stacktraces, sent when node is in debug mode\n                items:\n                  type: string\n                type: array\n            type: object\n      description: Beacon node is currently syncing, try again later.\n  schemas:\n    BeaconState:\n      description: The [`BeaconState`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n        object from the Eth2.0 spec.\n      properties:\n        genesis_time:\n          example: \"1\"\n          type: string\n        genesis_validators_root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        slot:\n          example: \"1\"\n          type: string\n        fork:\n          $ref: '#/components/schemas/GetStateForkResponse_data'\n        latest_block_header:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconBlockBody`\n                    for the `BeaconBlock`\n            type: object\n          description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n            object from the Eth2.0 spec.\n        block_roots:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 8192\n          minItems: 8192\n          type: array\n        state_roots:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 8192\n          minItems: 8192\n          type: array\n        historical_roots:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 16777216\n          type: array\n        eth1_data:\n          $ref: '#/components/schemas/GetStateResponse_data_eth1_data'\n        eth1_data_votes:\n          items:\n            allOf:\n            - description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                object from the Eth2.0 spec.\n              properties:\n                deposit_root:\n                  allOf:\n                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  - description: Root of the deposit tree.\n                deposit_count:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Total number of deposits.\n                block_hash:\n                  allOf:\n                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  - description: Ethereum 1.x block hash.\n              type: object\n          maxItems: 1024\n          type: array\n        eth1_deposit_index:\n          example: \"1\"\n          type: string\n        validators:\n          items:\n            allOf:\n            - properties:\n                pubkey:\n                  description: The validator's BLS public key, uniquely identifying\n                    them. _48-bytes, hex encoded with 0x prefix, case insensitive._\n                  example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                  pattern: ^0x[a-fA-F0-9]{96}$\n                  type: string\n                withdrawal_credentials:\n                  allOf:\n                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  - description: Root of withdrawal credentials\n                effective_balance:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Balance at stake in Gwei.\n                slashed:\n                  description: Was validator slashed (not longer active).\n                  example: false\n                  type: boolean\n                activation_eligibility_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: When criteria for activation were met.\n                activation_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH'\n                      if not activated\n                exit_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if\n                      not exited.\n                withdrawable_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH'\n                      if not defined\n              type: object\n          type: array\n        balances:\n          description: Validator balances in gwei\n          items:\n            allOf:\n            - example: \"1\"\n              type: string\n          type: array\n        randao_mixes:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 65536\n          minItems: 65536\n          type: array\n        slashings:\n          description: Per-epoch sums of slashed effective balances\n          items:\n            allOf:\n            - example: \"1\"\n              type: string\n          maxItems: 8192\n          minItems: 8192\n          type: array\n        previous_epoch_attestations:\n          items:\n            allOf:\n            - description: The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation)\n                object from the Eth2.0 spec.\n              properties:\n                aggregation_bits:\n                  description: Attester aggregation bits.\n                  pattern: ^0x[a-fA-F0-9]+$\n                  type: string\n                data:\n                  description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                    object from the Eth2.0 spec.\n                  properties:\n                    slot:\n                      example: \"1\"\n                      type: string\n                    index:\n                      example: \"1\"\n                      type: string\n                    beacon_block_root:\n                      allOf:\n                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                        pattern: ^0x[a-fA-F0-9]{64}$\n                        type: string\n                      - description: LMD GHOST vote.\n                    source:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                    target:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                  type: object\n                inclusion_delay:\n                  example: \"1\"\n                  type: string\n                proposer_index:\n                  example: \"1\"\n                  type: string\n              type: object\n          type: array\n        current_epoch_attestations:\n          items:\n            allOf:\n            - description: The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation)\n                object from the Eth2.0 spec.\n              properties:\n                aggregation_bits:\n                  description: Attester aggregation bits.\n                  pattern: ^0x[a-fA-F0-9]+$\n                  type: string\n                data:\n                  description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                    object from the Eth2.0 spec.\n                  properties:\n                    slot:\n                      example: \"1\"\n                      type: string\n                    index:\n                      example: \"1\"\n                      type: string\n                    beacon_block_root:\n                      allOf:\n                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                        pattern: ^0x[a-fA-F0-9]{64}$\n                        type: string\n                      - description: LMD GHOST vote.\n                    source:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                    target:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                  type: object\n                inclusion_delay:\n                  example: \"1\"\n                  type: string\n                proposer_index:\n                  example: \"1\"\n                  type: string\n              type: object\n          type: array\n        justification_bits:\n          description: Bit set for every recent justified epoch\n          example: 0x01\n          pattern: ^0x[a-fA-F0-9]+$\n          type: string\n        previous_justified_checkpoint:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        current_justified_checkpoint:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        finalized_checkpoint:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n      type: object\n    BeaconBlock:\n      allOf:\n      - $ref: '#/components/schemas/BeaconBlock_allOf'\n      - $ref: '#/components/schemas/BeaconBlock_allOf_1'\n      description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n        object from the Eth2.0 spec.\n    SignedBeaconBlock:\n      description: The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock)\n        object envelope from the Eth2.0 spec.\n      properties:\n        message:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body:\n                description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody)\n                  object from the Eth2.0 spec.\n                properties:\n                  randao_reveal:\n                    allOf:\n                    - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                      pattern: ^0x[a-fA-F0-9]{192}$\n                      type: string\n                    - description: The RanDAO reveal value provided by the validator.\n                  eth1_data:\n                    description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                      object from the Eth2.0 spec.\n                    properties:\n                      deposit_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Root of the deposit tree.\n                      deposit_count:\n                        allOf:\n                        - example: \"1\"\n                          type: string\n                        - description: Total number of deposits.\n                      block_hash:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Ethereum 1.x block hash.\n                    type: object\n                  graffiti:\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  proposer_slashings:\n                    items:\n                      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        signed_header_1:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                        signed_header_2:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                      type: object\n                    type: array\n                  attester_slashings:\n                    items:\n                      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        attestation_1:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                        attestation_2:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  attestations:\n                    items:\n                      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                        object from the Eth2.0 spec.\n                      properties:\n                        aggregation_bits:\n                          description: Attester aggregation bits.\n                          example: 0x01\n                          pattern: ^0x[a-fA-F0-9]+$\n                          type: string\n                        signature:\n                          allOf:\n                          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                            pattern: ^0x[a-fA-F0-9]{192}$\n                            type: string\n                          - description: BLS aggregate signature.\n                        data:\n                          description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            slot:\n                              example: \"1\"\n                              type: string\n                            index:\n                              example: \"1\"\n                              type: string\n                            beacon_block_root:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: LMD GHOST vote.\n                            source:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                            target:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  deposits:\n                    items:\n                      description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        proof:\n                          description: Branch in the deposit tree.\n                          items:\n                            allOf:\n                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                              pattern: ^0x[a-fA-F0-9]{64}$\n                              type: string\n                          maxItems: 32\n                          minItems: 32\n                          type: array\n                        data:\n                          description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            pubkey:\n                              description: The validator's BLS public key, uniquely\n                                identifying them. _48-bytes, hex encoded with 0x prefix,\n                                case insensitive._\n                              example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                              pattern: ^0x[a-fA-F0-9]{96}$\n                              type: string\n                            withdrawal_credentials:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: The withdrawal credentials.\n                            amount:\n                              allOf:\n                              - example: \"1\"\n                                type: string\n                              - description: Amount in Gwei.\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: Container self-signature.\n                          type: object\n                      type: object\n                    type: array\n                  voluntary_exits:\n                    items:\n                      description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        epoch:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Minimum epoch for processing exit.\n                        validator_index:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Index of the exiting validator.\n                      type: object\n                    type: array\n                type: object\n            type: object\n          description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n            object from the Eth2.0 spec.\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n      type: object\n    SignedBeaconBlockHeader:\n      description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n        object envelope from the Eth2.0 spec.\n      properties:\n        message:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconBlockBody`\n                    for the `BeaconBlock`\n            type: object\n          description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n            object from the Eth2.0 spec.\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n      type: object\n    ValidatorResponse:\n      properties:\n        index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Index of validator in validator registry.\n        balance:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Current validator balance in gwei.\n        status:\n          description: |\n            Possible statuses:\n            - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n            - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n            - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n            - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n            - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n            - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n            - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n            - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n            - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n            [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n          enum:\n          - pending_initialized\n          - pending_queued\n          - active_ongoing\n          - active_exiting\n          - active_slashed\n          - exited_unslashed\n          - exited_slashed\n          - withdrawal_possible\n          - withdrawal_done\n          example: active_ongoing\n          type: string\n        validator:\n          $ref: '#/components/schemas/GetStateValidatorsResponse_validator'\n      type: object\n    ValidatorStatus:\n      description: |\n        Possible statuses:\n        - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n        - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n        - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n        - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n        - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n        - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n        - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n        - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n        - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n        [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n      enum:\n      - pending_initialized\n      - pending_queued\n      - active_ongoing\n      - active_exiting\n      - active_slashed\n      - exited_unslashed\n      - exited_slashed\n      - withdrawal_possible\n      - withdrawal_done\n      example: active_ongoing\n      type: string\n    Committee:\n      description: Group of validators assigned to attest at specific slot and that\n        have the same committee index (shard in phase 1)\n      properties:\n        index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Committee index at a slot\n        slot:\n          example: \"1\"\n          type: string\n        validators:\n          description: List of validator indices assigned to this committee\n          items:\n            example: \"1\"\n            type: string\n          type: array\n      type: object\n    AttesterSlashing:\n      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n        object from the Eth2.0 spec.\n      properties:\n        attestation_1:\n          $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n        attestation_2:\n          $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n      type: object\n    ProposerSlashing:\n      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n        object from the Eth2.0 spec.\n      properties:\n        signed_header_1:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n        signed_header_2:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n      type: object\n    SignedVoluntaryExit:\n      description: The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit)\n        object from the Eth2.0 spec.\n      properties:\n        message:\n          $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse_message'\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n      type: object\n    AttesterDuty:\n      properties:\n        pubkey:\n          description: The validator's BLS public key, uniquely identifying them.\n            _48-bytes, hex encoded with 0x prefix, case insensitive._\n          example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          pattern: ^0x[a-fA-F0-9]{96}$\n          type: string\n        committee_index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The committee index\n        committee_length:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Number of validators in committee\n        validator_committee_index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Index of validator in committee\n        slot:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The slot at which the validator must attest.\n      type: object\n    ProposerDuty:\n      properties:\n        pubkey:\n          description: The validator's BLS public key, uniquely identifying them.\n            _48-bytes, hex encoded with 0x prefix, case insensitive._\n          example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          pattern: ^0x[a-fA-F0-9]{96}$\n          type: string\n        slot:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The slot at which the validator must propose block.\n      type: object\n    SignedAggregateAndProof:\n      description: The [`SignedAggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#signedaggregateandproof)\n        object\n      properties:\n        message:\n          allOf:\n          - description: The [`AggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#aggregateandproof)\n              without selection_proof\n            properties:\n              aggregator_index:\n                example: \"1\"\n                type: string\n              attestation:\n                description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                  object from the Eth2.0 spec.\n                properties:\n                  aggregation_bits:\n                    description: Attester aggregation bits.\n                    example: 0x01\n                    pattern: ^0x[a-fA-F0-9]+$\n                    type: string\n                  signature:\n                    allOf:\n                    - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                      pattern: ^0x[a-fA-F0-9]{192}$\n                      type: string\n                    - description: BLS aggregate signature.\n                  data:\n                    description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                      object from the Eth2.0 spec.\n                    properties:\n                      slot:\n                        example: \"1\"\n                        type: string\n                      index:\n                        example: \"1\"\n                        type: string\n                      beacon_block_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: LMD GHOST vote.\n                      source:\n                        description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                        properties:\n                          epoch:\n                            example: \"1\"\n                            type: string\n                          root:\n                            example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                            pattern: ^0x[a-fA-F0-9]{64}$\n                            type: string\n                        type: object\n                      target:\n                        description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                        properties:\n                          epoch:\n                            example: \"1\"\n                            type: string\n                          root:\n                            example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                            pattern: ^0x[a-fA-F0-9]{64}$\n                            type: string\n                        type: object\n                    type: object\n                type: object\n            type: object\n          - properties:\n              selection_proof:\n                example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                pattern: ^0x[a-fA-F0-9]{192}$\n                type: string\n            type: object\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n    Attestation:\n      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n        object from the Eth2.0 spec.\n      properties:\n        aggregation_bits:\n          description: Attester aggregation bits.\n          example: 0x01\n          pattern: ^0x[a-fA-F0-9]+$\n          type: string\n        signature:\n          allOf:\n          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            pattern: ^0x[a-fA-F0-9]{192}$\n            type: string\n          - description: BLS aggregate signature.\n        data:\n          $ref: '#/components/schemas/GetBlockAttestationsResponse_data'\n      type: object\n    AttestationData:\n      description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n        object from the Eth2.0 spec.\n      properties:\n        slot:\n          example: \"1\"\n          type: string\n        index:\n          example: \"1\"\n          type: string\n        beacon_block_root:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: LMD GHOST vote.\n        source:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        target:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n      type: object\n    Fork:\n      description: The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork)\n        object from the Eth2.0 spec.\n      properties:\n        previous_version:\n          description: a fork version number\n          example: 0x00000000\n          pattern: ^0x[a-fA-F0-9]{8}$\n          type: string\n        current_version:\n          description: a fork version number\n          example: 0x00000000\n          pattern: ^0x[a-fA-F0-9]{8}$\n          type: string\n        epoch:\n          example: \"1\"\n          type: string\n      type: object\n    Checkpoint:\n      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n      properties:\n        epoch:\n          example: \"1\"\n          type: string\n        root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n      type: object\n    Uint64:\n      example: \"1\"\n      type: string\n    NetworkIdentity:\n      properties:\n        peer_id:\n          description: Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        enr:\n          description: Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)\n          example: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          type: string\n        p2p_addresses:\n          items:\n            allOf:\n            - description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n              example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n              type: string\n            - description: Node's addresses on which eth2 rpc requests are served.\n                [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)\n          type: array\n        discovery_addresses:\n          items:\n            allOf:\n            - description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n              example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n              type: string\n            - description: Node's addresses on which is listening for discv5 requests.\n                [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)\n          type: array\n        metadata:\n          $ref: '#/components/schemas/GetNetworkIdentityResponse_data_metadata'\n      type: object\n    Peer:\n      properties:\n        peer_id:\n          description: Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        enr:\n          description: Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)\n          example: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          type: string\n        address:\n          description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n          example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        state:\n          enum:\n          - disconnected\n          - connecting\n          - connected\n          - disconnecting\n          type: string\n        direction:\n          enum:\n          - inbound\n          - outbound\n          type: string\n      type: object\n    PeerId:\n      description: Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)\n      example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n      type: string\n    GenesisTime:\n      allOf:\n      - example: \"1\"\n        type: string\n      - example: \"1590832934\"\n      - description: The genesis_time configured for the beacon node, which is the\n          unix time in seconds at which the Eth2.0 chain began.\n    Version:\n      description: A string which uniquely identifies the client implementation and\n        its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).\n      example: Lighthouse/v0.1.5 (Linux x86_64)\n      type: string\n    ForkVersion:\n      description: a fork version number\n      example: 0x00000000\n      pattern: ^0x[a-fA-F0-9]{8}$\n      type: string\n    Root:\n      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n      pattern: ^0x[a-fA-F0-9]{64}$\n      type: string\n    Hex:\n      pattern: ^0x[a-fA-F0-9]{2,}$\n      type: string\n    Graffiti:\n      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n      format: hex\n      pattern: ^0x[a-fA-F0-9]{64}$\n      type: string\n    Signature:\n      example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n      pattern: ^0x[a-fA-F0-9]{192}$\n      type: string\n    ErrorMessage:\n      properties:\n        code:\n          description: Either specific error code in case of invalid request or http\n            status code\n          example: 404\n          type: number\n        message:\n          description: Message describing error\n          type: string\n        stacktraces:\n          description: Optional stacktraces, sent when node is in debug mode\n          items:\n            type: string\n          type: array\n      type: object\n    GetGenesisResponse_data:\n      example:\n        genesis_time: \"\"\n        genesis_validators_root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n        genesis_fork_version: 0x00000000\n      properties:\n        genesis_time:\n          allOf:\n          - example: \"1\"\n            type: string\n          - example: \"1590832934\"\n          - description: The genesis_time configured for the beacon node, which is\n              the unix time in seconds at which the Eth2.0 chain began.\n        genesis_validators_root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        genesis_fork_version:\n          description: a fork version number\n          example: 0x00000000\n          pattern: ^0x[a-fA-F0-9]{8}$\n          type: string\n    GetGenesisResponse:\n      example:\n        data:\n          genesis_time: \"\"\n          genesis_validators_root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          genesis_fork_version: 0x00000000\n      properties:\n        data:\n          $ref: '#/components/schemas/GetGenesisResponse_data'\n    inline_response_500:\n      properties:\n        code:\n          description: Either specific error code in case of invalid request or http\n            status code\n          example: 404\n          type: number\n        message:\n          description: Message describing error\n          type: string\n        stacktraces:\n          description: Optional stacktraces, sent when node is in debug mode\n          items:\n            type: string\n          type: array\n    GetStateRootResponse_data:\n      example:\n        root: \"\"\n      properties:\n        root:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: HashTreeRoot of BeaconState object\n    GetStateRootResponse:\n      example:\n        data:\n          root: \"\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetStateRootResponse_data'\n    GetStateForkResponse_data:\n      description: The [`Fork`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#fork)\n        object from the Eth2.0 spec.\n      example:\n        previous_version: 0x00000000\n        current_version: 0x00000000\n        epoch: \"1\"\n      properties:\n        previous_version:\n          description: a fork version number\n          example: 0x00000000\n          pattern: ^0x[a-fA-F0-9]{8}$\n          type: string\n        current_version:\n          description: a fork version number\n          example: 0x00000000\n          pattern: ^0x[a-fA-F0-9]{8}$\n          type: string\n        epoch:\n          example: \"1\"\n          type: string\n    GetStateForkResponse:\n      example:\n        data:\n          previous_version: 0x00000000\n          current_version: 0x00000000\n          epoch: \"1\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetStateForkResponse_data'\n    GetStateFinalityCheckpointsResponse_data_previous_justified:\n      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n      example:\n        root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n        epoch: \"1\"\n      properties:\n        epoch:\n          example: \"1\"\n          type: string\n        root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n    GetStateFinalityCheckpointsResponse_data:\n      example:\n        finalized:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n        previous_justified:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n        current_justified:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n      properties:\n        previous_justified:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        current_justified:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        finalized:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n    GetStateFinalityCheckpointsResponse:\n      example:\n        data:\n          finalized:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          previous_justified:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          current_justified:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data'\n    GetStateValidatorsResponse_validator:\n      example:\n        withdrawable_epoch: \"\"\n        exit_epoch: \"\"\n        slashed: false\n        effective_balance: \"\"\n        activation_eligibility_epoch: \"\"\n        pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n        withdrawal_credentials: \"\"\n        activation_epoch: \"\"\n      properties:\n        pubkey:\n          description: The validator's BLS public key, uniquely identifying them.\n            _48-bytes, hex encoded with 0x prefix, case insensitive._\n          example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          pattern: ^0x[a-fA-F0-9]{96}$\n          type: string\n        withdrawal_credentials:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: Root of withdrawal credentials\n        effective_balance:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Balance at stake in Gwei.\n        slashed:\n          description: Was validator slashed (not longer active).\n          example: false\n          type: boolean\n        activation_eligibility_epoch:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: When criteria for activation were met.\n        activation_epoch:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH' if not\n              activated\n        exit_epoch:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if not exited.\n        withdrawable_epoch:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH'\n              if not defined\n    GetStateValidatorsResponse_data:\n      example:\n        balance: \"\"\n        validator:\n          withdrawable_epoch: \"\"\n          exit_epoch: \"\"\n          slashed: false\n          effective_balance: \"\"\n          activation_eligibility_epoch: \"\"\n          pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          withdrawal_credentials: \"\"\n          activation_epoch: \"\"\n        index: \"\"\n        status: active_ongoing\n      properties:\n        index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Index of validator in validator registry.\n        balance:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Current validator balance in gwei.\n        status:\n          description: |\n            Possible statuses:\n            - **pending_initialized** - When the first deposit is processed, but not enough funds are available (or not yet the end of the first epoch) to get validator into the activation queue.\n            - **pending_queued** - When validator is waiting to get activated, and have enough funds etc. while in the queue, validator activation epoch keeps changing until it gets to the front and make it through (finalization is a requirement here too).\n            - **active_ongoing** - When validator must be attesting, and have not initiated any exit.\n            - **active_exiting** - When validator is still active, but filed a voluntary request to exit.\n            - **active_slashed** - When validator is still active, but have a slashed status and is scheduled to exit.\n            - **exited_unslashed** - When validator has reached reguler exit epoch, not being slashed, and doesn't have to attest any more, but cannot withdraw yet.\n            - **exited_slashed** - When validator has reached reguler exit epoch, but was slashed, have to wait for a longer withdrawal period.\n            - **withdrawal_possible** - After validator has exited, a while later is permitted to move funds, and is truly out of the system.\n            - **withdrawal_done** - (not possible in phase0, except slashing full balance) - actually having moved funds away\n\n            [Validator status specification](https://hackmd.io/ofFJ5gOmQpu1jjHilHbdQQ)\n          enum:\n          - pending_initialized\n          - pending_queued\n          - active_ongoing\n          - active_exiting\n          - active_slashed\n          - exited_unslashed\n          - exited_slashed\n          - withdrawal_possible\n          - withdrawal_done\n          example: active_ongoing\n          type: string\n        validator:\n          $ref: '#/components/schemas/GetStateValidatorsResponse_validator'\n    GetStateValidatorsResponse:\n      example:\n        data:\n        - balance: \"\"\n          validator:\n            withdrawable_epoch: \"\"\n            exit_epoch: \"\"\n            slashed: false\n            effective_balance: \"\"\n            activation_eligibility_epoch: \"\"\n            pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n            withdrawal_credentials: \"\"\n            activation_epoch: \"\"\n          index: \"\"\n          status: active_ongoing\n        - balance: \"\"\n          validator:\n            withdrawable_epoch: \"\"\n            exit_epoch: \"\"\n            slashed: false\n            effective_balance: \"\"\n            activation_eligibility_epoch: \"\"\n            pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n            withdrawal_credentials: \"\"\n            activation_epoch: \"\"\n          index: \"\"\n          status: active_ongoing\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetStateValidatorsResponse_data'\n          type: array\n    GetStateValidatorResponse:\n      example:\n        data:\n          balance: \"\"\n          validator:\n            withdrawable_epoch: \"\"\n            exit_epoch: \"\"\n            slashed: false\n            effective_balance: \"\"\n            activation_eligibility_epoch: \"\"\n            pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n            withdrawal_credentials: \"\"\n            activation_epoch: \"\"\n          index: \"\"\n          status: active_ongoing\n      properties:\n        data:\n          $ref: '#/components/schemas/GetStateValidatorsResponse_data'\n    GetEpochCommitteesResponse_data:\n      description: Group of validators assigned to attest at specific slot and that\n        have the same committee index (shard in phase 1)\n      example:\n        validators:\n        - \"1\"\n        - \"1\"\n        index: \"\"\n        slot: \"1\"\n      properties:\n        index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Committee index at a slot\n        slot:\n          example: \"1\"\n          type: string\n        validators:\n          description: List of validator indices assigned to this committee\n          items:\n            example: \"1\"\n            type: string\n          type: array\n    GetEpochCommitteesResponse:\n      example:\n        data:\n        - validators:\n          - \"1\"\n          - \"1\"\n          index: \"\"\n          slot: \"1\"\n        - validators:\n          - \"1\"\n          - \"1\"\n          index: \"\"\n          slot: \"1\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetEpochCommitteesResponse_data'\n          type: array\n    GetBlockHeadersResponse_header:\n      description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n        object envelope from the Eth2.0 spec.\n      example:\n        signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n        message: \"\"\n      properties:\n        message:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconBlockBody`\n                    for the `BeaconBlock`\n            type: object\n          description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n            object from the Eth2.0 spec.\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n    GetBlockHeadersResponse_data:\n      example:\n        root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n        header:\n          signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          message: \"\"\n        canonical: true\n      properties:\n        root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        canonical:\n          type: boolean\n        header:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n    GetBlockHeadersResponse:\n      example:\n        data:\n        - root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          header:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n          canonical: true\n        - root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          header:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n          canonical: true\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetBlockHeadersResponse_data'\n          type: array\n    GetBlockHeaderResponse:\n      example:\n        data:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          header:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n          canonical: true\n      properties:\n        data:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_data'\n    inline_object:\n      description: The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock)\n        object envelope from the Eth2.0 spec.\n      properties:\n        message:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body:\n                description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody)\n                  object from the Eth2.0 spec.\n                properties:\n                  randao_reveal:\n                    allOf:\n                    - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                      pattern: ^0x[a-fA-F0-9]{192}$\n                      type: string\n                    - description: The RanDAO reveal value provided by the validator.\n                  eth1_data:\n                    description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                      object from the Eth2.0 spec.\n                    properties:\n                      deposit_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Root of the deposit tree.\n                      deposit_count:\n                        allOf:\n                        - example: \"1\"\n                          type: string\n                        - description: Total number of deposits.\n                      block_hash:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Ethereum 1.x block hash.\n                    type: object\n                  graffiti:\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  proposer_slashings:\n                    items:\n                      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        signed_header_1:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                        signed_header_2:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                      type: object\n                    type: array\n                  attester_slashings:\n                    items:\n                      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        attestation_1:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                        attestation_2:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  attestations:\n                    items:\n                      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                        object from the Eth2.0 spec.\n                      properties:\n                        aggregation_bits:\n                          description: Attester aggregation bits.\n                          example: 0x01\n                          pattern: ^0x[a-fA-F0-9]+$\n                          type: string\n                        signature:\n                          allOf:\n                          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                            pattern: ^0x[a-fA-F0-9]{192}$\n                            type: string\n                          - description: BLS aggregate signature.\n                        data:\n                          description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            slot:\n                              example: \"1\"\n                              type: string\n                            index:\n                              example: \"1\"\n                              type: string\n                            beacon_block_root:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: LMD GHOST vote.\n                            source:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                            target:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  deposits:\n                    items:\n                      description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        proof:\n                          description: Branch in the deposit tree.\n                          items:\n                            allOf:\n                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                              pattern: ^0x[a-fA-F0-9]{64}$\n                              type: string\n                          maxItems: 32\n                          minItems: 32\n                          type: array\n                        data:\n                          description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            pubkey:\n                              description: The validator's BLS public key, uniquely\n                                identifying them. _48-bytes, hex encoded with 0x prefix,\n                                case insensitive._\n                              example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                              pattern: ^0x[a-fA-F0-9]{96}$\n                              type: string\n                            withdrawal_credentials:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: The withdrawal credentials.\n                            amount:\n                              allOf:\n                              - example: \"1\"\n                                type: string\n                              - description: Amount in Gwei.\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: Container self-signature.\n                          type: object\n                      type: object\n                    type: array\n                  voluntary_exits:\n                    items:\n                      description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        epoch:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Minimum epoch for processing exit.\n                        validator_index:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Index of the exiting validator.\n                      type: object\n                    type: array\n                type: object\n            type: object\n          description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n            object from the Eth2.0 spec.\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n      type: object\n    inline_response_400:\n      properties:\n        code:\n          description: Either specific error code in case of invalid request or http\n            status code\n          example: 400\n          type: number\n        message:\n          description: Message describing error\n          type: string\n        stacktraces:\n          description: Optional stacktraces, sent when node is in debug mode\n          items:\n            type: string\n          type: array\n    GetBlockResponse_data:\n      description: The [`SignedBeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblock)\n        object envelope from the Eth2.0 spec.\n      example:\n        signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n        message: \"\"\n      properties:\n        message:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body:\n                description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody)\n                  object from the Eth2.0 spec.\n                properties:\n                  randao_reveal:\n                    allOf:\n                    - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                      pattern: ^0x[a-fA-F0-9]{192}$\n                      type: string\n                    - description: The RanDAO reveal value provided by the validator.\n                  eth1_data:\n                    description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                      object from the Eth2.0 spec.\n                    properties:\n                      deposit_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Root of the deposit tree.\n                      deposit_count:\n                        allOf:\n                        - example: \"1\"\n                          type: string\n                        - description: Total number of deposits.\n                      block_hash:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Ethereum 1.x block hash.\n                    type: object\n                  graffiti:\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  proposer_slashings:\n                    items:\n                      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        signed_header_1:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                        signed_header_2:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                      type: object\n                    type: array\n                  attester_slashings:\n                    items:\n                      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        attestation_1:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                        attestation_2:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  attestations:\n                    items:\n                      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                        object from the Eth2.0 spec.\n                      properties:\n                        aggregation_bits:\n                          description: Attester aggregation bits.\n                          example: 0x01\n                          pattern: ^0x[a-fA-F0-9]+$\n                          type: string\n                        signature:\n                          allOf:\n                          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                            pattern: ^0x[a-fA-F0-9]{192}$\n                            type: string\n                          - description: BLS aggregate signature.\n                        data:\n                          description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            slot:\n                              example: \"1\"\n                              type: string\n                            index:\n                              example: \"1\"\n                              type: string\n                            beacon_block_root:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: LMD GHOST vote.\n                            source:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                            target:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  deposits:\n                    items:\n                      description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        proof:\n                          description: Branch in the deposit tree.\n                          items:\n                            allOf:\n                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                              pattern: ^0x[a-fA-F0-9]{64}$\n                              type: string\n                          maxItems: 32\n                          minItems: 32\n                          type: array\n                        data:\n                          description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            pubkey:\n                              description: The validator's BLS public key, uniquely\n                                identifying them. _48-bytes, hex encoded with 0x prefix,\n                                case insensitive._\n                              example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                              pattern: ^0x[a-fA-F0-9]{96}$\n                              type: string\n                            withdrawal_credentials:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: The withdrawal credentials.\n                            amount:\n                              allOf:\n                              - example: \"1\"\n                                type: string\n                              - description: Amount in Gwei.\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: Container self-signature.\n                          type: object\n                      type: object\n                    type: array\n                  voluntary_exits:\n                    items:\n                      description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        epoch:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Minimum epoch for processing exit.\n                        validator_index:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Index of the exiting validator.\n                      type: object\n                    type: array\n                type: object\n            type: object\n          description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n            object from the Eth2.0 spec.\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n    GetBlockResponse:\n      example:\n        data:\n          signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          message: \"\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetBlockResponse_data'\n    GetBlockRootResponse_data:\n      example:\n        root: \"\"\n      properties:\n        root:\n          allOf:\n          - description: HashTreeRoot of BeaconBlock/BeaconBlockHeader object\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n    GetBlockRootResponse:\n      example:\n        data:\n          root: \"\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetBlockRootResponse_data'\n    GetBlockAttestationsResponse_data:\n      description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n        object from the Eth2.0 spec.\n      example:\n        beacon_block_root: \"\"\n        index: \"1\"\n        slot: \"1\"\n        source:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n        target:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n      properties:\n        slot:\n          example: \"1\"\n          type: string\n        index:\n          example: \"1\"\n          type: string\n        beacon_block_root:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: LMD GHOST vote.\n        source:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        target:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n    GetBlockAttestationsResponse_data_1:\n      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n        object from the Eth2.0 spec.\n      example:\n        data:\n          beacon_block_root: \"\"\n          index: \"1\"\n          slot: \"1\"\n          source:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          target:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n        signature: \"\"\n        aggregation_bits: 0x01\n      properties:\n        aggregation_bits:\n          description: Attester aggregation bits.\n          example: 0x01\n          pattern: ^0x[a-fA-F0-9]+$\n          type: string\n        signature:\n          allOf:\n          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            pattern: ^0x[a-fA-F0-9]{192}$\n            type: string\n          - description: BLS aggregate signature.\n        data:\n          $ref: '#/components/schemas/GetBlockAttestationsResponse_data'\n    GetBlockAttestationsResponse:\n      example:\n        data:\n        - data:\n            beacon_block_root: \"\"\n            index: \"1\"\n            slot: \"1\"\n            source:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n            target:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n          signature: \"\"\n          aggregation_bits: 0x01\n        - data:\n            beacon_block_root: \"\"\n            index: \"1\"\n            slot: \"1\"\n            source:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n            target:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n          signature: \"\"\n          aggregation_bits: 0x01\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetBlockAttestationsResponse_data_1'\n          type: array\n    inline_object_1:\n      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n        object from the Eth2.0 spec.\n      properties:\n        aggregation_bits:\n          description: Attester aggregation bits.\n          example: 0x01\n          pattern: ^0x[a-fA-F0-9]+$\n          type: string\n        signature:\n          allOf:\n          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            pattern: ^0x[a-fA-F0-9]{192}$\n            type: string\n          - description: BLS aggregate signature.\n        data:\n          $ref: '#/components/schemas/GetBlockAttestationsResponse_data'\n      type: object\n    GetPoolAttesterSlashingsResponse_attestation_1:\n      description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n        object from the Eth2.0 spec.\n      example:\n        attesting_indices:\n        - \"1\"\n        - \"1\"\n        - \"1\"\n        - \"1\"\n        - \"1\"\n        data:\n          beacon_block_root: \"\"\n          index: \"1\"\n          slot: \"1\"\n          source:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          target:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n        signature: \"\"\n      properties:\n        attesting_indices:\n          description: Attesting validator indices\n          items:\n            example: \"1\"\n            type: string\n          maxItems: 2048\n          type: array\n        signature:\n          allOf:\n          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            pattern: ^0x[a-fA-F0-9]{192}$\n            type: string\n          - description: The BLS signature of the `IndexedAttestation`, created by\n              the validator of the attestation.\n        data:\n          $ref: '#/components/schemas/GetBlockAttestationsResponse_data'\n    GetPoolAttesterSlashingsResponse_data:\n      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n        object from the Eth2.0 spec.\n      example:\n        attestation_2:\n          attesting_indices:\n          - \"1\"\n          - \"1\"\n          - \"1\"\n          - \"1\"\n          - \"1\"\n          data:\n            beacon_block_root: \"\"\n            index: \"1\"\n            slot: \"1\"\n            source:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n            target:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n          signature: \"\"\n        attestation_1:\n          attesting_indices:\n          - \"1\"\n          - \"1\"\n          - \"1\"\n          - \"1\"\n          - \"1\"\n          data:\n            beacon_block_root: \"\"\n            index: \"1\"\n            slot: \"1\"\n            source:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n            target:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n          signature: \"\"\n      properties:\n        attestation_1:\n          $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n        attestation_2:\n          $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n    GetPoolAttesterSlashingsResponse:\n      example:\n        data:\n        - attestation_2:\n            attesting_indices:\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            data:\n              beacon_block_root: \"\"\n              index: \"1\"\n              slot: \"1\"\n              source:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n              target:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n            signature: \"\"\n          attestation_1:\n            attesting_indices:\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            data:\n              beacon_block_root: \"\"\n              index: \"1\"\n              slot: \"1\"\n              source:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n              target:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n            signature: \"\"\n        - attestation_2:\n            attesting_indices:\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            data:\n              beacon_block_root: \"\"\n              index: \"1\"\n              slot: \"1\"\n              source:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n              target:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n            signature: \"\"\n          attestation_1:\n            attesting_indices:\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            - \"1\"\n            data:\n              beacon_block_root: \"\"\n              index: \"1\"\n              slot: \"1\"\n              source:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n              target:\n                root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                epoch: \"1\"\n            signature: \"\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_data'\n          type: array\n    inline_object_2:\n      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n        object from the Eth2.0 spec.\n      properties:\n        attestation_1:\n          $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n        attestation_2:\n          $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_attestation_1'\n      type: object\n    GetPoolProposerSlashingsResponse_data:\n      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n        object from the Eth2.0 spec.\n      example:\n        signed_header_2:\n          signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          message: \"\"\n        signed_header_1:\n          signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          message: \"\"\n      properties:\n        signed_header_1:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n        signed_header_2:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n    GetPoolProposerSlashingsResponse:\n      example:\n        data:\n        - signed_header_2:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n          signed_header_1:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n        - signed_header_2:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n          signed_header_1:\n            signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            message: \"\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetPoolProposerSlashingsResponse_data'\n          type: array\n    inline_object_3:\n      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n        object from the Eth2.0 spec.\n      properties:\n        signed_header_1:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n        signed_header_2:\n          $ref: '#/components/schemas/GetBlockHeadersResponse_header'\n      type: object\n    GetPoolVoluntaryExitsResponse_message:\n      description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit)\n        object from the Eth2.0 spec.\n      example:\n        validator_index: \"\"\n        epoch: \"\"\n      properties:\n        epoch:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Minimum epoch for processing exit.\n        validator_index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Index of the exiting validator.\n    GetPoolVoluntaryExitsResponse_data:\n      description: The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit)\n        object from the Eth2.0 spec.\n      example:\n        signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n        message:\n          validator_index: \"\"\n          epoch: \"\"\n      properties:\n        message:\n          $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse_message'\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n    GetPoolVoluntaryExitsResponse:\n      example:\n        data:\n        - signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          message:\n            validator_index: \"\"\n            epoch: \"\"\n        - signature: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          message:\n            validator_index: \"\"\n            epoch: \"\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse_data'\n          type: array\n    inline_object_4:\n      description: The [`SignedVoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedvoluntaryexit)\n        object from the Eth2.0 spec.\n      properties:\n        message:\n          $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse_message'\n        signature:\n          example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n          pattern: ^0x[a-fA-F0-9]{192}$\n          type: string\n      type: object\n    GetStateResponse_data_eth1_data:\n      description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n        object from the Eth2.0 spec.\n      example:\n        deposit_count: \"\"\n        deposit_root: \"\"\n        block_hash: \"\"\n      properties:\n        deposit_root:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: Root of the deposit tree.\n        deposit_count:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Total number of deposits.\n        block_hash:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: Ethereum 1.x block hash.\n    GetStateResponse_data:\n      description: The [`BeaconState`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n        object from the Eth2.0 spec.\n      example:\n        finalized_checkpoint:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n        genesis_time: \"1\"\n        current_justified_checkpoint:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n        historical_roots:\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        genesis_validators_root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n        block_roots:\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        state_roots:\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        eth1_data:\n          deposit_count: \"\"\n          deposit_root: \"\"\n          block_hash: \"\"\n        validators:\n        - \"\"\n        - \"\"\n        eth1_data_votes:\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        justification_bits: 0x01\n        previous_epoch_attestations:\n        - \"\"\n        - \"\"\n        slot: \"1\"\n        eth1_deposit_index: \"1\"\n        slashings:\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        current_epoch_attestations:\n        - \"\"\n        - \"\"\n        fork:\n          previous_version: 0x00000000\n          current_version: 0x00000000\n          epoch: \"1\"\n        balances:\n        - \"\"\n        - \"\"\n        previous_justified_checkpoint:\n          root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          epoch: \"1\"\n        latest_block_header: \"\"\n        randao_mixes:\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n        - \"\"\n      properties:\n        genesis_time:\n          example: \"1\"\n          type: string\n        genesis_validators_root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        slot:\n          example: \"1\"\n          type: string\n        fork:\n          $ref: '#/components/schemas/GetStateForkResponse_data'\n        latest_block_header:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconBlockBody`\n                    for the `BeaconBlock`\n            type: object\n          description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n            object from the Eth2.0 spec.\n        block_roots:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 8192\n          minItems: 8192\n          type: array\n        state_roots:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 8192\n          minItems: 8192\n          type: array\n        historical_roots:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 16777216\n          type: array\n        eth1_data:\n          $ref: '#/components/schemas/GetStateResponse_data_eth1_data'\n        eth1_data_votes:\n          items:\n            allOf:\n            - description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                object from the Eth2.0 spec.\n              properties:\n                deposit_root:\n                  allOf:\n                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  - description: Root of the deposit tree.\n                deposit_count:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Total number of deposits.\n                block_hash:\n                  allOf:\n                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  - description: Ethereum 1.x block hash.\n              type: object\n          maxItems: 1024\n          type: array\n        eth1_deposit_index:\n          example: \"1\"\n          type: string\n        validators:\n          items:\n            allOf:\n            - properties:\n                pubkey:\n                  description: The validator's BLS public key, uniquely identifying\n                    them. _48-bytes, hex encoded with 0x prefix, case insensitive._\n                  example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                  pattern: ^0x[a-fA-F0-9]{96}$\n                  type: string\n                withdrawal_credentials:\n                  allOf:\n                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  - description: Root of withdrawal credentials\n                effective_balance:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Balance at stake in Gwei.\n                slashed:\n                  description: Was validator slashed (not longer active).\n                  example: false\n                  type: boolean\n                activation_eligibility_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: When criteria for activation were met.\n                activation_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Epoch when validator activated. 'FAR_FUTURE_EPOCH'\n                      if not activated\n                exit_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: Epoch when validator exited. 'FAR_FUTURE_EPOCH' if\n                      not exited.\n                withdrawable_epoch:\n                  allOf:\n                  - example: \"1\"\n                    type: string\n                  - description: When validator can withdraw or transfer funds. 'FAR_FUTURE_EPOCH'\n                      if not defined\n              type: object\n          type: array\n        balances:\n          description: Validator balances in gwei\n          items:\n            allOf:\n            - example: \"1\"\n              type: string\n          type: array\n        randao_mixes:\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 65536\n          minItems: 65536\n          type: array\n        slashings:\n          description: Per-epoch sums of slashed effective balances\n          items:\n            allOf:\n            - example: \"1\"\n              type: string\n          maxItems: 8192\n          minItems: 8192\n          type: array\n        previous_epoch_attestations:\n          items:\n            allOf:\n            - description: The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation)\n                object from the Eth2.0 spec.\n              properties:\n                aggregation_bits:\n                  description: Attester aggregation bits.\n                  pattern: ^0x[a-fA-F0-9]+$\n                  type: string\n                data:\n                  description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                    object from the Eth2.0 spec.\n                  properties:\n                    slot:\n                      example: \"1\"\n                      type: string\n                    index:\n                      example: \"1\"\n                      type: string\n                    beacon_block_root:\n                      allOf:\n                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                        pattern: ^0x[a-fA-F0-9]{64}$\n                        type: string\n                      - description: LMD GHOST vote.\n                    source:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                    target:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                  type: object\n                inclusion_delay:\n                  example: \"1\"\n                  type: string\n                proposer_index:\n                  example: \"1\"\n                  type: string\n              type: object\n          type: array\n        current_epoch_attestations:\n          items:\n            allOf:\n            - description: The [`PendingAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#pendingattestation)\n                object from the Eth2.0 spec.\n              properties:\n                aggregation_bits:\n                  description: Attester aggregation bits.\n                  pattern: ^0x[a-fA-F0-9]+$\n                  type: string\n                data:\n                  description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                    object from the Eth2.0 spec.\n                  properties:\n                    slot:\n                      example: \"1\"\n                      type: string\n                    index:\n                      example: \"1\"\n                      type: string\n                    beacon_block_root:\n                      allOf:\n                      - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                        pattern: ^0x[a-fA-F0-9]{64}$\n                        type: string\n                      - description: LMD GHOST vote.\n                    source:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                    target:\n                      description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                      properties:\n                        epoch:\n                          example: \"1\"\n                          type: string\n                        root:\n                          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                      type: object\n                  type: object\n                inclusion_delay:\n                  example: \"1\"\n                  type: string\n                proposer_index:\n                  example: \"1\"\n                  type: string\n              type: object\n          type: array\n        justification_bits:\n          description: Bit set for every recent justified epoch\n          example: 0x01\n          pattern: ^0x[a-fA-F0-9]+$\n          type: string\n        previous_justified_checkpoint:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        current_justified_checkpoint:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n        finalized_checkpoint:\n          $ref: '#/components/schemas/GetStateFinalityCheckpointsResponse_data_previous_justified'\n    GetStateResponse:\n      example:\n        data:\n          finalized_checkpoint:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          genesis_time: \"1\"\n          current_justified_checkpoint:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          historical_roots:\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          genesis_validators_root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          block_roots:\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          state_roots:\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          eth1_data:\n            deposit_count: \"\"\n            deposit_root: \"\"\n            block_hash: \"\"\n          validators:\n          - \"\"\n          - \"\"\n          eth1_data_votes:\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          justification_bits: 0x01\n          previous_epoch_attestations:\n          - \"\"\n          - \"\"\n          slot: \"1\"\n          eth1_deposit_index: \"1\"\n          slashings:\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          current_epoch_attestations:\n          - \"\"\n          - \"\"\n          fork:\n            previous_version: 0x00000000\n            current_version: 0x00000000\n            epoch: \"1\"\n          balances:\n          - \"\"\n          - \"\"\n          previous_justified_checkpoint:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          latest_block_header: \"\"\n          randao_mixes:\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n          - \"\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetStateResponse_data'\n    GetDebugChainHeadsResponse_data:\n      example:\n        root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n        slot: \"1\"\n      properties:\n        root:\n          example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        slot:\n          example: \"1\"\n          type: string\n    GetDebugChainHeadsResponse:\n      example:\n        data:\n        - root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          slot: \"1\"\n        - root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n          slot: \"1\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetDebugChainHeadsResponse_data'\n          type: array\n    GetNetworkIdentityResponse_data_metadata:\n      description: Based on eth2 [Metadata object](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/p2p-interface.md#metadata)\n      example:\n        seq_number: \"\"\n        attnets: \"\"\n      properties:\n        seq_number:\n          allOf:\n          - description: Uint64 starting at 0 used to version the node's metadata.\n              If any other field in the local MetaData changes, the node MUST increment\n              seq_number by 1.\n          - example: \"1\"\n            type: string\n        attnets:\n          allOf:\n          - description: Bitvector representing the node's persistent attestation\n              subnet subscriptions.\n          - pattern: ^0x[a-fA-F0-9]{2,}$\n            type: string\n    GetNetworkIdentityResponse_data:\n      example:\n        metadata:\n          seq_number: \"\"\n          attnets: \"\"\n        discovery_addresses:\n        - \"\"\n        - \"\"\n        p2p_addresses:\n        - \"\"\n        - \"\"\n        enr: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n        peer_id: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n      properties:\n        peer_id:\n          description: Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        enr:\n          description: Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)\n          example: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          type: string\n        p2p_addresses:\n          items:\n            allOf:\n            - description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n              example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n              type: string\n            - description: Node's addresses on which eth2 rpc requests are served.\n                [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)\n          type: array\n        discovery_addresses:\n          items:\n            allOf:\n            - description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n              example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n              type: string\n            - description: Node's addresses on which is listening for discv5 requests.\n                [Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)\n          type: array\n        metadata:\n          $ref: '#/components/schemas/GetNetworkIdentityResponse_data_metadata'\n    GetNetworkIdentityResponse:\n      example:\n        data:\n          metadata:\n            seq_number: \"\"\n            attnets: \"\"\n          discovery_addresses:\n          - \"\"\n          - \"\"\n          p2p_addresses:\n          - \"\"\n          - \"\"\n          enr: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          peer_id: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n      properties:\n        data:\n          $ref: '#/components/schemas/GetNetworkIdentityResponse_data'\n    GetPeersResponse_data:\n      example:\n        address: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n        enr: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n        state: disconnected\n        peer_id: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n        direction: inbound\n      properties:\n        peer_id:\n          description: Cryptographic hash of a peer’s public key. [Read more](https://docs.libp2p.io/concepts/peer-id/)\n          example: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        enr:\n          description: Ethereum node record. [Read more](https://eips.ethereum.org/EIPS/eip-778)\n          example: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          type: string\n        address:\n          description: '[Read more](https://docs.libp2p.io/reference/glossary/#multiaddr)'\n          example: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          type: string\n        state:\n          enum:\n          - disconnected\n          - connecting\n          - connected\n          - disconnecting\n          type: string\n        direction:\n          enum:\n          - inbound\n          - outbound\n          type: string\n    GetPeersResponse:\n      example:\n        data:\n        - address: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          enr: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          state: disconnected\n          peer_id: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          direction: inbound\n        - address: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          enr: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          state: disconnected\n          peer_id: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          direction: inbound\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetPeersResponse_data'\n          type: array\n    GetPeerResponse:\n      example:\n        data:\n          address: /ip4/7.7.7.7/tcp/4242/p2p/QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          enr: enr:-IS4QHCYrYZbAKWCBRlAy5zzaDZXJBGkcnh4MHcBFZntXNFrdvJjX04jRzjzCBOonrkTfj499SZuOh8R33Ls8RRcy5wBgmlkgnY0gmlwhH8AAAGJc2VjcDI1NmsxoQPKY0yuDUmstAHYpMa2_oxVtw0RW_QAdpzBQA8yWM0xOIN1ZHCCdl8\n          state: disconnected\n          peer_id: QmYyQSo1c1Ym7orWxLYvCrM2EmxFTANf8wXmmE7DWjhx5N\n          direction: inbound\n      properties:\n        data:\n          $ref: '#/components/schemas/GetPeersResponse_data'\n    GetVersionResponse_data:\n      example:\n        version: Lighthouse/v0.1.5 (Linux x86_64)\n      properties:\n        version:\n          description: A string which uniquely identifies the client implementation\n            and its version; similar to [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3).\n          example: Lighthouse/v0.1.5 (Linux x86_64)\n          type: string\n    GetVersionResponse:\n      example:\n        data:\n          version: Lighthouse/v0.1.5 (Linux x86_64)\n      properties:\n        data:\n          $ref: '#/components/schemas/GetVersionResponse_data'\n    GetSyncingStatusResponse_data:\n      example:\n        head_slot: \"\"\n        sync_distance: \"\"\n      properties:\n        head_slot:\n          allOf:\n          - description: Head slot node is trying to reach\n          - example: \"1\"\n            type: string\n        sync_distance:\n          allOf:\n          - description: How many slots node needs to process to reach head. 0 if\n              synced.\n          - example: \"1\"\n            type: string\n    GetSyncingStatusResponse:\n      example:\n        data:\n          head_slot: \"\"\n          sync_distance: \"\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetSyncingStatusResponse_data'\n    GetForkScheduleResponse:\n      example:\n        data:\n        - previous_version: 0x00000000\n          current_version: 0x00000000\n          epoch: \"1\"\n        - previous_version: 0x00000000\n          current_version: 0x00000000\n          epoch: \"1\"\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetStateForkResponse_data'\n          type: array\n    GetSpecResponse:\n      example:\n        data: '{}'\n      properties:\n        data:\n          description: |\n            Key value mapping of Phase 0[spec variables](https://github.com/ethereum/eth2.0-specs/blob/v0.11.1/configs/mainnet.yaml).\n            Values are returned with following format:\n              - any value starting with 0x in the spec is returned as a hex string\n              - all other values are returned as number\n          type: object\n    GetDepositContractResponse_data:\n      example:\n        address: \"\"\n        chain_id: 1\n      properties:\n        chain_id:\n          description: Id of Eth1 chain on which contract is deployed.\n          example: 1\n          format: int32\n          minimum: 1\n          type: integer\n        address:\n          allOf:\n          - pattern: ^0x[a-fA-F0-9]{2,}$\n            type: string\n          - description: Hex encoded deposit contract address with 0x prefix\n          - example: 0x1Db3439a222C519ab44bb1144fC28167b4Fa6EE6\n    GetDepositContractResponse:\n      example:\n        data:\n          address: \"\"\n          chain_id: 1\n      properties:\n        data:\n          $ref: '#/components/schemas/GetDepositContractResponse_data'\n    GetAttesterDutiesResponse_data:\n      example:\n        committee_length: \"\"\n        validator_committee_index: \"\"\n        slot: \"\"\n        committee_index: \"\"\n        pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n      properties:\n        pubkey:\n          description: The validator's BLS public key, uniquely identifying them.\n            _48-bytes, hex encoded with 0x prefix, case insensitive._\n          example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          pattern: ^0x[a-fA-F0-9]{96}$\n          type: string\n        committee_index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The committee index\n        committee_length:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Number of validators in committee\n        validator_committee_index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Index of validator in committee\n        slot:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The slot at which the validator must attest.\n    GetAttesterDutiesResponse:\n      example:\n        data:\n        - committee_length: \"\"\n          validator_committee_index: \"\"\n          slot: \"\"\n          committee_index: \"\"\n          pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n        - committee_length: \"\"\n          validator_committee_index: \"\"\n          slot: \"\"\n          committee_index: \"\"\n          pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetAttesterDutiesResponse_data'\n          type: array\n    GetProposerDutiesResponse_data:\n      example:\n        slot: \"\"\n        pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n      properties:\n        pubkey:\n          description: The validator's BLS public key, uniquely identifying them.\n            _48-bytes, hex encoded with 0x prefix, case insensitive._\n          example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          pattern: ^0x[a-fA-F0-9]{96}$\n          type: string\n        slot:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The slot at which the validator must propose block.\n    GetProposerDutiesResponse:\n      example:\n        data:\n        - slot: \"\"\n          pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n        - slot: \"\"\n          pubkey: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n      properties:\n        data:\n          items:\n            $ref: '#/components/schemas/GetProposerDutiesResponse_data'\n          type: array\n    ProduceBlockResponse:\n      example:\n        data: \"\"\n      properties:\n        data:\n          allOf:\n          - properties:\n              slot:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: The slot to which this block corresponds.\n              proposer_index:\n                allOf:\n                - example: \"1\"\n                  type: string\n                - description: Index of validator in validator registry.\n              parent_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The signing merkle root of the parent `BeaconBlock`.\n              state_root:\n                allOf:\n                - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                  pattern: ^0x[a-fA-F0-9]{64}$\n                  type: string\n                - description: The tree hash merkle root of the `BeaconState` for\n                    the `BeaconBlock`.\n            type: object\n          - properties:\n              body:\n                description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody)\n                  object from the Eth2.0 spec.\n                properties:\n                  randao_reveal:\n                    allOf:\n                    - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                      pattern: ^0x[a-fA-F0-9]{192}$\n                      type: string\n                    - description: The RanDAO reveal value provided by the validator.\n                  eth1_data:\n                    description: The [`Eth1Data`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#eth1data)\n                      object from the Eth2.0 spec.\n                    properties:\n                      deposit_root:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Root of the deposit tree.\n                      deposit_count:\n                        allOf:\n                        - example: \"1\"\n                          type: string\n                        - description: Total number of deposits.\n                      block_hash:\n                        allOf:\n                        - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                          pattern: ^0x[a-fA-F0-9]{64}$\n                          type: string\n                        - description: Ethereum 1.x block hash.\n                    type: object\n                  graffiti:\n                    pattern: ^0x[a-fA-F0-9]{64}$\n                    type: string\n                  proposer_slashings:\n                    items:\n                      description: The [`ProposerSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#proposerslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        signed_header_1:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                        signed_header_2:\n                          description: The [`SignedBeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#signedbeaconblockheader)\n                            object envelope from the Eth2.0 spec.\n                          properties:\n                            message:\n                              allOf:\n                              - properties:\n                                  slot:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: The slot to which this block corresponds.\n                                  proposer_index:\n                                    allOf:\n                                    - example: \"1\"\n                                      type: string\n                                    - description: Index of validator in validator\n                                        registry.\n                                  parent_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The signing merkle root of the\n                                        parent `BeaconBlock`.\n                                  state_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconState` for the `BeaconBlock`.\n                                type: object\n                              - properties:\n                                  body_root:\n                                    allOf:\n                                    - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                    - description: The tree hash merkle root of the\n                                        `BeaconBlockBody` for the `BeaconBlock`\n                                type: object\n                              description: The [`BeaconBlockHeader`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockheader)\n                                object from the Eth2.0 spec.\n                            signature:\n                              example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                              pattern: ^0x[a-fA-F0-9]{192}$\n                              type: string\n                          type: object\n                      type: object\n                    type: array\n                  attester_slashings:\n                    items:\n                      description: The [`AttesterSlashing`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/core/0_beacon-chain.md#attesterslashing)\n                        object from the Eth2.0 spec.\n                      properties:\n                        attestation_1:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                        attestation_2:\n                          description: The [`IndexedAttestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#indexedattestation)\n                            object from the Eth2.0 spec.\n                          properties:\n                            attesting_indices:\n                              description: Attesting validator indices\n                              items:\n                                example: \"1\"\n                                type: string\n                              maxItems: 2048\n                              type: array\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: The BLS signature of the `IndexedAttestation`,\n                                  created by the validator of the attestation.\n                            data:\n                              description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                                object from the Eth2.0 spec.\n                              properties:\n                                slot:\n                                  example: \"1\"\n                                  type: string\n                                index:\n                                  example: \"1\"\n                                  type: string\n                                beacon_block_root:\n                                  allOf:\n                                  - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                    pattern: ^0x[a-fA-F0-9]{64}$\n                                    type: string\n                                  - description: LMD GHOST vote.\n                                source:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                                target:\n                                  description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                                  properties:\n                                    epoch:\n                                      example: \"1\"\n                                      type: string\n                                    root:\n                                      example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                      pattern: ^0x[a-fA-F0-9]{64}$\n                                      type: string\n                                  type: object\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  attestations:\n                    items:\n                      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                        object from the Eth2.0 spec.\n                      properties:\n                        aggregation_bits:\n                          description: Attester aggregation bits.\n                          example: 0x01\n                          pattern: ^0x[a-fA-F0-9]+$\n                          type: string\n                        signature:\n                          allOf:\n                          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                            pattern: ^0x[a-fA-F0-9]{192}$\n                            type: string\n                          - description: BLS aggregate signature.\n                        data:\n                          description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            slot:\n                              example: \"1\"\n                              type: string\n                            index:\n                              example: \"1\"\n                              type: string\n                            beacon_block_root:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: LMD GHOST vote.\n                            source:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                            target:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                          type: object\n                      type: object\n                    type: array\n                  deposits:\n                    items:\n                      description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        proof:\n                          description: Branch in the deposit tree.\n                          items:\n                            allOf:\n                            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                              pattern: ^0x[a-fA-F0-9]{64}$\n                              type: string\n                          maxItems: 32\n                          minItems: 32\n                          type: array\n                        data:\n                          description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            pubkey:\n                              description: The validator's BLS public key, uniquely\n                                identifying them. _48-bytes, hex encoded with 0x prefix,\n                                case insensitive._\n                              example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n                              pattern: ^0x[a-fA-F0-9]{96}$\n                              type: string\n                            withdrawal_credentials:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: The withdrawal credentials.\n                            amount:\n                              allOf:\n                              - example: \"1\"\n                                type: string\n                              - description: Amount in Gwei.\n                            signature:\n                              allOf:\n                              - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                                pattern: ^0x[a-fA-F0-9]{192}$\n                                type: string\n                              - description: Container self-signature.\n                          type: object\n                      type: object\n                    type: array\n                  voluntary_exits:\n                    items:\n                      description: The [`VoluntaryExit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#voluntaryexit)\n                        object from the Eth2.0 spec.\n                      properties:\n                        epoch:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Minimum epoch for processing exit.\n                        validator_index:\n                          allOf:\n                          - example: \"1\"\n                            type: string\n                          - description: Index of the exiting validator.\n                      type: object\n                    type: array\n                type: object\n            type: object\n          description: The [`BeaconBlock`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblock)\n            object from the Eth2.0 spec.\n    ProduceAttestationDataResponse:\n      example:\n        data:\n          beacon_block_root: \"\"\n          index: \"1\"\n          slot: \"1\"\n          source:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n          target:\n            root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            epoch: \"1\"\n      properties:\n        data:\n          $ref: '#/components/schemas/GetBlockAttestationsResponse_data'\n    GetAggregatedAttestationResponse:\n      example:\n        data:\n          data:\n            beacon_block_root: \"\"\n            index: \"1\"\n            slot: \"1\"\n            source:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n            target:\n              root: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              epoch: \"1\"\n          signature: \"\"\n          aggregation_bits: 0x01\n      properties:\n        data:\n          $ref: '#/components/schemas/GetBlockAttestationsResponse_data_1'\n    inline_object_5:\n      properties:\n        data:\n          items:\n            description: The [`SignedAggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#signedaggregateandproof)\n              object\n            properties:\n              message:\n                allOf:\n                - description: The [`AggregateAndProof`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/validator.md#aggregateandproof)\n                    without selection_proof\n                  properties:\n                    aggregator_index:\n                      example: \"1\"\n                      type: string\n                    attestation:\n                      description: The [`Attestation`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestation)\n                        object from the Eth2.0 spec.\n                      properties:\n                        aggregation_bits:\n                          description: Attester aggregation bits.\n                          example: 0x01\n                          pattern: ^0x[a-fA-F0-9]+$\n                          type: string\n                        signature:\n                          allOf:\n                          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                            pattern: ^0x[a-fA-F0-9]{192}$\n                            type: string\n                          - description: BLS aggregate signature.\n                        data:\n                          description: The [`AttestationData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#attestationdata)\n                            object from the Eth2.0 spec.\n                          properties:\n                            slot:\n                              example: \"1\"\n                              type: string\n                            index:\n                              example: \"1\"\n                              type: string\n                            beacon_block_root:\n                              allOf:\n                              - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                pattern: ^0x[a-fA-F0-9]{64}$\n                                type: string\n                              - description: LMD GHOST vote.\n                            source:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                            target:\n                              description: The [`Checkpoint`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#checkpoint\n                              properties:\n                                epoch:\n                                  example: \"1\"\n                                  type: string\n                                root:\n                                  example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n                                  pattern: ^0x[a-fA-F0-9]{64}$\n                                  type: string\n                              type: object\n                          type: object\n                      type: object\n                  type: object\n                - properties:\n                    selection_proof:\n                      example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                      pattern: ^0x[a-fA-F0-9]{192}$\n                      type: string\n                  type: object\n              signature:\n                example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n                pattern: ^0x[a-fA-F0-9]{192}$\n                type: string\n          type: array\n      type: object\n    InlineObject:\n      example:\n        is_aggregator: true\n        slot: \"\"\n        committee_index: \"1\"\n      properties:\n        committee_index:\n          example: \"1\"\n          type: string\n        slot:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Should be slot at which validator is assigned to attest\n        is_aggregator:\n          description: Signals to BN that a validator on the VC has been chosed for\n            aggregator role.\n          type: boolean\n    BeaconBlock_allOf:\n      properties:\n        slot:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: The slot to which this block corresponds.\n        proposer_index:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Index of validator in validator registry.\n        parent_root:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: The signing merkle root of the parent `BeaconBlock`.\n        state_root:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: The tree hash merkle root of the `BeaconState` for the `BeaconBlock`.\n    BeaconBlock_allOf_1_body_data:\n      description: The [`DepositData`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#depositdata)\n        object from the Eth2.0 spec.\n      properties:\n        pubkey:\n          description: The validator's BLS public key, uniquely identifying them.\n            _48-bytes, hex encoded with 0x prefix, case insensitive._\n          example: 0x93247f2209abcacf57b75a51dafae777f9dd38bc7053d1af526f220a7489a6d3a2753e5f3e8b1cfe39b56f43611df74a\n          pattern: ^0x[a-fA-F0-9]{96}$\n          type: string\n        withdrawal_credentials:\n          allOf:\n          - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n            pattern: ^0x[a-fA-F0-9]{64}$\n            type: string\n          - description: The withdrawal credentials.\n        amount:\n          allOf:\n          - example: \"1\"\n            type: string\n          - description: Amount in Gwei.\n        signature:\n          allOf:\n          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            pattern: ^0x[a-fA-F0-9]{192}$\n            type: string\n          - description: Container self-signature.\n    BeaconBlock_allOf_1_body_deposits:\n      description: The [`Deposit`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#deposit)\n        object from the Eth2.0 spec.\n      properties:\n        proof:\n          description: Branch in the deposit tree.\n          items:\n            allOf:\n            - example: 0xcf8e0d4e9587369b2301d0790347320302cc0943d5a1884560367e8208d920f2\n              pattern: ^0x[a-fA-F0-9]{64}$\n              type: string\n          maxItems: 32\n          minItems: 32\n          type: array\n        data:\n          $ref: '#/components/schemas/BeaconBlock_allOf_1_body_data'\n    BeaconBlock_allOf_1_body:\n      description: The [`BeaconBlockBody`](https://github.com/ethereum/eth2.0-specs/blob/v0.12.2/specs/phase0/beacon-chain.md#beaconblockbody)\n        object from the Eth2.0 spec.\n      properties:\n        randao_reveal:\n          allOf:\n          - example: 0x1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505cc411d61252fb6cb3fa0017b679f8bb2305b26a285fa2737f175668d0dff91cc1b66ac1fb663c9bc59509846d6ec05345bd908eda73e670af888da41af171505\n            pattern: ^0x[a-fA-F0-9]{192}$\n            type: string\n          - description: The RanDAO reveal value provided by the validator.\n        eth1_data:\n          $ref: '#/components/schemas/GetStateResponse_data_eth1_data'\n        graffiti:\n          pattern: ^0x[a-fA-F0-9]{64}$\n          type: string\n        proposer_slashings:\n          items:\n            $ref: '#/components/schemas/GetPoolProposerSlashingsResponse_data'\n          type: array\n        attester_slashings:\n          items:\n            $ref: '#/components/schemas/GetPoolAttesterSlashingsResponse_data'\n          type: array\n        attestations:\n          items:\n            $ref: '#/components/schemas/GetBlockAttestationsResponse_data_1'\n          type: array\n        deposits:\n          items:\n            $ref: '#/components/schemas/BeaconBlock_allOf_1_body_deposits'\n          type: array\n        voluntary_exits:\n          items:\n            $ref: '#/components/schemas/GetPoolVoluntaryExitsResponse_message'\n          type: array\n    BeaconBlock_allOf_1:\n      properties:\n        body:\n          $ref: '#/components/schemas/BeaconBlock_allOf_1_body'\n",
			"canonicalURL": "/github.com/INFURA/eth2-comply@e55593f333f5f9e42b19fd106a89c81a90a0e5fc/-/blob/pkg/eth2spec/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/INFURA/eth2-comply/blob/e55593f333f5f9e42b19fd106a89c81a90a0e5fc/pkg/eth2spec/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /eth/v1/beacon/headers: get: operation \"getBlockHeaders\": parameters: parse parameter \"slot\": invalid schema:style:explode combination: (\"\":\"form\":true)"
}