{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AlexGustafsson/upmon"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/api/openapi.yaml",
			"byteSize": 15117,
			"content": "openapi: 3.0.0\ninfo:\n  description: A cloud-native, distributed uptime monitor written in Go\n  title: upmon\n  version: 0.1.0\nservers:\n- description: Development server\n  url: http://localhost:8080/api/v1\ntags:\n- description: Origin-related endpoints\n  name: Origins\n- description: Services-related endpoints\n  name: Services\n- description: Monitors-related endpoints\n  name: Monitors\n- description: Peers-related endpoints\n  name: Peers\npaths:\n  /origins:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Origins'\n          description: The retrieved origins\n      summary: Retrieve all origins\n      tags:\n      - Origins\n  /origins/{originId}:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Origin'\n          description: The retrieved origin\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve an origin\n      tags:\n      - Origins\n  /services:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Services'\n          description: The retrieved services\n      summary: Retrieve all monitored services\n      tags:\n      - Services\n  /origins/{originId}/services:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Services'\n          description: The retrieved services\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve all monitored services for an origin\n      tags:\n      - Services\n  /origins/{originId}/services/{serviceId}:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target service\n        explode: false\n        in: path\n        name: serviceId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Service'\n          description: The retrieved service\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve a service\n      tags:\n      - Services\n  /origins/{originId}/services/{serviceId}/status:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target service\n        explode: false\n        in: path\n        name: serviceId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServiceStatus'\n          description: The retrieved status\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve the status of a service\n      tags:\n      - Services\n  /origins/{originId}/services/{serviceId}/monitors:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target service\n        explode: false\n        in: path\n        name: serviceId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Monitors'\n          description: The retrieved monitors\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve all monitors for a service of an origin\n      tags:\n      - Monitors\n  /origins/{originId}/services/{serviceId}/monitors/{monitorId}:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target service\n        explode: false\n        in: path\n        name: serviceId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target monitor\n        explode: false\n        in: path\n        name: monitorId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Monitor'\n          description: The retrieved monitor\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve a monitor of a service from an origin\n      tags:\n      - Monitors\n  /origins/{originId}/services/{serviceId}/monitors/{monitorId}/status:\n    get:\n      parameters:\n      - description: The id of the target origin\n        explode: false\n        in: path\n        name: originId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target service\n        explode: false\n        in: path\n        name: serviceId\n        required: true\n        schema:\n          type: string\n        style: simple\n      - description: The id of the target monitor\n        explode: false\n        in: path\n        name: monitorId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MonitorStatus'\n          description: The retrieved status\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve the status of a monitor\n      tags:\n      - Monitors\n  /peers:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Peers'\n          description: The retrieved peers\n      summary: Retrieve all peers\n      tags:\n      - Peers\n  /peers/{peerId}:\n    get:\n      parameters:\n      - description: The id of the target peer\n        explode: false\n        in: path\n        name: peerId\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Peer'\n          description: The retrieved peer\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n          description: Not found\n      summary: Retrieve a peer\n      tags:\n      - Peers\ncomponents:\n  parameters:\n    OriginId:\n      description: The id of the target origin\n      explode: false\n      in: path\n      name: originId\n      required: true\n      schema:\n        type: string\n      style: simple\n    ServiceId:\n      description: The id of the target service\n      explode: false\n      in: path\n      name: serviceId\n      required: true\n      schema:\n        type: string\n      style: simple\n    MonitorId:\n      description: The id of the target monitor\n      explode: false\n      in: path\n      name: monitorId\n      required: true\n      schema:\n        type: string\n      style: simple\n    PeerId:\n      description: The id of the target peer\n      explode: false\n      in: path\n      name: peerId\n      required: true\n      schema:\n        type: string\n      style: simple\n  schemas:\n    Origins:\n      example:\n        objects:\n        - id: id\n        - id: id\n      properties:\n        objects:\n          items:\n            $ref: '#/components/schemas/Origin'\n          type: array\n      required:\n      - objects\n      type: object\n    Origin:\n      example:\n        id: id\n      properties:\n        id:\n          description: A globally unique identifier for the origin\n          type: string\n      required:\n      - id\n      type: object\n    Services:\n      example:\n        services:\n        - private: \"\"\n          lastSeen: lastSeen\n          origin: origin\n          name: name\n          description: description\n          id: id\n          status:\n            status: status\n        - private: \"\"\n          lastSeen: lastSeen\n          origin: origin\n          name: name\n          description: description\n          id: id\n          status:\n            status: status\n      properties:\n        services:\n          items:\n            $ref: '#/components/schemas/Service'\n          type: array\n      required:\n      - services\n      type: object\n    Service:\n      example:\n        private: \"\"\n        lastSeen: lastSeen\n        origin: origin\n        name: name\n        description: description\n        id: id\n        status:\n          status: status\n      properties:\n        id:\n          description: An identifier for the service, unique for the origin\n          type: string\n        name:\n          description: Name of the service\n          type: string\n        description:\n          description: Description of the service\n          type: string\n        private:\n          description: Whether or not the config is shared with the cluster\n          type: bool\n        status:\n          $ref: '#/components/schemas/ServiceStatus'\n        lastSeen:\n          description: The timestamp at which the service was last seen responding\n          type: string\n        origin:\n          description: The origin node from which this service is configured\n          type: string\n      required:\n      - id\n      - lastSeen\n      - name\n      - origin\n      - private\n      - status\n      - status\n      type: object\n    ServiceStatus:\n      example:\n        status: status\n      properties:\n        status:\n          description: The current status of the service\n          type: string\n      required:\n      - status\n      type: object\n    Monitors:\n      example:\n        monitors:\n        - service: service\n          name: name\n          description: description\n          id: id\n          type: type\n          status:\n            up: 0\n            transitioningDown: 5\n            down: 6\n            transitioningUp: 1\n            unknown: 5\n        - service: service\n          name: name\n          description: description\n          id: id\n          type: type\n          status:\n            up: 0\n            transitioningDown: 5\n            down: 6\n            transitioningUp: 1\n            unknown: 5\n      properties:\n        monitors:\n          items:\n            $ref: '#/components/schemas/Monitor'\n          type: array\n      required:\n      - monitors\n      type: object\n    Monitor:\n      example:\n        service: service\n        name: name\n        description: description\n        id: id\n        type: type\n        status:\n          up: 0\n          transitioningDown: 5\n          down: 6\n          transitioningUp: 1\n          unknown: 5\n      properties:\n        id:\n          description: An identifier for the monitor, unique for the service\n          type: string\n        name:\n          description: Name of the monitor\n          type: string\n        description:\n          description: Description of the monitor\n          type: string\n        type:\n          description: Type of the monitor\n          type: string\n        service:\n          description: The id of the parent service\n          type: string\n        status:\n          $ref: '#/components/schemas/MonitorStatus'\n      required:\n      - description\n      - id\n      - name\n      - service\n      - status\n      - type\n      type: object\n    MonitorStatus:\n      example:\n        up: 0\n        transitioningDown: 5\n        down: 6\n        transitioningUp: 1\n        unknown: 5\n      properties:\n        up:\n          description: The number of cluster members voting for up\n          type: integer\n        down:\n          description: The number of cluster members voting for down\n          type: integer\n        transitioningUp:\n          description: The number of cluster members voting for transitioning up\n          type: integer\n        transitioningDown:\n          description: The number of cluster members voting for transitioning down\n          type: integer\n        unknown:\n          description: The number of cluster members voting for unknown\n          type: integer\n      required:\n      - down\n      - transitioningDown\n      - transitioningUp\n      - unknown\n      - up\n      type: object\n    Peers:\n      example:\n        peers:\n        - bind: bind\n          name: name\n          status: status\n        - bind: bind\n          name: name\n          status: status\n      properties:\n        peers:\n          items:\n            $ref: '#/components/schemas/Peer'\n          type: array\n      required:\n      - peers\n      type: object\n    Peer:\n      example:\n        bind: bind\n        name: name\n        status: status\n      properties:\n        name:\n          description: The name of the peer\n          type: string\n        bind:\n          description: The address and port of the peer\n          type: string\n        status:\n          description: The status of the peer\n          type: string\n      required:\n      - bind\n      - name\n      - status\n      type: object\n    ErrorResponse:\n      properties:\n        error:\n          type: string\n      required:\n      - error\n      type: object\n",
			"canonicalURL": "/github.com/AlexGustafsson/upmon@16cb73584bbd168ff695c0b0684efbb2d553ce37/-/blob/api/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/AlexGustafsson/upmon/blob/16cb73584bbd168ff695c0b0684efbb2d553ce37/api/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Services\": resolve \"#/components/schemas/Services\": property \"services\": items: $ref: resolve \"#/components/schemas/Service\": property \"private\": at api/api/openapi.yaml:438:17: type: unexpected schema type: \"bool\""
}