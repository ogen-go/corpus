{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/alexjomin/openapi-parser"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 4975,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.0.1\n  title: Some cool title\n  description: Awesome description\nservers: []\npaths:\n  /pets:\n    get:\n      description: Returns all pets from the system that the user has access to\n      operationId: GetUser\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n          description: A list of pets.\n        \"302\":\n          content: {}\n          description: Trip Signals Redirection\n          headers:\n            Location:\n              description: The url to the signal API\n              schema:\n                type: string\n      tags:\n      - pet\n      parameters:\n      - in: path\n        name: deviceId\n        schema:\n          type: integer\n          enum:\n          - \"3\"\n          - \"4\"\n        required: true\n        description: Numeric ID of the user to get\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      servers:\n      - url: https://{environment}.hello.com\n        description: what up\n        variables:\n          environment:\n            default: api\n            enum:\n            - api\n            - api.dev\n            - api.staging\n            description: \"\"\n      externalDocs:\n        description: External documentation\n        url: https://{environment}-docs.hello.com\n    post:\n      description: Returns all pets from the system that the user has access to\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Pet'\n          description: Post a new pet\n      parameters: []\n      requestBody:\n        description: Pet to add to the store\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Pet'\ncomponents:\n  schemas:\n    AnonymousArray:\n      type: object\n      properties:\n        data:\n          type: array\n          items:\n            properties:\n              id:\n                type: string\n            type: object\n    AnyValue:\n      description: 'Can be anything: string, number, array, object, etc., including\n        `null`'\n    CustomString:\n      type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Pet'\n      - $ref: '#/components/schemas/WeirdCustomName'\n      - type: object\n        properties:\n          name:\n            type: string\n    EditableFoo:\n      type: object\n      properties:\n        string:\n          type: string\n    Foo:\n      type: object\n      properties:\n        string:\n          type: string\n    MapStringString: null\n    Pet:\n      required:\n      - string\n      type: object\n      properties:\n        ByteData:\n          type: string\n          format: binary\n        IntData:\n          type: object\n          additionalProperties:\n            type: integer\n        anonymous:\n          type: object\n          properties:\n            field:\n              type: string\n        children:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/Pet'\n        custom_string:\n          $ref: '#/components/schemas/CustomString'\n        enumTest:\n          type: string\n          enum:\n          - UNKNOWN\n          - MALE\n          - FEMALE\n        id:\n          type: string\n          example: f1dad44f-600a-4fe3-8ae1-fdc35f99bdb0\n        int:\n          type: integer\n        json_data:\n          type: string\n          format: binary\n        pointerOfString:\n          nullable: true\n          type: string\n        pointerOfStruct:\n          $ref: '#/components/schemas/Foo'\n        pointerOfTime:\n          nullable: true\n          type: string\n          format: date-time\n        sliceOfStruct:\n          type: array\n          items:\n            $ref: '#/components/schemas/Foo'\n        sliceofInt:\n          type: array\n          items:\n            type: integer\n        sliceofSliceofFloat:\n          type: array\n          items:\n            items:\n              type: number\n            type: array\n        sliceofString:\n          type: array\n          items:\n            type: string\n        strData:\n          type: object\n          additionalProperties:\n            type: string\n        string:\n          type: string\n          example: Some String Example\n        struct:\n          $ref: '#/components/schemas/Foo'\n        test:\n          $ref: '#/components/schemas/Test'\n        time:\n          type: string\n          format: date-time\n        weird_int:\n          $ref: '#/components/schemas/WeirdInt'\n    Signals:\n      type: array\n      items:\n        $ref: '#/components/schemas/Foo'\n    Test:\n      type: integer\n    WeirdCustomName:\n      type: object\n      properties:\n        some_string:\n          type: string\n    WeirdInt:\n      type: integer\n      example: 42\nx-tagGroups: []\n",
			"canonicalURL": "/github.com/alexjomin/openapi-parser@149c4f9be52f13157d10a6ceb8387e04059c1123/-/blob/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/alexjomin/openapi-parser/blob/149c4f9be52f13157d10a6ceb8387e04059c1123/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /pets: get: operation \"GetUser\": parameters: parse parameter \"deviceId\": schema: parse enum values: parse value \"\\\"3\\\"\": expected type \"integer\", got \"string\""
}