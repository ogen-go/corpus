{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/davidmoten/openapi-to-plantuml"
		},
		"file": {
			"name": "news.yml",
			"size": 0,
			"path": "src/test/resources/demo/news.yml",
			"byteSize": 18411,
			"content": "openapi: 3.0.0\ninfo:\n  description: \u003e\n    NewsRPM is a Cloud News Platform for the ingestion processing, storing,\n    indexing, and distribution of news articles \u0026 other textual content.\n    \u003cbr\u003e\u003cbr\u003e\n    Please see the taxonomy reference for all of the metadata which articles can be queried by\u003cbr\u003e\n    \u003ca href=\"https://docs.google.com/spreadsheets/d/1KaYaFE8mzHlyiPoSX9ImnWzPwy0xeKOdmTR90lArV_E/edit#gid=451665458\"\u003eLatest Taxonomy\u003c/a\u003e\n    \u003cbr\u003e\n  version: \"2.0.0\"\n  title: NewsRPM Platform\n  termsOfService: 'https://www.cloudquote.io/terms/'\n  contact:\n    email: sales@financialcontent.com\npaths:\n  /search/indexedData:\n    post:\n      tags:\n        - Search for Articles\n      summary: \u003e-\n        Searches the article index for articles tagged with certain\n        keywords/topics/ticker symbols/etc.\n      operationId: searchIndexedData\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/multipleArticleResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/indexSearchQuery'\n            examples:\n              fullExample:\n                summary: Full Example Using All Parameter\n                value:\n                  key: NormalizedTicker\n                  value: GOOG\n                  offset: 0\n                  count: 25\n                  minDate: '2020-07-10T12:27:28.000Z'\n                  maxDate: '2020-07-09T12:27:28.000Z'\n                  order: date\n                description: Retrieves all articles for GOOG between two dates\n              searchByTicker:\n                summary: Search By Normalized Ticker\n                value:\n                  key: NormalizedTicker\n                  value: GOOG\n                description: The NormalizedTicker index references articles based upon the Stock Ticker Symbols mentioned in the article, which have been normalized. For US Stock Tickers, the ticker is given explicitly - i.e. GOOG, AAPL, IBM. For International ticker symbols, the ticker symbol is always prefixed - for example, LSE:RDS.A\n              searchByTickerType:\n                summary: Search By Normalized Ticker \u0026 Type\n                value:\n                  key: NormalizedTicker-Type\n                  value: GOOG-Press Release\n                description: Works the same as the NormalizedTicker index, except the 'type' field of the article is joined to the end of the value using a '-' character. Common types of articles are Press Release, News, Paid Placement\n              searchByCommodity:\n                summary: Search By Commodity Name\n                value:\n                  key: commodities\n                  value: Coal\n                description: 'Searches for articles mentioning a specific commodity, for example: Coal, Cocoa, Coffee'\n              searchByCurrency:\n                summary: Search By Currency\n                value:\n                  key: currencies\n                  value: USD\n                description: 'Searches for articles mentioning a specific currency, for example: USD, EUR, CHF, etc.'\n              searchByEarnings:\n                summary: Search By Earnings Beat/Miss\n                value:\n                  key: earnings\n                  value: Beat\n                description: Searches for articles indicating a company missed, beat, or matched earnings estimates. Value is either Beat, Match, or Miss\n              searchBySales:\n                summary: Search By Sales Beat/Miss\n                value:\n                  key: sales\n                  value: Beat\n                description: Searches for articles indicating a company missed, beat, or matched sales/revenue estimates. Value is either Beat, Match, or Miss\n              searchByExposure:\n                summary: Search By Risk/Exposure\n                value:\n                  key: exposure\n                  value: Boeing 737\n                description: 'Searches for articles mentioning a risk exposure, for example: Boeing 737, COVID-19, Firearms, Glyphosate'\n              searchByRegion:\n                summary: Search By World Region\n                value: \n                  key: region\n                  value: Afghanistan\n                description: 'Searches for articles mentioning a certain region, for example: Middle East, Afghanistan, Europe, Russia, etc. More specific regions are also indexed in less specific regions - for example all articles mentioning Germany are also indexed in the Europe region'\n              searchByTopic:\n                summary: Search By Topic\n                value:\n                  key: topic\n                  value: Cannabis\n                description: Searches for articles mentioning a specific topic - for example, Cannabis, Brexit, Product Recall, World Trade\n        description: Search Query\n        required: true\n  /search/article:\n    post:\n      tags:\n        - Search for Articles\n      summary: 'Searches for articles by publisher, type, etc.'\n      operationId: searchArticle\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/multipleArticleResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/articleSearchQuery'\n            examples:\n              searchPressRelease:\n                summary: Searches for the latest 25 press releases\n                value:\n                  type: Press Release\n                  count: 25\n                  offset: 0\n                \n        description: Search Query\n        required: true\n  /article/{slug}:\n    get:\n      tags:\n        - Retrieve Articles\n      summary: 'Retrieves article by the unique slug identifier'\n      operationId: retrieveArticleBySlug\n      parameters:\n        - in: path\n          name: slug\n          schema:\n            type: string\n          required: true\n          description: The unique slug identifier of the article to retrieve\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/singleArticleResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n  /article/{id}:\n    get:\n      tags:\n        - Retrieve Articles\n      summary: 'Retrieves article by the local article id number'\n      operationId: retrieveArticleById\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: integer\n          required: true\n          description: The unique local identifier of the article to retrieve. This id is not unique, and does not correlate across news engine instances\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                items:\n                  $ref: '#/components/schemas/singleArticleResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n  '/body/{bodyId}':\n    get:\n      tags:\n        - Retrieve Article Body\n      summary: Retrieves an Article Body, in the providers native format. The article body may be in an arbitrary format such as HTML, NITF, PDF, etc.\n      parameters:\n        - in: path\n          name: bodyId\n          schema:\n            type: string\n          required: true\n          description: Body ID of the article body to retrieve\n      operationId: retrieveBody\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/articleBodyResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n  '/body/{bodyId}/render':\n    get:\n      tags:\n        - Retrieve Article Body\n      summary: Retrieves an Article Body, and renders it into HTML if it is in another format such as NITF, PDF, etc.\n      parameters:\n        - in: path\n          name: bodyId\n          schema:\n            type: string\n          required: true\n          description: Body ID of the article body to retrieve\n      operationId: renderBody\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/articleBodyResponse'\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n  /article:\n    post:\n      tags:\n        - Upload Article [Admin]\n      summary: \u003e-\n        Uploads and article into your news instance\n      operationId: uploadArticle\n      responses:\n        '200':\n          description: Successful Operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    description: True if the operation was a success\n                  id:\n                    type: integer\n                    description: The local id number the article was assigned in the news instance it was uploaded to\n                required: [success,id]\n        '400':\n          description: Bad Request\n        '403':\n          description: Invalid Authorization\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/article'\n        description: Article to Upload\n        required: true\nsecurity:\n  - private_key_auth: []\n  - public_key_auth: []\n  - header_private_key_auth: []\n  - header_public_key_auth: []\nservers:\n  - url: 'https://api.newsrpm.com'\n  - url: 'http://api.newsrpm.com'\ncomponents:\n  securitySchemes:\n    header_private_key_auth:\n      type: http\n      scheme: privateKey\n    header_public_key_auth:\n      type: http\n      scheme: publicKey\n    public_key_auth:\n      type: apiKey\n      in: query\n      name: P\n    private_key_auth:\n      type: apiKey\n      in: query\n      name: T\n  schemas:\n    indexSearchQuery:\n      type: object\n      required: [key]\n      properties:\n        key:\n          type: string\n          description: An Index Key is a specifier used to identify which index you would like to query from\n        value:\n          oneOf: \n            - type: string\n            - type: array\n              items: \n                type: string\n          description: The value to look up in the Index\n        count:\n          type: integer\n          format: int32\n          default: 0\n          description: The number of articles to return\n        offset:\n          type: integer\n          format: int32\n          default: 25\n          description: How many articles to skip before returning results\n        minDate:\n          type: string\n          format: date-time\n          description: The earliest date to return articles for, inclusive\n        maxDate:\n          type: string\n          format: date-time\n          description: The latest date to return articles for, inclusive\n        order:\n          type: string\n          default: date\n          enum:\n            - date\n            - dateWithQuality\n          description: 'Field to sort the results by.\u003cbr\u003e\u003cbr\u003e\n              For Example: \u003cbr\u003e\n              - date: Sorts the results by date, newest to oldest\u003cbr\u003e\n              - dateWithQuality: Sorts the results by date, re-ordering the results based upon the quality of an article. For each 1.0 point of quality, the article is moved up 1 hour in the index, moving it above newer articles by an hour.\n            '\n    articleSearchQuery:\n      type: object\n      properties:\n        publisher:\n          oneOf: \n            - type: string\n            - type: array\n              items: \n                type: string\n          description: The name of the publisher to search for\n        provider:\n          oneOf: \n            - type: string\n            - type: array\n              items: \n                type: string\n          description: The name of the provider to search for\n        fullText:\n          type: string\n          description: A full text query to execute against the article headline\n        type:\n          oneOf: \n            - type: string\n            - type: array\n              items: \n                type: string\n          description: The type of article to search for\n        count:\n          type: integer\n          format: int32\n          description: The number of articles to return\n        offset:\n          type: integer\n          format: int32\n          description: How many articles to skip before returning results\n        minDate:\n          type: string\n          format: date-time\n          description: The earliest date to return articles for, inclusive\n        maxDate:\n          type: string\n          format: date-time\n          description: The latest date to return articles for, inclusive\n        language:\n          type: string\n          description: Filter results based upon the language the article is in\n    article:\n      type: object\n      required:\n        - provider\n        - headline\n        - slug\n        - date\n        - visibility\n        - quality\n      properties:\n        provider:\n          type: string\n          description: The syndication partner that provided the article\n        publisher:\n          type: string\n          description: The actual publisher of the article if it can be determined\n        headline:\n          type: string\n          description: The headline of the article\n        link:\n          type: string\n          format: url\n          description: The URL of the article\n        date:\n          type: string\n          format: date-time\n          description: The timestamp of the article\n        expires:\n          type: string\n          format: date-time\n          description: The expiration date for the article\n        slug:\n          type: string\n          description: The unique identifier for the article\n        summary:\n          type: string\n          description: The summary of the article\n          format: html\n        firstParagraph:\n          type: string\n          description: The first paragraph of the article\n          format: html\n        bodyId:\n          type: string\n          description: \u003e\n            A unique identifier used to retrieve the article body To retrieve\n            the body of the article, pass this ID to the /body/{bodyId} Endpoint\n        language:\n          type: string\n          description: The language that the article is written in\n        visiblity:\n          type: string\n          enum:\n            - draft\n            - embargo\n            - published\n            - retracted\n          default: published\n          description: \u003e\n            The visiblity of the article Most clients are subscribed only to\n            “published” articles, so this can typically be ignored unless you\n            are specifically looking for hidden articles\n        quality:\n          type: integer\n          description: \u003e\n            A quality score for the article. Quality scores can be used to rank\n            articles against each other, and the algorithm for scoring is\n            customized for each customers use case. The default score is zero,\n            and may be above or below zero depending on the quality algorithm\n            selected, or always zero if no quality score is selected.\n          default: 0.0\n        metaData:\n          type: object\n          description: \u003e\n            A collection of metadata about the article, such as categories,\n            tickers, etc. in a provider specific format\n        normalizedData:\n          type: object\n          description: \u003e\n            A collection of metadata about the article, such as categories,\n            tickers, etc.\n    multipleArticleResponse:\n      type: object\n      required:\n        - success\n        - rows\n      properties:\n        success:\n          type: boolean\n        rows:\n          type: array\n          items:\n            $ref: '#/components/schemas/article'\n    singleArticleResponse:\n      type: object\n      required:\n        - success\n        - doc\n      properties:\n        success:\n          type: boolean\n        doc:\n          $ref: '#/components/schemas/article'\n    articleBodyResponse:\n      type: object\n      required:\n        - success\n        - rows\n      properties:\n        success:\n          type: boolean\n        body:\n          type: object\n          required: [v,chunks]\n          properties:\n            v:\n              type: number\n              description: Version of the article body, 1.0 for this specification of the article body\n            chunks:\n              type: array\n              description: An array of chunks that represent the article body. Chunks should typically be displayed in the order received, although some clients may prefer to rearrange chunks, such as to put any videos or photos at the top of the page\n              items:\n                $ref: '#/components/schemas/articleBodyChunk'\n    articleBodyChunk:\n      type: object\n      description: A named chunk of the article body\n      required: [name,format,content]\n      properties:\n        name:\n          type: string\n          description: The name of the chunk, as determined by the provider\n        format:\n          type: string\n          format: mime-type\n          description: The format of the chunk, expressed as a mime type. Most chunks will have a format of text/html\n        content:\n          type: string\n          description: The content of the chunk. For text/html format, this would be a string containing the HTML for the chunk"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /article/{slug}: get: operation \"retrieveArticleBySlug\": responses: 200: content: \"application/json\": schema: parse schema: object cannot contain 'items' field"
}