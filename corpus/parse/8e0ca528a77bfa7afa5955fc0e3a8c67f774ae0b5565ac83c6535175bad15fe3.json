{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Yelp/paasta"
		},
		"file": {
			"name": "oapi.yaml",
			"size": 0,
			"path": "paasta_tools/api/api_docs/oapi.yaml",
			"byteSize": 59410,
			"content": "# Please run `make openapi-codegen` after modifying this file\nopenapi: 3.0.0\ninfo:\n  title: Paasta API\n  version: 1.0.0\nservers:\n- url: \"{scheme}://{host}/{basePath}\"\n  variables:\n    basePath: {default: v1}\n    host: {default: localhost}\n    scheme: {default: http, enum: [http, https]}\ntags:\n- description: Information about a paasta service.\n  name: service\ncomponents:\n  schemas:\n    AutoscalerCountMsg:\n      description: Specification for autoscaler count endpoints\n      properties:\n        calculated_instances:\n          type: integer\n        desired_instances:\n          type: integer\n        status:\n          type: string\n      type: object\n    AdhocLaunchHistory:\n      description: A single run\n      properties:\n        framework_id:\n          description: framework id\n          type: string\n        launch_time:\n          description: when the job was launched\n          type: string\n        run_id:\n          description: id of the single run\n          type: string\n      type: object\n    DeployQueue:\n      description: Current state of the deployd queue\n      properties:\n        available_service_instances:\n          description: Service instances that are ready to be acted on by deployd\n          items:\n            $ref: '#/components/schemas/DeployQueueServiceInstance'\n          type: array\n        unavailable_service_instances:\n          description: Service instances that deployd is waiting to act on\n          items:\n            $ref: '#/components/schemas/DeployQueueServiceInstance'\n          type: array\n      type: object\n    DeployQueueServiceInstance:\n      description: An instance of a service in the deploy queue\n      properties:\n        bounce_by:\n          description: Desired timestamp by which the service instance should be bounced\n          format: float\n          type: number\n        bounce_start_time:\n          description: Timestamp at which service instance was first added to the\n            queue\n          format: float\n          type: number\n        enqueue_time:\n          description: Timestamp at which the service instance was last added to the\n            queue\n          format: float\n          type: number\n        failures:\n          description: Number of times deployment actions have failed on this service\n            instance\n          format: int32\n          type: integer\n        instance:\n          description: Name of the instance of the service\n          type: string\n        processed_count:\n          description: Number of times any deployment action has been taken on this\n            service instance\n          format: int32\n          type: integer\n        service:\n          description: Name of the service\n          type: string\n        wait_until:\n          description: Timestamp before which no action should be taken on this service\n            instance\n          format: float\n          type: number\n        watcher:\n          description: The process that enqueued the task\n          type: string\n      type: object\n    EnvoyBackend:\n      properties:\n        address:\n          description: Address of the host on which the backend is running\n          type: string\n        eds_health_status:\n          description: Status of the backend in Envoy as reported by the EDS\n          type: string\n        has_associated_task:\n          description: Whether this backend has an associated task running\n          type: boolean\n        hostname:\n          description: Name of the host on which the backend is running\n          type: string\n        port_value:\n          description: Port number on which the backend responds\n          format: int32\n          type: integer\n        weight:\n          description: The weight of this backend in the cluster\n          format: int32\n          type: integer\n      type: object\n    EnvoyLocation:\n      properties:\n        backends:\n          description: Envoy backends running in this location\n          items:\n            $ref: '#/components/schemas/EnvoyBackend'\n          type: array\n        is_proxied_through_casper:\n          description: Whether this backend is proxied through Casper\n          type: boolean\n        name:\n          description: Name of the location\n          type: string\n        running_backends_count:\n          description: Number of running backends for the service in this location\n          format: int32\n          type: integer\n      type: object\n    EnvoyStatus:\n      properties:\n        expected_backends_per_location:\n          description: Number of backends expected to be present in each location\n          format: int32\n          type: integer\n        locations:\n          description: Locations the service is deployed\n          items:\n            $ref: '#/components/schemas/EnvoyLocation'\n          type: array\n        registration:\n          description: Registration name of the service in Smartstack\n          type: string\n      type: object\n    FlinkConfig:\n      properties:\n        flink-version:\n          type: string\n        flink-revision:\n          type: string\n      type: object\n    FlinkClusterOverview:\n      properties:\n        taskmanagers:\n          description: Number of taskmanagers in the cluster\n          type: integer\n          format: int32\n        slots-total:\n          description: Total task slots in the cluster\n          type: integer\n          format: int32\n        slots-available:\n          description: Available task slots\n          type: integer\n          format: int32\n        jobs-running:\n          description: Number of flink jobs in running state\n          type: integer\n          format: int32\n        jobs-finished:\n          description: Number of flink jobs in finished state\n          type: integer\n          format: int32\n        jobs-cancelled:\n          description: Number of flink jobs in cancelled state\n          type: integer\n          format: int32\n        jobs-failed:\n          description: Number of flink jobs in failed state\n          type: integer\n          format: int32\n      type: object\n    FlinkJob:\n      properties:\n        id:\n          type: string\n          description: ID of the flink job\n        status:\n          enum:\n            - INITIALIZING\n            - CREATED\n            - RUNNING\n            - FAILING\n            - FAILED\n            - CANCELLING\n            - CANCELED\n            - FINISHED\n            - RESTARTING\n            - SUSPENDED\n            - RECONCILING\n          type: string\n      type: object\n    FlinkJobDetails:\n      properties:\n        jid:\n          type: string\n          description: ID of the flink job\n        name:\n          type: string\n          description: name of the flink job\n        state:\n          description: state of the flink job\n          enum:\n            - INITIALIZING\n            - CREATED\n            - RUNNING\n            - FAILING\n            - FAILED\n            - CANCELLING\n            - CANCELED\n            - FINISHED\n            - RESTARTING\n            - SUSPENDED\n            - RECONCILING\n          type: string\n        start-time:\n          description: timestamp of job start time\n          format: float\n          type: number\n      type: object\n    FlinkJobs:\n      properties:\n        jobs:\n          items:\n            $ref: '#/components/schemas/FlinkJob'\n          description: Flink jobs\n          type: array\n    FloatAndError:\n      properties:\n        error_message:\n          type: string\n        value:\n          format: float\n          type: number\n      type: object\n    HPAMetric:\n      properties:\n        current_value:\n          description: setpoint/target_value as specified in yelpsoa_configs\n          type: string\n        name:\n          description: name of the metric\n          type: string\n        target_value:\n          description: setpoint/target_value as specified in yelpsoa_configs\n          type: string\n      type: object\n    InstanceBounceStatus:\n      properties:\n        active_shas:\n          type: array\n          description: List of git/config SHAs running.\n          items:\n            type: array\n            items:\n              type: string\n              nullable: true\n        active_versions:\n          type: array\n          description: List of git SHA/image_version/config SHAs running.\n          items:\n            type: array\n            items:\n              type: string\n              nullable: true\n        app_count:\n          description: The number of different running versions of the same service\n            (0 for stopped, 1 for running and 1+ for bouncing)\n          format: int32\n          type: integer\n        deploy_status:\n          description: Deploy status of a Kubernetes service\n          enum:\n          - Running\n          - Deploying\n          - Stopped\n          - Delayed\n          - Waiting\n          - NotRunning\n          type: string\n        desired_state:\n          description: Desired state of a service, for Kubernetes\n          enum:\n          - start\n          - stop\n          type: string\n        expected_instance_count:\n          description: The number of desired instances of the service\n          format: int32\n          type: integer\n        running_instance_count:\n          description: The number of actual running instances of the service\n          format: int32\n          type: integer\n      type: object\n    InstanceDelay:\n      type: object\n    InstanceMeshStatus:\n      properties:\n        instance:\n          description: Instance name\n          type: string\n        service:\n          description: Service name\n          type: string\n        smartstack:\n          $ref: '#/components/schemas/SmartstackStatus'\n          description: Status of the service in smartstack\n        envoy:\n          $ref: '#/components/schemas/EnvoyStatus'\n          description: Status of the service in Envoy\n      type: object\n    InstanceMetadataKafkaCluster:\n      description: Kafka instance metadata\n      type: object\n    InstanceSpecKafkaCluster:\n      description: Kafka instance spec\n      type: object\n    InstanceMetadataCassandraCluster:\n      description: Cassandra instance metadata\n      type: object\n    InstanceSpecCassandraCluster:\n      description: Cassandra instance spec\n      type: object\n    InstanceStatus:\n      properties:\n        adhoc:\n          $ref: '#/components/schemas/InstanceStatusAdhoc'\n          description: Adhoc instance status\n        flink:\n          description: Nullable Flink instance status and metadata\n          properties:\n            metadata:\n              $ref: '#/components/schemas/InstanceStatusFlinkMetadata'\n            status:\n              $ref: '#/components/schemas/InstanceStatusFlinkStatus'\n          type: object\n        git_sha:\n          description: Git sha of a service\n          type: string\n        version:\n          description: Deployment Version of a service\n          type: string\n        instance:\n          description: Instance name\n          type: string\n        cassandracluster:\n          description: Nullable CassandraCluster instance status and metadata\n          properties:\n            metadata:\n              $ref: '#/components/schemas/InstanceMetadataCassandraCluster'\n            status:\n              $ref: '#/components/schemas/InstanceStatusCassandraCluster'\n          type: object\n        kafkacluster:\n          description: Nullable KafkaCluster instance status and metadata\n          properties:\n            metadata:\n              $ref: '#/components/schemas/InstanceMetadataKafkaCluster'\n            status:\n              $ref: '#/components/schemas/InstanceStatusKafkaCluster'\n          type: object\n        kubernetes:\n          $ref: '#/components/schemas/InstanceStatusKubernetes'\n          description: Kubernetes instance status\n        kubernetes_v2:\n          $ref: '#/components/schemas/InstanceStatusKubernetesV2'\n          description: Kubernetes instance status\n        marathon:\n          $ref: '#/components/schemas/InstanceStatusMarathon'\n          description: Marathon instance status\n        service:\n          description: Service name\n          type: string\n        tron:\n          $ref: '#/components/schemas/InstanceStatusTron'\n          description: Tron instance status\n      type: object\n    InstanceStatusAdhoc:\n      description: List of runs associated with job\n      items:\n        $ref: '#/components/schemas/AdhocLaunchHistory'\n      type: array\n    InstanceStatusFlinkMetadata:\n      description: Flink instance metadata\n      type: object\n    InstanceStatusFlinkStatus:\n      description: Flink instance status\n      type: object\n    InstanceStatusCassandraCluster:\n      description: Cassandra instance status\n      type: object\n    InstanceStatusKafkaCluster:\n      description: Kafka instance status\n      type: object\n    InstanceStatusKubernetes:\n      properties:\n        active_shas:\n          type: array\n          description: List of git/config SHAs running.\n          items:\n            type: array\n            items:\n              type: string\n              nullable: true\n            minItems: 2\n            maxItems: 2\n        active_versions:\n          type: array\n          description: List of git SHA/image_version/config SHAs running.\n          items:\n            type: array\n            items:\n              type: string\n              nullable: true\n            minItems: 3\n            maxItems: 3\n        app_count:\n          description: The number of different running versions of the same service\n            (0 for stopped, 1 for running and 1+ for bouncing)\n          format: int32\n          type: integer\n        app_id:\n          description: ID of the desired version of a service instance\n          type: string\n        autoscaling_status:\n          description: HPA associated to this app\n          properties:\n            desired_replicas:\n              description: desired number of _instances as calculated by HPA\n              type: integer\n            last_scale_time:\n              description: timestamp of last autoscale\n              type: string\n            max_instances:\n              description: max_instances as specified in yelpsoa_configs\n              type: integer\n            metrics:\n              description: Current metrics\n              items:\n                $ref: '#/components/schemas/HPAMetric'\n              type: array\n            min_instances:\n              description: min_instances as specified in yelpsoa_configs\n              type: integer\n          type: object\n        backoff_seconds:\n          description: backoff in seconds before launching the next task\n          format: int32\n          type: integer\n        bounce_method:\n          description: Method to transit between new and old versions of a service\n          enum:\n          - brutal\n          - upthendown\n          - downthenup\n          - crossover\n          type: string\n        create_timestamp:\n          description: Unix timestamp when this app was created\n          format: float\n          type: number\n        deploy_status:\n          description: Deploy status of a Kubernetes service\n          enum:\n          - Running\n          - Deploying\n          - Stopped\n          - Delayed\n          - Waiting\n          - NotRunning\n          type: string\n        deploy_status_message:\n          description: Reason for the deploy status\n          type: string\n        desired_state:\n          description: Desired state of a service, for Kubernetes\n          enum:\n          - start\n          - stop\n          type: string\n        error_message:\n          description: Error message when a kubernetes object (Deployment/Statefulset)\n            cannot be found\n          type: string\n        expected_instance_count:\n          description: The number of desired instances of the service\n          format: int32\n          type: integer\n        namespace:\n          description: The namespace this app is running\n          type: string\n        pods:\n          description: Pods associated to this app\n          items:\n            $ref: '#/components/schemas/KubernetesPod'\n          type: array\n        replicasets:\n          description: ReplicaSets associated to this app\n          items:\n            $ref: '#/components/schemas/KubernetesReplicaSet'\n          type: array\n        running_instance_count:\n          description: The number of actual running instances of the service\n          format: int32\n          type: integer\n        smartstack:\n          $ref: '#/components/schemas/SmartstackStatus'\n          description: Status of the service in smartstack\n        envoy:\n          $ref: '#/components/schemas/EnvoyStatus'\n          description: Status of the service in Envoy\n        evicted_count:\n          description: Number of pods with status reason \"Evicted\"\n          type: integer\n          format: int32\n      required:\n      - desired_state\n      - app_count\n      - bounce_method\n      type: object\n    InstanceStatusKubernetesV2:\n      type: object\n      properties:\n        app_name:\n          description: Name of Kubernetes Deployment or Statefulset for instance\n          type: string\n        autoscaling_status:\n          description: HPA associated to this app\n          properties:\n            desired_replicas:\n              description: desired number of _instances as calculated by HPA\n              type: integer\n            last_scale_time:\n              description: timestamp of last autoscale\n              type: string\n            max_instances:\n              description: max_instances as specified in yelpsoa_configs\n              type: integer\n            metrics:\n              description: Current metrics\n              items:\n                $ref: '#/components/schemas/HPAMetric'\n              type: array\n            min_instances:\n              description: min_instances as specified in yelpsoa_configs\n              type: integer\n          type: object\n        desired_state:\n          description: Desired state of the app (start or stop)\n          type: string\n        desired_instances:\n          description: Number of instances desired for this app\n          type: integer\n          format: int32\n        error_message:\n          description: Error message if we cannot assemble status for the instance\n          type: string\n        versions:\n          description: Individual versions of the instance\n          items:\n            $ref: '#/components/schemas/KubernetesVersion'\n          type: array\n        envoy:\n          $ref: '#/components/schemas/EnvoyStatus'\n          description: Status of the service in Envoy\n    InstanceStatusMarathon:\n      properties:\n        active_shas:\n          type: array\n          description: List of git/config SHAs running.\n          items:\n            type: array\n            items:\n              type: string\n              nullable: true\n            minItems: 2\n            maxItems: 2\n        active_versions:\n          type: array\n          description: List of git SHA/image_version/config SHAs running.\n          items:\n            type: array\n            items:\n              type: string\n              nullable: true\n            minItems: 3\n            maxItems: 3\n        app_count:\n          description: The number of different running versions of the same service\n            (0 for stopped, 1 for running and 1+ for bouncing)\n          format: int32\n          type: integer\n        app_statuses:\n          description: Statuses of each app of the service\n          items:\n            $ref: '#/components/schemas/MarathonAppStatus'\n          type: array\n        autoscaling_info:\n          $ref: '#/components/schemas/MarathonAutoscalingInfo'\n          description: Autoscaling information for the service\n        backoff_seconds:\n          description: backoff in seconds before launching the next task\n          format: int32\n          type: integer\n        bounce_method:\n          description: Method to transit between new and old versions of a service\n          enum:\n          - brutal\n          - upthendown\n          - downthenup\n          - crossover\n          type: string\n        deploy_status:\n          description: Deploy status of a marathon service\n          enum:\n          - Running\n          - Deploying\n          - Stopped\n          - Delayed\n          - Waiting\n          - Waiting for bounce\n          - NotRunning\n          type: string\n        desired_app_id:\n          description: ID of the desired version of a service instance\n          type: string\n        app_id:\n          description: ID of the current version of a service instance\n          type: string\n        desired_state:\n          description: Desired state of a service, for Marathon\n          enum:\n          - start\n          - stop\n          type: string\n        envoy:\n          $ref: '#/components/schemas/EnvoyStatus'\n          description: Status of the service in Envoy\n        error_message:\n          description: Error message when a marathon job ID cannot be found\n          type: string\n        expected_instance_count:\n          description: The number of desired instances of the service\n          format: int32\n          type: integer\n        mesos:\n          $ref: '#/components/schemas/MarathonMesosStatus'\n          description: Status of the service in Mesos\n        running_instance_count:\n          description: The number of actual running instances of the service\n          format: int32\n          type: integer\n        smartstack:\n          $ref: '#/components/schemas/SmartstackStatus'\n          description: Status of the service in smartstack\n      required:\n      - desired_state\n      - app_count\n      - bounce_method\n      type: object\n    InstanceStatusTron:\n      properties:\n        action_command:\n          description: The command of the action\n          type: string\n        action_name:\n          description: The name of the action\n          type: string\n        action_raw_command:\n          description: The raw command of the action\n          type: string\n        action_start_time:\n          description: The start time of the action\n          type: string\n        action_state:\n          description: The state of the action\n          type: string\n        action_stderr:\n          description: The stderr command of the action\n          type: string\n        action_stdout:\n          description: The stdout command of the action\n          type: string\n        job_name:\n          description: The name of this job\n          type: string\n        job_schedule:\n          description: The job schedule of the job\n          type: string\n        job_status:\n          description: The status of the job\n          type: string\n        job_url:\n          description: The dashboard url of the job\n          type: string\n      required:\n      - job_name\n      - job_url\n      type: object\n    InstanceTask:\n      type: object\n    InstanceTasks:\n      description: List of tasks associated with instance\n      items:\n        $ref: '#/components/schemas/InstanceTask'\n      type: array\n    IntegerAndError:\n      properties:\n        error_message:\n          type: string\n        value:\n          format: int32\n          type: integer\n      type: object\n    KubernetesContainer:\n      properties:\n        name:\n          description: Name of the container\n          type: string\n        tail_lines:\n          $ref: '#/components/schemas/TaskTailLines'\n          description: Stdout and stderr tail of the container\n      type: object\n    KubernetesContainerV2:\n      properties:\n        name:\n          description: Name of the container\n          type: string\n        state:\n          description: State of the container\n          type: string\n        last_state:\n          description: Previous state of the container\n          type: string\n          nullable: true\n        restart_count:\n          description: Number of restarts since container creation\n          type: integer\n          nullable: true\n        reason:\n          description: Short description of the state of container\n          type: string\n          nullable: true\n        message:\n          description: Details about the state of container\n          type: string\n          nullable: true\n        last_reason:\n          description: Short description of the previous state of container\n          type: string\n          nullable: true\n        last_message:\n          description: Details about state of container\n          type: string\n          nullable: true\n        last_duration:\n          description: Duration in seconds of previous state\n          format: float\n          type: number\n          nullable: true\n        last_timestamp:\n          description: Unix timestamp at which last state began\n          format: float\n          type: number\n          nullable: true\n        previous_tail_lines:\n          $ref: '#/components/schemas/TaskTailLines'\n          description: Previous container's stdout and stderr tail\n          nullable: true\n        timestamp:\n          description: Unix timestamp at which current state began\n          format: float\n          type: number\n          nullable: true\n        healthcheck_grace_period:\n          description: Time in seconds for healthcheck grace period, 0 otherwise\n          format: int32\n          type: integer\n        healthcheck_cmd:\n          description: Healthcheck for this pod\n          $ref: '#/components/schemas/KubernetesHealthcheck'\n          nullable: true\n        tail_lines:\n          $ref: '#/components/schemas/TaskTailLines'\n          description: Stdout and stderr tail of the container\n      type: object\n    KubernetesHealthcheck:\n      type: object\n      properties:\n        http_url:\n          type: string\n          nullable: true\n        tcp_port:\n          type: string\n          nullable: true\n        cmd:\n          type: string\n          nullable: true\n    KubernetesPod:\n      properties:\n        containers:\n          items:\n            $ref: '#/components/schemas/KubernetesContainer'\n            description: List of containers in the pod\n          type: array\n        deployed_timestamp:\n          description: Time at which the pod was deployed\n          format: float\n          type: number\n        host:\n          description: name of the pod's host\n          nullable: true\n          type: string\n        message:\n          description: long message explaining the pod's state\n          nullable: true\n          type: string\n        name:\n          description: name of the pod in Kubernetes\n          type: string\n        phase:\n          nullable: true\n          description: The status of the pod\n          type: string\n        ready:\n          description: Whether or not the pod is ready (i.e. all containers up)\n          type: boolean\n        reason:\n          description: short message explaining the pod's state\n          nullable: true\n          type: string\n        events:\n          description: Kubernetes pod events\n          type: array\n          items:\n            $ref: '#/components/schemas/KubernetesPodEvent'\n      type: object\n    KubernetesPodV2:\n      properties:\n        name:\n          description: Pod name\n          type: string\n        ip:\n          description: Pod IP\n          type: string\n          nullable: true\n        host:\n          description: Host IP this pod was scheduled on\n          type: string\n          nullable: true\n        create_timestamp:\n          description: Unix timestamp at which pod was created\n          format: float\n          type: number\n        delete_timestamp:\n          description: Unix timestamp at which pod should be deleted\n          format: float\n          type: number\n          nullable: true\n        phase:\n          description: The lifecycle phase of the pod\n          type: string\n        ready:\n          description: Whether or not the pod is ready in Kubernetes\n          type: boolean\n        mesh_ready:\n          description: Whether or not the pod is ready in the service mesh\n          type: boolean\n          nullable: true\n        scheduled:\n          description: Whether or not the pod is scheduled\n          type: boolean\n        reason:\n          description: brief description of the pod's state\n          nullable: true\n          type: string\n        message:\n          description: short message with details about the pod's state\n          nullable: true\n          type: string\n        events:\n          description: Kubernetes pod events\n          type: array\n          items:\n            $ref: '#/components/schemas/KubernetesPodEvent'\n        containers:\n          items:\n            $ref: '#/components/schemas/KubernetesContainerV2'\n            description: List of containers in the pod\n          type: array\n      type: object\n    KubernetesPodEvent:\n      type: object\n      properties:\n        message:\n          type: string\n        timeStamp:\n          type: string\n        error:\n          type: string\n          nullable: true\n    KubernetesReplicaSet:\n      properties:\n        create_timestamp:\n          description: Time at which the replicaset was created\n          format: float\n          type: number\n        name:\n          description: name of the replicaset in Kubernetes\n          type: string\n        ready_replicas:\n          description: number of ready replicas for the replicaset\n          format: int32\n          type: integer\n        replicas:\n          description: number of desired replicas for the replicaset\n          format: int32\n          type: integer\n        git_sha:\n          description: Git sha of a service\n          type: string\n          nullable: true\n        config_sha:\n          description: Hash of configuration of this replicaset\n          type: string\n          nullable: true\n      type: object\n    KubernetesVersion:\n      properties:\n        type:\n          description: Type of version (ReplicaSet or ControllerRevision)\n          type: string\n        create_timestamp:\n          description: Unix timestamp when version was created\n          format: float\n          type: number\n        git_sha:\n          description: Git SHA of service code for this version of the instance\n          type: string\n        image_version:\n          description: Additional metadata identifying the image used for this\n            version of the instance\n          type: string\n          nullable: true\n        config_sha:\n          description: SHA of configuration for this instance\n          type: string\n        name:\n          description: Name of the version (only valid for ReplicaSets)\n          type: string\n        pods:\n          description: Pods associated to this version\n          items:\n            $ref: '#/components/schemas/KubernetesPodV2'\n          type: array\n        replicas:\n          description: Desired number of replicas for this version\n          format: int32\n          type: integer\n        ready_replicas:\n          description: Number of replicas currently ready\n          format: int32\n          type: integer\n      type: object\n    MarathonAppStatus:\n      properties:\n        backoff_seconds:\n          description: Backoff in seconds before launching next task\n          format: int32\n          type: integer\n        create_timestamp:\n          description: Unix timestamp when this app was created\n          format: float\n          type: number\n        dashboard_url:\n          description: Marathon dashboard URL for this app\n          type: string\n        deploy_status:\n          description: Deploy status of this app\n          type: string\n        tasks:\n          description: Tasks associated to this app\n          items:\n            $ref: '#/components/schemas/MarathonTask'\n          type: array\n        tasks_healthy:\n          description: Number of healthy tasks for this app\n          format: int32\n          type: integer\n        tasks_running:\n          description: Number running tasks for this app\n          format: int32\n          type: integer\n        tasks_staged:\n          description: Number of staged tasks for this app\n          format: int32\n          type: integer\n        tasks_total:\n          description: Total number of tasks for this app\n          format: int32\n          type: integer\n        unused_offer_reason_counts:\n          description: Mapping of reason offer was refused to the number of times\n            that type of refusal was seen\n          type: object\n        unused_offers:\n          type: object\n      type: object\n    MarathonAutoscalingInfo:\n      properties:\n        current_instances:\n          description: The number of instances of the service currently running\n          format: int32\n          type: integer\n        current_utilization:\n          description: The current utilization of the instances' allocated resources\n          nullable: true\n          format: float\n          type: number\n        max_instances:\n          description: The maximum number of instances that the autoscaler will scale\n            to\n          format: int32\n          type: integer\n        min_instances:\n          description: The minimum number of instances that the autoscaler will scale\n            to\n          format: int32\n          type: integer\n        target_instances:\n          description: The autoscaler's current target number of instances of this\n            service to run\n          nullable: true\n          format: int32\n          type: integer\n      type: object\n    MarathonDashboard:\n      additionalProperties:\n        $ref: '#/components/schemas/MarathonDashboardCluster'\n      description: A list of Marathon service, instance, and shard url for one or\n        more clusters\n      type: object\n    MarathonDashboardCluster:\n      description: List of all the MarathonDashboardItems for a cluster\n      items:\n        $ref: '#/components/schemas/MarathonDashboardItem'\n      type: array\n    MarathonDashboardItem:\n      description: Marathon service, instance, and shard url\n      properties:\n        instance:\n          description: Instance name\n          type: string\n        service:\n          description: Service name\n          type: string\n        shard_url:\n          description: Marathon Shard URL\n          type: string\n      type: object\n    MarathonMesosNonrunningTask:\n      properties:\n        deployed_timestamp:\n          description: The unix timestamp at which the task was deployed\n          format: float\n          type: number\n        hostname:\n          description: Name of the Mesos agent on which this task is running\n          type: string\n        id:\n          description: The ID of the task in Mesos\n          type: string\n        state:\n          description: The current state of the task\n          type: string\n        tail_lines:\n          $ref: '#/components/schemas/TaskTailLines'\n          description: Stdout and stderr tail of the task\n      type: object\n    MarathonMesosRunningTask:\n      properties:\n        cpu_shares:\n          $ref: '#/components/schemas/FloatAndError'\n          description: The portion of a CPU that the task can use\n        cpu_used_seconds:\n          $ref: '#/components/schemas/FloatAndError'\n          description: The number of seconds of CPU time the task has used\n        deployed_timestamp:\n          description: The unix timestamp at which the task was deployed\n          format: float\n          type: number\n        duration_seconds:\n          description: The duration over which the task has been running in seconds\n          format: int32\n          type: integer\n        hostname:\n          description: Name of the Mesos agent on which this task is running\n          type: string\n        id:\n          description: The ID of the task in Mesos\n          type: string\n        mem_limit:\n          $ref: '#/components/schemas/IntegerAndError'\n          description: The maximum amount of memory the task is allowed to use\n        rss:\n          $ref: '#/components/schemas/IntegerAndError'\n          description: The tasks's resident set size\n        tail_lines:\n          $ref: '#/components/schemas/TaskTailLines'\n          description: Stdout and stderr tail of the task\n      type: object\n    MarathonMesosStatus:\n      properties:\n        error_message:\n          description: Error message when Mesos tasks cannot be queried\n          type: string\n        non_running_tasks:\n          description: Non-running tasks associated to this service\n          items:\n            $ref: '#/components/schemas/MarathonMesosNonrunningTask'\n          type: array\n        running_task_count:\n          description: The number of running Mesos tasks associated to this service\n          format: int32\n          type: integer\n        running_tasks:\n          description: Currently running tasks associated to this service\n          items:\n            $ref: '#/components/schemas/MarathonMesosRunningTask'\n          type: array\n      type: object\n    MarathonTask:\n      properties:\n        deployed_timestamp:\n          description: Time at which the task was deployed\n          format: float\n          type: number\n        host:\n          description: Name of the host on which the task is running\n          nullable: true\n          type: string\n        id:\n          description: ID of the task in Mesos\n          type: string\n        is_healthy:\n          description: Whether Marathon thinks the task is healthy\n          nullable: true\n          type: boolean\n        port:\n          description: Port on which the task is listening\n          format: int32\n          type: integer\n      type: object\n    MetaStatus:\n      description: Result of `paasta metastatus` command\n      properties:\n        exit_code:\n          description: Exit code from `paasta metastatus` command\n          type: integer\n        output:\n          description: Output from `paasta metastatus` command\n          type: string\n      type: object\n    Resource:\n      items:\n        $ref: '#/components/schemas/ResourceItem'\n      type: array\n    ResourceItem:\n      properties:\n        cpus:\n          $ref: '#/components/schemas/ResourceValue'\n        disk:\n          $ref: '#/components/schemas/ResourceValue'\n        groupings:\n          type: object\n        mem:\n          $ref: '#/components/schemas/ResourceValue'\n        gpus:\n          $ref: '#/components/schemas/ResourceValue'\n      type: object\n    ResourceValue:\n      properties:\n        free:\n          type: number\n        total:\n          type: number\n        used:\n          type: number\n      type: object\n    SmartstackBackend:\n      properties:\n        check_code:\n          description: Check code reported by HAProxy\n          type: string\n        check_duration:\n          description: Duration in ms of the last health check performed by HAProxy\n          format: int32\n          type: integer\n        check_status:\n          description: Status of last health check of the backend\n          type: string\n        has_associated_task:\n          description: Whether this backend has an associated task running\n          type: boolean\n        hostname:\n          description: Name of the host on which the backend is running\n          type: string\n        last_change:\n          description: Seconds since last change in backend status\n          format: int32\n          type: integer\n        port:\n          description: Port number on which the backend responds\n          format: int32\n          type: integer\n        status:\n          description: Status of the backend in HAProxy\n          type: string\n      type: object\n    SmartstackLocation:\n      properties:\n        backends:\n          description: Smartstack backends running in this location\n          items:\n            $ref: '#/components/schemas/SmartstackBackend'\n          type: array\n        name:\n          description: Name of the location\n          type: string\n        running_backends_count:\n          description: Number of running backends for the service in this location\n          format: int32\n          type: integer\n      type: object\n    SmartstackStatus:\n      properties:\n        expected_backends_per_location:\n          description: Number of backends expected to be present in each location\n          format: int32\n          type: integer\n        locations:\n          description: Locations the service is deployed\n          items:\n            $ref: '#/components/schemas/SmartstackLocation'\n          type: array\n        registration:\n          description: Registration name of the service in Smartstack\n          type: string\n      type: object\n    TaskTailLines:\n      properties:\n        error_message:\n          description: Error message when fetching tail lines fails\n          type: string\n        stderr:\n          description: The requested number of lines from the task's stderr\n          items:\n            type: string\n          type: array\n        stdout:\n          description: The requested number of lines from the task's stdout\n          items:\n            type: string\n          type: array\n      type: object\npaths:\n  /deploy_queue:\n    get:\n      operationId: deploy_queue\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeployQueue'\n          description: Contents of deploy queue\n      summary: Get deploy queue contents\n  /flink/{service}/{instance}/config:\n    get:\n      operationId: get_flink_cluster_config\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlinkConfig'\n          description: Get config of a flink cluster\n        \"404\":\n          description: Flink cluster not found\n        \"500\":\n          description: Instance failure\n        \"599\":\n          description: Temporary issue fetching instance\n      summary: Get config of a flink cluster\n      tags:\n      - service\n  /flink/{service}/{instance}/jobs:\n    get:\n      operationId: list_flink_cluster_jobs\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlinkJobs'\n          description: Get list of flink jobs in a flink cluster\n        \"404\":\n          description: Flink cluster not found\n        \"500\":\n          description: Instance failure\n        \"599\":\n          description: Temporary issue fetching instance\n      summary: Get list of flink jobs in a flink cluster\n      tags:\n      - service\n  /flink/{service}/{instance}/jobs/{job_id}:\n    get:\n      operationId: get_flink_cluster_job_details\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      - description: Job id\n        in: path\n        name: job_id\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlinkJobDetails'\n          description: Get details of a flink job in a flink cluster\n        \"404\":\n          description: Flink cluster not found\n        \"500\":\n          description: Instance failure\n        \"599\":\n          description: Temporary issue fetching instance\n      summary: Get details of a flink job in a flink cluster\n      tags:\n      - service\n  /flink/{service}/{instance}/overview:\n    get:\n      operationId: get_flink_cluster_overview\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FlinkClusterOverview'\n          description: Get overview of a flink cluster\n        \"404\":\n          description: Flink cluster not found\n        \"500\":\n          description: Instance failure\n        \"599\":\n          description: Temporary issue fetching instance\n      summary: Get overview of a flink cluster\n      tags:\n      - service\n  /marathon_dashboard:\n    get:\n      operationId: marathon_dashboard\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MarathonDashboard'\n          description: List of service instances and information on their Marathon\n            shard\n      summary: Get marathon service instances and their shards\n      tags:\n      - marathon_dashboard\n  /metastatus:\n    get:\n      operationId: metastatus\n      parameters:\n      - description: comma separated list of command arguments\n        in: query\n        name: cmd_args\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MetaStatus'\n          description: Detailed metastatus\n        \"500\":\n          description: Metastatus failure\n      summary: Get metastatus\n  /resources/utilization:\n    get:\n      operationId: resources\n      parameters:\n      - description: comma separated list of keys to group by\n        in: query\n        name: groupings\n        required: false\n        schema:\n          items:\n            type: string\n          type: array\n        style: simple\n      - description: List of slave filters in format 'filter=attr_name:value1,value2\u0026filter=attr2:value3,value4'.\n          Matches attr_name=(value1 OR value2) AND attr2=(value3 OR value4)\n        explode: true\n        in: query\n        name: filter\n        required: false\n        style: form\n        schema:\n          items:\n            pattern: (.*):(.*,)*(.*)\n            type: string\n          type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n          description: Resources in the cluster, filtered and grouped by parameters\n        \"400\":\n          description: Poorly formated query parameters\n      summary: Get resources in the cluster\n      tags:\n      - resources\n  /service_autoscaler/pause:\n    delete:\n      operationId: delete_service_autoscaler_pause\n      responses:\n        \"200\":\n          description: Service autoscaler successfully unpaused\n        \"500\":\n          description: Unable to talk to zookeeper\n      summary: Unpause the autoscaler\n    get:\n      operationId: get_service_autoscaler_pause\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: string\n          description: The time until which the servcie autoscaler is paused for\n        \"500\":\n          description: Unable to talk to zookeeper\n      summary: Get autoscaling pause time\n    post:\n      operationId: update_service_autoscaler_pause\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                minutes:\n                  type: integer\n        required: true\n      responses:\n        \"200\":\n          description: Service autoscaler successfully paused\n        \"500\":\n          description: Unable to talk to zookeeper\n  /services:\n    get:\n      operationId: list_services_for_cluster\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  services:\n                    items:\n                      items: {}\n                      type: array\n                    type: array\n                type: object\n          description: Services and their instances on the current cluster\n      summary: List service names and service instance names on the current cluster\n      tags:\n      - service\n  /services/{service}:\n    get:\n      operationId: list_instances\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  instances:\n                    items:\n                      type: string\n                    type: array\n                type: object\n          description: Instances of a service\n      summary: List instances of service_name\n      tags:\n      - service\n  /services/{service}/{instance}/autoscaler:\n    get:\n      operationId: get_autoscaler_count\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutoscalerCountMsg'\n          description: Get desired instance count for a service instance\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n      summary: Get status of service_name.instance_name\n      tags:\n      - autoscaler\n    post:\n      operationId: update_autoscaler_count\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AutoscalerCountMsg'\n        required: true\n      responses:\n        \"202\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AutoscalerCountMsg'\n          description: Set desired instance count for a service instance\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n      summary: Get status of service_name.instance_name\n      tags:\n      - autoscaler\n  /services/{service}/{instance}/delay:\n    get:\n      operationId: delay_instance\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceDelay'\n          description: The service is delayed for these possible reasons\n        \"204\":\n          description: Could not find any reasons for a delay\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n      summary: Get the possible reasons for a deployment delay for a marathon service.instance\n      tags:\n      - service\n  /services/{service}/{instance}/state/{desired_state}:\n    post:\n      operationId: instance_set_state\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      - description: Desired state\n        in: path\n        name: desired_state\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Result of instance state change\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n      summary: Change state of service_name.instance_name\n      tags:\n      - service\n  /services/{service}/{instance}/bounce_status:\n    get:\n      operationId: bounce_status_instance\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceBounceStatus'\n          description: Bounce status of an instance\n        \"204\":\n          description: Instance is not bounceable and therefore has no bounce status\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n        \"599\":\n          description: Temporary issue fetching instance status\n      summary: Get bounce status of service_name.instance_name\n      tags:\n      - service\n  /services/{service}/{instance}/status:\n    get:\n      operationId: status_instance\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      - description: Include verbose status information\n        in: query\n        name: verbose\n        required: false\n        schema:\n          format: int32\n          type: integer\n      - description: Include Smartstack information\n        in: query\n        name: include_smartstack\n        required: false\n        schema:\n          type: boolean\n      - description: Include Envoy information\n        in: query\n        name: include_envoy\n        required: false\n        schema:\n          type: boolean\n      - description: Include Mesos information\n        in: query\n        name: include_mesos\n        required: false\n        schema:\n          type: boolean\n      - description: Use new version of paasta status for services\n        in: query\n        name: new\n        required: false\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceStatus'\n          description: Detailed status of an instance\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n      summary: Get status of service_name.instance_name\n      tags:\n      - service\n  /services/{service}/{instance}/mesh_status:\n    get:\n      operationId: mesh_instance\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      - description: Include Smartstack information\n        in: query\n        name: include_smartstack\n        required: false\n        schema:\n          type: boolean\n          default: true\n      - description: Include Envoy information\n        in: query\n        name: include_envoy\n        required: false\n        schema:\n          type: boolean\n          default: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceMeshStatus'\n          description: Mesh status of an instance\n        \"404\":\n          description: Deployment key not found\n        \"405\":\n          description: Instance type not supported\n        \"500\":\n          description: Instance failure\n      summary: Get mesh status for service_name.instance_name\n      tags:\n      - service\n  /services/{service}/{instance}/tasks:\n    get:\n      operationId: tasks_instance\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      - description: slave hostname to filter tasks by\n        in: query\n        name: slave_hostname\n        required: false\n        schema:\n          type: string\n      - description: Return slave and executor for task\n        in: query\n        name: verbose\n        required: false\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceTasks'\n          description: List of tasks associated with an instance\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Deployment key not found\n        \"500\":\n          description: Instance failure\n      summary: Get mesos tasks of service_name.instance_name\n      tags:\n      - service\n  /services/{service}/{instance}/tasks/{task_id}:\n    get:\n      operationId: task_instance\n      parameters:\n      - description: Service name\n        in: path\n        name: service\n        required: true\n        schema:\n          type: string\n      - description: Instance name\n        in: path\n        name: instance\n        required: true\n        schema:\n          type: string\n      - description: mesos task id\n        in: path\n        name: task_id\n        required: true\n        schema:\n          type: string\n      - description: Return slave and executor for task\n        in: query\n        name: verbose\n        required: false\n        schema:\n          type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/InstanceTask'\n          description: Task associated with an instance with specified ID\n        \"400\":\n          description: Bad request\n        \"404\":\n          description: Task with ID not found\n        \"500\":\n          description: Instance failure\n      summary: Get mesos task of service_name.instance_name by task_id\n      tags:\n      - service\n  /version:\n    get:\n      operationId: showVersion\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: string\n          description: Version of paasta_tools package\n      summary: Version of paasta_tools package\n",
			"canonicalURL": "/github.com/Yelp/paasta@5db8c7876b1b405cd613ae256c5705dd4d0f8ab0/-/blob/paasta_tools/api/api_docs/oapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Yelp/paasta/blob/5db8c7876b1b405cd613ae256c5705dd4d0f8ab0/paasta_tools/api/api_docs/oapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/metastatus\": get: operation \"metastatus\": parameters: parse parameter \"cmd_args\": at paasta_tools/api/api_docs/oapi.yaml:1456:16: invalid style explode combination \"simple\", explode:true"
}