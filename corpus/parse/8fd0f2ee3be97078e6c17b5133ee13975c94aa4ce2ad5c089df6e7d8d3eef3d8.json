{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opentdf/backend"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "containers/kas/kas_core/tdf3_kas_core/api/openapi.yaml",
			"byteSize": 17016,
			"content": "# OpenAPI Spec https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md\nopenapi: 3.0.0\ninfo:\n  version: 1.1.1\n  title: Key Access Service\n  termsOfService: https://github.com/opentdf/backend/blob/master/LICENSE\n  license:\n    name: BSD 3-Clause Clear\n    url: https://github.com/opentdf/backend/blob/master/LICENSE\n\nexternalDocs:\n  description: Developer Hub\n  url: https://developer.virtru.com/\n\npaths:\n  \"/\":\n    get:\n      summary: Get the current version\n      description: |\n        This endpoint is for OPS so they have something to ping on to verify\n        that the server hasn't died.\n      operationId: tdf3_kas_core.web.heartbeat.ping\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  version:\n                    type: string\n                    example: \"0.0.0\"\n  /healthz:\n    get:\n      tags:\n        - heartbeat\n      summary: Return current version as semver; useful for liveness checks\n      operationId: tdf3_kas_core.web.heartbeat.healthz\n      parameters:\n        - name: probe\n          description: liveness or readiness\n          in: query\n          schema:\n            default: liveness\n            enum:\n              - liveness\n              - readiness\n            type: string\n      responses:\n        \"200\":\n          description: Success with a detail message\n        \"204\":\n          description: Success with no detail message\n        \"500\":\n          description: Unhealthy, per the requested probe\n  \"/kas_public_key\":\n    get:\n      summary: \"Get the public key for KAS\"\n      description: |\n        This endpoint provides a public key for the private key that the\n        kas has internally. The public key is used to wrap object keys in\n        the TDF3 or NanoTDF files.\n      operationId: tdf3_kas_core.web.public_key.get\n      parameters:\n        - name: algorithm\n          description: algorithm type rsa:\u003ckeysize\u003e or ec:\u003ccurvename\u003e\n          in: query\n          schema:\n            default: rsa:2048\n            type: string\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PublicKey\"\n        \"404\":\n          description: Not found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/KeyNotFoundError\"\n  \"/rewrap\":\n    post:\n      summary: Request a rewrap\n      description: |\n        This endpoint performs the primary service of the KAS; to re-wrap\n        data keys as needed to provide access for entities with a TDF that they\n        would like to open.\n      operationId: tdf3_kas_core.web.rewrap.rewrap\n      parameters: \u0026dpop-header\n        - in: header\n          name: dpop\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/Rewrap\"\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metadata:\n                    type: object\n                    default: {}\n                  kasWrappedKey:\n                    type: string\n                    nullable: true\n                  entityWrappedKey:\n                    type: string\n                    nullable: true\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/AdjudicatorError\"\n                  - $ref: \"#/components/schemas/AuthorizationError\"\n                  - $ref: \"#/components/schemas/EntityError\"\n                  - $ref: \"#/components/schemas/KeyAccessError\"\n                  - $ref: \"#/components/schemas/KeyNotFoundError\"\n                  - $ref: \"#/components/schemas/PluginFailedError\"\n                  - $ref: \"#/components/schemas/PolicyError\"\n  \"/v2/rewrap\":\n    post:\n      summary: Request a rewrap\n      description: |\n        This endpoint performs the primary service of the KAS; to re-wrap\n        data keys as needed to provide access for entities with a TDF that they\n        would like to open.\n      operationId: tdf3_kas_core.web.rewrap.rewrap_v2\n      parameters: *dpop-header\n      requestBody:\n        $ref: \"#/components/requestBodies/RewrapV2\"\n      # security:\n      #   - virtruOIDCBearerToken: []\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  metadata:\n                    type: object\n                    default: {}\n                  kasWrappedKey:\n                    type: string\n                    nullable: true\n                  entityWrappedKey:\n                    type: string\n                    nullable: true\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/AdjudicatorError\"\n                  - $ref: \"#/components/schemas/AuthorizationError\"\n                  - $ref: \"#/components/schemas/EntityError\"\n                  - $ref: \"#/components/schemas/KeyAccessError\"\n                  - $ref: \"#/components/schemas/KeyNotFoundError\"\n                  - $ref: \"#/components/schemas/PluginFailedError\"\n                  - $ref: \"#/components/schemas/PolicyError\"\n  \"/upsert\":\n    post:\n      summary: Request a upsert\n      description: |\n        The upsert service is a proxy to the back-end services that persist\n        policies and keys.\n      operationId: tdf3_kas_core.web.upsert.upsert\n      parameters: *dpop-header\n      requestBody:\n        $ref: \"#/components/requestBodies/Upsert\"\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                default: []\n                items: {}\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/AuthorizationError\"\n                  - $ref: \"#/components/schemas/EntityError\"\n                  - $ref: \"#/components/schemas/KeyAccessError\"\n                  - $ref: \"#/components/schemas/KeyNotFoundError\"\n                  - $ref: \"#/components/schemas/PluginFailedError\"\n                  - $ref: \"#/components/schemas/PolicyError\"\n  \"/v2/upsert\":\n    post:\n      summary: Request a upsert\n      description: |\n        The upsert service is a proxy to the back-end services that persist\n        policies and keys.\n      operationId: tdf3_kas_core.web.upsert.upsert_v2\n      parameters: *dpop-header\n      requestBody:\n        $ref: \"#/components/requestBodies/UpsertV2\"\n      # security:\n      #   - virtruOIDCBearerToken: []\n      responses:\n        \"200\":\n          description: Ok\n          content:\n            application/json:\n              schema:\n                type: array\n                default: []\n                items: {}\n        \"400\":\n          $ref: \"#/components/responses/BadRequest\"\n        \"403\":\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/AuthorizationError\"\n                  - $ref: \"#/components/schemas/EntityError\"\n                  - $ref: \"#/components/schemas/KeyAccessError\"\n                  - $ref: \"#/components/schemas/KeyNotFoundError\"\n                  - $ref: \"#/components/schemas/PluginFailedError\"\n                  - $ref: \"#/components/schemas/PolicyError\"\n\ncomponents:\n  # TODO we should declare this in the openapi spec, but\n  # if this is present connexion craps the bed unless\n  # you define an x-bearerInfoFunc property\n  # that points back to a function in your code to parse the token\n  #\n  # We should do that but not doing it now\n  # Example: https://github.com/zalando/connexion/tree/master/examples/openapi3/jwt\n  #  securitySchemes:\n  #     virtruOIDCBearerToken:\n  #       type: http\n  #       scheme: bearer\n  #       bearerFormat: JWT  # optional, for documentation purposes only\n  responses:\n    ### Errors\n    BadRequest:\n      description: 400 Bad request\n      content:\n        application/json:\n          schema:\n            properties:\n              detail:\n                type: string\n              status:\n                type: number\n                default: 400\n              title:\n                type: string\n                default: Bad request\n              type:\n                type: string\n                default: about:blank\n    NotFound:\n      description: 404 Not found\n      content:\n        application/json:\n          schema:\n            type: string\n    ServerError:\n      description: Server error\n\n    ### Methods\n    PublicKey:\n      description: Public key response\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PublicKey\"\n    Version:\n      description: Respond with current version\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              version:\n                type: string\n                example: \"0.0.0\"\n\n  requestBodies:\n    Rewrap:\n      description: Rewrap request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - authToken\n                  - entity\n                  - keyAccess\n                maxProperties: 5\n                properties:\n                  authToken:\n                    $ref: \"#/components/schemas/AuthToken\"\n                  entity:\n                    $ref: \"#/components/schemas/Entity\"\n                  keyAccess:\n                    $ref: \"#/components/schemas/KeyAccess\"\n                  policy:\n                    $ref: \"#/components/schemas/Policy\"\n                  algorithm:\n                    $ref: \"#/components/schemas/TDF_Algorithm\"\n              - type: object\n                required:\n                  - signedRequestToken\n                maxProperties: 1\n                properties:\n                  signedRequestToken:\n                    $ref: \"#/components/schemas/JWT\"\n    RewrapV2:\n      description: RewrapV2 request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - signedRequestToken\n                maxProperties: 1\n                properties:\n                  signedRequestToken:\n                    $ref: \"#/components/schemas/JWT\"\n    Upsert:\n      description: Upsert request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - authToken\n                  - entity\n                  - keyAccess\n                  - policy\n                maxProperties: 4\n                properties:\n                  authToken:\n                    $ref: \"#/components/schemas/AuthToken\"\n                  entity:\n                    $ref: \"#/components/schemas/Entity\"\n                  keyAccess:\n                    $ref: \"#/components/schemas/KeyAccess\"\n                  policy:\n                    $ref: \"#/components/schemas/Policy\"\n              - type: object\n                required:\n                  - signedRequestToken\n    UpsertV2:\n      description: Upsert request body\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - type: object\n                required:\n                  - signedRequestToken\n                maxProperties: 1\n                properties:\n                  signedRequestToken:\n                    $ref: \"#/components/schemas/JWT\"\n\n  schemas:\n    Algorithm:\n      title: The algorithm used to encrypt the ciphertext\n      type: string\n      enum:\n        - AES-256-GCM\n    Aliases:\n      title: Array of userIds\n      type: array\n      items:\n        $ref: \"#/components/schemas/UserId\"\n    AuthToken:\n      $ref: \"#/components/schemas/JWT\"\n    Cert:\n      title: Entity certificate\n      type: string\n    Ciphertext:\n      title: Encrypted object\n      type: string\n    EncryptedMetadata:\n      title: Metadata in encrypted format\n      type: string\n    Entity:\n      description: Entity object\n      type: object\n      required:\n        - cert\n        - publicKey\n        - userId\n      maxProperties: 6\n      properties:\n        aliases:\n          $ref: \"#/components/schemas/Aliases\"\n        attributes:\n          $ref: \"#/components/schemas/EntityAttributes\"\n        cert:\n          $ref: \"#/components/schemas/Cert\"\n        exp:\n          $ref: \"#/components/schemas/Exp\"\n        publicKey:\n          $ref: \"#/components/schemas/PublicKey\"\n        userId:\n          $ref: \"#/components/schemas/UserId\"\n    EntityAttribute:\n      title: Entity attribute\n      required:\n        - jwt\n      properties:\n        jwt:\n          $ref: \"#/components/schemas/JWT\"\n    EntityAttributes:\n      title: Entity attributes\n      type: array\n      items:\n        $ref: \"#/components/schemas/EntityAttribute\"\n    Exp:\n      title: JWT expiration date\n      type: number\n    IV:\n      title: Initial vector used to encrypt the ciphertext\n      type: string\n    JWT:\n      title: JSON Web token\n      type: string\n      pattern: ^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$\n    KeyAccess:\n      title: Key access object\n      type: object\n      required:\n        - type\n        - url\n        - protocol\n      properties:\n        encryptedMetadata:\n          $ref: \"#/components/schemas/EncryptedMetadata\"\n        policySyncOptions:\n          $ref: \"#/components/schemas/Policy\"\n        policyBinding:\n          $ref: \"#/components/schemas/PolicyBinding\"\n        protocol:\n          type: string\n          enum:\n            - kas\n        type:\n          type: string\n          enum:\n            - remote\n            - remoteWrapped\n            - wrapped\n        url:\n          type: string\n        wrappedKey:\n          $ref: \"#/components/schemas/WrappedKey\"\n    Policy:\n      title: Policy\n      type: string\n    PolicyBinding:\n      title: Policy binding\n      type: string\n    PolicySyncOptions:\n      title: Policy sync options\n      type: object\n      properties:\n        url:\n          type: string\n    PublicKey:\n      title: Public key\n      type: string\n      pattern: '-----BEGIN PUBLIC KEY-----(.|\\s)*-----END PUBLIC KEY-----(\\s)*'\n    UserId:\n      title: User id\n      type: string\n    WrappedKey:\n      title: Wrapped key\n      type: string\n    TDF_Algorithm:\n      description: String to define the type of algorithm the client performing the TDF operations.\n      type: string\n      example: \"ec:secp256r1\"\n\n    ### Custom Errors\n    AttributePolicyConfigError:\n      title: Attribute policy config error (500)\n      type: string\n    AdjudicatorError:\n      title: Adjudicator error (403)\n      type: string\n    AuthorizationError:\n      title: Authorization error (403)\n      type: string\n    CryptoError:\n      title: Crypto error (403)\n      type: string\n    EntityError:\n      title: Entity error (400)\n      type: string\n    InvalidBindingError:\n      title: Invalid binding error (403)\n      type: string\n    JWTError:\n      title: JWT error (403)\n      type: string\n    KeyAccessError:\n      title: Key access error (403)\n      type: string\n    KeyNotFoundError:\n      title: Key not found error (403)\n      type: string\n    PluginFailedError:\n      title: Plugin failed error (403)\n      type: string\n    PluginIsBadError:\n      title: Plugin is bad error (403)\n      type: string\n    PolicyError:\n      title: Policy error (403)\n      type: string\n    PrivateKeyInvalidError:\n      title: Private key invalid error (403)\n      type: string\n    RequestError:\n      title: Invalid binding error (403)\n      type: string\n    ValidationError:\n      title: Validation error (400)\n      type: string\n    UnknownAttributePolicyError:\n      title: Unknown attribute policy error (403)\n      type: string\n    RequestTimeoutError:\n      title: Request timeout error (503)\n      type: string\n    PolicyNotFoundError:\n      title: Policy not found error (404)\n      type: string\n    ContractNotFoundError:\n      title: Contract not found error (404)\n      type: string\n    PolicyCreateError:\n      title: Policy create error (403)\n      type: string\n",
			"canonicalURL": "/github.com/opentdf/backend@9937c74ecd55ac95eadd0fea0a8f300741d86163/-/blob/containers/kas/kas_core/tdf3_kas_core/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/opentdf/backend/blob/9937c74ecd55ac95eadd0fea0a8f300741d86163/containers/kas/kas_core/tdf3_kas_core/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/rewrap\": post: operation \"tdf3_kas_core.web.rewrap.rewrap\": responses: 200: content: application/json: schema: parse schema: property \"metadata\": at containers/kas/kas_core/tdf3_kas_core/api/openapi.yaml:110:30: parse default: unexpected type: \"object\""
}