{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/FraunhoferISST/diva"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "core/services/service-management/apiDoc/openapi.yml",
			"byteSize": 19327,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"Service Management Service is responsible for all CRUD operations on services\"\n  version: 1.0.0\n  title: Service Management API\nservers:\n  - url: http://localhost:3004\ntags:\n  - name: services\n    description: Operations about services\n  - name: serviceImages\n    description: Operations on service image. PNG, JPEG and SVG supported. \npaths:\n  /services:\n    post:\n      tags:\n        - services\n      summary: Create services\n      description: Create new services with the provided data. The attributes of the service may vary depending on the\n        `serviceType`. The request body must containt at least all the attributes defined in the schema below. This opperations\n        supports bulk mode so that multiple service can be created with one request\n      operationId: createService\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ServiceCreate\"\n      responses:\n        201:\n          $ref: \"#/components/responses/ServiceCreateSuccess\"\n        207:\n          $ref: \"#/components/responses/Multi\"\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        406:\n          $ref: \"#/components/responses/InvalidDataError\"\n        500:\n          $ref: \"#/components/responses/UnexpectedError\"\n    get:\n      tags:\n        - services\n      summary: Get list of services\n      description: To get the list of services you can specify projection with `fields` paramter and set the\n        page size with `pageSize`. Default page size is **30**. The next page can be fatched by using `cursor`\n        parameter. The cursor to the next page will be included in the response body.\n      operationId: getServices\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: fields\n          in: query\n          description: Coma separated projection fields\n          example: \"title,serviceType,description\"\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n        - name: cursor\n          in: query\n          description: Pagination cursor\n          required: false\n          explode: true\n          example: \"aHVpXzYwMTkzZmJlZTM0NmZhODVkNTE4YzJlYg==\"\n          schema:\n            type: string\n        - name: pageSize\n          in: query\n          description: Page size\n          required: false\n          explode: true\n          example: 10\n          schema:\n            type: integer\n            format: int32\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  collectionSize:\n                    type: integer\n                  collection:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/Service\"\n                  cursor:\n                    type: string\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  \"/services/{id}\":\n    get:\n      tags:\n        - services\n      summary: Get service by id\n      description: Projection can be specified with `fields` parameter\n      operationId: getServiceById\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: The id of the service to fetch\n          required: true\n          schema:\n            type: string\n        - name: fields\n          in: query\n          description: Comma separated projection fields\n          required: false\n          explode: true\n          allowReserved: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/ServiceResponse\"\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - services\n      summary: Update service\n      description: Use this method, if you want to replace complete service. New service is created if no service with\n        the provided `id` exists. Note that on this operation **all** fields are replaced.\n      operationId: updateService\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the service\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ServiceUpdate\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"201\":\n          description: Service created\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    patch:\n      tags:\n        - services\n      summary: Patch service\n      description: Use this method to do a partial update of the service. In the request provided fields\n        will be merged with the existing service object.\n      operationId: patchService\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the service\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ServicesPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      tags:\n        - services\n      summary: Post service (alias for patch)\n      description: Use this method to do a partial update of the service. In the request provided fields\n        will be merged with the existing service object.\n      operationId: patchService\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the service\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/ServicesPatch\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - services\n      summary: Delete service\n      description: Delete existing service by id\n      operationId: deleteService\n      parameters:\n        - $ref: \"#/components/parameters/actorIdParam\"\n        - name: id\n          in: path\n          description: id of the service\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"4XX\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"      \n  /serviceImages:\n    parameters:\n      - $ref: \"#/components/parameters/actorIdParam\"\n    post:\n      tags:\n        - serviceImages\n      summary: Add service image\n      description: Creates uploaded service image. The operation returns image `id`. Note that you have to set service `imageId`\n        to the uploaded image `id` manually.\n      operationId: addServiceImage\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"4XX\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n  /serviceImages/{id}:\n    get:\n      tags:\n        - serviceImages\n      summary: Get service image\n      description: Get uploaded service image by image ID. You can obtain the image ID from the\n        corresponding service document\n      operationId: getServiceImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the service image\n          required: true\n          explode: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Success\n          content:\n            image/png:\n              schema:\n                description: Service image as PNG\n                type: string\n                format: binary\n            image/jpeg:\n              schema:\n                description: Service image as JPG\n                type: string\n                format: binary\n            image/svg:\n              schema:\n                description: Service image as SVG\n                type: string\n                format: binary    \n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    put:\n      tags:\n        - serviceImages\n      summary: Update service image\n      description: Upload and update service image by image ID. Please note that in fact the old image will be deleted and a\n        new one will be created. This method acts as an alias for POST and DELETE methods and simplifies this for the API services.\n        Furthermore, this means that the new image gets **new** ID. The new ID is returned in the response\n      operationId: updateServiceImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the services image\n          required: true\n          explode: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/actorIdParam\"\n      requestBody:\n        $ref: \"#/components/requestBodies/Image\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/Success\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"406\":\n          $ref: \"#/components/responses/InvalidDataError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    delete:\n      tags:\n        - serviceImages\n      summary: Delete service image\n      description: Delete uploaded service image by image ID\n      operationId: deleteServiceImage\n      parameters:\n        - name: id\n          in: path\n          description: ID of the services image\n          required: true\n          explode: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/actorIdParam\"\n      responses:\n        \"200\":\n          $ref: \"#/components/responses/SuccessEmpty\"\n        \"400\":\n          $ref: \"#/components/responses/RequestValidationError\"\n        \"404\":\n          $ref: \"#/components/responses/NotFoundError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\ncomponents:\n  requestBodies:\n    ServiceCreate:\n      required: true\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: \"#/components/schemas/ServiceCreate\"\n              - $ref: \"#/components/schemas/ServiceCreateBulk\"\n    ServiceUpdate:\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ServiceCreate\"\n    ServicesPatch:\n      required: true\n      content:\n        application/json:\n          schema:\n            title: Patch body\n            description: The body can be any attribute defined in the service schema. The supplied attributes\n              overwrite the existing\n            type: object\n    Image:\n      required: true\n      content:\n        multipart/form-data:\n          schema:\n            type: object\n            additionalProperties: false\n            required:\n              - image\n            properties:\n              image:\n                type: string\n                format: binary\n          encoding:\n            image:\n              contentType: image/png, image/jpeg, image/svg        \n  schemas:\n    ServiceCreate:\n      description: Minimal required attributes for service creation\n      type: object\n      required:\n        - serviceType\n        - title\n      properties:\n        title:\n          type: string\n          title: Title\n          description: The title of the entity\n          minLength: 1\n          pattern: \"^(.*)$\"\n        serviceType:\n          type: string\n          title: Service Type\n          description: The general type of the service\n          minLength: 1\n          enum:\n            - generic\n            - app\n            - plugin\n            - api\n\n    ServiceCreateBulk:\n      type: array\n      title: Service create bulk request\n      description: Array of services to create multiple service in one bulk request\n      uniqueItems: true\n      minItems: 1\n      maxItems: 500\n      items:\n        $ref: \"#/components/schemas/ServiceCreate\"\n\n    Entity:\n      title: General Entity Data\n      type: object\n      required:\n        - title\n        - id\n        - creatorId\n        - created\n        - modified\n        - entityType\n      additionalProperties: true\n      properties:\n        id:\n          type: string\n          title: Unique ID\n          description: An unique ID of the entity\n          example: \"entity:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n          format: uri\n          pattern: \"^service:uuid:\"\n        created:\n          type: string\n          title: Creation date\n          description: Creation date of the entity\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        creator:\n          type: string\n          title: Creator of the service\n          description: The user or the service that created the service\n          example: \"user:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n          \"pattern\": \"^user:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n        modified:\n          type: string\n          title: Modification date\n          description: Timestamp of the last change of the data\n          example: '2018-11-08T13:55:45Z'\n          format: date-time\n        title:\n          type: string\n          title: Title\n          description: The title of the entity\n          pattern: \"^(.*)$\"\n        entityType:\n          type: string\n          title: Service Type\n          description: The general type of the service\n          enum:\n            - service\n    Service:\n      allOf:\n        - $ref: \"#/components/schemas/Entity\"\n        - type: object\n          title: General Service Data\n          description: General Service schema\n          additionalProperties: true\n          required:\n            - serviceType\n          properties:\n            serviceType:\n              type: string\n              title: Service Type\n              description: The general type of the service\n              enum:\n                - generic\n                - app\n                - plugin\n                - api\n    Error:\n      type: object\n      title: Operation error\n      description: Error that can occure on request processing\n      required:\n        - type\n        - message\n        - code\n      properties:\n        type:\n          title: Error type\n          description: Futher error type information\n          type: string\n        message:\n          title: Error message\n          description: Details about error\n          type: string\n        code:\n          title: Error code\n          description: HTTP error code\n          type: number\n          format: int32\n          example: 409\n        errors:\n          title: Errors\n          description: More error details that are reference in most case specification or schema validation errors\n          type: array\n          items:\n            type: object\n  responses:\n    Success:\n      description: Succesful\n      content:\n        text/html:\n          schema:\n            type: string\n    SuccessEmpty:\n      description: Succesful operation without return data        \n    Multi:\n      description: Multi-status response in case of a bulk request\n      content:\n        application/json:\n          schema:\n            title: Multi-status response\n            description: Indicates the status for operation for each service in a bulk request\n            type: array\n            items:\n              type: object\n              required:\n                - statusCode\n                - data\n              properties:\n                statusCode:\n                  title: Status Code\n                  description: Status Code for single service operation. Can be one of the codes that is returned for\n                    opeartion on a single service\n                  type: integer\n                  example: 201\n                data:\n                  title: Operation data\n                  description: Data as a result of a single service operation\n                  oneOf:\n                    - type: string\n                    - type: object\n                error:\n                  $ref: \"#/components/schemas/Error\"\n\n    ServiceCreateSuccess:\n      description: Succesful service creation returns created service id\n      content:\n        text/html:\n          schema:\n            type: string\n            title: Created service id\n            description: An unique id of the processed entity\n            example: \"service:uuid:4600ea84-485a-49b3-8f15-85fc5ce2e0f9\"\n            format: uri\n            pattern: \"^service:uuid:\"\n    ServiceResponse:\n      description: Service data response\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Service\"\n\n    UnexpectedError:\n      description: Internal error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    NotFoundError:\n      description: Entity not found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    InvalidDataError:\n      description: Invalid data supplied\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    RequestValidationError:\n      description: Request violates API Specification\n      content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Error\"            \n  parameters:\n    actorIdParam:\n      in: header\n      description: The id of the origin that produces action/message. Can be a user or service\n      name: x-actorid\n      schema:\n        type: string\n        minLength: 1\n        pattern: \"^(user|service):uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n      required: true"
		}
	},
	"Error": "parse: parse spec: paths: /services/{id}: patch: duplicate operationId: \"patchService\""
}