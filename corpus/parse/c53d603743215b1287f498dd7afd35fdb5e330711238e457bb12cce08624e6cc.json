{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dyte-in/docs"
		},
		"file": {
			"name": "v2.yaml",
			"size": 0,
			"path": "static/api/v2.yaml",
			"byteSize": 37157,
			"content": "openapi: 3.0.0\ninfo:\n  version: 2.0.0\n  title: dyte-rest-api\nservers:\n  - url: \"https://api.cluster.dyte.in/v2/\"\n    description: Production server\ncomponents:\n  securitySchemes:\n    organizationAuth:\n      type: http\n      scheme: basic\n      description: Use OrgID as username, followed by its APIKEY as password \n    userAuth:\n      type: http\n      scheme: bearer\n      description: Uses the bearer token a user will get when they login into their account on Dyte\n  schemas:\n    WebhookSuccessResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          type: object\n          properties:\n            id:\n              type: string\n              format: uuid\n            name:\n              type: string\n            url:\n              type: string\n              format: uri\n            events:\n              type: array\n              items:\n                type: string\n                enum:\n                  - meeting.started\n                  - meeting.ended\n                  - meeting.participantJoined\n                  - meeting.participantLeft\n                  - meeting.statusUpdate\n            created_at:\n              type: string\n              format: date-time\n            updated_at:\n              type: string\n              format: date-time\n    WebhooksListSuccessResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        data:\n          type: array\n          items:\n            type: object\n            properties:\n              id:\n                type: string\n                format: uuid\n              name:\n                type: string\n              url:\n                type: string\n                format: uri\n              events:\n                type: array\n                items:\n                  type: string\n                  enum:\n                    - meeting.started\n                    - meeting.ended\n                    - meeting.participantJoined\n                    - meeting.participantLeft\n                    - meeting.statusUpdate\n              created_at:\n                type: string\n                format: date-time\n              updated_at:\n                type: string\n                format: date-time\n    ErrorResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        error:\n          type: object\n          properties:\n            code:\n              type: number\n            message:\n              type: string\n    WebhookRequest:\n      type: object\n      required:\n        - name\n        - url\n        - events\n      properties:\n        name:\n          type: string\n        url:\n          type: string\n          format: uri\n        events:\n          type: array\n          items:\n            type: string\n            enum:\n              - meeting.started\n              - meeting.ended\n              - meeting.participantJoined\n              - meeting.participantLeft\n              - meeting.statusUpdate\n    PatchWebhookRequest:\n      type: object\n      properties:\n        name:\n          type: string\n        url:\n          type: string\n          format: uri\n        events:\n          type: array\n          items:\n            type: string\n            enum:\n              - meeting.started\n              - meeting.ended\n              - meeting.participantJoined\n              - meeting.participantLeft\n              - meeting.statusUpdate\n    OrganizationRequest:\n      type: object\n      required:\n        - name\n        - contact\n        - website\n      properties:\n        name:\n          type: string\n        contact:\n          type: string\n        website:\n          type: string\n          format: uri\n        feature_flags:\n          type: array\n          items:\n            type: string\n        preferred_region:\n          type: string\n          enum:\n            - ap-south-1\n            - ap-southeast-1\n            - us-west-1\n          default: ap-south-1\n    PatchOrganizationRequest:\n      type: object\n      required:\n        - name\n        - contact\n        - website\n      properties:\n        name:\n          description: Must be a unique organization name\n          type: string\n        contact:\n          type: string\n        website:\n          type: string\n          format: uri\n        feature_flags:\n          type: array\n          items:\n            type: string\n        preferred_region:\n          type: string\n          enum:\n            - ap-south-1\n            - ap-southeast-1\n            - us-west-1\n          default: ap-south-1\n    OrganizationData:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        contact:\n          type: string\n        website:\n          type: string\n          format: uri\n        apikey:\n          type: string\n        preferred_region:\n          type: string\n        feature_flags:\n          type: array\n          items:\n            type: string\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n      required:\n        - id\n        - name\n        - contact\n        - website\n        - preferred_region\n        - feature_flags\n        - created_at\n        - updated_at\n        - apikey\n    OrganizationSuccessResponse:\n      type: object\n      required:\n      - success\n      - data\n      properties:\n        success:\n          type: boolean\n        data:\n          allOf:\n            - $ref: '#/components/schemas/OrganizationData'\n    OrganizationListSuccessResponse:\n      type: object\n      required:\n      - success\n      - data\n      - paging\n      properties:\n        success:\n          type: boolean\n        data:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/OrganizationData'\n        paging:\n          type: object\n          properties:\n            total_count:\n              type: number\n            start_offset:\n              type: number\n            end_offset:\n              type: number\n          required:\n            - total_count\n            - start_offset\n            - end_offset\n    ActiveSession:\n      type: object\n      properties:\n        id:\n          type: string\n          description: roomUUID of session\n        associated_id:\n          type: string\n          description: id of associated object. if session type is meeting, it is\n            mapped to meetingId, livestreamId if session type is livestream\n        type:\n          type: string\n          description: type of session\n          enum:\n          - meeting\n          - livestream\n          - participant\n        status:\n          type: string\n          description: current status of session\n          enum:\n          - LIVE\n          - ENDED\n        live_participants:\n          type: number\n          description: number of participants currently in the session\n        max_concurrent_participants:\n          type: number\n          description: number of maximum participants that were in the session\n        minutes_consumed:\n          type: number\n          description: number of minutes consumed since the session started\n        started_at:\n          type: string\n          description: timestamp when session started\n        ended_at:\n          type: string\n          description: timestamp when session ended\n        created_at:\n          type: string\n          description: timestamp when session created\n        updated_at:\n          type: string\n          description: timestamp when session was last updated\n    GenericErrorResponse:\n      type: object\n      properties:\n        success:\n          type: boolean\n        error:\n          type: object\n          properties:\n            code:\n              type: number\n            message:\n              type: string\n    Participant:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        email:\n          type: string\n        picture:\n          type: string\n        verified:\n          type: boolean\n        anonymous:\n          type: boolean\n        allow_mails:\n          type: boolean\n        created_at:\n          type: string\n        updated_at:\n          type: string\n    Poll:\n      type: object\n      properties:\n        id:\n          type: string\n        question:\n          type: string\n        options:\n          type: array\n          items:\n            type: object\n            properties:\n              text:\n                type: string\n              count:\n                type: number\n              votes:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                    name:\n                      type: string\n        anonymous:\n          type: boolean\n        hide_votes:\n          type: boolean\n        created_by:\n          type: string\n        voted:\n          type: array\n          items:\n            type: string\n  parameters:\n    Content-Type:\n      name: Content-Type\n      in: header\n      required: true\n      style: simple\n      schema:\n        type: string\n        example: application/json\n    streamId:\n      name: streamId\n      in: path\n      required: true\n      style: simple\n      schema:\n        type: number\n    meetingId:\n      name: meetingId\n      in: path\n      required: true\n      schema:\n        type: string\n  requestBodies:\n    KickParticipantsBody:\n      description: Request body for kicking participants from active session. Only\n        one of `participant_id` or `custom_participant_id` is required\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              participant_ids:\n                type: array\n                items:\n                  type: string\n              custom_participant_ids:\n                type: array\n                items:\n                  type: string\n    MuteAllParticipantsBody:\n      description: Request body for muting all participants in an active session.\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              allow_unmute:\n                type: boolean\n                description: if false, participants won't be able to unmute themselves\n                  after they are muted\n    CreatePollBody:\n      description: Request body for creating a new poll\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              question:\n                type: string\n                description: Question of the poll\n              options:\n                type: array\n                description: Different options for the question\n                items:\n                  type: string\n              anonymous:\n                type: boolean\n                description: if voters on a poll are anonymous\n              hide_votes:\n                type: boolean\n                description: if votes on an option are visible before a person votes\n  responses:\n    GetActiveSession:\n      description: Active Session Success response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                \"$ref\": \"#/components/schemas/ActiveSession\"\n          examples:\n            activeSessionSuccess:\n              \"$ref\": \"#/components/examples/GetActiveSessionSuccessResponse\"\n    GetActiveSessionNotFound:\n      description: Active Session is not found for the given meetingId\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/GenericErrorResponse\"\n          examples:\n            activeSessionNotFound:\n              \"$ref\": \"#/components/examples/GetActiveSessionNotFoundResponse\"\n    KickParticipants:\n      description: Kick participants success response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n                properties:\n                  action:\n                    type: string\n                  participants:\n                    type: array\n                    items:\n                      \"$ref\": \"#/components/schemas/Participant\"\n    ParticipantNotFound:\n      description: No participant found for given `participant_id` or `custom_participant_id`\n      content:\n        application/json:\n          schema:\n            \"$ref\": \"#/components/schemas/GenericErrorResponse\"\n          examples:\n            participantNotFound:\n              \"$ref\": \"#/components/examples/ParticipantNotFoundResponse\"\n    KickAllParticipants:\n      description: Kick all participants from a meeeting\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n                properties:\n                  action:\n                    type: string\n                  kicked_participants_count:\n                    type: number\n    MuteParticipants:\n      description: Mute one or more participants of a meeting\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n                properties:\n                  action:\n                    type: string\n                  participants:\n                    type: array\n                    items:\n                      \"$ref\": \"#/components/schemas/Participant\"\n    MuteAllParticipants:\n      description: Mute all participants of a meeting\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n                properties:\n                  action:\n                    type: string\n                  muted_participants_count:\n                    type: number\n    CreatePoll:\n      description: response for creating a poll\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n                properties:\n                  action:\n                    type: string\n                  poll:\n                    \"$ref\": \"#/components/schemas/Poll\"\n  examples:\n    GetActiveSessionSuccessResponse:\n      summary: Success response for fetching active session\n      value:\n        success: true\n        data:\n          id: 813432c7-3c5a-45e2-9acf-eef7061c7584\n          associated_id: 6bf2b8be-04dd-4191-b602-1128921a306b\n          type: meeting\n          status: LIVE\n          live_participants: 1\n          max_concurrent_participants: 2\n          minutes_consumed: 2.3434\n          started_at: '2022-01-12T14:21:34.388Z'\n          ended_at: 'null'\n          created_at: '2022-01-12T14:21:34.398Z'\n          updated_at: '2022-01-12T14:26:00.784Z'\n    GetActiveSessionNotFoundResponse:\n      summary: Active Session not found\n      value:\n        success: false\n        error:\n          code: 404\n          message: No active session found for meeting_id 6bf2b8be-04dd-4191-b602-1128921a306b\n    ParticipantNotFoundResponse:\n      summary: Participant Not Found\n      value:\n        success: false\n        error:\n          code: 404\n          message: No user found with id 813432c7-3c5a-45e2-9acf-eef7061c7584\nsecurity:\n  - organizationAuth: []\npaths:\n  \"/webhooks\":\n    summary: Represents webhooks for organization\n    description: Represents webhooks for organization\n    get:\n      summary: Get all webhooks\n      tags:\n        - Webhooks\n      description: \u003e\n        Gets details of all webhooks that have been registered for the organization\n      operationId: getAllWebhooks\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhooksListSuccessResponse\"\n              example: |\n                {\n                  success: true,\n                  data: [\n                    {\n                      id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',\n                      name: 'test',\n                      events: [ 'meeting.started' ],\n                      url: 'https://testURL.com',\n                      created_at: '2021-09-09T10:25:12.330Z',\n                      updated_at: '2021-09-09T10:25:12.330Z'\n                    }\n                  ]\n                }\n        \"401\":\n          description: Invalid credentials\n          content:\n            application/json:\n              example: |\n                {\n                  message: \"Unauthorized\"\n                }\n    post:\n      summary: Add a new webhook\n      tags:\n        - Webhooks\n      description: \u003e\n        Add a new webhook to organization\n      operationId: addWebhook\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WebhookRequest\"\n            example: |\n              {\n                name: 'test',\n                events: [ 'meeting.started' ],\n                url: 'https://testURL.com'\n              }\n      responses:\n        \"201\":\n          description: Webhook registered successfully\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookSuccessResponse\"\n              example: |\n                {\n                  success: true,\n                  data: {\n                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',\n                    name: 'test',\n                    events: [ 'meeting.started' ],\n                    url: 'https://testURL.com',\n                    created_at: '2021-09-09T10:25:12.330Z',\n                    updated_at: '2021-09-09T10:25:12.330Z'\n                  }\n                }\n        \"400\":\n          description: Error- malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example: |\n                {\n                  success: false,\n                  error: { code: 400, message: 'BAD_REQUEST: \"name\" is required' }\n                }\n        \"401\":\n          description: Invalid credentials\n          content:\n            application/json:\n              example: |\n                {\n                  message: \"Unauthorized\"\n                }\n  \"/webhooks/{id}\":\n    summary: Represents a single webhook\n    description: Represents a single webhook for an organization by ID\n    get:\n      summary: Get details of a webhook\n      description: \u003e\n        Get details of a single webhook by its ID\n      tags:\n        - Webhooks\n      operationId: getWebhook\n      parameters:\n        - name: id\n          in: path\n          description: ID of webhook\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookSuccessResponse\"\n              example: |\n                {\n                  success: true,\n                  data: {\n                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',\n                    name: 'test',\n                    events: [ 'meeting.started' ],\n                    url: 'https://testURL.com',\n                    created_at: '2021-09-09T10:25:12.330Z',\n                    updated_at: '2021-09-09T10:25:12.330Z'\n                  }\n                }\n        \"400\":\n          description: Error- malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example: |\n                {\n                  success: false,\n                  error: { code: 400, message: 'BAD_REQUEST: \"id\" must be a valid GUID' }\n                }\n        \"401\":\n          description: Invalid credentials\n          content:\n            application/json:\n              example: |\n                {\n                  message: \"Unauthorized\"\n                }\n    put:\n      summary: Replace a webhook\n      description: Replace all details of a single webhook\n      tags:\n        - Webhooks\n      operationId: replaceWebhook\n      parameters:\n        - name: id\n          in: path\n          description: ID of webhook\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/WebhookRequest\"\n            example: |\n              {\n                name: 'test',\n                events: [ 'meeting.started' ],\n                url: 'https://testURL.com'\n              }\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookSuccessResponse\"\n              example: |\n                {\n                  success: true,\n                  data: {\n                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',\n                    name: 'test',\n                    events: [ 'meeting.started' ],\n                    url: 'https://testURL.com',\n                    created_at: '2021-09-09T10:25:12.330Z',\n                    updated_at: '2021-09-09T10:25:12.376Z'\n                  }\n                }\n        \"400\":\n          description: Error- malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example: |\n                {\n                  success: false,\n                  error: { code: 400, message: 'BAD_REQUEST: \"id\" must be a valid GUID' }\n                }\n        \"401\":\n          description: Invalid credentials\n          content:\n            application/json:\n              example: |\n                {\n                  message: \"Unauthorized\"\n                }\n    patch:\n      summary: Edit a webhook\n      description: Partially edit details of a single webhook\n      tags:\n        - Webhooks\n      operationId: editWebhook\n      parameters:\n        - name: id\n          in: path\n          description: ID of webhook\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PatchWebhookRequest\"\n            example: |\n              {\n                name: 'test2',\n                events: [ 'meeting.ended' ],\n                url: 'https://testURL2.com'\n              }\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookSuccessResponse\"\n              example: |\n                {\n                  success: true,\n                  data: {\n                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',\n                    name: 'test2',\n                    events: [ 'meeting.ended' ],\n                    url: 'https://testURL2.com',\n                    created_at: '2021-09-09T10:25:12.330Z',\n                    updated_at: '2021-09-09T10:25:12.367Z'\n                  }\n                }\n        \"400\":\n          description: Error- malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example: |\n                {\n                  success: false,\n                  error: { code: 400, message: 'BAD_REQUEST: \"id\" must be a valid GUID' }\n                }\n        \"401\":\n          description: Invalid credentials\n          content:\n            application/json:\n              example: |\n                {\n                  message: \"Unauthorized\"\n                }\n    delete:\n      summary: Delete a webhook\n      description: Remove a single webhook by ID\n      tags:\n        - Webhooks\n      operationId: deleteWebhook\n      parameters:\n        - name: id\n          in: path\n          description: ID of webhook\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/WebhookSuccessResponse\"\n              example: |\n                {\n                  success: true,\n                  data: {\n                    id: '901e9adf-ebd9-41f0-9098-28171bc04ddd',\n                    name: 'test2',\n                    events: [ 'meeting.ended' ],\n                    url: 'https://testURL2.com',\n                    created_at: '2021-09-09T10:25:12.330Z',\n                    updated_at: '2021-09-09T10:25:12.367Z'\n                  }\n                }\n        \"400\":\n          description: Error- malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n              example: |\n                {\n                  success: false,\n                  error: { code: 400, message: 'BAD_REQUEST: \"id\" must be a valid GUID' }\n                }\n        \"401\":\n          description: Invalid credentials\n          content:\n            application/json:\n              example: |\n                {\n                  message: \"Unauthorized\"\n                }\n  \"/orgs\":\n    get:\n      summary: Gets all the user's organizations.\n      description: Gets all the user's organizations. This endpoint is paginated.\n      tags:\n        - Organizations\n      operationId: getAllOrgs\n      security:\n        - userAuth: []\n      parameters:\n        - in: query\n          name: per_page\n          schema:\n            type: integer\n            minimum: 1\n          description: Number of values to return in a single page. Default value is 25.\n        - in: query\n          name: page_no\n          schema:\n            type: integer\n            minimum: 1\n          description: The page number to return. Default value is 1.\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrganizationListSuccessResponse\"\n        \"400\":\n          description: Malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n    post:\n      summary: Create a new organization\n      description: Create a new organization. The authenticated user becomes the owner of this organization.\n      tags:\n        - Organizations\n      operationId: createOrg\n      security:\n        - userAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OrganizationRequest\"\n      responses:\n        \"201\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrganizationSuccessResponse\"\n        \"400\":\n          description: Malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"409\":\n          description: Organization with the provided name already exists\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  \"/orgs/{id}\":\n    get:\n      summary: Get details of a single organization.\n      description: Fetches details of a single organization by ID. User must be an owner of this organization.\n      tags:\n        - Organizations\n      operationId: getOrg\n      security:\n        - userAuth: []\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrganizationSuccessResponse\"\n        \"400\":\n          description: Malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: User is not authorized to perform this operation.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n    patch:\n      summary: Edit details of an organization. \n      description: Fetches details of a single organization. User must be an owner of this org.\n      tags:\n        - Organizations\n      operationId: editOrg\n      security:\n        - userAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PatchOrganizationRequest\"\n      responses:\n        \"200\":\n          description: Operation successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrganizationSuccessResponse\"\n        \"400\":\n          description: Malformed request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        \"401\":\n          description: Unauthorized user\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  \"/livestreams\":\n    post:\n      summary: Create a LiveStream\n      description: 'Create a live stream\n\n        '\n      operationId: StartaLiveStream\n      parameters:\n      - \"$ref\": \"#/components/parameters/Content-Type\"\n      responses:\n        '200':\n          description: ''\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: {}\n              examples:\n                example-1:\n                  value: {}\n      requestBody:\n        description: 'Create a live stream\n\n          '\n        required: true\n        content:\n          application/json:\n            schema:\n              type: string\n              example: testing\n            example: |-\n              {\n                  \"name\": \"testing\"\n              }\n      tags:\n      - LiveStreams\n    get:\n      summary: Get all LiveStreams\n      description: 'Get all live streams created by an organization\n\n        '\n      operationId: GetallLiveStreams\n      parameters: []\n      responses:\n        '200':\n          description: ''\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: {}\n              examples:\n                example-1:\n                  value:\n                    success: true\n                    message: ''\n                    data:\n                      limit: 10\n                      total: 1\n                      totalCount: 1\n                      pageCount: 1\n                      currentPage: 1\n                      livestreams:\n                      - id: '850340555635017830461318'\n                        title: testing\n                        input_rtmp_url: rtmp://livestreaming.dyte.io/LiveApp/850340555635017830461318?token=502603528024515256366542\n                        token_id: '502603528024515256366542'\n                        stream_key: 850340555635017830461318?token=502603528024515256366542\n                        player_url: https://livestreaming.dyte.io:5443/LiveApp/play.html?name=850340555635017830461318\n                        status: OFFLINE\n                        hls_play_url: https://livestreaming.dyte.io:5443/LiveApp/streams/850340555635017830461318.m3u8\n      tags:\n      - LiveStreams\n  \"/livestreams/{streamId}\":\n    get:\n      summary: Get a LiveStream\n      description: 'Get details of a particular live stream created by an organization\n\n        '\n      operationId: GetaLiveStream\n      parameters:\n      - \"$ref\": \"#/components/parameters/streamId\"\n      responses:\n        '200':\n          description: ''\n          headers: {}\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: {}\n              examples:\n                example-1:\n                  value:\n                    success: true\n                    data:\n                      id: '850340555635017830461318'\n                      title: testing\n                      input_rtmp_url: rtmp://livestreaming.dyte.io/LiveApp/850340555635017830461318?token=502603528024515256366542\n                      token_id: '502603528024515256366542'\n                      stream_key: 850340555635017830461318?token=502603528024515256366542\n                      player_url: https://livestreaming.dyte.io:5443/LiveApp/play.html?name=850340555635017830461318\n                      status: OFFLINE\n                      hls_play_url: https://livestreaming.dyte.io:5443/LiveApp/streams/850340555635017830461318.m3u8\n      tags:\n      - LiveStreams\n  \"/meetings/{meetingId}/active-session\":\n    get:\n      summary: Get an active session\n      description: Get an ongoing active session of a meeting\n      operationId: GetActiveSession\n      parameters:\n      - \"$ref\": \"#/components/parameters/meetingId\"\n      tags:\n      - ActiveSession\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/GetActiveSession\"\n        '404':\n          \"$ref\": \"#/components/responses/GetActiveSessionNotFound\"\n  \"/meetings/{meetingId}/active-session/kick\":\n    post:\n      summary: Kick participants from active session\n      description: Kick one or more participants using userId or customParticipantId\n        from an active session\n      operationId: KickPartcipants\n      parameters:\n      - \"$ref\": \"#/components/parameters/meetingId\"\n      tags:\n      - ActiveSession\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/KickParticipantsBody\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/KickParticipants\"\n        '404':\n          \"$ref\": \"#/components/responses/ParticipantNotFound\"\n  \"/meetings/{meetingId}/active-session/kick-all\":\n    post:\n      summary: Kick all participant\n      description: Kick all participants from an active session\n      operationId: KickAllParticipants\n      parameters:\n      - \"$ref\": \"#/components/parameters/meetingId\"\n      tags:\n      - ActiveSession\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/KickAllParticipants\"\n  \"/meetings/{meetingId}/active-session/mute\":\n    post:\n      summary: Mute participants of an active session\n      description: Mute one or more participants from an active session using userId\n        or customParticipantId\n      operationId: MuteParticipants\n      parameters:\n      - \"$ref\": \"#/components/parameters/meetingId\"\n      tags:\n      - ActiveSession\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/KickParticipantsBody\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/MuteParticipants\"\n  \"/meetings/{meetingId}/active-session/mute-all\":\n    post:\n      summary: Mute all participants\n      description: Mute all participants of an active session\n      operationId: MuteAllParticipants\n      parameters:\n      - \"$ref\": \"#/components/parameters/meetingId\"\n      tags:\n      - ActiveSession\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/MuteAllParticipantsBody\"\n      responses:\n        '200':\n          \"$ref\": \"#/components/responses/MuteAllParticipants\"\n  \"/meetings/{meetingId}/active-session/poll\":\n    post:\n      summary: Create a poll\n      description: Create a new poll in an active session\n      operationId: CreatePoll\n      parameters:\n      - \"$ref\": \"#/components/parameters/meetingId\"\n      tags:\n      - ActiveSession\n      requestBody:\n        \"$ref\": \"#/components/requestBodies/CreatePollBody\"\n      responses:\n        '201':\n          \"$ref\": \"#/components/responses/CreatePoll\"         \n"
		}
	},
	"Error": "parse: parse spec: paths: /orgs/{id}: get: operation \"getOrg\": parse path: path parameter not specified: \"id\""
}