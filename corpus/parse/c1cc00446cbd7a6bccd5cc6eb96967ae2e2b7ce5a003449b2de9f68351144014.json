{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/qdrant/qdrant"
		},
		"file": {
			"name": "openapi-main.ytt.yaml",
			"size": 0,
			"path": "openapi/openapi-main.ytt.yaml",
			"byteSize": 10349,
			"content": "#@ load(\"openapi.lib.yml\", \"response\", \"reference\", \"type\", \"array\")\n\nopenapi: 3.0.1\ninfo:\n  title: Qdrant API\n  description: \u003e\n\n    API description for Qdrant vector search engine.\n\n\n    This document describes CRUD and search operations on collections of points (vectors with payload).\n\n\n    Qdrant supports any combinations of `should`, `must` and `must_not` conditions,\n    which makes it possible to use in applications when object could not be described solely by vector.\n    It could be location features, availability flags, and other custom properties businesses should take into account.\n\n    ## Examples\n\n    This examples cover the most basic use-cases - collection creation and basic vector search.\n\n    ### Create collection\n\n    First - let's create a collection with dot-production metric.\n\n    ```\n\n    curl -X PUT 'http://localhost:6333/collections/test_collection' \\\n      -H 'Content-Type: application/json' \\\n      --data-raw '{\n        \"vectors\": {\n          \"size\": 4,\n          \"distance\": \"Dot\"\n        }\n      }'\n\n    ```\n\n    Expected response:\n\n    ```\n\n    {\n        \"result\": true,\n        \"status\": \"ok\",\n        \"time\": 0.031095451\n    }\n\n    ```\n\n    We can ensure that collection was created:\n\n    ```\n\n    curl 'http://localhost:6333/collections/test_collection'\n\n    ```\n\n    Expected response:\n\n    ```\n\n    {\n      \"result\": {\n        \"status\": \"green\",\n        \"vectors_count\": 0,\n        \"segments_count\": 5,\n        \"disk_data_size\": 0,\n        \"ram_data_size\": 0,\n        \"config\": {\n          \"params\": {\n            \"vectors\": {\n              \"size\": 4,\n              \"distance\": \"Dot\"\n            }\n          },\n          \"hnsw_config\": {\n            \"m\": 16,\n            \"ef_construct\": 100,\n            \"full_scan_threshold\": 10000\n          },\n          \"optimizer_config\": {\n            \"deleted_threshold\": 0.2,\n            \"vacuum_min_vector_number\": 1000,\n            \"max_segment_number\": 5,\n            \"memmap_threshold\": 50000,\n            \"indexing_threshold\": 20000,\n            \"flush_interval_sec\": 1\n          },\n          \"wal_config\": {\n            \"wal_capacity_mb\": 32,\n            \"wal_segments_ahead\": 0\n          }\n        }\n      },\n      \"status\": \"ok\",\n      \"time\": 2.1199e-05\n    }\n\n    ```\n\n\n    ### Add points\n\n    Let's now add vectors with some payload:\n\n    ```\n\n    curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n      \"points\": [\n        {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},\n        {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},\n        {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},\n        {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},\n        {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},\n        {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}\n      ]\n    }'\n\n    ```\n\n    Expected response:\n\n    ```\n\n    {\n        \"result\": {\n            \"operation_id\": 0,\n            \"status\": \"completed\"\n        },\n        \"status\": \"ok\",\n        \"time\": 0.000206061\n    }\n\n    ```\n\n    ### Search with filtering\n\n    Let's start with a basic request:\n\n    ```\n\n    curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"vector\": [0.2,0.1,0.9,0.7],\n        \"top\": 3\n    }'\n\n    ```\n\n    Expected response:\n\n    ```\n\n    {\n        \"result\": [\n            { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },\n            { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },\n            { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }\n        ],\n        \"status\": \"ok\",\n        \"time\": 0.000055785\n    }\n\n    ```\n\n    But result is different if we add a filter:\n\n    ```\n\n    curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\\n    -H 'Content-Type: application/json' \\\n    --data-raw '{\n        \"filter\": {\n            \"should\": [\n                {\n                    \"key\": \"city\",\n                    \"match\": {\n                        \"value\": \"London\"\n                    }\n                }\n            ]\n        },\n        \"vector\": [0.2, 0.1, 0.9, 0.7],\n        \"top\": 3\n    }'\n\n    ```\n\n    Expected response:\n\n    ```\n\n    {\n        \"result\": [\n            { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },\n            { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }\n        ],\n        \"status\": \"ok\",\n        \"time\": 0.000093972\n    }\n\n    ```\n\n  contact:\n    email: andrey@vasnetsov.com\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  version: master\nexternalDocs:\n  description: Find out more about Qdrant applications and demo\n  url: https://qdrant.tech/documentation/\nservers:\n  - url: \"{protocol}://{hostname}:{port}\"\n    variables:\n      protocol:\n        enum:\n          - http\n          - https\n        default: http\n      hostname:\n        default: localhost\n      port:\n        default: \"6333\"\ntags:\n  - name: collections\n    description: Searchable collections of points.\n  - name: points\n    description: Float-point vectors with payload.\n  - name: cluster\n    description: Service distributed setup\n  - name: snapshots\n    description: Storage and collections snapshots\n\npaths:\n\n  /collections/{collection_name}/points/scroll:\n    post:\n      tags:\n        - points\n      summary: Scroll points\n      description: Scroll request - paginate over all points which matches given filtering condition\n      operationId: scroll_points\n      requestBody:\n        description: Pagination and filter parameters\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ScrollRequest\"\n\n      parameters:\n        - name: collection_name\n          in: path\n          description: Name of the collection to retrieve from\n          required: true\n          schema:\n            type: string\n      responses: #@ response(reference(\"ScrollResult\"))\n\n  /collections/{collection_name}/points/search:\n    post:\n      tags:\n        - points\n      summary: Search points\n      description: Retrieve closest points based on vector similarity and given filtering conditions\n      operationId: search_points\n      requestBody:\n        description: Search request with optional filtering\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SearchRequest\"\n\n      parameters:\n        - name: collection_name\n          in: path\n          description: Name of the collection to search in\n          required: true\n          schema:\n            type: string\n      responses: #@ response(array(reference(\"ScoredPoint\")))\n\n  /collections/{collection_name}/points/search/batch:\n    post:\n      tags:\n        - points\n      summary: Search batch points\n      description: Retrieve by batch the closest points based on vector similarity and given filtering conditions\n      operationId: search_batch_points\n      requestBody:\n        description: Search batch request\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SearchRequestBatch\"\n\n      parameters:\n        - name: collection_name\n          in: path\n          description: Name of the collection to search in\n          required: true\n          schema:\n            type: string\n      responses: #@ response(array(array(reference(\"ScoredPoint\"))))\n\n  /collections/{collection_name}/points/recommend:\n    post:\n      tags:\n        - points\n      summary: Recommend points\n      description: Look for the points which are closer to stored positive examples and at the same time further to negative examples.\n      operationId: recommend_points\n      requestBody:\n        description: Request points based on positive and negative examples.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RecommendRequest\"\n\n      parameters:\n        - name: collection_name\n          in: path\n          description: Name of the collection to search in\n          required: true\n          schema:\n            type: string\n      responses: #@ response(array(reference(\"ScoredPoint\")))\n\n  /collections/{collection_name}/points/recommend/batch:\n    post:\n      tags:\n        - points\n      summary: Recommend batch points\n      description: Look for the points which are closer to stored positive examples and at the same time further to negative examples.\n      operationId: recommend_batch_points\n      requestBody:\n        description: Request points based on positive and negative examples.\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RecommendRequestBatch\"\n\n      parameters:\n        - name: collection_name\n          in: path\n          description: Name of the collection to search in\n          required: true\n          schema:\n            type: string\n      responses: #@ response(array(array(reference(\"ScoredPoint\"))))\n\n  /collections/{collection_name}/points/count:\n    post:\n      tags:\n        - points\n      summary: Count points\n      description: Count points which matches given filtering condition\n      operationId: count_points\n      requestBody:\n        description: Request counts of points which matches given filtering condition\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CountRequest\"\n\n      parameters:\n        - name: collection_name\n          in: path\n          description: Name of the collection to count in\n          required: true\n          schema:\n            type: string\n      responses: #@ response(reference(\"CountResult\"))\n\ncomponents:\n  schemas:\n    ErrorResponse:\n      type: object\n      properties:\n        time:\n          type: number\n          format: float\n          description: Time spent to process this request\n        status:\n          type: object\n          properties:\n            error:\n              type: string\n              description: Description of the occurred error.\n        result:\n          type: object\n          nullable: true\n\n",
			"canonicalURL": "/github.com/qdrant/qdrant@18b75d9069538e7a8d95a4b739bf4355846d8048/-/blob/openapi/openapi-main.ytt.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/qdrant/qdrant/blob/18b75d9069538e7a8d95a4b739bf4355846d8048/openapi/openapi-main.ytt.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/collections/{collection_name}/points/count\": post: operation \"count_points\": requestBody: parse content: application/json: schema: parse schema: at 1:5360: find schema: resolve: can't find value for \"components/schemas/CountRequest\""
}