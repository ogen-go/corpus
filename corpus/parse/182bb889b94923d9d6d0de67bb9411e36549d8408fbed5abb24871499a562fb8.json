{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plantbreeding/BrAPI"
		},
		"file": {
			"name": "Images_ImageDbId_ImageContent_PUT.yaml",
			"size": 0,
			"path": "Specification/BrAPI-Phenotyping/Images/Images_ImageDbId_ImageContent_PUT.yaml",
			"byteSize": 2165,
			"content": "info:\n  title: BrAPI\n  version: ''\nopenapi: 3.0.0\npaths:\n  /images/{imageDbId}/imagecontent:\n    put:\n      summary: Attach an image binary file to an existing image metadata record\n      description: |-\n        This endpoint is used to attach an image binary file to an existing image metadata record. All of the other Images endpoints \n        deal with the JSON for image metadata, but 'PUT /images/{imageDbId}/imagecontent' allows you to send any binary file with a Content \n        Type (MIME) of image/*. When the real image is uploaded, the server may choose to update some of the metadata to reflect the \n        reality of the image that was uploaded, and should respond with the updated JSON.\n        \n        Implementation Notes\n        \n        - This endpoint should be implemented with 'POST /images' for full image upload capability\n        \n        - This endpoint should be implemented with 'PUT /images/{imageDbId}' for full image update capability\n        \n        - A server may choose to modify the image metadata object based on the actually image which has been uploaded by this endpoint. \n        \n        - Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the \n          image binary file. \n\n        An example use case is available on the BrAPI Wiki -\u003e https://wiki.brapi.org/index.php/Image_Upload\n      parameters:\n      - description: The unique identifier for an image\n        in: path\n        name: imageDbId\n        required: true\n        schema:\n          type: string\n      - $ref: '#/components/parameters/authorizationHeader'\n      requestBody:\n        content:\n          image/*:\n            schema:\n              format: binary\n              type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/ImageSingleResponse'\n        '400':\n          $ref: '#/components/responses/400BadRequest'\n        '401':\n          $ref: '#/components/responses/401Unauthorized'\n        '403':\n          $ref: '#/components/responses/403Forbidden'\n        '404':\n          $ref: '#/components/responses/404NotFound'\n      tags:\n      - Images\n",
			"canonicalURL": "/github.com/plantbreeding/BrAPI@a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/-/blob/Specification/BrAPI-Phenotyping/Images/Images_ImageDbId_ImageContent_PUT.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/plantbreeding/BrAPI/blob/a45723dba8753a1c1177ec8f7759d57ebcf5f5b1/Specification/BrAPI-Phenotyping/Images/Images_ImageDbId_ImageContent_PUT.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /images/{imageDbId}/imagecontent: put: parameters: parse parameter \"\": resolve \"#/components/parameters/authorizationHeader\" reference: can't find value for \"components/parameters/authorizationHeader\""
}