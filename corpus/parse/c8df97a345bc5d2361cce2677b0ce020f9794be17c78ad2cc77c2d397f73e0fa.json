{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Terraform-GUI/terraform-gui"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "docs/swagger.yaml",
			"byteSize": 11527,
			"content": "openapi: 3.0.0\ninfo:\n  title: TERRAFORM GUI\n  version: 1.0.0\nservers:\n  - url: https://github.com\n  - url: https://api.github.com\n  - url: http://{{host}}\n  - url: http://{{host}}password\ncomponents:\n  securitySchemes:\n    apikeyAuth:\n      type: http\n      scheme: apikey\n    noauthAuth:\n      type: http\n      scheme: noauth\ntags:\n  - name: Github Flow\n  - name: /api\n  - name: /api \u003e /users\n  - name: /api \u003e /projects\n  - name: /login\n  - name: /users\n  - name: /users \u003e /password\npaths:\n  /login/oauth/authorize:\n    get:\n      tags:\n        - Github Flow\n      summary: 1. Authorize Github app link\n      parameters:\n        - name: client_id\n          in: query\n          schema:\n            type: string\n          example: '{{GITHUB_APP_CLIENT_ID}}'\n        - name: redirect_uri\n          in: query\n          schema:\n            type: string\n          example: '{{GITHUB_POST_AUTH_LINK_CALLBACK}}'\n        - name: state\n          in: query\n          schema:\n            type: string\n          example: random\n        - name: scope\n          in: query\n          schema:\n            type: string\n          example: user:email\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /login/oauth/access_token:\n    get:\n      tags:\n        - Github Flow\n      summary: Request Refresh Token\n      parameters:\n        - name: Accept\n          in: header\n          schema:\n            type: string\n          example: application/json\n        - name: refresh_token\n          in: query\n          schema:\n            type: string\n          example: '{{GITHUB_USER_REFRESH_TOKEN}}'\n        - name: grant_type\n          in: query\n          schema:\n            type: string\n          example: refresh_token\n        - name: client_id\n          in: query\n          schema:\n            type: string\n          example: '{{GITHUB_APP_CLIENT_ID}}'\n        - name: client_secret\n          in: query\n          schema:\n            type: string\n          example: '{{GITHUB_APP_CLIENT_SECRET}}'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /user/emails:\n    get:\n      tags:\n        - Github Flow\n      summary: 4. Retrieve User Emails\n      security:\n        - apikeyAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /applications/{GITHUB_APP_CLIENT_ID}/token:\n    get:\n      tags:\n        - Github Flow\n      summary: Check an Access Token\n      parameters:\n        - name: Accept\n          in: header\n          schema:\n            type: string\n          example: application/json\n        - name: GITHUB_APP_CLIENT_ID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/users/email:\n    patch:\n      tags:\n        - /api \u003e /users\n      summary: request_update_email\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                email: new-email@test.com\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/users/me:\n    get:\n      tags:\n        - /api \u003e /users\n      summary: me\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/users/delete:\n    delete:\n      tags:\n        - /api \u003e /users\n      summary: delete_user\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/projects:\n    get:\n      tags:\n        - /api \u003e /projects\n      summary: get_all_projects\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    post:\n      tags:\n        - /api \u003e /projects\n      summary: create_project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                name: test\n                nodes:\n                  - id: test\n                    data:\n                      label: label\n                      resource:\n                        type: aws_vpc\n                        description: description vpc\n                        arguments:\n                          - name: tenancy\n                            value: default\n                    position:\n                      x: 1\n                      'y': 2\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/projects/{PROJECT_ID}:\n    get:\n      tags:\n        - /api \u003e /projects\n      summary: get_project\n      parameters:\n        - name: PROJECT_ID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    put:\n      tags:\n        - /api \u003e /projects\n      summary: update_project\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                name: new name\n                nodes:\n                  - id: '1'\n                    data:\n                      label: new label\n                      resource:\n                        type: aws_vpc\n                        description: new description vpc\n                        arguments:\n                          - name: tenancy\n                            value: '1'\n                    position:\n                      x: 2\n                      'y': 1\n                  - id: '2'\n                    data:\n                      label: new label\n                      resource:\n                        type: aws_ec2\n                        description: new description ec2\n                        arguments:\n                          - name: ami\n                            value: test\n                    position:\n                      x: 2\n                      'y': 1\n                edges:\n                  - id: 2-1\n                    source: '2'\n                    target: '1'\n      parameters:\n        - name: PROJECT_ID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - /api \u003e /projects\n      summary: delete_project\n      parameters:\n        - name: PROJECT_ID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/projects/{PROJECT_ID}/terraform:\n    get:\n      tags:\n        - /api \u003e /projects\n      summary: get_template_terraform\n      parameters:\n        - name: PROJECT_ID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/projects/{PROJECT_ID}/terraform-archive:\n    get:\n      tags:\n        - /api \u003e /projects\n      summary: get_archive_terraform\n      parameters:\n        - name: PROJECT_ID\n          in: path\n          schema:\n            type: string\n          required: true\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/test:\n    get:\n      tags:\n        - /api\n      summary: test\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/login:\n    post:\n      tags:\n        - /api\n      summary: login\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                username: '{{USERNAME}}'\n                password: '{{PASSWORD}}'\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/token/refresh:\n    post:\n      tags:\n        - /api\n      summary: token_refresh\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                refresh_token: '{{REFRESH_TOKEN}}'\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /login/github:\n    get:\n      tags:\n        - /login\n      summary: login_github\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /forget:\n    post:\n      tags:\n        - /users \u003e /password\n      summary: /forget\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                email: test@testdd.fr\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /password/reset:\n    post:\n      tags:\n        - /users \u003e /password\n      summary: /reset\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                token: \u003e-\n                  51fc3e46ea1555acfc32c85ed4069be2ae3238bef976df543e8858a67d0fbb21\n                password:\n                  password: totoA123\n                  confirm: totoA123\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /register:\n    post:\n      tags:\n        - default\n      summary: register\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                email: '{{USERNAME}}'\n                password:\n                  password: '{{PASSWORD}}'\n                  confirm: '{{PASSWORD}}'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /users/confirm:\n    post:\n      tags:\n        - default\n      summary: confirm\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                token: \u003e-\n                  b5d23a3195abad83f5a8e9fdc9601f9ee9b2abf30fadc32192794bd762b788e2\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /users/confirm/email:\n    post:\n      tags:\n        - default\n      summary: confirm_email\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                token: \u003e-\n                  bdd93289576d9f62b4edfa410657a214b961f229af54bfa6249b8c8e6c5d24d3\n      security:\n        - noauthAuth: []\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n\n",
			"canonicalURL": "/github.com/Terraform-GUI/terraform-gui@41629f2a48e0a226f87c51f35f3167baed2a7d2f/-/blob/docs/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/Terraform-GUI/terraform-gui/blob/41629f2a48e0a226f87c51f35f3167baed2a7d2f/docs/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/api/login\": post: security: parse security scheme \"noauthAuth\": http: at docs/swagger.yaml:17:15: invalid \"scheme\": \"noauth\""
}