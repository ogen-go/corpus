{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nuts-foundation/nuts-node"
		},
		"file": {
			"name": "v1.yaml",
			"size": 0,
			"path": "docs/_static/didman/v1.yaml",
			"byteSize": 14580,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: Nuts DID Manager API spec\n  description: API specification for DID management helper APIs. The goal of this API is to help administrative interfaces to manage DIDs.\n  version: 1.0.0\n  license:\n    name: GPLv3\nservers:\n  - url: http://localhost:1323\npaths:\n  /internal/didman/v1/did/{did}/contactinfo:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n    get:\n      operationId: getContactInformation\n      tags:\n        - \"contact info\"\n      responses:\n        \"200\":\n          description: The actual Contact Information of the DID document.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactInformation'\n        default:\n          $ref: '../common/error_response.yaml'\n    put:\n      summary: Add a predetermined DID Service with real life contact information\n      description: |\n        In case of emergency or support questions a service provider operating a nuts node should\n        provide contact inforamtion such as an emergency phone number and support email address.\n\n        There is at most one contact-information service per DID.\n      tags:\n        - \"contact info\"\n      operationId: updateContactInformation\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContactInformation'\n      responses:\n        \"200\":\n          description: The given type and URL have been added as service to the DID Document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContactInformation'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/didman/v1/did/{did}/endpoint:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n    post:\n      operationId: \"addEndpoint\"\n      summary: Add a service endpoint or a reference to a service.\n      description: |\n        To distinguish from compound services, this type of service will be called an endpoint.\n        In the Nuts specs this type of service is called a concrete service.\n\n        Add an endpoint with a type and URL to a DID Service in a Document. The API will convert it to a DID service with the serviceEndpoint set to a URL.\n        This API will also check if an endpoint with the same type already exists. This API is not meant to add compound services.\n\n        The URL can either be an Endpoint or a reference to another service.\n\n        error returns:\n        * 400 - incorrect input\n        * 404 - unknown DID\n        * 409 - a service with the same type already exists\n      tags:\n        - services\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EndpointProperties'\n      responses:\n        \"200\":\n          description: The service which has been added to the DID Document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Endpoint'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/didman/v1/did/{did}/endpoint/{type}:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n      - name: type\n        in: path\n        description: Type of the service\n        required: true\n        example: \"eOverdracht\"\n        schema:\n          type: string\n    delete:\n      operationId: deleteEndpointsByType\n      description: |\n        Delete all endpoints with the provided type from the DID Document.\n\n        error returns:\n        * 400 - malformatted input, like the DID or the endpoint type.\n        * 404 - DID or service with this type not found.\n        * 409 - the service is referenced by other services\n      tags:\n        - services\n      responses:\n        204:\n          description: |\n            All existing endpoints with with this type were succesfully deleted.\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/didman/v1/did/{did}/compoundservice:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n    get:\n      operationId: getCompoundServices\n      summary: |\n        Get a list of compound services for a DID document.\n\n        error responses:\n        * 400 - incorrect input\n        * 404 - unknown DID\n      tags:\n        - services\n      responses:\n        \"200\":\n          description: |\n            The list of compound services on the DID document.\n            It excludes special compound services like ContactInformation.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CompoundService'\n        default:\n          $ref: '../common/error_response.yaml'\n    post:\n      summary: Add a compound service to a DID Document.\n      description: |\n        Add a service to a DID Document that references one or more endpoints using a map. The keys of the map indicate the service name/type, the values contain the references to the endpoints.\n        The endpoints may be in the same or in another DID Document, but they must be resolvable when the service is created.\n        The references must follow the format for service references as specified by Nuts RFC006.\n\n        This API will also check if an endpoint with the same type already exists. This API is not meant to add endpoints.\n\n        error returns:\n        * 400 - incorrect input\n        * 404 - unknown DID\n        * 409 - a service with the same type already exists\n      operationId: \"addCompoundService\"\n      tags:\n        - services\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CompoundServiceProperties'\n      responses:\n        \"200\":\n          description: The compound service has been added to the DID Document\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CompoundService'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/didman/v1/did/{did}/compoundservice/{compoundServiceType}/endpoint/{endpointType}:\n    parameters:\n      - name: did\n        in: path\n        description: URL encoded DID.\n        required: true\n        example: \"did:nuts:1234\"\n        schema:\n          type: string\n      - name: compoundServiceType\n        in: path\n        description: Service type of the compound service containing the endpoint to be resolved.\n        required: true\n        example: geolocation\n        schema:\n          type: string\n      - name: endpointType\n        in: path\n        description: Entry in the compound service to be resolved as endpoint.\n        required: true\n        example: geolocation-rest-api\n        schema:\n          type: string\n    get:\n      operationId: getCompoundServiceEndpoint\n      summary: Retrieves the endpoint with the specified endpointType from the specified compound service.\n      description: |\n        Retrieves the endpoint with the specified endpointType from the specified compound service.\n        It returns the serviceEndpoint of the specified service (which must be an absolute URL endpoint).\n\n        error responses:\n        * 400 - incorrect input (e.g. the given service type isn't a compound service)\n        * 404 - unknown DID, compound service or endpoint\n        * 406 - service references are nested too deep or reference is invalid in other ways\n      tags:\n        - services\n      parameters:\n        - name: resolve\n          in: query\n          description: |\n            Whether to resolve references. When true and the given endpoint is a reference it returns the endpoint of the referenced service.\n            If false it returns the reference itself. Defaults to true.\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: |\n            The endpoint of the given type and compound service is returned.\n            It returns JSON by default, text if requested through the accept header (text/plain)\n          content:\n            text/plain:\n              schema:\n                type: string\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EndpointResponse'\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/didman/v1/service/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: URL encoded service ID.\n        required: true\n        example: \"did:nuts:1234#service-x\"\n        schema:\n          type: string\n    delete:\n      summary: Remove a service from a DID Document.\n      description: |\n        Remove a service from a DID Document.\n\n        error returns:\n        * 400 - incorrect input\n        * 404 - unknown DID\n        * 409 - the service is referenced by other services\n      tags:\n        - services\n      operationId: \"deleteService\"\n      responses:\n        \"204\":\n          description: The service has been removed\n        default:\n          $ref: '../common/error_response.yaml'\n  /internal/didman/v1/search/organizations:\n    parameters:\n      - name: query\n        in: query\n        description: \u003e\n          Query used for searching the organization by name. The query is matched to the organization's name in a SQL's\n          \"LIKE\" fashion: it matches partial strings and also names that sound like the given query,\n          using a phonetic transformation algorithm.\n        required: true\n        example: \"Zorgcentrum de Roodvink\"\n        schema:\n          type: string\n      - name: didServiceType\n        in: query\n        description: Filters organizations by service of the given type in the organizations' DID document (optional).\n        required: false\n        example: \"eOverdracht-receiver\"\n        schema:\n          type: string\n    get:\n      operationId: searchOrganizations\n      tags:\n        - search\n      responses:\n        \"200\":\n          description: Organizations resulting from the search.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OrganizationSearchResult'\n        default:\n          $ref: '../common/error_response.yaml'\ncomponents:\n  schemas:\n    Endpoint:\n      type: object\n      description: A combination of type and URL.\n      required:\n        - id\n        - type\n        - serviceEndpoint\n      properties:\n        id:\n          type: string\n        type:\n          description: type of the endpoint. May be freely choosen.\n          type: string\n        serviceEndpoint:\n          description: An endpoint URL or a reference to another service.\n          type: string\n          example: did:nuts:123/serviceEndpoint?type=eOverdracht-fhir\n    EndpointProperties:\n      type: object\n      description: A combination of type and URL.\n      required:\n        - type\n        - endpoint\n      properties:\n        type:\n          description: type of the endpoint. May be freely choosen.\n          type: string\n        endpoint:\n          description: An endpoint URL or a reference to another service.\n          type: string\n          example: did:nuts:123/serviceEndpoint?type=eOverdracht-fhir\n    CompoundServiceProperties:\n      type: object\n      description: A creation request for a compound service that contains endpoints. The endpoints can be either absolute endpoints or references.\n      required:\n        - type\n        - serviceEndpoint\n      properties:\n        type:\n          description: type of the endpoint. May be freely choosen.\n          type: string\n        serviceEndpoint:\n          description: A map containing service references and/or endpoints.\n          example: { 'auth': 'did:nuts:1312321/serviceEndpoint?type=auth' }\n          type: object\n    CompoundService:\n      type: object\n      description: A creation request for a compound service with endpoints and/or references to endpoints.\n      required:\n        - id\n        - type\n        - serviceEndpoint\n      properties:\n        id:\n          type: string\n        type:\n          description: type of the endpoint. May be freely choosen.\n          type: string\n        serviceEndpoint:\n          description: A map containing service references and/or endpoints.\n          example: { 'auth': 'did:nuts:1312321/serviceEndpoint?type=auth' }\n          type: object\n    ContactInformation:\n      type: object\n      description: A set of contact information entries\n      required:\n        - name\n        - phone\n        - email\n        - website\n      properties:\n        name:\n          type: string\n          description: The commonly known name of the service provider\n        phone:\n          type: string\n          description: phoneNumber for high priority support\n        email:\n          type: string\n          description: email address for normal priority support\n        website:\n          type: string\n          description: URL of the public website of this Service Provider. Can point to a Nuts specific page with more information about the node and how to contact.\n    OrganizationSearchResult:\n      type: object\n      description: An entry resulting from the organozation search.\n      properties:\n        organization:\n          type: object\n          description: \u003e\n            An object describing the found entity, modelled as a concept as specified by VCR's OpenAPI specification.\n            See https://nuts-node.readthedocs.io/en/latest/pages/development/3-vc.html for examples on which concepts are supported and how they're structured.\n        didDocument:\n          $ref: '../vdr/v1.yaml#/components/schemas/DIDDocument'\n    EndpointResponse:\n      type: object\n      required:\n        - endpoint\n      properties:\n        endpoint:\n          type: string\n          description: The endpoint URL.\n  securitySchemes:\n    jwtBearerAuth:\n      type: http\n      scheme: bearer\n\nsecurity:\n  - {}\n  - jwtBearerAuth: []",
			"canonicalURL": "/github.com/nuts-foundation/nuts-node@e0123cb84e20989343393b5a46b0cac40115b61d/-/blob/docs/_static/didman/v1.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/nuts-foundation/nuts-node/blob/e0123cb84e20989343393b5a46b0cac40115b61d/docs/_static/didman/v1.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"OrganizationSearchResult\": parse schema: property \"didDocument\": parse schema: at 1:2652: external \"../vdr/v1.yaml\": get: file: local file reference is not allowed"
}