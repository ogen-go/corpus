{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/NENA911/i3"
		},
		"file": {
			"name": "i3-policy-store.yaml",
			"size": 0,
			"path": "schema/i3-policy-store.yaml",
			"byteSize": 22800,
			"content": "openapi: 3.0.1\ninfo:\n  title: Policy Store\n  version: \"1.0\"\nservers:\n  - url: http://localhost/PolicyStore/v1\npaths:\n  /Policies:\n    get:\n      tags:\n        - RetrievePolicy, UpdatedPolicy\n      summary: Retrieves all policies from the store. Use limit and start parameters for pagination.\n      operationId: RetrievePolicy\n      parameters:\n        - name: limit\n          in: query\n          description: Maximum number of results to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: start\n          in: query\n          description: First item in the page of results, as an ordinal 1-based integer\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n        - name: policyOwner\n          in: query\n          description: ID of the Agency owning policy(ies)\n          required: false\n          schema:\n            type: string\n        - name: policyType\n          in: query\n          description: Type of the policy\n          required: false\n          schema:\n            type: string\n        - name: policyQueueName\n          in: query\n          description: Policy queue name\n          required: false\n          schema:\n            type: string\n            format: uri\n        - name: policyId\n          in: query\n          description: Id of the policy\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Policies found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyArray'\n        '307':\n          description: Temporary Redirect\n          headers:\n            Location:\n              description: Referral URI of another Policy Store which may store the policy requested\n              schema:\n                type: string\n        '404':\n          description: Not found\n        '451':\n          description: Unknown or bad Policy Type\n        '452':\n          description: Unknown or bad Agency Name\n        '453':\n          description: Not available here, no referral available\n        '454':\n          description: Unspecified Error\n    post:\n      tags:\n        - CreatePolicy\n      summary: Creates a new policy in the Policy Store\n      operationId: CreatePolicy\n      requestBody:\n        description: Policy to add (JWS using flattened JSON serialization)\n        content:\n          application/json:\n            schema:\n              $ref: 'i3-common.yaml#/components/schemas/Jws'\n        required: true\n      responses:\n        '201':\n          description: Policy successfully created\n        '434':\n          description: Signature Verification Failure\n        '436':\n          description: Duplicate or Invalid Priority\n        '437':\n          description: Bad Policy Structure\n        '438':\n          description: Unacceptable Algorithm\n        '451':\n          description: Unknown or bad Policy Type\n        '452':\n          description: Unknown or bad Agency Name\n        '454':\n          description: Unspecified Error\n        '459':\n          description: Bad policyExpirationTime\n    put:\n      tags:\n        - UpdatePolicy\n      summary: Updates an existing policy. In order to identify a policy the following parameters must be specified - policyType, policyQueueName OR policyId.\n      operationId: UpdatePolicy\n      parameters:\n        - name: policyOwner\n          in: query\n          description: Owner of the policy\n          required: true\n          schema:\n            type: string\n        - name: policyType\n          in: query\n          description: Type of the policy\n          required: true\n          schema:\n            type: string\n        - name: policyQueueName\n          in: query\n          description: Policy queue name\n          required: false\n          schema:\n            type: string\n            format: uri\n        - name: policyId\n          in: query\n          description: Id of the policy\n          required: false\n          schema:\n            type: string\n      requestBody:\n        description: Policy to update (JWS using flattened JSON serialization)\n        content:\n          application/json:\n            schema:\n              $ref: 'i3-common.yaml#/components/schemas/Jws'\n        required: true\n      responses:\n        '200':\n          description: Policy successfully updated\n        '404':\n          description: Not found\n        '434':\n          description: Signature Verification Failure\n        '436':\n          description: Duplicate or Invalid Priority\n        '437':\n          description: Bad Policy Structure\n        '451':\n          description: Unknown or bad Policy Type\n        '452':\n          description: Unknown or bad Agency Name\n        '454':\n          description: Unspecified Error\n        '460':\n          description: Bad PolicyExpirationTime\n    delete:\n      tags:\n        - DeletePolicy\n      summary: Deletes an existing policy. In order to identify a policy the following parameters must be specified - policyType, policyQueueName OR policyId.\n      operationId: DeletePolicy\n      parameters:\n        - name: policyOwner\n          in: query\n          description: Owner of the policy\n          required: true\n          schema:\n            type: string\n        - name: policyType\n          in: query\n          description: Type of the policy\n          required: true\n          schema:\n            type: string\n        - name: policyQueueName\n          in: query\n          description: Policy queue name\n          required: false\n          schema:\n            type: string\n            format: uri\n        - name: policyId\n          in: query\n          description: Id of the policy\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Policy successfully deleted\n        '404':\n          description: Not found\n        '451':\n          description: Unknown or bad Policy Type\n        '452':\n          description: Unknown or bad Agency Name\n        '454':\n          description: Unspecified Error\n  /PolicyEnums:\n    get:\n      tags:\n        - EnumeratePolicy\n      summary: Returns a list of policy types available in the store for a specific agency/service. Use limit and start parameters for pagination.\n      operationId: EnumeratePolicy\n      parameters:\n        - name: limit\n          in: query\n          description: Maximum number of results to return\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - name: start\n          in: query\n          description: First item in the page of results, as an ordinal 1-based integer\n          required: false\n          schema:\n            type: integer\n            format: int32\n            minimum: 1\n        - name: policyOwner\n          in: query\n          description: ID of the Agency owning policy(ies)\n          required: false\n          schema:\n            type: string\n        - name: policyType\n          in: query\n          description: Type of the policy\n          required: true\n          schema:\n            type: string\n        - name: policyQueueName\n          in: query\n          description: Policy queue name\n          required: false\n          schema:\n            type: string\n            format: uri\n        - name: policyId\n          in: query\n          description: Id of the policy\n          required: false\n          schema:\n            type: string\n        - name: policiesUpdatedSince\n          in: query\n          description: The query will return all policies having the time of creation or last modification greater than policiesUpdatedSince\n          required: false\n          schema:\n            type: string\n            format: date-time\n            example: '2020-03-10T10:00:00-05:00'\n      responses:\n        '200':\n          description: Policies enumerations found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PolicyEnumArray'\n        '404':\n          description: Not found\n        '451':\n          description: Unknown or bad Policy Type\n        '452':\n          description: Unknown or bad Agency Name\n        '454':\n          description: Unspecified Error\n  /Versions:\n    servers:\n      - url: https://api.example.com/PolicyStore\n        description: Override base path for Versions query\n    get:\n      tags:\n        - RetrieveVersions\n      summary: Retrieves all supported versions, vendor parameter is optional.\n      operationId: RetrieveVersions\n      responses:\n        '200':\n          description: Versions found\n          content:\n            application/json:\n              schema:\n                $ref: 'i3-common.yaml#/components/schemas/VersionsArray'\ncomponents:\n  schemas:\n    PolicyArray:\n      type: object\n      required:\n        - count\n        - totalCount\n        - policies\n      properties:\n        count:\n          type: integer\n          format: int32\n          description: Number of items in the array\n        totalCount:\n          type: integer\n          format: int32\n          description: Total number of items found\n        policies:\n          type: array\n          items:\n            $ref: 'i3-common.yaml#/components/schemas/Jws'\n          description: Array of Policy objects, each in JWS format (JWS using flattened JSON serialization)\n    Policy:\n      type: object\n      required:\n        - policyType\n        - policyOwner\n        - policyRules\n      properties:\n        policyType:\n          type: string\n          description: Values limited to those in the policyType registry\n        policyOwner:\n          type: string\n        policyQueueName:\n          type: string\n          format: uri\n        policyId:\n          type: string\n        policyExpirationTime:\n          type: string\n          format: date-time\n          example: '2020-03-10T10:00:00-05:00'\n        policyRules:\n          type: array\n          items:\n            $ref: '#/components/schemas/Rule'\n        policyLastModificationTime:\n          type: string\n          format: date-time\n          example: '2020-03-10T10:00:00-05:00'\n        description:\n          type: string\n    PolicyEnumArray:\n      type: object\n      required:\n        - count\n        - totalCount\n        - policyEnums\n      properties:\n        count:\n          type: integer\n          format: int32\n          description: Number of items in the array\n        totalCount:\n          type: integer\n          format: int32\n          description: Total number of items found\n        policyEnums:\n          type: array\n          items:\n            $ref: '#/components/schemas/PolicyEnum'\n          description: Array of Policy Enums objects\n    PolicyEnum:\n      type: object\n      required:\n        - policyType\n        - policyOwner\n        - policyExpirationTime\n        - policyLastModificationTime\n      properties:\n        policyType:\n          type: string\n        policyOwner:\n          type: string\n        policyQueueName:\n          type: string\n          format: uri\n        policyId:\n          type: string\n        policyExpirationTime:\n          type: string\n          format: date-time\n          example: '2020-03-10T10:00:00-05:00'\n        policyLastModificationTime:\n          type: string\n          format: date-time\n          example: '2020-03-10T10:00:00-05:00'\n    Rule:\n      type: object\n      required:\n        - id\n        - priority\n        - actions\n      properties:\n        id:\n          type: string\n          description: Unique ID within a Policy,\n        priority:\n          type: integer\n          format: int32\n          minimum: 0\n        conditions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Condition'\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n        description:\n          type: string\n    Action:\n      type: object\n      required:\n        - actionType\n      properties:\n        actionType:\n          type: string\n          enum: [RouteAction, NotifyAction, LogAction, BusyAction, InvokePolicyAction]\n        description:\n          type: string\n      discriminator:\n        propertyName: actionType\n    RouteAction:\n      allOf:\n        - $ref: '#/components/schemas/Action'\n        - type: object\n          required:\n            - recipientUri\n          properties:\n            recipientUri:\n              type: string\n              format: uri\n            rnaTimer:\n              type: integer\n              format: int32\n            cause:\n              type: string\n    NotifyAction:\n      allOf:\n        - $ref: '#/components/schemas/Action'\n        - type: object\n          required:\n            - eventCode\n            - urgency\n          properties:\n            recipient:\n              type: string\n              format: uri\n            eventCode:\n              type: string\n              description: Values limited to those in the EsrpNotifyEventCodes registry\n            urgency:\n              type: integer\n              format: int32\n            comment:\n              type: string\n    BusyAction:\n      allOf:\n        - $ref: '#/components/schemas/Action'\n    LogAction:\n      allOf:\n        - $ref: '#/components/schemas/Action'\n        - type: object\n          required:\n            - message\n          properties:\n            message:\n              type: string\n    InvokePolicyAction:\n      allOf:\n        - $ref: '#/components/schemas/Action'\n        - type: object\n          required:\n            - policyType\n          properties:\n            policyType:\n              type: string\n            policyQueueName:\n              type: string\n              format: uri\n            policyId:\n              type: string\n    Condition:\n      type: object\n      required:\n        - conditionType\n      properties:\n        conditionType:\n          $ref: 'i3-common.yaml#/components/schemas/ConditionType'\n        negation:\n          type: boolean\n        description:\n          type: string\n      discriminator:\n        propertyName: conditionType\n    TimePeriodCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - dateStart\n            - dateEnd\n          properties:\n            dateStart:\n              type: string\n              format: date-time\n              example: '2019-11-04T02:00:00-05:00'\n            dateEnd:\n              type: string\n              format: date-time\n              example: '2020-03-10T01:59:59-05:00'\n            timeStart:\n              type: string\n              example: '08:00:00'\n            timeEnd:\n              type: string\n              example: '18:00:00'\n            weekdayList:\n              type: string\n              example: 'MO,TU,WE,TH,FR'\n    SipHeaderCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - field\n            - operator\n            - content\n          properties:\n            field:\n              type: string\n            operator:\n              type: string\n              enum: [EQ, SS, IS]\n            content:\n              type: string\n    AdditionalDataCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - type\n            - operator\n          properties:\n            type:\n              type: string\n            element:\n              type: string\n            operator:\n              type: string\n              enum: [exists, missing, EQ, SS, NE, GT, LT, GE, LE]\n            content:\n              type: string\n    MimeBodyCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - mimeList\n          properties:\n            mimeList:\n              type: array\n              items:\n                type: string\n    LocationCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - location\n          properties:\n            location:\n              type: object\n              required:\n                - lo\n                - profile\n                - label\n                - lang\n              properties:\n                lo:\n                  type: string\n                profile:\n                  type: string\n                  enum: [civic, geodetic]\n                label:\n                  type: string\n                lang:\n                  type: string\n                extension:\n                  type: object\n            extension:\n              type: object\n    CallSuspicionCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - scoreFrom\n            - scoreTo\n          properties:\n            scoreFrom:\n              type: integer\n              format: int32\n            scoreTo:\n              type: integer\n              format: int32\n    SecurityPostureCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - service\n            - condition\n            - value\n          properties:\n            service:\n              type: string\n            condition:\n              type: string\n              enum: [EQ, NE]\n            value:\n              type: string\n              description: Values limited to those in the SecurityPosture registry\n    QueueStateCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - queue\n            - condition\n            - value\n          properties:\n            queue:\n              type: string\n              format: uri\n            condition:\n              type: string\n              enum: [EQ, NE]\n            value:\n              type: string\n              description: Values limited to those in the QueueState registry\n    LostServiceUrnCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - urn\n          properties:\n            urn:\n              type: string\n    ServiceStateCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - service\n            - condition\n            - value\n          properties:\n            service:\n              type: string\n            condition:\n              type: string\n              enum: [EQ, NE]\n            value:\n              type: string\n              description: Values limited to those in the serviceState registry\n    CallSourceCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - operator\n            - content\n          properties:\n            operator:\n              type: string\n              enum: [EQ, SS, NE]\n            content:\n              type: string\n    BodyPartCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - contentType\n            - element\n            - operator\n            - content\n          properties:\n            contentType:\n              type: string\n            element:\n              type: string\n            operator:\n              type: string\n              enum: [EQ, SS, NE, GT, LT, GE, LE, exists, missing]\n            content:\n              type: string\n    RequestUriCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - operator\n            - content\n          properties:\n            operator:\n              type: string\n              enum: [EQ, SS, NE]\n            content:\n              type: string\n    NormalNextHopCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - operator\n            - content\n          properties:\n            operator:\n              type: string\n              enum: [EQ, SS, NE]\n            content:\n              type: string\n    IncomingQueueCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - operator\n            - content\n          properties:\n            operator:\n              type: string\n              enum: [EQ, SS, NE]\n            content:\n              type: string\n              format: uri\n    SdpOfferCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          properties:\n            video:\n              type: boolean\n            audio:\n              type: boolean\n            rtt:\n              type: boolean\n            im:\n              type: boolean\n            text:\n              type: boolean\n            langVideo:\n              type: array\n              items:\n                type: string\n            langAudio:\n              type: array\n              items:\n                type: string\n            langRtt:\n              type: array\n              items:\n                type: string\n            langIm:\n              type: array\n              items:\n                type: string\n            langText:\n              type: array\n              items:\n                type: string\n            langVideoPref:\n              $ref: '#/components/schemas/Pref'\n            langAudioPref:\n              $ref: '#/components/schemas/Pref'\n            langRttPref:\n              $ref: '#/components/schemas/Pref'\n            langImPref:\n              $ref: '#/components/schemas/Pref'\n            langTextPref:\n              $ref: '#/components/schemas/Pref'\n    CapCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - tag\n          properties:\n            tag:\n              type: string\n              enum: [Identifier, Sender, Address, InfoEventCode, InfoValueName]\n            operator:\n              type: string\n              enum: [EQ, SS, NE]\n            content:\n              type: string\n            nonInteractive:\n              type: boolean\n    CallingNumberVerificationStatusCondition:\n      allOf:\n        - $ref: '#/components/schemas/Condition'\n        - type: object\n          required:\n            - operator\n            - content\n          properties:\n            operator:\n              type: string\n              enum: [EQ, NE]\n            content:\n              type: string\n    Pref:\n      type: object\n      required:\n        - langList\n        - langTest\n      properties:\n        langList:\n          type: string\n        langTest:\n          type: string"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Rule\": parse schema: property \"conditions\": parse schema: item: parse schema: resolve \"#/components/schemas/Condition\": parse schema: property \"conditionType\": parse schema: resolve \"i3-common.yaml#/components/schemas/ConditionType\": find schema: external base \"i3-common.yaml\" is not supported"
}