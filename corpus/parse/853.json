{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Kong/swagger-ui-kong-theme"
		},
		"file": {
			"name": "httpbin.yaml",
			"path": "demo/public/specs/httpbin.yaml",
			"content": "openapi: 3.0.1\ninfo:\n  version: '1.0-oas3'\n  title: httpbin\n  description: An unofficial OpenAPI definition for [httpbin.org](https://httpbin.org).\n\nservers:\n  - url: https://httpbin.org\n  - url: http://httpbin.org\n  - url: https://eu.httpbin.org\n  - url: http://eu.httpbin.org\n\ntags:\n  - name: auth\n    description: Operations for testing various authentication types\n  - name: HTTP methods\n    description: Operations for testing different HTTP methods\n  - name: Status codes\n    description: Return the specified HTTP status code, or a random status code if more than one are given\n\n# All paths \u0026 parameters are described in\n# https://github.com/kennethreitz/httpbin/blob/master/httpbin/core.py\n\nexternalDocs:\n  url: http://httpbin.org/legacy\n\npaths:\n  # New operations for parsing time\n  /:\n    get:\n      summary: The current time, in a variety of formats\n      tags:\n        - time\n      servers:\n        - url: https://now.httpbin.org\n        - url: http://now.httpbin.org\n      #externalDocs:\n      #  url: /docs # ???\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  now:\n                    $ref: '#/components/schemas/Timestamp'\n                  urls:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                      - /\n                      - /docs\n                      - '/when/:human-timestamp'\n                      - '/parse/:machine-timestamp'\n                required:\n                  - now\n                  - urls\n\n  /when/{human-timestamp}:\n    get:\n      tags:\n        - time\n      servers:\n        - url: http://now.httpbin.org\n        - url: https://now.httpbin.org\n      parameters:\n        - in: path\n          name: human-timestamp\n          required: true\n          schema:\n            anyOf:\n              - type: string # ????\n      responses:\n        '200':\n          $ref: '#/components/responses/TimestampResponse'\n        '500':\n          description: oops\n\n  /parse/{machine-timestamp}:\n    get:\n      tags:\n        - time\n      servers:\n        - url: http://now.httpbin.org\n        - url: https://now.httpbin.org\n      parameters:\n        - in: path\n          name: machine-timestamp\n          required: true\n          schema:\n            anyOf:\n              - type: string # ????\n              - type: number\n      responses:\n        '200':\n          $ref: '#/components/responses/TimestampResponse'\n        '500':\n          description: oops\n\n  /get:\n    get:\n      tags:\n        - HTTP methods\n      summary: |\n        Returns the GET request's data. Accepts any query parameters and any headers.\n      parameters:\n        - $ref: '#/components/parameters/freeFormQuery'\n      responses:\n        '200':  # Change to 'default' ???\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /delete:\n    delete:\n      tags:\n        - HTTP methods\n      summary: |\n        Returns the DELETE request's data. Accepts any query parameters and any headers.\n      parameters:\n        - $ref: '#/components/parameters/freeFormQuery'\n      responses:\n        200:\n          description: OK\n\n  /post:\n    post:\n      tags:\n        - HTTP methods\n      # summary: POSTs a pizza order and returns the POSTed data.\n      summary: Returns the POSTed data\n      parameters:\n        - $ref: '#/components/parameters/freeFormQuery'\n      requestBody:\n        description: Data provided in the request body will be returned in the response.\n        content:\n          application/json:\n            schema: {}\n            example:\n              message: Hello, world!\n          application/vnd+json:\n            schema: {}\n            examples:\n              pizzaOrder:\n                summary: Pizza order data\n                description: Longer description ...\n                value:\n                  custname: Alice\n                  custtel: '+1-202-555-0100'\n                  custemail: alice@wonderland.net\n                  size: medium\n                  topping: [cheese, mushroom]\n                  delivery: '19:00'\n                  comments: Ring the door bell three times\n              simpleObject:\n                summary: sample object\n                value:\n                  foo: bar\n          application/xml:\n            schema:\n              type: object\n            example:\n              message: Hello, world!\n          text/plain:\n            schema:\n              type: string\n              example: Hi there\n          application/x-www-form-urlencoded:\n            schema:\n              # anyOf:\n              #   - type: object\n              #     additionalProperties: true\n\n              #   - description: Pizza order\n              type: object\n              properties:\n                custname:\n                  type: string\n                  example: Alice\n                  description: Customer name\n                custtel:\n                  type: string\n                  example: '+1-202-555-0100'\n                  description: Customer phone number\n                custemail:\n                  type: string\n                  format: email\n                  example: alice@wonderland.net\n                  description: Customer email address\n                size:\n                  type: string\n                  enum:\n                    - small\n                    - medium\n                    - large\n                  description: Pizza size\n                topping:\n                  type: array\n                  items:\n                    type: string\n                    enum:\n                      - bacon\n                      - cheese\n                      - mushroom\n                      - onion\n                  description: Pizza toppings\n                delivery:\n                  type: string\n                  example: '13:30'\n                  description: Delivery time\n                comments:\n                  type: string\n                  example: ASAP\n                  description: Comments\n            examples:\n              pizzaOrder:\n                summary: Pizza order data\n                description: Longer description ...\n                value:\n                  custname: Alice\n                  custtel: '+1-202-555-0100'\n                  custemail: alice@wonderland.net\n                  size: medium\n                  topping: [cheese, mushroom]\n                  delivery: '19:00'\n                  comments: Ring the door bell three times\n              simpleObject:\n                summary: sample object\n                value:\n                  foo: bar\n          # multipart/form-data: {}  # TODO\n          '*/*':   # is this valid?\n            schema: {}\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommonResponse'\n              #schema:\n              #  type: object\n\n  # /put: {}\n  # /patch: {}\n  # /delete: {}\n  # /response-headers:\n  #   parameters:\n  #     - in: query\n  #       name: headers\n  #       # Arbitrary key=value pairs\n  #       schema:\n  #         type: object\n  #         example:\n  #           Server: unicorn\n  #       style: simple\n  #   get: {}\n  #   post: {}\n\n\n  /ip:\n    get:\n      summary: Returns Origin IP.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  origin:\n                    type: string\n                    description: \u003e\n                      The IP address, or a comma-separated list of IP addresses.\n                      For example, \"10.100.10.10, 10.100.20.254, 52.91.14.13\"'\n                    example: 10.100.10.10\n                required:\n                  - origin\n              examples:   # Content examples override schema-level examples\n                oneIp:\n                  description: Example of a single IP\n                  value:\n                    origin: 10.100.10.10\n                multipleIps:\n                  description: Example of multiple IPs\n                  value:\n                    origin: 10.100.10.10, 10.100.20.254, 52.91.14.13\n\n  /user-agent:\n    get:\n      summary: Returns the user agent.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user-agent:\n                    type: string\n                    example: curl/7.37.0\n                required:\n                  - user-agent\n\n  /headers:\n    get:\n      summary: Returns the request headers.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  headers:\n                    type: object\n                    additionalProperties:\n                      type: string\n                    # wrong syntax!\n                    #example:\n                    #  $ref: '#/components/examples/headers'\n                required:\n                  - headers\n\n  # /anything:\n  #   summary: Returns request data, including method used.\n  #   get: {}\n  #   post: {}\n  #   put: {}\n  #   patch: {}\n  #   delete: {}\n  #   trace: {}\n  #   options: {}\n\n  # /anything/{anything}:\n  #   summary: Returns request data, including method used.\n\n  #   parameters:\n  #     - in: path\n  #       name: anything\n  #       required: true\n  #       schema:\n  #         type: string\n  #       description: An arbitrary subpath\n\n  #   get: {}\n  #   post: {}\n  #   put: {}\n  #   patch: {}\n  #   delete: {}\n  #   trace: {}\n  #   options: {}\n\n  /delay/{n}:\n    get:\n      summary: Delays responding for min(n, 10) seconds.\n      parameters:\n        - name: n\n          in: path\n          required: true\n          description: Response delay, in seconds.\n          schema:\n            type: integer\n            minimum: 0\n            maximum: 10\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json: {}\n              # schema:\n              #   type: object\n\n  /basic-auth/{user}/{password}:\n    get:\n      summary: Challenges HTTPBasic Auth.\n      tags:\n        - auth\n      security:\n        - basicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/password'\n      responses:\n        '200':\n          $ref: '#/components/responses/200BasicAuth'\n        '401':\n          description: \u003e-\n            Unauthorized (The username and password used for Basic auth do not\n            match those in the URL path.)\n          headers:\n            Www-Authenticate:\n              schema:\n                type: string\n                example: 'Basic realm=\"Fake Realm\"'\n\n  /hidden-basic-auth/{user}/{password}:\n    get:\n      summary: Hidden Basic authentication\n      tags:\n        - auth\n      description: Returns 404 Not Found unless the request is authenticated.\n      security:\n        - basicAuth: []\n      parameters:\n        - $ref: '#/components/parameters/user'\n        - $ref: '#/components/parameters/password'\n      responses:\n        '200':\n          $ref: '#/components/responses/200BasicAuth'\n        '404':\n          description: \u003e-\n            Unautorized (the username and password used for Basic auth do not\n            match those in the URL path.)\n\n  /bearer:\n    get:\n      summary: Tests Bearer authentication\n      tags:\n        - auth\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Authorized\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  authenticated:\n                    type: boolean\n                    example: true\n                  token:\n                    type: string\n                    description: Bearer token specified in the request\n        '404':\n          description: Unauthorized\n\n\n  /status/{statusCode}:\n    summary: Returns the specified HTTP status code, or a random status code if more than one are given\n    parameters:\n      - name: statusCode\n        in: path\n        required: true\n        description: The status code to return, or a weighted list of statuses to pick from, such as `200:4,500:0.3,418`.\n        schema:\n          type: array\n          items:\n            description: HTTP status code. May include optional weight, e.g. `200:0.9`\n            oneOf:\n              - type: string\n              - type: integer\n          minItems: 1\n          example:\n            - '200:5'\n            - '500:0.3'\n            - 418\n        style: simple\n\n    get:\n      tags:\n        - Status codes\n      responses:\n        default:\n          description: A response with the requested status code.\n    post:\n      tags:\n        - Status codes\n      responses:\n        default:\n          description: A response with the requested status code.\n    patch:\n      tags:\n        - Status codes\n      responses:\n        default:\n          description: A response with the requested status code.\n    put:\n      tags:\n        - Status codes\n      responses:\n        default:\n          description: A response with the requested status code.\n    delete:\n      tags:\n        - Status codes\n      responses:\n        default:\n          description: A response with the requested status code.\n\n  /xml:\n    get:\n      summary: Returns some XML.\n      responses:\n        '200':\n          description: OK\n          content:\n            application/xml: {}\n\n  /html:\n    get:\n      summary: Returns an HTML page\n      responses:\n        '200':\n          description: OK\n          content:\n            text/html: {}\n\n  /image/{format}:\n    get:\n      summary: Returns an image with the specified format.\n      tags:\n        - images\n      parameters:\n        - in: path\n          name: format\n          required: true\n          schema:\n            type: string\n            enum:\n              - png\n              - jpeg\n              - webp\n              - svg\n      responses:\n        '200':\n          $ref: '#/components/responses/Image'\n\n  /image:\n    get:\n      summary: Returns an image based on the Accept header.\n      tags:\n        - images\n      responses:\n        '200':\n          $ref: '#/components/responses/Image'\n        '406':\n          description: Client did not request a supported media type.\n\n  /cache:\n    get:\n      summary: \u003e-\n        Returns 200 unless an If-Modified-Since or If-None-Match header is\n        provided, when it returns a 304.\n      parameters:\n        - in: header\n          name: If-Modified-Since\n          required: false\n          description: \u003e\n            For testing purposes this header accepts any value. (???)\n            See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-Modified-Since\n          schema:\n            type: string\n            example: 'Wed, 21 Oct 2015 07:28:00 GMT'\n        - in: header\n          name: If-None-Match\n          required: false\n          description: \u003e\n            For testing purposes this header accepts any value. (???)\n            See also https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match\n          schema:\n            type: string\n          examples:\n            etag:\n              value: '\"bfc13a64729c4290ef5b2c2730249c88ca92d82d\"' # Quotes are part of the value\n            etags:\n              value: 'W/\"67ab43\", \"54ed21\", \"7892dd\"'\n            asterisk:\n              value: '*'\n      responses:\n        '200':\n          description: Neigher If-Modified-Since nor If-None-Match header is provided\n        '304':\n          description: If-Modified-Since or If-None-Match header is provided\n\n  /cookies:\n    get:\n      tags:\n        - Cookies\n      summary: Returns cookie data\n      responses:\n        200:\n          description: OK\n  /cookies/set:\n    get:\n      tags:\n        - Cookies\n      summary: Sets one or more simple cookies\n      parameters:\n        - $ref: '#/components/parameters/freeFormQuery'\n      responses:\n        200:\n          description: OK\n  /cookies/delete:\n    get:\n      tags:\n        - Cookies\n      summary: Delete one or more simple cookies\n      parameters:\n        - $ref: '#/components/parameters/freeFormQuery'\n      responses:\n        200:\n          description: OK\n\n\n#################################\n# Reusable things\n#################################\ncomponents:\n  schemas:\n    CommonResponse:\n      description: Response returned by `/get`\n      type: object\n      properties:\n        args:\n          type: object\n          additionalProperties:\n            type: string\n          description: Query string parameters specified in the request URL.\n        headers:\n          type: object\n          additionalProperties:\n            type: string\n          description: \u003e\n            Headers (standard or custom) used in the request. Some typical headers are:\n              - Accept\n              - Accept-Encoding\n              - Content-Length\n              - Content-Type\n              - Host\n              - Origin\n              - Referred\n              - User-Agent\n          # not valid syntax\n          #example:\n          #  $ref: '#/components/examples/headers'\n        origin:\n          type: string\n          description: The origin IP from which the request was made.\n          example: '10.100.10.10, 10.100.10.44, 52.91.14.13'\n        url:\n          type: string\n          format: uri\n          description: The endpoint URL to which the request was made.\n          example: https://httpbin.org/post\n      required:\n        - args\n        - headers\n        - origin\n        - url\n\n    PostResponse:\n      description: Response returned by /post, /put, /patch and /delete\n      allOf:\n        - $ref: '#/components/schemas/CommonResponse'\n        - type: object\n          properties:\n            data: {}    # Always a plain text string???\n              # ???\n              # oneOf:\n              #   - type: string\n              #   - type: object\n            files: {}\n            #  type: object\n            #  description: ???\n            form:\n              type: object\n              additionalProperties:\n                type: string\n              description: \u003e\n                Form parameters specified in \"application/x-www-form-urlencoded\" and\n                `multipart/form-data` requests.\n            json:\n              description: \u003e\n                JSON value sent in the payload.\n                Can be object, array, string, number, boolean or `null`.\n              nullable: true\n              # oneOf:\n              #   - type: object\n              #   - type: array\n              #   - type: string\n              #   - type: number\n              #   - type: boolean\n\n    TimestampWrapper:\n      type: object\n      properties:\n        timestamp:\n          $ref: '#/components/schemas/Timestamp'\n      required:\n        - timestamp\n\n    Timestamp:\n      type: object\n      properties:\n        epoch:\n          type: number\n          format: double\n          example: 1498229228.0671656\n        slang_date:\n          type: string\n          example: today\n        slang_time:\n          type: string\n          example: now\n        iso8601:\n          type: string\n          # format: ???\n          example: '2017-06-23T14:47:08.067166Z'\n        rfc2822:\n          type: string\n          # format: ???\n          example: 'Fri, 23 Jun 2017 14:47:08 GMT'\n        rfc3339:\n          type: string\n          # format: ????\n          example: '2017-06-23T14:47:08.06Z'\n      required:\n        - epoch\n        - slang_date\n        - slang_time\n        - iso8601\n        - rfc2822\n        - rfc3339\n      example:\n        epoch: 1485183550.84644\n        slang_date: Jan 23\n        slang_time: 4 months ago\n        iso8601: '2017-01-23T14:59:10.846440Z'\n        rfc2822: Mon, 23 Jan 2017 14:59:10 GMT\n        rfc3339: '2017-01-23T14:59:10.84Z'\n      # schema does NOT support plural \"examples\"\n      # examples:\n      #   Now:\n      #     value:\n      #       epoch: 1498229228.0671656\n      #       slang_date: today\n      #       slang_time: now\n      #       iso8601: '2017-06-23T14:47:08.067166Z'\n      #       rfc2822: Fri, 23 Jun 2017 14:47:08 GMT\n      #       rfc3339: '2017-06-23T14:47:08.06Z'\n      #   DateInPast:\n      #     description: Example of a date in the past\n      #     value:\n      #       epoch: 1485183550.84644,\n      #       slang_date\": Jan 23\n      #       slang_time\": 4 months ago\n      #       iso8601: '2017-01-23T14:59:10.846440Z'\n      #       rfc2822: Mon, 23 Jan 2017 14:59:10 GMT\n      #       rfc3339: '2017-01-23T14:59:10.84Z'\n\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n      description: Use the same username and password as you will provide in path parameters.\n    bearerAuth:\n      type: http\n      scheme: bearer\n\n  parameters:\n    user:\n      name: user\n      in: path\n      required: true\n      description: Username. Use the same username in the path AND for authorization.\n      schema:\n        type: string\n    password:\n      name: password\n      in: path\n      required: true\n      description: Password. Use the same password in the path AND for authorization.\n      schema:\n        type: string\n    freeFormQuery:\n      name: freeform\n      in: query\n      schema:\n        type: object\n        additionalProperties: true\n      # This is the default serialization method, so it can be omitted\n      style: form\n      explode: true\n      description: \u003e\n        Enter free-form query parameters in the JSON format\n        `{ \"param1\": \"value1\", \"param2\": \"value2\", ... }`.\n\n\n        Note that the parameters will be actually sent as\n        `?param1=value1\u0026param2=value2\u0026...`\n\n\n  responses:\n    200BasicAuth:\n      description: OK\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              authenticated:\n                type: boolean\n                example: true\n              user:\n                type: string\n                description: The user name specified in the request.\n    Image:\n      description: OK\n      content:\n        image/png, image/jpeg, image/webp:\n          schema:\n            type: string\n            format: binary\n        image/svg+xml: {}  # string? object?\n        image/svg: {}  # string? object?\n\n    TimestampResponse:\n      description: OK\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/TimestampWrapper'\n\n  examples:\n    headers:\n      value:\n        Accept: '*/*'\n        Connection: close\n        Host: httpbin.org\n        User-Agent: curl/7.37.0\n\n    Now:\n      value:\n        epoch: 1498229228.0671656\n        slang_date: today\n        slang_time: now\n        iso8601: '2017-06-23T14:47:08.067166Z'\n        rfc2822: Fri, 23 Jun 2017 14:47:08 GMT\n        rfc3339: '2017-06-23T14:47:08.06Z'\n    DateInPast:\n      description: Example of a date in the past\n      value:\n        epoch: 1485183550.84644,\n        slang_date\": Jan 23\n        slang_time\": 4 months ago\n        iso8601: '2017-01-23T14:59:10.846440Z'\n        rfc2822: Mon, 23 Jan 2017 14:59:10 GMT\n        rfc3339: '2017-01-23T14:59:10.84Z'"
		}
	},
	"Error": "json: cannot unmarshal bool into Go struct field Parameter.paths.get.parameters.name of type string"
}