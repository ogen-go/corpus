{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Tufin/oasdiff"
		},
		"file": {
			"name": "openapi-test3.yaml",
			"size": 0,
			"path": "data/openapi-test3.yaml",
			"byteSize": 7715,
			"content": "info:\n  title: Tufin1\n  version: 1.0.1\n  contact:\n    email: support@tufin.com\n    url: www.tufin.com\n  license:\n    name: apache\nopenapi: 3.0.3\nx-extension-test2: nogo\nexternalDocs:\n  url: https://tufin.io\ntags:\n- name: reuven\n  description: harrison\npaths:\n  /api/{domain}/{project}/badges/security-score:\n    get:\n      operationId: GetSecurityScore\n      x-beta: true\n      parameters:\n      - in: query\n        name: image\n        examples:\n          0:\n            value: 'reuven1'\n          1:\n            value: 'test'\n        x-extension-test:\n        schema:\n          not:\n            description: alphanumeric with underscore, dash, period, slash and colon\n            example: tufinim/generic-bank:cia-latest\n            format: general string\n            pattern: ^(?:[\\w-./:]+)$\n            type: string\n      - in: query\n        name: token\n        schema:\n          description: RFC 4122 UUID\n          example: 26734565-dbcc-449a-a370-0beaaf04b0e7\n          format: uuid\n          pattern: ^(?:[0-9a-f]{8}-[0-9a-f]{4}-[0-5][0-9a-f]{3}-[089ab][0-9a-f]{3}-[0-9a-f]{12})$\n          type: string\n          maxLength: 30\n      - in: header\n        name: X-Auth-Name\n        required: true\n        schema:\n          description: empty string\n          format: empty string\n          pattern: ^(?:)$\n          type: string\n      - in: path\n        name: domain\n        required: true\n        schema:\n          description: Hyphen-separated list of lowercase string\n          example: generic-bank\n          format: hyphen-separated list\n          pattern: ^(?:([a-z]+-)*([a-z]+)?)$\n          type: string\n      - in: path\n        name: project\n        required: true\n        schema:\n          description: Lowercase string\n          example: retail\n          format: lowercase string\n          pattern: ^(?:[a-z]+)$\n          type: string\n      responses:\n        default:\n          description: Tufin\n      servers: []\n  /api/{domain}/{project}/install-command:\n    get:\n      parameters:\n      - in: header\n        name: X-Auth-Name\n        required: true\n        schema:\n          description: any string\n          example: Joe\n          format: any string\n          pattern: ^(?:.*)$\n          type: string\n      - in: path\n        name: domain\n        required: true\n        schema:\n          enum:\n          - tufin\n          - generic-bank\n          type: string\n      - in: path\n        name: project\n        required: true\n        schema:\n          enum:\n          - retail\n          - my-project\n          - test\n          - eks\n          - test1\n          type: string\n      responses:\n        default:\n          x-test:\n          description: Tufin\n          x-extension-test:\n          headers:\n            X-RateLimit-Limit:\n              schema:\n                type: integer\n              description: Request limit per min.\n              x-test:\n      servers:\n        - url: 'https://tufin.io/securecloud'\n        - url: 'https://www.tufin.io/securecloud'\n          description: \"1\"\n          variables:\n            title:\n              default: \"CEO\"\n          x-extension-test:\n    servers:\n      - url: 'https://tufin.io/securecloud'\n    parameters:\n    - in: header\n      name: name\n      schema:\n        enum:\n        - tufin\n  /register:\n    post:\n      security:\n      - OAuth: \n        - write:pets\n      summary: Subscribe to a webhook\n      callbacks:   # Callback definition\n        myEvent:   # Event name\n          'hi':\n            post:\n              requestBody:   # Contents of the callback message\n                required: true\n                content:\n                  application/json:\n                    schema:\n                      type: object\n              responses:   # Expected responses to the callback message\n                '200':\n                  description: Your server returns this code if it accepts the callback\n      responses:\n        default:\n          description: Tufin\n  /subscribe:\n    post:\n      summary: Subscribe to a webhook\n      callbacks:   # Callback definition\n        myEvent:   # Event name\n          'hi':\n            post:\n              requestBody:   # Contents of the callback message\n                required: true\n                content:\n                  application/json:\n                    x-extension-test:\n                    schema:\n                      type: object\n                      properties:\n                        message:\n                          type: string\n                          example: Some event happened\n                      required:\n                        - message\n                    encoding:\n                      profileImage:\n                        # only accept png\n                        contentType: image/png\n                        headers:\n                          i:\n                            x-extension-test:\n                            schema:\n                              type: integer\n                            description: number\n              responses:   # Expected responses to the callback message\n                '200':\n                  description: Your server returns this code if it accepts the callback\n                  links:\n                    \"test\":\n                      operationId: \"reuven\"\n                    \"test2\":\n                      operationId: \"GetSecurityScore\"\n          '{$request.body#/callbackUrl}':   # The callback URL,\n                                            # Refers to the passed URL\n            post:\n              requestBody:   # Contents of the callback message\n                required: true\n                content:\n                  application/json:\n                    schema:\n                      type: object\n                      properties:\n                        message:\n                          type: string\n                          example: Some event happened\n                      required:\n                        - message\n              responses:   # Expected responses to the callback message\n                '200':\n                  description: Your server returns this code if it accepts the callback\n          'bye':\n            post:\n              responses:   # Expected responses to the callback message\n                '200':\n                  description: Your server returns this code if it accepts the callback\n      responses:\n        default:\n          description: Tufin\ncomponents:\n  callbacks:\n    test:  \n      'reuven':\n        post:\n          requestBody:   \n            required: true\n            content:\n              application/json:\n                schema:\n                  type: object\n          responses:   \n            '200':\n              description: Your server returns this code if it accepts the callback\n  requestBodies:\n      reuven:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties: \n                meter_name:\n                    type: string\n                tenant:\n                  type: string\n                meter_value:\n                  type: integer\n                time:\n                  type: integer\n                dimensions:\n                  type: object\n  securitySchemes:\n    OAuth:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://example.org/auth\n          tokenUrl: https://example.org/token\n          scopes:\n            accountRead: Allows account data to be read\n            accountWrite: Allows accounts data to be written\n            admin: read\n        clientCredentials:\n          tokenUrl: tufin.io/token        \n  examples:\n    a:\n      description: reuven\n  links:\n    b:\n      description: reuven\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/{domain}/{project}/badges/security-score: get: operation \"GetSecurityScore\": parameters: parse parameter \"image\": invalid schema:style:explode combination"
}