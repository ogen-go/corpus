{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/iqualify.com/v1/openapi.yaml",
			"byteSize": 139793,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.iqualify.com/v1\ninfo:\n  contact:\n    x-twitter: hello_iqualify\n  description: |+\n    The iQualify API offers management responses for building\n    learning experiences using your iQualify instance data.\n\n    Once youâ€™ve registered with iQualify, you can request an API access token by\n    navigating to the API access section of the \"Account Settings\" area.\n\n    Find out how to [Request your API access token](https://www.iqualify.com/help/connecting-iqualify-to-other-systems/api/how-to-access-and-manage-your-api-token)\n    on our Knowledge base.\n\n    All endpoints are only accessible via https and are located at\n    api.iqualify.com. For instance: you can find your current offerings by\n    accessing the following URL:\n\n        https://api.iqualify.com/v1/offerings/current\n\n  title: iQualify Management API\n  version: v1\n  x-apisguru-categories:\n    - education\n  x-logo:\n    url: https://twitter.com/hello_iqualify/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://api.iqualify.com/v1/management.json\n      version: \"3.0\"\n  x-providerName: iqualify.com\nsecurity:\n  - Authorization: []\ntags: []\npaths:\n  /:\n    get:\n      description: Responds with all supported endpoints URLs for v2 version.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: object\n          description: Supported endpoints\n      summary: List supported endpoints URLs\n      tags:\n        - API info\n  /course-mappings:\n    get:\n      description: Returns all course mappings for course offerings.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                additionalProperties:\n                  type: string\n                title: course mappings\n                type: object\n          description: Course Mappings\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find course mappings\n      tags:\n        - Course mappings\n  \"/course-mappings/externalcourse/{externalCourseId}\":\n    get:\n      description: Responds with course mapping details by externalCourseId.\n      parameters:\n        - $ref: \"#/components/parameters/externalCourseId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Course Mapping\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find course mappings by externalCourseId\n      tags:\n        - Course mappings\n  \"/course-mappings/{offeringId}\":\n    get:\n      description: Responds with course mapping details by offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Course Mapping\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find course mappings by offeringId\n      tags:\n        - Course mappings\n  \"/course-mappings/{offeringId}/{externalCourseId}\":\n    delete:\n      description: Removes the course mapping between the offering and the externalCourseId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/externalCourseId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Course Mapping\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Remove course mapping\n      tags:\n        - Course mappings\n    put:\n      description: Creates a mapping between the offering and the externalCourseId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/externalCourseId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Course Mapping\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add course mapping\n      tags:\n        - Course mappings\n  /courses:\n    get:\n      description: Responds with all courses (draft and published.)\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/CourseResponse\"\n                title: Courses\n                type: array\n          description: All courses (draft and published) in the organisation.\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find courses\n      tags:\n        - Courses\n  \"/courses/{contentId}\":\n    get:\n      description: Responds with a course matching the contentId.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CourseMetaResponse\"\n          description: Course detail\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find course by contentId\n      tags:\n        - Courses\n  \"/courses/{contentId}/activations\":\n    get:\n      description: Responds with all activations for the contentId provided.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ActivationResponse\"\n          description: Activation list.\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find activations for a contentId\n      tags:\n        - Courses\n  \"/courses/{contentId}/metadata/category\":\n    put:\n      description: Add or update course category in the metadata of a course.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                category:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CourseMetaResponse\"\n          description: Course detail\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaAdditionalPropertiesError:\n                  $ref: \"#/components/examples/SchemaAdditionalPropertiesError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update course category\n      tags:\n        - Course metadata\n  \"/courses/{contentId}/metadata/level\":\n    put:\n      description: Add or update the course level in the metadata of a course.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                level:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CourseMetaResponse\"\n          description: Course detail\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaAdditionalPropertiesError:\n                  $ref: \"#/components/examples/SchemaAdditionalPropertiesError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update course level\n      tags:\n        - Course metadata\n  \"/courses/{contentId}/metadata/tags\":\n    put:\n      description: Add or update course tags in the metadata of a course.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                tags:\n                  items:\n                    type: string\n                  type: array\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CourseMetaResponse\"\n          description: Course detail\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaAdditionalPropertiesError:\n                  $ref: \"#/components/examples/SchemaAdditionalPropertiesError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update course tags\n      tags:\n        - Course metadata\n  \"/courses/{contentId}/metadata/topic\":\n    put:\n      description: Add or update the course topic in the metadata of a course.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                topic:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CourseMetaResponse\"\n          description: Course detail\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaAdditionalPropertiesError:\n                  $ref: \"#/components/examples/SchemaAdditionalPropertiesError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update course topic\n      tags:\n        - Course metadata\n  \"/courses/{contentId}/permissions\":\n    get:\n      description: Responds with users who have access to a specific course by contentId.\n      parameters:\n        - description: The content Id\n          in: path\n          name: contentId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserPermission\"\n          description: List of users who have access to the content ID provided.\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find users who have access to the contentId provided\n      tags:\n        - Courses\n  \"/courses/{rootContentId}/permissions/{userEmail}\":\n    post:\n      description: Provide a user with access to a specific course by rootContentId.\n      parameters:\n        - description: The content Id\n          in: path\n          name: rootContentId\n          required: true\n          schema:\n            type: string\n        - description: The user email\n          in: path\n          name: userEmail\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                isBuilder:\n                  default: true\n                  type: boolean\n                isReviewer:\n                  default: false\n                  type: boolean\n              title: permission to be granted to the user.\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  contentId:\n                    type: string\n                type: object\n          description: user successfully added to the course with the specified permission.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                MultipleObjectsError:\n                  $ref: \"#/components/examples/MultipleObjectsError\"\n                ObjectIsNotError:\n                  $ref: \"#/components/examples/ObjectIsNotError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update course access\n      tags:\n        - Courses\n  /offerings:\n    get:\n      description: Responds with all offerings for your organisation.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingMetadataResponse\"\n                title: Offerings\n                type: array\n          description: all offerings (current, past and future ones)\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find current, past and future offerings\n      tags:\n        - Offerings\n    post:\n      description: Creates a new offering.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/OfferingRequired\"\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering created\n        \"400\":\n          content:\n            application/json:\n              examples:\n                IncompatibleParametersError:\n                  $ref: \"#/components/examples/IncompatibleParametersError\"\n                InvalidContentError:\n                  $ref: \"#/components/examples/InvalidContentError\"\n                MissingInfoError:\n                  $ref: \"#/components/examples/MissingInfoError\"\n                OfferingIncompatibleDatesError:\n                  $ref: \"#/components/examples/OfferingIncompatibleDatesError\"\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Create offering\n      tags:\n        - Offerings\n  /offerings/current:\n    get:\n      description: Responds with active offerings for your organisation.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingMetadataResponse\"\n                title: Offerings\n                type: array\n          description: current offerings\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find active offerings\n      tags:\n        - Offerings\n  /offerings/future:\n    get:\n      description: Responds with scheduled offerings for your organisation. Scheduled offerings have a start date after today's date (inclusive).\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingMetadataResponse\"\n                title: Offerings\n                type: array\n          description: future offerings\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find scheduled offerings\n      tags:\n        - Offerings\n  \"/offerings/info/{textPattern}\":\n    get:\n      description: Find offerings where info field matches the specified text pattern.\n      parameters:\n        - description: Text pattern to search for (minimum of 3 characters length).\n          in: path\n          name: textPattern\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PortfolioActivations\"\n                title: Offerings\n                type: array\n          description: Offerings\n        \"400\":\n          content:\n            application/json:\n              examples:\n                TextPatternError:\n                  $ref: \"#/components/examples/TextPatternError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find offerings where info field matches the specified textPattern\n      tags:\n        - Offerings\n  /offerings/past:\n    get:\n      description: Responds with past offerings for your organisation.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingMetadataResponse\"\n                title: Offerings\n                type: array\n          description: past offerings\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find past offerings\n      tags:\n        - Offerings\n  /offerings/summary:\n    get:\n      description: Responds with a summary of all offerings for your organisation.\n      parameters:\n        - description: Returns only the first n results.\n          in: query\n          name: $top\n          schema:\n            default: \"50\"\n            type: string\n        - description: Sorts the results.\n          in: query\n          name: $orderby\n          schema:\n            type: string\n        - allowReserved: true\n          description: Filters the results, based on a Boolean condition.\n          in: query\n          name: $filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PortfolioActivations\"\n                title: Offerings\n                type: array\n          description: all offerings.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ApiValidationError:\n                  $ref: \"#/components/examples/ApiValidationError\"\n                SchemaQueryError:\n                  $ref: \"#/components/examples/SchemaQueryError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Offerings summary\n      tags:\n        - Offerings\n  \"/offerings/{offeringId}\":\n    get:\n      description: Responds with an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find offering by ID\n      tags:\n        - Offerings\n    patch:\n      description: Updates the offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Offering\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                IncompatibleParametersError:\n                  $ref: \"#/components/examples/IncompatibleParametersError\"\n                MissingInfoError:\n                  $ref: \"#/components/examples/MissingInfoError\"\n                ObjectExistsError:\n                  $ref: \"#/components/examples/ObjectExistsError\"\n                OfferingIncompatibleDatesError:\n                  $ref: \"#/components/examples/OfferingIncompatibleDatesError\"\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update offering\n      tags:\n        - Offerings\n  \"/offerings/{offeringId}/activities/openresponse\":\n    get:\n      description: Responds with the activities in a specific offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingActivitiesResponse\"\n                title: Activities\n                type: array\n          description: offering's learners\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find offering's activities\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/analytics/activities/responses\":\n    get:\n      description: Responds with all learner activity attempts for open response activities in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ActivityAttemptOpenResponse\"\n                title: OfferingActivityAttemptOpenResponses\n                type: array\n          description: Offering activity attempt open responses\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find open response activity attempts\n      tags:\n        - Assessment data\n  \"/offerings/{offeringId}/analytics/channels/{channelId}/comments\":\n    get:\n      description: Responds with a list of comments made in any posts in a specified channel, within an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Comment\"\n                title: Comments\n                type: array\n          description: Successful response\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find comments\n      tags:\n        - Channels\n  \"/offerings/{offeringId}/analytics/channels/{channelId}/posts\":\n    get:\n      description: Responds with a list of posts made in a specified channel, within an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/httpPost\"\n                title: Posts\n                type: array\n          description: Successful response\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find posts\n      tags:\n        - Channels\n  \"/offerings/{offeringId}/analytics/channels/{channelId}/replies\":\n    get:\n      description: Responds with a list of replies to comments in any posts in a specified channel, within an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Comment\"\n                title: Comments\n                type: array\n          description: Successful response\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find replies\n      tags:\n        - Channels\n  \"/offerings/{offeringId}/analytics/learners-progress\":\n    get:\n      description: Responds with all learner progress in the offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/LearnerProgressResponse\"\n                title: LearnersProgress\n                type: array\n          description: Learners progress\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learner progress in a specified offering\n      tags:\n        - Learner activity\n  \"/offerings/{offeringId}/analytics/marks/assignments\":\n    get:\n      description: Responds with all learner assessment marks in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssignmentMarkResponse\"\n                title: AssignmentsMarks\n                type: array\n          description: Assignments marks\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find assessment marks\n      tags:\n        - Assessment data\n  \"/offerings/{offeringId}/analytics/marks/quizzes\":\n    get:\n      description: Responds with all learner quiz marks in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/QuizMarkResponse\"\n                title: QuizzesMarks\n                type: array\n          description: Quizzes marks\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find quiz marks\n      tags:\n        - Assessment data\n  \"/offerings/{offeringId}/analytics/pulses\":\n    get:\n      description: Responds with the IDs of all pulses that learners have responded to in a specified offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Pulses' ids\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find all pulse IDs in the specified offering\n      tags:\n        - Pulses\n  \"/offerings/{offeringId}/analytics/pulses/responses\":\n    get:\n      description: Responds with pulse's responses in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: Filter pulse responses by type.\n          in: query\n          name: pulseType\n          schema:\n            enum:\n              - submit_text\n              - MCQ\n              - spatial_triangular\n              - spatial_planar\n              - spatial_linear\n            type: string\n        - allowReserved: true\n          description: Filter pulse responses by responseTime. Lower then (`lt`), lower then or equal (`lte`), greater then (`gt`) and greater then or equal (`gte`) operators are available. Example of filtering by time range __gte__2017-03-14T07:30:00Z__\n          in: query\n          name: responseTime\n          schema:\n            oneOf:\n              - minLength: 1\n                type: string\n              - items:\n                  type: string\n                type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PulseResponse\"\n                title: Pulses\n                type: array\n          description: All pulses' responses\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find pulses by offeringId\n      tags:\n        - Pulses\n  \"/offerings/{offeringId}/analytics/pulses/{pulseId}/responses\":\n    get:\n      description: Responds with pulse's responses, matching the pulseId, in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: pulse's base id\n          in: path\n          name: pulseId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/PulseResponse\"\n                title: Pulses\n                type: array\n          description: Pulse data matching pulseId\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find pulses by offeringId and pulseId\n      tags:\n        - Pulses\n  \"/offerings/{offeringId}/analytics/social-notes\":\n    get:\n      description: Responds with all shared social notes in a specified offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SocialNotesResponse\"\n                title: OfferingSocialNotes\n                type: array\n          description: Offering social notes\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find shared social notes in an offering\n      tags:\n        - Learner activity\n  \"/offerings/{offeringId}/analytics/submissions/assignments\":\n    get:\n      description: Responds with all learner assessment submissions and marks, if any, in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssignmentMarkResponse\"\n                title: AssignmentsSubmissions\n                type: array\n          description: Assignments submissions\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find submissions to assessments, including marks if any\n      tags:\n        - Assessment data\n  \"/offerings/{offeringId}/analytics/submissions/open-response/{assessmentId}\":\n    get:\n      description: Responds with all learner assessment submissions and marks, if any, in a specified open response assessment.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/assessmentId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SubmissionMarkResponse\"\n                title: SubmissionMarkResponse\n                type: array\n          description: Responds with assignment submissions for the specified assignment.\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find submissions to a specified open response assessment, including marks if any\n      tags:\n        - Assessment data\n  \"/offerings/{offeringId}/analytics/submissions/{userEmail}/assignments/{assessmentId}\":\n    get:\n      description: Responds with the learner's assessment submission and any marks for the submission.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/userEmail\"\n        - $ref: \"#/components/parameters/assessmentId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/SubmissionMarkResponse\"\n                title: SubmissionMarkResponse\n                type: array\n          description: Responds with the learner's assessment submission and any marks for the submission.\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find a learner's submission to a specified assessment, including marks if any\n      tags:\n        - Assessment data\n  \"/offerings/{offeringId}/analytics/unit-reactions\":\n    get:\n      description: Responds with user reactions to units in a specified offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UnitReactionsAnalyticsResponse\"\n                title: UnitReactiosAnalytics\n                type: array\n          description: Unit Reactions\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find unit reactions\n      tags:\n        - Learner activity\n  \"/offerings/{offeringId}/assessments\":\n    get:\n      description: Responds with all assessments in an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssessmentResponse\"\n                title: Assessments\n                type: array\n          description: offering's assessments\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find offering's assessments\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/assessments/{assessmentId}\":\n    patch:\n      description: Updates the assessment details for a specified assessment in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: assessment's id\n          in: path\n          name: assessmentId\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Assessment\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssessmentResponse\"\n          description: assessment successfully updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update assessment details\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/assessments/{assessmentId}/documents\": {}\n  \"/offerings/{offeringId}/assessments/{assessmentId}/documents/{documentId}\":\n    delete:\n      description: Removes the assessment document file for a specified assessment in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: assessment's id\n          in: path\n          name: assessmentId\n          required: true\n          schema:\n            type: string\n        - description: documents's id\n          in: path\n          name: documentId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: assessment document successfully removed\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Remove assessment document\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/assessments/{assessmentId}/{userEmail}\":\n    patch:\n      description: Updates the due dates for a learner's quiz attempt specified by the assessmentId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: assessment's id\n          in: path\n          name: assessmentId\n          required: true\n          schema:\n            type: string\n        - description: user's email\n          in: path\n          name: userEmail\n          required: true\n          schema:\n            format: email\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                dueDate:\n                  format: date-time\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: Successfully updated assessment due date.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidParameterError:\n                  $ref: \"#/components/examples/InvalidParameterError\"\n                ObjectInvalidPropertyError:\n                  $ref: \"#/components/examples/ObjectInvalidPropertyError\"\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update the due dates for a learner's quiz attempt\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/badges\":\n    get:\n      description: Responds with the badge for an offering matching the offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Badge\"\n          description: badges\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find offering badges\n      tags:\n        - Badges\n  \"/offerings/{offeringId}/channels\":\n    get:\n      description: Responds with a list of channels in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/ChannelResponse\"\n                title: List of channels in a offering\n                type: array\n          description: Succesful response\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find channels\n      tags:\n        - Channels\n    post:\n      description: Adds new channel to the specified offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChannelRequired\"\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ChannelResponse\"\n          description: channel successfully added\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add channel\n      tags:\n        - Channels\n  \"/offerings/{offeringId}/channels/{channelId}\":\n    patch:\n      description: Updates a channel in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Channel\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ChannelResponse\"\n          description: channel successfully updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update channel\n      tags:\n        - Channels\n  \"/offerings/{offeringId}/channels/{channelId}/learners\":\n    delete:\n      description: Removes a learner from the specified group channel.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                email:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: Learner successfully removed from the channel.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidGroupChannelError:\n                  $ref: \"#/components/examples/InvalidGroupChannelError\"\n                UserNotInOfferingError:\n                  $ref: \"#/components/examples/UserNotInOfferingError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Remove learners from a group channel\n      tags:\n        - Channels\n    get:\n      description: Finds all learners in a specified group channel.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ChannelResponse\"\n          description: channel data\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidGroupChannelError:\n                  $ref: \"#/components/examples/InvalidGroupChannelError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learners in a group channel\n      tags:\n        - Channels\n    post:\n      description: Adds a learner to a specified group channel.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/channelId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                email:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"204\":\n          description: Learner successfully added to the channel.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidGroupChannelError:\n                  $ref: \"#/components/examples/InvalidGroupChannelError\"\n                ObjectExistsError:\n                  $ref: \"#/components/examples/ObjectExistsError\"\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n                UserNotInOfferingError:\n                  $ref: \"#/components/examples/UserNotInOfferingError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add learners to a group channel\n      tags:\n        - Channels\n  \"/offerings/{offeringId}/cover-image\": {}\n  \"/offerings/{offeringId}/groups\":\n    get:\n      description: Responds with a list of assessment groups in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssessmentGroupResponse\"\n                title: List of assessment groups in an offering\n                type: array\n          description: Succesful response\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find assessment groups\n      tags:\n        - Assessment groups\n    post:\n      description: Creates a new assessment group in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AssessmentGroupRequired\"\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AssessmentGroupResponse\"\n          description: assessment group successfully added\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add an assessment group\n      tags:\n        - Assessment groups\n  \"/offerings/{offeringId}/groups/{groupId}/learners\":\n    get:\n      description: Responds with a list of learners in a specified assessment group.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/groupId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserResponse\"\n                title: List of learners\n                type: array\n          description: Succesful response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learners in an assessment group\n      tags:\n        - Assessment groups\n    post:\n      description: Adds a learner into the specified assessment group.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/groupId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n          description: Succesful response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ApiValidationError:\n                  $ref: \"#/components/examples/ApiValidationError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add a learner to an assessment group\n      tags:\n        - Assessment groups\n  \"/offerings/{offeringId}/groups/{groupId}/learners/{userEmail}\":\n    delete:\n      description: Removes a learner from the specified assessment group.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/groupId\"\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"204\":\n          description: user successfully removed from the assessment group\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ApiValidationError:\n                  $ref: \"#/components/examples/ApiValidationError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Remove a learner from an assessment group\n      tags:\n        - Assessment groups\n  \"/offerings/{offeringId}/learners/pending-submission\":\n    get:\n      description: Responds with learners who have one or more assessments due x days before the due date, with each assessment that is due, where x = the number of days specified in the request. The default is 3 days.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: days to assessment due date. Default is 3 days\n          in: query\n          name: days\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/AssessmentPendingSubmission\"\n                title: Assessments\n                type: array\n          description: offering's learners\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learners with assessments pending x days before due date within the specified offeringId\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/metadata/category\":\n    put:\n      description: Updates the offering category metadata.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                category:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update offering category metadata\n      tags:\n        - Offering metadata\n  \"/offerings/{offeringId}/metadata/level\":\n    put:\n      description: Updates the offering level metadata.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                level:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update offering level metadata\n      tags:\n        - Offering metadata\n  \"/offerings/{offeringId}/metadata/tags\":\n    put:\n      description: Updates the offering tags metadata.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                tags:\n                  items:\n                    type: string\n                  type: array\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update offering tags metadata\n      tags:\n        - Offering metadata\n  \"/offerings/{offeringId}/metadata/topic\":\n    put:\n      description: Updates the offering topic metadata.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties: false\n              properties:\n                topic:\n                  type: string\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OfferingMetadataResponse\"\n          description: offering updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update offering topic metadata\n      tags:\n        - Offering metadata\n  \"/offerings/{offeringId}/study-plan\": {}\n  \"/offerings/{offeringId}/users\":\n    get:\n      description: Responds with a list of users in the offering (facilitators, learners and markers.).\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: If true, facilitators are included in the results.\n          in: query\n          name: facilitators\n          schema:\n            default: \"true\"\n            enum:\n              - \"true\"\n              - \"false\"\n            type: string\n        - description: If true, learners are included in the results.\n          in: query\n          name: learners\n          schema:\n            default: \"true\"\n            enum:\n              - \"true\"\n              - \"false\"\n            type: string\n        - description: If true, markers are included in the results.\n          in: query\n          name: markers\n          schema:\n            default: \"true\"\n            enum:\n              - \"true\"\n              - \"false\"\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingUserResponse\"\n                title: offering's users\n                type: array\n          description: offering's users\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaAllowedValuesError:\n                  $ref: \"#/components/examples/SchemaAllowedValuesError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find offering's users\n      tags:\n        - Offering learners\n    post:\n      description: Adds one or more users to the offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                $ref: \"#/components/schemas/OfferingUser\"\n              title: users to be added to the offering.\n              type: array\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingUserAddResponse\"\n                type: array\n          description: user successfully added to the offering\n        \"207\":\n          content:\n            application/json:\n              schema:\n                items:\n                  oneOf:\n                    - $ref: \"#/components/schemas/OfferingUserAddResponse\"\n                    - $ref: \"#/components/schemas/Error\"\n                type: array\n          description: Partially successful response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ApiValidationError:\n                  $ref: \"#/components/examples/ApiValidationError\"\n                ObjectExistsError:\n                  $ref: \"#/components/examples/ObjectExistsError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaRequiredError:\n                  $ref: \"#/components/examples/SchemaRequiredError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Adds user to the offering\n      tags:\n        - Offering learners\n  \"/offerings/{offeringId}/users/{markerEmail}/marks\":\n    delete:\n      description: Removes an array of learners from coach's marking list.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: marker's email\n          in: path\n          name: markerEmail\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                type: string\n              type: array\n        description: array of learners e-mails\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingUser\"\n                title: learners marked by the marker\n                type: array\n          description: learners marked by the marker\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ObjectIsNotError:\n                  $ref: \"#/components/examples/ObjectIsNotError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Remove learners from coach's marking list\n      tags:\n        - Offering learners\n    get:\n      description: Responds with all learners marked by the specified coach.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: marker's email\n          in: path\n          name: markerEmail\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingUser\"\n                title: learners marked by the marker\n                type: array\n          description: learners marked by the marker\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find Learners marked by a coach\n      tags:\n        - Offering learners\n    post:\n      description: Adds an array of learners to be marked by the specified coach.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - description: marker's email\n          in: path\n          name: markerEmail\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                type: string\n              type: array\n        description: array of learners e-mails\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingUser\"\n                title: learners marked by the marker\n                type: array\n          description: learners marked by the marker\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ObjectIsNotError:\n                  $ref: \"#/components/examples/ObjectIsNotError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add learners to be marked by a coach\n      tags:\n        - Offering learners\n  \"/offerings/{offeringId}/users/{userEmail}\":\n    delete:\n      description: Removes a user from the offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"204\":\n          description: user successfully removed from the offering\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ApiValidationError:\n                  $ref: \"#/components/examples/ApiValidationError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Removes user from the offering\n      tags:\n        - Offering learners\n  \"/offerings/{offeringId}/users/{userEmail}/assessments/{assessmentId}\":\n    delete:\n      description: Resets the user's submitted assessment to a draft state.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/userEmail\"\n        - $ref: \"#/components/parameters/assessmentId\"\n      responses:\n        \"204\":\n          description: User's assessment successfully moved to draft state.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                AssessmentNotSubmittedError:\n                  $ref: \"#/components/examples/AssessmentNotSubmittedError\"\n                ObjectInvalidPropertyError:\n                  $ref: \"#/components/examples/ObjectInvalidPropertyError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Reset user's assessment to draft state\n      tags:\n        - Assessment management\n  \"/offerings/{offeringId}/users/{userEmail}/badges/award\":\n    post:\n      description: Awards a badge to a user in the offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AwardedResponse\"\n          description: Awarded badge response\n        \"400\":\n          content:\n            application/json:\n              examples:\n                MissingInfoError:\n                  $ref: \"#/components/examples/MissingInfoError\"\n                UserNotInOfferingError:\n                  $ref: \"#/components/examples/UserNotInOfferingError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Award badge\n      tags:\n        - Badges\n  \"/offerings/{offeringId}/users/{userEmail}/submissions/open-response\":\n    get:\n      description: Responds with open response assessment submissions by a learner in an offering.\n      parameters:\n        - $ref: \"#/components/parameters/offeringId\"\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Assignments\"\n                title: user's assignments\n                type: array\n          description: user open response submission and mark details\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learner's open response assessment submissions\n      tags:\n        - Assessment management\n  /org:\n    get:\n      description: Returns the current organisation info.\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OrgResponse\"\n          description: organisation summary data\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Gets the current organisation\n      tags:\n        - Organisation\n  /users:\n    post:\n      description: Creates a new user.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: user\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n          description: user added\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ObjectExistsError:\n                  $ref: \"#/components/examples/ObjectExistsError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n                UserSuspendedError:\n                  $ref: \"#/components/examples/UserSuspendedError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add new user\n      tags:\n        - Users in iQualify\n  /users/all/progress:\n    get:\n      description: Responds with all learners' progress in all offerings.\n      parameters:\n        - description: Returns only the first n results.\n          in: query\n          name: $top\n          schema:\n            default: \"50\"\n            type: string\n        - description: Sorts the results.\n          in: query\n          name: $orderby\n          schema:\n            type: string\n        - allowReserved: true\n          description: Filters the results, based on a Boolean condition.\n          in: query\n          name: $filter\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  data:\n                    properties:\n                      progress:\n                        items:\n                          $ref: \"#/components/schemas/LearnerResponse\"\n                        title: Learners\n                        type: array\n                  top:\n                    type: integer\n          description: Learners progress\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ApiValidationError:\n                  $ref: \"#/components/examples/ApiValidationError\"\n                SchemaQueryError:\n                  $ref: \"#/components/examples/SchemaQueryError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n      summary: Find learner progress in all offerings\n      tags:\n        - Learner activity\n  \"/users/{userEmail}\":\n    get:\n      description: Responds with a user matching the specified email.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n          description: user data\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find user by email\n      tags:\n        - Users in iQualify\n    patch:\n      description: Updates the specified user by email.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        required: false\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n          description: user updated\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ObjectExistsError:\n                  $ref: \"#/components/examples/ObjectExistsError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n                SchemaMinLengthError:\n                  $ref: \"#/components/examples/SchemaMinLengthError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Update user\n      tags:\n        - Users in iQualify\n  \"/users/{userEmail}/badges\":\n    get:\n      description: Responds with all badges that the specified user has been awarded.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/UserBadge\"\n                title: Badges\n                type: array\n          description: user's badges\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find user's badges\n      tags:\n        - Badges\n  \"/users/{userEmail}/invite-email\":\n    post:\n      description: Re-sends an invitation e-mail to the specified user.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"204\":\n          description: successfully requested invitation e-mail sending\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Resend invitation email\n      tags:\n        - Users in iQualify\n  \"/users/{userEmail}/offerings\":\n    get:\n      description: Responds with all offerings that the user in.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingMetadataResponse\"\n                title: Offerings\n                type: array\n          description: user's offerings\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find user's offerings\n      tags:\n        - Users in iQualify\n    post:\n      description: Adds a user to an array of offerings by offeringId.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                type: string\n              type: array\n        description: offering ids\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/OfferingMetadataResponse\"\n                title: Offerings\n                type: array\n          description: user's offerings\n        \"400\":\n          content:\n            application/json:\n              examples:\n                MissingInfoError:\n                  $ref: \"#/components/examples/MissingInfoError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Adds the user to the specified offerings as a learner\n      tags:\n        - Users in iQualify\n  \"/users/{userEmail}/offerings/{offeringId}/progress\":\n    get:\n      description: Responds with the learner's progress in a specified offering.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n        - $ref: \"#/components/parameters/offeringId\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  completion:\n                    type: string\n                  email:\n                    type: string\n                  firstName:\n                    type: string\n                  id:\n                    type: string\n                  lastName:\n                    type: string\n                type: object\n          description: user's offerings\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                UserNotInOfferingError:\n                  $ref: \"#/components/examples/UserNotInOfferingError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learner's progress in a specified offering\n      tags:\n        - Learner activity\n  \"/users/{userEmail}/permissions/{permissionName}\":\n    post:\n      description: Adds additional permissions to the specified user.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n        - $ref: \"#/components/parameters/permissionName\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/UserResponse\"\n          description: permission successfully added to user\n        \"400\":\n          content:\n            application/json:\n              examples:\n                MissingInfoError:\n                  $ref: \"#/components/examples/MissingInfoError\"\n                ObjectAlreadyIsError:\n                  $ref: \"#/components/examples/ObjectAlreadyIsError\"\n                SchemaAllowedValuesError:\n                  $ref: \"#/components/examples/SchemaAllowedValuesError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Add permission to user\n      tags:\n        - Users in iQualify\n  \"/users/{userEmail}/progress\":\n    get:\n      description: Responds with the specified learner's progress in all offerings.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/LearnerResponse\"\n          description: Learner Progress\n        \"400\":\n          content:\n            application/json:\n              examples:\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Find learner's progress in offerings\n      tags:\n        - Learner activity\n  \"/users/{userEmail}/suspend\":\n    put:\n      description: Suspends the specified user's account.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SuspendedRequest\"\n        required: true\n      responses:\n        \"204\":\n          description: User suspended.\n        \"400\":\n          content:\n            application/json:\n              examples:\n                InvalidParameterError:\n                  $ref: \"#/components/examples/InvalidParameterError\"\n                ObjectExistsError:\n                  $ref: \"#/components/examples/ObjectExistsError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n                SchemaFormatError:\n                  $ref: \"#/components/examples/SchemaFormatError\"\n                SchemaTypeError:\n                  $ref: \"#/components/examples/SchemaTypeError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Suspend user\n      tags:\n        - Users in iQualify\n  \"/users/{userEmail}/transfer\":\n    patch:\n      description: Moves the user's access and progress from one offering to another.\n      parameters:\n        - $ref: \"#/components/parameters/userEmail\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/TransferRequest\"\n        description: transfer_data\n        required: true\n      responses:\n        \"200\":\n          description: Updated user information\n        \"400\":\n          content:\n            application/json:\n              examples:\n                ContentDoNotMatchError:\n                  $ref: \"#/components/examples/ContentDoNotMatchError\"\n                InvalidSourceAndTargetError:\n                  $ref: \"#/components/examples/InvalidSourceAndTargetError\"\n                SchemaEmailError:\n                  $ref: \"#/components/examples/SchemaEmailError\"\n              schema:\n                $ref: \"#/components/schemas/Error\"\n          description: Bad Request\n        \"401\":\n          $ref: \"#/components/responses/NotAuthorizedError\"\n        \"403\":\n          $ref: \"#/components/responses/AccessDeniedError\"\n        \"404\":\n          $ref: \"#/components/responses/ObjectNotFoundError\"\n      summary: Transfer a user between offerings\n      tags:\n        - Offering learners\ncomponents:\n  examples:\n    ApiValidationError:\n      summary: API validation error\n      value:\n        details: invalid $filter parameter.\n        name: ApiValidationError\n    AssessmentNotSubmittedError:\n      summary: the specified user has not submitted an assessment\n      value:\n        details: The user alex.doe@test.te has not submitted assessment as1.\n        name: AssessmentNotSubmittedError\n    ContentDoNotMatchError:\n      summary: The specified content needs to be the same in order to perform the requested operation.\n      value:\n        details: contentId needs to be the same in order to perform the requested operation.\n        name: ContentDoNotMatchError\n    IncompatibleParametersError:\n      summary: Two properties in the request contains incompatible values with each other\n      value:\n        details: A cannot be B when C is D\n        name: IncompatibleParametersError\n    InvalidChannelPropertiesError:\n      summary: \"A channel can only have one of these properties set as true: groupDiscussion, isBroadcastOnly or privateSupport\"\n      value:\n        details: \"A channel can only have one of these properties set as true: groupDiscussion, isBroadcastOnly or privateSupport\"\n        name: InvalidChannelPropertiesError\n    InvalidContentError:\n      summary: You need to specify content_id or rootContentId.\n      value:\n        details: You need to specify content_id or rootContentId.\n        name: InvalidContentError\n    InvalidGroupChannelError:\n      summary: Specified channel is not a group discussion channel.\n      value:\n        details: Channel channel1 is not a group discussion channel.\n        name: InvalidGroupChannelError\n    InvalidObjectIdError:\n      summary: The user has been suspended.\n      value:\n        details: The specified task id has an invalid value '1111'.\n        name: InvalidObjectIdError\n    InvalidParameterError:\n      summary: the specified source object already exists in the target object\n      value:\n        details: The specified parameter file.mimetype (image mimetype) has an invalid value \\'text/plain\\'.\n        name: InvalidParameterError\n    InvalidSourceAndTargetError:\n      summary: Source and target offerings cannot be the same.\n      value:\n        details: Source and target offerings cannot be the same.\n        name: InvalidSourceAndTargetError\n    MissingInfoError:\n      summary: Specified info is missing.\n      value:\n        details: The field 'Offering Badge' is missing or invalid.\n        name: MissingInfoError\n    MultipleObjectsError:\n      summary: The specified object has multiple properties of which should have only one\n      value:\n        details: There are multiple permission with value true (isBuilder | isReviewer).\n        name: ObjectIsNotError\n    ObjectAlreadyIsError:\n      summary: The specified object already has a property\n      value:\n        details: The user john.doe@test.te is already a manager.\n        name: ObjectAlreadyIsError\n    ObjectExistsError:\n      summary: the specified source object already exists in the target object\n      value:\n        details: The badge already exists in the offering OFFERING ID.\n        name: ObjectExistsError\n    ObjectInvalidPropertyError:\n      summary: the specified source object already exists in the target object\n      value:\n        details: \"The A property B is invalid. Expected value: C\"\n        name: ObjectInvalidPropertyError\n    ObjectIsNotError:\n      summary: the specified object is not of the specified type\n      value:\n        details: The user john.doe@test.te is not a builder.\n        name: ObjectIsNotError\n    ObjectNotFoundError:\n      summary: a referenced object is not found\n      value:\n        details: The content badcontentId was not found.\n        name: ObjectNotFoundError\n    OfferingIncompatibleDatesError:\n      summary: The specified offering has relative dates enabled. Absolute task dates can not be set.\n      value:\n        details: The specified offering has relative dates enabled. Absolute task dates can not be set.\n        name: OfferingIncompatibleDatesError\n    SchemaAdditionalPropertiesError:\n      summary: The request body should not have extra properties\n      value:\n        details: should NOT have additional properties\n        name: SchemaValidationError\n    SchemaAllowedValuesError:\n      summary: should be equal to one of the allowed values\n      value:\n        details: \"[PARAMETER_NAME] PARAMETER_VALUE should be equal to one of the allowed values a, b\"\n        name: SchemaValidationError\n    SchemaEmailError:\n      summary: Parameter should be a valid e-mail\n      value:\n        details: PARAMETER_NAME PARAMETER_VALUE should match format \"email\".\n        name: SchemaValidationError\n    SchemaFormatError:\n      summary: should match specific format\n      value:\n        details: PARAMETER_NAME PARAMETER_VALUE should match format \"example\"\n        name: SchemaValidationError\n    SchemaMediaError:\n      summary: unsupported media type in the content-type header\n      value:\n        details: unsupported media type application/json\n        name: SchemaValidationError\n    SchemaMinLengthError:\n      summary: should be longer than the minimum required\n      value:\n        details: \"[PARAMETER_NAME] PARAMETER_VALUE should NOT be shorter than 3 characters\"\n        name: SchemaValidationError\n    SchemaQueryError:\n      summary: Unknown query parameter\n      value:\n        details: \"[PARAMETER_NAME] PARAMETER_VALUE Unknown query parameter 'example'\"\n        name: SchemaValidationError\n    SchemaRequiredError:\n      summary: should have a specific required property\n      value:\n        details: should have required property 'example'\n        name: SchemaValidationError\n    SchemaTypeError:\n      summary: should be of a specific type\n      value:\n        details: \"[PARAMETER_NAME] PARAMETER_VALUE should be string\"\n        name: SchemaValidationError\n    TextPatternError:\n      summary: Text pattern must be a minimum of n characters in length.\n      value:\n        details: Text pattern must be a minimum of 3 characters in length.\n        name: TextPatternError\n    UserDoesNotHaveBadgeError:\n      summary: The specified user does not have a badge in the specified offering\n      value:\n        details: The user A has not been awarded a badge in the offering B.\n        name: UserDoesNotHaveBadgeError\n    UserNotInChannelError:\n      summary: Specified user is not in the channel.\n      value:\n        details: The user john.doe@test.te is not a learner in the channel -MEF8kFyURUr6_CZ4IXD.\n        name: UserNotInChannelError\n    UserNotInOfferingError:\n      summary: Specified user is not in the offering.\n      value:\n        details: The user john.doe@test.te is not a learner in the offering -MEF8kFyURUr6_CZ4IXD.\n        name: UserNotInOfferingError\n    UserSuspendedError:\n      summary: The user has been suspended.\n      value:\n        details: The user (john.doe@test.te) has been suspended.\n        name: UserSuspendedError\n    ValidationAllowTasksError:\n      summary: The specified parameter offeringId does not have tasks enabled\n      value:\n        details: The specified parameter offeringId has an invalid value 'The specified parameter offeringId does not have tasks enabled'.\n        name: ValidationError\n    ValidationError:\n      summary: The specified parameter dueDate has an invalid value\n      value:\n        details: The specified parameter dueDate has an invalid value \"Thu Apr 16 2020 19:15:00 GMT-0300 is before the openDate\".\n        name: ValidationError\n    ValidationTaskNotInOfferingError:\n      summary: The specified parameter taskId is not in the offering\n      value:\n        details: The specified parameter taskId has an invalid value 'The specified parameter taskId is not in the offering'.\n        name: ValidationError\n  parameters:\n    assessmentId:\n      description: assessment's id\n      in: path\n      name: assessmentId\n      required: true\n      schema:\n        type: string\n    badgeId:\n      description: badge's id\n      in: path\n      name: badgeId\n      required: true\n      schema:\n        type: string\n    channelId:\n      description: channel's id\n      in: path\n      name: channelId\n      required: true\n      schema:\n        type: string\n    evaluatorEmail:\n      description: Evaluator's email\n      in: path\n      name: evaluatorEmail\n      required: true\n      schema:\n        format: email\n        type: string\n    externalCourseId:\n      description: external course's id\n      in: path\n      name: externalCourseId\n      required: true\n      schema:\n        type: string\n    groupId:\n      description: Assessment group id\n      in: path\n      name: groupId\n      required: true\n      schema:\n        pattern: ^[0-9a-fA-F]{24}$\n        type: string\n    offeringId:\n      description: offering's id\n      in: path\n      name: offeringId\n      required: true\n      schema:\n        type: string\n    permissionName:\n      description: permission name\n      in: path\n      name: permissionName\n      required: true\n      schema:\n        enum:\n          - builder\n          - manager\n        type: string\n    rootContentId:\n      description: Protfolio root content id\n      in: path\n      name: rootContentId\n      required: true\n      schema:\n        type: string\n    sectionId:\n      description: section's id\n      in: path\n      name: sectionId\n      required: true\n      schema:\n        type: string\n    submissionId:\n      description: submission id\n      in: path\n      name: submissionId\n      required: true\n      schema:\n        type: string\n    taskId:\n      description: task id\n      in: path\n      name: taskId\n      required: true\n      schema:\n        type: string\n    userEmail:\n      description: user's email\n      in: path\n      name: userEmail\n      required: true\n      schema:\n        format: email\n        type: string\n  responses:\n    AccessDeniedError:\n      content:\n        application/json:\n          example:\n            details: You are not allowed to access this resource\n            name: AccessDeniedError\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: You are not allowed to access this resource.\n    InvalidContentError:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: You need to specify content_id or rootContentId.\n    NotAuthorizedError:\n      content:\n        application/json:\n          example:\n            details: No authorization token was found.\n            name: NotAuthorizedError\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: No authorization token was found.\n    NotImplementedError:\n      content:\n        application/json:\n          example:\n            details: The endpoint is not implemented.\n            name: NotImplementedError\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Endpoint Not Implemented\n    ObjectNotFoundError:\n      content:\n        application/json:\n          example:\n            details: The content badcontentId was not found.\n            name: ObjectNotFoundError\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Not Found\n    RouteNotFoundError:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Invalid path.\n    ServerError:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: We're sorry, but something went wrong.\n    TooManyRequestsError:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n      description: Request rate is too large.\n  schemas:\n    ActivationResponse:\n      properties:\n        end:\n          type: string\n        id:\n          type: string\n        info:\n          type: string\n        learnersCount:\n          description: number of learners in the offering, excluding facilitators and coaches\n          type: string\n        metadata:\n          properties:\n            rootContentId:\n              type: string\n          type: object\n        name:\n          type: string\n        start:\n          type: string\n      type: object\n    ActivityAttemptOpenResponse:\n      properties:\n        activityId:\n          type: string\n        activityType:\n          type: string\n        feedback:\n          $ref: \"#/components/schemas/ActivityAttemptOpenResponseFeedback\"\n        learnerEmail:\n          type: string\n        offeringId:\n          type: string\n        responseText:\n          type: string\n        uploadedFiles:\n          $ref: \"#/components/schemas/ActivityAttemptOpenResponseFiles\"\n      type: object\n    ActivityAttemptOpenResponseFeedback:\n      properties:\n        facilitatorEmail:\n          type: string\n        text:\n          type: string\n      type: object\n    ActivityAttemptOpenResponseFiles:\n      properties:\n        filename:\n          type: string\n        mimetype:\n          type: string\n        size:\n          type: string\n        url:\n          type: string\n      type: object\n    Assessment:\n      properties:\n        content:\n          type: string\n        dueDate:\n          format: date-time\n          type: string\n        markNumber:\n          minLength: 1\n          type: string\n        markType:\n          minLength: 1\n          type: string\n        openDate:\n          format: date-time\n          type: string\n      type: object\n    AssessmentGroupRequired:\n      properties:\n        title:\n          minLength: 1\n          type: string\n      required:\n        - title\n      type: object\n    AssessmentGroupResponse:\n      properties:\n        createdAt:\n          type: string\n        id:\n          type: string\n        title:\n          minLength: 1\n          type: string\n      type: object\n    AssessmentPendingSubmission:\n      properties:\n        content:\n          type: string\n        documents:\n          items:\n            $ref: \"#/components/schemas/Document\"\n          type: array\n        dueDate:\n          format: date-time\n          type: string\n        durationMinutes:\n          format: int32\n          type: integer\n        filename:\n          type: string\n        hidden:\n          default: false\n          type: boolean\n        id:\n          type: string\n        markNumber:\n          minLength: 1\n          type: string\n        markType:\n          minLength: 1\n          type: string\n        maxAttempts:\n          format: int32\n          type: integer\n        offeringId:\n          type: string\n        offeringName:\n          type: string\n        openDate:\n          format: date-time\n          type: string\n        pid:\n          type: string\n        points:\n          type: string\n        themes:\n          items:\n            $ref: \"#/components/schemas/ThemeResponse\"\n          type: array\n        title:\n          type: string\n        totalQuestions:\n          format: int32\n          type: integer\n        totalThemes:\n          format: int32\n          type: integer\n        type:\n          type: string\n        users:\n          items:\n            $ref: \"#/components/schemas/User\"\n          type: array\n      type: object\n    AssessmentResponse:\n      properties:\n        content:\n          type: string\n        documents:\n          items:\n            $ref: \"#/components/schemas/Document\"\n          type: array\n        dueDate:\n          format: date-time\n          type: string\n        durationMinutes:\n          format: int32\n          type: integer\n        filename:\n          type: string\n        hidden:\n          default: false\n          type: boolean\n        id:\n          type: string\n        markNumber:\n          minLength: 1\n          type: string\n        markType:\n          minLength: 1\n          type: string\n        maxAttempts:\n          format: int32\n          type: integer\n        openDate:\n          format: date-time\n          type: string\n        pid:\n          type: string\n        points:\n          type: string\n        themes:\n          items:\n            $ref: \"#/components/schemas/ThemeResponse\"\n          type: array\n        title:\n          type: string\n        totalQuestions:\n          format: int32\n          type: integer\n        totalThemes:\n          format: int32\n          type: integer\n        type:\n          type: string\n      type: object\n    AssignmentMarkResponse:\n      properties:\n        assessmentId:\n          type: string\n        assessmentItemDetails:\n          type: string\n        assessmentItemName:\n          type: string\n        courseName:\n          type: string\n        learnerEmail:\n          type: string\n        learnerFirstName:\n          type: string\n        learnerLastName:\n          type: string\n        learnerPersonId:\n          type: string\n        mark:\n          type: string\n        markFeedback:\n          type: string\n        markedBy:\n          type: string\n        markedByEvaluator:\n          type: boolean\n        markedByFacilitator:\n          type: boolean\n        markedByMarker:\n          type: boolean\n        markedDateTime:\n          format: date-time\n          type: string\n        submissionDateTime:\n          format: date-time\n          type: string\n      title: AssignmentMark\n      type: object\n    Assignments:\n      properties:\n        files:\n          items:\n            $ref: \"#/components/schemas/Document\"\n          type: array\n        marks:\n          items:\n            $ref: \"#/components/schemas/Mark\"\n          type: array\n        status:\n          type: string\n        submittedAt:\n          format: date-time\n          type: string\n        updatedAt:\n          format: date-time\n          type: string\n      type: object\n    AwardedResponse:\n      properties:\n        awarded:\n          type: boolean\n        badgeId:\n          type: string\n        badgeUrl:\n          type: string\n      type: object\n    Badge:\n      properties:\n        badgeExpiry:\n          $ref: \"#/components/schemas/BadgeExpiry\"\n        badgeUrl:\n          type: string\n        criterias:\n          allOf:\n            - $ref: \"#/components/schemas/Criteria\"\n        description:\n          type: string\n        openBadge:\n          allOf:\n            - $ref: \"#/components/schemas/OpenBadgeClass\"\n        title:\n          type: string\n      type: object\n    BadgeExpiry:\n      properties:\n        expirationDate:\n          format: date-time\n          type: string\n        expires:\n          type: boolean\n        expiryType:\n          enum:\n            - date\n            - timeframe\n          type: string\n        timeframeAmount:\n          type: number\n        timeframeUnit:\n          enum:\n            - days\n            - months\n            - years\n          type: string\n      type: object\n    Channel:\n      properties:\n        group:\n          properties:\n            autoAssign:\n              type: boolean\n          type: object\n        groupDiscussion:\n          type: boolean\n        isBroadcastOnly:\n          type: boolean\n        privateSupport:\n          type: boolean\n        title:\n          minLength: 1\n          type: string\n      type: object\n    ChannelRequired:\n      properties:\n        isBroadcastOnly:\n          default: false\n          type: boolean\n        title:\n          minLength: 1\n          type: string\n      required:\n        - title\n      type: object\n    ChannelResponse:\n      properties:\n        id:\n          type: string\n        isBroadcastOnly:\n          default: false\n          type: boolean\n        title:\n          minLength: 1\n          type: string\n      type: object\n    Comment:\n      properties:\n        content:\n          type: string\n        createdAt:\n          format: date-time\n          type: string\n        email:\n          type: string\n        id:\n          type: string\n        isFacilitatorPost:\n          type: boolean\n        moderation:\n          $ref: \"#/components/schemas/Moderation\"\n        parentCommentId:\n          type: string\n        postId:\n          type: string\n      type: object\n    CourseMetaResponse:\n      properties:\n        coverImageUrl:\n          type: string\n        createdAt:\n          format: date-time\n          type: string\n        id:\n          type: string\n        metadata:\n          properties:\n            category:\n              type: string\n            learning_outcomes:\n              items:\n                $ref: \"#/components/schemas/LearningOutcomes\"\n              type: array\n            level:\n              type: string\n            rootContentId:\n              type: string\n            tags:\n              items:\n                type: string\n              type: array\n            topic:\n              type: string\n        name:\n          type: string\n        tasksEnabled:\n          type: boolean\n      title: Course\n      type: object\n    CourseResponse:\n      properties:\n        coverImageUrl:\n          type: string\n        createdAt:\n          format: date-time\n          type: string\n        id:\n          type: string\n        metadata:\n          properties:\n            learning_outcomes:\n              items:\n                $ref: \"#/components/schemas/LearningOutcomes\"\n              type: array\n        name:\n          type: string\n      title: Course\n      type: object\n    Criteria:\n      properties:\n        hasCompletedCourse:\n          default: true\n          type: boolean\n        hasPassedMandatoryAssessedQuizzes:\n          default: true\n          type: boolean\n      type: object\n    Document:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        filename:\n          type: string\n        id:\n          type: string\n        mimetype:\n          type: string\n        size:\n          format: int64\n          type: integer\n        url:\n          type: string\n      type: object\n    DocumentResponse:\n      properties:\n        id:\n          type: string\n        mimetype:\n          type: string\n        size:\n          format: int64\n          type: integer\n        url:\n          type: string\n      type: object\n    Error:\n      properties:\n        error:\n          properties:\n            details:\n              type: string\n            name:\n              type: string\n          type: object\n      type: object\n    Invite:\n      properties:\n        url:\n          description: if sendInvite in request is false\n          type: string\n      type: object\n    LearnerOfferingDates:\n      properties:\n        start:\n          format: date-time\n          type: string\n      type: object\n    LearnerProgressResponse:\n      properties:\n        completion:\n          type: string\n        courseId:\n          type: string\n        email:\n          type: string\n        firstName:\n          type: string\n        lastLoggedInAt:\n          format: date-time\n          type: string\n        lastName:\n          type: string\n        personId:\n          type: string\n      title: LearnerProgress\n      type: object\n    LearnerResponse:\n      properties:\n        email:\n          type: string\n        firstName:\n          type: string\n        id:\n          type: string\n        lastName:\n          type: string\n        offerings:\n          items:\n            $ref: \"#/components/schemas/OfferingProgressRow\"\n          type: array\n        personId:\n          type: string\n      type: object\n    LearningOutcomes:\n      properties:\n        description:\n          type: string\n        id:\n          type: string\n      type: object\n    Mark:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        feedback:\n          type: string\n        id:\n          type: string\n        mark:\n          type: string\n        markFeedback:\n          items:\n            $ref: \"#/components/schemas/MarkFeedback\"\n          type: array\n        markedBy:\n          type: string\n        markerId:\n          type: string\n    MarkFeedback:\n      properties:\n        createdAt:\n          format: date-time\n          type: string\n        feedback:\n          type: string\n        feedbackBy:\n          type: string\n        id:\n          type: string\n        mark:\n          type: string\n        markerId:\n          type: string\n    Moderation:\n      properties:\n        isMuted:\n          type: boolean\n        moderator:\n          $ref: \"#/components/schemas/Moderator\"\n        reason:\n          type: string\n      type: object\n    Moderator:\n      properties:\n        avatarUrl:\n          type: string\n        firstName:\n          type: string\n        id:\n          type: string\n        lastName:\n          type: string\n      type: object\n    Offering:\n      properties:\n        badge:\n          additionalProperties: false\n          properties:\n            badgeExpiry:\n              $ref: \"#/components/schemas/BadgeExpiry\"\n            description:\n              type: string\n            requiresApproval:\n              type: boolean\n            title:\n              type: string\n          type: object\n        contentId:\n          description: The identifier for a specific version of a course\n          minLength: 1\n          type: string\n        description:\n          minLength: 1\n          type: string\n        earlyCloseOffDate:\n          format: date-time\n          type: string\n        end:\n          format: date-time\n          type: string\n        hasEarlyCloseOff:\n          type: boolean\n        identifier:\n          type: string\n        isReadonly:\n          type: boolean\n        metadata:\n          additionalProperties: false\n          properties:\n            category:\n              type: string\n            level:\n              type: string\n            tags:\n              items:\n                type: string\n              type: array\n            topic:\n              type: string\n          type: object\n        name:\n          minLength: 1\n          type: string\n        overview:\n          type: string\n        rootContentId:\n          description: Every time a course is republished it is assigned a new contentId. rootContentId is the first original contentId associated with a course.\n          type: string\n        start:\n          format: date-time\n          type: string\n        trailerVideoUrl:\n          minLength: 1\n          type: string\n        useRelativeDates:\n          type: boolean\n      type: object\n    OfferingActivitiesResponse:\n      properties:\n        activityId:\n          type: string\n        time:\n          description: expected minutes to complete\n          type: number\n        title:\n          type: string\n      type: object\n    OfferingMetadata:\n      additionalProperties: false\n      properties:\n        category:\n          type: string\n        level:\n          type: string\n        rootContentId:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        topic:\n          type: string\n      type: object\n    OfferingMetadataResponse:\n      properties:\n        contentId:\n          minLength: 1\n          type: string\n        coverImageUrl:\n          minLength: 1\n          type: string\n        currency:\n          type: string\n        description:\n          minLength: 1\n          type: string\n        earlyCloseOffDate:\n          format: date-time\n          type: string\n        end:\n          format: date-time\n          type: string\n        enrollmentLimit:\n          type: number\n        hasEarlyCloseOff:\n          type: boolean\n        id:\n          type: string\n        identifier:\n          type: string\n        isReadonly:\n          type: boolean\n        metadata:\n          $ref: \"#/components/schemas/OfferingMetadata\"\n        name:\n          minLength: 1\n          type: string\n        overview:\n          description: content can contain html\n          minLength: 1\n          type: string\n        price:\n          type: number\n        start:\n          format: date-time\n          type: string\n        tasksEnabled:\n          type: boolean\n        trailerVideoUrl:\n          minLength: 1\n          type: string\n        useRelativeDates:\n          default: false\n          type: boolean\n      type: object\n    OfferingProgressRow:\n      properties:\n        completion:\n          type: string\n        id:\n          type: string\n      type: object\n    OfferingRequired:\n      properties:\n        badge:\n          additionalProperties: false\n          properties:\n            badgeExpiry:\n              $ref: \"#/components/schemas/BadgeExpiry\"\n            description:\n              type: string\n            requiresApproval:\n              type: boolean\n            title:\n              type: string\n          type: object\n        contentId:\n          description: The identifier for a specific version of a course\n          minLength: 1\n          type: string\n        createDefaultChannels:\n          default: false\n          type: boolean\n        description:\n          minLength: 1\n          type: string\n        earlyCloseOffDate:\n          format: date-time\n          type: string\n        end:\n          format: date-time\n          type: string\n        hasEarlyCloseOff:\n          type: boolean\n        identifier:\n          type: string\n        isReadonly:\n          type: boolean\n        metadata:\n          additionalProperties: false\n          properties:\n            category:\n              type: string\n            level:\n              type: string\n            tags:\n              items:\n                type: string\n              type: array\n            topic:\n              type: string\n          type: object\n        name:\n          minLength: 1\n          type: string\n        rootContentId:\n          description: Every time a course is republished it's assigned a new contentId. rootContentId is the first original contentId associated with a course.\n          type: string\n        start:\n          format: date-time\n          type: string\n        trailerVideoUrl:\n          minLength: 1\n          type: string\n        useRelativeDates:\n          default: false\n          type: boolean\n      required:\n        - start\n      type: object\n    OfferingResponse:\n      properties:\n        contentId:\n          minLength: 1\n          type: string\n        coverImageUrl:\n          minLength: 1\n          type: string\n        currency:\n          type: string\n        description:\n          minLength: 1\n          type: string\n        earlyCloseOffDate:\n          format: date-time\n          type: string\n        end:\n          format: date-time\n          type: string\n        enrollmentLimit:\n          type: number\n        hasEarlyCloseOff:\n          type: boolean\n        id:\n          type: string\n        identifier:\n          type: string\n        isReadonly:\n          type: boolean\n        name:\n          minLength: 1\n          type: string\n        price:\n          type: number\n        start:\n          format: date-time\n          type: string\n        tasksEnabled:\n          type: boolean\n        trailerVideoUrl:\n          minLength: 1\n          type: string\n      type: object\n    OfferingUser:\n      additionalProperties: false\n      properties:\n        email:\n          minLength: 1\n          type: string\n        firstName:\n          minLength: 1\n          type: string\n        isFacilitator:\n          default: false\n          type: boolean\n        isMarker:\n          default: false\n          type: boolean\n        isReadonly:\n          default: false\n          type: boolean\n        lastName:\n          minLength: 1\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/UserMetadata\"\n        personId:\n          minLength: 1\n          type: string\n        profile:\n          $ref: \"#/components/schemas/UserProfileRequest\"\n        sendInvite:\n          default: true\n          type: boolean\n        sendNotificationEmail:\n          default: true\n          type: boolean\n      required:\n        - email\n      type: object\n    OfferingUserAddResponse:\n      properties:\n        email:\n          minLength: 1\n          type: string\n        firstName:\n          minLength: 1\n          type: string\n        invite:\n          $ref: \"#/components/schemas/Invite\"\n        isFacilitator:\n          default: false\n          type: boolean\n        isMarker:\n          default: false\n          type: boolean\n        isReadonly:\n          default: false\n          type: boolean\n        lastName:\n          minLength: 1\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/UserMetadata\"\n        personId:\n          minLength: 1\n          type: string\n        profile:\n          $ref: \"#/components/schemas/UserProfileRequest\"\n        sendInvite:\n          default: true\n          type: boolean\n        sendNotificationEmail:\n          default: true\n          type: boolean\n      type: object\n    OfferingUserResponse:\n      properties:\n        avatarUrl:\n          type: string\n        email:\n          format: email\n          minLength: 1\n          type: string\n        evaluatedBy:\n          items:\n            type: string\n          type: array\n        evaluates:\n          items:\n            type: string\n          type: array\n        firstName:\n          minLength: 1\n          type: string\n        id:\n          type: string\n        isFacilitator:\n          default: false\n          type: boolean\n        isMarker:\n          default: false\n          type: boolean\n        isReadonly:\n          default: false\n          type: boolean\n        lastName:\n          minLength: 1\n          type: string\n        markedBy:\n          items:\n            type: string\n          type: array\n        marks:\n          items:\n            type: string\n          type: array\n        personId:\n          minLength: 1\n          type: string\n        profile:\n          $ref: \"#/components/schemas/UserProfile\"\n      type: object\n    OpenBadgeClass:\n      properties:\n        criteria:\n          additionalProperties: false\n          properties:\n            narrative:\n              type: string\n          type: object\n        description:\n          type: string\n        id:\n          type: string\n        image:\n          type: string\n        issuer:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n      type: object\n    OrgRequest:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n      required:\n        - name\n      type: object\n    OrgResponse:\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n      type: object\n    PortfolioActivations:\n      properties:\n        contentId:\n          type: string\n        end:\n          format: date-time\n          type: string\n        id:\n          type: string\n        info:\n          type: string\n        learnersCount:\n          description: number of learners in the offering, excluding facilitators and coaches\n          type: number\n        metadata:\n          properties:\n            rootContentId:\n              type: string\n          type: object\n        name:\n          type: string\n        start:\n          format: date-time\n          type: string\n      type: object\n    PortfolioLicenseResponse:\n      properties:\n        licenses:\n          items:\n            type: string\n          type: array\n        owner:\n          type: string\n      type: object\n    PortfolioMetadata:\n      additionalProperties: false\n      properties:\n        category:\n          type: string\n        level:\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        topic:\n          type: string\n      type: object\n    PulseAnswer:\n      properties:\n        multiChoiceAnswer:\n          items:\n            $ref: \"#/components/schemas/PulseMCQOption\"\n          type: array\n        spatialAnswer:\n          items:\n            $ref: \"#/components/schemas/PulseSpatialOption\"\n          type: array\n        textAnswer:\n          type: string\n      title: Answer\n      type: object\n    PulseMCQOption:\n      properties:\n        option:\n          type: string\n        value:\n          type: boolean\n      title: MultiChoiceOption\n      type: object\n    PulseResponse:\n      properties:\n        learnerFirstName:\n          type: string\n        learnerId:\n          type: string\n        learnerLastName:\n          type: string\n        pulseBaseId:\n          type: string\n        pulseInstanceId:\n          type: string\n        pulseQuestion:\n          type: string\n        pulseRunDurationMinutes:\n          type: integer\n        pulseRunStart:\n          format: date-time\n          type: string\n        pulseType:\n          type: string\n        response:\n          $ref: \"#/components/schemas/PulseAnswer\"\n        responseTime:\n          format: date-time\n          type: string\n      title: Pulse\n      type: object\n    PulseSpatialOption:\n      properties:\n        option:\n          type: string\n        value:\n          format: float\n          type: number\n      title: SpatialOption\n      type: object\n    QuizMarkResponse:\n      properties:\n        attempts:\n          format: int32\n          type: integer\n        lastAttemptAt:\n          format: date-time\n          type: string\n        learnerEmail:\n          type: string\n        learnerFullname:\n          type: string\n        learnerPersonId:\n          type: string\n        mark:\n          type: string\n        quizId:\n          type: string\n        quizTitle:\n          type: string\n      title: QuizMark\n      type: object\n    RevokedResponse:\n      properties:\n        badgeId:\n          type: string\n        badgeUrl:\n          type: string\n        revocationReason:\n          type: string\n        revoked:\n          type: boolean\n      type: object\n    SocialNotesResponse:\n      properties:\n        email:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        pageId:\n          type: string\n        personId:\n          type: string\n        social-note-content:\n          type: string\n        social-note-paragraphId:\n          type: string\n        userId:\n          type: string\n      type: object\n    SubmissionMarkResponse:\n      properties:\n        assessmentId:\n          type: string\n        assessmentItemDetails:\n          type: string\n        assessmentItemName:\n          type: string\n        courseName:\n          type: string\n        files:\n          items:\n            $ref: \"#/components/schemas/Document\"\n          type: array\n        html:\n          type: string\n        learnerEmail:\n          type: string\n        learnerFirstName:\n          type: string\n        learnerLastName:\n          type: string\n        learnerPersonId:\n          type: string\n        marks:\n          items:\n            $ref: \"#/components/schemas/Mark\"\n          type: array\n        status:\n          type: string\n        submissionDateTime:\n          format: date-time\n          type: string\n      title: SubmissionMark\n    SuspendedRequest:\n      properties:\n        suspended:\n          type: boolean\n      type: object\n    ThemeResponse:\n      properties:\n        filter:\n          type: string\n        numberOfQuestions:\n          type: string\n      type: object\n    TransferRequest:\n      properties:\n        fromOfferingId:\n          type: string\n        sendInvite:\n          type: boolean\n        toOfferingId:\n          type: string\n      type: object\n    UnitReactionsAnalyticsResponse:\n      properties:\n        feedback:\n          $ref: \"#/components/schemas/UnitReactionsFeedback\"\n        pageId:\n          type: boolean\n      type: object\n    UnitReactionsFeedback:\n      properties:\n        thumbs-down:\n          type: number\n        thumbs-up:\n          type: number\n      type: object\n    User:\n      additionalProperties: false\n      properties:\n        email:\n          format: email\n          minLength: 1\n          type: string\n        firstName:\n          minLength: 1\n          type: string\n        lastName:\n          minLength: 1\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/UserMetadata\"\n        personId:\n          minLength: 1\n          type: string\n        profile:\n          $ref: \"#/components/schemas/UserProfileRequest\"\n        sendInvite:\n          default: true\n          type: boolean\n      type: object\n    UserBadge:\n      properties:\n        awardedAt:\n          format: date-time\n          type: string\n        badgeExpiry:\n          properties:\n            expirationDate:\n              format: date-time\n              type: string\n            expires:\n              type: boolean\n          type: object\n        badgeUrl:\n          type: string\n        criterias:\n          allOf:\n            - $ref: \"#/components/schemas/Criteria\"\n        description:\n          type: string\n        offeringId:\n          type: string\n        openBadge:\n          allOf:\n            - $ref: \"#/components/schemas/OpenBadgeClass\"\n        title:\n          type: string\n      type: object\n    UserMetadata:\n      additionalProperties: false\n      properties:\n        tags:\n          items:\n            type: string\n          type: array\n      type: object\n    UserPermission:\n      properties:\n        email:\n          type: string\n        isBuilder:\n          type: boolean\n        isReviewer:\n          type: boolean\n        name:\n          type: string\n      title: User\n    UserProfile:\n      properties:\n        displayName:\n          type: string\n        mobile:\n          type: string\n      type: object\n    UserProfileRequest:\n      properties:\n        displayName:\n          type: string\n      type: object\n    UserResponse:\n      properties:\n        avatarUrl:\n          type: string\n        email:\n          format: email\n          minLength: 1\n          type: string\n        firstAccessAt:\n          format: date-time\n          type: string\n        firstName:\n          minLength: 1\n          type: string\n        id:\n          type: string\n        invite:\n          $ref: \"#/components/schemas/Invite\"\n        lastAccessAt:\n          format: date-time\n          type: string\n        lastName:\n          minLength: 1\n          type: string\n        metadata:\n          $ref: \"#/components/schemas/UserMetadata\"\n        personId:\n          minLength: 1\n          type: string\n        profile:\n          $ref: \"#/components/schemas/UserProfile\"\n      type: object\n    httpPost:\n      properties:\n        attachments:\n          items:\n            $ref: \"#/components/schemas/DocumentResponse\"\n          type: array\n        content:\n          type: string\n        createdAt:\n          format: date-time\n          type: string\n        email:\n          type: string\n        id:\n          type: string\n        isFacilitatorPost:\n          type: boolean\n        moderation:\n          $ref: \"#/components/schemas/Moderation\"\n        title:\n          type: string\n      type: object\n  securitySchemes:\n    Authorization:\n      in: header\n      name: Authorization\n      type: apiKey\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /offerings/{offeringId}/analytics/pulses/responses: get: parameters: parse parameter \"responseTime\": all oneOf schemas must be simple types"
}