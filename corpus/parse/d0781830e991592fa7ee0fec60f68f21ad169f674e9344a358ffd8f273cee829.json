{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/YubicoLabs/WebAuthnKit"
		},
		"file": {
			"name": "template.yaml",
			"size": 0,
			"path": "backend/template.yaml",
			"byteSize": 43791,
			"content": "AWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: WebAuthn Starter Kit - Backend Serverless Deployment\nMetadata:\n  AWS::ServerlessRepo::Application:\n    Name: yubico-webauthn-starter-kit\n    Description: Custom authentication using Amazon Cognito, AWS Lambda, API Gateway, Aurora Serverless (DB), and a YubiKey\n    Author: \"Yubico AB\"\n    SpdxLicenseId: \"Apache-2.0\"\n    LicenseUrl: \"../COPYING\"\n    ReadmeUrl: README.md\n    Labels:\n      [\"passwordless\", \"YubiKey\", \"WebAuthn\", \"serverless\", \"FIDO2\", \"Yubico\"]\n    HomepageUrl: https://github.com/YubicoLabs/WebAuthnKit\n    SemanticVersion: 1.0.0\n    SourceCodeUrl: https://github.com/YubicoLabs/WebAuthnKit\n\nGlobals:\n  Function:\n    Timeout: 30\n\nParameters:\n  UserPoolName:\n    Type: String\n    Default: \"FIDO2UserPool\"\n    Description: The name you want to give the Cognito User Pool being created\n  DatabaseName:\n    Type: String\n    AllowedPattern: \"[a-zA-Z][a-zA-Z0-9]*\"\n    ConstraintDescription: must begin with a letter and contain only alphanumeric characters\n    Default: \"fido2database\"\n    Description: The RDS Aurora Serverless Database Name\n  MasterUserName:\n    Type: String\n    MinLength: 8\n    ConstraintDescription: must be 8 characters or more\n    Default: \"masterusername\"\n    Description: The RDS Aurora Serverless Master UserName\n  MasterUserPassword:\n    Type: String\n    Description: The RDS Aurora Serverless Master User Password\n    NoEcho: true\n  DefineAuthChallengeFuncName:\n    Type: String\n    Default: \"DefineChallenge-FIDO2\"\n    Description: Cognito Define Auth function name\n  CreateAuthChallengeFuncName:\n    Type: String\n    Default: \"CreateChallenge-FIDO2\"\n    Description: Cognito Create Auth function name\n  VerifyAuthChallengeFuncName:\n    Type: String\n    Default: \"VerifyChallenge-FIDO2\"\n    Description: Cognito Verify Auth function name\n  JavaWebAuthnFuncName:\n    Type: String\n    Default: \"WebAuthn-Java-Lib\"\n    Description: Yubico Java WebAuthn Library\n  WebAuthnKitAPIName:\n    Type: String\n    Default: \"WebAuthnKitAPI\"\n    Description: WebAuthnKitAPI API name\n  WebAuthnKitAPIFuncName:\n    Type: String\n    Default: \"WebAuthnKitAPI\"\n    Description: WebAuthnKitAPI Lambda function name\n  PreSignUpFuncName:\n    Type: String\n    Default: \"PreSignUp-FIDO2\"\n    Description: Cognito PreSignUp function name\n  CreateDBSchemaFuncName:\n    Type: String\n    Default: \"CreateFIDO2DBSchema\"\n    Description: Create FIDO2 DB function name\n  CreateDBSchemaCallerFuncName:\n    Type: String\n    Default: \"CreateFIDO2DBSchemaCaller\"\n    Description: Calls the DB creation schema function\n  AmplifyHostingAppName:\n    Type: String\n    Default: \"WebAuthnKit-React-Client\"\n    Description: Hosting App for React Web Client\n  AmplifyHostingBranchName:\n    Type: String\n    Default: \"dev\"\n    Description: Hosting Branch for React Web Client\n  APICorsOrigin:\n    Type: String\n    Default: \"'*'\"\n  APICorsHeaders:\n    Type: String\n    Default: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n  APICorsMethods:\n    Type: String\n    Default: \"'DELETE,GET,HEAD,OPTIONS,POST,PUT'\"\n  AmplifyDeployType:\n    Type: String\n    Default: \"manual\"\n    AllowedValues: [manual]\n\n# Used for Amplify Hosting\nConditions:\n  isManual: !Equals [!Ref AmplifyDeployType, \"manual\"]\n\nResources:\n  # RDS Aurora Serverless Cluster - Encryption enabled by default\n  # Warning: NOT FREE TIER - Aurora Serverless does not support free tier instance class\n  # We have reduced capacity to max of 1 but turned off AutoPause to avoid cold starts\n  # To reduce costs: You can set AutoPause: true and uncomment (SecondsUntilAutoPause)\n  # or delete the CloudFormation Stack entirely. You can always start over and redeploy later\n  RDSAuroraServerlessCluster:\n    Type: AWS::RDS::DBCluster\n    DeletionPolicy: Delete\n    Properties:\n      DBClusterIdentifier:\n        Ref: DatabaseName\n      MasterUsername:\n        Ref: MasterUserName\n      MasterUserPassword:\n        Ref: MasterUserPassword\n      DatabaseName:\n        Ref: DatabaseName\n      Engine: aurora\n      EngineMode: serverless\n      EnableHttpEndpoint: true\n      StorageEncrypted: true\n      ScalingConfiguration:\n        AutoPause: false\n        MaxCapacity: 1\n        MinCapacity: 1\n        #SecondsUntilAutoPause: 7200\n  # Create a SecretsManager to manage the Aurora Serverless credentials\n  RDSAuroraClusterMasterSecret:\n    Type: \"AWS::SecretsManager::Secret\"\n    Properties:\n      Name:\n        Ref: DatabaseName\n      Description: This contains the RDS Master user credentials for RDS Aurora Serverless Cluster\n      SecretString: !Sub |\n        {\n          \"username\": \"${MasterUserName}\",\n          \"password\": \"${MasterUserPassword}\"\n        }\n\n  #############\n  # IAM Roles #\n  #############\n\n  # IAM Role and Policy for the CreateDBSchema function\n  CreateDBSchemaLambdaExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: \"/\"\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n      Policies:\n        - PolicyName: \"LambdaToRDSAuroraServerless\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Action:\n                  - \"rds-data:DeleteItems\"\n                  - \"rds-data:ExecuteStatement\"\n                  - \"rds-data:GetItems\"\n                  - \"rds-data:InsertItems\"\n                  - \"rds-data:UpdateItems\"\n                Resource:\n                  - !Join [\n                      \"\",\n                      [\n                        \"arn:aws:rds:\",\n                        !Ref AWS::Region,\n                        \":\",\n                        !Ref AWS::AccountId,\n                        \":cluster:\",\n                        !Ref RDSAuroraServerlessCluster,\n                      ],\n                    ]\n                  - !Join [\n                      \"\",\n                      [\n                        \"arn:aws:rds:\",\n                        !Ref AWS::Region,\n                        \":\",\n                        !Ref AWS::AccountId,\n                        \":cluster:\",\n                        !Ref RDSAuroraServerlessCluster,\n                        \":*\",\n                      ],\n                    ]\n        - PolicyName: \"LambdaToAWSSecrets\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Action: \"secretsmanager:GetSecretValue\"\n                Resource:\n                  - !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n                  - !Join [\"\", [!Ref RDSAuroraClusterMasterSecret, \":*\"]]\n\n  # IAM Role and Policy for the JavaWebAuthnLib function\n  JavaLibLambdaExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n  # IAM Role and Policy for the FIDO2 API function\n  APILambdaExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    DependsOn:\n      - JavaWebAuthnFunction\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n  # IAM Role and Policy for the CreateAuth and VerifyAuth functions\n  CreateVerifyLambdaExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    DependsOn:\n      - JavaWebAuthnFunction\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      ManagedPolicyArns:\n        - \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n\n  ################\n  # IAM Policies #\n  ################\n\n  # IAM Policy for LambdaToWebAuthnLib\n  LambdaToWebAuthnLibPolicy:\n    Type: \"AWS::IAM::Policy\"\n    DependsOn:\n      - JavaWebAuthnFunction\n    Properties:\n      PolicyName: LambdaToWebAuthnLibPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action: \"lambda:InvokeFunction\"\n            Resource:\n              - !Join [\n                  \"\",\n                  [\n                    \"arn:aws:lambda:\",\n                    !Ref AWS::Region,\n                    \":\",\n                    !Ref AWS::AccountId,\n                    \":function:\",\n                    !Ref JavaWebAuthnFuncName,\n                  ],\n                ]\n      Roles:\n        - !Ref CreateVerifyLambdaExecutionRole\n        - !Ref APILambdaExecutionRole\n\n  # IAM Policy for RDS Aurora Serverless access via rds-data API\n  RDSAuroraServerlessPolicy:\n    Type: \"AWS::IAM::Policy\"\n    DependsOn:\n      - RDSAuroraServerlessCluster\n    Properties:\n      PolicyName: RDSAuroraServerlessPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"rds-data:DeleteItems\"\n              - \"rds-data:ExecuteStatement\"\n              - \"rds-data:GetItems\"\n              - \"rds-data:InsertItems\"\n              - \"rds-data:UpdateItems\"\n            Resource:\n              - !Join [\n                  \"\",\n                  [\n                    \"arn:aws:rds:\",\n                    !Ref AWS::Region,\n                    \":\",\n                    !Ref AWS::AccountId,\n                    \":cluster:\",\n                    !Ref RDSAuroraServerlessCluster,\n                  ],\n                ]\n              - !Join [\n                  \"\",\n                  [\n                    \"arn:aws:rds:\",\n                    !Ref AWS::Region,\n                    \":\",\n                    !Ref AWS::AccountId,\n                    \":cluster:\",\n                    !Ref RDSAuroraServerlessCluster,\n                    \":*\",\n                  ],\n                ]\n      Roles:\n        - !Ref JavaLibLambdaExecutionRole\n        - !Ref APILambdaExecutionRole\n        - !Ref CreateVerifyLambdaExecutionRole\n\n  # IAM Policy for accessing AWS Secrets\n  AWSSecretsPolicy:\n    Type: \"AWS::IAM::Policy\"\n    DependsOn:\n      - RDSAuroraClusterMasterSecret\n    Properties:\n      PolicyName: AWSSecretsPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action: \"secretsmanager:GetSecretValue\"\n            Resource:\n              - !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n              - !Join [\"\", [!Ref RDSAuroraClusterMasterSecret, \":*\"]]\n      Roles:\n        - !Ref JavaLibLambdaExecutionRole\n        - !Ref APILambdaExecutionRole\n        - !Ref CreateVerifyLambdaExecutionRole\n\n  # IAM Policy for CognitoAdmin\n  CognitoAdminPolicy:\n    Type: \"AWS::IAM::Policy\"\n    Properties:\n      PolicyName: CognitoAdminPolicy\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action: \"cognito-idp:AdminUpdateUserAttributes\"\n            Resource:\n              - !Join [\n                  \"\",\n                  [\n                    \"arn:aws:cognito-idp:\",\n                    !Ref AWS::Region,\n                    \":\",\n                    !Ref AWS::AccountId,\n                    \":userpool/\",\n                    !Ref UserPool,\n                  ],\n                ]\n      Roles:\n        - !Ref CreateVerifyLambdaExecutionRole\n\n  # Lambda function triggers for Cognito Custom Auth Flow\n  DefineAuthChallenge:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: DefineAuthChallengeFuncName\n      CodeUri: lambda-functions/DefineAuth/\n      Handler: DefineAuthChallengeFIDO2.handler\n      Runtime: nodejs12.x\n  # Create Auth Challenge\n  CreateAuthChallenge:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: CreateAuthChallengeFuncName\n      CodeUri: lambda-functions/CreateAuth/\n      Handler: CreateAuthChallengeFIDO2.handler\n      Runtime: nodejs12.x\n      # Environment variables for connecting to RDS\n      Environment:\n        Variables:\n          DatabaseName: !Ref DatabaseName\n          DBAuroraClusterArn: !Join\n            - \"\"\n            - - !Sub \"arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:\"\n              - !Ref RDSAuroraServerlessCluster\n          DBSecretsStoreArn: !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n          WebAuthnLibFunction: !Ref JavaWebAuthnFuncName\n      Role:\n        Fn::GetAtt:\n          - \"CreateVerifyLambdaExecutionRole\"\n          - \"Arn\"\n  # Verify Auth Challenge - Function trigger\n  VerifyAuthChallengeResponse:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: VerifyAuthChallengeFuncName\n      CodeUri: lambda-functions/VerifyAuth/\n      Handler: VerifyAuthChallengeFIDO2.handler\n      Runtime: nodejs12.x\n      # Environment variables for connecting to RDS\n      Environment:\n        Variables:\n          DatabaseName: !Ref DatabaseName\n          DBAuroraClusterArn: !Join\n            - \"\"\n            - - !Sub \"arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:\"\n              - !Ref RDSAuroraServerlessCluster\n          DBSecretsStoreArn: !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n          WebAuthnLibFunction: !Ref JavaWebAuthnFuncName\n      Role:\n        Fn::GetAtt:\n          - \"CreateVerifyLambdaExecutionRole\"\n          - \"Arn\"\n\n  # PreSignUp - Function trigger\n  PreSignUp:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: PreSignUpFuncName\n      CodeUri: lambda-functions/PreSignUp/\n      Handler: PreSignUpFIDO2.handler\n      Runtime: nodejs12.x\n\n  # WebAuthn Starter Kit - API Lambda Function\n  WebAuthnKitAPIFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: WebAuthnKitAPIFuncName\n      CodeUri: lambda-functions/FIDO2KitAPI/\n      Handler: FIDO2KitAPI.handler\n      Runtime: nodejs12.x\n      # Environment variables for connecting to RDS\n      Environment:\n        Variables:\n          DatabaseName: !Ref DatabaseName\n          DBAuroraClusterArn: !Join\n            - \"\"\n            - - !Sub \"arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:\"\n              - !Ref RDSAuroraServerlessCluster\n          DBSecretsStoreArn: !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n          WebAuthnLibFunction: !Ref JavaWebAuthnFuncName\n      Role:\n        Fn::GetAtt:\n          - \"APILambdaExecutionRole\"\n          - \"Arn\"\n\n  # Database Schema Creation Function\n  CreateDBSchemaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: CreateDBSchemaFuncName\n      CodeUri: lambda-functions/CreateDBSchema/\n      Handler: CreateDBSchema.handler\n      Runtime: nodejs12.x\n      # Environment variables for connecting to RDS\n      Environment:\n        Variables:\n          DatabaseName: !Ref DatabaseName\n          DBAuroraClusterArn: !Join\n            - \"\"\n            - - !Sub \"arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:\"\n              - !Ref RDSAuroraServerlessCluster\n          DBSecretsStoreArn: !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n      Role:\n        Fn::GetAtt:\n          - \"CreateDBSchemaLambdaExecutionRole\"\n          - \"Arn\"\n\n  # IAM Role and Policy for the Lambda function CreateDBSchemaCaller which invokes the createDBSchema function\n  CreateDBSchemaCallerLambdaExecutionRole:\n    Type: \"AWS::IAM::Role\"\n    DependsOn:\n      - CreateDBSchemaFunction\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: \"/\"\n      Policies:\n        - PolicyName: LambdaToCreateDBSchemaPolicy\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: \"Allow\"\n                Action: \"lambda:InvokeFunction\"\n                Resource:\n                  - !Join [\n                      \"\",\n                      [\n                        \"arn:aws:lambda:\",\n                        !Ref AWS::Region,\n                        \":\",\n                        !Ref AWS::AccountId,\n                        \":function:\",\n                        !Ref CreateDBSchemaFuncName,\n                      ],\n                    ]\n\n  # AWS Amplify Hosting - Service Role\n  AmplifyHostingServiceRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service:\n                - amplify.amazonaws.com\n            Action:\n              - sts:AssumeRole\n      Path: \"/\"\n      Policies:\n        - PolicyName: \"WebAuthnKitAmplifyHostingPolicy\"\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              - Effect: \"Allow\"\n                Action: amplify:*\n                Resource: \"*\"\n\n  # AWS Amplify Hosting - App\n  AWSAmplifyHostingApp:\n    Condition: isManual\n    Type: AWS::Amplify::App\n    Properties:\n      Name:\n        Ref: AmplifyHostingAppName\n      Description: \"WebAuthn Starter Kit React Web Client Amplify App\"\n      IAMServiceRole:\n        Fn::GetAtt:\n          - \"AmplifyHostingServiceRole\"\n          - \"Arn\"\n      CustomRules:\n        - Source: \u003c/^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|ttf|map|json)$)([^.]+$)/\u003e\n          Target: /index.html\n          Status: \"200\"\n\n  # AWS Amplify Hosting - Branch\n  AWSAmplifyHostingBranch:\n    Type: AWS::Amplify::Branch\n    Properties:\n      AppId:\n        Fn::GetAtt:\n          - \"AWSAmplifyHostingApp\"\n          - \"AppId\"\n      BranchName:\n        Ref: AmplifyHostingBranchName\n      Description: \"WebAuthn Starter Kit React Web Client Amplify App:Branch\"\n\n  # Yubico - Java WebAuthn Server Library as Lambda Function\n  JavaWebAuthnFunction:\n    Type: AWS::Serverless::Function\n    DependsOn:\n      - AWSAmplifyHostingBranch\n    Metadata:\n      BuildMethod: makefile\n    Properties:\n      FunctionName:\n        Ref: JavaWebAuthnFuncName\n      CodeUri: lambda-functions/JavaWebAuthnLib/\n      Runtime: java8.al2\n      Handler: com.yubicolabs.App::handleRequest\n      Timeout: 30\n      MemorySize: 1408\n      # Environment variables for connecting to RDS\n      Environment:\n        Variables:\n          JAVA_TOOL_OPTIONS: \"-Dcom.sun.security.enableCRLDP=true\"\n          DatabaseName: !Ref DatabaseName\n          DBAuroraClusterArn: !Join\n            - \"\"\n            - - !Sub \"arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:\"\n              - !Ref RDSAuroraServerlessCluster\n          DBSecretsStoreArn: !Join [\"\", [!Ref RDSAuroraClusterMasterSecret]]\n          YUBICO_WEBAUTHN_RP_NAME: \"WebAuthn Starter Kit\"\n          YUBICO_WEBAUTHN_RP_ID: !Join\n            - \"\"\n            - - Fn::GetAtt:\n                  - \"AWSAmplifyHostingApp\"\n                  - \"DefaultDomain\"\n          YUBICO_WEBAUTHN_ALLOWED_ORIGINS: !Join\n            - \"\"\n            - - \"https://\"\n              - !Ref AmplifyHostingBranchName\n              - \".\"\n              - Fn::GetAtt:\n                  - \"AWSAmplifyHostingApp\"\n                  - \"DefaultDomain\"\n      Role:\n        Fn::GetAtt:\n          - \"JavaLibLambdaExecutionRole\"\n          - \"Arn\"\n\n  # Create DB Schema Creation Function CALLER\n  # This function is called by CF which executes the db schema creation function\n  CreateDBSchemaFunctionCaller:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName:\n        Ref: CreateDBSchemaCallerFuncName\n      InlineCode: |\n        var aws = require('aws-sdk');\n        var cfnResponse = require('cfn-response');\n\n        exports.handler = function(event, context) {\n          console.log('RECEIVED Event: ', JSON.stringify(event, null, 2));\n          if (event.RequestType == 'Delete') {\n            cfnResponse.send(event, context, cfnResponse.SUCCESS);\n            return;\n          }\n          var responseStatus = \"FAILED\";\n          var responseData = {};\n          var functionName = event.ResourceProperties.FunctionName;\n          var lambda = new aws.Lambda();\n          lambda.invoke({ FunctionName: functionName }, function(err, invokeResult) {\n              if (err) {\n                  responseData = {Error: \"Invoke call failed\"};\n                  console.log(responseData.Error + \":\\n\", err);\n              }\n              else responseStatus = \"SUCCESS\";\n              cfnResponse.send(event, context, responseStatus, responseData);\n          });\n        };\n      Handler: index.handler\n      Runtime: nodejs12.x\n      Description: Invokes the database schema creation function.\n      MemorySize: 128\n      Timeout: 20\n      Role:\n        Fn::GetAtt:\n          - \"CreateDBSchemaCallerLambdaExecutionRole\"\n          - \"Arn\"\n\n  # Amazon Cognito User Pool as our identity provider\n  UserPool:\n    Type: \"AWS::Cognito::UserPool\"\n    Properties:\n      UserPoolName: !Ref UserPoolName\n      Policies:\n        PasswordPolicy:\n          MinimumLength: 14\n          RequireLowercase: false\n          RequireNumbers: true\n          RequireSymbols: false\n          RequireUppercase: false\n      AliasAttributes:\n        - preferred_username\n      UsernameConfiguration:\n        CaseSensitive: false\n      MfaConfiguration: \"OFF\"\n      LambdaConfig:\n        CreateAuthChallenge: !GetAtt CreateAuthChallenge.Arn\n        DefineAuthChallenge: !GetAtt DefineAuthChallenge.Arn\n        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeResponse.Arn\n        PreSignUp: !GetAtt PreSignUp.Arn\n  #\n  # API Gateway - WebAuthn Kit REST API\n  # Using OpenAPI + AWS Extensions (this is a modified OpenAPI 3 export)\n  #\n  Api:\n    Type: AWS::ApiGateway::RestApi\n    Properties:\n      Name:\n        Ref: WebAuthnKitAPIName\n      Body:\n        openapi: \"3.0.1\"\n        info:\n          version: \"2020-09-11T04:20:00Z\"\n          title: \"WebAuthn Kit API\"\n        paths:\n          /users:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials/pin:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials/codes:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials/fido2:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials/fido2/authenticate:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              #security:\n              #- cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials/fido2/register:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n          /users/credentials/fido2/register/finish:\n            options:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  headers:\n                    Access-Control-Allow-Origin:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Methods:\n                      schema:\n                        type: \"string\"\n                    Access-Control-Allow-Headers:\n                      schema:\n                        type: \"string\"\n              x-amazon-apigateway-integration:\n                responses:\n                  default:\n                    statusCode: \"200\"\n                    responseParameters:\n                      method.response.header.Access-Control-Allow-Origin: !Ref APICorsOrigin\n                      method.response.header.Access-Control-Allow-Headers: !Ref APICorsHeaders\n                      method.response.header.Access-Control-Allow-Methods: !Ref APICorsMethods\n                    responseTemplates:\n                      application/json: \"\"\n                passthroughBehavior: \"WHEN_NO_TEMPLATES\"\n                requestTemplates:\n                  application/json: '{\"statusCode\": 200}'\n                type: \"mock\"\n            x-amazon-apigateway-any-method:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n              security:\n                - cognito-userpool-authorizer: []\n              x-amazon-apigateway-integration:\n                type: \"aws_proxy\"\n                uri: !Sub\n                  - \"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations\"\n                  - lambdaArn: !GetAtt \"WebAuthnKitAPIFunction.Arn\"\n                responses:\n                  default:\n                    statusCode: \"200\"\n                passthroughBehavior: \"when_no_match\"\n                httpMethod: \"POST\"\n        components:\n          securitySchemes:\n            cognito-userpool-authorizer:\n              type: \"apiKey\"\n              name: \"Authorization\"\n              in: \"header\"\n              x-amazon-apigateway-authtype: \"cognito_user_pools\"\n              x-amazon-apigateway-authorizer:\n                type: \"cognito_user_pools\"\n                providerARNs:\n                  - !GetAtt UserPool.Arn\n      Description: \"WebAuthn Starter API for User Credential Management\"\n      FailOnWarnings: true\n  # Create DBSchema Callout\n  DBCreationSchemaCaller:\n    Type: Custom::LambdaDatabaseSchemaCallout\n    Properties:\n      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CreateDBSchemaCallerFuncName}\n      FunctionName: !Ref CreateDBSchemaFuncName\n    DependsOn:\n      - CreateDBSchemaFunctionCaller\n      - CreateDBSchemaFunction\n  # Allow API Gateway to invoke Lambda function API from Console\n  APIGWLambdaPermission:\n    Type: \"AWS::Lambda::Permission\"\n    DependsOn:\n      - WebAuthnKitAPIFunction\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !Ref WebAuthnKitAPIFunction\n      Principal: apigateway.amazonaws.com\n  # API Gateway - API Deployment\n  # Combine the stage creation and deployment\n  ApiDeployment:\n    Type: \"AWS::ApiGateway::Deployment\"\n    Properties:\n      RestApiId: !Ref Api\n      StageName: \"dev\"\n  # Lambda invocation permissions\n  DefineAuthChallengeInvocationPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt DefineAuthChallenge.Arn\n      Principal: cognito-idp.amazonaws.com\n      SourceArn: !GetAtt UserPool.Arn\n  CreateAuthChallengeInvocationPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt CreateAuthChallenge.Arn\n      Principal: cognito-idp.amazonaws.com\n      SourceArn: !GetAtt UserPool.Arn\n  VerifyAuthChallengeResponseInvocationPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt VerifyAuthChallengeResponse.Arn\n      Principal: cognito-idp.amazonaws.com\n      SourceArn: !GetAtt UserPool.Arn\n  PreSignUpInvocationPermission:\n    Type: AWS::Lambda::Permission\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt PreSignUp.Arn\n      Principal: cognito-idp.amazonaws.com\n      SourceArn: !GetAtt UserPool.Arn\n\n  UserPoolClient:\n    Type: \"AWS::Cognito::UserPoolClient\"\n    Properties:\n      ClientName: all-clients\n      GenerateSecret: false\n      UserPoolId: !Ref UserPool\n      ExplicitAuthFlows:\n        - ALLOW_CUSTOM_AUTH\n        - ALLOW_USER_SRP_AUTH\n        - ALLOW_REFRESH_TOKEN_AUTH\n\n#######  ##     ## ######## ########  ##     ## ########\n##     ## ##     ##    ##    ##     ## ##     ##    ##\n##     ## ##     ##    ##    ##     ## ##     ##    ##\n##     ## ##     ##    ##    ########  ##     ##    ##\n##     ## ##     ##    ##    ##        ##     ##    ##\n##     ## ##     ##    ##    ##        ##     ##    ##\n#######   #######     ##    ##         #######     ##\n\nOutputs:\n  UserPoolId:\n    Description: (Pool ID) of the Cognito User Pool\n    Value: !Ref UserPool\n  UserPoolClientId:\n    Description: (App client id) of the User Pool client\n    Value: !Ref UserPoolClient\n  DatabaseName:\n    Value: !Ref DatabaseName\n    Description: Aurora Serverless Database Name\n  SecretsArn:\n    Value: !Ref RDSAuroraClusterMasterSecret\n    Description: AWS Secrets Manager Arn\n  DBClusterArn:\n    Value: !Join\n      - \"\"\n      - - \"arn:aws:rds:\"\n        - !Ref AWS::Region\n        - \":\"\n        - !Ref AWS::AccountId\n        - \":\"\n        - \"cluster\"\n        - \":\"\n        - !Ref RDSAuroraServerlessCluster\n    Description: Amazon RDS Cluster Arn\n  APIEndpoint:\n    Value:\n      Fn::Sub: \"https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev\"\n    Description: WebAuthn Starter Kit API Gateway Regional Endpoint\n  AWSConfiguration:\n    Value: !Join\n      - \"\"\n      - - '{\"CognitoUserPool\": {\"Default\": {\"PoolId\"'\n        - \":\"\n        - '\"'\n        - !Ref UserPool\n        - '\"'\n        - ',\"AppClientId\":'\n        - '\"'\n        - !Ref UserPoolClient\n        - '\"'\n        - ',\"Region\":'\n        - '\"'\n        - !Ref AWS::Region\n        - '\"'\n        - '}},\"Auth\": {\"Default\": {\"authenticationFlowType\": \"CUSTOM_AUTH\"}}}'\n    Description: AWS constants used for Mobile iOS and Android clients\n  AWSExports:\n    Value: !Join\n      - \"\"\n      - - 'const awsmobile = {\"aws_project_region\"'\n        - \":\"\n        - '\"'\n        - !Ref AWS::Region\n        - '\"'\n        - ', \"Auth\":'\n        - ' {\"region\":'\n        - '\"'\n        - !Ref AWS::Region\n        - '\"'\n        - ', \"userPoolId\":'\n        - '\"'\n        - !Ref UserPool\n        - '\"'\n        - ', \"userPoolWebClientId\":'\n        - '\"'\n        - !Ref UserPoolClient\n        - '\"'\n        - ', \"authenticationFlowType\": \"CUSTOM_AUTH\"}'\n        - ', \"apiEndpoint\":'\n        - '\"'\n        - Fn::Sub: \"https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev\"\n        - '\"'\n        - ', \"authenticationFlowType\": \"CUSTOM_AUTH\"};'\n        - \"\"\n        - \" export default awsmobile;\"\n    Description: aws-exports.js configuration for deploying React client to AWS Amplify hosting\n  # AWS Amplify Hosting - Endpoint\n  AmplifyHostingEndpoint:\n    Description: AWS Amplify hosting endpoint for React Web Client\n    Value: !Join\n      - \"\"\n      - - \"https://\"\n        - !Ref AmplifyHostingBranchName\n        - \".\"\n        - Fn::GetAtt:\n            - \"AWSAmplifyHostingApp\"\n            - \"DefaultDomain\"\n  # AWS Amplify Hosting - App Id\n  AmplifyHostingAppId:\n    Description: AWS Amplify hosting app id\n    Value: !GetAtt AWSAmplifyHostingApp.AppId\n",
			"canonicalURL": "/github.com/YubicoLabs/WebAuthnKit@df9f28cd8142b67dfb6ef7cb9e37f48f9782f11a/-/blob/backend/template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/YubicoLabs/WebAuthnKit/blob/df9f28cd8142b67dfb6ef7cb9e37f48f9782f11a/backend/template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at backend/template.yaml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}