{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/RosaeNLG/rosaenlg"
		},
		"file": {
			"name": "openApiDocumentation.json",
			"size": 0,
			"path": "packages/rosaenlg-server-toolkit/src/swagger/openApiDocumentation.json",
			"byteSize": 13836,
			"content": "{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"RosaeNLG API\",\n    \"description\": \"API over the Natural Language Generation library RosaeNLG\",\n    \"contact\": {\n      \"name\": \"Ludan Stoeckl√©\",\n      \"email\": \"contact@rosaenlg.org\",\n      \"url\": \"https://rosaenlg.org\"\n    },\n    \"license\": {\n      \"name\": \"Apache-2.0\",\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0\"\n    }\n  },\n  \"externalDocs\": {\n    \"description\": \"RosaeNLG reference documentation\",\n    \"url\": \"https://rosaenlg.org\"\n  },\n  \"components\": {\n    \"schemas\": {\n      \"JSONPackageSchema\": {\n        \"$ref\": \"jsonPackage.schema.json\"\n      },\n      \"JSONRenderInputSchema\": {\n        \"$ref\": \"renderOptionsInput.schema.json\"\n      },\n      \"RenderResponseAbstract\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"renderedText\": {\n            \"type\": \"string\",\n            \"description\": \"the rendered text (this is the interesting part)\"\n          },\n          \"renderOptions\": {\n            \"type\": \"object\",\n            \"allOf\": [\n              {\n                \"$ref\": \"renderOptionsInput.schema.json\"\n              },\n              {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"randomSeed\": {\n                    \"type\": \"integer\",\n                    \"description\": \"the random seed value that was used to render\"\n                  }\n                }\n              }\n            ],\n            \"additionalProperties\": false\n          },\n          \"outputData\": {\n            \"type\": \"object\",\n            \"description\": \"generic holder of data output by the template\"\n          },\n          \"ms\": {\n            \"type\": \"integer\",\n            \"description\": \"the time in ms that was necessary to process the request (server side)\"\n          }\n        }\n      }\n    },\n    \"parameters\": {\n      \"templateIdInPath\": {\n        \"name\": \"templateId\",\n        \"in\": \"path\",\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"example\": \"chanson\",\n        \"required\": true,\n        \"description\": \"ID of the template\"\n      },\n      \"userInHeader\": {\n        \"name\": \"X-RapidAPI-User\",\n        \"in\": \"header\",\n        \"schema\": {\n          \"type\": \"string\"\n        },\n        \"description\": \"ID of the user, when going through Rapid API\"\n      }\n    }\n  },\n  \"paths\": {\n    \"/health\": {\n      \"get\": {\n        \"summary\": \"Health check.\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Health is ok.\"\n          },\n          \"503\": {\n            \"description\": \"Bad health, typically cannot write to disk or S3 when persistent storage is set.\"\n          }\n        }\n      }\n    },\n    \"/version\": {\n      \"get\": {\n        \"summary\": \"Get the deployed RosaeNLG version.\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Health is ok.\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"version\": {\n                      \"type\": \"string\",\n                      \"description\": \"RosaeNLG version\"\n                    }\n                  },\n                  \"required\": [\n                    \"version\"\n                  ]\n                },\n                \"example\": {\n                  \"$ref\": \"version.json\"\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"Get version failed.\"\n          }\n        }\n      }\n    },\n    \"/templates\": {\n      \"get\": {\n        \"summary\": \"Get the IDs of the templates for user.\",\n        \"description\": \"Contains both the loaded templates and the ones which are on the permanent storage\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"the IDs of the templates\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"ids\": {\n                      \"type\": \"array\",\n                      \"description\": \"list of the IDs\",\n                      \"items\": {\n                        \"type\": \"string\"\n                      },\n                      \"uniqueItems\": true\n                    }\n                  }\n                },\n                \"example\": {\n                  \"$ref\": \"listExample.json\"\n                }\n              }\n            }\n          },\n          \"500\": {\n            \"description\": \"templates could not be listed, generally due to a backend issue\"\n          }\n        }\n      },\n      \"put\": {\n        \"summary\": \"Creates a new template.\",\n        \"description\": \"Creates a template from a JSON containing a packaged template. \\n\\nThe template is validated, loaded, autotested (if configured so), and saved on disk or S3 if persistent storage is set. \\n\\nIt can be either a real template with code etc., or a template that points to another existing one (use type *existing* and *which* property).\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JSONPackageSchema\"\n              },\n              \"example\": {\n                \"$ref\": \"chanson.json\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"template was properly loaded and is available for rendering\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"templateId\": {\n                      \"type\": \"string\",\n                      \"description\": \"ID of the created template\"\n                    },\n                    \"templateSha1\": {\n                      \"type\": \"string\",\n                      \"description\": \"sha1 of the created template, to be used in render requests\"\n                    },\n                    \"ms\": {\n                      \"type\": \"number\",\n                      \"description\": \"the time in ms that was needed to load the template\"\n                    }\n                  }\n                },\n                \"example\": {\n                  \"$ref\": \"chansonCreatedOrReloaded.json\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"invalid user name, or template could not be compiled, or invalid template format\"\n          },\n          \"500\": {\n            \"description\": \"template should have been saved on disk or S3 but could not be saved\"\n          }\n        }\n      }\n    },\n    \"/templates/{templateId}\": {\n      \"delete\": {\n        \"summary\": \"Deletes an existing template for a user.\",\n        \"description\": \"Template will be unloaded, and deleted on the disk or S3 if permanent storage is set.\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/templateIdInPath\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"responses\": {\n          \"204\": {\n            \"description\": \"template does not exist, or if it existed, it was deleted and unloaded\"\n          }\n        }\n      },\n      \"get\": {\n        \"summary\": \"Gets information on a template: sha1 and the original content.\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/templateIdInPath\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"information on a template\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"templateSha1\": {\n                      \"type\": \"string\",\n                      \"description\": \"sha1 of the template, to be used in render requests\"\n                    },\n                    \"templateContent\": {\n                      \"$ref\": \"jsonPackage.schema.json\"\n                    }\n                  },\n                  \"required\": [\n                    \"templateSha1\",\n                    \"templateContent\"\n                  ]\n                },\n                \"example\": {\n                  \"$ref\": \"chansonGet.json\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"could not load template (e.g. invalid template content, compilation error)\"\n          },\n          \"404\": {\n            \"description\": \"template does not exist for that user\"\n          }\n        }\n      }\n    },\n    \"/templates/{templateId}/{templateSha1}/render\": {\n      \"post\": {\n        \"summary\": \"Renders an existing template using data.\",\n        \"description\": \"Renders an existing template using data passed in the request. Payload is in additionnal properties of the input.\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/templateIdInPath\"\n          },\n          {\n            \"name\": \"templateSha1\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"example\": \"1bfdbcd203ec8e6f889b068fbb2d7d298b1db903\",\n            \"required\": true,\n            \"description\": \"sha1 of the template (from create call)\"\n          },\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/JSONRenderInputSchema\"\n              },\n              \"example\": {\n                \"$ref\": \"chansonInput.json\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"rendering went well\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"allOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/RenderResponseAbstract\"\n                    },\n                    {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"templateSha1\": {\n                          \"type\": \"string\",\n                          \"description\": \"sha1 of the rendered template, usually the same as in the request, unless it was wrong (redirected)\"\n                        }\n                      }\n                    }\n                  ]\n                },\n                \"example\": {\n                  \"$ref\": \"chansonOutput.json\"\n                }\n              }\n            }\n          },\n          \"308\": {\n            \"description\": \"template exists for that user but with a different SHA1\"\n          },\n          \"404\": {\n            \"description\": \"template does not exist for that user\"\n          },\n          \"400\": {\n            \"description\": \"invalid user name, or issue during rendering\"\n          }\n        }\n      }\n    },\n    \"/templates/render\": {\n      \"post\": {\n        \"summary\": \"Renders a template in the request using data also in the request.\",\n        \"description\": \"Both template and data are passed in the request. Template is automatically cached for a while to accelerate the next calls.\",\n        \"parameters\": [\n          {\n            \"$ref\": \"#/components/parameters/userInHeader\"\n          }\n        ],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"allOf\": [\n                  {\n                    \"$ref\": \"#/components/schemas/JSONPackageSchema\"\n                  }\n                ],\n                \"properties\": {\n                  \"data\": {\n                    \"description\": \"data to render the template\",\n                    \"type\": \"object\"\n                  }\n                },\n                \"required\": [\n                  \"template\",\n                  \"data\"\n                ]\n              },\n              \"example\": {\n                \"$ref\": \"chansonInput_directRender.json\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"rendering went well\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"object\",\n                  \"allOf\": [\n                    {\n                      \"$ref\": \"#/components/schemas/RenderResponseAbstract\"\n                    }\n                  ],\n                  \"properties\": {\n                    \"status\": {\n                      \"type\": \"string\",\n                      \"description\": \"indicates if the template was created, or if it existed before and cached version could be used\",\n                      \"enum\": [\n                        \"CREATED\",\n                        \"EXISTED\"\n                      ]\n                    }\n                  }\n                },\n                \"example\": {\n                  \"$ref\": \"chansonOutput_directRender.json\"\n                }\n              }\n            }\n          },\n          \"400\": {\n            \"description\": \"invalid user, or missing template data, or missing data, or issue during template compilation, or issue during template rendering\"\n          }\n        }\n      }\n    }\n  }\n}"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"JSONPackageSchema\": parse schema: resolve \"jsonPackage.schema.json\": find schema: external base \"jsonPackage.schema.json\" is not supported"
}