{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AtomicLoans/liquidator"
		},
		"file": {
			"name": "agent-api.yaml",
			"size": 0,
			"path": "docs/agent-api.yaml",
			"byteSize": 7593,
			"content": "openapi: 3.0.1\ninfo:\n  title: Liquality Agent\n  description: This is the mock API for the liquality agent. See [Liquality.io](https://liquality.io)\n    for more information.\n  contact:\n    email: info@liquality.io\n  license:\n    name: MIT\n  version: 1.0.0\n  x-logo:\n    url: https://avatars1.githubusercontent.com/u/42639968?s=200\u0026v=4\nservers:\n- url: https://localhost:9898/v1\ntags:\n- name: swap\n  description: Swap with the agent\n  externalDocs:\n    description: API Source\n    url: https://github.com/liquality/agent\n  x-displayName: Swap API\npaths:\n  /swap/marketinfo:\n    parameters:\n    - name: from\n      in: query\n      description: from currency\n      required: false\n      schema:\n        type: string\n        example: BTC\n    - name: to\n      in: query\n      description: to currency\n      required: false\n      schema:\n        type: string\n        example: ETH\n    get:\n      tags:\n      - swap\n      summary: Retrieve the markets that the agent is able to swap\n      operationId: getSwapMarketInfo\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Market'\n  /swap/order:\n    post:\n      tags:\n      - swap\n      summary: Create an Order with the agent\n      operationId: createOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderRequest'\n            examples:\n              testing:\n                summary: BTC_ETH\n                value:\n                  from: BTC\n                  to: ETH\n                  amount: 0.51\n      responses:\n        200:\n          description: order created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n              example:\n                id: eae4d76c-3ba2-465d-930b-324fcbe17d95\n                from: BTC\n                to: ETH\n                rate: 38.7\n                fromCounterPartyAddress: 'mgxDATSdgJ3eYSj7ukYeN6QNr7gofUa3Tk'\n                toCounterPartyAddress: '0x342800907eE13A0c7Bd9d6ebA13A417ba79c5b0b'\n                orderExpiration: 1562380000\n                minConfirmations: 3\n  /swap/order/{orderId}:\n    parameters:\n    - in: path\n      name: orderId\n      schema:\n        type: string\n        format: uuid\n      required: true\n      description: ID of the Order\n    post:\n      tags:\n      - swap\n      summary: Update order with swap details\n      operationId: updateOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrderRequest'\n            examples:\n              testing:\n                summary: BTC_ETH\n                value:\n                  amount: 0.01\n                  fromAddress: 'mgxDATSdgJ3eYSj7ukYeN6QNr7gofUa3Tk'\n                  toAddress: '0x342800907eE13A0c7Bd9d6ebA13A417ba79c5b0b'\n                  fundHash: '39eaf9d29d118478187ce164a5baf9429dd805ef5e4c5f4387719207295a90d0'\n                  secretHash: '16d54b643a30110ec13b4122231a0981dae0c3f8e94642222d85d98179e1b5a8'\n                  swapExpiration: 1562386069\n      responses:\n        200:\n          description: Order created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        404:\n          description: Order not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderError'\n              example:\n                error: Order not found\n    get:\n      tags:\n      - swap\n      summary: Get order details\n      operationId: getOrder\n      responses:\n        200:\n          description: Order\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        404:\n          description: Order not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrderError'\n              example:\n                error: Order not found\ncomponents:\n  schemas:\n    Market:\n        type: object\n        properties:\n          from:\n            type: string\n            description: from currency\n          to:\n            type: string\n            description: to currency\n          estimatedRate:\n            type: number\n            format: float\n            description: The rate of the market\n          min:\n            type: number\n            format: float\n            description: The minimum amount of currency1 that can be traded\n          max:\n            type: number\n            format: float\n            description: The maximum amount of currency1 that can be traded\n        example:\n          from: BTC\n          to: ETH\n          estimatedRate: 38.37\n          min: 0.01\n          max: 1.6\n    OrderRequest:\n      type: object\n      properties:\n        from:\n          type: string\n          description: from currency\n        to:\n          type: string\n          description: to currency\n        amount:\n          type: number\n          description: Amount in from currency\n    Order:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        from:\n          type: string\n          description: from currency\n        to:\n          type: string\n          description: to currency\n        rate:\n          type: string\n          description: from currency\n        fromCounterPartyAddress:\n          type: string\n          description: Agent's from currency address\n        toCounterPartyAddress:\n          type: string\n          description: Agent's to currency address\n        orderExpiration:\n          type: number\n          description: When the agent will drop the swap request\n        minConfirmations:\n          type: integer\n          description: Minimum number of confirmations the agent will accept to proceed with the swap\n        status:\n          type: string\n          description: Order Status\n          enum:\n          - QUOTE\n          - PENDING\n          - CONFIRMED\n          - CLAIMED\n          - REFUNDED\n          - CANCELLED\n          - REFUNDED\n        amount:\n          type: number\n          format: float\n        fromAddress:\n          type: string\n          description: from currency address\n        toAddress:\n          type: string\n          description: to currency address\n        fundHash:\n          type: string\n          description: Swap funding transaction\n        secretHash:\n          type: string\n          description: Swap secret hash\n        swapExpiration:\n          type: number\n          description: Swap expiration timestamp in seconds\n      example:\n        id: eae4d76c-3ba2-465d-930b-324fcbe17d95\n        from: BTC\n        to: ETH\n        rate: 38.7\n        fromCounterPartyAddress: 'mgxDATSdgJ3eYSj7ukYeN6QNr7gofUa3Tk'\n        toCounterPartyAddress: '0x342800907eE13A0c7Bd9d6ebA13A417ba79c5b0b'\n        orderExpiration: 1562380000\n        minConfirmations: 3\n        status: QUOTE\n        amount: 0.01\n        fromAddress: 'mgxDATSdgJ3eYSj7ukYeN6QNr7gofUa3Tk'\n        toAddress: '0x342800907eE13A0c7Bd9d6ebA13A417ba79c5b0b'\n        fundHash: '39eaf9d29d118478187ce164a5baf9429dd805ef5e4c5f4387719207295a90d0'\n        secretHash: '16d54b643a30110ec13b4122231a0981dae0c3f8e94642222d85d98179e1b5a8'\n        swapExpiration: 1562386069\n    OrderError:\n      type: object\n      properties:\n        error:\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: paths: /swap/order: post: operation \"createOrder\": responses: 200: content: \"application/json\": schema: parse schema: resolve \"#/components/schemas/Order\": parse schema: property \"status\": parse enum values: duplicate enum value: 'REFUNDED'"
}