{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/medusajs/medusa"
		},
		"file": {
			"name": "admin-spec3.yaml",
			"size": 0,
			"path": "docs/api/admin-spec3.yaml",
			"byteSize": 767227,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Medusa Admin API\n  description: \u003e\n    API reference for Medusa's Admin endpoints. All endpoints are prefixed with\n    `/admin`.\n\n\n    ## Authentication\n\n\n    There are two ways to send authenticated requests to the Medusa server:\n    Using a user's API token, or using a Cookie Session ID.\n\n\n    \u003c!-- ReDoc-Inject: \u003cSecurityDefinitions\u003e --\u003e\n  license:\n    name: MIT\n    url: 'https://github.com/medusajs/medusa/blob/master/LICENSE'\ntags:\n  - name: Auth\n    description: \u003e-\n      Auth endpoints that allow authorization of admin Users and manages their\n      sessions.\n  - name: App\n    description: App endpoints that allow handling apps in Medusa.\n    x-resourceId: OAuth\n  - name: Batch Job\n    description: Batch Job endpoints that allow handling batch jobs in Medusa.\n    x-resourceId: batch_job\n  - name: Claim\n    description: Claim endpoints that allow handling claims in Medusa.\n    x-resourceId: claim_order\n  - name: Collection\n    description: Collection endpoints that allow handling collections in Medusa.\n    x-resourceId: product_collection\n  - name: Customer\n    description: Customer endpoints that allow handling customers in Medusa.\n    x-resourceId: customer\n  - name: Customer Group\n    description: Customer Group endpoints that allow handling customer groups in Medusa.\n    x-resourceId: customer_group\n  - name: Discount\n    description: Discount endpoints that allow handling discounts in Medusa.\n    x-resourceId: discount\n  - name: Discount Condition\n    description: \u003e-\n      Discount Condition endpoints that allow handling discount conditions in\n      Medusa.\n    x-resourceId: discount_condition\n  - name: Draft Order\n    description: Draft Order endpoints that allow handling draft orders in Medusa.\n    x-resourceId: draft-order\n  - name: Gift Card\n    description: Gift Card endpoints that allow handling gift cards in Medusa.\n    x-resourceId: gift_card\n  - name: Invite\n    description: Invite endpoints that allow handling invites in Medusa.\n    x-resourceId: invite\n  - name: Note\n    description: Note endpoints that allow handling notes in Medusa.\n    x-resourceId: note\n  - name: Notification\n    description: Notification endpoints that allow handling notifications in Medusa.\n    x-resourceId: notification\n  - name: Order\n    description: Order endpoints that allow handling orders in Medusa.\n    x-resourceId: order\n  - name: Price List\n    description: Price List endpoints that allow handling price lists in Medusa.\n    x-resourceId: price_list\n  - name: Product\n    description: Product endpoints that allow handling products in Medusa.\n    x-resourceId: product\n  - name: Product Tag\n    description: Product Tag endpoints that allow handling product tags in Medusa.\n    x-resourceId: product_tag\n  - name: Product Type\n    description: Product Types endpoints that allow handling product types in Medusa.\n    x-resourceId: product_type\n  - name: Product Variant\n    description: Product Variant endpoints that allow handling product variants in Medusa.\n    x-resourceId: product_variant\n  - name: Region\n    description: Region endpoints that allow handling regions in Medusa.\n    x-resourceId: region\n  - name: Return Reason\n    description: Return Reason endpoints that allow handling return reasons in Medusa.\n    x-resourceId: return_reason\n  - name: Return\n    description: Return endpoints that allow handling returns in Medusa.\n    x-resourceId: return\n  - name: Sales Channel\n    description: Sales Channel endpoints that allow handling sales channels in Medusa.\n    x-resourceId: sales_channel\n  - name: Shipping Option\n    description: Shipping Option endpoints that allow handling shipping options in Medusa.\n    x-resourceId: shipping_option\n  - name: Shipping Profile\n    description: \u003e-\n      Shipping Profile endpoints that allow handling shipping profiles in\n      Medusa.\n    x-resourceId: shipping_profile\n  - name: Store\n    description: Store endpoints that allow handling stores in Medusa.\n    x-resourceId: store\n  - name: Swap\n    description: Swap endpoints that allow handling swaps in Medusa.\n    x-resourceId: swap\n  - name: Tax Rate\n    description: Tax Rate endpoints that allow handling tax rates in Medusa.\n    x-resourceId: tax_rate\n  - name: Upload\n    description: Upload endpoints that allow handling uploads in Medusa.\n  - name: User\n    description: User endpoints that allow handling users in Medusa.\n    x-resourceId: user\nservers:\n  - url: 'https://api.medusa-commerce.com/admin'\npaths:\n  /apps/authorizations:\n    post:\n      operationId: PostApps\n      summary: Generate Token for App\n      description: Generates a token for an application.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - application_name\n                - state\n                - code\n              properties:\n                application_name:\n                  type: string\n                  description: Name of the application for the token to be generated for.\n                state:\n                  type: string\n                  description: State of the application.\n                code:\n                  type: string\n                  description: The code for the generated token.\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/apps/authorizations' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"application_name\": \"example\",\n                \"state\": \"ready\",\n                \"code\": \"token\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - App\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  apps:\n                    $ref: '#/components/schemas/OAuth'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /apps:\n    get:\n      operationId: GetApps\n      summary: List Applications\n      description: Retrieve a list of applications.\n      x-authenticated: true\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request GET 'https://medusa-url.com/admin/apps' \\\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - App\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  apps:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/OAuth'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /auth:\n    post:\n      operationId: PostAuth\n      summary: User Login\n      x-authenticated: false\n      description: Logs a User in and authorizes them to manage Store settings.\n      parameters: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - password\n              properties:\n                email:\n                  type: string\n                  description: The User's email.\n                password:\n                  type: string\n                  description: The User's password.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            medusa.admin.auth.createSession({\n              email: 'user@example.com',\n              password: 'supersecret'\n            }).then((({ user }) =\u003e {\n              console.log(user.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request POST 'https://medusa-url.com/admin/auth' \\\n            --header 'Content-Type: application/json' \\\n            --data-raw '{\n              \"email\": \"user@example.com\",\n              \"password\": \"supersecret\"\n            }'\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  user:\n                    $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/incorrect_credentials'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteAuth\n      summary: User Logout\n      x-authenticated: true\n      description: Deletes the current session for the logged in user.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.auth.deleteSession()\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE 'https://medusa-url.com/admin/auth'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetAuth\n      summary: Get Current User\n      x-authenticated: true\n      description: Gets the currently logged in User.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.auth.getSession()\n\n            .then(({ user }) =\u003e {\n              console.log(user.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request GET 'https://medusa-url.com/admin/auth' \\\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Auth\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  user:\n                    $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/batch-jobs/{id}/cancel':\n    post:\n      operationId: PostBatchJobsBatchJobCancel\n      summary: Cancel a Batch Job\n      description: Marks a batch job as canceled\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the batch job.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.batchJobs.cancel(batch_job_id)\n\n            .then(({ batch_job }) =\u003e {\n              console.log(batch_job.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/batch-jobs/{id}/cancel' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Batch Job\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  batch_job:\n                    $ref: '#/components/schemas/batch_job'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/batch-jobs/{id}/confirm':\n    post:\n      operationId: PostBatchJobsBatchJobConfirmProcessing\n      summary: Confirm a Batch Job\n      description: Confirms that a previously requested batch job should be executed.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the batch job.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.batchJobs.confirm(batch_job_id)\n\n            .then(({ batch_job }) =\u003e {\n              console.log(batch_job.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/batch-jobs/{id}/confirm' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Batch Job\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  batch_job:\n                    $ref: '#/components/schemas/batch_job'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /batch-jobs:\n    post:\n      operationId: PostBatchJobs\n      summary: Create a Batch Job\n      description: Creates a Batch Job.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - type\n                - context\n              properties:\n                type:\n                  type: string\n                  description: The type of batch job to start.\n                  example: product-export\n                context:\n                  type: object\n                  description: \u003e-\n                    Additional infomration regarding the batch to be used for\n                    processing.\n                  example:\n                    shape:\n                      prices:\n                        - region: null\n                          currency_code: eur\n                      dynamicImageColumnCount: 4\n                      dynamicOptionColumnCount: 2\n                    list_config:\n                      skip: 0\n                      take: 50\n                      order:\n                        created_at: DESC\n                      relations:\n                        - variants\n                        - variant.prices\n                        - images\n                dry_run:\n                  type: boolean\n                  description: \u003e-\n                    Set a batch job in dry_run mode to get some information on\n                    what will be done without applying any modifications.\n                  default: false\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.batchJobs.create({\n              type: 'product-export',\n              context: {},\n              dry_run: false\n            }).then((({ batch_job }) =\u003e {\n              console.log(batch_job.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/batch-jobs' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --data-raw '{\n                \"type\": \"product-export\",\n                \"context\": { }\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Batch Job\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  batch_job:\n                    $ref: '#/components/schemas/batch_job'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetBatchJobs\n      summary: List Batch Jobs\n      description: Retrieve a list of Batch Jobs.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          description: The number of batch jobs to return.\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: offset\n          description: The number of batch jobs to skip before results.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: id\n          style: form\n          explode: false\n          description: Filter by the batch ID\n          schema:\n            oneOf:\n              - type: string\n                description: batch job ID\n              - type: array\n                description: multiple batch job IDs\n                items:\n                  type: string\n        - in: query\n          name: type\n          style: form\n          explode: false\n          description: Filter by the batch type\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: confirmed_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was confirmed, i.e.\n            less than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: pre_processed_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was pre processed,\n            i.e. less than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: completed_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was completed, i.e.\n            less than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: failed_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was failed, i.e. less\n            than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: canceled_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was canceled, i.e.\n            less than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: order\n          description: Field used to order retrieved batch jobs\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each order of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each order of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was created, i.e.\n            less than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          style: form\n          explode: false\n          description: \u003e-\n            Date comparison for when resulting collections was updated, i.e.\n            less than, greater than etc.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.batchJobs.list()\n\n            .then(({ batch_jobs, limit, offset, count }) =\u003e {\n              console.log(batch_jobs.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/batch-jobs' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Batch Job\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  batch_jobs:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/batch_job'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/batch-jobs/{id}':\n    get:\n      operationId: GetBatchJobsBatchJob\n      summary: Get a Batch Job\n      description: Retrieves a Batch Job.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Batch Job\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.batchJobs.retrieve(batch_job_id)\n\n            .then(({ batch_job }) =\u003e {\n              console.log(batch_job.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/batch-jobs/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Batch Job\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  batch_job:\n                    $ref: '#/components/schemas/batch_job'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/collections/{id}/products/batch':\n    post:\n      operationId: PostProductsToCollection\n      summary: Update Products\n      description: Updates products associated with a Product Collection\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Collection.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - product_ids\n              properties:\n                product_ids:\n                  description: An array of Product IDs to add to the Product Collection.\n                  type: array\n                  items:\n                    description: The ID of a Product to add to the Product Collection.\n                    type: string\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/collections/{id}/products/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"product_ids\": [\n                    \"prod_01G1G5V2MBA328390B5AXJ610F\"\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  collection:\n                    $ref: '#/components/schemas/product_collection'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteProductsFromCollection\n      summary: Remove Product\n      description: Removes products associated with a Product Collection\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Collection.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - product_ids\n              properties:\n                product_ids:\n                  description: \u003e-\n                    An array of Product IDs to remove from the Product\n                    Collection.\n                  type: array\n                  items:\n                    description: The ID of a Product to add to the Product Collection.\n                    type: string\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/collections/{id}/products/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"product_ids\": [\n                    \"prod_01G1G5V2MBA328390B5AXJ610F\"\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the collection\n                  object:\n                    type: string\n                    description: The type of object the removal was executed on\n                    default: product-collection\n                  removed_products:\n                    description: The IDs of the products removed from the collection\n                    type: array\n                    items:\n                      description: The ID of a Product to add to the Product Collection.\n                      type: string\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /collections:\n    post:\n      operationId: PostCollections\n      summary: Create a Collection\n      description: Creates a Product Collection.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - title\n              properties:\n                title:\n                  type: string\n                  description: The title to identify the Collection by.\n                handle:\n                  type: string\n                  description: \u003e-\n                    An optional handle to be used in slugs, if none is provided\n                    we will kebab-case the title.\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.collections.create({\n              title: 'New Collection'\n            })\n\n            .then(({ collection }) =\u003e {\n              console.log(collection.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/collections' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"New Collection\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  collection:\n                    $ref: '#/components/schemas/product_collection'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetCollections\n      summary: List Collections\n      description: Retrieve a list of Product Collection.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          description: The number of collections to return.\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: offset\n          description: The number of collections to skip before the results.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: title\n          description: The title of collections to return.\n          schema:\n            type: string\n        - in: query\n          name: handle\n          description: The handle of collections to return.\n          schema:\n            type: string\n        - in: query\n          name: q\n          description: a search term to search titles and handles.\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting collections were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting collections were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: deleted_at\n          description: Date comparison for when resulting collections were deleted.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.collections.list()\n\n            .then(({ collections, limit, offset, count }) =\u003e {\n              console.log(collections.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/collections' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  collections:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/product_collection'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/collections/{id}':\n    delete:\n      operationId: DeleteCollectionsCollection\n      summary: Delete a Collection\n      description: Deletes a Product Collection.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Collection.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.collections.delete(collection_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/collections/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Collection\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: product-collection\n                  deleted:\n                    type: boolean\n                    description: Whether the collection was deleted successfully or not.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetCollectionsCollection\n      summary: Get a Collection\n      description: Retrieves a Product Collection.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product Collection\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.collections.retrieve(collection_id)\n\n            .then(({ collection }) =\u003e {\n              console.log(collection.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/collections/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  collection:\n                    $ref: '#/components/schemas/product_collection'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostCollectionsCollection\n      summary: Update a Collection\n      description: Updates a Product Collection.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Collection.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                title:\n                  type: string\n                  description: The title to identify the Collection by.\n                handle:\n                  type: string\n                  description: \u003e-\n                    An optional handle to be used in slugs, if none is provided\n                    we will kebab-case the title.\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.collections.update(collection_id, {\n              title: 'New Collection'\n            })\n\n            .then(({ collection }) =\u003e {\n              console.log(collection.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/collections/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"New Collection\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Collection\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  collection:\n                    $ref: '#/components/schemas/product_collection'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /currencies:\n    get:\n      operationId: GetCurrencies\n      summary: List Currency\n      description: Retrieves a list of Currency\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: code\n          description: Code of the currency to search for.\n          schema:\n            type: string\n        - in: query\n          name: includes_tax\n          description: Search for tax inclusive currencies.\n          schema:\n            type: boolean\n        - in: query\n          name: order\n          description: to retrieve products in.\n          schema:\n            type: string\n        - in: query\n          name: offset\n          description: How many products to skip in the result.\n          schema:\n            type: string\n        - in: query\n          name: limit\n          description: Limit the number of products returned.\n          schema:\n            type: string\n      tags:\n        - Currency\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  count:\n                    description: The number of Currency.\n                    type: integer\n                  offset:\n                    description: The offset of the Currency query.\n                    type: integer\n                  limit:\n                    description: The limit of the currency query.\n                    type: integer\n                  currencies:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/currency'\n  '/currencies/{code}':\n    post:\n      operationId: PostCurrenciesCurrency\n      summary: Update a Currency\n      description: Update a Currency\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: code\n          required: true\n          description: The code of the Currency.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                includes_tax:\n                  type: boolean\n                  description: '[EXPERIMENTAL] Tax included in prices of currency.'\n      tags:\n        - Currency\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  currency:\n                    $ref: '#/components/schemas/currency'\n  '/customer-groups/{id}/customers/batch':\n    post:\n      operationId: PostCustomerGroupsGroupCustomersBatch\n      summary: Add Customers\n      description: 'Adds a list of customers, represented by id''s, to a customer group.'\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the customer group.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - customer_ids\n              properties:\n                customer_ids:\n                  description: The ids of the customers to add\n                  type: array\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: ID of the customer\n                        type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.addCustomers(customer_group_id, {\n              customer_ids: [\n                {\n                  id: customer_id\n                }\n              ]\n            })\n\n            .then(({ customer_group }) =\u003e {\n              console.log(customer_group.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/customer-groups/{id}/customers/batch'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"customer_ids\": [\n                    {\n                        \"id\": \"cus_01G2Q4BS9GAHDBMDEN4ZQZCJB2\"\n                    }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer_group:\n                    $ref: '#/components/schemas/customer_group'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteCustomerGroupsGroupCustomerBatch\n      summary: Remove Customers\n      description: 'Removes a list of customers, represented by id''s, from a customer group.'\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the customer group.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - customer_ids\n              properties:\n                customer_ids:\n                  description: The ids of the customers to remove\n                  type: array\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: ID of the customer\n                        type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.removeCustomers(customer_group_id, {\n              customer_ids: [\n                {\n                  id: customer_id\n                }\n              ]\n            })\n\n            .then(({ customer_group }) =\u003e {\n              console.log(customer_group.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/customer-groups/{id}/customers/batch'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"customer_ids\": [\n                    {\n                        \"id\": \"cus_01G2Q4BS9GAHDBMDEN4ZQZCJB2\"\n                    }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer_group:\n                    $ref: '#/components/schemas/customer_group'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /customer-groups:\n    post:\n      operationId: PostCustomerGroups\n      summary: Create a Customer Group\n      description: Creates a CustomerGroup.\n      x-authenticated: true\n      parameters: []\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.create({\n              name: 'VIP'\n            })\n\n            .then(({ customer_group }) =\u003e {\n              console.log(customer_group.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/customer-groups' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"VIP\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer_group:\n                    $ref: '#/components/schemas/customer_group'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n              properties:\n                name:\n                  type: string\n                  description: Name of the customer group\n                metadata:\n                  type: object\n                  description: Metadata for the customer.\n    get:\n      operationId: GetCustomerGroups\n      summary: List Customer Groups\n      description: Retrieve a list of customer groups.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: q\n          description: Query used for searching customer group names.\n          schema:\n            type: string\n        - in: query\n          name: offset\n          description: How many groups to skip in the result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: order\n          description: the field used to order the customer groups.\n          schema:\n            type: string\n        - in: query\n          name: id\n          style: form\n          explode: false\n          description: Filter by the customer group ID\n          schema:\n            oneOf:\n              - type: string\n                description: customer group ID\n              - type: array\n                description: multiple customer group IDs\n                items:\n                  type: string\n              - type: object\n                properties:\n                  lt:\n                    type: string\n                    description: filter by IDs less than this ID\n                  gt:\n                    type: string\n                    description: filter by IDs greater than this ID\n                  lte:\n                    type: string\n                    description: filter by IDs less than or equal to this ID\n                  gte:\n                    type: string\n                    description: filter by IDs greater than or equal to this ID\n        - in: query\n          name: name\n          style: form\n          explode: false\n          description: Filter by the customer group name\n          schema:\n            type: array\n            description: multiple customer group names\n            items:\n              type: string\n              description: customer group name\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting customer groups were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting customer groups were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: limit\n          description: Limit the number of customer groups returned.\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each customer\n            groups of the result.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.list()\n\n            .then(({ customer_groups, limit, offset, count }) =\u003e {\n              console.log(customer_groups.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/customer-groups' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer_groups:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/customer_group'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/customer-groups/{id}':\n    delete:\n      operationId: DeleteCustomerGroupsCustomerGroup\n      summary: Delete a Customer Group\n      description: Deletes a CustomerGroup.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Customer Group\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.delete(customer_group_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/customer-groups/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted customer group.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: customer_group\n                  deleted:\n                    type: boolean\n                    description: \u003e-\n                      Whether the customer group was deleted successfully or\n                      not.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetCustomerGroupsGroup\n      summary: Get a Customer Group\n      description: Retrieves a Customer Group.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Customer Group.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in the customer\n            group.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in the customer\n            group.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.retrieve(customer_group_id)\n\n            .then(({ customer_group }) =\u003e {\n              console.log(customer_group.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/customer-groups/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer_group:\n                    $ref: '#/components/schemas/customer_group'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostCustomerGroupsGroup\n      summary: Update a Customer Group\n      description: Update a CustomerGroup.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the customer group.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: Name of the customer group\n                  type: string\n                metadata:\n                  description: Metadata for the customer.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.update(customer_group_id, {\n              name: 'VIP'\n            })\n\n            .then(({ customer_group }) =\u003e {\n              console.log(customer_group.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/customer-groups/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"VIP\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer_group:\n                    $ref: '#/components/schemas/customer_group'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/customer-groups/{id}/customers':\n    get:\n      operationId: GetCustomerGroupsGroupCustomers\n      summary: List Customers\n      description: Retrieves a list of customers in a customer group\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the customer group.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customerGroups.listCustomers(customer_group_id)\n\n            .then(({ customers }) =\u003e {\n              console.log(customers.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/customer-groups/{id}/customers' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer Group\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/customer'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /customers:\n    post:\n      operationId: PostCustomers\n      summary: Create a Customer\n      description: Creates a Customer.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n                - first_name\n                - last_name\n                - password\n              properties:\n                email:\n                  type: string\n                  description: The customer's email.\n                  format: email\n                first_name:\n                  type: string\n                  description: The customer's first name.\n                last_name:\n                  type: string\n                  description: The customer's last name.\n                password:\n                  type: string\n                  description: The customer's password.\n                  format: password\n                phone:\n                  type: string\n                  description: The customer's phone number.\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      tags:\n        - Customer\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customers.create({\n              email: 'user@example.com',\n              first_name: 'Caterina',\n              last_name: 'Yost',\n              password: 'supersecret'\n            })\n\n            .then(({ customer }) =\u003e {\n              console.log(customer.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/customers' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"email\": \"user@example.com\",\n                \"first_name\": \"Caterina\",\n                \"last_name\": \"Yost\",\n                \"password\": \"supersecret\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      responses:\n        '201':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer:\n                    $ref: '#/components/schemas/customer'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetCustomers\n      summary: List Customers\n      description: Retrieves a list of Customers.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          description: The number of items to return.\n          schema:\n            type: integer\n            default: 50\n        - in: query\n          name: offset\n          description: The items to skip before result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: expand\n          description: (Comma separated) Which fields should be expanded in each customer.\n          schema:\n            type: string\n        - in: query\n          name: q\n          description: 'a search term to search email, first_name, and last_name.'\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customers.list()\n\n            .then(({ customers, limit, offset, count }) =\u003e {\n              console.log(customers.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/customers' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/customer'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/customers/{id}':\n    get:\n      operationId: GetCustomersCustomer\n      summary: Get a Customer\n      description: Retrieves a Customer.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Customer.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: (Comma separated) Which fields should be expanded in the customer.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: (Comma separated) Which fields should be included in the customer.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customers.retrieve(customer_id)\n\n            .then(({ customer }) =\u003e {\n              console.log(customer.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/customers/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer:\n                    $ref: '#/components/schemas/customer'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostCustomersCustomer\n      summary: Update a Customer\n      description: Updates a Customer.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Customer.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: (Comma separated) Which fields should be expanded in each customer.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: (Comma separated) Which fields should be retrieved in each customer.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  type: string\n                  description: The Customer's email.\n                  format: email\n                first_name:\n                  type: string\n                  description: The Customer's first name.\n                last_name:\n                  type: string\n                  description: The Customer's last name.\n                phone:\n                  type: string\n                  description: The Customer's phone number.\n                password:\n                  type: string\n                  description: The Customer's password.\n                  format: password\n                groups:\n                  type: array\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: The ID of a customer group\n                        type: string\n                  description: A list of customer groups to which the customer belongs.\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.customers.update(customer_id, {\n              first_name: 'Dolly'\n            })\n\n            .then(({ customer }) =\u003e {\n              console.log(customer.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/customers/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"first_name\": \"Dolly\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Customer\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  customer:\n                    $ref: '#/components/schemas/customer'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/discounts/{id}/regions/{region_id}':\n    post:\n      operationId: PostDiscountsDiscountRegionsRegion\n      summary: Add Region\n      description: Adds a Region to the list of Regions that a Discount can be used in.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount.\n          schema:\n            type: string\n        - in: path\n          name: region_id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.addRegion(discount_id, region_id)\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/discounts/{id}/regions/{region_id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteDiscountsDiscountRegionsRegion\n      summary: Remove Region\n      x-authenticated: true\n      description: \u003e-\n        Removes a Region from the list of Regions that a Discount can be used\n        in.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount.\n          schema:\n            type: string\n        - in: path\n          name: region_id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.removeRegion(discount_id, region_id)\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/discounts/{id}/regions/{region_id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/discounts/{discount_id}/conditions':\n    post:\n      operationId: PostDiscountsDiscountConditions\n      summary: Create a Condition\n      description: \u003e-\n        Creates a DiscountCondition. Only one of `products`, `product_types`,\n        `product_collections`, `product_tags`, and `customer_groups` should be\n        provided.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: discount_id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each product of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each product of\n            the result.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - operator\n              properties:\n                operator:\n                  description: Operator of the condition\n                  type: string\n                  enum:\n                    - in\n                    - not_in\n                products:\n                  type: array\n                  description: list of product IDs if the condition is applied on products.\n                  items:\n                    type: string\n                product_types:\n                  type: array\n                  description: \u003e-\n                    list of product type IDs if the condition is applied on\n                    product types.\n                  items:\n                    type: string\n                product_collections:\n                  type: array\n                  description: \u003e-\n                    list of product collection IDs if the condition is applied\n                    on product collections.\n                  items:\n                    type: string\n                product_tags:\n                  type: array\n                  description: \u003e-\n                    list of product tag IDs if the condition is applied on\n                    product tags.\n                  items:\n                    type: string\n                customer_groups:\n                  type: array\n                  description: \u003e-\n                    list of customer group IDs if the condition is applied on\n                    customer groups.\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            import { DiscountConditionOperator } from \"@medusajs/medusa\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.createCondition(discount_id, {\n              operator: DiscountConditionOperator.IN\n            })\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/discounts/{id}/conditions' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"operator\": \"in\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount Condition\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /discounts:\n    post:\n      operationId: PostDiscounts\n      summary: Creates a Discount\n      x-authenticated: true\n      description: \u003e-\n        Creates a Discount with a given set of rules that define how the\n        Discount behaves.\n      parameters:\n        - in: query\n          name: expand\n          description: (Comma separated) Which fields should be expanded in each customer.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: (Comma separated) Which fields should be retrieved in each customer.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - code\n                - rule\n              properties:\n                code:\n                  type: string\n                  description: A unique code that will be used to redeem the Discount\n                is_dynamic:\n                  type: boolean\n                  description: \u003e-\n                    Whether the Discount should have multiple instances of\n                    itself, each with a different code. This can be useful for\n                    automatically generated codes that all have to follow a\n                    common set of rules.\n                  default: false\n                rule:\n                  description: The Discount Rule that defines how Discounts are calculated\n                  type: object\n                  required:\n                    - type\n                    - value\n                    - allocation\n                  properties:\n                    description:\n                      type: string\n                      description: A short description of the discount\n                    type:\n                      type: string\n                      description: \u003e-\n                        The type of the Discount, can be `fixed` for discounts\n                        that reduce the price by a fixed amount, `percentage`\n                        for percentage reductions or `free_shipping` for\n                        shipping vouchers.\n                      enum:\n                        - fixed\n                        - percentage\n                        - free_shipping\n                    value:\n                      type: number\n                      description: \u003e-\n                        The value that the discount represents; this will depend\n                        on the type of the discount\n                    allocation:\n                      type: string\n                      description: The scope that the discount should apply to.\n                      enum:\n                        - total\n                        - item\n                    conditions:\n                      type: array\n                      description: \u003e-\n                        A set of conditions that can be used to limit when  the\n                        discount can be used. Only one of `products`,\n                        `product_types`, `product_collections`, `product_tags`,\n                        and `customer_groups` should be provided.\n                      items:\n                        type: object\n                        required:\n                          - operator\n                        properties:\n                          operator:\n                            type: string\n                            description: Operator of the condition\n                            enum:\n                              - in\n                              - not_in\n                          products:\n                            type: array\n                            description: \u003e-\n                              list of product IDs if the condition is applied on\n                              products.\n                            items:\n                              type: string\n                          product_types:\n                            type: array\n                            description: \u003e-\n                              list of product type IDs if the condition is\n                              applied on product types.\n                            items:\n                              type: string\n                          product_collections:\n                            type: array\n                            description: \u003e-\n                              list of product collection IDs if the condition is\n                              applied on product collections.\n                            items:\n                              type: string\n                          product_tags:\n                            type: array\n                            description: \u003e-\n                              list of product tag IDs if the condition is\n                              applied on product tags.\n                            items:\n                              type: string\n                          customer_groups:\n                            type: array\n                            description: \u003e-\n                              list of customer group IDs if the condition is\n                              applied on customer groups.\n                            items:\n                              type: string\n                is_disabled:\n                  type: boolean\n                  description: \u003e-\n                    Whether the Discount code is disabled on creation. You will\n                    have to enable it later to make it available to Customers.\n                  default: false\n                starts_at:\n                  type: string\n                  format: date-time\n                  description: The time at which the Discount should be available.\n                ends_at:\n                  type: string\n                  format: date-time\n                  description: \u003e-\n                    The time at which the Discount should no longer be\n                    available.\n                valid_duration:\n                  type: string\n                  description: Duration the discount runs between\n                  example: P3Y6M4DT12H30M5S\n                regions:\n                  description: \u003e-\n                    A list of Region ids representing the Regions in which the\n                    Discount can be used.\n                  type: array\n                  items:\n                    type: string\n                usage_limit:\n                  type: number\n                  description: Maximum times the discount can be used\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            import { AllocationType, DiscountRuleType } from \"@medusajs/medusa\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.create({\n              code: 'TEST',\n              rule: {\n                type: DiscountRuleType.FIXED,\n                value: 10,\n                allocation: AllocationType.ITEM\n              },\n              is_dynamic: false,\n              is_disabled: false\n            })\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/discounts' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"code\": \"TEST\",\n                \"rule\": {\n                   \"type\": \"fixed\",\n                   \"value\": 10,\n                   \"allocation\": \"item\"\n                }\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetDiscounts\n      summary: List Discounts\n      x-authenticated: true\n      description: Retrieves a list of Discounts\n      parameters:\n        - in: query\n          name: q\n          description: Search query applied on the code field.\n          schema:\n            type: string\n        - in: query\n          name: rule\n          description: Discount Rules filters to apply on the search\n          schema:\n            type: object\n            properties:\n              type:\n                type: string\n                enum:\n                  - fixed\n                  - percentage\n                  - free_shipping\n                description: \u003e-\n                  The type of the Discount, can be `fixed` for discounts that\n                  reduce the price by a fixed amount, `percentage` for\n                  percentage reductions or `free_shipping` for shipping\n                  vouchers.\n              allocation:\n                type: string\n                enum:\n                  - total\n                  - item\n                description: \u003e-\n                  The value that the discount represents; this will depend on\n                  the type of the discount\n        - in: query\n          name: is_dynamic\n          description: Return only dynamic discounts.\n          schema:\n            type: boolean\n        - in: query\n          name: is_disabled\n          description: Return only disabled discounts.\n          schema:\n            type: boolean\n        - in: query\n          name: limit\n          description: The number of items in the response\n          schema:\n            type: number\n            default: '20'\n        - in: query\n          name: offset\n          description: The offset of items in response\n          schema:\n            type: number\n            default: '0'\n        - in: query\n          name: expand\n          description: Comma separated list of relations to include in the results.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.list()\n\n            .then(({ discounts, limit, offset, count }) =\u003e {\n              console.log(discounts.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/discounts' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discounts:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/discount'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/discounts/{id}/dynamic-codes':\n    post:\n      operationId: PostDiscountsDiscountDynamicCodes\n      summary: Create a Dynamic Code\n      description: \u003e-\n        Creates a dynamic unique code that can map to a parent Discount. This is\n        useful if you want to automatically generate codes with the same\n        behaviour.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount to create the dynamic code from.\"\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.createDynamicCode(discount_id, {\n              code: 'TEST',\n              usage_limit: 1\n            })\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/discounts/{id}/dynamic-codes' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"code\": \"TEST\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - code\n              properties:\n                code:\n                  type: string\n                  description: The unique code that will be used to redeem the Discount.\n                usage_limit:\n                  type: number\n                  default: '1'\n                  description: amount of times the discount can be applied.\n                metadata:\n                  type: object\n                  description: \u003e-\n                    An optional set of key-value paris to hold additional\n                    information.\n  '/discounts/{discount_id}/conditions/{condition_id}':\n    delete:\n      operationId: DeleteDiscountsDiscountConditionsCondition\n      summary: Delete a Condition\n      description: Deletes a DiscountCondition\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: discount_id\n          required: true\n          description: The ID of the Discount\n          schema:\n            type: string\n        - in: path\n          name: condition_id\n          required: true\n          description: The ID of the DiscountCondition\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: Comma separated list of relations to include in the results.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Comma separated list of fields to include in the results.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.deleteCondition(discount_id, condition_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/discounts/{id}/conditions/{condition_id}'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount Condition\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted DiscountCondition\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: discount-condition\n                  deleted:\n                    type: boolean\n                    description: \u003e-\n                      Whether the discount condition was deleted successfully or\n                      not.\n                    default: true\n                  discount:\n                    description: The Discount to which the condition used to belong\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetDiscountsDiscountConditionsCondition\n      summary: Get a Condition\n      description: Gets a DiscountCondition\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: discount_id\n          required: true\n          description: The ID of the Discount.\n          schema:\n            type: string\n        - in: path\n          name: condition_id\n          required: true\n          description: The ID of the DiscountCondition.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: Comma separated list of relations to include in the results.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Comma separated list of fields to include in the results.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.getCondition(discount_id, condition_id)\n\n            .then(({ discount_condition }) =\u003e {\n              console.log(discount_condition.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/discounts/{id}/conditions/{condition_id}'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount Condition\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount_condition:\n                    $ref: '#/components/schemas/discount_condition'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostDiscountsDiscountConditionsCondition\n      summary: Update a Condition\n      description: \u003e-\n        Updates a DiscountCondition. Only one of `products`, `product_types`,\n        `product_collections`, `product_tags`, and `customer_groups` should be\n        provided.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: discount_id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n        - in: path\n          name: condition_id\n          required: true\n          description: The ID of the DiscountCondition.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each item of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each item of\n            the result.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                products:\n                  type: array\n                  description: list of product IDs if the condition is applied on products.\n                  items:\n                    type: string\n                product_types:\n                  type: array\n                  description: \u003e-\n                    list of product type IDs if the condition is applied on\n                    product types.\n                  items:\n                    type: string\n                product_collections:\n                  type: array\n                  description: \u003e-\n                    list of product collection IDs if the condition is applied\n                    on product collections.\n                  items:\n                    type: string\n                product_tags:\n                  type: array\n                  description: \u003e-\n                    list of product tag IDs if the condition is applied on\n                    product tags.\n                  items:\n                    type: string\n                customer_groups:\n                  type: array\n                  description: \u003e-\n                    list of customer group IDs if the condition is applied on\n                    customer groups.\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.updateCondition(discount_id, condition_id, {\n              products: [\n                product_id\n              ]\n            })\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/discounts/{id}/conditions/{condition}'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"products\": [\n                   \"prod_01G1G5V2MBA328390B5AXJ610F\"\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/discounts/{id}':\n    delete:\n      operationId: DeleteDiscountsDiscount\n      summary: Delete a Discount\n      description: Deletes a Discount.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.delete(discount_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/discounts/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Discount\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: discount\n                  deleted:\n                    type: boolean\n                    description: Whether the discount was deleted successfully or not.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetDiscountsDiscount\n      summary: Get a Discount\n      description: Retrieves a Discount\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: Comma separated list of relations to include in the results.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Comma separated list of fields to include in the results.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.retrieve(discount_id)\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/discounts/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostDiscountsDiscount\n      summary: Update a Discount\n      description: \u003e-\n        Updates a Discount with a given set of rules that define how the\n        Discount behaves.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each item of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each item of\n            the result.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                code:\n                  type: string\n                  description: A unique code that will be used to redeem the Discount\n                rule:\n                  description: The Discount Rule that defines how Discounts are calculated\n                  type: object\n                  required:\n                    - id\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the Rule\n                    description:\n                      type: string\n                      description: A short description of the discount\n                    value:\n                      type: number\n                      description: \u003e-\n                        The value that the discount represents; this will depend\n                        on the type of the discount\n                    allocation:\n                      type: string\n                      description: The scope that the discount should apply to.\n                      enum:\n                        - total\n                        - item\n                    conditions:\n                      type: array\n                      description: \u003e-\n                        A set of conditions that can be used to limit when the\n                        discount can be used. Only one of `products`,\n                        `product_types`, `product_collections`, `product_tags`,\n                        and `customer_groups` should be provided.\n                      items:\n                        type: object\n                        required:\n                          - operator\n                        properties:\n                          id:\n                            type: string\n                            description: The ID of the Rule\n                          operator:\n                            type: string\n                            description: Operator of the condition\n                            enum:\n                              - in\n                              - not_in\n                          products:\n                            type: array\n                            description: \u003e-\n                              list of product IDs if the condition is applied on\n                              products.\n                            items:\n                              type: string\n                          product_types:\n                            type: array\n                            description: \u003e-\n                              list of product type IDs if the condition is\n                              applied on product types.\n                            items:\n                              type: string\n                          product_collections:\n                            type: array\n                            description: \u003e-\n                              list of product collection IDs if the condition is\n                              applied on product collections.\n                            items:\n                              type: string\n                          product_tags:\n                            type: array\n                            description: \u003e-\n                              list of product tag IDs if the condition is\n                              applied on product tags.\n                            items:\n                              type: string\n                          customer_groups:\n                            type: array\n                            description: \u003e-\n                              list of customer group IDs if the condition is\n                              applied on customer groups.\n                            items:\n                              type: string\n                is_disabled:\n                  type: boolean\n                  description: \u003e-\n                    Whether the Discount code is disabled on creation. You will\n                    have to enable it later to make it available to Customers.\n                starts_at:\n                  type: string\n                  format: date-time\n                  description: The time at which the Discount should be available.\n                ends_at:\n                  type: string\n                  format: date-time\n                  description: \u003e-\n                    The time at which the Discount should no longer be\n                    available.\n                valid_duration:\n                  type: string\n                  description: Duration the discount runs between\n                  example: P3Y6M4DT12H30M5S\n                usage_limit:\n                  type: number\n                  description: Maximum times the discount can be used\n                regions:\n                  description: \u003e-\n                    A list of Region ids representing the Regions in which the\n                    Discount can be used.\n                  type: array\n                  items:\n                    type: string\n                metadata:\n                  description: An object containing metadata of the discount\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.update(discount_id, {\n              code: 'TEST'\n            })\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/discounts/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"code\": \"TEST\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/discounts/{id}/dynamic-codes/{code}':\n    delete:\n      operationId: DeleteDiscountsDiscountDynamicCodesCode\n      summary: Delete a Dynamic Code\n      description: Deletes a dynamic code from a Discount.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Discount\n          schema:\n            type: string\n        - in: path\n          name: code\n          required: true\n          description: The ID of the Discount\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.deleteDynamicCode(discount_id, code)\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/discounts/{id}/dynamic-codes/{code}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/discounts/code/{code}':\n    get:\n      operationId: GetDiscountsDiscountCode\n      summary: Get Discount by Code\n      description: Retrieves a Discount by its discount code\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: code\n          required: true\n          description: The code of the Discount\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: Comma separated list of relations to include in the results.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Comma separated list of fields to include in the results.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.discounts.retrieveByCode(code)\n\n            .then(({ discount }) =\u003e {\n              console.log(discount.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/discounts/code/{code}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Discount\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  discount:\n                    $ref: '#/components/schemas/discount'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /draft-orders:\n    post:\n      operationId: PostDraftOrders\n      summary: Create a Draft Order\n      description: Creates a Draft Order\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n                - items\n                - region_id\n                - shipping_methods\n              properties:\n                status:\n                  description: The status of the draft order\n                  type: string\n                  enum:\n                    - open\n                    - completed\n                email:\n                  description: The email of the customer of the draft order\n                  type: string\n                  format: email\n                billing_address:\n                  description: The Address to be used for billing purposes.\n                  $ref: '#/components/schemas/address'\n                shipping_address:\n                  description: The Address to be used for shipping.\n                  $ref: '#/components/schemas/address'\n                items:\n                  description: The Line Items that have been received.\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - quantity\n                    properties:\n                      variant_id:\n                        description: \u003e-\n                          The ID of the Product Variant to generate the Line\n                          Item from.\n                        type: string\n                      unit_price:\n                        description: The potential custom price of the item.\n                        type: integer\n                      title:\n                        description: The potential custom title of the item.\n                        type: string\n                      quantity:\n                        description: The quantity of the Line Item.\n                        type: integer\n                      metadata:\n                        description: \u003e-\n                          The optional key-value map with additional details\n                          about the Line Item.\n                        type: object\n                region_id:\n                  description: The ID of the region for the draft order\n                  type: string\n                discounts:\n                  description: The discounts to add on the draft order\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - code\n                    properties:\n                      code:\n                        description: The code of the discount to apply\n                        type: string\n                customer_id:\n                  description: The ID of the customer to add on the draft order\n                  type: string\n                no_notification_order:\n                  description: \u003e-\n                    An optional flag passed to the resulting order to determine\n                    use of notifications.\n                  type: boolean\n                shipping_methods:\n                  description: The shipping methods for the draft order\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - option_id\n                    properties:\n                      option_id:\n                        description: The ID of the shipping option in use\n                        type: string\n                      data:\n                        description: \u003e-\n                          The optional additional data needed for the shipping\n                          method\n                        type: object\n                      price:\n                        description: The potential custom price of the shipping\n                        type: integer\n                metadata:\n                  description: \u003e-\n                    The optional key-value map with additional details about the\n                    Draft Order.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.create({\n              email: 'user@example.com',\n              region_id,\n              items: [\n                {\n                  quantity: 1\n                }\n              ],\n              shipping_methods: [\n                {\n                  option_id\n                }\n              ],\n            })\n\n            .then(({ draft_order }) =\u003e {\n              console.log(draft_order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/draft-orders' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"email\": \"user@example.com\",\n                \"region_id\": \"{region_id}\"\n                \"items\": [\n                   {\n                     \"quantity\": 1\n                   }\n                ],\n                \"shipping_methods\": [\n                   {\n                     \"option_id\": \"{option_id}\"\n                   }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetDraftOrders\n      summary: List Draft Orders\n      description: Retrieves an list of Draft Orders\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: offset\n          description: The number of items to skip before the results.\n          schema:\n            type: number\n            default: '0'\n        - in: query\n          name: limit\n          description: Limit the number of items returned.\n          schema:\n            type: number\n            default: '50'\n        - in: query\n          name: q\n          description: \u003e-\n            a search term to search emails in carts associated with draft orders\n            and display IDs of draft orders\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.list()\n\n            .then(({ draft_orders, limit, offset, count }) =\u003e {\n              console.log(draft_orders.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/draft-orders' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_orders:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/draft-order'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/draft-orders/{id}/line-items':\n    post:\n      operationId: PostDraftOrdersDraftOrderLineItems\n      summary: Create a Line Item\n      description: Creates a Line Item for the Draft Order\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - quantity\n              properties:\n                variant_id:\n                  description: \u003e-\n                    The ID of the Product Variant to generate the Line Item\n                    from.\n                  type: string\n                unit_price:\n                  description: The potential custom price of the item.\n                  type: integer\n                title:\n                  description: The potential custom title of the item.\n                  type: string\n                  default: Custom item\n                quantity:\n                  description: The quantity of the Line Item.\n                  type: integer\n                metadata:\n                  description: \u003e-\n                    The optional key-value map with additional details about the\n                    Line Item.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.addLineItem(draft_order_id, {\n              quantity: 1\n            })\n\n            .then(({ draft_order }) =\u003e {\n              console.log(draft_order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/draft-orders/{id}/line-items' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"quantity\": 1\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/draft-orders/{id}':\n    delete:\n      operationId: DeleteDraftOrdersDraftOrder\n      summary: Delete a Draft Order\n      description: Deletes a Draft Order\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.delete(draft_order_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/draft-orders/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Draft Order.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: draft-order\n                  deleted:\n                    type: boolean\n                    description: Whether the draft order was deleted successfully or not.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetDraftOrdersDraftOrder\n      summary: Get a Draft Order\n      description: Retrieves a Draft Order.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.retrieve(draft_order_id)\n\n            .then(({ draft_order }) =\u003e {\n              console.log(draft_order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/draft-orders/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/draft-orders/{id}/line-items/{line_id}':\n    delete:\n      operationId: DeleteDraftOrdersDraftOrderLineItemsItem\n      summary: Delete a Line Item\n      description: Removes a Line Item from a Draft Order.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n        - in: path\n          name: line_id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.removeLineItem(draft_order_id, item_id)\n\n            .then(({ draft_order }) =\u003e {\n              console.log(draft_order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/draft-orders/{id}/line-items/{line_id}'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostDraftOrdersDraftOrderLineItemsItem\n      summary: Update a Line Item\n      description: Updates a Line Item for a Draft Order\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n        - in: path\n          name: line_id\n          required: true\n          description: The ID of the Line Item.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                unit_price:\n                  description: The potential custom price of the item.\n                  type: integer\n                title:\n                  description: The potential custom title of the item.\n                  type: string\n                quantity:\n                  description: The quantity of the Line Item.\n                  type: integer\n                metadata:\n                  description: \u003e-\n                    The optional key-value map with additional details about the\n                    Line Item.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.updateLineItem(draft_order_id, line_id, {\n              quantity: 1\n            })\n\n            .then(({ draft_order }) =\u003e {\n              console.log(draft_order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/draft-orders/{id}/line-items/{line_id}'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"quantity\": 1\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/draft-orders/{id}/pay':\n    post:\n      summary: Registers a Payment\n      operationId: PostDraftOrdersDraftOrderRegisterPayment\n      description: Registers a payment for a Draft Order.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The Draft Order id.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.markPaid(draft_order_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/draft-orders/{id}/pay' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/admin/draft-orders/{id}':\n    post:\n      operationId: PostDraftOrdersDraftOrder\n      summary: Update a Draft Order\n      description: Updates a Draft Order.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Draft Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                region_id:\n                  type: string\n                  description: The ID of the Region to create the Draft Order in.\n                country_code:\n                  type: string\n                  description: The 2 character ISO code for the Country.\n                  externalDocs:\n                    url: \u003e-\n                      https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n                    description: See a list of codes.\n                email:\n                  type: string\n                  description: An email to be used on the Draft Order.\n                  format: email\n                billing_address:\n                  description: The Address to be used for billing purposes.\n                  $ref: '#/components/schemas/address'\n                shipping_address:\n                  description: The Address to be used for shipping.\n                  $ref: '#/components/schemas/address'\n                discounts:\n                  description: An array of Discount codes to add to the Draft Order.\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - code\n                    properties:\n                      code:\n                        description: The code that a Discount is identifed by.\n                        type: string\n                no_notification_order:\n                  description: \u003e-\n                    An optional flag passed to the resulting order to determine\n                    use of notifications.\n                  type: boolean\n                customer_id:\n                  description: The ID of the Customer to associate the Draft Order with.\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.draftOrders.update(draft_order_id, {\n              email: \"user@example.com\"\n            })\n\n            .then(({ draft_order }) =\u003e {\n              console.log(draft_order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/draft-orders/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"email\": \"user@example.com\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Draft Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  draft_order:\n                    $ref: '#/components/schemas/draft-order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /gift-cards:\n    post:\n      operationId: PostGiftCards\n      summary: Create a Gift Card\n      description: \u003e-\n        Creates a Gift Card that can redeemed by its unique code. The Gift Card\n        is only valid within 1 region.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - region_id\n              properties:\n                value:\n                  type: integer\n                  description: \u003e-\n                    The value (excluding VAT) that the Gift Card should\n                    represent.\n                is_disabled:\n                  type: boolean\n                  description: \u003e-\n                    Whether the Gift Card is disabled on creation. You will have\n                    to enable it later to make it available to Customers.\n                ends_at:\n                  type: string\n                  format: date-time\n                  description: \u003e-\n                    The time at which the Gift Card should no longer be\n                    available.\n                region_id:\n                  description: The ID of the Region in which the Gift Card can be used.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.giftCards.create({\n              region_id\n            })\n\n            .then(({ gift_card }) =\u003e {\n              console.log(gift_card.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/gift-cards' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"region_id\": \"{region_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Gift Card\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  gift_card:\n                    $ref: '#/components/schemas/gift_card'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetGiftCards\n      summary: List Gift Cards\n      description: Retrieves a list of Gift Cards.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: offset\n          description: The number of items to skip before the results.\n          schema:\n            type: number\n            default: '0'\n        - in: query\n          name: limit\n          description: Limit the number of items returned.\n          schema:\n            type: number\n            default: '50'\n        - in: query\n          name: q\n          description: a search term to search by code or display ID\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.giftCards.list()\n\n            .then(({ gift_cards, limit, offset, count }) =\u003e {\n              console.log(gift_cards.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/gift-cards' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Gift Card\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  gift_cards:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/gift_card'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/gift-cards/{id}':\n    delete:\n      operationId: DeleteGiftCardsGiftCard\n      summary: Delete a Gift Card\n      description: Deletes a Gift Card\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Gift Card to delete.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.giftCards.delete(gift_card_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/gift-cards/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Gift Card\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Gift Card\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: gift-card\n                  deleted:\n                    type: boolean\n                    description: Whether the gift card was deleted successfully or not.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetGiftCardsGiftCard\n      summary: Get a Gift Card\n      description: Retrieves a Gift Card.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Gift Card.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.giftCards.retrieve(gift_card_id)\n\n            .then(({ gift_card }) =\u003e {\n              console.log(gift_card.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/gift-cards/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Gift Card\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  gift_card:\n                    $ref: '#/components/schemas/gift_card'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostGiftCardsGiftCard\n      summary: Update a Gift Card\n      description: \u003e-\n        Update a Gift Card that can redeemed by its unique code. The Gift Card\n        is only valid within 1 region.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Gift Card.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                balance:\n                  type: integer\n                  description: \u003e-\n                    The value (excluding VAT) that the Gift Card should\n                    represent.\n                is_disabled:\n                  type: boolean\n                  description: \u003e-\n                    Whether the Gift Card is disabled on creation. You will have\n                    to enable it later to make it available to Customers.\n                ends_at:\n                  type: string\n                  format: date-time\n                  description: \u003e-\n                    The time at which the Gift Card should no longer be\n                    available.\n                region_id:\n                  description: The ID of the Region in which the Gift Card can be used.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.giftCards.update(gift_card_id, {\n              region_id\n            })\n\n            .then(({ gift_card }) =\u003e {\n              console.log(gift_card.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/gift-cards/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"region_id\": \"{region_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Gift Card\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  gift_card:\n                    $ref: '#/components/schemas/gift_card'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /invites/accept:\n    post:\n      operationId: PostInvitesInviteAccept\n      summary: Accept an Invite\n      description: Accepts an Invite and creates a corresponding user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - token\n                - user\n              properties:\n                token:\n                  description: The invite token provided by the admin.\n                  type: string\n                user:\n                  description: The User to create.\n                  type: object\n                  required:\n                    - first_name\n                    - last_name\n                    - password\n                  properties:\n                    first_name:\n                      type: string\n                      description: the first name of the User\n                    last_name:\n                      type: string\n                      description: the last name of the User\n                    password:\n                      description: The desired password for the User\n                      type: string\n                      format: password\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.invites.accept({\n              token,\n              user: {\n                first_name: 'Brigitte',\n                last_name: 'Collier',\n                password: 'supersecret'\n              }\n            })\n\n            .then(() =\u003e {\n              // successful\n            })\n\n            .catch(() =\u003e {\n              // an error occurred\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/invites/accept' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"token\": \"{token}\",\n                \"user\": {\n                  \"first_name\": \"Brigitte\",\n                  \"last_name\": \"Collier\",\n                  \"password\": \"supersecret\"\n                }\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Invite\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /invites:\n    post:\n      operationId: PostInvites\n      summary: Create an Invite\n      description: Creates an Invite and triggers an 'invite' created event\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - user\n                - role\n              properties:\n                user:\n                  description: The email for the user to be created.\n                  type: string\n                  format: email\n                role:\n                  description: The role of the user to be created.\n                  type: string\n                  enum:\n                    - admin\n                    - member\n                    - developer\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.invites.create({\n              user: \"user@example.com\",\n              role: \"admin\"\n            })\n\n            .then(() =\u003e {\n              // successful\n            })\n\n            .catch(() =\u003e {\n              // an error occurred\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/invites' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"user\": \"user@example.com\",\n                \"role\": \"admin\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Invite\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetInvites\n      summary: Lists Invites\n      description: Lists all Invites\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.invites.list()\n\n            .then(({ invites }) =\u003e {\n              console.log(invites.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET 'https://medusa-url.com/admin/invites'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Invite\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  invites:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/invite'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/invites/{invite_id}':\n    delete:\n      operationId: DeleteInvitesInvite\n      summary: Create an Invite\n      description: Creates an Invite and triggers an 'invite' created event\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: invite_id\n          required: true\n          description: The ID of the Invite\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.invites.delete(invite_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/invites/{invite_id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Invite\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Invite.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    format: invite\n                  deleted:\n                    type: boolean\n                    description: Whether or not the Invite was deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/invites/{invite_id}/resend':\n    post:\n      operationId: PostInvitesInviteResend\n      summary: Resend an Invite\n      description: Resends an Invite by triggering the 'invite' created event again\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: invite_id\n          required: true\n          description: The ID of the Invite\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.invites.resend(invite_id)\n\n            .then(() =\u003e {\n              // successful\n            })\n\n            .catch(() =\u003e {\n              // an error occurred\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/invites/{invite_id}/resend' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Invite\n      responses:\n        '200':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /notes:\n    post:\n      operationId: PostNotes\n      summary: Creates a Note\n      description: Creates a Note which can be associated with any resource as required.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - resource_id\n                - resource_type\n                - value\n              properties:\n                resource_id:\n                  type: string\n                  description: The ID of the resource which the Note relates to.\n                resource_type:\n                  type: string\n                  description: The type of resource which the Note relates to.\n                value:\n                  type: string\n                  description: The content of the Note to create.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notes.create({\n              resource_id,\n              resource_type: 'order',\n              value: 'We delivered this order'\n            })\n\n            .then(({ note }) =\u003e {\n              console.log(note.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST 'https://medusa-url.com/admin/notes'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"resource_id\": \"{resource_id}\",\n                \"resource_type\": \"order\",\n                \"value\": \"We delivered this order\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Note\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  note:\n                    $ref: '#/components/schemas/note'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetNotes\n      summary: List Notes\n      x-authenticated: true\n      description: Retrieves a list of notes\n      parameters:\n        - in: query\n          name: limit\n          description: The number of notes to get\n          schema:\n            type: number\n            default: '50'\n        - in: query\n          name: offset\n          description: The offset at which to get notes\n          schema:\n            type: number\n            default: '0'\n        - in: query\n          name: resource_id\n          description: The ID which the notes belongs to\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notes.list()\n\n            .then(({ notes, limit, offset, count }) =\u003e {\n              console.log(notes.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request GET 'https://medusa-url.com/admin/notes' \\\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Note\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  notes:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/note'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/notes/{id}':\n    delete:\n      operationId: DeleteNotesNote\n      summary: Delete a Note\n      description: Deletes a Note.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Note to delete.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notes.delete(note_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/notes/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Note\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Note.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: note\n                  deleted:\n                    type: boolean\n                    description: Whether or not the Note was deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetNotesNote\n      summary: Get a Note\n      description: Retrieves a single note using its id\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the note to retrieve.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notes.retrieve(note_id)\n\n            .then(({ note }) =\u003e {\n              console.log(note.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/notes/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Note\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  note:\n                    $ref: '#/components/schemas/note'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostNotesNote\n      summary: Update a Note\n      x-authenticated: true\n      description: Updates a Note associated with some resource\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Note to update\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - value\n              properties:\n                value:\n                  type: string\n                  description: The updated description of the Note.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notes.update(note_id, {\n             value: 'We delivered this order'\n            })\n\n            .then(({ note }) =\u003e {\n              console.log(note.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/notes/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"value\": \"We delivered this order\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Note\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  note:\n                    $ref: '#/components/schemas/note'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /notifications:\n    get:\n      operationId: GetNotifications\n      summary: List Notifications\n      description: Retrieves a list of Notifications.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: offset\n          description: \u003e-\n            The number of notifications to skip before starting to collect the\n            notifications set\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: The number of notifications to return\n          schema:\n            type: integer\n            default: 50\n        - in: query\n          name: fields\n          description: Comma separated fields to include in the result set\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: Comma separated fields to populate\n          schema:\n            type: string\n        - in: query\n          name: event_name\n          description: The name of the event that the notification was sent for.\n          schema:\n            type: string\n        - in: query\n          name: resource_type\n          description: The type of resource that the Notification refers to.\n          schema:\n            type: string\n        - in: query\n          name: resource_id\n          description: The ID of the resource that the Notification refers to.\n          schema:\n            type: string\n        - in: query\n          name: to\n          description: \u003e-\n            The address that the Notification was sent to. This will usually be\n            an email address, but represent other addresses such as a chat bot\n            user id\n          schema:\n            type: string\n        - in: query\n          name: include_resends\n          description: \u003e-\n            A boolean indicating whether the result set should include resent\n            notifications or not\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notifications.list()\n\n            .then(({ notifications }) =\u003e {\n              console.log(notifications.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/notifications' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Notification\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  notifications:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/notification'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/notifications/{id}/resend':\n    post:\n      operationId: PostNotificationsNotificationResend\n      summary: Resend Notification\n      description: \u003e-\n        Resends a previously sent notifications, with the same data but\n        optionally to a different address\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Notification\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                to:\n                  description: \u003e-\n                    A new address or user identifier that the Notification\n                    should be sent to\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.notifications.resend(notification_id)\n\n            .then(({ notification }) =\u003e {\n              console.log(notification.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/notifications/{id}/resend' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Notification\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  notification:\n                    $ref: '#/components/schemas/notification'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/shipping-methods':\n    post:\n      operationId: PostOrdersOrderShippingMethods\n      summary: Add a Shipping Method\n      description: \u003e-\n        Adds a Shipping Method to an Order. If another Shipping Method exists\n        with the same Shipping Profile, the previous Shipping Method will be\n        replaced.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.addShippingMethod(order_id, {\n              price: 1000,\n              option_id\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/shipping-methods' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"price\": 1000,\n                \"option_id\": \"{option_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - price\n                - option_id\n              properties:\n                price:\n                  type: integer\n                  description: \u003e-\n                    The price (excluding VAT) that should be charged for the\n                    Shipping Method\n                option_id:\n                  type: string\n                  description: \u003e-\n                    The ID of the Shipping Option to create the Shipping Method\n                    from.\n                data:\n                  type: object\n                  description: \u003e-\n                    The data required for the Shipping Option to create a\n                    Shipping Method. This will depend on the Fulfillment\n                    Provider.\n  '/orders/{id}/archive':\n    post:\n      operationId: PostOrdersOrderArchive\n      summary: Archive Order\n      description: Archives the order with the given id.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.archive(order_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/archive' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/claims/{claim_id}/cancel':\n    post:\n      operationId: PostOrdersClaimCancel\n      summary: Cancel a Claim\n      description: Cancels a Claim\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: claim_id\n          required: true\n          description: The ID of the Claim.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.cancelClaim(order_id, claim_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/claims/{claim_id}/cancel'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Claim\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/claims/{claim_id}/fulfillments/{fulfillment_id}/cancel':\n    post:\n      operationId: PostOrdersClaimFulfillmentsCancel\n      summary: Cancel Claim Fulfillment\n      description: Registers a claim's fulfillment as canceled.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order which the Claim relates to.\n          schema:\n            type: string\n        - in: path\n          name: claim_id\n          required: true\n          description: The ID of the Claim which the Fulfillment relates to.\n          schema:\n            type: string\n        - in: path\n          name: fulfillment_id\n          required: true\n          description: The ID of the Fulfillment.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.cancelClaimFulfillment(order_id, claim_id,\n            fulfillment_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/claims/{claim_id}/fulfillments/{fulfillment_id}/cancel'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Fulfillment\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/swaps/{swap_id}/fulfillments/{fulfillment_id}/cancel':\n    post:\n      operationId: PostOrdersSwapFulfillmentsCancel\n      summary: Cancel Swap's Fulfilmment\n      description: Registers a Swap's Fulfillment as canceled.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order which the Swap relates to.\n          schema:\n            type: string\n        - in: path\n          name: swap_id\n          required: true\n          description: The ID of the Swap which the Fulfillment relates to.\n          schema:\n            type: string\n        - in: path\n          name: fulfillment_id\n          required: true\n          description: The ID of the Fulfillment.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.cancelSwapFulfillment(order_id, swap_id,\n            fulfillment_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/swaps/{swap_id}/fulfillments/{fulfillment_id}/cancel'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Fulfillment\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/fulfillments/{fulfillment_id}/cancel':\n    post:\n      operationId: PostOrdersOrderFulfillmentsCancel\n      summary: Cancels a Fulfilmment\n      description: Registers a Fulfillment as canceled.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order which the Fulfillment relates to.\n          schema:\n            type: string\n        - in: path\n          name: fulfillment_id\n          required: true\n          description: The ID of the Fulfillment\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.cancelFulfillment(order_id, fulfillment_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/fulfillments/{fulfillment_id}/cancel'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Fulfillment\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/cancel':\n    post:\n      operationId: PostOrdersOrderCancel\n      summary: Cancel an Order\n      description: \u003e-\n        Registers an Order as canceled. This triggers a flow that will cancel\n        any created Fulfillments and Payments, may fail if the Payment or\n        Fulfillment Provider is unable to cancel the Payment/Fulfillment.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.cancel(order_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/cancel' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/swaps/{swap_id}/cancel':\n    post:\n      operationId: PostOrdersSwapCancel\n      summary: Cancels a Swap\n      description: Cancels a Swap\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: swap_id\n          required: true\n          description: The ID of the Swap.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.cancelSwap(order_id, swap_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{order_id}/swaps/{swap_id}/cancel'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Swap\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/capture':\n    post:\n      operationId: PostOrdersOrderCapture\n      summary: Capture Order's Payment\n      description: Captures all the Payments associated with an Order.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.capturePayment(order_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/capture' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/complete':\n    post:\n      operationId: PostOrdersOrderComplete\n      summary: Complete an Order\n      description: Completes an Order\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.complete(order_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/complete' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/claims/{claim_id}/shipments':\n    post:\n      operationId: PostOrdersOrderClaimsClaimShipments\n      summary: Create Claim Shipment\n      description: Registers a Claim Fulfillment as shipped.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: claim_id\n          required: true\n          description: The ID of the Claim.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - fulfillment_id\n              properties:\n                fulfillment_id:\n                  description: The ID of the Fulfillment.\n                  type: string\n                tracking_numbers:\n                  description: The tracking numbers for the shipment.\n                  type: array\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.createClaimShipment(order_id, claim_id, {\n              fulfillment_id\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/claims/{claim_id}/shipments'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"fulfillment_id\": \"{fulfillment_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Claim\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/order/{id}/claims':\n    post:\n      operationId: PostOrdersOrderClaims\n      summary: Create a Claim\n      description: Creates a Claim.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - type\n                - claim_items\n              properties:\n                type:\n                  description: \u003e-\n                    The type of the Claim. This will determine how the Claim is\n                    treated: `replace` Claims will result in a Fulfillment with\n                    new items being created, while a `refund` Claim will refund\n                    the amount paid for the claimed items.\n                  type: string\n                  enum:\n                    - replace\n                    - refund\n                claim_items:\n                  description: The Claim Items that the Claim will consist of.\n                  type: array\n                  items:\n                    required:\n                      - item_id\n                      - quantity\n                    properties:\n                      item_id:\n                        description: The ID of the Line Item that will be claimed.\n                        type: string\n                      quantity:\n                        description: The number of items that will be returned\n                        type: integer\n                      note:\n                        description: \u003e-\n                          Short text describing the Claim Item in further\n                          detail.\n                        type: string\n                      reason:\n                        description: The reason for the Claim\n                        type: string\n                        enum:\n                          - missing_item\n                          - wrong_item\n                          - production_failure\n                          - other\n                      tags:\n                        description: A list o tags to add to the Claim Item\n                        type: array\n                        items:\n                          type: string\n                      images:\n                        description: \u003e-\n                          A list of image URL's that will be associated with the\n                          Claim\n                        items:\n                          type: string\n                return_shipping:\n                  description: \u003e-\n                    Optional details for the Return Shipping Method, if the\n                    items are to be sent back.\n                  type: object\n                  properties:\n                    option_id:\n                      type: string\n                      description: \u003e-\n                        The ID of the Shipping Option to create the Shipping\n                        Method from.\n                    price:\n                      type: integer\n                      description: The price to charge for the Shipping Method.\n                additional_items:\n                  description: \u003e-\n                    The new items to send to the Customer when the Claim type is\n                    Replace.\n                  type: array\n                  items:\n                    required:\n                      - variant_id\n                      - quantity\n                    properties:\n                      variant_id:\n                        description: The ID of the Product Variant to ship.\n                        type: string\n                      quantity:\n                        description: The quantity of the Product Variant to ship.\n                        type: integer\n                shipping_methods:\n                  description: The Shipping Methods to send the additional Line Items with.\n                  type: array\n                  items:\n                    properties:\n                      id:\n                        description: The ID of an existing Shipping Method\n                        type: string\n                      option_id:\n                        description: \u003e-\n                          The ID of the Shipping Option to create a Shipping\n                          Method from\n                        type: string\n                      price:\n                        description: The price to charge for the Shipping Method\n                        type: integer\n                shipping_address:\n                  type: object\n                  description: \u003e-\n                    An optional shipping address to send the claim to. Defaults\n                    to the parent order's shipping address\n                  $ref: '#/components/schemas/address'\n                refund_amount:\n                  description: \u003e-\n                    The amount to refund the Customer when the Claim type is\n                    `refund`.\n                  type: integer\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Claim.\n                  type: boolean\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.createClaim(order_id, {\n              type: 'refund',\n              claim_items: [\n                {\n                  item_id,\n                  quantity: 1\n                }\n              ]\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/claims' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"type\": \"refund\",\n                \"claim_items\": [\n                  {\n                    \"item_id\": \"asdsd\",\n                    \"quantity\": 1\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Claim\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/fulfillment':\n    post:\n      operationId: PostOrdersOrderFulfillments\n      summary: Create a Fulfillment\n      description: \u003e-\n        Creates a Fulfillment of an Order - will notify Fulfillment Providers to\n        prepare a shipment.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - items\n              properties:\n                items:\n                  description: The Line Items to include in the Fulfillment.\n                  type: array\n                  items:\n                    required:\n                      - item_id\n                      - quantity\n                    properties:\n                      item_id:\n                        description: The ID of Line Item to fulfill.\n                        type: string\n                      quantity:\n                        description: The quantity of the Line Item to fulfill.\n                        type: integer\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Swap.\n                  type: boolean\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.createFulfillment(order_id, {\n              items: [\n                {\n                  item_id,\n                  quantity: 1\n                }\n              ]\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/fulfillment' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"items\": [\n                  {\n                    \"item_id\": \"{item_id}\",\n                    \"quantity\": 1\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Fulfillment\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/shipment':\n    post:\n      operationId: PostOrdersOrderShipment\n      summary: Create a Shipment\n      description: Registers a Fulfillment as shipped.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - fulfillment_id\n              properties:\n                fulfillment_id:\n                  description: The ID of the Fulfillment.\n                  type: string\n                tracking_numbers:\n                  description: The tracking numbers for the shipment.\n                  type: array\n                  items:\n                    type: string\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Shipment.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.createShipment(order_id, {\n              fulfillment_id\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/shipment' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"fulfillment_id\": \"{fulfillment_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/swaps/{swap_id}/shipments':\n    post:\n      operationId: PostOrdersOrderSwapsSwapShipments\n      summary: Create Swap Shipment\n      description: Registers a Swap Fulfillment as shipped.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: swap_id\n          required: true\n          description: The ID of the Swap.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - fulfillment_id\n              properties:\n                fulfillment_id:\n                  description: The ID of the Fulfillment.\n                  type: string\n                tracking_numbers:\n                  description: The tracking numbers for the shipment.\n                  type: array\n                  items:\n                    type: string\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be sent related to this\n                    Claim.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.createSwapShipment(order_id, swap_id, {\n              fulfillment_id\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/swaps/{swap_id}/shipments'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"fulfillment_id\": \"{fulfillment_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Swap\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/order/{id}/swaps':\n    post:\n      operationId: PostOrdersOrderSwaps\n      summary: Create a Swap\n      description: \u003e-\n        Creates a Swap. Swaps are used to handle Return of previously purchased\n        goods and Fulfillment of replacements simultaneously.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - return_items\n              properties:\n                return_items:\n                  description: The Line Items to return as part of the Swap.\n                  type: array\n                  items:\n                    required:\n                      - item_id\n                      - quantity\n                    properties:\n                      item_id:\n                        description: The ID of the Line Item that will be claimed.\n                        type: string\n                      quantity:\n                        description: The number of items that will be returned\n                        type: integer\n                      reason_id:\n                        description: The ID of the Return Reason to use.\n                        type: string\n                      note:\n                        description: An optional note with information about the Return.\n                        type: string\n                return_shipping:\n                  description: How the Swap will be returned.\n                  type: object\n                  required:\n                    - option_id\n                  properties:\n                    option_id:\n                      type: string\n                      description: \u003e-\n                        The ID of the Shipping Option to create the Shipping\n                        Method from.\n                    price:\n                      type: integer\n                      description: The price to charge for the Shipping Method.\n                additional_items:\n                  description: The new items to send to the Customer.\n                  type: array\n                  items:\n                    required:\n                      - variant_id\n                      - quantity\n                    properties:\n                      variant_id:\n                        description: The ID of the Product Variant to ship.\n                        type: string\n                      quantity:\n                        description: The quantity of the Product Variant to ship.\n                        type: integer\n                custom_shipping_options:\n                  description: \u003e-\n                    The custom shipping options to potentially create a Shipping\n                    Method from.\n                  type: array\n                  items:\n                    required:\n                      - option_id\n                      - price\n                    properties:\n                      option_id:\n                        description: \u003e-\n                          The ID of the Shipping Option to override with a\n                          custom price.\n                        type: string\n                      price:\n                        description: The custom price of the Shipping Option.\n                        type: integer\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Swap.\n                  type: boolean\n                allow_backorder:\n                  description: 'If true, swaps can be completed with items out of stock'\n                  type: boolean\n                  default: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.createSwap(order_id, {\n              return_items: [\n                {\n                  item_id,\n                  quantity: 1\n                }\n              ]\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/swaps' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"return_items\": [\n                  {\n                    \"item_id\": \"asfasf\",\n                    \"quantity\": 1\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Swap\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/claims/{claim_id}/fulfillments':\n    post:\n      operationId: PostOrdersOrderClaimsClaimFulfillments\n      summary: Create Claim Fulfillment\n      description: Creates a Fulfillment for a Claim.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: claim_id\n          required: true\n          description: The ID of the Claim.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Claim.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.fulfillClaim(order_id, claim_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/claims/{claim_id}/fulfillments'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Fulfillment\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/swaps/{swap_id}/fulfillments':\n    post:\n      operationId: PostOrdersOrderSwapsSwapFulfillments\n      summary: Create Swap Fulfillment\n      description: Creates a Fulfillment for a Swap.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: swap_id\n          required: true\n          description: The ID of the Swap.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Claim.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.fulfillSwap(order_id, swap_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/swaps/{swap_id}/fulfillments'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Fulfillment\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}':\n    get:\n      operationId: GetOrdersOrder\n      summary: Get an Order\n      description: Retrieves an Order\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.retrieve(order_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/orders/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostOrdersOrder\n      summary: Update an Order\n      description: Updates and order\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                email:\n                  description: the email for the order\n                  type: string\n                billing_address:\n                  description: Billing address\n                  anyOf:\n                    - $ref: '#/components/schemas/address'\n                shipping_address:\n                  description: Shipping address\n                  anyOf:\n                    - $ref: '#/components/schemas/address'\n                items:\n                  description: The Line Items for the order\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/line_item'\n                region:\n                  description: ID of the region where the order belongs\n                  type: string\n                discounts:\n                  description: Discounts applied to the order\n                  type: array\n                  items:\n                    $ref: '#/components/schemas/discount'\n                customer_id:\n                  description: ID of the customer\n                  type: string\n                payment_method:\n                  description: payment method chosen for the order\n                  type: object\n                  properties:\n                    provider_id:\n                      type: string\n                      description: ID of the payment provider\n                    data:\n                      description: Data relevant for the given payment method\n                      type: object\n                shipping_method:\n                  description: The Shipping Method used for shipping the order.\n                  type: object\n                  properties:\n                    provider_id:\n                      type: string\n                      description: The ID of the shipping provider.\n                    profile_id:\n                      type: string\n                      description: The ID of the shipping profile.\n                    price:\n                      type: integer\n                      description: The price of the shipping.\n                    data:\n                      type: object\n                      description: Data relevant to the specific shipping method.\n                    items:\n                      type: array\n                      items:\n                        $ref: '#/components/schemas/line_item'\n                      description: Items to ship\n                no_notification:\n                  description: \u003e-\n                    A flag to indicate if no notifications should be emitted\n                    related to the updated order.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.update(order_id, {\n              email: 'user@example.com'\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/adasda' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"email\": \"user@example.com\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /orders:\n    get:\n      operationId: GetOrders\n      summary: List Orders\n      description: Retrieves a list of Orders\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: q\n          description: \u003e-\n            Query used for searching orders by shipping address first name,\n            orders' email, and orders' display ID\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: ID of the order to search for.\n          schema:\n            type: string\n        - in: query\n          name: status\n          style: form\n          explode: false\n          description: Status to search for\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - pending\n                - completed\n                - archived\n                - canceled\n                - requires_action\n        - in: query\n          name: fulfillment_status\n          style: form\n          explode: false\n          description: Fulfillment status to search for.\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - not_fulfilled\n                - fulfilled\n                - partially_fulfilled\n                - shipped\n                - partially_shipped\n                - canceled\n                - returned\n                - partially_returned\n                - requires_action\n        - in: query\n          name: payment_status\n          style: form\n          explode: false\n          description: Payment status to search for.\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - captured\n                - awaiting\n                - not_paid\n                - refunded\n                - partially_refunded\n                - canceled\n                - requires_action\n        - in: query\n          name: display_id\n          description: Display ID to search for.\n          schema:\n            type: string\n        - in: query\n          name: cart_id\n          description: to search for.\n          schema:\n            type: string\n        - in: query\n          name: customer_id\n          description: to search for.\n          schema:\n            type: string\n        - in: query\n          name: email\n          description: to search for.\n          schema:\n            type: string\n        - in: query\n          name: region_id\n          style: form\n          explode: false\n          description: Regions to search orders by\n          schema:\n            oneOf:\n              - type: string\n                description: ID of a Region.\n              - type: array\n                items:\n                  type: string\n                  description: ID of a Region.\n        - in: query\n          name: currency_code\n          style: form\n          explode: false\n          description: Currency code to search for\n          schema:\n            type: string\n            externalDocs:\n              url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n              description: See a list of codes.\n        - in: query\n          name: tax_rate\n          description: to search for.\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting orders were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting orders were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: canceled_at\n          description: Date comparison for when resulting orders were canceled.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: sales_channel_id\n          style: form\n          explode: false\n          description: Filter by Sales Channels\n          schema:\n            type: array\n            items:\n              type: string\n              description: The ID of a Sales Channel\n        - in: query\n          name: offset\n          description: How many orders to skip before the results.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of orders returned.\n          schema:\n            type: integer\n            default: 50\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each order of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each order of\n            the result.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.list()\n\n            .then(({ orders, limit, offset, count }) =\u003e {\n              console.log(orders.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET 'https://medusa-url.com/admin/orders'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  orders:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/order'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/swaps/{swap_id}/process-payment':\n    post:\n      operationId: PostOrdersOrderSwapsSwapProcessPayment\n      summary: Process Swap Payment\n      description: \u003e-\n        When there are differences between the returned and shipped Products in\n        a Swap, the difference must be processed. Either a Refund will be issued\n        or a Payment will be captured.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: swap_id\n          required: true\n          description: The ID of the Swap.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.processSwapPayment(order_id, swap_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/swaps/{swap_id}/process-payment'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Swap\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/refund':\n    post:\n      operationId: PostOrdersOrderRefunds\n      summary: Create a Refund\n      description: Issues a Refund.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - amount\n                - reason\n              properties:\n                amount:\n                  description: The amount to refund.\n                  type: integer\n                reason:\n                  description: The reason for the Refund.\n                  type: string\n                note:\n                  description: A note with additional details about the Refund.\n                  type: string\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Refund.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.refundPayment(order_id, {\n              amount: 1000,\n              reason: 'Do not like it'\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/adasda/refund' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"amount\": 1000,\n                \"reason\": \"Do not like it\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/orders/{id}/return':\n    post:\n      operationId: PostOrdersOrderReturns\n      summary: Request a Return\n      description: \u003e-\n        Requests a Return. If applicable a return label will be created and\n        other plugins notified.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - items\n              properties:\n                items:\n                  description: The Line Items that will be returned.\n                  type: array\n                  items:\n                    required:\n                      - item_id\n                      - quantity\n                    properties:\n                      item_id:\n                        description: The ID of the Line Item.\n                        type: string\n                      reason_id:\n                        description: The ID of the Return Reason to use.\n                        type: string\n                      note:\n                        description: An optional note with information about the Return.\n                        type: string\n                      quantity:\n                        description: The quantity of the Line Item.\n                        type: integer\n                return_shipping:\n                  description: \u003e-\n                    The Shipping Method to be used to handle the return\n                    shipment.\n                  type: object\n                  properties:\n                    option_id:\n                      type: string\n                      description: \u003e-\n                        The ID of the Shipping Option to create the Shipping\n                        Method from.\n                    price:\n                      type: integer\n                      description: The price to charge for the Shipping Method.\n                note:\n                  description: An optional note with information about the Return.\n                  type: string\n                receive_now:\n                  description: \u003e-\n                    A flag to indicate if the Return should be registerd as\n                    received immediately.\n                  type: boolean\n                  default: false\n                no_notification:\n                  description: \u003e-\n                    A flag to indicate if no notifications should be emitted\n                    related to the requested Return.\n                  type: boolean\n                refund:\n                  description: The amount to refund.\n                  type: integer\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.requestReturn(order_id, {\n              items: [\n                {\n                  item_id,\n                  quantity: 1\n                }\n              ]\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/return' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"items\": [\n                  {\n                    \"item_id\": \"{item_id}\",\n                    \"quantity\": 1\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return\n        - Order\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/order/{id}/claims/{claim_id}':\n    post:\n      operationId: PostOrdersOrderClaimsClaim\n      summary: Update a Claim\n      description: Updates a Claim.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Order.\n          schema:\n            type: string\n        - in: path\n          name: claim_id\n          required: true\n          description: The ID of the Claim.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                claim_items:\n                  description: The Claim Items that the Claim will consist of.\n                  type: array\n                  items:\n                    required:\n                      - id\n                      - images\n                      - tags\n                    properties:\n                      id:\n                        description: The ID of the Claim Item.\n                        type: string\n                      item_id:\n                        description: The ID of the Line Item that will be claimed.\n                        type: string\n                      quantity:\n                        description: The number of items that will be returned\n                        type: integer\n                      note:\n                        description: \u003e-\n                          Short text describing the Claim Item in further\n                          detail.\n                        type: string\n                      reason:\n                        description: The reason for the Claim\n                        type: string\n                        enum:\n                          - missing_item\n                          - wrong_item\n                          - production_failure\n                          - other\n                      tags:\n                        description: A list o tags to add to the Claim Item\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            id:\n                              type: string\n                              description: Tag ID\n                            value:\n                              type: string\n                              description: Tag value\n                      images:\n                        description: \u003e-\n                          A list of image URL's that will be associated with the\n                          Claim\n                        type: array\n                        items:\n                          type: object\n                          properties:\n                            id:\n                              type: string\n                              description: Image ID\n                            url:\n                              type: string\n                              description: Image URL\n                      metadata:\n                        description: \u003e-\n                          An optional set of key-value pairs to hold additional\n                          information.\n                        type: object\n                shipping_methods:\n                  description: The Shipping Methods to send the additional Line Items with.\n                  type: array\n                  items:\n                    properties:\n                      id:\n                        description: The ID of an existing Shipping Method\n                        type: string\n                      option_id:\n                        description: \u003e-\n                          The ID of the Shipping Option to create a Shipping\n                          Method from\n                        type: string\n                      price:\n                        description: The price to charge for the Shipping Method\n                        type: integer\n                no_notification:\n                  description: \u003e-\n                    If set to true no notification will be send related to this\n                    Swap.\n                  type: boolean\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs to hold additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.orders.updateClaim(order_id, claim_id, {\n              no_notification: true\n            })\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/orders/{id}/claims/{claim_id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"no_notification\": true\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Claim\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/price-lists/{id}/prices/batch':\n    post:\n      operationId: PostPriceListsPriceListPricesBatch\n      summary: Update Prices\n      description: Batch update prices for a Price List\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Price List to update prices for.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                prices:\n                  description: The prices to update or add.\n                  type: array\n                  items:\n                    required:\n                      - amount\n                      - variant_id\n                    properties:\n                      id:\n                        description: The ID of the price.\n                        type: string\n                      region_id:\n                        description: \u003e-\n                          The ID of the Region for which the price is used. Only\n                          required if currecny_code is not provided.\n                        type: string\n                      currency_code:\n                        description: \u003e-\n                          The 3 character ISO currency code for which the price\n                          will be used. Only required if region_id is not\n                          provided.\n                        type: string\n                        externalDocs:\n                          url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                          description: See a list of codes.\n                      variant_id:\n                        description: The ID of the Variant for which the price is used.\n                        type: string\n                      amount:\n                        description: The amount to charge for the Product Variant.\n                        type: integer\n                      min_quantity:\n                        description: The minimum quantity for which the price will be used.\n                        type: integer\n                      max_quantity:\n                        description: The maximum quantity for which the price will be used.\n                        type: integer\n                override:\n                  description: \u003e-\n                    If true the prices will replace all existing prices\n                    associated with the Price List.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.addPrices(price_list_id, {\n              prices: [\n                {\n                  amount: 1000,\n                  variant_id,\n                  currency_code: 'eur'\n                }\n              ]\n            })\n\n            .then(({ price_list }) =\u003e {\n              console.log(price_list.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/price-lists/{id}/prices/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"prices\": [\n                  {\n                    \"amount\": 100,\n                    \"variant_id\": \"afasfa\",\n                    \"currency_code\": \"eur\"\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  price_list:\n                    $ref: '#/components/schemas/price_list'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeletePriceListsPriceListPricesBatch\n      summary: Delete Prices\n      description: Batch delete prices that belong to a Price List\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: \u003e-\n            The ID of the Price List that the Money Amounts (Prices) that will\n            be deleted belongs to.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                price_ids:\n                  description: The price id's of the Money Amounts to delete.\n                  type: array\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.deletePrices(price_list_id, {\n              price_ids: [\n                price_id\n              ]\n            })\n\n            .then(({ ids, object, deleted }) =\u003e {\n              console.log(ids.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/price-lists/{id}/prices/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"price_ids\": [\n                  \"adasfa\"\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  ids:\n                    type: array\n                    items:\n                      type: string\n                      description: The IDs of the deleted Money Amounts (Prices).\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: money-amount\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /price-lists:\n    post:\n      operationId: PostPriceListsPriceList\n      summary: Create a Price List\n      description: Creates a Price List\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n                - description\n                - type\n                - prices\n              properties:\n                name:\n                  description: The name of the Price List\n                  type: string\n                description:\n                  description: A description of the Price List.\n                  type: string\n                starts_at:\n                  description: \u003e-\n                    The date with timezone that the Price List starts being\n                    valid.\n                  type: string\n                  format: date\n                ends_at:\n                  description: The date with timezone that the Price List ends being valid.\n                  type: string\n                  format: date\n                type:\n                  description: The type of the Price List.\n                  type: string\n                  enum:\n                    - sale\n                    - override\n                status:\n                  description: The status of the Price List.\n                  type: string\n                  enum:\n                    - active\n                    - draft\n                prices:\n                  description: The prices of the Price List.\n                  type: array\n                  items:\n                    required:\n                      - amount\n                      - variant_id\n                    properties:\n                      region_id:\n                        description: \u003e-\n                          The ID of the Region for which the price is used. Only\n                          required if currecny_code is not provided.\n                        type: string\n                      currency_code:\n                        description: \u003e-\n                          The 3 character ISO currency code for which the price\n                          will be used. Only required if region_id is not\n                          provided.\n                        type: string\n                        externalDocs:\n                          url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                          description: See a list of codes.\n                      amount:\n                        description: The amount to charge for the Product Variant.\n                        type: integer\n                      variant_id:\n                        description: The ID of the Variant for which the price is used.\n                        type: string\n                      min_quantity:\n                        description: The minimum quantity for which the price will be used.\n                        type: integer\n                      max_quantity:\n                        description: The maximum quantity for which the price will be used.\n                        type: integer\n                customer_groups:\n                  type: array\n                  description: A list of customer groups that the Price List applies to.\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: The ID of a customer group\n                        type: string\n                includes_tax:\n                  description: '[EXPERIMENTAL] Tax included in prices of price list'\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            import { PriceListType } from \"@medusajs/medusa\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.create({\n              name: 'New Price List',\n              description: 'A new price list',\n              type: PriceListType.SALE,\n              prices: [\n                {\n                  amount: 1000,\n                  variant_id,\n                  currency_code: 'eur'\n                }\n              ]\n            })\n\n            .then(({ price_list }) =\u003e {\n              console.log(price_list.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/price-lists' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"New Price List\",\n                \"description\": \"A new price list\",\n                \"type\": \"sale\",\n                \"prices\": [\n                  {\n                    \"amount\": 1000,\n                    \"variant_id\": \"afafa\",\n                    \"currency_code\": \"eur\"\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  price_list:\n                    $ref: '#/components/schemas/price_list'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetPriceLists\n      summary: List Price Lists\n      description: Retrieves a list of Price Lists.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          description: The number of items to get\n          schema:\n            type: number\n            default: '10'\n        - in: query\n          name: offset\n          description: The offset at which to get items\n          schema:\n            type: number\n            default: '0'\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each item of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: order\n          description: field to order results by.\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: ID to search for.\n          schema:\n            type: string\n        - in: query\n          name: q\n          description: \u003e-\n            query to search in price list description, price list name, and\n            customer group name fields.\n          schema:\n            type: string\n        - in: query\n          name: status\n          style: form\n          explode: false\n          description: Status to search for.\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - active\n                - draft\n        - in: query\n          name: name\n          description: price list name to search for.\n          schema:\n            type: string\n        - in: query\n          name: customer_groups\n          style: form\n          explode: false\n          description: Customer Group IDs to search for.\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: type\n          style: form\n          explode: false\n          description: Type to search for.\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - sale\n                - override\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting price lists were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting price lists were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: deleted_at\n          description: Date comparison for when resulting price lists were deleted.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.list()\n\n            .then(({ price_lists, limit, offset, count }) =\u003e {\n              console.log(price_lists.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/price-lists' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  price_lists:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/price_list'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/price-lists/{id}':\n    delete:\n      operationId: DeletePriceListsPriceList\n      summary: Delete a Price List\n      description: Deletes a Price List\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Price List to delete.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.delete(price_list_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/price-lists/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Price List.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: price-list\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetPriceListsPriceList\n      summary: Get a Price List\n      description: Retrieves a Price List.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Price List.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.retrieve(price_list_id)\n\n            .then(({ price_list }) =\u003e {\n              console.log(price_list.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/price-lists/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  price_list:\n                    $ref: '#/components/schemas/price_list'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostPriceListsPriceListPriceList\n      summary: Update a Price List\n      description: Updates a Price List\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Price List.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the Price List\n                  type: string\n                description:\n                  description: A description of the Price List.\n                  type: string\n                starts_at:\n                  description: \u003e-\n                    The date with timezone that the Price List starts being\n                    valid.\n                  type: string\n                  format: date\n                ends_at:\n                  description: The date with timezone that the Price List ends being valid.\n                  type: string\n                  format: date\n                type:\n                  description: The type of the Price List.\n                  type: string\n                  enum:\n                    - sale\n                    - override\n                status:\n                  description: The status of the Price List.\n                  type: string\n                  enum:\n                    - active\n                    - draft\n                prices:\n                  description: The prices of the Price List.\n                  type: array\n                  items:\n                    required:\n                      - amount\n                      - variant_id\n                    properties:\n                      id:\n                        description: The ID of the price.\n                        type: string\n                      region_id:\n                        description: \u003e-\n                          The ID of the Region for which the price is used. Only\n                          required if currecny_code is not provided.\n                        type: string\n                      currency_code:\n                        description: \u003e-\n                          The 3 character ISO currency code for which the price\n                          will be used. Only required if region_id is not\n                          provided.\n                        type: string\n                        externalDocs:\n                          url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                          description: See a list of codes.\n                      variant_id:\n                        description: The ID of the Variant for which the price is used.\n                        type: string\n                      amount:\n                        description: The amount to charge for the Product Variant.\n                        type: integer\n                      min_quantity:\n                        description: The minimum quantity for which the price will be used.\n                        type: integer\n                      max_quantity:\n                        description: The maximum quantity for which the price will be used.\n                        type: integer\n                customer_groups:\n                  type: array\n                  description: A list of customer groups that the Price List applies to.\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: The ID of a customer group\n                        type: string\n                includes_tax:\n                  description: '[EXPERIMENTAL] Tax included in prices of price list'\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.update(price_list_id, {\n              name: 'New Price List'\n            })\n\n            .then(({ price_list }) =\u003e {\n              console.log(price_list.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/price-lists/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"New Price List\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  price_list:\n                    $ref: '#/components/schemas/price_list'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/price-lists/{id}/products/{product_id}/prices':\n    delete:\n      operationId: DeletePriceListsPriceListProductsProductPrices\n      summary: Delete Product's Prices\n      description: Delete all the prices related to a specific product in a price list\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: \u003e-\n            The ID of the Price List that the Money Amounts that will be deleted\n            belongs to.\n          schema:\n            type: string\n        - in: path\n          name: product_id\n          required: true\n          description: The ID of the product from which the money amount will be deleted.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.deleteProductPrices(price_list_id,\n            product_id)\n\n            .then(({ ids, object, deleted }) =\u003e {\n              console.log(ids.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/price-lists/{id}/products/{product_id}/prices'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  ids:\n                    type: array\n                    description: The price ids that have been deleted.\n                    items:\n                      type: string\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: money-amount\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/price-lists/{id}/variants/{variant_id}/prices':\n    delete:\n      operationId: DeletePriceListsPriceListVariantsVariantPrices\n      summary: Delete Variant's Prices\n      description: Delete all the prices related to a specific variant in a price list\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: \u003e-\n            The ID of the Price List that the Money Amounts that will be deleted\n            belongs to.\n          schema:\n            type: string\n        - in: path\n          name: variant_id\n          required: true\n          description: The ID of the variant from which the money amount will be deleted.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.deleteVariantPrices(price_list_id,\n            variant_id)\n\n            .then(({ ids, object, deleted }) =\u003e {\n              console.log(ids);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/price-lists/{id}/variants/{variant_id}/prices'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Price List\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  ids:\n                    type: array\n                    description: The price ids that have been deleted.\n                    items:\n                      type: string\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: money-amount\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/price-lists/{id}/products':\n    get:\n      operationId: GetPriceListsPriceListProducts\n      summary: List Products\n      description: Retrieves a list of Product that are part of a Price List\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the price list.\n          schema:\n            type: string\n        - in: query\n          name: q\n          description: \u003e-\n            Query used for searching product title and description, variant\n            title and sku, and collection title.\n          schema:\n            type: string\n        - in: query\n          name: id\n          description: ID of the product to search for.\n          schema:\n            type: string\n        - in: query\n          name: status\n          description: Product status to search for\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - draft\n                - proposed\n                - published\n                - rejected\n        - in: query\n          name: collection_id\n          description: Collection IDs to search for\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: tags\n          description: Tag IDs to search for\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: title\n          description: product title to search for.\n          schema:\n            type: string\n        - in: query\n          name: description\n          description: product description to search for.\n          schema:\n            type: string\n        - in: query\n          name: handle\n          description: product handle to search for.\n          schema:\n            type: string\n        - in: query\n          name: is_giftcard\n          description: Search for giftcards using is_giftcard=true.\n          schema:\n            type: string\n        - in: query\n          name: type\n          description: to search for.\n          schema:\n            type: string\n        - in: query\n          name: order\n          description: field to sort results by.\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting products were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting products were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: deleted_at\n          description: Date comparison for when resulting products were deleted.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: offset\n          description: How many products to skip in the result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of products returned.\n          schema:\n            type: integer\n            default: 50\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each product of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each product of\n            the result.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.priceLists.listProducts(price_list_id)\n\n            .then(({ products, limit, offset, count }) =\u003e {\n              console.log(products.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/price-lists/{id}/products' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  products:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/product'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /product-tags:\n    get:\n      operationId: GetProductTags\n      summary: List Product Tags\n      description: Retrieve a list of Product Tags.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          description: The number of tags to return.\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: offset\n          description: The number of items to skip before the results.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: order\n          description: The field to sort items by.\n          schema:\n            type: string\n        - in: query\n          name: value\n          style: form\n          explode: false\n          description: The tag values to search for\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: q\n          description: A query string to search values for\n          schema:\n            type: string\n        - in: query\n          name: id\n          style: form\n          explode: false\n          description: The tag IDs to search for\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting product tags were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting product tags were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.productTags.list()\n\n            .then(({ product_tags }) =\u003e {\n              console.log(product_tags.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/product-tags' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product Tag\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product_tags:\n                    $ref: '#/components/schemas/product_tag'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /product-types:\n    get:\n      operationId: GetProductTypes\n      summary: List Product Types\n      description: Retrieve a list of Product Types.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          description: The number of types to return.\n          schema:\n            type: integer\n            default: 10\n        - in: query\n          name: offset\n          description: The number of items to skip before the results.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: order\n          description: The field to sort items by.\n          schema:\n            type: string\n        - in: query\n          name: value\n          style: form\n          explode: false\n          description: The type values to search for\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: id\n          style: form\n          explode: false\n          description: The type IDs to search for\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: q\n          description: A query string to search values for\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting product types were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting product types were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.productTypes.list()\n\n            .then(({ product_types }) =\u003e {\n              console.log(product_types.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/product-types' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product Type\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product_types:\n                    $ref: '#/components/schemas/product_type'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/products/{id}/options':\n    post:\n      operationId: PostProductsProductOptions\n      summary: Add an Option\n      x-authenticated: true\n      description: Adds a Product Option to a Product\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - title\n              properties:\n                title:\n                  description: \u003e-\n                    The title the Product Option will be identified by i.e.\n                    \"Size\"\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.addOption(product_id, {\n              title: 'Size'\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products/{id}/options' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"Size\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /products:\n    post:\n      operationId: PostProducts\n      summary: Create a Product\n      x-authenticated: true\n      description: Creates a Product\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - title\n              properties:\n                title:\n                  description: The title of the Product\n                  type: string\n                subtitle:\n                  description: The subtitle of the Product\n                  type: string\n                description:\n                  description: A description of the Product.\n                  type: string\n                is_giftcard:\n                  description: \u003e-\n                    A flag to indicate if the Product represents a Gift Card.\n                    Purchasing Products with this flag set to `true` will result\n                    in a Gift Card being created.\n                  type: boolean\n                  default: false\n                discountable:\n                  description: \u003e-\n                    A flag to indicate if discounts can be applied to the\n                    LineItems generated from this Product\n                  type: boolean\n                  default: true\n                images:\n                  description: Images of the Product.\n                  type: array\n                  items:\n                    type: string\n                thumbnail:\n                  description: The thumbnail to use for the Product.\n                  type: string\n                handle:\n                  description: A unique handle to identify the Product by.\n                  type: string\n                status:\n                  description: The status of the product.\n                  type: string\n                  enum:\n                    - draft\n                    - proposed\n                    - published\n                    - rejected\n                  default: draft\n                type:\n                  description: The Product Type to associate the Product with.\n                  type: object\n                  required:\n                    - value\n                  properties:\n                    id:\n                      description: The ID of the Product Type.\n                      type: string\n                    value:\n                      description: The value of the Product Type.\n                      type: string\n                collection_id:\n                  description: The ID of the Collection the Product should belong to.\n                  type: string\n                tags:\n                  description: Tags to associate the Product with.\n                  type: array\n                  items:\n                    required:\n                      - value\n                    properties:\n                      id:\n                        description: The ID of an existing Tag.\n                        type: string\n                      value:\n                        description: 'The value of the Tag, these will be upserted.'\n                        type: string\n                sales_channels:\n                  description: '[EXPERIMENTAL] Sales channels to associate the Product with.'\n                  type: array\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: The ID of an existing Sales channel.\n                        type: string\n                options:\n                  description: \u003e-\n                    The Options that the Product should have. These define on\n                    which properties the Product's Product Variants will differ.\n                  type: array\n                  items:\n                    required:\n                      - title\n                    properties:\n                      title:\n                        description: The title to identify the Product Option by.\n                        type: string\n                variants:\n                  description: A list of Product Variants to create with the Product.\n                  type: array\n                  items:\n                    required:\n                      - title\n                    properties:\n                      title:\n                        description: The title to identify the Product Variant by.\n                        type: string\n                      sku:\n                        description: The unique SKU for the Product Variant.\n                        type: string\n                      ean:\n                        description: The EAN number of the item.\n                        type: string\n                      upc:\n                        description: The UPC number of the item.\n                        type: string\n                      barcode:\n                        description: A generic GTIN field for the Product Variant.\n                        type: string\n                      hs_code:\n                        description: The Harmonized System code for the Product Variant.\n                        type: string\n                      inventory_quantity:\n                        description: The amount of stock kept for the Product Variant.\n                        type: integer\n                        default: 0\n                      allow_backorder:\n                        description: \u003e-\n                          Whether the Product Variant can be purchased when out\n                          of stock.\n                        type: boolean\n                      manage_inventory:\n                        description: \u003e-\n                          Whether Medusa should keep track of the inventory for\n                          this Product Variant.\n                        type: boolean\n                      weight:\n                        description: The wieght of the Product Variant.\n                        type: number\n                      length:\n                        description: The length of the Product Variant.\n                        type: number\n                      height:\n                        description: The height of the Product Variant.\n                        type: number\n                      width:\n                        description: The width of the Product Variant.\n                        type: number\n                      origin_country:\n                        description: The country of origin of the Product Variant.\n                        type: string\n                      mid_code:\n                        description: \u003e-\n                          The Manufacturer Identification code for the Product\n                          Variant.\n                        type: string\n                      material:\n                        description: The material composition of the Product Variant.\n                        type: string\n                      metadata:\n                        description: \u003e-\n                          An optional set of key-value pairs with additional\n                          information.\n                        type: object\n                      prices:\n                        type: array\n                        items:\n                          required:\n                            - amount\n                          properties:\n                            region_id:\n                              description: \u003e-\n                                The ID of the Region for which the price is\n                                used. Only required if currency_code is not\n                                provided.\n                              type: string\n                            currency_code:\n                              description: \u003e-\n                                The 3 character ISO currency code for which the\n                                price will be used. Only required if region_id\n                                is not provided.\n                              type: string\n                              externalDocs:\n                                url: \u003e-\n                                  https://en.wikipedia.org/wiki/ISO_4217#Active_codes\n                                description: See a list of codes.\n                            amount:\n                              description: The amount to charge for the Product Variant.\n                              type: integer\n                            min_quantity:\n                              description: \u003e-\n                                The minimum quantity for which the price will be\n                                used.\n                              type: integer\n                            max_quantity:\n                              description: \u003e-\n                                The maximum quantity for which the price will be\n                                used.\n                              type: integer\n                      options:\n                        type: array\n                        items:\n                          required:\n                            - value\n                          properties:\n                            value:\n                              description: \u003e-\n                                The value to give for the Product Option at the\n                                same index in the Product's `options` field.\n                              type: string\n                weight:\n                  description: The weight of the Product.\n                  type: number\n                length:\n                  description: The length of the Product.\n                  type: number\n                height:\n                  description: The height of the Product.\n                  type: number\n                width:\n                  description: The width of the Product.\n                  type: number\n                hs_code:\n                  description: The Harmonized System code for the Product Variant.\n                  type: string\n                origin_country:\n                  description: The country of origin of the Product.\n                  type: string\n                mid_code:\n                  description: The Manufacturer Identification code for the Product.\n                  type: string\n                material:\n                  description: The material composition of the Product.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.create({\n              title: 'Shirt',\n              is_giftcard: false,\n              discountable: true\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"Shirt\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetProducts\n      summary: List Products\n      description: Retrieves a list of Product\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: q\n          description: \u003e-\n            Query used for searching product title and description, variant\n            title and sku, and collection title.\n          schema:\n            type: string\n        - in: query\n          name: id\n          style: form\n          explode: false\n          description: Filter by product IDs.\n          schema:\n            oneOf:\n              - type: string\n                description: ID of the product to search for.\n              - type: array\n                items:\n                  type: string\n                  description: ID of a product.\n        - in: query\n          name: status\n          style: form\n          explode: false\n          description: Status to search for\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - draft\n                - proposed\n                - published\n                - rejected\n        - in: query\n          name: collection_id\n          style: form\n          explode: false\n          description: Collection ids to search for.\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: tags\n          style: form\n          explode: false\n          description: Tag IDs to search for\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: price_list_id\n          style: form\n          explode: false\n          description: Price List IDs to search for\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: sales_channel_id\n          style: form\n          explode: false\n          description: Sales Channel IDs to filter products by\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: title\n          description: title to search for.\n          schema:\n            type: string\n        - in: query\n          name: description\n          description: description to search for.\n          schema:\n            type: string\n        - in: query\n          name: handle\n          description: handle to search for.\n          schema:\n            type: string\n        - in: query\n          name: is_giftcard\n          description: Search for giftcards using is_giftcard=true.\n          schema:\n            type: boolean\n        - in: query\n          name: type\n          description: type ID to search for.\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting products were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting products were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: deleted_at\n          description: Date comparison for when resulting products were deleted.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: offset\n          description: How many products to skip in the result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of products returned.\n          schema:\n            type: integer\n            default: 50\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each product of\n            the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each product of\n            the result.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.list()\n\n            .then(({ products, limit, offset, count }) =\u003e {\n              console.log(products.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/products' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  products:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/product'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/products/{id}/variants':\n    post:\n      operationId: PostProductsProductVariants\n      summary: Create a Product Variant\n      description: \u003e-\n        Creates a Product Variant. Each Product Variant must have a unique\n        combination of Product Option Values.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - title\n                - prices\n                - options\n              properties:\n                title:\n                  description: The title to identify the Product Variant by.\n                  type: string\n                sku:\n                  description: The unique SKU for the Product Variant.\n                  type: string\n                ean:\n                  description: The EAN number of the item.\n                  type: string\n                upc:\n                  description: The UPC number of the item.\n                  type: string\n                barcode:\n                  description: A generic GTIN field for the Product Variant.\n                  type: string\n                hs_code:\n                  description: The Harmonized System code for the Product Variant.\n                  type: string\n                inventory_quantity:\n                  description: The amount of stock kept for the Product Variant.\n                  type: integer\n                  default: 0\n                allow_backorder:\n                  description: \u003e-\n                    Whether the Product Variant can be purchased when out of\n                    stock.\n                  type: boolean\n                manage_inventory:\n                  description: \u003e-\n                    Whether Medusa should keep track of the inventory for this\n                    Product Variant.\n                  type: boolean\n                weight:\n                  description: The wieght of the Product Variant.\n                  type: number\n                length:\n                  description: The length of the Product Variant.\n                  type: number\n                height:\n                  description: The height of the Product Variant.\n                  type: number\n                width:\n                  description: The width of the Product Variant.\n                  type: number\n                origin_country:\n                  description: The country of origin of the Product Variant.\n                  type: string\n                mid_code:\n                  description: \u003e-\n                    The Manufacturer Identification code for the Product\n                    Variant.\n                  type: string\n                material:\n                  description: The material composition of the Product Variant.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n                prices:\n                  type: array\n                  items:\n                    required:\n                      - amount\n                    properties:\n                      id:\n                        description: The ID of the price.\n                        type: string\n                      region_id:\n                        description: \u003e-\n                          The ID of the Region for which the price is used. Only\n                          required if currency_code is not provided.\n                        type: string\n                      currency_code:\n                        description: \u003e-\n                          The 3 character ISO currency code for which the price\n                          will be used. Only required if region_id is not\n                          provided.\n                        type: string\n                        externalDocs:\n                          url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                          description: See a list of codes.\n                      amount:\n                        description: The amount to charge for the Product Variant.\n                        type: integer\n                      min_quantity:\n                        description: The minimum quantity for which the price will be used.\n                        type: integer\n                      max_quantity:\n                        description: The maximum quantity for which the price will be used.\n                        type: integer\n                options:\n                  type: array\n                  items:\n                    required:\n                      - option_id\n                      - value\n                    properties:\n                      option_id:\n                        description: The ID of the Product Option to set the value for.\n                        type: string\n                      value:\n                        description: The value to give for the Product Option.\n                        type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.createVariant(product_id, {\n              title: 'Color',\n              prices: [\n                {\n                  amount: 1000,\n                  currency_code: \"eur\"\n                }\n              ],\n              options: [\n                {\n                  option_id,\n                  value: 'S'\n                }\n              ],\n              inventory_quantity: 100\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products/{id}/variants' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"Color\",\n                \"prices\": [\n                  {\n                    \"amount\": 1000,\n                    \"currency_code\": \"eur\"\n                  }\n                ],\n                \"options\": [\n                  {\n                    \"option_id\": \"asdasf\",\n                    \"value\": \"S\"\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetProductsProductVariants\n      summary: List a Product's Variants\n      description: Retrieves a list of the Product Variants associated with a Product.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the product to search for the variants.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Comma separated string of the column to select.\n          schema:\n            type: string\n        - in: query\n          name: expand\n          description: Comma separated string of the relations to include.\n          schema:\n            type: string\n        - in: query\n          name: offset\n          description: How many items to skip before the results.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of items returned.\n          schema:\n            type: integer\n            default: 100\n      x-codeSamples:\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/products/{id}/variants' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  variants:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/product_variant'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/products/{id}/options/{option_id}':\n    delete:\n      operationId: DeleteProductsProductOptionsOption\n      summary: Delete a Product Option\n      description: \u003e-\n        Deletes a Product Option. Before a Product Option can be deleted all\n        Option Values for the Product Option must be the same. You may, for\n        example, have to delete some of your variants prior to deleting the\n        Product Option\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n        - in: path\n          name: option_id\n          required: true\n          description: The ID of the Product Option.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.deleteOption(product_id, option_id)\n\n            .then(({ option_id, object, delete, product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/products/{id}/options/{option_id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  option_id:\n                    type: string\n                    description: The ID of the deleted Product Option\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: option\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostProductsProductOptionsOption\n      summary: Update a Product Option\n      description: Updates a Product Option\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n        - in: path\n          name: option_id\n          required: true\n          description: The ID of the Product Option.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - title\n              properties:\n                title:\n                  description: The title of the Product Option\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.updateOption(product_id, option_id, {\n              title: 'Size'\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products/{id}/options/{option_id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"Size\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/products/{id}':\n    delete:\n      operationId: DeleteProductsProduct\n      summary: Delete a Product\n      description: Deletes a Product and it's associated Product Variants.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.delete(product_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/products/asfsaf' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Product.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: product\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetProductsProduct\n      summary: Get a Product\n      description: Retrieves a Product.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.retrieve(product_id)\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/products/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostProductsProduct\n      summary: Update a Product\n      description: Updates a Product\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                title:\n                  description: The title of the Product\n                  type: string\n                subtitle:\n                  description: The subtitle of the Product\n                  type: string\n                description:\n                  description: A description of the Product.\n                  type: string\n                discountable:\n                  description: \u003e-\n                    A flag to indicate if discounts can be applied to the\n                    LineItems generated from this Product\n                  type: boolean\n                images:\n                  description: Images of the Product.\n                  type: array\n                  items:\n                    type: string\n                thumbnail:\n                  description: The thumbnail to use for the Product.\n                  type: string\n                handle:\n                  description: A unique handle to identify the Product by.\n                  type: string\n                status:\n                  description: The status of the product.\n                  type: string\n                  enum:\n                    - draft\n                    - proposed\n                    - published\n                    - rejected\n                type:\n                  description: The Product Type to associate the Product with.\n                  type: object\n                  required:\n                    - value\n                  properties:\n                    id:\n                      description: The ID of the Product Type.\n                      type: string\n                    value:\n                      description: The value of the Product Type.\n                      type: string\n                collection_id:\n                  description: The ID of the Collection the Product should belong to.\n                  type: string\n                tags:\n                  description: Tags to associate the Product with.\n                  type: array\n                  items:\n                    required:\n                      - value\n                    properties:\n                      id:\n                        description: The ID of an existing Tag.\n                        type: string\n                      value:\n                        description: 'The value of the Tag, these will be upserted.'\n                        type: string\n                sales_channels:\n                  description: '[EXPERIMENTAL] Sales channels to associate the Product with.'\n                  type: array\n                  items:\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: The ID of an existing Sales channel.\n                        type: string\n                variants:\n                  description: A list of Product Variants to create with the Product.\n                  type: array\n                  items:\n                    properties:\n                      id:\n                        description: The ID of the Product Variant.\n                        type: string\n                      title:\n                        description: The title to identify the Product Variant by.\n                        type: string\n                      sku:\n                        description: The unique SKU for the Product Variant.\n                        type: string\n                      ean:\n                        description: The EAN number of the item.\n                        type: string\n                      upc:\n                        description: The UPC number of the item.\n                        type: string\n                      barcode:\n                        description: A generic GTIN field for the Product Variant.\n                        type: string\n                      hs_code:\n                        description: The Harmonized System code for the Product Variant.\n                        type: string\n                      inventory_quantity:\n                        description: The amount of stock kept for the Product Variant.\n                        type: integer\n                      allow_backorder:\n                        description: \u003e-\n                          Whether the Product Variant can be purchased when out\n                          of stock.\n                        type: boolean\n                      manage_inventory:\n                        description: \u003e-\n                          Whether Medusa should keep track of the inventory for\n                          this Product Variant.\n                        type: boolean\n                      weight:\n                        description: The wieght of the Product Variant.\n                        type: number\n                      length:\n                        description: The length of the Product Variant.\n                        type: number\n                      height:\n                        description: The height of the Product Variant.\n                        type: number\n                      width:\n                        description: The width of the Product Variant.\n                        type: number\n                      origin_country:\n                        description: The country of origin of the Product Variant.\n                        type: string\n                      mid_code:\n                        description: \u003e-\n                          The Manufacturer Identification code for the Product\n                          Variant.\n                        type: string\n                      material:\n                        description: The material composition of the Product Variant.\n                        type: string\n                      metadata:\n                        description: \u003e-\n                          An optional set of key-value pairs with additional\n                          information.\n                        type: object\n                      prices:\n                        type: array\n                        items:\n                          required:\n                            - amount\n                          properties:\n                            id:\n                              description: The ID of the Price.\n                              type: string\n                            region_id:\n                              description: \u003e-\n                                The ID of the Region for which the price is\n                                used. Only required if currency_code is not\n                                provided.\n                              type: string\n                            currency_code:\n                              description: \u003e-\n                                The 3 character ISO currency code for which the\n                                price will be used. Only required if region_id\n                                is not provided.\n                              type: string\n                              externalDocs:\n                                url: \u003e-\n                                  https://en.wikipedia.org/wiki/ISO_4217#Active_codes\n                                description: See a list of codes.\n                            amount:\n                              description: The amount to charge for the Product Variant.\n                              type: integer\n                            min_quantity:\n                              description: \u003e-\n                                The minimum quantity for which the price will be\n                                used.\n                              type: integer\n                            max_quantity:\n                              description: \u003e-\n                                The maximum quantity for which the price will be\n                                used.\n                              type: integer\n                      options:\n                        type: array\n                        items:\n                          required:\n                            - option_id\n                            - value\n                          properties:\n                            option_id:\n                              description: The ID of the Option.\n                              type: string\n                            value:\n                              description: \u003e-\n                                The value to give for the Product Option at the\n                                same index in the Product's `options` field.\n                              type: string\n                weight:\n                  description: The wieght of the Product.\n                  type: number\n                length:\n                  description: The length of the Product.\n                  type: number\n                height:\n                  description: The height of the Product.\n                  type: number\n                width:\n                  description: The width of the Product.\n                  type: number\n                origin_country:\n                  description: The country of origin of the Product.\n                  type: string\n                mid_code:\n                  description: The Manufacturer Identification code for the Product.\n                  type: string\n                material:\n                  description: The material composition of the Product.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.update(product_id, {\n              title: 'Shirt',\n              images: []\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"Size\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/products/{id}/variants/{variant_id}':\n    delete:\n      operationId: DeleteProductsProductVariantsVariant\n      summary: Delete a Product Variant\n      description: Deletes a Product Variant.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n        - in: path\n          name: variant_id\n          required: true\n          description: The ID of the Product Variant.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.deleteVariant(product_id, variant_id)\n\n            .then(({ variant_id, object, deleted, product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/products/{id}/variants/{variant_id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  variant_id:\n                    type: string\n                    description: The ID of the deleted Product Variant.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: variant\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostProductsProductVariantsVariant\n      summary: Update a Product Variant\n      description: Update a Product Variant.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n        - in: path\n          name: variant_id\n          required: true\n          description: The ID of the Product Variant.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - prices\n              properties:\n                title:\n                  description: The title to identify the Product Variant by.\n                  type: string\n                sku:\n                  description: The unique SKU for the Product Variant.\n                  type: string\n                ean:\n                  description: The EAN number of the item.\n                  type: string\n                upc:\n                  description: The UPC number of the item.\n                  type: string\n                barcode:\n                  description: A generic GTIN field for the Product Variant.\n                  type: string\n                hs_code:\n                  description: The Harmonized System code for the Product Variant.\n                  type: string\n                inventory_quantity:\n                  description: The amount of stock kept for the Product Variant.\n                  type: integer\n                allow_backorder:\n                  description: \u003e-\n                    Whether the Product Variant can be purchased when out of\n                    stock.\n                  type: boolean\n                manage_inventory:\n                  description: \u003e-\n                    Whether Medusa should keep track of the inventory for this\n                    Product Variant.\n                  type: boolean\n                weight:\n                  description: The weight of the Product Variant.\n                  type: number\n                length:\n                  description: The length of the Product Variant.\n                  type: number\n                height:\n                  description: The height of the Product Variant.\n                  type: number\n                width:\n                  description: The width of the Product Variant.\n                  type: number\n                origin_country:\n                  description: The country of origin of the Product Variant.\n                  type: string\n                mid_code:\n                  description: \u003e-\n                    The Manufacturer Identification code for the Product\n                    Variant.\n                  type: string\n                material:\n                  description: The material composition of the Product Variant.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n                prices:\n                  type: array\n                  items:\n                    required:\n                      - amount\n                    properties:\n                      id:\n                        description: The ID of the price.\n                        type: string\n                      region_id:\n                        description: \u003e-\n                          The ID of the Region for which the price is used. Only\n                          required if currency_code is not provided.\n                        type: string\n                      currency_code:\n                        description: \u003e-\n                          The 3 character ISO currency code for which the price\n                          will be used. Only required if region_id is not\n                          provided.\n                        type: string\n                        externalDocs:\n                          url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                          description: See a list of codes.\n                      amount:\n                        description: The amount to charge for the Product Variant.\n                        type: integer\n                      min_quantity:\n                        description: The minimum quantity for which the price will be used.\n                        type: integer\n                      max_quantity:\n                        description: The maximum quantity for which the price will be used.\n                        type: integer\n                options:\n                  type: array\n                  items:\n                    required:\n                      - option_id\n                      - value\n                    properties:\n                      option_id:\n                        description: The ID of the Product Option to set the value for.\n                        type: string\n                      value:\n                        description: The value to give for the Product Option.\n                        type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.updateVariant(product_id, variant_id, {\n              title: 'Color',\n              prices: [\n                {\n                  amount: 1000,\n                  currency_code: \"eur\"\n                }\n              ],\n              options: [\n                {\n                  option_id,\n                  value: 'S'\n                }\n              ],\n              inventory_quantity: 100\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products/asfsaf/variants/saaga' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"title\": \"Color\",\n                \"prices\": [\n                  {\n                    \"amount\": 1000,\n                    \"currency_code\": \"eur\"\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /products/tag-usage:\n    get:\n      operationId: GetProductsTagUsage\n      summary: List Tags Usage Number\n      description: Retrieves a list of Product Tags with how many times each is used.\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.listTags()\n\n            .then(({ tags }) =\u003e {\n              console.log(tags.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/products/tag-usage' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product Tag\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tags:\n                    type: array\n                    items:\n                      properties:\n                        id:\n                          description: The ID of the tag.\n                          type: string\n                        usage_count:\n                          description: The number of products that use this tag.\n                          type: string\n                        value:\n                          description: The value of the tag.\n                          type: string\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /products/types:\n    get:\n      operationId: GetProductsTypes\n      summary: List Product Types\n      description: Retrieves a list of Product Types.\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.listTypes()\n\n            .then(({ types }) =\u003e {\n              console.log(types.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/products/types' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  types:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/product_type'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/products/{id}/metadata':\n    post:\n      operationId: PostProductsProductMetadata\n      summary: Set Product Metadata\n      description: Set metadata key/value pair for Product\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Product.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - key\n                - value\n              properties:\n                key:\n                  description: The metadata key\n                  type: string\n                value:\n                  description: The metadata value\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.products.setMetadata(product_id, {\n\n            key: 'test',\n              value: 'true'\n            })\n\n            .then(({ product }) =\u003e {\n              console.log(product.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/products/{id}/metadata' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"key\": \"test\",\n                \"value\": \"true\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  product:\n                    $ref: '#/components/schemas/product'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/countries':\n    post:\n      operationId: PostRegionsRegionCountries\n      summary: Add Country\n      description: Adds a Country to the list of Countries in a Region\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - country_code\n              properties:\n                country_code:\n                  description: The 2 character ISO code for the Country.\n                  type: string\n                  externalDocs:\n                    url: \u003e-\n                      https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n                    description: See a list of codes.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.addCountry(region_id, {\n              country_code: 'dk'\n            })\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/regions/{region_id}/countries' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"country_code\": \"dk\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/fulfillment-providers':\n    post:\n      operationId: PostRegionsRegionFulfillmentProviders\n      summary: Add Fulfillment Provider\n      description: Adds a Fulfillment Provider to a Region\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - provider_id\n              properties:\n                provider_id:\n                  description: The ID of the Fulfillment Provider to add.\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.addFulfillmentProvider(region_id, {\n              provider_id: 'manual'\n            })\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/regions/{id}/fulfillment-providers' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"provider_id\": \"manual\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/payment-providers':\n    post:\n      operationId: PostRegionsRegionPaymentProviders\n      summary: Add Payment Provider\n      description: Adds a Payment Provider to a Region\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - provider_id\n              properties:\n                provider_id:\n                  description: The ID of the Payment Provider to add.\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.addPaymentProvider(region_id, {\n              provider_id: 'manual'\n            })\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/regions/{id}/payment-providers' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"provider_id\": \"manual\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /regions:\n    post:\n      operationId: PostRegions\n      summary: Create a Region\n      description: Creates a Region\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n                - currency_code\n                - tax_rate\n                - payment_providers\n                - fulfillment_providers\n                - countries\n              properties:\n                name:\n                  description: The name of the Region\n                  type: string\n                currency_code:\n                  description: The 3 character ISO currency code to use for the Region.\n                  type: string\n                  externalDocs:\n                    url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                    description: See a list of codes.\n                tax_code:\n                  description: An optional tax code the Region.\n                  type: string\n                tax_rate:\n                  description: The tax rate to use on Orders in the Region.\n                  type: number\n                payment_providers:\n                  description: \u003e-\n                    A list of Payment Provider IDs that should be enabled for\n                    the Region\n                  type: array\n                  items:\n                    type: string\n                fulfillment_providers:\n                  description: \u003e-\n                    A list of Fulfillment Provider IDs that should be enabled\n                    for the Region\n                  type: array\n                  items:\n                    type: string\n                countries:\n                  description: \u003e-\n                    A list of countries' 2 ISO Characters that should be\n                    included in the Region.\n                  example:\n                    - US\n                  type: array\n                  items:\n                    type: string\n                includes_tax:\n                  description: '[EXPERIMENTAL] Tax included in prices of region'\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.create({\n              name: 'Europe',\n              currency_code: 'eur',\n              tax_rate: 0,\n              payment_providers: [\n                'manual'\n              ],\n              fulfillment_providers: [\n                'manual'\n              ],\n              countries: [\n                'DK'\n              ]\n            })\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/regions' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"Europe\",\n                \"currency_code\": \"eur\",\n                \"tax_rate\": 0,\n                \"payment_providers\": [\n                  \"manual\"\n                ],\n                \"fulfillment_providers\": [\n                  \"manual\"\n                ],\n                \"countries\": [\n                  \"DK\"\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetRegions\n      summary: List Regions\n      description: Retrieves a list of Regions.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: limit\n          schema:\n            type: integer\n            default: 50\n          required: false\n          description: limit the number of regions in response\n        - in: query\n          name: offset\n          schema:\n            type: integer\n            default: 0\n          required: false\n          description: Offset of regions in response (used for pagination)\n        - in: query\n          name: created_at\n          schema:\n            type: object\n          required: false\n          description: \u003e-\n            Date comparison for when resulting region was created, i.e. less\n            than, greater than etc.\n        - in: query\n          name: updated_at\n          schema:\n            type: object\n          required: false\n          description: \u003e-\n            Date comparison for when resulting region was updated, i.e. less\n            than, greater than etc.\n        - in: query\n          name: deleted_at\n          schema:\n            type: object\n          required: false\n          description: \u003e-\n            Date comparison for when resulting region was deleted, i.e. less\n            than, greater than etc.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.list()\n\n            .then(({ regions, limit, offset, count }) =\u003e {\n              console.log(regions.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET 'https://medusa-url.com/admin/regions'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  regions:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/region'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}':\n    delete:\n      operationId: DeleteRegionsRegion\n      summary: Delete a Region\n      description: Deletes a Region.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.delete(region_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/regions/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Region.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: region\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetRegionsRegion\n      summary: Get a Region\n      description: Retrieves a Region.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.retrieve(region_id)\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/regions/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostRegionsRegion\n      summary: Update a Region\n      description: Updates a Region\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the Region\n                  type: string\n                currency_code:\n                  description: The 3 character ISO currency code to use for the Region.\n                  type: string\n                  externalDocs:\n                    url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                    description: See a list of codes.\n                automatic_taxes:\n                  description: \u003e-\n                    If true Medusa will automatically calculate taxes for carts\n                    in this region. If false you have to manually call POST\n                    /carts/:id/taxes.\n                  type: boolean\n                gift_cards_taxable:\n                  description: \u003e-\n                    Whether gift cards in this region should be applied sales\n                    tax when purchasing a gift card\n                  type: boolean\n                tax_provider_id:\n                  description: \u003e-\n                    The ID of the tax provider to use; if null the system tax\n                    provider is used\n                  type: string\n                tax_code:\n                  description: An optional tax code the Region.\n                  type: string\n                tax_rate:\n                  description: The tax rate to use on Orders in the Region.\n                  type: number\n                includes_tax:\n                  description: '[EXPERIMENTAL] Tax included in prices of region'\n                  type: boolean\n                payment_providers:\n                  description: \u003e-\n                    A list of Payment Provider IDs that should be enabled for\n                    the Region\n                  type: array\n                  items:\n                    type: string\n                fulfillment_providers:\n                  description: \u003e-\n                    A list of Fulfillment Provider IDs that should be enabled\n                    for the Region\n                  type: array\n                  items:\n                    type: string\n                countries:\n                  description: \u003e-\n                    A list of countries' 2 ISO Characters that should be\n                    included in the Region.\n                  type: array\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.update(region_id, {\n              name: 'Europe'\n            })\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/regions/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"Europe\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/fulfillment-options':\n    get:\n      operationId: GetRegionsRegionFulfillmentOptions\n      summary: List Fulfillment Options\n      description: Gathers all the fulfillment options available to in the Region.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.retrieveFulfillmentOptions(region_id)\n\n            .then(({ fulfillment_options }) =\u003e {\n              console.log(fulfillment_options.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/regions/{id}/fulfillment-options' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  fulfillment_options:\n                    type: array\n                    items:\n                      properties:\n                        provider_id:\n                          type: string\n                          description: ID of the fulfillment provider\n                        options:\n                          type: array\n                          description: fulfillment provider options\n                          example:\n                            - id: manual-fulfillment\n                            - id: manual-fulfillment-return\n                              is_return: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/countries/{country_code}':\n    delete:\n      operationId: PostRegionsRegionCountriesCountry\n      summary: Delete Country\n      x-authenticated: true\n      description: Removes a Country from the list of Countries in a Region\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n        - in: path\n          name: country_code\n          description: The 2 character ISO code for the Country.\n          required: true\n          schema:\n            type: string\n            externalDocs:\n              url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n              description: See a list of codes.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.deleteCountry(region_id, 'dk')\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/regions/{id}/countries/dk' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/fulfillment-providers/{provider_id}':\n    delete:\n      operationId: PostRegionsRegionFulfillmentProvidersProvider\n      summary: Del. Fulfillment Provider\n      description: Removes a Fulfillment Provider.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n        - in: path\n          name: provider_id\n          required: true\n          description: The ID of the Fulfillment Provider.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.deleteFulfillmentProvider(region_id, 'manual')\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/regions/{id}/fulfillment-providers/manual'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/regions/{id}/payment-providers/{provider_id}':\n    delete:\n      operationId: PostRegionsRegionPaymentProvidersProvider\n      summary: Delete Payment Provider\n      description: Removes a Payment Provider.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Region.\n          schema:\n            type: string\n        - in: path\n          name: provider_id\n          required: true\n          description: The ID of the Payment Provider.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.regions.deletePaymentProvider(region_id, 'manual')\n\n            .then(({ region }) =\u003e {\n              console.log(region.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/regions/{id}/payment-providers/manual'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Region\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  region:\n                    $ref: '#/components/schemas/region'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /return-reasons:\n    post:\n      operationId: PostReturnReasons\n      summary: Create a Return Reason\n      description: Creates a Return Reason\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - label\n                - value\n              properties:\n                label:\n                  description: The label to display to the Customer.\n                  type: string\n                value:\n                  description: \u003e-\n                    The value that the Return Reason will be identified by. Must\n                    be unique.\n                  type: string\n                parent_return_reason_id:\n                  description: The ID of the parent return reason.\n                  type: string\n                description:\n                  description: An optional description to for the Reason.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returnReasons.create({\n              label: 'Damaged',\n              value: 'damaged'\n            })\n\n            .then(({ return_reason }) =\u003e {\n              console.log(return_reason.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/return-reasons' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"label\": \"Damaged\",\n                \"value\": \"damaged\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return Reason\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  return_reason:\n                    $ref: '#/components/schemas/return_reason'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetReturnReasons\n      summary: List Return Reasons\n      description: Retrieves a list of Return Reasons.\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returnReasons.list()\n\n            .then(({ return_reasons }) =\u003e {\n              console.log(return_reasons.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/return-reasons' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return Reason\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  return_reasons:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/return_reason'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/return-reasons/{id}':\n    delete:\n      operationId: DeleteReturnReason\n      summary: Delete a Return Reason\n      description: Deletes a return reason.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the return reason\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returnReasons.delete(return_reason_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/return-reasons/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return Reason\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted return reason\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: return_reason\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetReturnReasonsReason\n      summary: Get a Return Reason\n      description: Retrieves a Return Reason.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Return Reason.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returnReasons.retrieve(return_reason_id)\n\n            .then(({ return_reason }) =\u003e {\n              console.log(return_reason.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/return-reasons/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return Reason\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  return_reason:\n                    $ref: '#/components/schemas/return_reason'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostReturnReasonsReason\n      summary: Update a Return Reason\n      description: Updates a Return Reason\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Return Reason.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                label:\n                  description: The label to display to the Customer.\n                  type: string\n                value:\n                  description: \u003e-\n                    The value that the Return Reason will be identified by. Must\n                    be unique.\n                  type: string\n                description:\n                  description: An optional description to for the Reason.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returnReasons.update(return_reason_id, {\n              label: 'Damaged'\n            })\n\n            .then(({ return_reason }) =\u003e {\n              console.log(return_reason.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/return-reasons/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"label\": \"Damaged\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return Reason\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  return_reason:\n                    $ref: '#/components/schemas/return_reason'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/returns/{id}/cancel':\n    post:\n      operationId: PostReturnsReturnCancel\n      summary: Cancel a Return\n      description: Registers a Return as canceled.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Return.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returns.cancel(return_id)\n\n            .then(({ order }) =\u003e {\n              console.log(order.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/returns/{id}/cancel' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  order:\n                    $ref: '#/components/schemas/order'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /returns:\n    get:\n      operationId: GetReturns\n      summary: List Returns\n      description: Retrieves a list of Returns\n      parameters:\n        - in: query\n          name: limit\n          description: The upper limit for the amount of responses returned.\n          schema:\n            type: number\n            default: '50'\n        - in: query\n          name: offset\n          description: The offset of the list returned.\n          schema:\n            type: number\n            default: '0'\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returns.list()\n\n            .then(({ returns, limit, offset, count }) =\u003e {\n              console.log(returns.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET 'https://medusa-url.com/admin/returns'\n            \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  returns:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/return'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/returns/{id}/receive':\n    post:\n      operationId: PostReturnsReturnReceive\n      summary: Receive a Return\n      description: \u003e-\n        Registers a Return as received. Updates statuses on Orders and Swaps\n        accordingly.\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Return.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - items\n              properties:\n                items:\n                  description: The Line Items that have been received.\n                  type: array\n                  items:\n                    required:\n                      - item_id\n                      - quantity\n                    properties:\n                      item_id:\n                        description: The ID of the Line Item.\n                        type: string\n                      quantity:\n                        description: The quantity of the Line Item.\n                        type: integer\n                refund:\n                  description: The amount to refund.\n                  type: number\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.returns.receive(return_id, {\n              items: [\n                {\n                  item_id,\n                  quantity: 1\n                }\n              ]\n            })\n\n            .then(({ return }) =\u003e {\n              console.log(return.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/returns/{id}/receive' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"items\": [\n                  {\n                    \"item_id\": \"asafg\",\n                    \"quantity\": 1\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Return\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  return:\n                    $ref: '#/components/schemas/return'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/sales-channels/{id}/products/batch':\n    post:\n      operationId: PostSalesChannelsChannelProductsBatch\n      summary: Add Products\n      description: Assign a batch of product to a sales channel.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Sales channel.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - product_ids\n              properties:\n                product_ids:\n                  description: The IDs of the products to add to the Sales Channel\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - id\n                    properties:\n                      id:\n                        type: string\n                        description: The ID of the product\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.addProducts(sales_channel_id, {\n              product_ids: [\n                {\n                  id: product_id\n                }\n              ]\n            })\n\n            .then(({ sales_channel }) =\u003e {\n              console.log(sales_channel.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/sales-channels/afasf/products/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"product_ids\": [\n                  {\n                    \"id\": \"{product_id}\"\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  sales_channel:\n                    $ref: '#/components/schemas/sales_channel'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteSalesChannelsChannelProductsBatch\n      summary: Delete Products\n      description: Remove a list of products from a sales channel.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Sales Channel\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - product_ids\n              properties:\n                product_ids:\n                  description: The IDs of the products to delete from the Sales Channel.\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - id\n                    properties:\n                      id:\n                        description: The ID of a product\n                        type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.removeProducts(sales_channel_id, {\n              product_ids: [\n                {\n                  id: product_id\n                }\n              ]\n            })\n\n            .then(({ sales_channel }) =\u003e {\n              console.log(sales_channel.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/sales-channels/{id}/products/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"product_ids\": [\n                  {\n                    \"id\": \"{product_id}\"\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  sales_channel:\n                    $ref: '#/components/schemas/sales_channel'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /sales-channels:\n    post:\n      operationId: PostSalesChannels\n      summary: Create a Sales Channel\n      description: Creates a Sales Channel.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              properties:\n                name:\n                  description: The name of the Sales Channel\n                  type: string\n                description:\n                  description: The description of the Sales Channel\n                  type: string\n                is_disabled:\n                  description: Whether the Sales Channel is disabled or not.\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.create({\n              name: 'App',\n              description: 'Mobile app'\n            })\n\n            .then(({ sales_channel }) =\u003e {\n              console.log(sales_channel.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/sales-channels' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"App\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  sales_channel:\n                    $ref: '#/components/schemas/sales_channel'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetSalesChannels\n      summary: List Sales Channels\n      description: Retrieves a list of sales channels\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: id\n          description: ID of the sales channel\n          schema:\n            type: string\n        - in: query\n          name: name\n          description: Name of the sales channel\n          schema:\n            type: string\n        - in: query\n          name: description\n          description: Description of the sales channel\n          schema:\n            type: string\n        - in: query\n          name: q\n          description: Query used for searching sales channels' names and descriptions.\n          schema:\n            type: string\n        - in: query\n          name: order\n          description: The field to order the results by.\n          schema:\n            type: string\n        - in: query\n          name: created_at\n          description: Date comparison for when resulting collections were created.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: updated_at\n          description: Date comparison for when resulting collections were updated.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: deleted_at\n          description: Date comparison for when resulting collections were deleted.\n          schema:\n            type: object\n            properties:\n              lt:\n                type: string\n                description: filter by dates less than this date\n                format: date\n              gt:\n                type: string\n                description: filter by dates greater than this date\n                format: date\n              lte:\n                type: string\n                description: filter by dates less than or equal to this date\n                format: date\n              gte:\n                type: string\n                description: filter by dates greater than or equal to this date\n                format: date\n        - in: query\n          name: offset\n          description: How many sales channels to skip in the result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of sales channels returned.\n          schema:\n            type: integer\n            default: 20\n        - in: query\n          name: expand\n          description: \u003e-\n            (Comma separated) Which fields should be expanded in each sales\n            channel of the result.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: \u003e-\n            (Comma separated) Which fields should be included in each sales\n            channel of the result.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.list()\n\n            .then(({ sales_channels, limit, offset, count }) =\u003e {\n              console.log(sales_channels.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/sales-channels' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  sales_channels:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/sales_channel'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/sales-channels/{id}':\n    delete:\n      operationId: DeleteSalesChannelsSalesChannel\n      summary: Delete a Sales Channel\n      description: Deletes the sales channel.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Sales channel.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.delete(sales_channel_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/sales-channels/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted sales channel\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: sales-channel\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetSalesChannelsSalesChannel\n      summary: Get a Sales Channel\n      description: Retrieves the sales channel.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Sales channel.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.retrieve(sales_channel_id)\n\n            .then(({ sales_channel }) =\u003e {\n              console.log(sales_channel.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/sales-channels/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  sales_channel:\n                    $ref: '#/components/schemas/sales_channel'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostSalesChannelsSalesChannel\n      summary: Update a Sales Channel\n      description: Updates a Sales Channel.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Sales Channel.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  type: string\n                  description: Name of the sales channel.\n                description:\n                  type: string\n                  description: Sales Channel description.\n                is_disabled:\n                  type: boolean\n                  description: Indication of if the sales channel is active.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.salesChannels.update(sales_channel_id, {\n              name: 'App'\n            })\n\n            .then(({ sales_channel }) =\u003e {\n              console.log(sales_channel.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/sales-channels/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"App\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Sales Channel\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  sales_channel:\n                    $ref: '#/components/schemas/sales_channel'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /shipping-options:\n    post:\n      operationId: PostShippingOptions\n      summary: Create Shipping Option\n      description: Creates a Shipping Option\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n                - region_id\n                - provider_id\n                - data\n                - price_type\n              properties:\n                name:\n                  description: The name of the Shipping Option\n                  type: string\n                region_id:\n                  description: \u003e-\n                    The ID of the Region in which the Shipping Option will be\n                    available.\n                  type: string\n                provider_id:\n                  description: \u003e-\n                    The ID of the Fulfillment Provider that handles the Shipping\n                    Option.\n                  type: string\n                profile_id:\n                  description: \u003e-\n                    The ID of the Shipping Profile to add the Shipping Option\n                    to.\n                  type: number\n                data:\n                  description: \u003e-\n                    The data needed for the Fulfillment Provider to handle\n                    shipping with this Shipping Option.\n                  type: object\n                price_type:\n                  description: The type of the Shipping Option price.\n                  type: string\n                  enum:\n                    - flat_rate\n                    - calculated\n                amount:\n                  description: The amount to charge for the Shipping Option.\n                  type: integer\n                requirements:\n                  description: \u003e-\n                    The requirements that must be satisfied for the Shipping\n                    Option to be available.\n                  type: array\n                  items:\n                    required:\n                      - type\n                      - amount\n                    properties:\n                      type:\n                        description: The type of the requirement\n                        type: string\n                        enum:\n                          - max_subtotal\n                          - min_subtotal\n                      amount:\n                        description: The amount to compare with.\n                        type: integer\n                is_return:\n                  description: Whether the Shipping Option defines a return shipment.\n                  type: boolean\n                  default: false\n                admin_only:\n                  description: 'If true, the option can be used for draft orders'\n                  type: boolean\n                  default: false\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n                includes_tax:\n                  description: '[EXPERIMENTAL] Tax included in prices of shipping option'\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingOptions.create({\n              name: 'PostFake',\n              region_id: \"saasf\",\n              provider_id: \"manual\",\n              data: {\n              },\n              price_type: 'flat_rate'\n            })\n\n            .then(({ shipping_option }) =\u003e {\n              console.log(shipping_option.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/shipping-options' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"PostFake\",\n                \"region_id\": \"afasf\",\n                \"provider_id\": \"manual\",\n                \"data\": {},\n                \"price_type\": \"flat_rate\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Option\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_option:\n                    $ref: '#/components/schemas/shipping_option'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetShippingOptions\n      summary: List Shipping Options\n      description: Retrieves a list of Shipping Options.\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: region_id\n          schema:\n            type: string\n          description: Region ID to fetch options from\n        - in: query\n          name: is_return\n          schema:\n            type: boolean\n          description: Flag for fetching return options only\n        - in: query\n          name: admin_only\n          schema:\n            type: boolean\n          description: Flag for fetching admin specific options\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingOptions.list()\n\n            .then(({ shipping_options, count }) =\u003e {\n              console.log(shipping_options.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/shipping-options' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Option\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_options:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/shipping_option'\n                  count:\n                    type: integer\n                    description: The total number of items available\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/shipping-options/{id}':\n    delete:\n      operationId: DeleteShippingOptionsOption\n      summary: Delete a Shipping Option\n      description: Deletes a Shipping Option.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Option.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingOptions.delete(option_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/shipping-options/{option_id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Option\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Shipping Option.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: shipping-option\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetShippingOptionsOption\n      summary: Get a Shipping Option\n      description: Retrieves a Shipping Option.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Option.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingOptions.retrieve(option_id)\n\n            .then(({ shipping_option }) =\u003e {\n              console.log(shipping_option.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/shipping-options/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Option\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_option:\n                    $ref: '#/components/schemas/shipping_option'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostShippingOptionsOption\n      summary: Update Shipping Option\n      description: Updates a Shipping Option\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Option.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - requirements\n              properties:\n                name:\n                  description: The name of the Shipping Option\n                  type: string\n                amount:\n                  description: The amount to charge for the Shipping Option.\n                  type: integer\n                admin_only:\n                  description: 'If true, the option can be used for draft orders'\n                  type: boolean\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n                requirements:\n                  description: \u003e-\n                    The requirements that must be satisfied for the Shipping\n                    Option to be available.\n                  type: array\n                  items:\n                    required:\n                      - type\n                      - amount\n                    properties:\n                      id:\n                        description: The ID of the requirement\n                        type: string\n                      type:\n                        description: The type of the requirement\n                        type: string\n                        enum:\n                          - max_subtotal\n                          - min_subtotal\n                      amount:\n                        description: The amount to compare with.\n                        type: integer\n                includes_tax:\n                  description: '[EXPERIMENTAL] Tax included in prices of shipping option'\n                  type: boolean\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingOptions.update(option_id, {\n              name: 'PostFake',\n              requirements: [\n                {\n                  id,\n                  type: 'max_subtotal',\n                  amount: 1000\n                }\n              ]\n            })\n\n            .then(({ shipping_option }) =\u003e {\n              console.log(shipping_option.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/shipping-options/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"requirements\": [\n                  {\n                    \"type\": \"max_subtotal\",\n                    \"amount\": 1000\n                  }\n                ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Option\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_option:\n                    $ref: '#/components/schemas/shipping_option'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /shipping-profiles:\n    post:\n      operationId: PostShippingProfiles\n      summary: Create a Shipping Profile\n      description: Creates a Shipping Profile\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - name\n              properties:\n                name:\n                  description: The name of the Shipping Profile\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingProfiles.create({\n              name: 'Large Products'\n            })\n\n            .then(({ shipping_profile }) =\u003e {\n              console.log(shipping_profile.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/shipping-profiles' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"Large Products\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Profile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_profile:\n                    $ref: '#/components/schemas/shipping_profile'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetShippingProfiles\n      summary: List Shipping Profiles\n      description: Retrieves a list of Shipping Profile.\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingProfiles.list()\n\n            .then(({ shipping_profiles }) =\u003e {\n              console.log(shipping_profiles.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/shipping-profiles' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Profile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_profiles:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/shipping_profile'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/shipping-profiles/{id}':\n    delete:\n      operationId: DeleteShippingProfilesProfile\n      summary: Delete a Shipping Profile\n      description: Deletes a Shipping Profile.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Profile.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingProfiles.delete(profile_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/shipping-profiles/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Profile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Shipping Profile.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: shipping_profile\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetShippingProfilesProfile\n      summary: Get a Shipping Profile\n      description: Retrieves a Shipping Profile.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Profile.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingProfiles.retrieve(profile_id)\n\n            .then(({ shipping_profile }) =\u003e {\n              console.log(shipping_profile.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/shipping-profiles/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Profile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_profile:\n                    $ref: '#/components/schemas/shipping_profile'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostShippingProfilesProfile\n      summary: Update a Shipping Profile\n      description: Updates a Shipping Profile\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Profile.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the Shipping Profile\n                  type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.shippingProfiles.update(shipping_profile_id, {\n              name: 'Large Products'\n            })\n\n            .then(({ shipping_profile }) =\u003e {\n              console.log(shipping_profile.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/shipping-profiles/{id} \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"Large Products\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Shipping Profile\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  shipping_profile:\n                    $ref: '#/components/schemas/shipping_profile'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/store/currencies/{code}':\n    post:\n      operationId: PostStoreCurrenciesCode\n      summary: Add a Currency Code\n      description: Adds a Currency Code to the available currencies.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: code\n          required: true\n          description: The 3 character ISO currency code.\n          schema:\n            type: string\n            externalDocs:\n              url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n              description: See a list of codes.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.store.addCurrency('eur')\n\n            .then(({ store }) =\u003e {\n              console.log(store.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/store/currencies/eur' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  store:\n                    $ref: '#/components/schemas/store'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteStoreCurrenciesCode\n      summary: Delete a Currency Code\n      description: Removes a Currency Code from the available currencies.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: code\n          required: true\n          description: The 3 character ISO currency code.\n          schema:\n            type: string\n            externalDocs:\n              url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n              description: See a list of codes.\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.store.deleteCurrency('eur')\n\n            .then(({ store }) =\u003e {\n              console.log(store.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/store/currencies/eur' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  store:\n                    $ref: '#/components/schemas/store'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /store:\n    get:\n      operationId: GetStore\n      summary: Get Store details\n      description: Retrieves the Store details\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.store.retrieve()\n\n            .then(({ store }) =\u003e {\n              console.log(store.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request GET 'https://medusa-url.com/admin/store' \\\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  store:\n                    $ref: '#/components/schemas/store'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostStore\n      summary: Update Store Details\n      description: Updates the Store details\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the Store\n                  type: string\n                swap_link_template:\n                  description: \u003e-\n                    A template for Swap links - use `{{cart_id}}` to insert the\n                    Swap Cart id\n                  type: string\n                payment_link_template:\n                  description: \u003e-\n                    A template for payment links links - use `{{cart_id}}` to\n                    insert the Cart id\n                  type: string\n                invite_link_template:\n                  description: \u003e-\n                    A template for invite links - use `{{invite_token}}` to\n                    insert the invite token\n                  type: string\n                default_currency_code:\n                  description: The default currency code for the Store.\n                  type: string\n                  externalDocs:\n                    url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n                    description: See a list of codes.\n                currencies:\n                  description: Array of currencies in 2 character ISO code format.\n                  type: array\n                  items:\n                    type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.store.update({\n              name: 'Medusa Store'\n            })\n\n            .then(({ store }) =\u003e {\n              console.log(store.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST 'https://medusa-url.com/admin/store'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"Medusa Store\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  store:\n                    $ref: '#/components/schemas/store'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /store/payment-providers:\n    get:\n      operationId: GetStorePaymentProviders\n      summary: List Payment Providers\n      description: Retrieves the configured Payment Providers\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.store.listPaymentProviders()\n\n            .then(({ payment_providers }) =\u003e {\n              console.log(payment_providers.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/store/payment-providers' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  payment_providers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/payment_provider'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /store/tax-providers:\n    get:\n      operationId: GetStoreTaxProviders\n      summary: List Tax Providers\n      description: Retrieves the configured Tax Providers\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.store.listTaxProviders()\n\n            .then(({ tax_providers }) =\u003e {\n              console.log(tax_providers.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/store/tax-providers' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Store\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_providers:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/tax_provider'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/swaps/{id}':\n    get:\n      operationId: GetSwapsSwap\n      summary: Get a Swap\n      description: Retrieves a Swap.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Swap.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.swaps.retrieve(swap_id)\n\n            .then(({ swap }) =\u003e {\n              console.log(swap.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/swaps/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Swap\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  swap:\n                    $ref: '#/components/schemas/swap'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /swaps:\n    get:\n      operationId: GetSwaps\n      summary: List Swaps\n      description: Retrieves a list of Swaps.\n      parameters:\n        - in: query\n          name: limit\n          description: The upper limit for the amount of responses returned.\n          schema:\n            type: number\n            default: '50'\n        - in: query\n          name: offset\n          description: The offset of the list returned.\n          schema:\n            type: number\n            default: '0'\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.swaps.list()\n\n            .then(({ swaps }) =\u003e {\n              console.log(swaps.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request GET 'https://medusa-url.com/admin/swaps' \\\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Swap\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  swaps:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/swap'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/tax-rates/{id}/product-types/batch':\n    post:\n      operationId: PostTaxRatesTaxRateProductTypes\n      summary: Add to Product Types\n      description: Associates a Tax Rate with a list of Product Types\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - product_types\n              properties:\n                product_types:\n                  type: array\n                  description: \u003e-\n                    The IDs of the types of products to associate with this tax\n                    rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.addProductTypes(tax_rate_id, {\n              product_types: [\n                product_type_id\n              ]\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/tax-rates/{id}/product-types/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n               \"product_types\": [\n                 \"{product_type_id}\"\n               ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteTaxRatesTaxRateProductTypes\n      summary: Delete from Product Types\n      description: Removes a Tax Rate from a list of Product Types\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - product_types\n              properties:\n                product_types:\n                  type: array\n                  description: \u003e-\n                    The IDs of the types of products to remove association with\n                    this tax rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.removeProductTypes(tax_rate_id, {\n              product_types: [\n                product_type_id\n              ]\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/tax-rates/{id}/product-types/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n               \"product_types\": [\n                 \"{product_type_id}\"\n               ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/tax-rates/{id}/products/batch':\n    post:\n      operationId: PostTaxRatesTaxRateProducts\n      summary: Add to Products\n      description: Associates a Tax Rate with a list of Products\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - products\n              properties:\n                products:\n                  type: array\n                  description: The IDs of the products to associate with this tax rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.addProducts(tax_rate_id, {\n              products: [\n                product_id\n              ]\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/tax-rates/{id}/products/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n               \"products\": [\n                 \"{product_id}\"\n               ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteTaxRatesTaxRateProducts\n      summary: Delete from Products\n      description: Removes a Tax Rate from a list of Products\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - products\n              properties:\n                products:\n                  type: array\n                  description: \u003e-\n                    The IDs of the products to remove association with this tax\n                    rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.removeProducts(tax_rate_id, {\n              products: [\n                product_id\n              ]\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/tax-rates/{id}/products/batch' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n               \"products\": [\n                 \"{product_id}\"\n               ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/tax-rates/{id}/shipping-options/batch':\n    post:\n      operationId: PostTaxRatesTaxRateShippingOptions\n      summary: Add to Shipping Options\n      description: Associates a Tax Rate with a list of Shipping Options\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - shipping_options\n              properties:\n                shipping_options:\n                  type: array\n                  description: \u003e-\n                    The IDs of the shipping options to associate with this tax\n                    rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.addShippingOptions(tax_rate_id, {\n              shipping_options: [\n                shipping_option_id\n              ]\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/tax-rates/{id}/shipping-options/batch'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n               \"shipping_options\": [\n                 \"{shipping_option_id}\"\n               ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    delete:\n      operationId: DeleteTaxRatesTaxRateShippingOptions\n      summary: Del. for Shipping Options\n      description: Removes a Tax Rate from a list of Shipping Options\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - shipping_options\n              properties:\n                shipping_options:\n                  type: array\n                  description: \u003e-\n                    The IDs of the shipping options to remove association with\n                    this tax rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.removeShippingOptions(tax_rate_id, {\n              shipping_options: [\n                shipping_option_id\n              ]\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/tax-rates/{id}/shipping-options/batch'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n               \"shipping_options\": [\n                 \"{shipping_option_id}\"\n               ]\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /tax-rates:\n    post:\n      operationId: PostTaxRates\n      summary: Create a Tax Rate\n      description: Creates a Tax Rate\n      parameters:\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - code\n                - name\n                - region_id\n              properties:\n                code:\n                  type: string\n                  description: A code to identify the tax type by\n                name:\n                  type: string\n                  description: A human friendly name for the tax\n                region_id:\n                  type: string\n                  description: The ID of the Region that the rate belongs to\n                rate:\n                  type: number\n                  description: The numeric rate to charge\n                products:\n                  type: array\n                  description: The IDs of the products associated with this tax rate\n                  items:\n                    type: string\n                shipping_options:\n                  type: array\n                  description: \u003e-\n                    The IDs of the shipping options associated with this tax\n                    rate\n                  items:\n                    type: string\n                product_types:\n                  type: array\n                  description: \u003e-\n                    The IDs of the types of products associated with this tax\n                    rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.create({\n              code: 'TEST',\n              name: 'New Tax Rate',\n              region_id\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/tax-rates' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"code\": \"TEST\",\n                \"name\": \"New Tax Rate\",\n                \"region_id\": \"{region_id}\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetTaxRates\n      summary: List Tax Rates\n      description: Retrieves a list of TaxRates\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: name\n          description: Name of tax rate to retrieve\n          schema:\n            type: string\n        - in: query\n          name: region_id\n          style: form\n          explode: false\n          description: Filter by Region ID\n          schema:\n            oneOf:\n              - type: string\n              - type: array\n                items:\n                  type: string\n        - in: query\n          name: code\n          description: code to search for.\n          schema:\n            type: string\n        - in: query\n          name: rate\n          style: form\n          explode: false\n          description: Filter by Rate\n          schema:\n            oneOf:\n              - type: number\n              - type: object\n                properties:\n                  lt:\n                    type: number\n                    description: filter by rates less than this number\n                  gt:\n                    type: number\n                    description: filter by rates greater than this number\n                  lte:\n                    type: number\n                    description: filter by rates less than or equal to this number\n                  gte:\n                    type: number\n                    description: filter by rates greater than or equal to this number\n        - in: query\n          name: offset\n          description: How many tax rates to skip before retrieving the result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of tax rates returned.\n          schema:\n            type: integer\n            default: 50\n        - in: query\n          name: fields\n          description: Which fields should be included in each item.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved for each item.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.list()\n\n            .then(({ tax_rates, limit, offset, count }) =\u003e {\n              console.log(tax_rates.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/tax-rates' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rates:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/tax_rate'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/tax-rates/{id}':\n    delete:\n      operationId: DeleteTaxRatesTaxRate\n      summary: Delete a Tax Rate\n      description: Deletes a Tax Rate\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the Shipping Option.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.delete(tax_rate_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/tax-rates/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted Shipping Option.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: tax-rate\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetTaxRatesTaxRate\n      summary: Get a Tax Rate\n      description: Retrieves a TaxRate\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.retrieve(tax_rate_id)\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/tax-rates/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostTaxRatesTaxRate\n      summary: Update a Tax Rate\n      description: Updates a Tax Rate\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: ID of the tax rate.\n          schema:\n            type: string\n        - in: query\n          name: fields\n          description: Which fields should be included in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: expand\n          description: Which fields should be expanded and retrieved in the result.\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                code:\n                  type: string\n                  description: A code to identify the tax type by\n                name:\n                  type: string\n                  description: A human friendly name for the tax\n                region_id:\n                  type: string\n                  description: The ID of the Region that the rate belongs to\n                rate:\n                  type: number\n                  description: The numeric rate to charge\n                products:\n                  type: array\n                  description: The IDs of the products associated with this tax rate\n                  items:\n                    type: string\n                shipping_options:\n                  type: array\n                  description: \u003e-\n                    The IDs of the shipping options associated with this tax\n                    rate\n                  items:\n                    type: string\n                product_types:\n                  type: array\n                  description: \u003e-\n                    The IDs of the types of products associated with this tax\n                    rate\n                  items:\n                    type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.taxRates.update(tax_rate_id, {\n              name: 'New Tax Rate'\n            })\n\n            .then(({ tax_rate }) =\u003e {\n              console.log(tax_rate.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/tax-rates/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"name\": \"New Tax Rate\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Tax Rate\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  tax_rate:\n                    $ref: '#/components/schemas/tax_rate'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /uploads:\n    post:\n      operationId: PostUploads\n      summary: Upload files\n      description: \u003e-\n        Uploads at least one file to the specific fileservice that is installed\n        in Medusa.\n      x-authenticated: true\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                files:\n                  type: string\n                  format: binary\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.uploads.create(file)\n\n            .then(({ uploads }) =\u003e {\n              console.log(uploads.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/uploads' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: image/jpeg' \\\n\n            --form 'files=@\"\u003cFILE_PATH_1\u003e\"' \\\n\n            --form 'files=@\"\u003cFILE_PATH_1\u003e\"'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Upload\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  uploads:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        url:\n                          type: string\n                          description: The URL of the uploaded file.\n                          format: uri\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /users:\n    post:\n      operationId: PostUsers\n      summary: Create a User\n      description: Creates a User\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n                - password\n              properties:\n                email:\n                  description: The Users email.\n                  type: string\n                  format: email\n                first_name:\n                  description: The name of the User.\n                  type: string\n                last_name:\n                  description: The name of the User.\n                  type: string\n                role:\n                  description: Userrole assigned to the user.\n                  type: string\n                  enum:\n                    - admin\n                    - member\n                    - developer\n                password:\n                  description: The Users password.\n                  type: string\n                  format: password\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.create({\n              email: 'user@example.com',\n              password: 'supersecret'\n            })\n\n            .then(({ user }) =\u003e {\n              console.log(user.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST 'https://medusa-url.com/admin/users'\n            \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"email\": \"user@example.com\",\n                \"password\": \"supersecret\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  user:\n                    $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetUsers\n      summary: List Users\n      description: Retrieves all users.\n      x-authenticated: true\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.list()\n\n            .then(({ users }) =\u003e {\n              console.log(users.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: |\n            curl --location --request GET 'https://medusa-url.com/admin/users' \\\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  '/users/{id}':\n    delete:\n      operationId: DeleteUsersUser\n      summary: Delete a User\n      description: Deletes a User\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the User.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.delete(user_id)\n\n            .then(({ id, object, deleted }) =\u003e {\n              console.log(id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request DELETE\n            'https://medusa-url.com/admin/users/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the deleted user.\n                  object:\n                    type: string\n                    description: The type of the object that was deleted.\n                    default: user\n                  deleted:\n                    type: boolean\n                    description: Whether or not the items were deleted.\n                    default: true\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    get:\n      operationId: GetUsersUser\n      summary: Get a User\n      description: Retrieves a User.\n      x-authenticated: true\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the User.\n          schema:\n            type: string\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.retrieve(user_id)\n\n            .then(({ user }) =\u003e {\n              console.log(user.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/users/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  user:\n                    $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n    post:\n      operationId: PostUsersUser\n      summary: Update a User\n      description: Updates a User\n      parameters:\n        - in: path\n          name: id\n          required: true\n          description: The ID of the User.\n          schema:\n            type: string\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                first_name:\n                  description: The name of the User.\n                  type: string\n                last_name:\n                  description: The name of the User.\n                  type: string\n                role:\n                  description: Userrole assigned to the user.\n                  type: string\n                  enum:\n                    - admin\n                    - member\n                    - developer\n                api_token:\n                  description: The api token of the User.\n                  type: string\n                metadata:\n                  description: \u003e-\n                    An optional set of key-value pairs with additional\n                    information.\n                  type: object\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.update(user_id, {\n              first_name: 'Marcellus'\n            })\n\n            .then(({ user }) =\u003e {\n              console.log(user.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/users/{id}' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"first_name\": \"Marcellus\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  user:\n                    $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /users/password-token:\n    post:\n      operationId: PostUsersUserPasswordToken\n      summary: Request Password Reset\n      description: Generates a password token for a User with a given email.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - email\n              properties:\n                email:\n                  description: The Users email.\n                  type: string\n                  format: email\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.sendResetPasswordToken({\n              email: 'user@example.com'\n            })\n\n            .then(() =\u003e {\n              // successful\n            })\n\n            .catch(() =\u003e {\n              // error occurred\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/users/password-token' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"email\": \"user@example.com\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '204':\n          description: OK\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /users/reset-password:\n    post:\n      operationId: PostUsersUserPassword\n      summary: Reset Password\n      description: Sets the password for a User given the correct token.\n      x-authenticated: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - token\n                - password\n              properties:\n                email:\n                  description: The Users email.\n                  type: string\n                  format: email\n                token:\n                  description: The token generated from the 'password-token' endpoint.\n                  type: string\n                password:\n                  description: The Users new password.\n                  type: string\n                  format: password\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.users.resetPassword({\n              token: 'supersecrettoken',\n              password: 'supersecret'\n            })\n\n            .then(({ user }) =\u003e {\n              console.log(user.id);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request POST\n            'https://medusa-url.com/admin/users/reset-password' \\\n\n            --header 'Authorization: Bearer {api_token}' \\\n\n            --header 'Content-Type: application/json' \\\n\n            --data-raw '{\n                \"token\": \"supersecrettoken\",\n                \"password\": \"supersecret\"\n            }'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - User\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  user:\n                    $ref: '#/components/schemas/user'\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\n  /variants:\n    get:\n      operationId: GetVariants\n      summary: List Product Variants\n      description: Retrieves a list of Product Variants\n      x-authenticated: true\n      parameters:\n        - in: query\n          name: q\n          description: Query used for searching variants.\n          schema:\n            type: string\n        - in: query\n          name: offset\n          description: How many variants to skip in the result.\n          schema:\n            type: integer\n            default: 0\n        - in: query\n          name: limit\n          description: Limit the number of variants returned.\n          schema:\n            type: integer\n            default: 20\n      x-codeSamples:\n        - lang: JavaScript\n          label: JS Client\n          source: \u003e\n            import Medusa from \"@medusajs/medusa-js\"\n\n            const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries:\n            3 })\n\n            // must be previously logged in or use api token\n\n            medusa.admin.variants.list()\n\n            .then(({ variants, limit, offset, count }) =\u003e {\n              console.log(variants.length);\n            });\n        - lang: Shell\n          label: cURL\n          source: \u003e\n            curl --location --request GET\n            'https://medusa-url.com/admin/variants' \\\n\n            --header 'Authorization: Bearer {api_token}'\n      security:\n        - api_token: []\n        - cookie_auth: []\n      tags:\n        - Product Variant\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                properties:\n                  variants:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/product_variant'\n                  count:\n                    type: integer\n                    description: The total number of items available\n                  offset:\n                    type: integer\n                    description: The number of items skipped before these items\n                  limit:\n                    type: integer\n                    description: The number of items per page\n        '400':\n          $ref: '#/components/responses/400_error'\n        '401':\n          $ref: '#/components/responses/unauthorized'\n        '404':\n          $ref: '#/components/responses/not_found_error'\n        '409':\n          $ref: '#/components/responses/invalid_state_error'\n        '422':\n          $ref: '#/components/responses/invalid_request_error'\n        '500':\n          $ref: '#/components/responses/500_error'\ncomponents:\n  responses:\n    default_error:\n      description: Default Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          example:\n            code: unknown_error\n            message: An unknown error occurred.\n            type: unknown_error\n    invalid_state_error:\n      description: Invalid State Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          example:\n            code: unknown_error\n            message: \u003e-\n              The request conflicted with another request. You may retry the\n              request with the provided Idempotency-Key.\n            type: QueryRunnerAlreadyReleasedError\n    invalid_request_error:\n      description: Invalid Request Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          example:\n            code: invalid_request_error\n            message: Discount with code TEST already exists.\n            type: duplicate_error\n    not_found_error:\n      description: Not Found Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          example:\n            message: Entity with id 1 was not found\n            type: not_found\n    400_error:\n      description: Client Error or Multiple Errors\n      content:\n        application/json:\n          schema:\n            oneOf:\n              - $ref: '#/components/schemas/error'\n              - $ref: '#/components/schemas/multiple_errors'\n          examples:\n            not_allowed:\n              $ref: '#/components/examples/not_allowed_error'\n            invalid_data:\n              $ref: '#/components/examples/invalid_data_error'\n            multiple_errors:\n              $ref: '#/components/examples/multiple_errors'\n    500_error:\n      description: Server Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/error'\n          examples:\n            database:\n              $ref: '#/components/examples/database_error'\n            unexpected_state:\n              $ref: '#/components/examples/unexpected_state_error'\n            invalid_argument:\n              $ref: '#/components/examples/invalid_argument_error'\n            default_error:\n              $ref: '#/components/examples/default_error'\n    unauthorized:\n      description: User is not authorized. Must log in first\n      content:\n        text/plain:\n          schema:\n            type: string\n            default: Unauthorized\n            example: Unauthorized\n    incorrect_credentials:\n      description: User does not exist or incorrect credentials\n      content:\n        text/plain:\n          schema:\n            type: string\n            default: Unauthorized\n            example: Unauthorized\n  examples:\n    not_allowed_error:\n      summary: Not Allowed Error\n      value:\n        message: Discount must be set to dynamic\n        type: not_allowed\n    invalid_data_error:\n      summary: Invalid Data Error\n      value:\n        message: first_name must be a string\n        type: invalid_data\n    multiple_errors:\n      summary: Multiple Errors\n      value:\n        message: \u003e-\n          Provided request body contains errors. Please check the data and retry\n          the request\n        errors:\n          - message: first_name must be a string\n            type: invalid_data\n          - message: Discount must be set to dynamic\n            type: not_allowed\n    database_error:\n      summary: Database Error\n      value:\n        code: api_error\n        message: An error occured while hashing password\n        type: database_error\n    unexpected_state_error:\n      summary: Unexpected State Error\n      value:\n        message: cart.total must be defined\n        type: unexpected_state\n    invalid_argument_error:\n      summary: Invalid Argument Error\n      value:\n        message: cart.total must be defined\n        type: unexpected_state\n    default_error:\n      summary: Default Error\n      value:\n        code: unknown_error\n        message: An unknown error occurred.\n        type: unknown_error\n  securitySchemes:\n    api_token:\n      type: http\n      x-displayName: API Token\n      description: \u003e\n        Use a user's API Token to send authenticated requests.\n\n\n        ### How to Add API Token to a User\n\n\n        At the moment, there's no direct way of adding an API Token for a user.\n        The only way it can be done is through directly editing the database.\n\n\n        If you're using a PostgreSQL database, you can run the following\n        commands in your command line to add API token:\n\n\n        ```bash\n\n        psql -d \u003cDB_NAME\u003e -U \u003cDB_USER\u003e\n\n        UPDATE public.user SET api_token='\u003cAPI_TOKEN\u003e' WHERE\n        email='\u003cUSER_EMAIL\u003e';\n\n        ```\n\n\n        Where:\n\n        - `\u003cDB_NAME\u003e` is the name of the database schema you use for the Medusa\n        server.\n\n        - `\u003cDB_USER\u003e` is the name of the user that has privileges over the\n        database schema.\n\n        - `\u003cAPI_TOKEN\u003e` is the API token you want to associate with the user.\n        You can use [this tool to generate a random\n        token](https://randomkeygen.com/).\n\n        - `\u003cUSER_EMAIL\u003e` is the email address of the admin user you want to have\n        this API token.\n\n\n        ### How to Use the API Token\n\n\n        The API token can be used for Bearer Authentication. It's passed in the\n        `Authorization` header as the following:\n\n\n        ```\n\n        Authorization: Bearer {api_token}\n\n        ```\n\n\n        In this API reference, you'll find in the cURL request samples the use\n        of `{api_token}`. This is where you must pass the API token.\n\n\n        If you're alternatively following along with the JS Client request\n        samples, you must provide the `apiKey` option when creating the Medusa\n        client:\n\n\n        ```js\n\n        const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3,\n        apiKey: '{api_token}' })\n\n        ```\n      scheme: bearer\n    cookie_auth:\n      type: apiKey\n      in: cookie\n      name: connect.sid\n      x-displayName: Cookie Session ID\n      description: \u003e\n        Use a cookie session to send authenticated requests.\n\n\n        ### How to Obtain the Cookie Session\n\n\n        If you're sending requests through a browser, using JS Client, or using\n        tools like Postman, the cookie session should be automatically set when\n        the admin user is logged in.\n\n\n        If you're sending requests using cURL, you must set the Session ID in\n        the cookie manually.\n\n\n        To do that, send a request to [authenticate the\n        user](#tag/Auth/operation/PostAuth) and pass the cURL option `-v`:\n\n\n        ```bash\n\n        curl -v --location --request POST 'https://medusa-url.com/admin/auth' \\\n\n        --header 'Content-Type: application/json' \\\n\n        --data-raw '{\n          \"email\": \"user@example.com\",\n          \"password\": \"supersecret\"\n        }'\n\n        ```\n\n\n        The headers will be logged in the terminal as well as the response. You\n        should find in the headers a Cookie header similar to this:\n\n\n        ```bash\n\n        Set-Cookie:\n        connect.sid=s%3A2Bu8BkaP9JUfHu9rG59G16Ma0QZf6Gj1.WT549XqX37PN8n0OecqnMCq798eLjZC5IT7yiDCBHPM;\n\n        ```\n\n\n        Copy the value after `connect.sid` (without the `;` at the end) and pass\n        it as a cookie in subsequent requests as the following:\n\n\n        ```bash\n\n        curl --location --request GET 'https://medusa-url.com/admin/products' \\\n\n        --header 'Cookie: connect.sid={sid}'\n\n        ```\n\n\n        Where `{sid}` is the value of `connect.sid` that you copied.\n  schemas:\n    address:\n      title: Address\n      description: An address.\n      x-resourceId: address\n      properties:\n        id:\n          type: string\n          description: ID of the address\n          example: addr_01G8ZC9VS1XVE149MGH2J7QSSH\n        customer_id:\n          type: string\n          description: ID of the customer this address belongs to\n          example: cus_01G2SG30J8C85S4A5CHM2S1NS2\n        customer:\n          description: Available if the relation `customer` is expanded.\n          type: array\n          items:\n            type: object\n            description: A customer object.\n        company:\n          type: string\n          description: Company name\n          example: Acme\n        first_name:\n          type: string\n          description: First name\n          example: Arno\n        last_name:\n          type: string\n          description: Last name\n          example: Willms\n        address_1:\n          type: string\n          description: Address line 1\n          example: 14433 Kemmer Court\n        address_2:\n          type: string\n          description: Address line 2\n          example: Suite 369\n        city:\n          type: string\n          description: City\n          example: South Geoffreyview\n        country_code:\n          type: string\n          description: The 2 character ISO code of the country in lower case\n          externalDocs:\n            url: \u003e-\n              https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n            description: See a list of codes.\n          example: st\n        country:\n          description: A country object. Available if the relation `country` is expanded.\n          type: object\n        province:\n          type: string\n          description: Province\n          example: Kentucky\n        postal_code:\n          type: string\n          description: Postal Code\n          example: 72093\n        phone:\n          type: string\n          description: Phone Number\n          example: 16128234334802\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    batch_job:\n      title: Batch Job\n      description: A Batch Job.\n      x-resourceId: batch_job\n      required:\n        - type\n      properties:\n        id:\n          type: string\n          description: The unique identifier for the batch job.\n          example: batch_01G8T782965PYFG0751G0Z38B4\n        type:\n          type: string\n          description: The type of batch job.\n          enum:\n            - product-import\n            - product-export\n        status:\n          type: string\n          description: The status of the batch job.\n          enum:\n            - created\n            - pre_processed\n            - confirmed\n            - processing\n            - completed\n            - canceled\n            - failed\n          default: created\n        created_by:\n          type: string\n          description: The unique identifier of the user that created the batch job.\n          example: usr_01G1G5V26F5TB3GPAPNJ8X1S3V\n        created_by_user:\n          description: \u003e-\n            A user object. Available if the relation `created_by_user` is\n            expanded.\n          type: object\n        context:\n          type: object\n          description: \u003e-\n            The context of the batch job, the type of the batch job determines\n            what the context should contain.\n          example:\n            shape:\n              prices:\n                - region: null\n                  currency_code: eur\n              dynamicImageColumnCount: 4\n              dynamicOptionColumnCount: 2\n            list_config:\n              skip: 0\n              take: 50\n              order:\n                created_at: DESC\n              relations:\n                - variants\n                - variant.prices\n                - images\n        dry_run:\n          type: boolean\n          description: Specify if the job must apply the modifications or not.\n          default: false\n        result:\n          type: object\n          description: The result of the batch job.\n          properties:\n            count:\n              type: number\n            advancement_count:\n              type: number\n            progress:\n              type: number\n            errors:\n              type: object\n              properties:\n                message:\n                  type: string\n                code:\n                  oneOf:\n                    - type: string\n                    - type: number\n                err:\n                  type: array\n            stat_descriptors:\n              type: object\n              properties:\n                key:\n                  type: string\n                name:\n                  type: string\n                message:\n                  type: string\n            file_key:\n              type: string\n            file_size:\n              type: number\n          example:\n            errors:\n              - err: []\n                code: unknown\n                message: Method not implemented.\n            stat_descriptors:\n              - key: product-export-count\n                name: Product count to export\n                message: There will be 8 products exported by this action\n        pre_processed_at:\n          type: string\n          description: The date from which the job has been pre processed.\n          format: date-time\n        processing_at:\n          type: string\n          description: The date the job is processing at.\n          format: date-time\n        confirmed_at:\n          type: string\n          description: The date when the confirmation has been done.\n          format: date-time\n        completed_at:\n          type: string\n          description: The date of the completion.\n          format: date-time\n        canceled_at:\n          type: string\n          description: The date of the concellation.\n          format: date-time\n        failed_at:\n          type: string\n          description: The date when the job failed.\n          format: date-time\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was last updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n    cart:\n      title: Cart\n      description: Represents a user cart\n      x-resourceId: cart\n      properties:\n        id:\n          type: string\n          description: The cart's ID\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        email:\n          type: string\n          description: The email associated with the cart\n          format: email\n        billing_address_id:\n          type: string\n          description: The billing address's ID\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        billing_address:\n          description: Available if the relation `billing_address` is expanded.\n          $ref: '#/components/schemas/address'\n        shipping_address_id:\n          type: string\n          description: The shipping address's ID\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        shipping_address:\n          description: Available if the relation `shipping_address` is expanded.\n          $ref: '#/components/schemas/address'\n        items:\n          description: Available if the relation `items` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/line_item'\n        region_id:\n          type: string\n          description: The region's ID\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n        discounts:\n          type: array\n          description: Available if the relation `discounts` is expanded.\n          items:\n            type: object\n            description: A discount object.\n        gift_cards:\n          type: array\n          description: Available if the relation `gift_cards` is expanded.\n          items:\n            type: object\n            description: A gift card object.\n        customer_id:\n          type: string\n          description: The customer's ID\n          example: cus_01G2SG30J8C85S4A5CHM2S1NS2\n        customer:\n          description: A customer object. Available if the relation `customer` is expanded.\n          type: object\n        payment_session:\n          description: The selected payment session in the cart.\n          $ref: '#/components/schemas/payment_session'\n        payment_sessions:\n          type: array\n          description: The payment sessions created on the cart.\n          items:\n            $ref: '#/components/schemas/payment_session'\n        payment_id:\n          type: string\n          description: The payment's ID if available\n          example: pay_01G8ZCC5W42ZNY842124G7P5R9\n        payment:\n          description: Available if the relation `payment` is expanded.\n          $ref: '#/components/schemas/payment'\n        shipping_methods:\n          type: array\n          description: The shipping methods added to the cart.\n          items:\n            $ref: '#/components/schemas/shipping_method'\n        type:\n          type: string\n          description: The cart's type.\n          enum:\n            - default\n            - swap\n            - draft_order\n            - payment_link\n            - claim\n          default: default\n        completed_at:\n          type: string\n          description: The date with timezone at which the cart was completed.\n          format: date-time\n        payment_authorized_at:\n          type: string\n          description: The date with timezone at which the payment was authorized.\n          format: date-time\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of a cart in\n            case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        context:\n          type: object\n          description: \u003e-\n            The context of the cart which can include info like IP or user\n            agent.\n          example:\n            ip: '::1'\n            user_agent: PostmanRuntime/7.29.2\n        sales_channel_id:\n          type: string\n          description: The sales channel ID the cart is associated with.\n          example: null\n        sales_channel:\n          description: \u003e-\n            A sales channel object. Available if the relation `sales_channel` is\n            expanded.\n          type: object\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n        shipping_total:\n          type: integer\n          description: The total of shipping\n          example: 1000\n        discount_total:\n          type: integer\n          description: The total of discount\n          example: 800\n        tax_total:\n          type: integer\n          description: The total of tax\n          example: 0\n        refunded_total:\n          type: integer\n          description: \u003e-\n            The total amount refunded if the order associated with this cart is\n            returned.\n          example: 0\n        total:\n          type: integer\n          description: The total amount of the cart\n          example: 8200\n        subtotal:\n          type: integer\n          description: The subtotal of the cart\n          example: 8000\n        refundable_amount:\n          type: integer\n          description: The amount that can be refunded\n          example: 8200\n        gift_card_total:\n          type: integer\n          description: The total of gift cards\n          example: 0\n        gift_card_tax_total:\n          type: integer\n          description: The total of gift cards with taxes\n          example: 0\n    claim_image:\n      title: Claim Image\n      description: Represents photo documentation of a claim.\n      x-resourceId: claim_image\n      required:\n        - claim_item_id\n        - url\n      properties:\n        id:\n          type: string\n          description: The claim image's ID\n          example: cimg_01G8ZH853Y6TFXWPG5EYE81X63\n        claim_item_id:\n          type: string\n          description: The ID of the claim item associated with the image\n        claim_item:\n          description: \u003e-\n            A claim item object. Available if the relation `claim_item` is\n            expanded.\n          type: object\n        url:\n          type: string\n          description: The URL of the image\n          format: uri\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    claim_item:\n      title: Claim Item\n      description: \u003e-\n        Represents a claimed item along with information about the reasons for\n        the claim.\n      x-resourceId: claim_item\n      required:\n        - claim_order_id\n        - item_id\n        - variant_id\n        - reason\n        - quantity\n      properties:\n        id:\n          type: string\n          description: The claim item's ID\n          example: citm_01G8ZH853Y6TFXWPG5EYE81X63\n        images:\n          type: array\n          description: Available if the relation `images` is expanded.\n          items:\n            $ref: '#/components/schemas/claim_image'\n        claim_order_id:\n          description: The ID of the claim this item is associated with.\n          type: string\n        claim_order:\n          description: \u003e-\n            A claim order object. Available if the relation `claim_order` is\n            expanded.\n          type: object\n        item_id:\n          description: The ID of the line item that the claim item refers to.\n          type: string\n          example: item_01G8ZM25TN49YV9EQBE2NC27KC\n        item:\n          description: Available if the relation `item` is expanded.\n          $ref: '#/components/schemas/line_item'\n        variant_id:\n          description: The ID of the product variant that is claimed.\n          type: string\n          example: variant_01G1G5V2MRX2V3PVSR2WXYPFB6\n        variant:\n          description: A variant object. Available if the relation `variant` is expanded.\n          type: object\n        reason:\n          description: The reason for the claim\n          type: string\n          enum:\n            - missing_item\n            - wrong_item\n            - production_failure\n            - other\n        note:\n          description: 'An optional note about the claim, for additional information'\n          type: string\n          example: I don't like it.\n        quantity:\n          description: \u003e-\n            The quantity of the item that is being claimed; must be less than or\n            equal to the amount purchased in the original order.\n          type: integer\n          example: 1\n        tags:\n          description: \u003e-\n            User defined tags for easy filtering and grouping. Available if the\n            relation 'tags' is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/claim_tag'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    claim_order:\n      title: Claim Order\n      description: \u003e-\n        Claim Orders represent a group of faulty or missing items. Each claim\n        order consists of a subset of items associated with an original order,\n        and can contain additional information about fulfillments and returns.\n      x-resourceId: claim_order\n      required:\n        - type\n        - order_id\n      properties:\n        id:\n          type: string\n          description: The claim's ID\n          example: claim_01G8ZH853Y6TFXWPG5EYE81X63\n        type:\n          type: string\n          enum:\n            - refund\n            - replace\n        payment_status:\n          type: string\n          description: The status of the claim's payment\n          enum:\n            - na\n            - not_refunded\n            - refunded\n          default: na\n        fulfillment_status:\n          type: string\n          enum:\n            - not_fulfilled\n            - partially_fulfilled\n            - fulfilled\n            - partially_shipped\n            - shipped\n            - partially_returned\n            - returned\n            - canceled\n            - requires_action\n          default: not_fulfilled\n        claim_items:\n          description: The items that have been claimed\n          type: array\n          items:\n            $ref: '#/components/schemas/claim_item'\n        additional_items:\n          description: \u003e-\n            Refers to the new items to be shipped when the claim order has the\n            type `replace`\n          type: array\n          items:\n            $ref: '#/components/schemas/line_item'\n        order_id:\n          description: The ID of the order that the claim comes from.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        return_order:\n          description: \u003e-\n            A return object. Holds information about the return if the claim is\n            to be returned. Available if the relation 'return_order' is expanded\n          type: object\n        shipping_address_id:\n          description: The ID of the address that the new items should be shipped to\n          type: string\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        shipping_address:\n          description: Available if the relation `shipping_address` is expanded.\n          $ref: '#/components/schemas/address'\n        shipping_methods:\n          description: The shipping methods that the claim order will be shipped with.\n          type: array\n          items:\n            $ref: '#/components/schemas/shipping_method'\n        fulfillments:\n          description: The fulfillments of the new items to be shipped\n          type: array\n          items:\n            $ref: '#/components/schemas/fulfillment'\n        refund_amount:\n          description: The amount that will be refunded in conjunction with the claim\n          type: integer\n          example: 1000\n        canceled_at:\n          description: The date with timezone at which the claim was canceled.\n          type: string\n          format: date-time\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n        no_notification:\n          description: \u003e-\n            Flag for describing whether or not notifications related to this\n            should be send.\n          type: boolean\n          example: false\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of the cart\n            associated with the claim in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n    claim_tag:\n      title: Claim Tag\n      description: \u003e-\n        Claim Tags are user defined tags that can be assigned to claim items for\n        easy filtering and grouping.\n      x-resourceId: claim_tag\n      required:\n        - value\n      properties:\n        id:\n          type: string\n          description: The claim tag's ID\n          example: ctag_01G8ZCC5Y63B95V6B5SHBZ91S4\n        value:\n          description: The value that the claim tag holds\n          type: string\n          example: Damaged\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    country:\n      title: Country\n      description: Country details\n      x-resourceId: country\n      required:\n        - iso_2\n        - iso_3\n        - num_code\n        - name\n        - display_name\n      properties:\n        id:\n          type: string\n          description: The country's ID\n          example: 109\n        iso_2:\n          type: string\n          description: The 2 character ISO code of the country in lower case\n          example: it\n          externalDocs:\n            url: \u003e-\n              https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements\n            description: See a list of codes.\n        iso_3:\n          type: string\n          description: The 2 character ISO code of the country in lower case\n          example: ita\n          externalDocs:\n            url: \u003e-\n              https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements\n            description: See a list of codes.\n        num_code:\n          description: The numerical ISO code for the country.\n          type: string\n          example: 380\n          externalDocs:\n            url: \u003e-\n              https://en.wikipedia.org/wiki/ISO_3166-1_numeric#Officially_assigned_code_elements\n            description: See a list of codes.\n        name:\n          description: The normalized country name in upper case.\n          type: string\n          example: ITALY\n        display_name:\n          description: The country name appropriate for display.\n          type: string\n          example: Italy\n        region_id:\n          type: string\n          description: The region ID this country is associated with.\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n    currency:\n      title: Currency\n      description: Currency\n      x-resourceId: currency\n      required:\n        - code\n        - symbol\n        - symbol_native\n        - name\n      properties:\n        code:\n          description: The 3 character ISO code for the currency.\n          type: string\n          example: usd\n          externalDocs:\n            url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n            description: See a list of codes.\n        symbol:\n          description: The symbol used to indicate the currency.\n          type: string\n          example: $\n        symbol_native:\n          description: The native symbol used to indicate the currency.\n          type: string\n          example: $\n        name:\n          description: The written name of the currency\n          type: string\n          example: US Dollar\n        includes_tax:\n          description: '[EXPERIMENTAL] Does the currency prices include tax'\n          type: boolean\n    custom_shipping_option:\n      title: Custom Shipping Option\n      description: \u003e-\n        Custom Shipping Options are 'overriden' Shipping Options. Store managers\n        can attach a Custom Shipping Option to a cart in order to set a custom\n        price for a particular Shipping Option\n      x-resourceId: custom_shipping_option\n      required:\n        - price\n        - shipping_option_id\n      properties:\n        id:\n          type: string\n          description: The custom shipping option's ID\n          example: cso_01G8X99XNB77DMFBJFWX6DN9V9\n        price:\n          description: \u003e-\n            The custom price set that will override the shipping option's\n            original price\n          type: integer\n          example: 1000\n        shipping_option_id:\n          description: \u003e-\n            The ID of the Shipping Option that the custom shipping option\n            overrides\n          type: string\n          example: so_01G1G5V27GYX4QXNARRQCW1N8T\n        shipping_option:\n          description: \u003e-\n            A shipping option object. Available if the relation\n            `shipping_option` is expanded.\n          type: object\n        cart_id:\n          description: The ID of the Cart that the custom shipping option is attached to\n          type: string\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n        includes_tax:\n          description: \u003e-\n            [EXPERIMENTAL] Indicates if the custom shipping option price include\n            tax\n          type: boolean\n    customer_group:\n      title: Customer Group\n      description: Represents a customer group\n      x-resourceId: customer_group\n      required:\n        - name\n      properties:\n        id:\n          type: string\n          description: The customer group's ID\n          example: cgrp_01G8ZH853Y6TFXWPG5EYE81X63\n        name:\n          type: string\n          description: The name of the customer group\n          example: VIP\n        customers:\n          type: array\n          description: \u003e-\n            The customers that belong to the customer group. Available if the\n            relation `customers` is expanded.\n          items:\n            type: object\n            description: A customer object.\n        price_lists:\n          type: array\n          description: \u003e-\n            The price lists that are associated with the customer group.\n            Available if the relation `price_lists` is expanded.\n          items:\n            $ref: '#/components/schemas/price_list'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    customer:\n      title: Customer\n      description: Represents a customer\n      x-resourceId: customer\n      required:\n        - email\n      properties:\n        id:\n          type: string\n          description: The customer's ID\n          example: cus_01G2SG30J8C85S4A5CHM2S1NS2\n        email:\n          type: string\n          description: The customer's email\n          format: email\n        first_name:\n          type: string\n          description: The customer's first name\n          example: Arno\n        last_name:\n          type: string\n          description: The customer's first name\n          example: Willms\n        billing_address_id:\n          type: string\n          description: The customer's billing address ID\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        billing_address:\n          description: Available if the relation `billing_address` is expanded.\n          $ref: '#/components/schemas/address'\n        shipping_addresses:\n          description: Available if the relation `shipping_addresses` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/address'\n        phone:\n          type: string\n          description: The customer's phone number\n          example: 16128234334802\n        has_account:\n          type: boolean\n          description: Whether the customer has an account or not\n          default: false\n        orders:\n          description: Available if the relation `orders` is expanded.\n          type: array\n          items:\n            type: object\n            description: An order object.\n        groups:\n          description: \u003e-\n            The customer groups the customer belongs to. Available if the\n            relation `groups` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/customer_group'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_condition_customer_group:\n      title: Product Tag Discount Condition\n      description: Associates a discount condition with a customer group\n      x-resourceId: discount_condition_customer_group\n      required:\n        - customer_group_id\n        - condition_id\n      properties:\n        customer_group_id:\n          description: The ID of the Product Tag\n          type: string\n          example: cgrp_01G8ZH853Y6TFXWPG5EYE81X63\n        condition_id:\n          description: The ID of the Discount Condition\n          type: string\n          example: discon_01G8X9A7ESKAJXG2H0E6F1MW7A\n        customer_group:\n          description: Available if the relation `customer_group` is expanded.\n          $ref: '#/components/schemas/customer_group'\n        discount_condition:\n          description: Available if the relation `discount_condition` is expanded.\n          $ref: '#/components/schemas/discount_condition'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_condition_product_collection:\n      title: Product Collection Discount Condition\n      description: Associates a discount condition with a product collection\n      x-resourceId: discount_condition_product_collection\n      required:\n        - product_collection_id\n        - condition_id\n      properties:\n        product_collection_id:\n          description: The ID of the Product Collection\n          type: string\n          example: pcol_01F0YESBFAZ0DV6V831JXWH0BG\n        condition_id:\n          description: The ID of the Discount Condition\n          type: string\n          example: discon_01G8X9A7ESKAJXG2H0E6F1MW7A\n        product_collection:\n          description: Available if the relation `product_collection` is expanded.\n          $ref: '#/components/schemas/product_collection'\n        discount_condition:\n          description: Available if the relation `discount_condition` is expanded.\n          $ref: '#/components/schemas/discount_condition'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_condition_product_tag:\n      title: Product Tag Discount Condition\n      description: Associates a discount condition with a product tag\n      x-resourceId: discount_condition_product_tag\n      required:\n        - product_tag_id\n        - condition_id\n      properties:\n        product_tag_id:\n          description: The ID of the Product Tag\n          type: string\n          example: ptag_01F0YESHPZYY3H4SJ3A5918SBN\n        condition_id:\n          description: The ID of the Discount Condition\n          type: string\n          example: discon_01G8X9A7ESKAJXG2H0E6F1MW7A\n        product_tag:\n          description: Available if the relation `product_tag` is expanded.\n          $ref: '#/components/schemas/product_tag'\n        discount_condition:\n          description: Available if the relation `discount_condition` is expanded.\n          $ref: '#/components/schemas/discount_condition'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_condition_product_type:\n      title: Product Type Discount Condition\n      description: Associates a discount condition with a product type\n      x-resourceId: discount_condition_product\n      required:\n        - product_type_id\n        - condition_id\n      properties:\n        product_type_id:\n          description: The ID of the Product Tag\n          type: string\n          example: ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A\n        condition_id:\n          description: The ID of the Discount Condition\n          type: string\n          example: discon_01G8X9A7ESKAJXG2H0E6F1MW7A\n        product_type:\n          description: Available if the relation `product_type` is expanded.\n          $ref: '#/components/schemas/product_type'\n        discount_condition:\n          description: Available if the relation `discount_condition` is expanded.\n          $ref: '#/components/schemas/discount_condition'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_condition_product:\n      title: Product Discount Condition\n      description: Associates a discount condition with a product\n      x-resourceId: discount_condition_product\n      required:\n        - product_id\n        - condition_id\n      properties:\n        product_id:\n          description: The ID of the Product Tag\n          type: string\n          example: prod_01G1G5V2MBA328390B5AXJ610F\n        condition_id:\n          description: The ID of the Discount Condition\n          type: string\n          example: discon_01G8X9A7ESKAJXG2H0E6F1MW7A\n        product:\n          description: Available if the relation `product` is expanded.\n          $ref: '#/components/schemas/product'\n        discount_condition:\n          description: Available if the relation `discount_condition` is expanded.\n          $ref: '#/components/schemas/discount_condition'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_condition:\n      title: Discount Condition\n      description: Holds rule conditions for when a discount is applicable\n      x-resourceId: discount_condition\n      required:\n        - type\n        - operator\n        - discount_rule_id\n      properties:\n        id:\n          type: string\n          description: The discount condition's ID\n          example: discon_01G8X9A7ESKAJXG2H0E6F1MW7A\n        type:\n          description: The type of the Condition\n          type: string\n          enum:\n            - products\n            - product_types\n            - product_collections\n            - product_tags\n            - customer_groups\n        operator:\n          description: The operator of the Condition\n          type: string\n          enum:\n            - in\n            - not_in\n        discount_rule_id:\n          type: string\n          description: The ID of the discount rule associated with the condition\n          example: dru_01F0YESMVK96HVX7N419E3CJ7C\n        discount_rule:\n          description: Available if the relation `discount_rule` is expanded.\n          $ref: '#/components/schemas/discount_rule'\n        products:\n          description: \u003e-\n            products associated with this condition if type = products.\n            Available if the relation `products` is expanded.\n          type: array\n          items:\n            type: object\n            description: A product object.\n        product_types:\n          description: \u003e-\n            product types associated with this condition if type =\n            product_types. Available if the relation `product_types` is\n            expanded.\n          type: array\n          items:\n            type: object\n            description: A product type object.\n        product_tags:\n          description: \u003e-\n            product tags associated with this condition if type = product_tags.\n            Available if the relation `product_tags` is expanded.\n          type: array\n          items:\n            type: object\n            description: A product tag object.\n        product_collections:\n          description: \u003e-\n            product collections associated with this condition if type =\n            product_collections. Available if the relation `product_collections`\n            is expanded.\n          type: array\n          items:\n            type: object\n            description: A product collection object.\n        customer_groups:\n          description: \u003e-\n            customer groups associated with this condition if type =\n            customer_groups. Available if the relation `customer_groups` is\n            expanded.\n          type: array\n          items:\n            type: object\n            description: A customer group object.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount_rule:\n      title: Discount Rule\n      description: \u003e-\n        Holds the rules that governs how a Discount is calculated when applied\n        to a Cart.\n      x-resourceId: discount_rule\n      required:\n        - type\n        - value\n      properties:\n        id:\n          type: string\n          description: The discount rule's ID\n          example: dru_01F0YESMVK96HVX7N419E3CJ7C\n        type:\n          description: \u003e-\n            The type of the Discount, can be `fixed` for discounts that reduce\n            the price by a fixed amount, `percentage` for percentage reductions\n            or `free_shipping` for shipping vouchers.\n          type: string\n          enum:\n            - fixed\n            - percentage\n            - free_shipping\n          example: percentage\n        description:\n          description: A short description of the discount\n          type: string\n          example: 10 Percent\n        value:\n          description: \u003e-\n            The value that the discount represents; this will depend on the type\n            of the discount\n          type: integer\n          example: 10\n        allocation:\n          description: The scope that the discount should apply to.\n          type: string\n          enum:\n            - total\n            - item\n          example: total\n        conditions:\n          description: \u003e-\n            A set of conditions that can be used to limit when  the discount can\n            be used. Available if the relation `conditions` is expanded.\n          type: array\n          items:\n            type: object\n            description: A discount condition object.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    discount:\n      title: Discount\n      description: \u003e-\n        Represents a discount that can be applied to a cart for promotional\n        purposes.\n      x-resourceId: discount\n      required:\n        - code\n        - is_dynamic\n      properties:\n        id:\n          type: string\n          description: The discount's ID\n          example: disc_01F0YESMW10MGHWJKZSDDMN0VN\n        code:\n          description: \u003e-\n            A unique code for the discount - this will be used by the customer\n            to apply the discount\n          type: string\n          example: 10DISC\n        is_dynamic:\n          description: \u003e-\n            A flag to indicate if multiple instances of the discount can be\n            generated. I.e. for newsletter discounts\n          type: boolean\n          example: false\n        rule_id:\n          type: string\n          description: The Discount Rule that governs the behaviour of the Discount\n          example: dru_01F0YESMVK96HVX7N419E3CJ7C\n        rule:\n          description: Available if the relation `rule` is expanded.\n          $ref: '#/components/schemas/discount_rule'\n        is_disabled:\n          description: \u003e-\n            Whether the Discount has been disabled. Disabled discounts cannot be\n            applied to carts\n          type: boolean\n          example: false\n        parent_discount_id:\n          type: string\n          description: \u003e-\n            The Discount that the discount was created from. This will always be\n            a dynamic discount\n          example: disc_01G8ZH853YPY9B94857DY91YGW\n        parent_discount:\n          description: Available if the relation `parent_discount` is expanded.\n          $ref: '#/components/schemas/discount'\n        starts_at:\n          description: The time at which the discount can be used.\n          type: string\n          format: date-time\n        ends_at:\n          description: The time at which the discount can no longer be used.\n          type: string\n          format: date-time\n        valid_duration:\n          type: string\n          description: Duration the discount runs between\n          example: P3Y6M4DT12H30M5S\n        regions:\n          description: \u003e-\n            The Regions in which the Discount can be used. Available if the\n            relation `regions` is expanded.\n          type: array\n          items:\n            type: object\n            description: A region object.\n        usage_limit:\n          description: The maximum number of times that a discount can be used.\n          type: integer\n          example: 100\n        usage_count:\n          description: The number of times a discount has been used.\n          type: integer\n          example: 50\n          default: 0\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    draft-order:\n      title: DraftOrder\n      description: Represents a draft order\n      x-resourceId: draft-order\n      properties:\n        id:\n          type: string\n          description: The draft order's ID\n          example: dorder_01G8TJFKBG38YYFQ035MSVG03C\n        status:\n          type: string\n          description: The status of the draft order\n          enum:\n            - open\n            - completed\n          default: open\n        display_id:\n          type: string\n          description: The draft order's display ID\n          example: 2\n        cart_id:\n          type: string\n          description: The ID of the cart associated with the draft order.\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        order_id:\n          type: string\n          description: The ID of the order associated with the draft order.\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        canceled_at:\n          type: string\n          description: The date the draft order was canceled at.\n          format: date-time\n        completed_at:\n          type: string\n          description: The date the draft order was completed at.\n          format: date-time\n        no_notification_order:\n          type: boolean\n          description: Whether to send the customer notifications regarding order updates.\n          example: false\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of the cart\n            associated with the draft order in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    fulfillment_item:\n      title: Fulfillment Item\n      description: \u003e-\n        Correlates a Line Item with a Fulfillment, keeping track of the quantity\n        of the Line Item.\n      x-resourceId: fulfillment_item\n      required:\n        - fulfillment_id\n        - item_id\n        - quantity\n      properties:\n        fulfillment_id:\n          description: The id of the Fulfillment that the Fulfillment Item belongs to.\n          type: string\n          example: ful_01G8ZRTMQCA76TXNAT81KPJZRF\n        item_id:\n          description: The id of the Line Item that the Fulfillment Item references.\n          type: string\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        fulfillment:\n          description: \u003e-\n            A fulfillment object. Available if the relation `fulfillment` is\n            expanded.\n          type: object\n        item:\n          description: Available if the relation `item` is expanded.\n          $ref: '#/components/schemas/line_item'\n        quantity:\n          description: The quantity of the Line Item that is included in the Fulfillment.\n          type: integer\n          example: 1\n    fulfillment_provider:\n      title: Fulfillment Provider\n      description: \u003e-\n        Represents a fulfillment provider plugin and holds its installation\n        status.\n      x-resourceId: fulfillment_provider\n      properties:\n        id:\n          description: The id of the fulfillment provider as given by the plugin.\n          type: string\n          example: manual\n        is_installed:\n          description: \u003e-\n            Whether the plugin is installed in the current version. Plugins that\n            are no longer installed are not deleted by will have this field set\n            to `false`.\n          type: boolean\n          example: true\n    fulfillment:\n      title: Fulfillment\n      description: \u003e-\n        Fulfillments are created once store operators can prepare the purchased\n        goods. Fulfillments will eventually be shipped and hold information\n        about how to track shipments. Fulfillments are created through a\n        provider, which is typically an external shipping aggregator, shipping\n        partner og 3PL, most plugins will have asynchronous communications with\n        these providers through webhooks in order to automatically update and\n        synchronize the state of Fulfillments.\n      x-resourceId: fulfillment\n      required:\n        - provider_id\n      properties:\n        id:\n          type: string\n          description: The cart's ID\n          example: ful_01G8ZRTMQCA76TXNAT81KPJZRF\n        claim_order_id:\n          description: The id of the Claim that the Fulfillment belongs to.\n          type: string\n          example: null\n        claim_order:\n          description: \u003e-\n            A claim order object. Available if the relation `claim_order` is\n            expanded.\n          type: object\n        swap_id:\n          description: The id of the Swap that the Fulfillment belongs to.\n          type: string\n          example: null\n        swap:\n          description: A swap object. Available if the relation `swap` is expanded.\n          type: object\n        order_id:\n          description: The id of the Order that the Fulfillment belongs to.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        provider_id:\n          description: \u003e-\n            The id of the Fulfillment Provider responsible for handling the\n            fulfillment\n          type: string\n          example: manual\n        provider:\n          description: Available if the relation `provider` is expanded.\n          $ref: '#/components/schemas/fulfillment_provider'\n        items:\n          description: \u003e-\n            The Fulfillment Items in the Fulfillment - these hold information\n            about how many of each Line Item has been fulfilled. Available if\n            the relation `items` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/fulfillment_item'\n        tracking_links:\n          description: \u003e-\n            The Tracking Links that can be used to track the status of the\n            Fulfillment, these will usually be provided by the Fulfillment\n            Provider. Available if the relation `tracking_links` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/tracking_link'\n        tracking_numbers:\n          deprecated: true\n          description: \u003e-\n            The tracking numbers that can be used to track the status of the\n            fulfillment.\n          type: array\n          items:\n            type: string\n        data:\n          description: \u003e-\n            This contains all the data necessary for the Fulfillment provider to\n            handle the fulfillment.\n          type: object\n          example: {}\n        shipped_at:\n          description: The date with timezone at which the Fulfillment was shipped.\n          type: string\n          format: date-time\n        no_notification:\n          description: \u003e-\n            Flag for describing whether or not notifications related to this\n            should be send.\n          type: boolean\n          example: false\n        canceled_at:\n          description: The date with timezone at which the Fulfillment was canceled.\n          type: string\n          format: date-time\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of the\n            fulfillment in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    gift_card_transaction:\n      title: Gift Card Transaction\n      description: \u003e-\n        Gift Card Transactions are created once a Customer uses a Gift Card to\n        pay for their Order\n      x-resourceId: gift_card_transaction\n      required:\n        - gift_card_id\n        - amount\n      properties:\n        id:\n          type: string\n          description: The gift card transaction's ID\n          example: gct_01G8X9A7ESKAJXG2H0E6F1MW7A\n        gift_card_id:\n          description: The ID of the Gift Card that was used in the transaction.\n          type: string\n          example: gift_01G8XKBPBQY2R7RBET4J7E0XQZ\n        gift_card:\n          description: \u003e-\n            A gift card object. Available if the relation `gift_card` is\n            expanded.\n          type: object\n        order_id:\n          description: The ID of the Order that the Gift Card was used to pay for.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        amount:\n          description: The amount that was used from the Gift Card.\n          type: integer\n          example: 10\n        created_at:\n          description: The date with timezone at which the resource was created.\n          type: string\n          format: date-time\n        is_taxable:\n          description: Whether the transaction is taxable or not.\n          type: boolean\n          example: false\n        tax_rate:\n          description: The tax rate of the transaction\n          type: number\n          example: 0\n    gift_card:\n      title: Gift Card\n      description: \u003e-\n        Gift Cards are redeemable and represent a value that can be used towards\n        the payment of an Order.\n      x-resourceId: gift_card\n      required:\n        - code\n        - value\n        - balance\n        - region_id\n      properties:\n        id:\n          type: string\n          description: The cart's ID\n          example: gift_01G8XKBPBQY2R7RBET4J7E0XQZ\n        code:\n          description: \u003e-\n            The unique code that identifies the Gift Card. This is used by the\n            Customer to redeem the value of the Gift Card.\n          type: string\n          example: 3RFT-MH2C-Y4YZ-XMN4\n        value:\n          description: The value that the Gift Card represents.\n          type: integer\n          example: 10\n        balance:\n          description: The remaining value on the Gift Card.\n          type: integer\n          example: 10\n        region_id:\n          type: string\n          description: The id of the Region in which the Gift Card is available.\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n        order_id:\n          type: string\n          description: The id of the Order that the Gift Card was purchased in.\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        is_disabled:\n          description: \u003e-\n            Whether the Gift Card has been disabled. Disabled Gift Cards cannot\n            be applied to carts.\n          type: boolean\n          example: false\n        ends_at:\n          description: The time at which the Gift Card can no longer be used.\n          type: string\n          format: date-time\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    idempotency_key:\n      title: Idempotency Key\n      description: \u003e-\n        Idempotency Key is used to continue a process in case of any failure\n        that might occur.\n      x-resourceId: idempotency_key\n      required:\n        - idempotency_key\n      properties:\n        id:\n          type: string\n          description: The idempotency key's ID\n          example: ikey_01G8X9A7ESKAJXG2H0E6F1MW7A\n        idempotency_key:\n          description: \u003e-\n            The unique randomly generated key used to determine the state of a\n            process.\n          type: string\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          description: Date which the idempotency key was locked.\n          type: string\n          format: date-time\n        locked_at:\n          description: Date which the idempotency key was locked.\n          type: string\n          format: date-time\n        request_method:\n          description: The method of the request\n          type: string\n          example: POST\n        request_params:\n          type: object\n          description: The parameters passed to the request\n          example:\n            id: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        request_path:\n          description: The request's path\n          type: string\n          example: /store/carts/cart_01G8ZH853Y6TFXWPG5EYE81X63/complete\n        response_code:\n          type: string\n          description: The response's code.\n          example: 200\n        response_body:\n          type: object\n          description: The response's body\n          example:\n            id: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        recovery_point:\n          type: string\n          description: Where to continue from.\n          default: started\n    image:\n      title: Image\n      description: Images holds a reference to a URL at which the image file can be found.\n      x-resourceId: image\n      required:\n        - url\n      properties:\n        id:\n          type: string\n          description: The image's ID\n          example: img_01G749BFYR6T8JTVW6SGW3K3E6\n        url:\n          description: The URL at which the image file can be found.\n          type: string\n          format: uri\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    invite:\n      title: Invite\n      description: Represents an invite\n      x-resourceId: invite\n      required:\n        - user_email\n      properties:\n        id:\n          type: string\n          description: The invite's ID\n          example: invite_01G8TKE4XYCTHSCK2GDEP47RE1\n        user_email:\n          type: string\n          description: The email of the user being invited.\n          format: email\n        role:\n          type: string\n          description: The user's role.\n          enum:\n            - admin\n            - member\n            - developer\n          default: member\n        accepted:\n          type: boolean\n          description: Whether the invite was accepted or not.\n          example: false\n        token:\n          type: string\n          description: The token used to accept the invite.\n        expores_at:\n          type: string\n          description: The date the invite expires at.\n          format: date-time\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    line_item_adjustment:\n      title: Line Item Adjustment\n      description: Represents an Line Item Adjustment\n      x-resourceId: line_item_adjustment\n      required:\n        - item_id\n        - description\n        - amount\n      properties:\n        id:\n          type: string\n          description: The invite's ID\n          example: lia_01G8TKE4XYCTHSCK2GDEP47RE1\n        item_id:\n          type: string\n          description: The ID of the line item\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        item:\n          description: Available if the relation `item` is expanded.\n          $ref: '#/components/schemas/line_item'\n        description:\n          type: string\n          description: The line item's adjustment description\n          example: Adjusted item's price.\n        discount_id:\n          type: string\n          description: The ID of the discount associated with the adjustment\n          example: disc_01F0YESMW10MGHWJKZSDDMN0VN\n        discount:\n          description: Available if the relation `discount` is expanded.\n          $ref: '#/components/schemas/discount'\n        amount:\n          type: number\n          description: The adjustment amount\n          example: 1000\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    line_item_tax_line:\n      title: Line Item Tax Line\n      description: Represents an Line Item Tax Line\n      x-resourceId: line_item_tax_line\n      required:\n        - item_id\n        - rate\n        - name\n      properties:\n        id:\n          type: string\n          description: The line item tax line's ID\n          example: litl_01G1G5V2DRX1SK6NQQ8VVX4HQ8\n        item_id:\n          type: string\n          description: The ID of the line item\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        item:\n          description: Available if the relation `item` is expanded.\n          $ref: '#/components/schemas/line_item'\n        code:\n          description: A code to identify the tax type by\n          type: string\n          example: tax01\n        name:\n          description: A human friendly name for the tax\n          type: string\n          example: Tax Example\n        rate:\n          description: The numeric rate to charge tax by\n          type: number\n          example: 10\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    line_item:\n      title: Line Item\n      description: \u003e-\n        Line Items represent purchasable units that can be added to a Cart for\n        checkout. When Line Items are purchased they will get copied to the\n        resulting order and can eventually be referenced in Fulfillments and\n        Returns. Line Items may also be created when processing Swaps and\n        Claims.\n      x-resourceId: line_item\n      required:\n        - title\n        - unit_price\n        - quantity\n      properties:\n        id:\n          type: string\n          description: The cart's ID\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        cart_id:\n          description: The ID of the Cart that the Line Item belongs to.\n          type: string\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        order_id:\n          description: The ID of the Order that the Line Item belongs to.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        swap_id:\n          description: The id of the Swap that the Line Item belongs to.\n          type: string\n          example: null\n        swap:\n          description: A swap object. Available if the relation `swap` is expanded.\n          type: object\n        claim_order_id:\n          description: The id of the Claim that the Line Item belongs to.\n          type: string\n          example: null\n        claim_order:\n          description: \u003e-\n            A claim order object. Available if the relation `claim_order` is\n            expanded.\n          type: object\n        tax_lines:\n          description: Available if the relation `tax_lines` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/line_item_tax_line'\n        adjustments:\n          description: Available if the relation `adjustments` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/line_item_adjustment'\n        title:\n          description: \u003e-\n            The title of the Line Item, this should be easily identifiable by\n            the Customer.\n          type: string\n          example: Medusa Coffee Mug\n        description:\n          description: A more detailed description of the contents of the Line Item.\n          type: string\n          example: One Size\n        thumbnail:\n          description: A URL string to a small image of the contents of the Line Item.\n          type: string\n          format: uri\n          example: \u003e-\n            https://medusa-public-images.s3.eu-west-1.amazonaws.com/coffee-mug.png\n        is_return:\n          description: Is the item being returned\n          type: boolean\n          example: false\n        is_giftcard:\n          description: Flag to indicate if the Line Item is a Gift Card.\n          type: boolean\n          example: false\n        should_merge:\n          description: \u003e-\n            Flag to indicate if new Line Items with the same variant should be\n            merged or added as an additional Line Item.\n          type: boolean\n          example: false\n        allow_discounts:\n          description: \u003e-\n            Flag to indicate if the Line Item should be included when doing\n            discount calculations.\n          type: boolean\n          example: false\n        has_shipping:\n          description: \u003e-\n            Flag to indicate if the Line Item has fulfillment associated with\n            it.\n          type: boolean\n          example: false\n        unit_price:\n          description: \u003e-\n            The price of one unit of the content in the Line Item. This should\n            be in the currency defined by the Cart/Order/Swap/Claim that the\n            Line Item belongs to.\n          type: boolean\n          example: 8000\n        variant_id:\n          description: The id of the Product Variant contained in the Line Item.\n          type: string\n          example: variant_01G1G5V2MRX2V3PVSR2WXYPFB6\n        variant:\n          description: \u003e-\n            A product variant object. The Product Variant contained in the Line\n            Item. Available if the relation `variant` is expanded.\n          type: object\n        quantity:\n          description: The quantity of the content in the Line Item.\n          type: integer\n          example: 1\n        fulfilled_quantity:\n          description: The quantity of the Line Item that has been fulfilled.\n          type: integer\n          example: 0\n        returned_quantity:\n          description: The quantity of the Line Item that has been returned.\n          type: integer\n          example: 0\n        shipped_quantity:\n          description: The quantity of the Line Item that has been shipped.\n          type: integer\n          example: 0\n        refundable:\n          description: \u003e-\n            The amount that can be refunded from the given Line Item. Takes\n            taxes and discounts into consideration.\n          type: integer\n          example: 0\n        subtotal:\n          type: integer\n          description: The subtotal of the line item\n          example: 8000\n        tax_total:\n          type: integer\n          description: The total of tax of the line item\n          example: 0\n        total:\n          type: integer\n          description: The total amount of the line item\n          example: 8000\n        original_total:\n          type: integer\n          description: The original total amount of the line item\n          example: 8000\n        original_tax_total:\n          type: integer\n          description: The original tax total amount of the line item\n          example: 0\n        discount_total:\n          type: integer\n          description: The total of discount of the line item\n          example: 0\n        gift_card_total:\n          type: integer\n          description: The total of the gift card of the line item\n          example: 0\n        includes_tax:\n          description: '[EXPERIMENTAL] Indicates if the line item unit_price include tax'\n          type: boolean\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    money_amount:\n      title: Money Amount\n      description: \u003e-\n        Money Amounts represents an amount that a given Product Variant can be\n        purcased for. Each Money Amount either has a Currency or Region\n        associated with it to indicate the pricing in a given Currency or, for\n        fully region-based pricing, the given price in a specific Region. If\n        region-based pricing is used the amount will be in the currency defined\n        for the Reigon.\n      x-resourceId: money_amount\n      required:\n        - currency_code\n        - amount\n      properties:\n        id:\n          type: string\n          description: The money amount's ID\n          example: ma_01F0YESHRFQNH5S8Q0PK84YYZN\n        currency_code:\n          description: The 3 character currency code that the Money Amount is given in.\n          type: string\n          example: usd\n          externalDocs:\n            url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n            description: See a list of codes.\n        currency:\n          description: Available if the relation `currency` is expanded.\n          $ref: '#/components/schemas/currency'\n        amount:\n          description: \u003e-\n            The amount in the smallest currecny unit (e.g. cents 100 cents to\n            charge $1) that the Product Variant will cost.\n          type: integer\n          example: 100\n        min_quantity:\n          description: \u003e-\n            The minimum quantity that the Money Amount applies to. If this value\n            is not set, the Money Amount applies to all quantities.\n          type: integer\n          example: 1\n        max_quantity:\n          description: \u003e-\n            The maximum quantity that the Money Amount applies to. If this value\n            is not set, the Money Amount applies to all quantities.\n          type: integer\n          example: 1\n        price_list_id:\n          type: string\n          description: The ID of the price list associated with the money amount\n          example: pl_01G8X3CKJXCG5VXVZ87H9KC09W\n        price_list:\n          description: Available if the relation `price_list` is expanded.\n          $ref: '#/components/schemas/price_list'\n        variant_id:\n          description: The id of the Product Variant contained in the Line Item.\n          type: string\n          example: variant_01G1G5V2MRX2V3PVSR2WXYPFB6\n        variant:\n          description: \u003e-\n            The Product Variant contained in the Line Item. Available if the\n            relation `variant` is expanded.\n          type: object\n        region_id:\n          type: string\n          description: The region's ID\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    note:\n      title: Note\n      description: \u003e-\n        Notes are elements which we can use in association with different\n        resources to allow users to describe additional information in relation\n        to these.\n      x-resourceId: note\n      required:\n        - value\n        - resource_type\n        - resource_id\n      properties:\n        id:\n          type: string\n          description: The note's ID\n          example: note_01G8TM8ENBMC7R90XRR1G6H26Q\n        resource_type:\n          description: The type of resource that the Note refers to.\n          type: string\n          example: order\n        resource_id:\n          description: The ID of the resource that the Note refers to.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        value:\n          description: The contents of the note.\n          type: string\n          example: This order must be fulfilled on Monday\n        author_id:\n          type: string\n          description: The ID of the author (user)\n          example: usr_01G1G5V26F5TB3GPAPNJ8X1S3V\n        author:\n          description: Available if the relation `author` is expanded.\n          $ref: '#/components/schemas/user'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    notification_provider:\n      title: Notification Provider\n      description: \u003e-\n        Represents a notification provider plugin and holds its installation\n        status.\n      x-resourceId: notification_provider\n      required:\n        - id\n      properties:\n        id:\n          description: The id of the notification provider as given by the plugin.\n          type: string\n          example: sendgrid\n        is_installed:\n          description: \u003e-\n            Whether the plugin is installed in the current version. Plugins that\n            are no longer installed are not deleted by will have this field set\n            to `false`.\n          type: boolean\n          default: true\n    notification:\n      title: Notification\n      description: \u003e-\n        Notifications a communications sent via Notification Providers as a\n        reaction to internal events such as `order.placed`. Notifications can be\n        used to show a chronological timeline for communications sent to a\n        Customer regarding an Order, and enables resends.\n      x-resourceId: notification\n      required:\n        - resource_type\n        - resource_id\n        - to\n      properties:\n        id:\n          type: string\n          description: The notification's ID\n          example: noti_01G53V9Y6CKMCGBM1P0X7C28RX\n        event_name:\n          description: The name of the event that the notification was sent for.\n          type: string\n          example: order.placed\n        resource_type:\n          description: The type of resource that the Notification refers to.\n          type: string\n          example: order\n        resource_id:\n          description: The ID of the resource that the Notification refers to.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        customer_id:\n          description: The ID of the Customer that the Notification was sent to.\n          type: string\n          example: cus_01G2SG30J8C85S4A5CHM2S1NS2\n        customer:\n          description: A customer object. Available if the relation `customer` is expanded.\n          type: object\n        to:\n          description: \u003e-\n            The address that the Notification was sent to. This will usually be\n            an email address, but represent other addresses such as a chat bot\n            user id\n          type: string\n          example: user@example.com\n        data:\n          description: \u003e-\n            The data that the Notification was sent with. This contains all the\n            data necessary for the Notification Provider to initiate a resend.\n          type: object\n          example: {}\n        resends:\n          description: \u003e-\n            The resends that have been completed after the original\n            Notification.\n          type: array\n          items:\n            $ref: '#/components/schemas/notification_resend'\n        provider_id:\n          description: The id of the Notification Provider that handles the Notification.\n          type: string\n          example: sengrid\n        provider:\n          description: Available if the relation `provider` is expanded.\n          $ref: '#/components/schemas/notification_provider'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n    notification_resend:\n      title: Notification Resend\n      description: A resend of a Notification.\n      x-resourceId: notification_resend\n      properties:\n        id:\n          description: The notification resend's ID\n          type: string\n          example: noti_01F0YET45G9NHP08Z66CE4QKBS\n        event_name:\n          description: The name of the event that the notification was sent for.\n          type: string\n          example: order.placed\n        resource_type:\n          description: The type of resource that the Notification refers to.\n          type: string\n          example: order\n        resource_id:\n          description: The ID of the resource that the Notification refers to.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        customer_id:\n          description: The ID of the Customer that the Notification was sent to.\n          type: string\n          example: cus_01G2SG30J8C85S4A5CHM2S1NS2\n        customer:\n          description: A customer object. Available if the relation `customer` is expanded.\n          type: object\n        to:\n          description: \u003e-\n            The address that the Notification was sent to. This will usually be\n            an email address, but represent other addresses such as a chat bot\n            user id\n          type: string\n          example: user@example.com\n        data:\n          description: \u003e-\n            The data that the Notification was sent with. This contains all the\n            data necessary for the Notification Provider to initiate a resend.\n          type: object\n          example: {}\n        parent_id:\n          description: The ID of the Notification that was originally sent.\n          type: string\n          example: noti_01G53V9Y6CKMCGBM1P0X7C28RX\n        parent_notification:\n          description: Available if the relation `parent_notification` is expanded.\n          $ref: '#/components/schemas/notification'\n        provider_id:\n          description: The ID of the Notification Provider that handles the Notification.\n          type: string\n          example: sengrid\n        provider:\n          description: Available if the relation `provider` is expanded.\n          $ref: '#/components/schemas/notification_provider'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n    OAuth:\n      title: OAuth\n      description: Represent an OAuth app\n      x-resourceId: OAuth\n      required:\n        - id\n        - display_name\n        - application_name\n      properties:\n        id:\n          type: string\n          description: The app's ID\n          example: example_app\n        display_name:\n          type: string\n          description: The app's display name\n          example: Example app\n        application_name:\n          type: string\n          description: The app's name\n          example: example\n        install_url:\n          type: string\n          description: The URL to install the app\n          format: uri\n        uninstall_url:\n          type: string\n          description: The URL to uninstall the app\n          format: uri\n        data:\n          type: object\n          description: Any data necessary to the app.\n          example: {}\n    order_edit:\n      title: Order Edit\n      description: Order edit keeps track of order items changes.\n      x-resourceId: order_edit\n      required:\n        - order_id\n        - order\n        - changes\n        - created_by\n      properties:\n        id:\n          type: string\n          description: The order edit's ID\n          example: oe_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order_id:\n          type: string\n          description: The ID of the order that is edited\n          example: order_01G2SG30J8C85S4A5CHM2S1NS2\n        order:\n          description: Order object\n          $ref: '#/components/schemas/order'\n        changes:\n          type: array\n          description: Line item changes array.\n          items:\n            $ref: '#/components/schemas/order_item_change'\n        internal_note:\n          description: An optional note with additional details about the order edit.\n          type: string\n          example: Included two more items B to the order.\n        created_by:\n          type: string\n          description: \u003e-\n            The unique identifier of the user or customer who created the order\n            edit.\n        requested_by:\n          type: string\n          description: \u003e-\n            The unique identifier of the user or customer who requested the\n            order edit.\n        requested_at:\n          type: string\n          description: The date with timezone at which the edit was requested.\n          format: date-time\n        confirmed_by:\n          type: string\n          description: \u003e-\n            The unique identifier of the user or customer who confirmed the\n            order edit.\n        confirmed_at:\n          type: string\n          description: The date with timezone at which the edit was confirmed.\n          format: date-time\n        declined_by:\n          type: string\n          description: \u003e-\n            The unique identifier of the user or customer who declined the order\n            edit.\n        declined_at:\n          type: string\n          description: The date with timezone at which the edit was declined.\n          format: date-time\n        declined_reason:\n          description: An optional note why  the order edit is declined.\n          type: string\n        subtotal:\n          type: integer\n          description: The subtotal for line items computed from changes.\n          example: 8000\n        discount_total:\n          type: integer\n          description: The total of discount\n          example: 800\n        tax_total:\n          type: integer\n          description: The total of tax\n          example: 0\n        total:\n          type: integer\n          description: The total amount of the edited order.\n          example: 8200\n        difference_due:\n          type: integer\n          description: \u003e-\n            The difference between the total amount of the order and total\n            amount of edited order.\n          example: 8200\n        items:\n          type: array\n          description: Computed line items from the changes.\n          items:\n            $ref: '#/components/schemas/line_item'\n    order_item_change:\n      title: Order Item Change\n      description: Represents an order edit item change\n      x-resourceId: order_item_change\n      required:\n        - type\n        - order_edit_id\n      properties:\n        id:\n          type: string\n          description: The order item change's ID\n          example: oic_01G8TJSYT9M6AVS5N4EMNFS1EK\n        type:\n          type: string\n          description: The order's status\n          enum:\n            - item_add\n            - item_remove\n            - item_update\n        order_edit_id:\n          type: string\n          description: The ID of the order edit\n          example: oe_01G2SG30J8C85S4A5CHM2S1NS2\n        order_edit:\n          description: Order edit object\n          $ref: '#/components/schemas/order_edit'\n        original_line_item_id:\n          type: string\n          description: The ID of the original line item in the order\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        original_line_item:\n          description: Original line item object.\n          $ref: '#/components/schemas/line_item'\n        line_item_id:\n          type: string\n          description: The ID of the cloned line item.\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        line_item:\n          description: Line item object.\n          $ref: '#/components/schemas/line_item'\n    order:\n      title: Order\n      description: Represents an order\n      x-resourceId: order\n      required:\n        - customer_id\n        - email\n        - region_id\n        - currency_code\n      properties:\n        id:\n          type: string\n          description: The order's ID\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        status:\n          type: string\n          description: The order's status\n          enum:\n            - pending\n            - completed\n            - archived\n            - canceled\n            - requires_action\n          default: pending\n        fulfillment_status:\n          type: string\n          description: The order's fulfillment status\n          enum:\n            - not_fulfilled\n            - partially_fulfilled\n            - fulfilled\n            - partially_shipped\n            - shipped\n            - partially_returned\n            - returned\n            - canceled\n            - requires_action\n          default: not_fulfilled\n        payment_status:\n          type: string\n          description: The order's payment status\n          enum:\n            - not_paid\n            - awaiting\n            - captured\n            - partially_refunded\n            - refuneded\n            - canceled\n            - requires_action\n          default: not_paid\n        display_id:\n          type: integer\n          description: The order's display ID\n          example: 2\n        cart_id:\n          type: string\n          description: The ID of the cart associated with the order\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        customer_id:\n          type: string\n          description: The ID of the customer associated with the order\n          example: cus_01G2SG30J8C85S4A5CHM2S1NS2\n        customer:\n          description: A customer object. Available if the relation `customer` is expanded.\n          type: object\n        email:\n          description: The email associated with the order\n          type: string\n          format: email\n        billing_address_id:\n          type: string\n          description: The ID of the billing address associated with the order\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        billing_address:\n          description: Available if the relation `billing_address` is expanded.\n          $ref: '#/components/schemas/address'\n        shipping_address_id:\n          type: string\n          description: The ID of the shipping address associated with the order\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        shipping_address:\n          description: Available if the relation `shipping_address` is expanded.\n          $ref: '#/components/schemas/address'\n        region_id:\n          type: string\n          description: The region's ID\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n        currency_code:\n          description: The 3 character currency code that is used in the order\n          type: string\n          example: usd\n          externalDocs:\n            url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n            description: See a list of codes.\n        currency:\n          description: Available if the relation `currency` is expanded.\n          $ref: '#/components/schemas/currency'\n        tax_rate:\n          description: The order's tax rate\n          type: number\n          example: 0\n        discounts:\n          type: array\n          description: \u003e-\n            The discounts used in the order. Available if the relation\n            `discounts` is expanded.\n          items:\n            type: object\n            description: A discount object.\n        gift_cards:\n          type: array\n          description: \u003e-\n            The gift cards used in the order. Available if the relation\n            `gift_cards` is expanded.\n          items:\n            type: object\n            description: A gift card object.\n        shipping_methods:\n          type: array\n          description: \u003e-\n            The shipping methods used in the order. Available if the relation\n            `shipping_methods` is expanded.\n          items:\n            $ref: '#/components/schemas/shipping_method'\n        payments:\n          type: array\n          description: \u003e-\n            The payments used in the order. Available if the relation `payments`\n            is expanded.\n          items:\n            $ref: '#/components/schemas/payment'\n        fulfillments:\n          type: array\n          description: \u003e-\n            The fulfillments used in the order. Available if the relation\n            `fulfillments` is expanded.\n          items:\n            $ref: '#/components/schemas/fulfillment'\n        returns:\n          type: array\n          description: \u003e-\n            The returns associated with the order. Available if the relation\n            `returns` is expanded.\n          items:\n            type: object\n            description: A return object.\n        claims:\n          type: array\n          description: \u003e-\n            The claims associated with the order. Available if the relation\n            `claims` is expanded.\n          items:\n            type: object\n            description: A claim order object.\n        refunds:\n          type: array\n          description: \u003e-\n            The refunds associated with the order. Available if the relation\n            `refunds` is expanded.\n          items:\n            type: object\n            description: A refund object.\n        swaps:\n          type: array\n          description: \u003e-\n            The swaps associated with the order. Available if the relation\n            `swaps` is expanded.\n          items:\n            type: object\n            description: A swap object.\n        draft_order_id:\n          type: string\n          description: The ID of the draft order this order is associated with.\n          example: null\n        draft_order:\n          description: \u003e-\n            A draft order object. Available if the relation `draft_order` is\n            expanded.\n          type: object\n        items:\n          type: array\n          description: \u003e-\n            The line items that belong to the order. Available if the relation\n            `items` is expanded.\n          items:\n            $ref: '#/components/schemas/line_item'\n        edits:\n          type: array\n          description: \u003e-\n            [EXPERIMENTAL] Order edits done on the order. Available if the\n            relation `edits` is expanded.\n          items:\n            $ref: '#/components/schemas/order_edit'\n        gift_card_transactions:\n          type: array\n          description: \u003e-\n            The gift card transactions used in the order. Available if the\n            relation `gift_card_transactions` is expanded.\n          items:\n            $ref: '#/components/schemas/gift_card_transaction'\n        canceled_at:\n          type: string\n          description: The date the order was canceled on.\n          format: date-time\n        no_notification:\n          description: \u003e-\n            Flag for describing whether or not notifications related to this\n            should be send.\n          type: boolean\n          example: false\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the processing of the order\n            in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        external_id:\n          description: The ID of an external order.\n          type: string\n          example: null\n        sales_channel_id:\n          type: string\n          description: The ID of the sales channel this order is associated with.\n          example: null\n        sales_channel:\n          description: \u003e-\n            A sales channel object. Available if the relation `sales_channel` is\n            expanded.\n          type: object\n        shipping_total:\n          type: integer\n          description: The total of shipping\n          example: 1000\n        discount_total:\n          type: integer\n          description: The total of discount\n          example: 800\n        tax_total:\n          type: integer\n          description: The total of tax\n          example: 0\n        refunded_total:\n          type: integer\n          description: The total amount refunded if the order is returned.\n          example: 0\n        total:\n          type: integer\n          description: The total amount of the order\n          example: 8200\n        subtotal:\n          type: integer\n          description: The subtotal of the order\n          example: 8000\n        paid_total:\n          type: integer\n          description: The total amount paid\n          example: 8000\n        refundable_amount:\n          type: integer\n          description: The amount that can be refunded\n          example: 8200\n        gift_card_total:\n          type: integer\n          description: The total of gift cards\n          example: 0\n        gift_card_tax_total:\n          type: integer\n          description: The total of gift cards with taxes\n          example: 0\n    payment_provider:\n      title: Payment Provider\n      description: Represents a Payment Provider plugin and holds its installation status.\n      x-resourceId: payment_provider\n      required:\n        - id\n      properties:\n        id:\n          description: The id of the payment provider as given by the plugin.\n          type: string\n          example: manual\n        is_installed:\n          description: \u003e-\n            Whether the plugin is installed in the current version. Plugins that\n            are no longer installed are not deleted by will have this field set\n            to `false`.\n          type: boolean\n          default: true\n    payment_session:\n      title: Payment Session\n      description: \u003e-\n        Payment Sessions are created when a Customer initilizes the checkout\n        flow, and can be used to hold the state of a payment flow. Each Payment\n        Session is controlled by a Payment Provider, who is responsible for the\n        communication with external payment services. Authorized Payment\n        Sessions will eventually get promoted to Payments to indicate that they\n        are authorized for capture/refunds/etc.\n      x-resourceId: payment_session\n      required:\n        - cart_id\n        - provider_id\n        - status\n      properties:\n        id:\n          type: string\n          description: The payment session's ID\n          example: ps_01G901XNSRM2YS3ASN9H5KG3FZ\n        cart_id:\n          description: The id of the Cart that the Payment Session is created for.\n          type: string\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        provider_id:\n          description: \u003e-\n            The id of the Payment Provider that is responsible for the Payment\n            Session\n          type: string\n          example: manual\n        is_selected:\n          description: \u003e-\n            A flag to indicate if the Payment Session has been selected as the\n            method that will be used to complete the purchase.\n          type: boolean\n          example: true\n        status:\n          description: \u003e-\n            Indicates the status of the Payment Session. Will default to\n            `pending`, and will eventually become `authorized`. Payment Sessions\n            may have the status of `requires_more` to indicate that further\n            actions are to be completed by the Customer.\n          type: string\n          enum:\n            - authorized\n            - pending\n            - requires_more\n            - error\n            - canceled\n          example: pending\n        data:\n          description: \u003e-\n            The data required for the Payment Provider to identify, modify and\n            process the Payment Session. Typically this will be an object that\n            holds an id to the external payment session, but can be an empty\n            object if the Payment Provider doesn't hold any state.\n          type: object\n          example: {}\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of a cart in\n            case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n    payment:\n      title: Payment\n      description: \u003e-\n        Payments represent an amount authorized with a given payment method,\n        Payments can be captured, canceled or refunded.\n      x-resourceId: payment\n      required:\n        - amount\n        - currency_code\n        - provider_id\n      properties:\n        id:\n          type: string\n          description: The payment's ID\n          example: pay_01G2SJNT6DEEWDFNAJ4XWDTHKE\n        swap_id:\n          description: The ID of the Swap that the Payment is used for.\n          type: string\n          example: null\n        swap:\n          description: A swap object. Available if the relation `swap` is expanded.\n          type: object\n        cart_id:\n          description: The id of the Cart that the Payment Session is created for.\n          type: string\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        order_id:\n          description: The ID of the Order that the Payment is used for.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        amount:\n          description: The amount that the Payment has been authorized for.\n          type: integer\n          example: 100\n        currency_code:\n          description: The 3 character ISO currency code that the Payment is completed in.\n          type: string\n          example: usd\n          externalDocs:\n            url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n            description: See a list of codes.\n        currency:\n          description: Available if the relation `currency` is expanded.\n          $ref: '#/components/schemas/currency'\n        amount_refunded:\n          description: \u003e-\n            The amount of the original Payment amount that has been refunded\n            back to the Customer.\n          type: integer\n          example: 0\n        provider_id:\n          description: The id of the Payment Provider that is responsible for the Payment\n          type: string\n          example: manual\n        data:\n          description: \u003e-\n            The data required for the Payment Provider to identify, modify and\n            process the Payment. Typically this will be an object that holds an\n            id to the external payment session, but can be an empty object if\n            the Payment Provider doesn't hold any state.\n          type: object\n          example: {}\n        captured_at:\n          description: The date with timezone at which the Payment was captured.\n          type: string\n          format: date-time\n        canceled_at:\n          description: The date with timezone at which the Payment was canceled.\n          type: string\n          format: date-time\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of a payment\n            in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    price_list:\n      title: Price List\n      description: \u003e-\n        Price Lists represents a set of prices that overrides the default price\n        for one or more product variants.\n      x-resourceId: price_list\n      required:\n        - name\n        - description\n      properties:\n        id:\n          type: string\n          description: The price list's ID\n          example: pl_01G8X3CKJXCG5VXVZ87H9KC09W\n        name:\n          type: string\n          description: The price list's name\n          example: VIP Prices\n        description:\n          type: string\n          description: The price list's description\n          example: Prices for VIP customers\n        type:\n          description: \u003e-\n            The type of Price List. This can be one of either `sale` or\n            `override`.\n          type: string\n          enum:\n            - sale\n            - override\n          default: sale\n        status:\n          description: The status of the Price List\n          type: string\n          enum:\n            - active\n            - draft\n          default: draft\n        starts_at:\n          description: The date with timezone that the Price List starts being valid.\n          type: string\n          format: date-time\n        ends_at:\n          description: The date with timezone that the Price List stops being valid.\n          type: string\n          format: date-time\n        customer_groups:\n          description: \u003e-\n            The Customer Groups that the Price List applies to. Available if the\n            relation `customer_groups` is expanded.\n          type: array\n          items:\n            type: object\n            description: A customer group object.\n        prices:\n          description: \u003e-\n            The Money Amounts that are associated with the Price List. Available\n            if the relation `prices` is expanded.\n          type: array\n          items:\n            oneOf:\n              - $ref: '#/components/schemas/money_amount'\n              - $ref: '#/components/schemas/customer_group'\n        includes_tax:\n          description: '[EXPERIMENTAL] Does the price list prices include tax'\n          type: boolean\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n    product_collection:\n      title: Product Collection\n      description: Product Collections represents a group of Products that are related.\n      x-resourceId: product_collection\n      required:\n        - title\n      properties:\n        id:\n          type: string\n          description: The product collection's ID\n          example: pcol_01F0YESBFAZ0DV6V831JXWH0BG\n        title:\n          description: The title that the Product Collection is identified by.\n          type: string\n          example: Summer Collection\n        handle:\n          description: \u003e-\n            A unique string that identifies the Product Collection - can for\n            example be used in slug structures.\n          type: string\n          example: summer-collection\n        products:\n          description: \u003e-\n            The Products contained in the Product Collection. Available if the\n            relation `products` is expanded.\n          type: array\n          items:\n            type: object\n            description: A product collection object.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_option_value:\n      title: Product Option Value\n      description: \u003e-\n        A value given to a Product Variant's option set. Product Variant have a\n        Product Option Value for each of the Product Options defined on the\n        Product.\n      x-resourceId: product_option_value\n      required:\n        - value\n        - option_id\n        - variant_id\n      properties:\n        id:\n          type: string\n          description: The product option value's ID\n          example: optval_01F0YESHR7S6ECD03RF6W12DSJ\n        value:\n          description: \u003e-\n            The value that the Product Variant has defined for the specific\n            Product Option (e.g. if the Product Option is \"Size\" this value\n            could be \"Small\", \"Medium\" or \"Large\").\n          type: string\n          example: large\n        option_id:\n          description: \u003e-\n            The ID of the Product Option that the Product Option Value is\n            defined for.\n          type: string\n          example: opt_01F0YESHQBZVKCEXJ24BS6PCX3\n        option:\n          description: Available if the relation `option` is expanded.\n          $ref: '#/components/schemas/product_option'\n        variant_id:\n          description: \u003e-\n            The ID of the Product Variant that the Product Option Value is\n            defined for.\n          type: string\n          example: variant_01G1G5V2MRX2V3PVSR2WXYPFB6\n        variant:\n          description: Available if the relation `variant` is expanded.\n          $ref: '#/components/schemas/product_variant'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_option:\n      title: Product Option\n      description: \u003e-\n        Product Options define properties that may vary between different\n        variants of a Product. Common Product Options are \"Size\" and \"Color\",\n        but Medusa doesn't limit what Product Options that can be defined.\n      x-resourceId: product_option\n      required:\n        - title\n        - product_id\n      properties:\n        id:\n          type: string\n          description: The product option's ID\n          example: opt_01F0YESHQBZVKCEXJ24BS6PCX3\n        title:\n          description: The title that the Product Option is defined by (e.g. \"Size\").\n          type: string\n          example: Size\n        values:\n          description: \u003e-\n            The Product Option Values that are defined for the Product Option.\n            Available if the relation `values` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/product_option_value'\n        product_id:\n          description: The ID of the Product that the Product Option is defined for.\n          type: string\n          example: prod_01G1G5V2MBA328390B5AXJ610F\n        product:\n          description: A product object. Available if the relation `product` is expanded.\n          type: object\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_tag:\n      title: Product Tag\n      description: Product Tags can be added to Products for easy filtering and grouping.\n      x-resourceId: product_tag\n      required:\n        - value\n      properties:\n        id:\n          type: string\n          description: The product tag's ID\n          example: ptag_01G8K2MTMG9168F2B70S1TAVK3\n        value:\n          description: The value that the Product Tag represents\n          type: string\n          example: Pants\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_tax_rate:\n      title: Product Tax Rate\n      description: \u003e-\n        Associates a tax rate with a product to indicate that the product is\n        taxed in a certain way\n      x-resourceId: product_tax_rate\n      required:\n        - product_id\n        - rate_id\n      properties:\n        product_id:\n          description: The ID of the Product\n          type: string\n          example: prod_01G1G5V2MBA328390B5AXJ610F\n        product:\n          description: Available if the relation `product` is expanded.\n          $ref: '#/components/schemas/product'\n        rate_id:\n          description: The ID of the Tax Rate\n          type: string\n          example: txr_01G8XDBAWKBHHJRKH0AV02KXBR\n        tax_rate:\n          description: Available if the relation `tax_rate` is expanded.\n          $ref: '#/components/schemas/tax_rate'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_type_tax_rate:\n      title: Product Type Tax Rate\n      description: \u003e-\n        Associates a tax rate with a product type to indicate that the product\n        type is taxed in a certain way\n      x-resourceId: product_type_tax_rate\n      required:\n        - product_type_id\n        - rate_id\n      properties:\n        product_type_id:\n          description: The ID of the Product type\n          type: string\n          example: ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A\n        product_type:\n          description: Available if the relation `product_type` is expanded.\n          $ref: '#/components/schemas/product_type'\n        rate_id:\n          description: The id of the Tax Rate\n          type: string\n          example: txr_01G8XDBAWKBHHJRKH0AV02KXBR\n        tax_rate:\n          description: Available if the relation `tax_rate` is expanded.\n          $ref: '#/components/schemas/tax_rate'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_type:\n      title: Product Type\n      description: \u003e-\n        Product Type can be added to Products for filtering and reporting\n        purposes.\n      x-resourceId: product_type\n      required:\n        - value\n      properties:\n        id:\n          type: string\n          description: The product type's ID\n          example: ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A\n        value:\n          description: The value that the Product Type represents.\n          type: string\n          example: Clothing\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product_variant:\n      title: Product Variant\n      description: \u003e-\n        Product Variants represent a Product with a specific set of Product\n        Option configurations. The maximum number of Product Variants that a\n        Product can have is given by the number of available Product Option\n        combinations.\n      x-resourceId: product_variant\n      required:\n        - title\n        - product_id\n        - inventory_quantity\n      properties:\n        id:\n          type: string\n          description: The product variant's ID\n          example: variant_01G1G5V2MRX2V3PVSR2WXYPFB6\n        title:\n          description: \u003e-\n            A title that can be displayed for easy identification of the Product\n            Variant.\n          type: string\n          example: Small\n        product_id:\n          description: The ID of the Product that the Product Variant belongs to.\n          type: string\n          example: prod_01G1G5V2MBA328390B5AXJ610F\n        product:\n          description: A product object. Available if the relation `product` is expanded.\n          type: object\n        prices:\n          description: \u003e-\n            The Money Amounts defined for the Product Variant. Each Money Amount\n            represents a price in a given currency or a price in a specific\n            Region. Available if the relation `prices` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/money_amount'\n        sku:\n          description: \u003e-\n            The unique stock keeping unit used to identify the Product Variant.\n            This will usually be a unqiue identifer for the item that is to be\n            shipped, and can be referenced across multiple systems.\n          type: string\n          example: shirt-123\n        barcode:\n          description: \u003e-\n            A generic field for a GTIN number that can be used to identify the\n            Product Variant.\n          type: string\n          example: null\n        ean:\n          description: \u003e-\n            An EAN barcode number that can be used to identify the Product\n            Variant.\n          type: string\n          example: null\n        upc:\n          description: \u003e-\n            A UPC barcode number that can be used to identify the Product\n            Variant.\n          type: string\n          example: null\n        variant_rank:\n          description: The ranking of this variant\n          type: number\n          default: 0\n        inventory_quantity:\n          description: The current quantity of the item that is stocked.\n          type: integer\n          example: 100\n        allow_backorder:\n          description: \u003e-\n            Whether the Product Variant should be purchasable when\n            `inventory_quantity` is 0.\n          type: boolean\n          default: false\n        manage_inventory:\n          description: Whether Medusa should manage inventory for the Product Variant.\n          type: boolean\n          default: true\n        hs_code:\n          description: \u003e-\n            The Harmonized System code of the Product Variant. May be used by\n            Fulfillment Providers to pass customs information to shipping\n            carriers.\n          type: string\n          example: null\n        origin_country:\n          description: \u003e-\n            The country in which the Product Variant was produced. May be used\n            by Fulfillment Providers to pass customs information to shipping\n            carriers.\n          type: string\n          example: null\n        mid_code:\n          description: \u003e-\n            The Manufacturers Identification code that identifies the\n            manufacturer of the Product Variant. May be used by Fulfillment\n            Providers to pass customs information to shipping carriers.\n          type: string\n          example: null\n        material:\n          description: \u003e-\n            The material and composition that the Product Variant is made of,\n            May be used by Fulfillment Providers to pass customs information to\n            shipping carriers.\n          type: string\n          example: null\n        weight:\n          description: \u003e-\n            The weight of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        height:\n          description: \u003e-\n            The height of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        width:\n          description: \u003e-\n            The width of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        length:\n          description: \u003e-\n            The length of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        options:\n          description: \u003e-\n            The Product Option Values specified for the Product Variant.\n            Available if the relation `options` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/product_option_value'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    product:\n      title: Product\n      description: \u003e-\n        Products are a grouping of Product Variants that have common properties\n        such as images and descriptions. Products can have multiple options\n        which define the properties that Product Variants differ by.\n      x-resourceId: product\n      required:\n        - title\n        - profile_id\n      properties:\n        id:\n          type: string\n          description: The product's ID\n          example: prod_01G1G5V2MBA328390B5AXJ610F\n        title:\n          description: \u003e-\n            A title that can be displayed for easy identification of the\n            Product.\n          type: string\n          example: Medusa Coffee Mug\n        subtitle:\n          description: \u003e-\n            An optional subtitle that can be used to further specify the\n            Product.\n          type: string\n        description:\n          description: A short description of the Product.\n          type: string\n          example: Every programmer's best friend.\n        handle:\n          description: A unique identifier for the Product (e.g. for slug structure).\n          type: string\n          example: coffee-mug\n        is_giftcard:\n          description: \u003e-\n            Whether the Product represents a Gift Card. Products that represent\n            Gift Cards will automatically generate a redeemable Gift Card code\n            once they are purchased.\n          type: boolean\n          default: false\n        status:\n          description: The status of the product\n          type: string\n          enum:\n            - draft\n            - proposed\n            - published\n            - rejected\n          default: draft\n        images:\n          description: \u003e-\n            Images of the Product. Available if the relation `images` is\n            expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/image'\n        thumbnail:\n          description: A URL to an image file that can be used to identify the Product.\n          type: string\n          format: uri\n        options:\n          description: \u003e-\n            The Product Options that are defined for the Product. Product\n            Variants of the Product will have a unique combination of Product\n            Option Values. Available if the relation `options` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/product_option'\n        variants:\n          description: \u003e-\n            The Product Variants that belong to the Product. Each will have a\n            unique combination of Product Option Values. Available if the\n            relation `variants` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/product_variant'\n        profile_id:\n          description: \u003e-\n            The ID of the Shipping Profile that the Product belongs to. Shipping\n            Profiles have a set of defined Shipping Options that can be used to\n            Fulfill a given set of Products.\n          type: string\n          example: sp_01G1G5V239ENSZ5MV4JAR737BM\n        profile:\n          description: Available if the relation `profile` is expanded.\n          $ref: '#/components/schemas/shipping_profile'\n        weight:\n          description: \u003e-\n            The weight of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        height:\n          description: \u003e-\n            The height of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        width:\n          description: \u003e-\n            The width of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        length:\n          description: \u003e-\n            The length of the Product Variant. May be used in shipping rate\n            calculations.\n          type: number\n          example: null\n        hs_code:\n          description: \u003e-\n            The Harmonized System code of the Product Variant. May be used by\n            Fulfillment Providers to pass customs information to shipping\n            carriers.\n          type: string\n          example: null\n        origin_country:\n          description: \u003e-\n            The country in which the Product Variant was produced. May be used\n            by Fulfillment Providers to pass customs information to shipping\n            carriers.\n          type: string\n          example: null\n        mid_code:\n          description: \u003e-\n            The Manufacturers Identification code that identifies the\n            manufacturer of the Product Variant. May be used by Fulfillment\n            Providers to pass customs information to shipping carriers.\n          type: string\n          example: null\n        material:\n          description: \u003e-\n            The material and composition that the Product Variant is made of,\n            May be used by Fulfillment Providers to pass customs information to\n            shipping carriers.\n          type: string\n          example: null\n        collection_id:\n          type: string\n          description: The Product Collection that the Product belongs to\n          example: pcol_01F0YESBFAZ0DV6V831JXWH0BG\n        collection:\n          description: \u003e-\n            A product collection object. Available if the relation `collection`\n            is expanded.\n          type: object\n        type_id:\n          type: string\n          description: The Product type that the Product belongs to\n          example: ptyp_01G8X9A7ESKAJXG2H0E6F1MW7A\n        type:\n          description: Available if the relation `type` is expanded.\n          $ref: '#/components/schemas/product_type'\n        tags:\n          description: \u003e-\n            The Product Tags assigned to the Product. Available if the relation\n            `tags` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/product_tag'\n        discountable:\n          description: \u003e-\n            Whether the Product can be discounted. Discounts will not apply to\n            Line Items of this Product when this flag is set to `false`.\n          type: boolean\n          default: true\n        external_id:\n          description: The external ID of the product\n          type: string\n          example: null\n        sales_channels:\n          description: \u003e-\n            The sales channels the product is associated with. Available if the\n            relation `sales_channels` is expanded.\n          type: array\n          items:\n            type: object\n            description: A sales channel object.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    refund:\n      title: Refund\n      description: \u003e-\n        Refund represent an amount of money transfered back to the Customer for\n        a given reason. Refunds may occur in relation to Returns, Swaps and\n        Claims, but can also be initiated by a store operator.\n      x-resourceId: refund\n      required:\n        - order_id\n        - amount\n      properties:\n        id:\n          type: string\n          description: The refund's ID\n          example: ref_01G1G5V27GYX4QXNARRQCW1N8T\n        order_id:\n          description: The id of the Order that the Refund is related to.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        amount:\n          description: The amount that has be refunded to the Customer.\n          type: integer\n          example: 1000\n        note:\n          description: An optional note explaining why the amount was refunded.\n          type: string\n          example: I didn't like it\n        reason:\n          description: \u003e-\n            The reason given for the Refund, will automatically be set when\n            processed as part of a Swap, Claim or Return.\n          type: string\n          enum:\n            - discount\n            - return\n            - swap\n            - claim\n            - other\n          example: return\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of the refund\n            in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    region:\n      title: Region\n      description: \u003e-\n        Regions hold settings for how Customers in a given geographical location\n        shop. The is, for example, where currencies and tax rates are defined. A\n        Region can consist of multiple countries to accomodate common shopping\n        settings across countries.\n      x-resourceId: region\n      required:\n        - name\n        - currency_code\n        - tax_rate\n      properties:\n        id:\n          type: string\n          description: The cart's ID\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        name:\n          description: \u003e-\n            The name of the region as displayed to the customer. If the Region\n            only has one country it is recommended to write the country name.\n          type: string\n          example: EU\n        currency_code:\n          description: The 3 character currency code that the Region uses.\n          type: string\n          example: usd\n          externalDocs:\n            url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n            description: See a list of codes.\n        currency:\n          description: Available if the relation `currency` is expanded.\n          $ref: '#/components/schemas/currency'\n        tax_rate:\n          description: The tax rate that should be charged on purchases in the Region.\n          type: number\n          example: 0\n        tax_rates:\n          description: \u003e-\n            The tax rates that are included in the Region. Available if the\n            relation `tax_rates` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/tax_rate'\n        tax_code:\n          description: \u003e-\n            The tax code used on purchases in the Region. This may be used by\n            other systems for accounting purposes.\n          type: string\n          example: null\n        gift_cards_taxable:\n          description: Whether the gift cards are taxable or not in this region.\n          type: boolean\n          default: true\n        automatic_taxes:\n          description: Whether taxes should be automated in this region.\n          type: boolean\n          default: true\n        countries:\n          description: \u003e-\n            The countries that are included in the Region. Available if the\n            relation `countries` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/country'\n        tax_provider_id:\n          type: string\n          description: The ID of the tax provider used in this region\n          example: null\n        tax_provider:\n          description: Available if the relation `tax_provider` is expanded.\n          $ref: '#/components/schemas/tax_provider'\n        payment_providers:\n          description: \u003e-\n            The Payment Providers that can be used to process Payments in the\n            Region. Available if the relation `payment_providers` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/payment_provider'\n        fulfillment_providers:\n          description: \u003e-\n            The Fulfillment Providers that can be used to fulfill orders in the\n            Region. Available if the relation `payment_providers` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/fulfillment_provider'\n        includes_tax:\n          description: '[EXPERIMENTAL] Does the prices for the region include tax'\n          type: boolean\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    return_item:\n      title: Return Item\n      description: \u003e-\n        Correlates a Line Item with a Return, keeping track of the quantity of\n        the Line Item that will be returned.\n      x-resourceId: return_item\n      required:\n        - return_id\n        - item_id\n      properties:\n        return_id:\n          description: The id of the Return that the Return Item belongs to.\n          type: string\n          example: ret_01F0YET7XPCMF8RZ0Y151NZV2V\n        return_order:\n          description: Available if the relation `return_order` is expanded.\n          $ref: '#/components/schemas/return'\n        item_id:\n          description: The id of the Line Item that the Return Item references.\n          type: string\n          example: item_01G8ZC9GWT6B2GP5FSXRXNFNGN\n        item:\n          description: Available if the relation `item` is expanded.\n          $ref: '#/components/schemas/line_item'\n        quantity:\n          description: The quantity of the Line Item that is included in the Return.\n          type: integer\n          example: 1\n        is_requested:\n          description: \u003e-\n            Whether the Return Item was requested initially or received\n            unexpectedly in the warehouse.\n          type: boolean\n          default: true\n        requested_quantity:\n          description: The quantity that was originally requested to be returned.\n          type: integer\n          example: 1\n        recieved_quantity:\n          description: The quantity that was received in the warehouse.\n          type: integer\n          example: 1\n        reason_id:\n          description: The ID of the reason for returning the item.\n          type: string\n          example: rr_01G8X82GCCV2KSQHDBHSSAH5TQ\n        reason:\n          description: Available if the relation `reason` is expanded.\n          $ref: '#/components/schemas/return_reason'\n        note:\n          description: An optional note with additional details about the Return.\n          type: string\n          example: I didn't like it.\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    return_reason:\n      title: Return Reason\n      description: \u003e-\n        A Reason for why a given product is returned. A Return Reason can be\n        used on Return Items in order to indicate why a Line Item was returned.\n      x-resourceId: return_reason\n      required:\n        - value\n        - label\n      properties:\n        id:\n          type: string\n          description: The cart's ID\n          example: rr_01G8X82GCCV2KSQHDBHSSAH5TQ\n        description:\n          description: A description of the Reason.\n          type: string\n          example: Items that are damaged\n        label:\n          description: A text that can be displayed to the Customer as a reason.\n          type: string\n          example: Damaged goods\n        value:\n          description: The value to identify the reason by.\n          type: string\n          example: damaged\n        parent_return_reason_id:\n          type: string\n          description: The ID of the parent reason.\n          example: null\n        parent_return_reason:\n          description: Available if the relation `parent_return_reason` is expanded.\n          $ref: '#/components/schemas/return_reason'\n        return_reason_children:\n          description: Available if the relation `return_reason_children` is expanded.\n          $ref: '#/components/schemas/return_reason'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    return:\n      title: Return\n      description: \u003e-\n        Return orders hold information about Line Items that a Customer wishes\n        to send back, along with how the items will be returned. Returns can be\n        used as part of a Swap.\n      x-resourceId: return\n      required:\n        - refund_amount\n      properties:\n        id:\n          type: string\n          description: The return's ID\n          example: ret_01F0YET7XPCMF8RZ0Y151NZV2V\n        status:\n          description: Status of the Return.\n          type: string\n          enum:\n            - requested\n            - received\n            - requires_action\n            - canceled\n          default: requested\n        items:\n          description: \u003e-\n            The Return Items that will be shipped back to the warehouse.\n            Available if the relation `items` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/return_item'\n        swap_id:\n          description: The ID of the Swap that the Return is a part of.\n          type: string\n          example: null\n        swap:\n          description: A swap object. Available if the relation `swap` is expanded.\n          type: object\n        order_id:\n          description: The ID of the Order that the Return is made from.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        claim_order_id:\n          description: The ID of the Claim that the Return is a part of.\n          type: string\n          example: null\n        claim_order:\n          description: \u003e-\n            A claim order object. Available if the relation `claim_order` is\n            expanded.\n          type: object\n        shipping_method:\n          description: \u003e-\n            The Shipping Method that will be used to send the Return back. Can\n            be null if the Customer facilitates the return shipment themselves.\n            Available if the relation `shipping_method` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/shipping_method'\n        shipping_data:\n          description: \u003e-\n            Data about the return shipment as provided by the Fulfilment\n            Provider that handles the return shipment.\n          type: object\n          example: {}\n        refund_amount:\n          description: The amount that should be refunded as a result of the return.\n          type: integer\n          example: 1000\n        no_notification:\n          description: \u003e-\n            When set to true, no notification will be sent related to this\n            return.\n          type: boolean\n          example: false\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of the return\n            in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        received_at:\n          description: The date with timezone at which the return was received.\n          type: string\n          format: date-time\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    sales_channel:\n      title: Sales Channel\n      description: A Sales Channel\n      x-resourceId: sales_channel\n      required:\n        - name\n      properties:\n        id:\n          type: string\n          description: The sales channel's ID\n          example: sc_01G8X9A7ESKAJXG2H0E6F1MW7A\n        name:\n          description: The name of the sales channel.\n          type: string\n          example: Market\n        description:\n          description: The description of the sales channel.\n          type: string\n          example: Multi-vendor market\n        is_disabled:\n          description: Specify if the sales channel is enabled or disabled.\n          type: boolean\n          default: false\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n    shipping_method_tax_line:\n      title: Shipping Method Tax Line\n      description: Shipping Method Tax Line\n      x-resourceId: shipping_method_tax_line\n      required:\n        - shipping_method_id\n        - rate\n        - name\n      properties:\n        id:\n          type: string\n          description: The line item tax line's ID\n          example: smtl_01G1G5V2DRX1SK6NQQ8VVX4HQ8\n        shipping_method_id:\n          type: string\n          description: The ID of the line item\n          example: sm_01F0YET7DR2E7CYVSDHM593QG2\n        shipping_method:\n          description: Available if the relation `shipping_method` is expanded.\n          $ref: '#/components/schemas/shipping_method'\n        code:\n          description: A code to identify the tax type by\n          type: string\n          example: tax01\n        name:\n          description: A human friendly name for the tax\n          type: string\n          example: Tax Example\n        rate:\n          description: The numeric rate to charge tax by\n          type: number\n          example: 10\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    shipping_method:\n      title: Shipping Method\n      description: \u003e-\n        Shipping Methods represent a way in which an Order or Return can be\n        shipped. Shipping Methods are built from a Shipping Option, but may\n        contain additional details, that can be necessary for the Fulfillment\n        Provider to handle the shipment.\n      x-resourceId: shipping_method\n      required:\n        - shipping_option_id\n        - price\n      properties:\n        id:\n          type: string\n          description: The shipping method's ID\n          example: sm_01F0YET7DR2E7CYVSDHM593QG2\n        shipping_option_id:\n          description: \u003e-\n            The id of the Shipping Option that the Shipping Method is built\n            from.\n          type: string\n          example: so_01G1G5V27GYX4QXNARRQCW1N8T\n        shipping_option:\n          description: Available if the relation `shipping_option` is expanded.\n          $ref: '#/components/schemas/shipping_option'\n        order_id:\n          description: The id of the Order that the Shipping Method is used on.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        return_id:\n          description: The id of the Return that the Shipping Method is used on.\n          type: string\n          example: null\n        return_order:\n          description: \u003e-\n            A return object. Available if the relation `return_order` is\n            expanded.\n          type: object\n        swap_id:\n          description: The id of the Swap that the Shipping Method is used on.\n          type: string\n          example: null\n        swap:\n          description: A swap object. Available if the relation `swap` is expanded.\n          type: object\n        cart_id:\n          description: The id of the Cart that the Shipping Method is used on.\n          type: string\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        claim_order_id:\n          description: The id of the Claim that the Shipping Method is used on.\n          type: string\n          example: null\n        claim_order:\n          description: \u003e-\n            A claim order object. Available if the relation `claim_order` is\n            expanded.\n          type: object\n        tax_lines:\n          type: array\n          description: Available if the relation `tax_lines` is expanded.\n          items:\n            $ref: '#/components/schemas/shipping_method_tax_line'\n        price:\n          description: \u003e-\n            The amount to charge for the Shipping Method. The currency of the\n            price is defined by the Region that the Order that the Shipping\n            Method belongs to is a part of.\n          type: integer\n          example: 200\n        data:\n          description: \u003e-\n            Additional data that the Fulfillment Provider needs to fulfill the\n            shipment. This is used in combination with the Shipping Options\n            data, and may contain information such as a drop point id.\n          type: object\n          example: {}\n        includes_tax:\n          description: '[EXPERIMENTAL] Indicates if the shipping method price include tax'\n          type: boolean\n    shipping_option_requirement:\n      title: Shipping Option Requirement\n      description: \u003e-\n        A requirement that a Cart must satisfy for the Shipping Option to be\n        available to the Cart.\n      x-resourceId: shipping_option_requirement\n      required:\n        - shipping_option_id\n        - type\n        - amount\n      properties:\n        id:\n          type: string\n          description: The shipping option requirement's ID\n          example: sor_01G1G5V29AB4CTNDRFSRWSRKWD\n        shipping_option_id:\n          description: \u003e-\n            The id of the Shipping Option that the hipping option requirement\n            belongs to\n          type: string\n          example: so_01G1G5V27GYX4QXNARRQCW1N8T\n        shipping_option:\n          description: Available if the relation `shipping_option` is expanded.\n          $ref: '#/components/schemas/shipping_option'\n        type:\n          description: \u003e-\n            The type of the requirement, this defines how the value will be\n            compared to the Cart's total. `min_subtotal` requirements define the\n            minimum subtotal that is needed for the Shipping Option to be\n            available, while the `max_subtotal` defines the maximum subtotal\n            that the Cart can have for the Shipping Option to be available.\n          type: string\n          enum:\n            - min_subtotal\n            - max_subtotal\n          example: min_subtotal\n        amount:\n          description: The amount to compare the Cart subtotal to.\n          type: integer\n          example: 100\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n    shipping_option:\n      title: Shipping Option\n      description: \u003e-\n        Shipping Options represent a way in which an Order or Return can be\n        shipped. Shipping Options have an associated Fulfillment Provider that\n        will be used when the fulfillment of an Order is initiated. Shipping\n        Options themselves cannot be added to Carts, but serve as a template for\n        Shipping Methods. This distinction makes it possible to customize\n        individual Shipping Methods with additional information.\n      x-resourceId: shipping_option\n      required:\n        - name\n        - region_id\n        - profile_id\n        - provider_id\n        - price_type\n      properties:\n        id:\n          type: string\n          description: The shipping option's ID\n          example: so_01G1G5V27GYX4QXNARRQCW1N8T\n        name:\n          description: \u003e-\n            The name given to the Shipping Option - this may be displayed to the\n            Customer.\n          type: string\n          example: PostFake Standard\n        region_id:\n          type: string\n          description: The region's ID\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n        profile_id:\n          description: \u003e-\n            The ID of the Shipping Profile that the shipping option belongs to.\n            Shipping Profiles have a set of defined Shipping Options that can be\n            used to Fulfill a given set of Products.\n          type: string\n          example: sp_01G1G5V239ENSZ5MV4JAR737BM\n        profile:\n          description: Available if the relation `profile` is expanded.\n          $ref: '#/components/schemas/shipping_profile'\n        provider_id:\n          description: \u003e-\n            The id of the Fulfillment Provider, that will be used to process\n            Fulfillments from the Shipping Option.\n          type: string\n          example: manual\n        provider:\n          description: Available if the relation `provider` is expanded.\n          $ref: '#/components/schemas/fulfillment_provider'\n        price_type:\n          description: \u003e-\n            The type of pricing calculation that is used when creatin Shipping\n            Methods from the Shipping Option. Can be `flat_rate` for fixed\n            prices or `calculated` if the Fulfillment Provider can provide price\n            calulations.\n          type: string\n          enum:\n            - flat_rate\n            - calculated\n          example: flat_rate\n        amount:\n          description: \u003e-\n            The amount to charge for shipping when the Shipping Option price\n            type is `flat_rate`.\n          type: integer\n          example: 200\n        is_return:\n          description: \u003e-\n            Flag to indicate if the Shipping Option can be used for Return\n            shipments.\n          type: boolean\n          default: false\n        requirements:\n          description: \u003e-\n            The requirements that must be satisfied for the Shipping Option to\n            be available for a Cart. Available if the relation `requirements` is\n            expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/shipping_option_requirement'\n        data:\n          description: \u003e-\n            The data needed for the Fulfillment Provider to identify the\n            Shipping Option.\n          type: object\n          example: {}\n        includes_tax:\n          description: '[EXPERIMENTAL] Does the shipping option price include tax'\n          type: boolean\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    shipping_profile:\n      title: Shipping Profile\n      description: \u003e-\n        Shipping Profiles have a set of defined Shipping Options that can be\n        used to fulfill a given set of Products.\n      x-resourceId: shipping_profile\n      required:\n        - name\n        - type\n      properties:\n        id:\n          type: string\n          description: The shipping profile's ID\n          example: sp_01G1G5V239ENSZ5MV4JAR737BM\n        name:\n          description: \u003e-\n            The name given to the Shipping profile - this may be displayed to\n            the Customer.\n          type: string\n          example: Default Shipping Profile\n        type:\n          description: \u003e-\n            The type of the Shipping Profile, may be `default`, `gift_card` or\n            `custom`.\n          type: string\n          enum:\n            - default\n            - gift_card\n            - custom\n          example: default\n        products:\n          description: \u003e-\n            The Products that the Shipping Profile defines Shipping Options for.\n            Available if the relation `products` is expanded.\n          type: array\n          items:\n            type: object\n            description: A product object.\n        shipping_options:\n          description: \u003e-\n            The Shipping Options that can be used to fulfill the Products in the\n            Shipping Profile. Available if the relation `shipping_options` is\n            expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/shipping_option'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    shipping_tax_rate:\n      title: Shipping Tax Rate\n      description: \u003e-\n        Associates a tax rate with a shipping option to indicate that the\n        shipping option is taxed in a certain way\n      x-resourceId: shipping_tax_rate\n      required:\n        - shipping_option_id\n        - rate_id\n      properties:\n        shipping_option_id:\n          description: The ID of the Shipping Option\n          type: string\n          example: so_01G1G5V27GYX4QXNARRQCW1N8T\n        shipping_option:\n          description: Available if the relation `shipping_option` is expanded.\n          $ref: '#/components/schemas/shipping_option'\n        rate_id:\n          description: The ID of the Tax Rate\n          type: string\n          example: txr_01G8XDBAWKBHHJRKH0AV02KXBR\n        tax_rate:\n          description: Available if the relation `tax_rate` is expanded.\n          $ref: '#/components/schemas/tax_rate'\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    staged_job:\n      title: Staged Job\n      description: A staged job resource\n      x-resourceId: staged_job\n      required:\n        - event_name\n      properties:\n        id:\n          type: string\n          description: The staged job's ID\n          example: job_01F0YET7BZTARY9MKN1SJ7AAXF\n        event_name:\n          description: The name of the event\n          type: string\n          example: order.placed\n        data:\n          description: Data necessary for the job\n          type: object\n          example: {}\n    store:\n      title: Store\n      description: 'Holds settings for the Store, such as name, currencies, etc.'\n      x-resourceId: store\n      properties:\n        id:\n          type: string\n          description: The store's ID\n          example: store_01G1G5V21KADXNGH29BJMAJ4B4\n        name:\n          description: The name of the Store - this may be displayed to the Customer.\n          type: string\n          example: Medusa Store\n        default_currency_code:\n          description: The 3 character currency code that is the default of the store.\n          type: string\n          example: usd\n          externalDocs:\n            url: 'https://en.wikipedia.org/wiki/ISO_4217#Active_codes'\n            description: See a list of codes.\n        default_currency:\n          description: Available if the relation `default_currency` is expanded.\n          $ref: '#/components/schemas/currency'\n        currencies:\n          description: \u003e-\n            The currencies that are enabled for the Store. Available if the\n            relation `currencies` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/currency'\n        swap_link_template:\n          description: \u003e-\n            A template to generate Swap links from. Use {{cart_id}} to include\n            the Swap's `cart_id` in the link.\n          type: string\n          example: null\n        payment_link_template:\n          description: \u003e-\n            A template to generate Payment links from. Use {{cart_id}} to\n            include the payment's `cart_id` in the link.\n          type: string\n          example: null\n        invite_link_template:\n          description: A template to generate Invite links from\n          type: string\n          example: null\n        default_sales_channel_id:\n          type: string\n          description: The sales channel ID the cart is associated with.\n          example: null\n        default_sales_channel:\n          description: \u003e-\n            A sales channel object. Available if the relation\n            `default_sales_channel` is expanded.\n          type: object\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    swap:\n      title: Swap\n      description: \u003e-\n        Swaps can be created when a Customer wishes to exchange Products that\n        they have purchased to different Products. Swaps consist of a Return of\n        previously purchased Products and a Fulfillment of new Products, the\n        amount paid for the Products being returned will be used towards payment\n        for the new Products. In the case where the amount paid for the the\n        Products being returned exceed the amount to be paid for the new\n        Products, a Refund will be issued for the difference.\n      x-resourceId: swap\n      required:\n        - fulfillment_status\n        - payment_status\n        - order_id\n      properties:\n        id:\n          type: string\n          description: The swap's ID\n          example: swap_01F0YET86Y9G92D3YDR9Y6V676\n        fulfillment_status:\n          description: The status of the Fulfillment of the Swap.\n          type: string\n          enum:\n            - not_fulfilled\n            - fulfilled\n            - shipped\n            - canceled\n            - requires_action\n          example: not_fulfilled\n        payment_status:\n          description: \u003e-\n            The status of the Payment of the Swap. The payment may either refer\n            to the refund of an amount or the authorization of a new amount.\n          type: string\n          enum:\n            - not_paid\n            - awaiting\n            - captured\n            - confirmed\n            - canceled\n            - difference_refunded\n            - partially_refunded\n            - refunded\n            - requires_action\n          example: not_paid\n        order_id:\n          description: \u003e-\n            The ID of the Order where the Line Items to be returned where\n            purchased.\n          type: string\n          example: order_01G8TJSYT9M6AVS5N4EMNFS1EK\n        order:\n          description: An order object. Available if the relation `order` is expanded.\n          type: object\n        additional_items:\n          description: \u003e-\n            The new Line Items to ship to the Customer. Available if the\n            relation `additional_items` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/line_item'\n        return_order:\n          description: \u003e-\n            A return order object. The Return that is issued for the return part\n            of the Swap. Available if the relation `return_order` is expanded.\n          type: object\n        fulfillments:\n          description: \u003e-\n            The Fulfillments used to send the new Line Items. Available if the\n            relation `fulfillments` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/fulfillment'\n        payment:\n          description: \u003e-\n            The Payment authorized when the Swap requires an additional amount\n            to be charged from the Customer. Available if the relation `payment`\n            is expanded.\n          $ref: '#/components/schemas/payment'\n        difference_due:\n          description: \u003e-\n            The difference that is paid or refunded as a result of the Swap. May\n            be negative when the amount paid for the returned items exceed the\n            total of the new Products.\n          type: integer\n          example: 0\n        shipping_address_id:\n          description: \u003e-\n            The Address to send the new Line Items to - in most cases this will\n            be the same as the shipping address on the Order.\n          type: string\n          example: addr_01G8ZH853YPY9B94857DY91YGW\n        shipping_address:\n          description: Available if the relation `shipping_address` is expanded.\n          $ref: '#/components/schemas/address'\n        shipping_methods:\n          description: \u003e-\n            The Shipping Methods used to fulfill the additional items purchased.\n            Available if the relation `shipping_methods` is expanded.\n          type: array\n          items:\n            $ref: '#/components/schemas/shipping_method'\n        cart_id:\n          description: The id of the Cart that the Customer will use to confirm the Swap.\n          type: string\n          example: cart_01G8ZH853Y6TFXWPG5EYE81X63\n        cart:\n          description: A cart object. Available if the relation `cart` is expanded.\n          type: object\n        allow_backorder:\n          description: 'If true, swaps can be completed with items out of stock'\n          type: boolean\n          default: false\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of the swap\n            in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        confirmed_at:\n          description: \u003e-\n            The date with timezone at which the Swap was confirmed by the\n            Customer.\n          type: string\n          format: date-time\n        canceled_at:\n          description: The date with timezone at which the Swap was canceled.\n          type: string\n          format: date-time\n        no_notification:\n          description: 'If set to true, no notification will be sent related to this swap'\n          type: boolean\n          example: false\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    tax_line:\n      title: Tax Line\n      description: Line item that specifies an amount of tax to add to a line item.\n      x-resourceId: tax_line\n      required:\n        - rate\n        - name\n      properties:\n        id:\n          type: string\n          description: The tax line's ID\n          example: tl_01G1G5V2DRX1SK6NQQ8VVX4HQ8\n        code:\n          description: A code to identify the tax type by\n          type: string\n          example: tax01\n        name:\n          description: A human friendly name for the tax\n          type: string\n          example: Tax Example\n        rate:\n          description: The numeric rate to charge tax by\n          type: number\n          example: 10\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    tax_provider:\n      title: Tax Provider\n      description: The tax service used to calculate taxes\n      x-resourceId: tax_provider\n      properties:\n        id:\n          description: The id of the tax provider as given by the plugin.\n          type: string\n          example: manual\n        is_installed:\n          description: \u003e-\n            Whether the plugin is installed in the current version. Plugins that\n            are no longer installed are not deleted by will have this field set\n            to `false`.\n          type: boolean\n          default: true\n    tax_rate:\n      title: Tax Rate\n      description: \u003e-\n        A Tax Rate can be used to associate a certain rate to charge on products\n        within a given Region\n      x-resourceId: line_item\n      required:\n        - name\n        - region_id\n      properties:\n        id:\n          type: string\n          description: The tax rate's ID\n          example: txr_01G8XDBAWKBHHJRKH0AV02KXBR\n        rate:\n          description: The numeric rate to charge\n          type: number\n          example: 10\n        code:\n          description: A code to identify the tax type by\n          type: string\n          example: tax01\n        name:\n          description: A human friendly name for the tax\n          type: string\n          example: Tax Example\n        region_id:\n          type: string\n          description: The id of the Region that the rate belongs to\n          example: reg_01G1G5V26T9H8Y0M4JNE3YGA4G\n        region:\n          description: A region object. Available if the relation `region` is expanded.\n          type: object\n        products:\n          type: array\n          description: \u003e-\n            The products that belong to this tax rate. Available if the relation\n            `products` is expanded.\n          items:\n            type: object\n            description: A product object.\n        product_types:\n          type: array\n          description: \u003e-\n            The product types that belong to this tax rate. Available if the\n            relation `product_types` is expanded.\n          items:\n            type: object\n            description: A product type object.\n        shipping_options:\n          type: array\n          description: \u003e-\n            The shipping options that belong to this tax rate. Available if the\n            relation `shipping_options` is expanded.\n          items:\n            type: object\n            description: A shipping option object.\n        product_count:\n          description: The count of products\n          type: integer\n          example: null\n        product_type_count:\n          description: The count of product types\n          type: integer\n          example: null\n        shipping_option_count:\n          description: The count of shipping options\n          type: integer\n          example: null\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    tracking_link:\n      title: Tracking Link\n      description: \u003e-\n        Tracking Link holds information about tracking numbers for a\n        Fulfillment. Tracking Links can optionally contain a URL that can be\n        visited to see the status of the shipment.\n      x-resourceId: tracking_link\n      required:\n        - tracking_number\n        - fulfillment_id\n      properties:\n        id:\n          type: string\n          description: The tracking link's ID\n          example: tlink_01G8ZH853Y6TFXWPG5EYE81X63\n        url:\n          description: The URL at which the status of the shipment can be tracked.\n          type: string\n          format: uri\n        tracking_number:\n          description: The tracking number given by the shipping carrier.\n          type: string\n          format: RH370168054CN\n        fulfillment_id:\n          type: string\n          description: The id of the Fulfillment that the Tracking Link references.\n          example: ful_01G8ZRTMQCA76TXNAT81KPJZRF\n        fulfillment:\n          description: Available if the relation `fulfillment` is expanded.\n          $ref: '#/components/schemas/fulfillment'\n        idempotency_key:\n          type: string\n          description: \u003e-\n            Randomly generated key used to continue the completion of a process\n            in case of failure.\n          externalDocs:\n            url: \u003e-\n              https://docs.medusajs.com/advanced/backend/payment/overview#idempotency-key\n            description: Learn more how to use the idempotency key.\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    user:\n      title: User\n      description: Represents a User who can manage store settings.\n      x-resourceId: user\n      required:\n        - email\n      properties:\n        id:\n          type: string\n          description: The user's ID\n          example: usr_01G1G5V26F5TB3GPAPNJ8X1S3V\n        email:\n          description: The email of the User\n          type: string\n          format: email\n        first_name:\n          description: The first name of the User\n          type: string\n          example: Levi\n        last_name:\n          description: The last name of the User\n          type: string\n          example: Bogan\n        api_token:\n          description: An API token associated with the user.\n          type: string\n          example: null\n        created_at:\n          type: string\n          description: The date with timezone at which the resource was created.\n          format: date-time\n        updated_at:\n          type: string\n          description: The date with timezone at which the resource was updated.\n          format: date-time\n        deleted_at:\n          type: string\n          description: The date with timezone at which the resource was deleted.\n          format: date-time\n        metadata:\n          type: object\n          description: An optional key-value map with additional details\n          example:\n            car: white\n    multiple_errors:\n      title: Multiple Errors\n      x-resourceId: multiple_errors\n      properties:\n        errors:\n          type: array\n          description: Array of errors\n          items:\n            $ref: '#/components/schemas/error'\n        message:\n          type: string\n          default: \u003e-\n            Provided request body contains errors. Please check the data and\n            retry the request\n    error:\n      title: Response Error\n      x-resourceId: error\n      properties:\n        code:\n          type: string\n          description: A slug code to indicate the type of the error.\n        message:\n          type: string\n          description: Description of the error that occurred.\n        type:\n          type: string\n          description: A slug indicating the type of the error.\n",
			"canonicalURL": "/github.com/medusajs/medusa@f32804a43c62a47f1930eb28cb73b6f3dbc3447e/-/blob/docs/api/admin-spec3.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/medusajs/medusa/blob/f32804a43c62a47f1930eb28cb73b6f3dbc3447e/docs/api/admin-spec3.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/batch-jobs\": get: operation \"GetBatchJobs\": parameters: parse parameter \"id\": at 1:160916: all oneOf schemas must be simple types"
}