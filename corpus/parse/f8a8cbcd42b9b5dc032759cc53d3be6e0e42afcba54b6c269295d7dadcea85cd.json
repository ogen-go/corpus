{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/docker/docker.github.io"
		},
		"file": {
			"name": "latest.yaml",
			"size": 0,
			"path": "docker-hub/api/latest.yaml",
			"byteSize": 79793,
			"content": "openapi: 3.0.0\ninfo:\n  title: Docker HUB API\n  version: beta\n  x-logo:\n    url: https://docs.docker.com/images/logo-docker-main.png\n    href: /reference\n  description: |\n    Docker Hub is a service provided by Docker for finding and sharing container\n    images with your team.\n\n    It is the world's largest library and community for container images.\n\n    In addition to the [Docker Hub UI](https://docs.docker.com/docker-hub/) and [Docker Hub CLI tool](https://github.com/docker/hub-tool#readme) (currently experimental),\n\n    Docker provides an API that allows you to interact with Docker Hub.\n\n    Browse through the Docker Hub API documentation to explore the supported endpoints.\n\ntags:\n  - name: resources\n    x-displayName: Resources\n    description: |\n      The following resources are available to interact with the documented API:\n\n      - \u003ca href=\"https://github.com/docker/hub-tool#readme\" target=\"_blank\"\u003eDocker Hub CLI tool\u003c/a\u003e (currently experimental)\n      - \u003ca href=\"https://www.postman.com/dockerdev/workspace/docker-hub/collection/17990590-9574e087-2a50-4ecf-88b3-55f12a29d99e\" target=\"_blank\"\u003ePostman Collection\u003c/a\u003e\n  - name: rate-limiting\n    x-displayName: Rate Limiting\n    description: |\n      The Docker Hub API is limited on the amount of requests you can perform per minute against it.\n\n      If you haven't hit the limit, each request to the API will return the\n\n      following headers in the response.\n\n      - `X-RateLimit-Limit` - The limit of requests per minute.\n      - `X-RateLimit-Remaining` - The remaining amount of calls within the limit period.\n      - `X-RateLimit-Reset` - The unix timestamp of when the remaining resets.\n\n      If you have hit the limit, you will receive a response status of `429` and the `X-Retry-After` \n      header in the response.\n\n      The `X-Retry-After` header is a unix timestamp of when you can call the API again.\n\n      *Note: These rate limits are separate from anti-abuse and Docker Hub\n\n      download, or pull rate limiting. To learn more about Docker Hub pull rate\n\n      limiting, see [Docker Hub download rate limit](https://docs.docker.com/docker-hub/download-rate-limit/).*\n  - name: authentication\n    x-displayName: Authentication\n    description: |\n      Most Docker Hub API endpoints require you to authenticate using your\n      Docker credentials before using them.\n\n      Additionally, similar to the Docker Hub UI features, API endpoint responses may vary depending \n      on your plan (Free, Pro, or Team) and your account's permissions.\n\n      To learn more about the features available in each plan and to upgrade your existing plan, see [Docker Pricing](https://www.docker.com/pricing).\n  - name: access-tokens\n    x-displayName: Personal Access Tokens\n    description: |\n      The Personal Access Token endpoints lets you manage personal access tokens. For more \n      information, see [Access Tokens](https://docs.docker.com/docker-hub/access-tokens/).\n\n      You can use a personal access token instead of a password in the [Docker CLI](https://docs.docker.com/engine/reference/commandline/cli/) \n      or in the [Create an authentication token](#operation/PostUsersLogin) route to obtain a bearer \n      token.\n\n      ### Scopes\n\n      For each scope grouping (in this case \"repo\"), you only need to define 1 scope as any lower \n      scopes are assumed. For example: If you define `repo:write`, the API assumes the scope of both \n      `repo:read` *and* `repo:public_read` as well. If you were to define both `repo:write` *and* \n      `repo:read`, then `repo:read` is assumed by `repo:write` and ignored.\n\n      ***Treat your personal access token like your password and keep it secret. You cannot retrieve \n      your token after it is generated.***\n  - name: images\n    x-displayName: Advanced Image Management\n    description: |\n      The Advanced Image Management API endpoints allow you to manage Docker\n      images across all repositories.\n\n      For more information, see [Advanced Image Management dashboard](https://docs.docker.com/docker-hub/image-management/).\n  - name: audit-logs\n    x-displayName: Audit Logs\n    description: |\n      The Audit Logs API endpoints allow you to query audit log events across a\n      namespace.\n\n      For more information, see [Audit Log](https://docs.docker.com/docker-hub/audit-log/)\n  - name: org-settings\n    x-displayName: Org Settings\n    description: |\n      The Org Settings API endpoints allow you to manage your organization's\n      settings.\n  - name: repositories\n    x-displayName: Repositories\n    description: |\n      The repository endpoints allow you to manage your repository's\n      configuration like description.\n  - name: scim\n    x-displayName: SCIM\n    description: |\n      SCIM is a provisioning system that lets you manage users within your identity provider (IdP).\n      For more information, see [System for Cross-domain Identity management](https://docs.docker.com/docker-hub/scim/).\nx-tagGroups:\n  - name: General\n    tags:\n      - resources\n      - rate-limiting\n  - name: API\n    tags:\n      - authentication\n      - access-tokens\n      - images\n      - audit-logs\n      - org-settings\n      - repositories\n      - scim\npaths:\n  /v2/users/login:\n    post:\n      tags:\n        - authentication\n      summary: Create an authentication token\n      operationId: PostUsersLogin\n      description: |\n        Creates and returns a bearer token in JWT format that you can use to\n        authenticate with Docker Hub APIs.\n\n        The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.\n\n        Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsersLoginRequest\"\n        description: Login details.\n        required: true\n      responses:\n        200:\n          description: Authentication successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsersLoginSuccessResponse\"\n        401:\n          description: Authentication failed or second factor required\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsersLoginErrorResponse\"\n  /v2/users/2fa-login:\n    post:\n      tags:\n        - authentication\n      summary: Second factor authentication.\n      operationId: PostUsers2FALogin\n      description: |\n        When user has 2FA enabled, this is the second call to perform after\n        `/v2/users/login` call.\n\n        Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.\n\n        The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.\n\n        Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Users2FALoginRequest\"\n        description: Login details.\n        required: true\n      responses:\n        200:\n          description: Authentication successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsersLoginSuccessResponse\"\n        401:\n          description: Authentication failed or second factor required\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsers2FALoginErrorResponse\"\n  /v2/access-tokens:\n    post:\n      summary: Create a personal access token\n      description: Creates and returns a personal access token.\n      tags:\n        - access-tokens\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/createAccessTokenRequest\"\n        required: true\n      responses:\n        201:\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/createAccessTokensResponse\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n    get:\n      summary: Get a list of personal access tokens\n      description: Returns a paginated list of personal access tokens.\n      tags:\n        - access-tokens\n      parameters:\n        - in: query\n          name: page\n          schema:\n            type: number\n            default: 1\n        - in: query\n          name: page_size\n          schema:\n            type: number\n            default: 10\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/getAccessTokensResponse\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n  /v2/access-tokens/{uuid}:\n    parameters:\n      - in: path\n        name: uuid\n        required: true\n        schema:\n          type: string\n    patch:\n      summary: Update a personal access token\n      description: |\n        Updates a personal access token partially. You can either update the\n        token's label or enable/disable it.\n      tags:\n        - access-tokens\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/patchAccessTokenRequest\"\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/patchAccessTokenResponse\"\n        400:\n          $ref: \"#/components/responses/BadRequest\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n    get:\n      summary: Get a personal access token\n      description: Returns a personal access token by UUID.\n      tags:\n        - access-tokens\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/accessToken\"\n                  - type: object\n                    properties:\n                      token:\n                        type: string\n                        example: \"\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n    delete:\n      summary: Delete a personal access token\n      description: |\n        Deletes a personal access token permanently. This cannot be undone.\n      tags:\n        - access-tokens\n      responses:\n        204:\n          description: A successful response.\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n  /v2/namespaces/{namespace}/repositories/{repository}/images-summary:\n    get:\n      tags:\n        - images\n      summary: Get summary of repository's images\n      description: |\n        Gets the number of images in a repository and the number of images\n        counted as active and inactive.\n      operationId: GetNamespacesRepositoriesImagesSummary\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          description: Namespace of the repository.\n          schema:\n            type: string\n        - name: repository\n          in: path\n          required: true\n          description: Name of the repository.\n          schema:\n            type: string\n        - name: active_from\n          in: query\n          required: false\n          description: |\n            Sets the time from which an image must have been pushed or pulled to\n            be counted as active.\n\n            Defaults to 1 month before the current time.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref:\n                  \"#/components/schemas/GetNamespaceRepositoryImagesSummaryResponse\"\n        401:\n          description: Unauthorized - user does not have read access to the namespace\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /v2/namespaces/{namespace}/repositories/{repository}/images:\n    get:\n      tags:\n        - images\n      summary: Get details of repository's images\n      description: Gets details on the images in a repository.\n      operationId: GetNamespacesRepositoriesImages\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          description: Namespace of the repository.\n          schema:\n            type: string\n        - name: repository\n          in: path\n          required: true\n          description: Name of the repository.\n          schema:\n            type: string\n        - name: status\n          in: query\n          required: false\n          description: Filters to only show images of this status.\n          schema:\n            type: string\n            enum:\n              - active\n              - inactive\n        - name: currently_tagged\n          in: query\n          required: false\n          description: |\n            Filters to only show images with:\n            - `true`: at least 1 current tag.\n            - `false`: no current tags.\n          schema:\n            type: boolean\n        - name: ordering\n          in: query\n          required: false\n          description: |\n            Orders the results by this property.\n\n            Prefixing with `-` sorts by descending order.\n          schema:\n            type: string\n            enum:\n              - last_activity\n              - -last_activity\n              - digest\n              - -digest\n        - name: active_from\n          in: query\n          required: false\n          description: |\n            Sets the time from which an image must have been pushed or pulled to\n            be counted as active.\n\n            Defaults to 1 month before the current time.\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          description: Page number to get. Defaults to 1.\n          schema:\n            type: integer\n        - name: page_size\n          in: query\n          required: false\n          description: Number of images to get per page. Defaults to 10. Max of 100.\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetNamespaceRepositoryImagesResponse\"\n        401:\n          description: Unauthorized - user does not have read access to the namespace.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        403:\n          description: Forbidden - this API is only available to users on Pro or Team plans.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /v2/namespaces/{namespace}/repositories/{repository}/images/{digest}/tags:\n    get:\n      tags:\n        - images\n      summary: Get image's tags\n      description: Gets current and historical tags for an image.\n      operationId: GetNamespacesRepositoriesImagesTags\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          description: Namespace of the repository.\n          schema:\n            type: string\n        - name: repository\n          in: path\n          required: true\n          description: Name of the repository.\n          schema:\n            type: string\n        - name: digest\n          in: path\n          required: true\n          description: Digest of the image.\n          schema:\n            type: string\n        - name: page\n          in: query\n          required: false\n          description: Page number to get. Defaults to 1.\n          schema:\n            type: integer\n        - name: page_size\n          in: query\n          required: false\n          description: Number of images to get per page. Defaults to 10. Max of 100.\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetNamespaceRepositoryImagesTagsResponse\"\n        401:\n          description: Unauthorized - user does not have read access to the namespace\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n        403:\n          description: Forbidden - this API is only available to users on Pro or Team plans\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /v2/namespaces/{namespace}/delete-images:\n    post:\n      tags:\n        - images\n      summary: Delete images\n      operationId: PostNamespacesDeleteImages\n      description: |\n        Deletes one or more images within a namespace. This is currently limited to a single \n        repository.\n\n        If you attempt to delete images that are marked as active or are currently tagged, the deletion does not happen and it displays the warnings.\n        To continue with the deletion, you must ignore these warnings by putting them in the `ignore_warnings` property.\n\n        Deleting a currently tagged image deletes the tag from the repository.\n\n        You cannot ignore errors. It is not possible to directly delete children of multi-arch images.\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          description: Namespace of the repository.\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PostNamespacesDeleteImagesRequest\"\n        description: Delete request.\n        required: true\n      responses:\n        200:\n          description: Deletion completed\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostNamespacesDeleteImagesResponseSuccess\"\n        400:\n          description: Deletion not possible\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostNamespacesDeleteImagesResponseError\"\n        403:\n          description: Forbidden - this API is only available to users on Pro or Team plans\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ErrorResponse\"\n  /v2/auditlogs/{account}:\n    get:\n      summary: Returns list of audit log  events.\n      description: Get audit log events for a given namespace.\n      operationId: AuditLogs_GetAuditLogs\n      responses:\n        200:\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetAuditLogsResponse\"\n              examples:\n                response:\n                  value:\n                    logs:\n                      - account: docker\n                        action: repo.tag.push\n                        name: docker/example\n                        actor: docker\n                        data:\n                          digest: sha256:c1ae9c435032a276f80220c7d9b40f76266bbe79243d34f9cda30b76fe114dfa\n                          tag: latest\n                        timestamp: 2021-02-19T01:34:35Z\n                        action_description:\n                          pushed the tag latest with the digest\n                          sha256:c1ae9c435032a to the repository docker/example\n        429:\n          description: \"\"\n          content:\n            application/json:\n              schema: {}\n              examples:\n                response:\n                  value:\n                    detail: Rate limit exceeded\n                    error: false\n        500:\n          description: \"\"\n          content:\n            application/json:\n              schema: {}\n        default:\n          description: An unexpected error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/rpcStatus\"\n      parameters:\n        - name: account\n          description: Namespace to query audit logs for.\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: action\n          description:\n            action name one of [\"repo.tag.push\", ...]. Optional parameter to\n            filter specific audit log actions.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: name\n          description:\n            name. Optional parameter to filter audit log events to a specific\n            name. For repository events, this is the name of the repository. For\n            organization events, this is the name of the organization. For team\n            member events, this is the username of the team member.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: actor\n          description:\n            actor name. Optional parameter to filter audit log events to the\n            specific user who triggered the event.\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: from\n          description: Start of the time window you wish to query audit events for.\n          in: query\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: to\n          description: End of the time window you wish to query audit events for.\n          in: query\n          required: false\n          schema:\n            type: string\n            format: date-time\n        - name: page\n          description: page - specify page number. Page number to get.\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 1\n        - name: page_size\n          description: page_size - specify page size. Number of events to return per page.\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int32\n            default: 25\n      tags:\n        - audit-logs\n  /v2/auditlogs/{account}/actions:\n    get:\n      summary: Returns list of audit log actions.\n      description:\n        Get audit log actions for a namespace to be used as a filter for\n        querying audit events.\n      operationId: AuditLogs_GetAuditActions\n      responses:\n        200:\n          description: A successful response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/GetAuditActionsResponse\"\n              examples:\n                response:\n                  value:\n                    actions:\n                      org:\n                        actions:\n                          - name: team.create\n                            description: contains team create events\n                            label: Team Created\n                          - name: team.delete\n                            description: contains team delete events\n                            label: Team Deleted\n                          - name: team.member.add\n                            description: contains team member add events\n                            label: Team Member Added\n                          - name: team.member.remove\n                            description: contains team member remove events\n                            label: Team Member Removed\n                          - name: team.member.invite\n                            description: contains team member invite events\n                            label: Team Member Invited\n                          - name: member.removed\n                            description: contains org member remove events\n                            label: Organization Member Removed\n                          - name: create\n                            description: contains organization create events\n                            label: Organization Created\n                        label: Organization\n                      repo:\n                        actions:\n                          - name: create\n                            description: contains repository create events\n                            label: Repository Created\n                          - name: delete\n                            description: contains repository delete events\n                            label: Repository Deleted\n                          - name: change_privacy\n                            description: contains repository privacy change events\n                            label: Privacy Changed\n                          - name: tag.push\n                            description: contains image tag push events\n                            label: Tag Pushed\n                          - name: tag.delete\n                            description: contains image tag delete events\n                            label: Tag Deleted\n                        label: Repository\n        429:\n          description: \"\"\n          content:\n            application/json:\n              schema: {}\n              examples:\n                response:\n                  value:\n                    detail: Rate limit exceeded\n                    error: false\n        500:\n          description: \"\"\n          content:\n            application/json:\n              schema: {}\n        default:\n          description: An unexpected error response.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/rpcStatus\"\n      parameters:\n        - name: account\n          description: Namespace to query audit log actions for.\n          in: path\n          required: true\n          schema:\n            type: string\n      tags:\n        - audit-logs\n  /v2/orgs/{name}/settings:\n    parameters:\n      - in: path\n        name: name\n        description: Name of the organization.\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Get organization settings\n      description: |\n        Returns organization settings by name.\n      tags:\n        - org-settings\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/orgSettings\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        403:\n          $ref: \"#/components/responses/Forbidden\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n    put:\n      summary: Update organization settings\n      description: |\n        Updates an organization's settings. Some settings are only used when the\n        organization is on a business plan.\n\n        ***Only users in the \"owners\" group of the organization can use this endpoint.***\n\n        The following settings are only used on a business plan:\n        - `restricted_images`\n      tags:\n        - org-settings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              required:\n                - restricted_images\n              properties:\n                restricted_images:\n                  allOf:\n                    - $ref: \"#/components/schemas/restricted_images\"\n                    - type: object\n                      required:\n                        - enabled\n                        - allow_official_images\n                        - allow_verified_publishers\n        required: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/orgSettings\"\n        401:\n          $ref: \"#/components/responses/Unauthorized\"\n        403:\n          $ref: \"#/components/responses/Forbidden\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n          \n\n  /v2/namespaces/{namespace}/repositories/{repository}/tags:\n    parameters:\n      - $ref: \"#/components/parameters/namespace\"\n      - $ref: \"#/components/parameters/repository\"\n    get:\n      summary: \"List repository tags\"\n      tags: [ repositories ]\n      parameters:\n        - $ref: \"#/components/parameters/page\"\n        - $ref: \"#/components/parameters/page_size\"\n      responses:\n        200:\n          $ref: \"#/components/responses/list_tags\"\n        403:\n          $ref: \"#/components/responses/Forbidden\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n    head:\n      summary: \"Check repository tags\"\n      tags: [ repositories ]\n      responses:\n        200:\n          description: \"Repository contains tags\"\n        403:\n          $ref: \"#/components/responses/Forbidden\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n\n  /v2/namespaces/{namespace}/repositories/{repository}/tags/{tag}:\n    parameters:\n      - $ref: \"#/components/parameters/namespace\"\n      - $ref: \"#/components/parameters/repository\"\n      - $ref: \"#/components/parameters/tag\"\n    get:\n      summary: \"Read repository tag\"\n      tags: [ repositories ]\n      responses:\n        200:\n          $ref: \"#/components/responses/get_tag\"\n        403:\n          $ref: \"#/components/responses/Forbidden\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n    head:\n      summary: \"Check repository tag\"\n      tags: [ repositories ]\n      responses:\n        200:\n          description: \"Repository tag exists\"\n        403:\n          $ref: \"#/components/responses/Forbidden\"\n        404:\n          $ref: \"#/components/responses/NotFound\"\n\n\n  /v2/scim/2.0/ServiceProviderConfig:\n    get:\n      summary: Get service provider config\n      description: |\n        Returns a service provider config for Docker's configuration.\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      responses:\n        200:\n          $ref: '#/components/responses/scim_get_service_provider_config_resp'\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n  /v2/scim/2.0/ResourceTypes:\n    get:\n      summary: List resource types\n      description: |\n        Returns all resource types supported for the SCIM configuration.\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_get_resource_types_resp\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n  /v2/scim/2.0/ResourceTypes/{name}:\n    get:\n      summary: Get a resource type\n      description: |\n        Returns a resource type by name.\n      tags: [ scim ]\n      parameters:\n        - name: name\n          in: path\n          schema:\n            type: string\n          example: User\n      security:\n        - bearerSCIMAuth: [ ]\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_get_resource_type_resp\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        404:\n          $ref: \"#/components/responses/scim_not_found\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n  /v2/scim/2.0/Schemas:\n    get:\n      summary: List schemas\n      description: |\n        Returns all schemas supported for the SCIM configuration.\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_get_schemas_resp\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n  /v2/scim/2.0/Schemas/{id}:\n    get:\n      summary: Get a schema\n      description: |\n        Returns a schema by ID.\n      tags: [ scim ]\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: string\n          example: urn:ietf:params:scim:schemas:core:2.0:User\n      security:\n        - bearerSCIMAuth: [ ]\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_get_schema_resp\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        404:\n          $ref: \"#/components/responses/scim_not_found\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n  /v2/scim/2.0/Users:\n    get:\n      summary: List users\n      description: |\n        List users, returns paginated users for an organization. Use `startIndex`\n        and `count` query parameters to receive paginated results.\n\n        **Sorting:**\u003cbr\u003e\n        Sorting lets you to specify the order of returned resources by specifying\n        a combination of `sortBy` and `sortOrder` query parameters.\n\n        The `sortBy` parameter specifies the attribute whose value will be used\n        to order the returned responses. The `sortOrder` parameter defines the\n        order in which the `sortBy` parameter is applied. Allowed values are\n        \"ascending\" and \"descending\".\n\n        **Filtering:**\u003cbr\u003e\n        You can request a subset of resources by specifying the `filter` query\n        parameter containing a filter expression. Attribute names and attribute\n        operators used in filters are case insensitive. The filter parameter\n        must contain at least one valid expression. Each expression must contain\n        an attribute name followed by an attribute operator and an optional\n        value.\n\n        Supported operators are listed below.\n\n        - `eq` equal\n        - `ne` not equal\n        - `co` contains\n        - `sw` starts with\n        - `and` Logical \"and\"\n        - `or` Logical \"or\"\n        - `not` \"Not\" function\n        - `()` Precedence grouping\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      parameters:\n        - name: startIndex\n          in: query\n          schema:\n            type: integer\n            minimum: 1\n          description: \"\"\n          example: 1\n        - name: count\n          in: query\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 200\n          description: \"\"\n          example: 10\n        - name: filter\n          in: query\n          schema:\n            type: string\n          description: \"\"\n          example: userName eq \"jon.snow@docker.com\"\n        - $ref: \"#/components/parameters/scim_attributes\"\n        - name: sortOrder\n          in: query\n          schema:\n            type: string\n            enum:\n              - ascending\n              - descending\n        - name: sortBy\n          in: query\n          schema:\n            type: string\n          description: \"User attribute to sort by.\"\n          example: userName\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_get_users_resp\"\n        400:\n          $ref: \"#/components/responses/scim_bad_request\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        403:\n          $ref: \"#/components/responses/scim_forbidden\"\n        404:\n          $ref: \"#/components/responses/scim_not_found\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n    post:\n      summary: Create user\n      description: |\n        Creates a user. If the user already exists by email, they are assigned\n        to the organization on the \"company\" team.\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      requestBody:\n        $ref: \"#/components/requestBodies/scim_create_user_request\"\n      responses:\n        201:\n          $ref: \"#/components/responses/scim_create_user_resp\"\n        400:\n          $ref: \"#/components/responses/scim_bad_request\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        403:\n          $ref: \"#/components/responses/scim_forbidden\"\n        404:\n          $ref: \"#/components/responses/scim_not_found\"\n        409:\n          $ref: \"#/components/responses/scim_conflict\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n  /v2/scim/2.0/Users/{id}:\n    parameters:\n      - $ref: \"#/components/parameters/scim_user_id\"\n    get:\n      summary: Get a user\n      description: |\n        Returns a user by ID.\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_get_user_resp\"\n        400:\n          $ref: \"#/components/responses/scim_bad_request\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        403:\n          $ref: \"#/components/responses/scim_forbidden\"\n        404:\n          $ref: \"#/components/responses/scim_not_found\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n    put:\n      summary: Update a user\n      description: |\n        Updates a user. Use this route to change the user's name, activate,\n        and deactivate the user.\n      tags: [ scim ]\n      security:\n        - bearerSCIMAuth: [ ]\n      requestBody:\n        $ref: \"#/components/requestBodies/scim_update_user_request\"\n      responses:\n        200:\n          $ref: \"#/components/responses/scim_update_user_resp\"\n        400:\n          $ref: \"#/components/responses/scim_bad_request\"\n        401:\n          $ref: \"#/components/responses/scim_unauthorized\"\n        403:\n          $ref: \"#/components/responses/scim_forbidden\"\n        404:\n          $ref: \"#/components/responses/scim_not_found\"\n        409:\n          $ref: \"#/components/responses/scim_conflict\"\n        500:\n          $ref: \"#/components/responses/scim_error\"\n\n\nservers:\n  - url: https://hub.docker.com/\ncomponents:\n  responses:\n    BadRequest:\n      description: Bad Request\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ValueError\"\n    Unauthorized:\n      description: Unauthorized\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    Forbidden:\n      description: Forbidden\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n    NotFound:\n      description: Not Found\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Error\"\n\n    scim_bad_request:\n      description: Bad Request\n      content:\n        application/scim+json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/scim_error\"\n              - properties:\n                  status:\n                    example: \"400\"\n                  scimType:\n                    type: string\n                    description: Some types of errors will return this per the\n                      specification.\n    scim_unauthorized:\n      description: Unauthorized\n      content:\n        application/scim+json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/scim_error\"\n              - properties:\n                  status:\n                    example: \"401\"\n    scim_forbidden:\n      description: Forbidden\n      content:\n        application/scim+json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/scim_error\"\n              - properties:\n                  status:\n                    example: \"403\"\n    scim_not_found:\n      description: Not Found\n      content:\n        application/scim+json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/scim_error\"\n              - properties:\n                  status:\n                    example: \"404\"\n    scim_conflict:\n      description: Conflict\n      content:\n        application/scim+json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/scim_error\"\n              - properties:\n                  status:\n                    example: \"409\"\n    scim_error:\n      description: Internal Error\n      content:\n        application/scim+json:\n          schema:\n            allOf:\n              - $ref: \"#/components/schemas/scim_error\"\n              - properties:\n                  status:\n                    example: \"500\"\n\n    scim_get_service_provider_config_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            $ref: \"#/components/schemas/scim_service_provider_config\"\n\n    scim_get_resource_types_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            type: object\n            properties:\n              schemas:\n                type: array\n                items:\n                  type: string\n                example: [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ]\n              totalResults:\n                type: integer\n                example: 1\n              resources:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/scim_resource_type\"\n\n    scim_get_resource_type_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            $ref: \"#/components/schemas/scim_resource_type\"\n\n    scim_get_schemas_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            type: object\n            properties:\n              schemas:\n                type: array\n                items:\n                  type: string\n                example: [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ]\n              totalResults:\n                type: integer\n                example: 1\n              resources:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/scim_schema\"\n\n    scim_get_schema_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            $ref: \"#/components/schemas/scim_schema\"\n\n    scim_get_users_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            type: object\n            properties:\n              schemas:\n                type: array\n                items:\n                  type: string\n                example: [ \"urn:ietf:params:scim:api:messages:2.0:ListResponse\" ]\n              totalResults:\n                type: integer\n                example: 1\n              startIndex:\n                type: integer\n                example: 1\n              itemsPerPage:\n                type: integer\n                example: 10\n              resources:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/scim_user\"\n\n    scim_create_user_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            $ref: \"#/components/schemas/scim_user\"\n\n    scim_get_user_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            $ref: \"#/components/schemas/scim_user\"\n\n    scim_update_user_resp:\n      description: \"\"\n      content:\n        application/scim+json:\n          schema:\n            $ref: \"#/components/schemas/scim_user\"\n            \n    list_tags:\n      description: \"list repository tags\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/paginated_tags\"\n            \n    get_tag:\n      description: \"repository tag\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/tag\"\n\n  schemas:\n    UsersLoginRequest:\n      description: User login details\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          description: The username of the Docker Hub account to authenticate with.\n          type: string\n          example: myusername\n        password:\n          description:\n            The password or personal access token (PAT) of the Docker Hub\n            account to authenticate with.\n          type: string\n          example: hunter2\n    PostUsersLoginSuccessResponse:\n      description: successful user login response\n      type: object\n      properties:\n        token:\n          description: |\n            Created authentication token.\n\n            This token can be used in the HTTP Authorization header as a JWT to authenticate with the Docker Hub APIs.\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n          nullable: false\n    PostUsersLoginErrorResponse:\n      description: failed user login response or second factor required\n      type: object\n      required:\n        - detail\n      properties:\n        detail:\n          description: Description of the error.\n          type: string\n          example: Incorrect authentication credentials\n          nullable: false\n        login_2fa_token:\n          description:\n            Short time lived token to be used on `/v2/users/2fa-login` to\n            complete the authentication. This field is present only if 2FA is\n            enabled.\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n          nullable: true\n    Users2FALoginRequest:\n      description: Second factor user login details\n      type: object\n      required:\n        - login_2fa_token\n        - code\n      properties:\n        login_2fa_token:\n          description: The intermediate 2FA token returned from `/v2/users/login` API.\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n        code:\n          description:\n            The Time-based One-Time Password of the Docker Hub account to\n            authenticate with.\n          type: string\n          example: 123456\n    PostUsers2FALoginErrorResponse:\n      description: failed second factor login response.\n      type: object\n      properties:\n        detail:\n          description: Description of the error.\n          type: string\n          example: Incorrect authentication credentials\n          nullable: false\n    ErrorInfo:\n      description: Context information for an error used for diagnostics.\n      type: object\n      properties:\n        api_call_docker_id:\n          description: ID of docker user.\n          type: string\n        api_call_name:\n          description: Name of the API operation called.\n          type: string\n        api_call_start:\n          description: Date/time of call start.\n          type: string\n        api_call_txnid:\n          description: Unique ID for this call.\n          type: string\n    ErrorResponse:\n      description: Represents an error.\n      type: object\n      properties:\n        txnid:\n          description: Unique ID for this call.\n          type: string\n        message:\n          description: The error message.\n          type: string\n        errinfo:\n          $ref: \"#/components/schemas/ErrorInfo\"\n    ErrorDetail:\n      description: Error with a detail field.\n      type: object\n      properties:\n        detail:\n          description: The error message.\n          type: string\n    GetNamespaceRepositoryImagesSummaryResponse:\n      description: Summary information for images in a repository.\n      type: object\n      properties:\n        active_from:\n          description:\n            Time from which an image must have been pushed or pulled to be\n            counted as active.\n          type: string\n          example: 2021-01-25T14:25:37.076343059Z\n        statistics:\n          type: object\n          properties:\n            total:\n              description: Number of images in this repository.\n              type: integer\n              example: 3\n            active:\n              description: Number of images counted as active in this repository.\n              type: integer\n              example: 2\n            inactive:\n              description: Number of images counted as inactive in this repository.\n              type: integer\n              example: 1\n    GetNamespaceRepositoryImagesResponse:\n      description: Paginated list of images in a repository.\n      type: object\n      properties:\n        count:\n          description: Total count of images in the repository.\n          type: integer\n          example: 100\n        next:\n          description:\n            Link to the next page with the same query parameters if there are\n            more images.\n          type: string\n          example: https://hub.docker.com/v2/namespaces/mynamespace/repositories/myrepo/images?\u0026page=4\u0026page_size=20\n          nullable: true\n        previous:\n          description:\n            Link to the previous page with the same query parameters if not on\n            first page.\n          type: string\n          example: https://hub.docker.com/v2/namespaces/mynamespace/repositories/myrepo/images?\u0026page=2\u0026page_size=20\n          nullable: true\n        results:\n          type: array\n          description: Image details.\n          items:\n            type: object\n            properties:\n              namespace:\n                description: The repository namespace.\n                type: string\n                example: mynamespace\n              repository:\n                description: The repository name.\n                type: string\n                example: myrepo\n              digest:\n                description: The image's digest.\n                type: string\n                example: sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\n              tags:\n                description: The current and historical tags for this image.\n                type: array\n                items:\n                  type: object\n                  properties:\n                    tag:\n                      description: The tag.\n                      type: string\n                      example: latest\n                    is_current:\n                      description: |\n                        `true` if the tag currently points to this image.\n\n                        `false` if it has been overwritten to point at a different image.\n                      type: boolean\n                      example: true\n              last_pushed:\n                description: Time when this image was last pushed.\n                type: string\n                example: 2021-02-24T22:05:27.526308Z\n                nullable: true\n              last_pulled:\n                description:\n                  Time when this image was last pulled. Note this is updated at\n                  most once per hour.\n                type: string\n                example: 2021-02-24T23:16:10.200008Z\n                nullable: true\n              status:\n                description:\n                  The status of the image based on its last activity against the\n                  `active_from` time.\n                type: string\n                enum:\n                  - active\n                  - inactive\n                example: active\n    GetNamespaceRepositoryImagesTagsResponse:\n      description: Paginated list of tags for this repository.\n      type: object\n      properties:\n        count:\n          description: Total count of tags for this image.\n          type: integer\n          example: 100\n        next:\n          description: Link to the next page if there are more tags.\n          type: string\n          example: https://hub.docker.com/v2/namespaces/mynamespace/repositories/myrepo/images/sha256:mydigest/tags?\u0026page=4\u0026page_size=20\n          nullable: true\n        previous:\n          description: Link to the previous page if not on first page.\n          type: string\n          example: https://hub.docker.com/v2/namespaces/mynamespace/repositories/myrepo/images/sha256:mydigest/tags?\u0026page=2\u0026page_size=20\n          nullable: true\n        results:\n          description: The current and historical tags for this image.\n          type: array\n          items:\n            type: object\n            properties:\n              tag:\n                description: The tag.\n                type: string\n                example: latest\n              is_current:\n                description: |\n                  `true` if the tag currently points to this image.\n\n                  `false` if it has been overwritten to point at a different image.\n                type: boolean\n                example: true\n    PostNamespacesDeleteImagesRequest:\n      description: Delete images request.\n      type: object\n      properties:\n        dry_run:\n          description:\n            If `true` then will check and return errors and unignored warnings\n            for the deletion request but will not delete any images.\n          type: boolean\n          example: false\n        active_from:\n          description: |\n            Sets the time from which an image must have been pushed or pulled to\n            be counted as active.\n\n            Defaults to 1 month before the current time.\n          type: string\n          example: 2020-12-01T12:00:00Z\n        manifests:\n          description: Image manifests to delete.\n          type: array\n          items:\n            type: object\n            required:\n              - repository\n              - digest\n            properties:\n              repository:\n                description: Name of the repository to delete the image from.\n                type: string\n                example: myrepo\n              digest:\n                description: Digest of the image to delete.\n                type: string\n                example: sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\n        ignore_warnings:\n          description: |\n            Warnings to ignore. If a warning is not ignored then no deletions will happen and the \n            warning is returned in the response.\n\n            These warnings include:\n\n            - is_active: warning when attempting to delete an image that is marked as active.\n            - current_tag: warning when attempting to delete an image that has one or more current \n            tags in the repository.\n\n            Warnings can be copied from the response to the request.\n          type: array\n          items:\n            type: object\n            required:\n              - repository\n              - digest\n              - warning\n            properties:\n              repository:\n                description: Name of the repository of the image to ignore the warning for.\n                type: string\n                example: myrepo\n              digest:\n                description: Digest of the image to ignore the warning for.\n                type: string\n                example: sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\n              warning:\n                description: Warning to ignore.\n                type: string\n                enum:\n                  - is_active\n                  - current_tag\n                example: current_tag\n              tags:\n                description: Current tags to ignore.\n                type: array\n                items:\n                  type: string\n                  example: latest\n    PostNamespacesDeleteImagesResponseSuccess:\n      description: Successful delete images response.\n      type: object\n      properties:\n        dry_run:\n          description: Whether the request was a dry run or not.\n          type: boolean\n          example: false\n        metrics:\n          type: object\n          properties:\n            manifest_deletes:\n              description: Number of manifests deleted.\n              type: integer\n              example: 3\n            manifest_errors:\n              description: Number of manifests that failed to delete.\n              type: integer\n              example: 0\n            tag_deletes:\n              description: Number of tags deleted.\n              type: integer\n              example: 1\n            tag_errors:\n              description: Number of tags that failed to delete.\n              type: integer\n              example: 0\n    PostNamespacesDeleteImagesResponseError:\n      description: Deletion not possible.\n      type: object\n      properties:\n        txnid:\n          description: Unique ID for this call.\n          type: string\n        message:\n          description: The error message.\n          type: string\n        errinfo:\n          allOf:\n            - $ref: \"#/components/schemas/ErrorInfo\"\n            - type: object\n              properties:\n                type:\n                  description: Type of error.\n                  type: string\n                  example: validation\n                details:\n                  type: object\n                  properties:\n                    errors:\n                      description:\n                        Errors from validating delete request. These cannot be\n                        ignored.\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          repository:\n                            description:\n                              Name of the repository of the image that caused\n                              the error.\n                            type: string\n                            example: myrepo\n                          digest:\n                            description: Digest of the image that caused the error.\n                            type: string\n                            example: sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\n                          error:\n                            description: Error type.\n                            type: string\n                            enum:\n                              - not_found\n                              - unauthorized\n                              - child_manifest\n                            example: not_found\n                    warnings:\n                      description: |\n                        Warnings that can be ignored.\n\n                        These warnings include:\n\n                        - is_active: warning when attempting to delete an image that is marked as \n                        active.\n                        - current_tag: warning when attempting to delete an image that has one or \n                        more current tags in the repository.\n\n                        Warnings can be copied from the response to the request.\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          repository:\n                            description:\n                              Name of the repository of the image that caused\n                              the warning.\n                            type: string\n                            example: myrepo\n                          digest:\n                            description: Digest of the image that caused the warning.\n                            type: string\n                            example: sha256:1234567890abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqr\n                          warning:\n                            description: Warning type.\n                            type: string\n                            enum:\n                              - is_active\n                              - current_tag\n                            example: current_tag\n                          tags:\n                            description: Current tags if warning is `current_tag`.\n                            type: array\n                            items:\n                              type: string\n                              example: latest\n    protobufAny:\n      type: object\n      properties:\n        type_url:\n          type: string\n        value:\n          type: string\n          format: byte\n    rpcStatus:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n        details:\n          type: array\n          items:\n            $ref: \"#/components/schemas/protobufAny\"\n    AuditLogAction:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of audit log action.\n        description:\n          type: string\n          description: Description of audit log action.\n        label:\n          type: string\n          description: Label for audit log action.\n      description: Audit Log action\n    AuditLogActions:\n      type: object\n      properties:\n        actions:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AuditLogAction\"\n          description: List of audit log actions.\n        label:\n          type: string\n          description: Grouping label for a particular set of audit log actions.\n    GetAuditActionsResponse:\n      type: object\n      properties:\n        actions:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/AuditLogActions\"\n          description: Map of audit log actions.\n      description: GetAuditActions response.\n    GetAuditLogsResponse:\n      type: object\n      properties:\n        logs:\n          type: array\n          items:\n            $ref: \"#/components/schemas/AuditLog\"\n          description: List of audit log events.\n      description: GetAuditLogs response.\n    AuditLog:\n      type: object\n      properties:\n        account:\n          type: string\n        action:\n          type: string\n        name:\n          type: string\n        actor:\n          type: string\n        data:\n          type: object\n          additionalProperties:\n            type: string\n        timestamp:\n          type: string\n          format: date-time\n        action_description:\n          type: string\n      description: Audit log event.\n    ValueError:\n      type: object\n      description: Used to error if input validation fails.\n      properties:\n        fields:\n          type: object\n          items:\n            type: string\n        text:\n          type: string\n    Error:\n      type: object\n      properties:\n        detail:\n          type: string\n        message:\n          type: string\n    accessToken:\n      type: object\n      properties:\n        uuid:\n          type: string\n          example: b30bbf97-506c-4ecd-aabc-842f3cb484fb\n        client_id:\n          type: string\n          example: HUB\n        creator_ip:\n          type: string\n          example: 127.0.0.1\n        creator_ua:\n          type: string\n          example: some user agent\n        created_at:\n          type: string\n          example: 2021-07-20T12:00:00.000000Z\n        last_used:\n          type: string\n          example: null\n          nullable: true\n        generated_by:\n          type: string\n          example: manual\n        is_active:\n          type: boolean\n          example: true\n        token:\n          type: string\n          example: a7a5ef25-8889-43a0-8cc7-f2a94268e861\n        token_label:\n          type: string\n          example: My read only token\n        scopes:\n          type: array\n          example:\n            - repo:read\n          items:\n            type: string\n    createAccessTokenRequest:\n      type: object\n      required:\n        - token_label\n        - scopes\n      properties:\n        token_label:\n          type: string\n          description: Friendly name for you to identify the token.\n          example: My read only token\n        scopes:\n          type: array\n          description: |\n            Valid scopes: \"repo:admin\", \"repo:write\", \"repo:read\", \"repo:public_read\"\n          example:\n            - repo:read\n          items:\n            type: string\n    createAccessTokensResponse:\n      $ref: \"#/components/schemas/accessToken\"\n    getAccessTokensResponse:\n      type: object\n      properties:\n        count:\n          type: number\n          example: 1\n        next:\n          type: string\n          example: null\n        previous:\n          type: string\n          example: null\n        active_count:\n          type: number\n          example: 1\n        results:\n          type: array\n          items:\n            allOf:\n              - $ref: \"#/components/schemas/accessToken\"\n              - type: object\n                properties:\n                  token:\n                    type: string\n                    example: \"\"\n    patchAccessTokenRequest:\n      type: object\n      properties:\n        token_label:\n          type: string\n          example: My read only token\n        is_active:\n          type: boolean\n          example: false\n    patchAccessTokenResponse:\n      $ref: \"#/components/schemas/accessToken\"\n    orgSettings:\n      type: object\n      properties:\n        restricted_images:\n          $ref: \"#/components/schemas/restricted_images\"\n    restricted_images:\n      type: object\n      properties:\n        enabled:\n          type: boolean\n          description: Whether or not to restrict image usage for users in the organization.\n          example: true\n        allow_official_images:\n          type: boolean\n          description: Allow usage of official images if \"enabled\" is `true`.\n          example: true\n        allow_verified_publishers:\n          type: boolean\n          description: Allow usage of verified publisher images if \"enabled\" is `true`.\n          example: true\n    layer:\n      type: object\n      properties:\n        digest:\n          type: string\n          description: \"image layer digest\"\n          nullable: true\n        size:\n          type: integer\n          description: \"size of the layer\"\n        instruction:\n          type: string\n          description: \"Dockerfile instruction\"\n    image:\n      type: object\n      properties:\n        architecture:\n          type: string\n          description: \"CPU architecture\"\n        features:\n          type: string\n          description: \"CPU features\"\n        variant:\n          type: string\n          description: \"CPU variant\"\n        digest:\n          type: string\n          description: \"image digest\"\n          nullable: true\n        layers:\n          type: array\n          items:\n            $ref: '#/components/schemas/layer'\n        os:\n          type: string\n          description: \"operating system\"\n        os_features:\n          type: string\n          description: \"OS features\"\n        os_version:\n          type: string\n          description: \"OS version\"\n        size:\n          type: integer\n          description: \"size of the image\"\n        status:\n          type: string\n          enum: [\"active\", \"inactive\"]\n          description: \"Status of the image\"\n        last_pulled:\n          type: string\n          example: \"2021-01-05T21:06:53.506400Z\"\n          description: \"datetime of last pull\"\n          nullable: true\n        last_pushed:\n          type: string\n          example: \"2021-01-05T21:06:53.506400Z\"\n          description: \"datetime of last push\"\n          nullable: true\n    tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: \"tag ID\"\n        images:\n          type: object\n          $ref: '#/components/schemas/image'\n        creator:\n          type: integer\n          description: \"ID of the user that pushed the tag\"\n        last_updated:\n          type: string\n          example: \"2021-01-05T21:06:53.506400Z\"\n          description: \"datetime of last update\"\n          nullable: true\n        last_updater:\n          type: integer\n          description: \"ID of the last user that updated the tag\"\n        last_updater_username:\n          type: string\n          description: \"Hub username of the user that updated the tag\"\n        name:\n          type: string\n          description: \"name of the tag\"\n        repository:\n          type: integer\n          description: \"repository ID\"\n        full_size:\n          type: integer\n          description: \"compressed size (sum of all layers) of the tagged image\"\n        v2:\n          type: string\n          description: \"repository API version\"\n        status:\n          type: string\n          enum: [\"active\", \"inactive\"]\n          description: \"whether a tag has been pushed to or pulled in the past month\"\n        tag_last_pulled:\n          type: string\n          example: \"2021-01-05T21:06:53.506400Z\"\n          description: \"datetime of last pull\"\n          nullable: true\n        tag_last_pushed:\n          type: string\n          example: \"2021-01-05T21:06:53.506400Z\"\n          description: \"datetime of last push\"\n          nullable: true\n\n    paginated_tags:\n      allOf:\n        - $ref: '#/components/schemas/page'\n        - type: object\n          properties:\n            results:\n              type: array\n              items:\n                $ref: '#/components/schemas/tag'\n    page:\n      type: object\n      properties:\n        count:\n          type: integer\n          description: total number of results available across all pages\n        next:\n          type: string\n          description: link to next page of results if any\n          nullable: true\n        previous:\n          type: string\n          description: link to previous page of results  if any\n          nullable: true\n\n    scim_error:\n      type: object\n      properties:\n        status:\n          type: string\n          description: The status code for the response in string format.\n        schemas:\n          type: array\n          items:\n            type: string\n            default: urn:ietf:params:scim:api:messages:2.0:Error\n        detail:\n          type: string\n          description: Details about why the request failed.\n\n    scim_service_provider_config:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n          example: [ \"urn:ietf:params:scim:schemas:core:2.0:ServiceProviderConfig\" ]\n        documentationUri:\n          type: string\n          example: \"\"\n        patch:\n          properties:\n            supported:\n              type: boolean\n              example: false\n        bulk:\n          type: object\n          properties:\n            supported:\n              type: boolean\n              example: false\n            maxOperations:\n              type: integer\n            maxPayloadSize:\n              type: integer\n        filter:\n          type: object\n          properties:\n            supported:\n              type: boolean\n              example: true\n            maxResults:\n              type: integer\n              example: 99999\n        changePassword:\n          type: object\n          properties:\n            supported:\n              type: boolean\n              example: false\n        sort:\n          type: object\n          properties:\n            supported:\n              type: boolean\n              example: true\n        etag:\n          type: object\n          properties:\n            supported:\n              type: boolean\n              example: false\n        authenticationSchemes:\n          type: object\n          properties:\n            name:\n              type: string\n              example: OAuth 2.0 Bearer Token\n            description:\n              type: string\n              example: The OAuth 2.0 Bearer Token Authentication scheme. OAuth enables clients to access protected resources by obtaining an access token, which is defined in RFC 6750 as \"a string representing an access authorization issued to the client\", rather than using the resource owner's credentials directly.\n            specUri:\n              type: string\n              example: \"http://tools.ietf.org/html/rfc6750\"\n            type:\n              type: string\n              example: oauthbearertoken\n\n    scim_resource_type:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n          example: \"urn:ietf:params:scim:schemas:core:2.0:ResourceType\"\n        id:\n          type: string\n          example: User\n        name:\n          type: string\n          example: User\n        description:\n          type: string\n          example: User\n        endpoint:\n          type: string\n          example: \"/Users\"\n        schema:\n          type: string\n          example: \"urn:ietf:params:scim:schemas:core:2.0:User\"\n\n    scim_schema_attribute:\n      type: object\n      properties:\n        name:\n          type: string\n          example: userName\n        type:\n          enum:\n            - string\n            - boolean\n            - complex\n          type: string\n          example: string\n        multiValued:\n          type: boolean\n          example: false\n        description:\n          type: string\n          example: Unique identifier for the User, typically used by the user to directly authenticate to the service provider. Each User MUST include a non-empty userName value. This identifier MUST be unique across the service provider's entire set of Users.\n        required:\n          type: boolean\n          example: true\n        caseExact:\n          type: boolean\n          example: false\n        mutability:\n          type: string\n          example: readWrite\n        returned:\n          type: string\n          example: default\n        uniqueness:\n          type: string\n          example: server\n\n\n    scim_schema_parent_attribute:\n      allOf:\n        - $ref: \"#/components/schemas/scim_schema_attribute\"\n        - type: object\n          properties:\n            subAttributes:\n              type: array\n              items:\n                $ref: \"#/components/schemas/scim_schema_attribute\"\n\n    scim_schema:\n      type: object\n      properties:\n        schemas:\n          type: array\n          items:\n            type: string\n          example: [ \"urn:ietf:params:scim:schemas:core:2.0:Schema\" ]\n        id:\n          type: string\n          example: urn:ietf:params:scim:schemas:core:2.0:User\n        name:\n          type: string\n          example: User\n        description:\n          type: string\n          example: User Account\n        attributes:\n          type: array\n          example: [ ]\n          items:\n            $ref: \"#/components/schemas/scim_schema_parent_attribute\"\n\n    scim_email:\n      type: object\n      properties:\n        value:\n          type: string\n          example: jon.snow@docker.com\n        display:\n          type: string\n          example: jon.snow@docker.com\n        primary:\n          type: boolean\n          example: true\n\n    scim_group:\n      type: object\n      properties:\n        value:\n          type: string\n          example: \"nightswatch\"\n        display:\n          type: string\n          example: \"nightswatch\"\n\n    scim_user_username:\n      type: string\n      description: The user's email address. This must be reachable via email.\n      example: jon.snow@docker.com\n\n    scim_user_name:\n      type: object\n      properties:\n        givenName:\n          type: string\n          example: Jon\n        familyName:\n          type: string\n          example: Snow\n\n    scim_user_display_name:\n      type: string\n      description: The username in Docker. Also known as the \"Docker ID\".\n      example: jonsnow\n\n    scim_user_schemas:\n      type: array\n      items:\n        type: string\n        example: \"urn:ietf:params:scim:schemas:core:2.0:User\"\n        minItems: 1\n\n    scim_user_id:\n      type: string\n      example: d80f7c79-7730-49d8-9a41-7c42fb622d9c\n      description: The unique identifier for the user. A v4 UUID.\n\n    scim_user:\n      type: object\n      properties:\n        schemas:\n          $ref: \"#/components/schemas/scim_user_schemas\"\n        id:\n          $ref: \"#/components/schemas/scim_user_id\"\n        userName:\n          $ref: \"#/components/schemas/scim_user_username\"\n        name:\n          $ref: \"#/components/schemas/scim_user_name\"\n        displayName:\n          $ref: \"#/components/schemas/scim_user_display_name\"\n        active:\n          type: boolean\n          example: true\n        emails:\n          type: array\n          items:\n            $ref: \"#/components/schemas/scim_email\"\n        groups:\n          type: array\n          items:\n            $ref: \"#/components/schemas/scim_group\"\n        meta:\n          type: object\n          properties:\n            resourceType:\n              type: string\n              example: User\n            location:\n              type: string\n              example: https://hub.docker.com/v2/scim/2.0/Users/d80f7c79-7730-49d8-9a41-7c42fb622d9c\n            created:\n              type: string\n              description: The creation date for the user as a RFC3339 formatted\n                string.\n              example: 2022-05-20T00:54:18Z\n            lastModified:\n              type: string\n              description: The date the user was last modified as a RFC3339\n                formatted string.\n              example: 2022-05-20T00:54:18Z\n\n  parameters:\n    scim_attributes:\n      in: query\n      name: attributes\n      schema:\n        type: string\n      description: Comma delimited list of attributes to limit to in the\n        response.\n      example: userName,displayName\n    scim_user_id:\n      name: id\n      in: path\n      schema:\n        type: string\n      description: The user ID.\n      example: \"d80f7c79-7730-49d8-9a41-7c42fb622d9c\"\n    namespace:\n      in: path\n      name: namespace\n      required: true\n      schema:\n        type: string\n    repository:\n      in: path\n      name: repository\n      required: true\n      schema:\n        type: string\n    tag:\n      in: path\n      name: tag\n      required: true\n      schema:\n        type: string\n    page:\n      in: query\n      name: page\n      required: false\n      schema:\n        type: integer\n      description: \"Page number to get. Defaults to 1.\"\n    page_size:\n      in: query\n      name: page_size\n      required: false\n      schema:\n        type: integer\n      description: \"Number of items to get per page. Defaults to 10. Max of 100.\"\n\n  requestBodies:\n    scim_create_user_request:\n      required: true\n      content:\n        application/scim+json:\n          schema:\n            type: object\n            required:\n              - schemas\n              - userName\n            properties:\n              schemas:\n                $ref: \"#/components/schemas/scim_user_schemas\"\n              userName:\n                $ref: \"#/components/schemas/scim_user_username\"\n              name:\n                $ref: \"#/components/schemas/scim_user_name\"\n\n    scim_update_user_request:\n      required: true\n      content:\n        application/scim+json:\n          schema:\n            type: object\n            required:\n              - schemas\n            properties:\n              schemas:\n                $ref: \"#/components/schemas/scim_user_schemas\"\n              name:\n                allOf:\n                  - $ref: \"#/components/schemas/scim_user_name\"\n                  - description: If this is omitted from the request, the\n                      update will skip the update on it. We will only ever\n                      change the name, but not clear it.\n              enabled:\n                type: boolean\n                default: false\n                description: If this is omitted from the request, it will\n                  default to false resulting in a deactivated user.\n",
			"canonicalURL": "/github.com/docker/docker.github.io@e0bbe1a32f4c44991cccf5b262911196a6dba0c3/-/blob/docker-hub/api/latest.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/docker/docker.github.io/blob/e0bbe1a32f4c44991cccf5b262911196a6dba0c3/docker-hub/api/latest.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"ValueError\": parse schema: property \"fields\": parse schema: at 1:19226: object cannot contain 'items' field"
}