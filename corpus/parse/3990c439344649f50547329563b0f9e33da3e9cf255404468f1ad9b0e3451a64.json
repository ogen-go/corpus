{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hedgedoc/hedgedoc"
		},
		"file": {
			"name": "public_api.yml",
			"size": 0,
			"path": "docs/content/dev/public_api.yml",
			"byteSize": 28597,
			"content": "openapi: 3.0.3\ninfo:\n  title: HedgeDoc\n  description: HedgeDoc is an open source collaborative note editor. Several tasks of HedgeDoc can be automated through this API.\n  version: 2.0.0\n  contact:\n    name: HedgeDoc on GitHub\n    url: https://github.com/hedgedoc/hedgedoc\n  license:\n    name: AGPLv3\n    url: https://github.com/hedgedoc/hedgedoc/blob/develop/LICENSE\nexternalDocs:\n  description: The HedgeDoc Documentation.\n  url: https://docs.hedgedoc.org\nservers:\n  - url: \"/api/v2\"\n    description: The base API Path.\nsecurity:\n  - bearerAuth: []\npaths:\n  /me:\n    get:\n      tags:\n        - user\n      summary: Get the user information of the currently logged-in user\n      operationId: getMe\n      responses:\n        '200':\n          description: The user information.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/UserInfo\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n  /me/history:\n    get:\n      tags:\n        - history\n        - user\n      summary: Returns a list of the last viewed notes\n      operationId: getHistory\n      description: The list is returned as a JSON object with an array containing for each entry it's id, title, tags, last visit time and pinned status.\n      responses:\n        '200':\n          description: The list of recently viewed notes and pinned notes.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/History\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n  /me/history/{note}:\n    get:\n      tags:\n        - history\n        - user\n      summary: Returns History data for a note\n      operationId: getHistoryObject\n      description: JSON Object which contains id, title, tags, last visit time and pinned status\n      responses:\n        '200':\n          description: Information about the history entry\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/History\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The name of the note which is used to address it.\n          content:\n            text/plain:\n              example: my-note\n    put:\n      tags:\n        - history\n        - user\n      summary: Update the history object of the note (e.g change it's pin status)\n      operationId: updateHistoryObject\n      requestBody:\n        description: The updated history object.\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/HistoryUpdate\"\n      responses:\n        '200':\n          description: The new history.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/HistoryObject\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the revision should be shown.\n          content:\n            text/plain:\n              example: my-note\n    delete:\n      tags:\n        - history\n        - user\n      summary: Remove the note from the currently logged-in user's history\n      operationId: deleteHistoryObject\n      responses:\n        '204':\n          \"$ref\": \"#/components/responses/SuccessfullyDeleted\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the revision should be shown.\n          content:\n            text/plain:\n              example: my-note\n  /me/notes:\n    get:\n      tags:\n        - user\n      summary: Returns a list of the notes metadata the user owns\n      operationId: getOwnNotes\n      description: The list is returned as a JSON object with an array containing each notes metadata.\n      responses:\n        '200':\n          description: The list of notes owned by the currently logged in user.\n          content:\n            application/json:\n              schema:\n                type: array\n                description: The array that contains notes metadata.\n                items:\n                  \"$ref\": \"#/components/schemas/NoteMetadata\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n  /me/media:\n    get:\n      tags: [ user, media ]\n      summary: Get list of uploaded files owned by the current user\n      operationId: getOwnMedia\n      responses:\n        '200':\n          description:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/MediaUpload\"\n  /notes:\n    post:\n      tags:\n        - note\n      summary: Imports some markdown data into a new note\n      operationId: createNoteFromMarkdown\n      description: A random id will be assigned and the content will equal to the body of the received HTTP-request.\n      security:\n        - bearerAuth: [ ]\n        - { }\n      requestBody:\n        required: false\n        description: The content of the note to be imported as markdown.\n        content:\n          'text/markdown':\n            schema:\n              type: string\n            examples:\n              markdownExample:\n                \"$ref\": '#/components/examples/markdownExample'\n      responses:\n        '201':\n          description: Get information about the newly created note.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Note\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n  /notes/{note}:\n    get:\n      tags:\n        - note\n      summary: Returns the note\n      operationId: getNote\n      description: This includes all metadata and the content of the note.\n      responses:\n        '200':\n          description: All data of the note.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Note\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The name of the note which is used to address it.\n          content:\n            text/plain:\n              example: my-note\n    post:\n      tags:\n        - note\n      summary: Imports some markdown data into a new note with a given alias\n      operationId: createNoteWithAlias\n      description: This endpoint creates a new note with the content of the HTTP request body and the alias from the URL parameter.\n      requestBody:\n        required: true\n        description: The content of the note to be imported as markdown.\n        content:\n          'text/markdown':\n            schema:\n              type: string\n            examples:\n              markdownExample:\n                \"$ref\": '#/components/examples/markdownExample'\n      responses:\n        '201':\n          description: Get information about the newly created note.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Note\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '409':\n          description: This alias is already in use.\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The name of the note which is used to address it.\n          content:\n            text/plain:\n              example: my-note\n    delete:\n      tags:\n        - note\n      summary: Remove the note\n      operationId: deleteNote\n      responses:\n        '204':\n          \"$ref\": \"#/components/responses/SuccessfullyDeleted\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the revision should be shown.\n          content:\n            text/plain:\n              example: my-note\n    put:\n      tags:\n        - note\n      summary: Imports some markdown data into an existing note, creating a new revision\n      operationId: createNewRevisionForNote\n      description: This endpoint updates the note content of an existing note. The old content is completely replaced and a new revision is created.\n      requestBody:\n        required: true\n        description: The content of the note to be imported as markdown.\n        content:\n          'text/markdown':\n            schema:\n              type: string\n            examples:\n              markdownExample:\n                \"$ref\": '#/components/examples/markdownExample'\n      responses:\n        '200':\n          description: The new, changed note\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/Note\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the info should be shown.\n          content:\n            text/plain:\n              example: my-note\n  /notes/{note}/metadata:\n    get:\n      tags:\n        - note\n      summary: Get the metadata of a note\n      operationId: getNoteMetadata\n      responses:\n        '200':\n          description: The metadata of the note.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NoteMetadata\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the info should be shown.\n          content:\n            text/plain:\n              example: my-note\n  /notes/{note}/metadata/permissions:\n    put:\n      tags: [ note ]\n      summary: Set permissions of a note\n      operationId: updateNotePermissions\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              \"$ref\": \"#/components/schemas/NotePermissionsUpdate\"\n      responses:\n        '200':\n          description: The updated permissions of the note.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NotePermissions\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the info should be shown.\n          content:\n            text/plain:\n              example: my-note\n  /notes/{note}/revisions:\n    get:\n      tags:\n        - note\n      summary: Returns a list of the available note revisions\n      operationId: getAllRevisionsOfNote\n      description: The list contains the revision-id, the length and a ISO-timestamp of the creation date.\n      responses:\n        '200':\n          description: Revisions of the note.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/NoteRevisionsMetadata\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which revisions should be shown.\n          content:\n            text/plain:\n              example: my-note\n  /notes/{note}/revisions/{revision-id}:\n    get:\n      tags:\n        - note\n      summary: Returns the revision of the note with some metadata\n      operationId: getSpecificRevisionOfNote\n      description: The revision is returned as a JSON object with the content of the note and the authorship.\n      responses:\n        '200':\n          description: Revision of the note for the given id.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/NoteRevision\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the revision should be shown.\n          content:\n            text/plain:\n              example: my-note\n        - name: revision-id\n          in: path\n          required: true\n          description: The id of the revision to fetch.\n          content:\n            text/plain:\n              example: 1570921051959\n  /notes/{note}/content:\n    get:\n      tags:\n        - note\n        - export\n      summary: Returns the raw markdown content of a note\n      operationId: getNoteContent\n      responses:\n        '200':\n          description: The raw markdown content of the note.\n          content:\n            'text/markdown':\n              schema:\n                type: string\n                format: binary\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n      parameters:\n        - name: note\n          in: path\n          required: true\n          description: The note for which the markdown should be exported.\n          content:\n            text/plain:\n              example: my-note\n  /notes/{note}/media:\n    get:\n      tags: [ note, media ]\n      summary: Get list of files uploaded to the note\n      operationId: getOwnMedia\n      responses:\n        '200':\n          description:\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  \"$ref\": \"#/components/schemas/MediaUpload\"\n  /media:\n    post:\n      tags:\n        - media\n      summary: Uploads a media file to the backend storage\n      description: Uploads a file to be processed by the backend.\n      requestBody:\n        required: true\n        description: The binary file to upload.\n        content:\n          image/apng:\n            schema:\n              type: string\n              format: binary\n          image/bmp:\n            schema:\n              type: string\n              format: binary\n          image/gif:\n            schema:\n              type: string\n              format: binary\n          image/heif:\n            schema:\n              type: string\n              format: binary\n          image/heic:\n            schema:\n              type: string\n              format: binary\n          image/heif-sequence:\n            schema:\n              type: string\n              format: binary\n          image/heic-sequence:\n            schema:\n              type: string\n              format: binary\n          image/jpeg:\n            schema:\n              type: string\n              format: binary\n          image/png:\n            schema:\n              type: string\n              format: binary\n          image/svg+xml:\n            schema:\n              type: string\n              format: binary\n          image/tiff:\n            schema:\n              type: string\n              format: binary\n          image/webp:\n            schema:\n              type: string\n              format: binary\n      parameters:\n        - in: header\n          name: HedgeDoc-Note\n          schema:\n            type: string\n          required: true\n          description: ID or alias of the parent note\n      responses:\n        '201':\n          description: The file was uploaded successfully.\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  link:\n                    type: string\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n  /media/{filename}:\n    delete:\n      tags:\n        - media\n      summary: Delete the specified file\n      operationId: deleteMedia\n      parameters:\n        - name: filename\n          in: path\n          required: true\n          description: The name of the file to be deleted.\n          content:\n            text/plain:\n              example: e18d1b83e1821128615bad849ad0655a.jpg\n      responses:\n        '204':\n          \"$ref\": \"#/components/responses/SuccessfullyDeleted\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n        '404':\n          \"$ref\": \"#/components/responses/NotFoundError\"\n  /monitoring:\n    get:\n      tags:\n        - monitoring\n      summary: Returns the current status of the backend\n      operationId: getMonitoring\n      description: The data is returned as a JSON object containing the number of notes stored on the server, (distinct) online users and more.\n      responses:\n        '200':\n          description: The server info.\n          content:\n            application/json:\n              schema:\n                \"$ref\": \"#/components/schemas/ServerStatus\"\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\n  /monitoring/prometheus:\n    get:\n      tags:\n        - monitoring\n      summary: Returns the current status of the backend for Prometheus.\n      operationId: getPrometheus\n      description: The data is returned in Prometheus Exposition Format\n      responses:\n        '200':\n          description: Prometheus compatible monitoring data.\n          content:\n            text/plain: {}\n        '401':\n          \"$ref\": \"#/components/responses/UnauthorizedError\"\n        '403':\n          \"$ref\": \"#/components/responses/ForbiddenError\"\ncomponents:\n  schemas:\n    UserInfo:\n      type: object\n      properties:\n        userName:\n          type: string\n        displayName:\n          type: string\n        photo:\n          type: string\n          format: uri\n        email:\n          type: string\n          format: email\n    UserPasswordChange:\n      type: object\n      properties:\n        password:\n          type: string\n    GroupInfo:\n      type: object\n      properties:\n        name:\n          type: string\n        displayName:\n          type: string\n        special:\n          type: boolean\n    ImageProxyRequest:\n      type: object\n      properties:\n        src:\n          type: string\n          description: The url of the image that should be processed by the image proxy.\n    ImageProxyResponse:\n      type: object\n      properties:\n        src:\n          type: string\n          description: The url of the provied version of the image.\n    Note:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The markdown content of the note\n        metadata:\n          $ref: \"#/components/schemas/NoteMetadata\"\n        editedByAtPosition:\n          type: array\n          description: Data which gives insights about who worked where on the note.\n          items:\n            type: integer\n            description: Unique user ids and additional data\n    NoteMetadata:\n      type: object\n      properties:\n        id:\n          type: string\n          format: UUIDv4\n          description: The id of the note.\n        alias:\n          type: string\n          description: The alias of the note.\n        title:\n          type: string\n          description: Title of the note\n        description:\n          type: string\n          description: Description of the note.\n        tags:\n          type: array\n          description: A list of tags attached to the note.\n          items:\n            type: string\n            description: A tag\n        updateTime:\n          type: string\n          description: ISO-timestamp of when the note was last changed.\n        updateUser:\n          $ref: \"#/components/schemas/UserInfo\"\n        viewCount:\n          type: integer\n          minimum: 0\n          description: How often the published version of the note was viewed.\n        createTime:\n          type: string\n          description: The ISO-timestamp when the note was created in ISO 8601 format.\n        editedBy:\n          type: array\n          description: List of usernames who edited the note.\n          items:\n            type: string\n        permissions:\n          $ref: \"#/components/schemas/NotePermissions\"\n    NotePermissions:\n      type: object\n      properties:\n        owner:\n          $ref: \"#/components/schemas/UserInfo\"\n        sharedToUsers:\n          type: array\n          description: Contains all users that can read the note and a boolean that denotes if they can also edit.\n          items:\n            type: object\n            properties:\n              user:\n                $ref: \"#/components/schemas/UserInfo\"\n              canEdit:\n                type: boolean\n        sharedToGroups:\n          type: array\n          description: Contains all groups that can read the note and a boolean that denotes if they can also edit.\n          items:\n            type: object\n            properties:\n              group:\n                $ref: \"#/components/schemas/GroupInfo\"\n              canEdit:\n                type: boolean\n    NotePermissionsUpdate:\n      type: object\n      description: Contains only title, description and tags of a note.\n      properties:\n        sharedToUsers:\n          type: array\n          description: Contains all usernames that can read the note and a boolean that denotes if they can also edit.\n          items:\n            type: object\n            properties:\n              username:\n                type: string\n              canEdit:\n                type: boolean\n        sharedToGroups:\n          type: array\n          description: Contains all groups that can read the note and a boolean that denotes if they can also edit.\n          items:\n            type: object\n            properties:\n              groupname:\n                type: string\n              canEdit:\n                type: boolean\n    NoteRevisionsMetadata:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The id of the revision\n        createdTime:\n          type: string\n          description: ISO-timestamp of when the revision was saved. Is also the revision-id.\n        length:\n          type: integer\n          description: Length of the document to the timepoint the revision was saved.\n    NoteRevision:\n      type: object\n      properties:\n        content:\n          type: string\n          description: The raw markdown content of the note revision.\n        authorship:\n          type: array\n          description: Data which gives insights about who worked on the note.\n          items:\n            type: integer\n            description: Unique user ids and additional data.\n        patch:\n          type: array\n          description: Data which gives insight about what changed in comparison to former revisions.\n          items:\n            type: string\n    GistLink:\n      type: object\n      properties:\n        link:\n          type: string\n          format: uri\n          description: A Gist link.\n    DropboxLink:\n      type: object\n      properties:\n        link:\n          type: string\n          format: uri\n          description: A Dropbox link.\n    EmailLogin:\n      type: object\n      properties:\n        email:\n          type: string\n          format: email\n        password:\n          type: string\n          format: password\n    LdapLogin:\n      type: object\n      properties:\n        username:\n          type: string\n          format: email\n        password:\n          type: string\n          format: password\n    OpenIdLogin:\n      type: object\n      properties:\n        openId:\n          type: string\n    ServerStatus:\n      type: object\n      properties:\n        serverVersion:\n          type: object\n          properties:\n            major:\n              type: integer\n            minor:\n              type: integer\n            patch:\n              type: integer\n            preRelease:\n              type: string\n            commit:\n              type: string\n          description: Version of the server specified according to SemVer specification\n        onlineNotes:\n          type: integer\n          description: How many notes are edited at the moment.\n        onlineUsers:\n          type: integer\n          description: How many users are online at the moment.\n        distinctOnlineUsers:\n          type: integer\n          description: How many distinct users (different machines) are online at the moment.\n        notesCount:\n          type: integer\n          description: How many notes are stored on the server.\n        registeredUsers:\n          type: integer\n          description: How many users are registered on the server.\n        onlineRegisteredUsers:\n          type: integer\n          description: How many of the online users are registered on the server.\n        distinctOnlineRegisteredUsers:\n          type: integer\n          description: How many of the distinct online users are registered on the server.\n        isConnectionBusy:\n          type: boolean\n        connectionSocketQueueLength:\n          type: integer\n        isDisconnectBusy:\n          type: boolean\n        disconnectSocketQueueLength:\n          type: integer\n    History:\n      type: object\n      properties:\n        metadata:\n          $ref: \"#/components/schemas/NoteMetadata\"\n        pinned:\n          type: boolean\n          description: Whether the user has pinned this note.\n    HistoryUpdate:\n      type: object\n      properties:\n        pinned:\n          type: boolean\n          description: Whether the user has pinned this note.\n    History:\n      type: object\n      properties:\n        history:\n          type: array\n          description: The array that contains history objects.\n          items:\n            \"$ref\": \"#/components/schemas/HistoryObject\"\n    MediaUpload:\n      type: object\n      properties:\n        url:\n          type: string\n          description: URL of the file\n        owningNote:\n          type: string\n          description: ID of the note the file was uploaded to\n        createdAt:\n          type: string\n          format: date-time\n          description: Date when the file was upladed\n        owningUser:\n          type: string\n          description: username of the user who uploaded the file\n\n\n  examples:\n    markdownExample:\n      value: '# Some header\\nSome normal text. **Some bold text**'\n      summary: A sample markdown content\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  responses:\n    UnauthorizedError:\n      description: Authorization information is missing or invalid.\n    ForbiddenError:\n      description: Access to the requested resource is not permitted.\n    NotFoundError:\n      description: The requested resource was not found.\n    SuccessfullyDeleted:\n      description: The requested resource was sucessfully deleted.\n"
		}
	},
	"Error": "parse: parse spec: paths: /me/history: get: operation \"getHistory\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: reference \"#/components/schemas/History\": parse schema: history: parse schema: item: parse schema: reference \"#/components/schemas/HistoryObject\": resolve reference \"#/components/schemas/HistoryObject\": schema not found"
}