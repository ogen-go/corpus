{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Chocobozzz/PeerTube"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "support/doc/api/openapi.yaml",
			"byteSize": 222617,
			"content": "openapi: 3.0.0\ninfo:\n  title: PeerTube\n  version: 4.0.0\n  contact:\n    name: PeerTube Community\n    url: https://joinpeertube.org\n  license:\n    name: AGPLv3.0\n    url: https://github.com/Chocobozzz/PeerTube/blob/master/LICENSE\n  x-logo:\n    url: https://joinpeertube.org/img/brand.png\n    altText: PeerTube Project Homepage\n  description: |\n    The PeerTube API is built on HTTP(S) and is RESTful. You can use your favorite\n    HTTP/REST library for your programming language to use PeerTube. The spec API is fully compatible with\n    [openapi-generator](https://github.com/OpenAPITools/openapi-generator/wiki/API-client-generator-HOWTO)\n    which generates a client SDK in the language of your choice - we generate some client SDKs automatically:\n\n    - [Python](https://framagit.org/framasoft/peertube/clients/python)\n    - [Go](https://framagit.org/framasoft/peertube/clients/go)\n    - [Kotlin](https://framagit.org/framasoft/peertube/clients/kotlin)\n\n    See the [REST API quick start](https://docs.joinpeertube.org/api-rest-getting-started) for a few\n    examples of using the PeerTube API.\n\n    # Authentication\n\n    When you sign up for an account on a PeerTube instance, you are given the possibility\n    to generate sessions on it, and authenticate there using an access token. Only __one\n    access token can currently be used at a time__.\n\n    ## Roles\n\n    Accounts are given permissions based on their role. There are three roles on\n    PeerTube: Administrator, Moderator, and User. See the [roles guide](https://docs.joinpeertube.org/admin-managing-users?id=roles) for a detail of their permissions.\n\n    # Errors\n\n    The API uses standard HTTP status codes to indicate the success or failure\n    of the API call, completed by a [RFC7807-compliant](https://tools.ietf.org/html/rfc7807) response body.\n\n    ```\n    HTTP 1.1 404 Not Found\n    Content-Type: application/problem+json; charset=utf-8\n\n    {\n      \"detail\": \"Video not found\",\n      \"docs\": \"https://docs.joinpeertube.org/api-rest-reference.html#operation/getVideo\",\n      \"status\": 404,\n      \"title\": \"Not Found\",\n      \"type\": \"about:blank\"\n    }\n    ```\n\n    We provide error `type` values for [a growing number of cases](https://github.com/Chocobozzz/PeerTube/blob/develop/shared/models/server/server-error-code.enum.ts),\n    but it is still optional. Types are used to disambiguate errors that bear the same status code\n    and are non-obvious:\n\n    ```\n    HTTP 1.1 403 Forbidden\n    Content-Type: application/problem+json; charset=utf-8\n\n    {\n      \"detail\": \"Cannot get this video regarding follow constraints\",\n      \"docs\": \"https://docs.joinpeertube.org/api-rest-reference.html#operation/getVideo\",\n      \"status\": 403,\n      \"title\": \"Forbidden\",\n      \"type\": \"https://docs.joinpeertube.org/api-rest-reference.html#section/Errors/does_not_respect_follow_constraints\"\n    }\n    ```\n\n    Here a 403 error could otherwise mean that the video is private or blocklisted.\n\n    ### Validation errors\n\n    Each parameter is evaluated on its own against a set of rules before the route validator\n    proceeds with potential testing involving parameter combinations. Errors coming from validation\n    errors appear earlier and benefit from a more detailed error description:\n\n    ```\n    HTTP 1.1 400 Bad Request\n    Content-Type: application/problem+json; charset=utf-8\n\n    {\n      \"detail\": \"Incorrect request parameters: id\",\n      \"docs\": \"https://docs.joinpeertube.org/api-rest-reference.html#operation/getVideo\",\n      \"instance\": \"/api/v1/videos/9c9de5e8-0a1e-484a-b099-e80766180\",\n      \"invalid-params\": {\n        \"id\": {\n          \"location\": \"params\",\n          \"msg\": \"Invalid value\",\n          \"param\": \"id\",\n          \"value\": \"9c9de5e8-0a1e-484a-b099-e80766180\"\n        }\n      },\n      \"status\": 400,\n      \"title\": \"Bad Request\",\n      \"type\": \"about:blank\"\n    }\n    ```\n\n    Where `id` is the name of the field concerned by the error, within the route definition.\n    `invalid-params.\u003cfield\u003e.location` can be either 'params', 'body', 'header', 'query' or 'cookies', and\n    `invalid-params.\u003cfield\u003e.value` reports the value that didn't pass validation whose `invalid-params.\u003cfield\u003e.msg`\n    is about.\n\n    ### Deprecated error fields\n\n    Some fields could be included with previous versions. They are still included but their use is deprecated:\n    - `error`: superseded by `detail`\n    - `code`: superseded by `type` (which is now an URI)\n\n    # Rate limits\n\n    We are rate-limiting all endpoints of PeerTube's API. Custom values can be set by administrators:\n\n    | Endpoint (prefix: `/api/v1`) | Calls         | Time frame   |\n    |------------------------------|---------------|--------------|\n    | `/*`                         | 50            | 10 seconds   |\n    | `POST /users/token`          | 15            | 5 minutes    |\n    | `POST /users/register`       | 2\u003csup\u003e*\u003c/sup\u003e | 5 minutes    |\n    | `POST /users/ask-send-verify-email` | 3      | 5 minutes    |\n\n    Depending on the endpoint, \u003csup\u003e*\u003c/sup\u003efailed requests are not taken into account. A service\n    limit is announced by a `429 Too Many Requests` status code.\n\n    You can get details about the current state of your rate limit by reading the\n    following headers:\n\n    | Header                  | Description                                                |\n    |-------------------------|------------------------------------------------------------|\n    | `X-RateLimit-Limit`     | Number of max requests allowed in the current time period  |\n    | `X-RateLimit-Remaining` | Number of remaining requests in the current time period    |\n    | `X-RateLimit-Reset`     | Timestamp of end of current time period as UNIX timestamp  |\n    | `Retry-After`           | Seconds to delay after the first `429` is received         |\n\n    # CORS\n\n    This API features [Cross-Origin Resource Sharing (CORS)](https://fetch.spec.whatwg.org/),\n    allowing cross-domain communication from the browser for some routes:\n\n    | Endpoint                    |\n    |------------------------- ---|\n    | `/api/*`                    |\n    | `/download/*`               |\n    | `/lazy-static/*`            |\n    | `/live/segments-sha256/*`   |\n    | `/.well-known/webfinger`    |\n\n    In addition, all routes serving ActivityPub are CORS-enabled for all origins.\nexternalDocs:\n  url: https://docs.joinpeertube.org/api-rest-reference.html\ntags:\n  - name: Register\n    description: |\n      As a visitor, you can use this API to open an account (if registrations are open on\n      that PeerTube instance). As an admin, you should use the dedicated [User creation\n      API](#operation/addUser) instead.\n  - name: Session\n    x-displayName: Login/Logout\n    description: |\n      Sessions deal with access tokens over time. Only __one session token can currently be used at a time__.\n  - name: Accounts\n    description: \u003e\n      Accounts encompass remote accounts discovered across the federation,\n      and correspond to the main Actor, along with video channels a user can create, which\n      are also Actors.\n\n      When a comment is posted, it is done with your Account's Actor.\n  - name: Users\n    description: \u003e\n      Using some features of PeerTube require authentication, for which User\n      provide different levels of permission as well as associated user\n      information. Each user has a corresponding local Account for federation.\n  - name: My User\n    description: \u003e\n      Operations related to your own User, when logged-in.\n  - name: My Subscriptions\n    description: \u003e\n      Operations related to your subscriptions to video channels, their\n      new videos, and how to keep up to date with their latest publications!\n  - name: My History\n    description: \u003e\n      Operations related to your watch history.\n  - name: My Notifications\n    description: \u003e\n      Notifications following new videos, follows or reports. They allow you\n      to keep track of the interactions and overall important information that\n      concerns you. You MAY set per-notification type delivery preference, to\n      receive the info either by mail, by in-browser notification or both.\n  - name: Config\n    description: \u003e\n      Each server exposes public information regarding supported videos and\n      options.\n  - name: Job\n    description: \u003e\n      Jobs are long-running tasks enqueued and processed by the instance\n      itself. No additional worker registration is currently available.\n  - name: Instance Follows\n    description: \u003e\n      Managing servers which the instance interacts with is crucial to the\n      concept of federation in PeerTube and external video indexation. The PeerTube\n      server then deals with inter-server ActivityPub operations and propagates\n      information across its social graph by posting activities to actors' inbox\n      endpoints.\n    externalDocs:\n      url: https://docs.joinpeertube.org/admin-following-instances?id=instances-follows\n  - name: Instance Redundancy\n    description: \u003e\n      Redundancy is part of the inter-server solidarity that PeerTube fosters.\n      Manage the list of instances you wish to help by seeding their videos according\n      to the policy of video selection of your choice. Note that you have a similar functionality\n      to mirror individual videos, see [video mirroring](#tag/Video-Mirroring).\n    externalDocs:\n      url: https://docs.joinpeertube.org/admin-following-instances?id=instances-redundancy\n  - name: Plugins\n    description: \u003e\n      Managing plugins installed from a local path or from NPM, or search for new ones.\n    externalDocs:\n      url: https://docs.joinpeertube.org/api-plugins\n  - name: Abuses\n    description: |\n      Abuses deal with reports of local or remote videos/comments/accounts alike.\n  - name: Video\n    description: |\n      Operations dealing with listing, uploading, fetching or modifying videos.\n  - name: Video Upload\n    description: |\n      Operations dealing with adding video or audio. PeerTube supports two upload modes, and three import modes.\n\n      ### Upload\n\n      - [_legacy_](#operation/uploadLegacy), where the video file is sent in a single request\n      - [_resumable_](#operation/uploadResumableInit), where the video file is sent in chunks\n\n      You can upload videos more reliably by using the resumable variant. Its protocol lets\n      you resume an upload operation after a network interruption or other transmission failure,\n      saving time and bandwidth in the event of network failures.\n\n      Favor using resumable uploads in any of the following cases:\n      - You are transferring large files\n      - The likelihood of a network interruption is high\n      - Uploads are originating from a device with a low-bandwidth or unstable Internet connection,\n        such as a mobile device\n\n      ### Import\n\n      - _URL_-based: where the URL points to any service supported by [youtube-dl](https://ytdl-org.github.io/youtube-dl/)\n      - _magnet_-based: where the URI resolves to a BitTorrent ressource containing a single supported video file\n      - _torrent_-based: where the metainfo file resolves to a BitTorrent ressource containing a single supported video file\n\n      The import function is practical when the desired video/audio is available online. It makes PeerTube\n      download it for you, saving you as much bandwidth and avoiding any instability or limitation your network might have.\n  - name: Video Imports\n    description: Operations dealing with listing, adding and removing video imports.\n  - name: Video Captions\n    description: Operations dealing with listing, adding and removing closed captions of a video.\n  - name: Video Channels\n    description: Operations dealing with the creation, modification and listing of videos within a channel.\n  - name: Video Comments\n    description: \u003e\n      Operations dealing with comments to a video. Comments are organized in threads: adding a\n      comment in response to the video starts a thread, adding a reply to a comment adds it to\n      its root comment thread.\n  - name: Video Blocks\n    description: Operations dealing with blocking videos (removing them from view and preventing interactions).\n  - name: Video Rates\n    description: Like/dislike a video.\n  - name: Video Playlists\n    description: Operations dealing with playlists of videos. Playlists are bound to users and/or channels.\n  - name: Video Files\n    description: Operations on video files\n  - name: Video Transcoding\n    description: Video transcoding related operations\n  - name: Feeds\n    description: Server syndication feeds\n  - name: Search\n    description: |\n      The search helps to find _videos_ or _channels_ from within the instance and beyond.\n      Videos from other instances federated by the instance (that is, instances\n      followed by the instance) can be found via keywords and other criteria of\n      the advanced search.\n\n      Administrators can also enable the use of a remote search system, indexing\n      videos and channels not could be not federated by the instance.\n  - name: Homepage\n    description: Get and update the custom homepage\n  - name: Video Mirroring\n    description: |\n      PeerTube instances can mirror videos from one another, and help distribute some videos.\n\n      For importing videos as your own, refer to [video imports](#operation/importVideo).\nx-tagGroups:\n  - name: Auth\n    tags:\n      - Register\n      - Session\n  - name: Accounts\n    tags:\n      - Accounts\n      - Users\n      - My User\n      - My Subscriptions\n      - My Notifications\n      - My History\n  - name: Videos\n    tags:\n      - Video\n      - Video Upload\n      - Video Imports\n      - Video Captions\n      - Video Channels\n      - Video Comments\n      - Video Rates\n      - Video Playlists\n      - Video Ownership Change\n      - Video Mirroring\n      - Video Files\n      - Video Transcoding\n      - Live Videos\n      - Feeds\n  - name: Search\n    tags:\n      - Search\n  - name: Custom pages\n    tags:\n      - Homepage\n  - name: Moderation\n    tags:\n      - Abuses\n      - Video Blocks\n      - Account Blocks\n      - Server Blocks\n  - name: Instance Configuration\n    tags:\n      - Config\n      - Instance Follows\n      - Instance Redundancy\n      - Plugins\n  - name: Jobs\n    tags:\n      - Job\npaths:\n  '/accounts/{name}':\n    get:\n      tags:\n        - Accounts\n      summary: Get an account\n      operationId: getAccount\n      parameters:\n        - $ref: '#/components/parameters/name'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '404':\n          description: account not found\n\n  '/accounts/{name}/videos':\n    get:\n      tags:\n        - Accounts\n        - Video\n      summary: 'List videos of an account'\n      operationId: getAccountVideos\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/isLive'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n      x-codeSamples:\n        - lang: JavaScript\n          source: |\n            fetch('https://peertube2.cpy.re/api/v1/accounts/{name}/videos')\n            .then(function(response) {\n              return response.json()\n            }).then(function(data) {\n              console.log(data)\n            })\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            curl -s https://peertube2.cpy.re/api/v1/accounts/{name}/videos | jq\n        - lang: Ruby\n          source: |\n            require 'net/http'\n            require 'json'\n\n            uri = URI.parse(\"https://peertube2.cpy.re/api/v1/accounts/{name}/videos\")\n\n            http = Net::HTTP.new(uri.host, uri.port)\n            http.use_ssl = true\n\n            response = http.get(uri.request_uri)\n\n            puts JSON.parse(response.read_body)\n        - lang: Python\n          source: |\n            import requests\n\n            r = requests.get(\"https://peertube2.cpy.re/api/v1//accounts/{name}/videos\")\n            json = r.json()\n\n            print(json)\n\n  '/accounts/{name}/followers':\n    get:\n      tags:\n        - Accounts\n      summary: 'List followers of an account'\n      security:\n        - OAuth2: []\n      operationId: getAccountFollowers\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/followersSort'\n        - $ref: '#/components/parameters/search'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Follow'\n\n  /accounts:\n    get:\n      tags:\n        - Accounts\n      summary: List accounts\n      operationId: getAccounts\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Account'\n\n  /config:\n    get:\n      tags:\n        - Config\n      summary: Get instance public configuration\n      operationId: getConfig\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfig'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/config\n\n  /config/about:\n    get:\n      summary: Get instance \"About\" information\n      operationId: getAbout\n      tags:\n        - Config\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfigAbout'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/config/about\n\n  /config/custom:\n    get:\n      summary: Get instance runtime configuration\n      operationId: getCustomConfig\n      tags:\n        - Config\n      security:\n        - OAuth2:\n          - admin\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ServerConfigCustom'\n    put:\n      summary: Set instance runtime configuration\n      operationId: putCustomConfig\n      tags:\n        - Config\n      security:\n        - OAuth2:\n          - admin\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          x-summary: field inconsistencies\n          description: \u003e\n            Arises when:\n              - the emailer is disabled and the instance is open to registrations\n              - webtorrent and hls are disabled with transcoding enabled - you need at least one enabled\n    delete:\n      summary: Delete instance runtime configuration\n      operationId: delCustomConfig\n      tags:\n        - Config\n      security:\n        - OAuth2:\n          - admin\n      responses:\n        '200':\n          description: successful operation\n\n  /custom-pages/homepage/instance:\n    get:\n      summary: Get instance custom homepage\n      tags:\n        - Homepage\n      responses:\n        '404':\n          description: No homepage set\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomHomepage'\n    put:\n      summary: Set instance custom homepage\n      tags:\n        - Homepage\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                content:\n                  type: string\n                  description: content of the homepage, that will be injected in the client\n      responses:\n        '204':\n          description: successful operation\n\n  /jobs/pause:\n    post:\n      summary: Pause job queue\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Job\n      responses:\n        '204':\n          description: successful operation\n\n  /jobs/resume:\n    post:\n      summary: Resume job queue\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Job\n      responses:\n        '204':\n          description: successful operation\n\n  /jobs/{state}:\n    get:\n      summary: List instance jobs\n      operationId: getJobs\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Job\n      parameters:\n        - name: state\n          in: path\n          required: true\n          description: The state of the job ('' for for no filter)\n          schema:\n            type: string\n            enum:\n              - ''\n              - active\n              - completed\n              - failed\n              - waiting\n              - delayed\n        - $ref: '#/components/parameters/jobType'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    maxItems: 100\n                    items:\n                      $ref: '#/components/schemas/Job'\n\n  /server/followers:\n    get:\n      tags:\n        - Instance Follows\n      summary: List instances following the server\n      parameters:\n        - $ref: '#/components/parameters/followState'\n        - $ref: '#/components/parameters/actorType'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Follow'\n\n  '/server/followers/{nameWithHost}':\n    delete:\n      summary: Remove or reject a follower to your server\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      parameters:\n        - name: nameWithHost\n          in: path\n          required: true\n          description: The remote actor handle to remove from your followers\n          schema:\n            type: string\n            format: email\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: follower not found\n\n  '/server/followers/{nameWithHost}/reject':\n    post:\n      summary: Reject a pending follower to your server\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      parameters:\n        - name: nameWithHost\n          in: path\n          required: true\n          description: The remote actor handle to remove from your followers\n          schema:\n            type: string\n            format: email\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: follower not found\n\n  '/server/followers/{nameWithHost}/accept':\n    post:\n      summary: Accept a pending follower to your server\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      parameters:\n        - name: nameWithHost\n          in: path\n          required: true\n          description: The remote actor handle to remove from your followers\n          schema:\n            type: string\n            format: email\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: follower not found\n\n  /server/following:\n    get:\n      tags:\n        - Instance Follows\n      summary: List instances followed by the server\n      parameters:\n        - $ref: '#/components/parameters/followState'\n        - $ref: '#/components/parameters/actorType'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Follow'\n    post:\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      summary: Follow a list of actors (PeerTube instance, channel or account)\n      responses:\n        '204':\n          description: successful operation\n        '500':\n          description: cannot follow a non-HTTPS server\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                hosts:\n                  type: array\n                  items:\n                    type: string\n                    format: hostname\n                  uniqueItems: true\n                handles:\n                  type: array\n                  items:\n                    type: string\n                  uniqueItems: true\n\n  '/server/following/{hostOrHandle}':\n    delete:\n      summary: Unfollow an actor (PeerTube instance, channel or account)\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Instance Follows\n      parameters:\n        - name: hostOrHandle\n          in: path\n          required: true\n          description: The hostOrHandle to unfollow\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: host or handle not found\n\n  /users:\n    post:\n      summary: Create a user\n      operationId: addUser\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Users\n      responses:\n        '200':\n          description: user created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddUserResponse'\n          links:\n            # GET /users/{id}\n            GetUser:\n              operationId: getUser\n              parameters:\n                id: '$response.body#/user/id'\n            # PUT /users/{id}\n            PutUser:\n              operationId: putUser\n              parameters:\n                id: '$response.body#/user/id'\n            # DELETE /users/{id}\n            DelUser:\n              operationId: delUser\n              parameters:\n                id: '$response.body#/user/id'\n        '403':\n          description: insufficient authority to create an admin or moderator\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AddUser'\n        description: |\n          If the smtp server is configured, you can leave the password empty and an email will be sent\n          asking the user to set it first.\n        required: true\n    get:\n      summary: List users\n      operationId: getUsers\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Users\n      parameters:\n        - $ref: '#/components/parameters/usersSearch'\n        - $ref: '#/components/parameters/usersBlocked'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/usersSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n\n  '/users/{id}':\n    parameters:\n      - $ref: '#/components/parameters/id'\n    delete:\n      summary: Delete a user\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Users\n      operationId: delUser\n      responses:\n        '204':\n          description: successful operation\n    get:\n      summary: Get a user\n      security:\n        - OAuth2: []\n      tags:\n        - Users\n      operationId: getUser\n      parameters:\n        - name: withStats\n          in: query\n          description: include statistics about the user (only available as a moderator/admin)\n          schema:\n            type: boolean\n      responses:\n        '200':\n          x-summary: successful operation\n          description: |\n            As an admin/moderator, you can request a response augmented with statistics about the user's\n            moderation relations and videos usage, by using the `withStats` parameter.\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: '#/components/schemas/User'\n                  - $ref: '#/components/schemas/UserWithStats'\n    put:\n      summary: Update a user\n      security:\n        - OAuth2: []\n      tags:\n        - Users\n      operationId: putUser\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateUser'\n        required: true\n\n  /oauth-clients/local:\n    get:\n      summary: Login prerequisite\n      description: You need to retrieve a client id and secret before [logging in](#operation/getOAuthToken).\n      operationId: getOAuthClient\n      tags:\n        - Session\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OAuthClient'\n          links:\n            UseOAuthClientToLogin:\n              operationId: getOAuthToken\n              parameters:\n                client_id: '$response.body#/client_id'\n                client_secret: '$response.body#/client_secret'\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            API=\"https://peertube2.cpy.re/api/v1\"\n\n            ## AUTH\n            curl -s \"$API/oauth-clients/local\"\n\n  /users/token:\n    post:\n      summary: Login\n      operationId: getOAuthToken\n      description: With your [client id and secret](#operation/getOAuthClient), you can retrieve an access and refresh tokens.\n      tags:\n        - Session\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              oneOf:\n                - $ref: '#/components/schemas/OAuthToken-password'\n                - $ref: '#/components/schemas/OAuthToken-refresh_token'\n              discriminator:\n                propertyName: grant_type\n                mapping:\n                  password: '#/components/schemas/OAuthToken-password'\n                  refresh_token: '#/components/schemas/OAuthToken-refresh_token'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token_type:\n                    type: string\n                    example: Bearer\n                  access_token:\n                    type: string\n                    example: 90286a0bdf0f7315d9d3fe8dabf9e1d2be9c97d0\n                    description: valid for 1 day\n                  refresh_token:\n                    type: string\n                    example: 2e0d675df9fc96d2e4ec8a3ebbbf45eca9137bb7\n                    description: valid for 2 weeks\n                  expires_in:\n                    type: integer\n                    minimum: 0\n                    example: 14399\n                  refresh_token_expires_in:\n                    type: integer\n                    minimum: 0\n                    example: 1209600\n        '400':\n          x-summary: client or credentials are invalid\n          description: |\n            Disambiguate via `type`:\n            - `invalid_client` for an unmatched `client_id`\n            - `invalid_grant` for unmatched credentials\n        '401':\n          x-summary: token expired\n          description: |\n            Disambiguate via `type`:\n            - default value for a regular authentication failure\n            - `invalid_token` for an expired token\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            API=\"https://peertube2.cpy.re/api/v1\"\n            USERNAME=\"\u003cyour_username\u003e\"\n            PASSWORD=\"\u003cyour_password\u003e\"\n\n            ## AUTH\n            client_id=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_id\")\n            client_secret=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_secret\")\n            curl -s \"$API/users/token\" \\\n              --data client_id=\"$client_id\" \\\n              --data client_secret=\"$client_secret\" \\\n              --data grant_type=password \\\n              --data username=\"$USERNAME\" \\\n              --data password=\"$PASSWORD\" \\\n              | jq -r \".access_token\"\n\n  /users/revoke-token:\n    post:\n      summary: Logout\n      description: Revokes your access token and its associated refresh token, destroying your current session.\n      operationId: revokeOAuthToken\n      tags:\n        - Session\n      security:\n        - OAuth2: []\n      responses:\n        '200':\n          description: successful operation\n\n  /users/register:\n    post:\n      summary: Register a user\n      operationId: registerUser\n      tags:\n        - Users\n        - Register\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RegisterUser'\n        required: true\n\n  /users/{id}/verify-email:\n    post:\n      summary: Verify a user\n      operationId: verifyUser\n      description: |\n        Following a user registration, the new user will receive an email asking to click a link\n        containing a secret.\n      tags:\n        - Users\n        - Register\n      parameters:\n        - $ref: '#/components/parameters/id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                verificationString:\n                  type: string\n                  format: url\n                isPendingEmail:\n                  type: boolean\n              required:\n                - verificationString\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: invalid verification string\n        '404':\n          description: user not found\n\n  /users/ask-send-verify-email:\n    post:\n      summary: Resend user verification link\n      operationId: resendEmailToVerifyUser\n      tags:\n        - Users\n        - Register\n      responses:\n        '204':\n          description: successful operation\n\n  /users/me:\n    get:\n      summary: Get my user information\n      operationId: getUserInfo\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n    put:\n      summary: Update my user information\n      operationId: putUserInfo\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdateMe'\n        required: true\n\n  /users/me/videos/imports:\n    get:\n      summary: Get video imports of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - Videos\n        - My User\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoImportsList'\n\n  /users/me/video-quota-used:\n    get:\n      summary: Get my user used quota\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoQuotaUsed:\n                    type: number\n                    description: The user video quota used so far in bytes\n                    example: 16810141515\n                  videoQuotaUsedDaily:\n                    type: number\n                    description: The user video quota used today in bytes\n                    example: 1681014151\n\n  '/users/me/videos/{videoId}/rating':\n    get:\n      summary: Get rate of my user for a video\n      security:\n        - OAuth2: []\n      tags:\n        - My User\n        - Video Rates\n      parameters:\n        - name: videoId\n          in: path\n          required: true\n          description: The video id\n          schema:\n            $ref: '#/components/schemas/Video/properties/id'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetMeVideoRating'\n\n  /users/me/videos:\n    get:\n      summary: Get videos of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My User\n        - Videos\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n\n  /users/me/subscriptions:\n    get:\n      summary: Get my user subscriptions\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannelList'\n    post:\n      tags:\n        - My Subscriptions\n      summary: Add subscription to my user\n      security:\n        - OAuth2:\n          - user\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                uri:\n                  type: string\n                  format: uri\n                  description: uri of the video channels to subscribe to\n              required:\n                - uri\n            examples:\n              default:\n                value:\n                  uri: 008a0e54-375d-49d0-8379-143202e24152@video.lqdn.fr\n      responses:\n        '200':\n          description: successful operation\n\n  /users/me/subscriptions/exist:\n    get:\n      summary: Get if subscriptions exist for my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/subscriptionsUris'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n\n  /users/me/subscriptions/videos:\n    get:\n      summary: List videos of subscriptions of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n        - Videos\n      parameters:\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/isLive'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n\n  '/users/me/subscriptions/{subscriptionHandle}':\n    get:\n      summary: Get subscription of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/subscriptionHandle'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannel'\n    delete:\n      summary: Delete subscription of my user\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - My Subscriptions\n      parameters:\n        - $ref: '#/components/parameters/subscriptionHandle'\n      responses:\n        '200':\n          description: successful operation\n\n  /users/me/notifications:\n    get:\n      summary: List my notifications\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      parameters:\n        - name: unread\n          in: query\n          description: only list unread notifications\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NotificationListResponse'\n\n  /users/me/notifications/read:\n    post:\n      summary: Mark notifications as read by their id\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                ids:\n                  type: array\n                  description: ids of the notifications to mark as read\n                  items:\n                    type: integer\n              required:\n                - ids\n      responses:\n        '204':\n          description: successful operation\n\n  /users/me/notifications/read-all:\n    post:\n      summary: Mark all my notification as read\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      responses:\n        '204':\n          description: successful operation\n\n  /users/me/notification-settings:\n    put:\n      summary: Update my notification settings\n      security:\n        - OAuth2: []\n      tags:\n        - My Notifications\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                newVideoFromSubscription:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newCommentOnMyVideo:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                abuseAsModerator:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                videoAutoBlacklistAsModerator:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                blacklistOnMyVideo:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                myVideoPublished:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                myVideoImportFinished:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newFollow:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newUserRegistration:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                commentMention:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                newInstanceFollower:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n                autoInstanceFollowing:\n                  $ref: '#/components/schemas/NotificationSettingValue'\n      responses:\n        '204':\n          description: successful operation\n\n  /users/me/history/videos:\n    get:\n      summary: List watched videos history\n      security:\n        - OAuth2: []\n      tags:\n        - My History\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/search'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n\n  /users/me/history/videos/{videoId}:\n    delete:\n      summary: Delete history element\n      security:\n        - OAuth2: []\n      tags:\n        - My History\n      parameters:\n        - name: videoId\n          in: path\n          required: true\n          schema:\n            $ref: '#/components/schemas/Video/properties/id'\n      responses:\n        '204':\n          description: successful operation\n\n  /users/me/history/videos/remove:\n    post:\n      summary: Clear video history\n      security:\n        - OAuth2: []\n      tags:\n        - My History\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                beforeDate:\n                  description: history before this date will be deleted\n                  type: string\n                  format: date-time\n      responses:\n        '204':\n          description: successful operation\n\n  /users/me/avatar/pick:\n    post:\n      summary: Update my user avatar\n      security:\n        - OAuth2: []\n      tags:\n        - My User\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  avatar:\n                    $ref: '#/components/schemas/ActorImage'\n        '413':\n          description: image file too large\n          headers:\n            X-File-Maximum-Size:\n              schema:\n                type: string\n                format: Nginx size\n              description: Maximum file size for the avatar\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                avatarfile:\n                  description: The file to upload\n                  type: string\n                  format: binary\n            encoding:\n              avatarfile:\n                contentType: image/png, image/jpeg\n\n  /users/me/avatar:\n    delete:\n      summary: Delete my avatar\n      security:\n        - OAuth2: []\n      tags:\n        - My User\n      responses:\n        '204':\n          description: successful operation\n\n  /videos/ownership:\n    get:\n      summary: List video ownership changes\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      responses:\n        '200':\n          description: successful operation\n\n  '/videos/ownership/{id}/accept':\n    post:\n      summary: Accept ownership change request\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: cannot terminate an ownership change of another user\n        '404':\n          description: video ownership change not found\n\n  '/videos/ownership/{id}/refuse':\n    post:\n      summary: Refuse ownership change request\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: cannot terminate an ownership change of another user\n        '404':\n          description: video ownership change not found\n\n  '/videos/{id}/give-ownership':\n    post:\n      summary: Request ownership change\n      tags:\n        - Video Ownership Change\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        required: true\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n              required:\n                - username\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: changing video ownership to a remote account is not supported yet\n        '404':\n          description: video not found\n\n  /videos:\n    get:\n      summary: List videos\n      operationId: getVideos\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/isLive'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n\n  /videos/categories:\n    get:\n      summary: List available video categories\n      operationId: getCategories\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/categories\n\n  /videos/licences:\n    get:\n      summary: List available video licences\n      operationId: getLicences\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/licences\n\n  /videos/languages:\n    get:\n      summary: List available video languages\n      operationId: getLanguages\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/languages\n\n  /videos/privacies:\n    get:\n      summary: List available video privacy policies\n      operationId: getPrivacyPolicies\n      tags:\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/videos/privacies\n\n  '/videos/{id}':\n    put:\n      summary: Update a video\n      operationId: putVideo\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                thumbnailfile:\n                  description: Video thumbnail file\n                  type: string\n                  format: binary\n                previewfile:\n                  description: Video preview file\n                  type: string\n                  format: binary\n                category:\n                  $ref: '#/components/schemas/VideoCategorySet'\n                licence:\n                  $ref: '#/components/schemas/VideoLicenceSet'\n                language:\n                  $ref: '#/components/schemas/VideoLanguageSet'\n                privacy:\n                  $ref: '#/components/schemas/VideoPrivacySet'\n                description:\n                  description: Video description\n                  type: string\n                waitTranscoding:\n                  description: Whether or not we wait transcoding before publish the video\n                  type: string\n                support:\n                  description: A text tell the audience how to support the video creator\n                  example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n                  type: string\n                nsfw:\n                  description: Whether or not this video contains sensitive content\n                  type: boolean\n                name:\n                  description: Video name\n                  type: string\n                  minLength: 3\n                  maxLength: 120\n                tags:\n                  description: Video tags (maximum 5 tags each between 2 and 30 characters)\n                  type: array\n                  minItems: 1\n                  maxItems: 5\n                  items:\n                    type: string\n                    minLength: 2\n                    maxLength: 30\n                commentsEnabled:\n                  description: Enable or disable comments for this video\n                  type: boolean\n                downloadEnabled:\n                  description: Enable or disable downloading for this video\n                  type: boolean\n                originallyPublishedAt:\n                  description: Date when the content was originally published\n                  type: string\n                  format: date-time\n                scheduleUpdate:\n                  $ref: '#/components/schemas/VideoScheduledUpdate'\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n    get:\n      summary: Get a video\n      operationId: getVideo\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoDetails'\n    delete:\n      summary: Delete a video\n      operationId: delVideo\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n\n  '/videos/{id}/description':\n    get:\n      summary: Get complete video description\n      operationId: getVideoDesc\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                nullable: true\n                type: string\n                minLength: 3\n                maxLength: 10000\n                example: |\n                  **[Want to help to translate this video?](https://weblate.framasoft.org/projects/what-is-peertube-video/)**\\r\\n\\r\\n**Take back the control of your videos! [#JoinPeertube](https://joinpeertube.org)**\n\n  '/videos/{id}/views':\n    post:\n      summary: Add a view to a video\n      operationId: addView\n      tags:\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n\n  '/videos/{id}/watching':\n    put:\n      summary: Set watching progress of a video\n      operationId: setProgress\n      tags:\n        - Video\n      security:\n        - OAuth2: []\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserWatchingVideo'\n        required: true\n      responses:\n        '204':\n          description: successful operation\n\n  /videos/upload:\n    post:\n      summary: Upload a video\n      description: Uses a single request to upload a video.\n      operationId: uploadLegacy\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n        - Video Upload\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '403':\n          description: video didn't pass upload filter\n        '408':\n          description: upload has timed out\n        '413':\n          x-summary: video file too large, due to quota or max body size limit set by the reverse-proxy\n          description: |\n            If the response has no body, it means the reverse-proxy didn't let it through. Otherwise disambiguate via `type`:\n            - `quota_reached` for quota limits wether daily or global\n          headers:\n            X-File-Maximum-Size:\n              schema:\n                type: string\n                format: Nginx size\n              description: Maximum file size for the video\n        '415':\n          description: video type unsupported\n        '422':\n          description: video unreadable\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/VideoUploadRequestLegacy'\n            encoding:\n              videofile:\n                contentType: video/mp4, video/webm, video/ogg, video/avi, video/quicktime, video/x-msvideo, video/x-flv, video/x-matroska, application/octet-stream\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n      x-codeSamples:\n        - lang: Shell\n          source: |\n            ## DEPENDENCIES: jq\n            USERNAME=\"\u003cyour_username\u003e\"\n            PASSWORD=\"\u003cyour_password\u003e\"\n            FILE_PATH=\"\u003cyour_file_path\u003e\"\n            CHANNEL_ID=\"\u003cyour_channel_id\u003e\"\n            NAME=\"\u003cvideo_name\u003e\"\n            API=\"https://peertube2.cpy.re/api/v1\"\n\n            ## AUTH\n            client_id=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_id\")\n            client_secret=$(curl -s \"$API/oauth-clients/local\" | jq -r \".client_secret\")\n            token=$(curl -s \"$API/users/token\" \\\n              --data client_id=\"$client_id\" \\\n              --data client_secret=\"$client_secret\" \\\n              --data grant_type=password \\\n              --data username=\"$USERNAME\" \\\n              --data password=\"$PASSWORD\" \\\n              | jq -r \".access_token\")\n\n            ## VIDEO UPLOAD\n            curl -s \"$API/videos/upload\" \\\n              -H \"Authorization: Bearer $token\" \\\n              --max-time 600 \\\n              --form videofile=@\"$FILE_PATH\" \\\n              --form channelId=$CHANNEL_ID \\\n              --form name=\"$NAME\"\n\n  /videos/upload-resumable:\n    post:\n      summary: Initialize the resumable upload of a video\n      description: Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to initialize the upload of a video\n      operationId: uploadResumableInit\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n        - Video Upload\n      parameters:\n        - name: X-Upload-Content-Length\n          in: header\n          schema:\n            type: number\n            example: 2469036\n          required: true\n          description: Number of bytes that will be uploaded in subsequent requests. Set this value to the size of the file you are uploading.\n        - name: X-Upload-Content-Type\n          in: header\n          schema:\n            type: string\n            format: mimetype\n            example: video/mp4\n          required: true\n          description: MIME type of the file that you are uploading. Depending on your instance settings, acceptable values might vary.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VideoUploadRequestResumable'\n      responses:\n        '200':\n          description: file already exists, send a [`resume`](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) request instead\n        '201':\n          description: created\n          headers:\n            Location:\n              schema:\n                type: string\n                format: url\n                example: /api/v1/videos/upload-resumable?upload_id=471e97554f21dec3b8bb5d4602939c51\n            Content-Length:\n              schema:\n                type: number\n                example: 0\n        '413':\n          x-summary: video file too large, due to quota, absolute max file size or concurrent partial upload limit\n          description: |\n            Disambiguate via `type`:\n            - `max_file_size_reached` for the absolute file size limit\n            - `quota_reached` for quota limits whether daily or global\n        '415':\n          description: video type unsupported\n    put:\n      summary: Send chunk for the resumable upload of a video\n      description: Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to continue, pause or resume the upload of a video\n      operationId: uploadResumable\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n        - Video Upload\n      parameters:\n        - name: upload_id\n          in: query\n          required: true\n          description: |\n            Created session id to proceed with. If you didn't send chunks in the last 12 hours, it is\n            not valid anymore and you need to initialize a new upload.\n          schema:\n            type: string\n        - name: Content-Range\n          in: header\n          schema:\n            type: string\n            example: bytes 0-262143/2469036\n          required: true\n          description: |\n            Specifies the bytes in the file that the request is uploading.\n\n            For example, a value of `bytes 0-262143/1000000` shows that the request is sending the first\n            262144 bytes (256 x 1024) in a 2,469,036 byte file.\n        - name: Content-Length\n          in: header\n          schema:\n            type: number\n            example: 262144\n          required: true\n          description: |\n            Size of the chunk that the request is sending.\n\n            The chunk size __must be a multiple of 256 KB__, and unlike [Google Resumable](https://developers.google.com/youtube/v3/guides/using_resumable_upload_protocol)\n            doesn't mandate for chunks to have the same size throughout the upload sequence.\n\n            Remember that larger chunks are more efficient. PeerTube's web client uses chunks varying from\n            1048576 bytes (~1MB) and increases or reduces size depending on connection health.\n      requestBody:\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: last chunk received\n          headers:\n            Content-Length:\n              schema:\n                type: number\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '308':\n          description: resume incomplete\n          headers:\n            Range:\n              schema:\n                type: string\n                example: bytes=0-262143\n            Content-Length:\n              schema:\n                type: number\n                example: 0\n        '403':\n          description: video didn't pass upload filter\n        '404':\n          description: upload not found\n        '409':\n          description: chunk doesn't match range\n        '422':\n          description: video unreadable\n        '429':\n          description: too many concurrent requests\n        '503':\n          description: upload is already being processed\n          headers:\n            'Retry-After':\n              schema:\n                type: number\n                example: 300\n    delete:\n      summary: Cancel the resumable upload of a video, deleting any data uploaded so far\n      description: Uses [a resumable protocol](https://github.com/kukhariev/node-uploadx/blob/master/proto.md) to cancel the upload of a video\n      operationId: uploadResumableCancel\n      security:\n        - OAuth2: []\n      tags:\n        - Video\n        - Video Upload\n      parameters:\n        - name: upload_id\n          in: query\n          required: true\n          description: |\n            Created session id to proceed with. If you didn't send chunks in the last 12 hours, it is\n            not valid anymore and the upload session has already been deleted with its data ;-)\n          schema:\n            type: string\n        - name: Content-Length\n          in: header\n          required: true\n          schema:\n            type: number\n            example: 0\n      responses:\n        '204':\n          description: upload cancelled\n          headers:\n            Content-Length:\n              schema:\n                type: number\n                example: 0\n        '404':\n          description: upload not found\n\n  /videos/imports:\n    post:\n      summary: Import a video\n      description: Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)\n      operationId: importVideo\n      security:\n        - OAuth2: []\n      tags:\n        - Video Imports\n        - Video Upload\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/VideoCreateImport'\n            encoding:\n              torrentfile:\n                contentType: application/x-bittorrent\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '400':\n          description: '`magnetUri` or `targetUrl` or a torrent file missing'\n        '403':\n          description: video didn't pass pre-import filter\n        '409':\n          description: HTTP or Torrent/magnetURI import not enabled\n\n  /videos/imports/{id}/cancel:\n    post:\n      summary: Cancel video import\n      description: Cancel a pending video import\n      security:\n        - OAuth2: []\n      tags:\n        - Video Imports\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '204':\n          description: successful operation\n\n  /videos/imports/{id}:\n    delete:\n      summary: Delete video import\n      description: Delete ended video import\n      security:\n        - OAuth2: []\n      tags:\n        - Video Imports\n      parameters:\n        - $ref: '#/components/parameters/id'\n      responses:\n        '204':\n          description: successful operation\n\n  /videos/live:\n    post:\n      summary: Create a live\n      operationId: addLive\n      security:\n        - OAuth2: []\n      tags:\n        - Live Videos\n        - Video\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoUploadResponse'\n        '400':\n          x-summary: validation error, or conflicting `saveReplay` and `permanentLive` parameter set\n          description: |\n            Disambiguate via `type`:\n            - default type for a validation error\n            - `live_conflicting_permanent_and_save_replay` for conflicting parameters set\n        '403':\n          x-summary: live is not enabled, allow replay is not enabled, or max instance/user live videos limit is exceeded\n          description: |\n            Disambiguate via `type`:\n            - `live_not_enabled` for a disabled live feature\n            - `live_not_allowing_replay` for a disabled replay feature\n            - `max_instance_lives_limit_reached` for the absolute concurrent live limit\n            - `max_user_lives_limit_reached` for the user concurrent live limit\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                channelId:\n                  description: Channel id that will contain this live video\n                  type: integer\n                saveReplay:\n                  type: boolean\n                permanentLive:\n                  description: User can stream multiple times in a permanent live\n                  type: boolean\n                thumbnailfile:\n                  description: Live video/replay thumbnail file\n                  type: string\n                  format: binary\n                previewfile:\n                  description: Live video/replay preview file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPrivacySet'\n                category:\n                  $ref: '#/components/schemas/VideoCategorySet'\n                licence:\n                  $ref: '#/components/schemas/VideoLicenceSet'\n                language:\n                  $ref: '#/components/schemas/VideoLanguageSet'\n                description:\n                  description: Live video/replay description\n                  type: string\n                support:\n                  description: A text tell the audience how to support the creator\n                  example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n                  type: string\n                nsfw:\n                  description: Whether or not this live video/replay contains sensitive content\n                  type: boolean\n                name:\n                  description: Live video/replay name\n                  type: string\n                  minLength: 3\n                  maxLength: 120\n                tags:\n                  description: Live video/replay tags (maximum 5 tags each between 2 and 30 characters)\n                  type: array\n                  minItems: 1\n                  maxItems: 5\n                  items:\n                    type: string\n                    minLength: 2\n                    maxLength: 30\n                commentsEnabled:\n                  description: Enable or disable comments for this live video/replay\n                  type: boolean\n                downloadEnabled:\n                  description: Enable or disable downloading for the replay of this live video\n                  type: boolean\n              required:\n                - channelId\n                - name\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n              previewfile:\n                contentType: image/jpeg\n\n  /videos/live/{id}:\n    get:\n      summary: Get information about a live\n      operationId: getLiveId\n      security:\n        - OAuth2: []\n      tags:\n        - Live Videos\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LiveVideoResponse'\n    put:\n      summary: Update information about a live\n      operationId: updateLiveId\n      security:\n        - OAuth2: []\n      tags:\n        - Live Videos\n        - Video\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LiveVideoUpdate'\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: bad parameters or trying to update a live that has already started\n        '403':\n          description: trying to save replay of the live but saving replay is not enabled on the instance\n\n  /users/me/abuses:\n    get:\n      summary: List my abuses\n      operationId: getMyAbuses\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n        - My User\n      parameters:\n        - name: id\n          in: query\n          description: only list the report with this id\n          schema:\n            type: integer\n        - name: state\n          in: query\n          schema:\n            $ref: '#/components/schemas/AbuseStateSet'\n        - $ref: '#/components/parameters/abusesSort'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Abuse'\n\n  /abuses:\n    get:\n      summary: List abuses\n      operationId: getAbuses\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Abuses\n      parameters:\n        - name: id\n          in: query\n          description: only list the report with this id\n          schema:\n            type: integer\n        - name: predefinedReason\n          in: query\n          description: predefined reason the listed reports should contain\n          schema:\n            $ref: '#/components/schemas/PredefinedAbuseReasons'\n        - name: search\n          in: query\n          description: plain search that will match with video titles, reporter names and more\n          schema:\n            type: string\n        - name: state\n          in: query\n          schema:\n            $ref: '#/components/schemas/AbuseStateSet'\n        - name: searchReporter\n          in: query\n          description: only list reports of a specific reporter\n          schema:\n            type: string\n        - name: searchReportee\n          description: only list reports of a specific reportee\n          in: query\n          schema:\n            type: string\n        - name: searchVideo\n          in: query\n          description: only list reports of a specific video\n          schema:\n            type: string\n        - name: searchVideoChannel\n          in: query\n          description: only list reports of a specific video channel\n          schema:\n            type: string\n        - name: videoIs\n          in: query\n          description: only list deleted or blocklisted videos\n          schema:\n            type: string\n            enum:\n            - 'deleted'\n            - 'blacklisted'\n        - name: filter\n          in: query\n          description: only list account, comment or video reports\n          schema:\n            type: string\n            enum:\n            - 'video'\n            - 'comment'\n            - 'account'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/abusesSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Abuse'\n    post:\n      summary: Report an abuse\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                reason:\n                  description: Reason why the user reports this video\n                  type: string\n                  minLength: 2\n                  maxLength: 3000\n                predefinedReasons:\n                  $ref: '#/components/schemas/PredefinedAbuseReasons'\n                video:\n                  type: object\n                  properties:\n                    id:\n                      description: Video id to report\n                      allOf:\n                        - $ref: '#/components/schemas/Video/properties/id'\n                    startAt:\n                      type: integer\n                      format: seconds\n                      description: Timestamp in the video that marks the beginning of the report\n                      minimum: 0\n                    endAt:\n                      type: integer\n                      format: seconds\n                      description: Timestamp in the video that marks the ending of the report\n                      minimum: 0\n                comment:\n                  type: object\n                  properties:\n                    id:\n                      description: Comment id to report\n                      allOf:\n                        - $ref: '#/components/schemas/VideoComment/properties/id'\n                account:\n                  type: object\n                  properties:\n                    id:\n                      description: Account id to report\n                      type: integer\n              required:\n                - reason\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  abuse:\n                    type: object\n                    properties:\n                      id:\n                        $ref: '#/components/schemas/id'\n        '400':\n          description: incorrect request parameters\n\n  '/abuses/{abuseId}':\n    put:\n      summary: Update an abuse\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                state:\n                  $ref: '#/components/schemas/AbuseStateSet'\n                moderationComment:\n                  type: string\n                  description: Update the report comment visible only to the moderation team\n                  minLength: 2\n                  maxLength: 3000\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: abuse not found\n    delete:\n      tags:\n        - Abuses\n      summary: Delete an abuse\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: block not found\n\n  '/abuses/{abuseId}/messages':\n    get:\n      summary: List messages of an abuse\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AbuseMessage'\n    post:\n      summary: Add message to an abuse\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                message:\n                  description: Message to send\n                  type: string\n                  minLength: 2\n                  maxLength: 3000\n              required:\n                - message\n      responses:\n        '200':\n          description: successful operation\n        '400':\n          description: incorrect request parameters\n\n  '/abuses/{abuseId}/messages/{abuseMessageId}':\n    delete:\n      summary: Delete an abuse message\n      security:\n        - OAuth2: []\n      tags:\n        - Abuses\n      parameters:\n        - $ref: '#/components/parameters/abuseId'\n        - $ref: '#/components/parameters/abuseMessageId'\n      responses:\n        '204':\n          description: successful operation\n\n  '/videos/{id}/blacklist':\n    post:\n      summary: Block a video\n      operationId: addVideoBlock\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Video Blocks\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n    delete:\n      summary: Unblock a video by its id\n      operationId: delVideoBlock\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      tags:\n        - Video Blocks\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: block not found\n\n  /videos/blacklist:\n    get:\n      tags:\n        - Video Blocks\n      summary: List video blocks\n      operationId: getVideoBlocks\n      security:\n        - OAuth2:\n          - admin\n          - moderator\n      parameters:\n        - name: type\n          in: query\n          description: \u003e\n            list only blocks that match this type:\n\n            - `1`: manual block\n\n            - `2`: automatic block that needs review\n          schema:\n            type: integer\n            enum:\n              - 1\n              - 2\n        - name: search\n          in: query\n          description: plain search that will match with video titles, and more\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/blacklistsSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoBlacklist'\n\n  /videos/{id}/captions:\n    get:\n      summary: List captions of a video\n      operationId: getVideoCaptions\n      tags:\n        - Video Captions\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoCaption'\n\n  /videos/{id}/captions/{captionLanguage}:\n    put:\n      summary: Add or replace a video caption\n      operationId: addVideoCaption\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - Video Captions\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/captionLanguage'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                captionfile:\n                  description: The file to upload.\n                  type: string\n                  format: binary\n            encoding:\n              captionfile:\n                contentType: text/vtt, application/x-subrip, text/plain\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video or language not found\n    delete:\n      summary: Delete a video caption\n      operationId: delVideoCaption\n      security:\n        - OAuth2:\n          - user\n      tags:\n        - Video Captions\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/captionLanguage'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video or language or caption for that language not found\n\n  /video-channels:\n    get:\n      summary: List video channels\n      operationId: getVideoChannels\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannelList'\n    post:\n      summary: Create a video channel\n      operationId: addVideoChannel\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      responses:\n        '204':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoChannel:\n                    type: object\n                    properties:\n                      id:\n                        $ref: '#/components/schemas/VideoChannel/properties/id'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VideoChannelCreate'\n\n  '/video-channels/{channelHandle}':\n    get:\n      summary: Get a video channel\n      operationId: getVideoChannel\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannel'\n    put:\n      summary: Update a video channel\n      operationId: putVideoChannel\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VideoChannelUpdate'\n    delete:\n      summary: Delete a video channel\n      operationId: delVideoChannel\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '204':\n          description: successful operation\n\n  '/video-channels/{channelHandle}/videos':\n    get:\n      summary: List videos of a video channel\n      operationId: getVideoChannelVideos\n      tags:\n        - Video\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/isLive'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videosSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n\n  '/video-channels/{channelHandle}/followers':\n    get:\n      tags:\n        - Video Channels\n      summary: 'List followers of a video channel'\n      security:\n        - OAuth2: []\n      operationId: getVideoChannelFollowers\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/followersSort'\n        - $ref: '#/components/parameters/search'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Follow'\n\n  '/video-channels/{channelHandle}/avatar/pick':\n    post:\n      summary: Update channel avatar\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  avatar:\n                    $ref: '#/components/schemas/ActorImage'\n        '413':\n          description: image file too large\n          headers:\n            X-File-Maximum-Size:\n              schema:\n                type: string\n                format: Nginx size\n              description: Maximum file size for the avatar\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                avatarfile:\n                  description: The file to upload.\n                  type: string\n                  format: binary\n            encoding:\n              avatarfile:\n                contentType: image/png, image/jpeg\n\n  '/video-channels/{channelHandle}/avatar':\n    delete:\n      summary: Delete channel avatar\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '204':\n          description: successful operation\n\n  '/video-channels/{channelHandle}/banner/pick':\n    post:\n      summary: Update channel banner\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  banner:\n                    $ref: '#/components/schemas/ActorImage'\n        '413':\n          description: image file too large\n          headers:\n            X-File-Maximum-Size:\n              schema:\n                type: string\n                format: Nginx size\n              description: Maximum file size for the banner\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                bannerfile:\n                  description: The file to upload.\n                  type: string\n                  format: binary\n            encoding:\n              bannerfile:\n                contentType: image/png, image/jpeg\n\n  '/video-channels/{channelHandle}/banner':\n    delete:\n      summary: Delete channel banner\n      security:\n        - OAuth2: []\n      tags:\n        - Video Channels\n      parameters:\n        - $ref: '#/components/parameters/channelHandle'\n      responses:\n        '204':\n          description: successful operation\n\n  /video-playlists/privacies:\n    get:\n      summary: List available playlist privacy policies\n      operationId: getPlaylistPrivacyPolicies\n      tags:\n        - Video Playlists\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/api/v1/video-playlists/privacies\n\n  /video-playlists:\n    get:\n      summary: List video playlists\n      operationId: getPlaylists\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoPlaylist'\n    post:\n      summary: Create a video playlist\n      description: If the video playlist is set as public, `videoChannelId` is mandatory.\n      operationId: addPlaylist\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoPlaylist:\n                    type: object\n                    properties:\n                      id:\n                        $ref: '#/components/schemas/VideoPlaylist/properties/id'\n                      uuid:\n                        $ref: '#/components/schemas/VideoPlaylist/properties/uuid'\n                      shortUUID:\n                        $ref: '#/components/schemas/VideoPlaylist/properties/shortUUID'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                displayName:\n                  description: Video playlist display name\n                  type: string\n                  minLength: 1\n                  maxLength: 120\n                thumbnailfile:\n                  description: Video playlist thumbnail file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPlaylistPrivacySet'\n                description:\n                  description: Video playlist description\n                  type: string\n                  minLength: 3\n                  maxLength: 1000\n                videoChannelId:\n                  allOf:\n                    - $ref: '#/components/schemas/id'\n                  description: Video channel in which the playlist will be published\n              required:\n                - displayName\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n\n  /video-playlists/{playlistId}:\n    get:\n      summary: Get a video playlist\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoPlaylist'\n    put:\n      summary: Update a video playlist\n      description: 'If the video playlist is set as public, the playlist must have a assigned channel.'\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      responses:\n        '204':\n          description: successful operation\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                displayName:\n                  description: Video playlist display name\n                  type: string\n                  minLength: 1\n                  maxLength: 120\n                thumbnailfile:\n                  description: Video playlist thumbnail file\n                  type: string\n                  format: binary\n                privacy:\n                  $ref: '#/components/schemas/VideoPlaylistPrivacySet'\n                description:\n                  description: Video playlist description\n                  type: string\n                videoChannelId:\n                  allOf:\n                    - $ref: '#/components/schemas/id'\n                  description: Video channel in which the playlist will be published\n            encoding:\n              thumbnailfile:\n                contentType: image/jpeg\n    delete:\n      summary: Delete a video playlist\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n      responses:\n        '204':\n          description: successful operation\n\n  /video-playlists/{playlistId}/videos:\n    get:\n      summary: 'List videos of a playlist'\n      operationId: getVideoPlaylistVideos\n      tags:\n        - Videos\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n    post:\n      summary: Add a video in a playlist\n      operationId: addVideoPlaylistVideo\n      security:\n        - OAuth2: []\n      tags:\n        - Videos\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoPlaylistElement:\n                    type: object\n                    properties:\n                      id:\n                        type: integer\n                        example: 2\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                videoId:\n                  oneOf:\n                    - $ref: '#/components/schemas/Video/properties/uuid'\n                    - $ref: '#/components/schemas/Video/properties/id'\n                  description: Video to add in the playlist\n                startTimestamp:\n                  type: integer\n                  format: seconds\n                  description: Start the video at this specific timestamp\n                stopTimestamp:\n                  type: integer\n                  format: seconds\n                  description: Stop the video at this specific timestamp\n              required:\n                - videoId\n\n  /video-playlists/{playlistId}/videos/reorder:\n    post:\n      summary: 'Reorder a playlist'\n      operationId: reorderVideoPlaylist\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                startPosition:\n                  type: integer\n                  description: 'Start position of the element to reorder'\n                  minimum: 1\n                insertAfterPosition:\n                  type: integer\n                  description: 'New position for the block to reorder, to add the block before the first element'\n                  minimum: 0\n                reorderLength:\n                  type: integer\n                  description: 'How many element from `startPosition` to reorder'\n                  minimum: 1\n              required:\n                - startPosition\n                - insertAfterPosition\n\n  /video-playlists/{playlistId}/videos/{playlistElementId}:\n    put:\n      summary: Update a playlist element\n      operationId: putVideoPlaylistVideo\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n        - $ref: '#/components/parameters/playlistElementId'\n      responses:\n        '204':\n          description: successful operation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                startTimestamp:\n                  type: integer\n                  format: seconds\n                  description: Start the video at this specific timestamp\n                stopTimestamp:\n                  type: integer\n                  format: seconds\n                  description: Stop the video at this specific timestamp\n    delete:\n      summary: Delete an element from a playlist\n      operationId: delVideoPlaylistVideo\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - $ref: '#/components/parameters/playlistId'\n        - $ref: '#/components/parameters/playlistElementId'\n      responses:\n        '204':\n          description: successful operation\n\n  '/users/me/video-playlists/videos-exist':\n    get:\n      summary: Check video exists in my playlists\n      security:\n        - OAuth2: []\n      tags:\n        - Video Playlists\n      parameters:\n        - name: videoIds\n          in: query\n          required: true\n          description: The video ids to check\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/Video/properties/id'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  videoId:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        playlistElementId:\n                          type: integer\n                        playlistId:\n                          type: integer\n                        startTimestamp:\n                          type: integer\n                          format: seconds\n                        stopTimestamp:\n                          type: integer\n                          format: seconds\n\n  '/accounts/{name}/video-channels':\n    get:\n      summary: List video channels of an account\n      tags:\n        - Video Channels\n        - Accounts\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - name: withStats\n          in: query\n          description: include view statistics for the last 30 days (only if authentified as the account user)\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannelList'\n\n  '/accounts/{name}/ratings':\n    get:\n      summary: List ratings of an account\n      security:\n        - OAuth2: []\n      tags:\n        - Accounts\n      parameters:\n        - $ref: '#/components/parameters/name'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n        - name: rating\n          in: query\n          required: false\n          description: Optionally filter which ratings to retrieve\n          schema:\n            type: string\n            enum:\n              - like\n              - dislike\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VideoRating'\n\n  '/videos/{id}/comment-threads':\n    get:\n      summary: List threads of a video\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/commentsSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentThreadResponse'\n    post:\n      summary: Create a thread\n      security:\n        - OAuth2: []\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentThreadPostResponse'\n        '404':\n          description: video does not exist\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  allOf:\n                    - $ref: '#/components/schemas/VideoComment/properties/text'\n                  format: markdown\n                  maxLength: 10000\n              required:\n                - text\n\n  '/videos/{id}/comment-threads/{threadId}':\n    get:\n      summary: Get a thread\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/threadId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoCommentThreadTree'\n\n  '/videos/{id}/comments/{commentId}':\n    post:\n      summary: Reply to a thread of a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/commentId'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CommentThreadPostResponse'\n        '404':\n          description: thread or video does not exist\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                text:\n                  allOf:\n                    - $ref: '#/components/schemas/VideoComment/properties/text'\n                  format: markdown\n                  maxLength: 10000\n              required:\n                - text\n    delete:\n      summary: Delete a comment or a reply\n      security:\n        - OAuth2: []\n      tags:\n        - Video Comments\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n        - $ref: '#/components/parameters/commentId'\n      responses:\n        '204':\n          description: successful operation\n        '403':\n          description: cannot remove comment of another user\n        '404':\n          description: comment or video does not exist\n        '409':\n          description: comment is already deleted\n\n  '/videos/{id}/rate':\n    put:\n      summary: Like/dislike a video\n      security:\n        - OAuth2: []\n      tags:\n        - Video Rates\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                rating:\n                  type: string\n                  enum:\n                    - like\n                    - dislike\n              required:\n                - rating\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video does not exist\n\n  '/videos/{id}/hls':\n    delete:\n      summary: Delete video HLS files\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Video Files\n      operationId: delVideoHLS\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video does not exist\n  '/videos/{id}/webtorrent':\n    delete:\n      summary: Delete video WebTorrent files\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Video Files\n      operationId: delVideoWebTorrent\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video does not exist\n\n  '/videos/{id}/transcoding':\n    post:\n      summary: Create a transcoding job\n      security:\n        - OAuth2:\n          - admin\n      tags:\n        - Video Transcoding\n      operationId: createVideoTranscoding\n      parameters:\n        - $ref: '#/components/parameters/idOrUUID'\n      requestBody:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  transcodingType:\n                    type: string\n                    enum:\n                      - hls\n                      - webtorrent\n                required:\n                  - transcodingType\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video does not exist\n\n  /search/videos:\n    get:\n      tags:\n        - Search\n      summary: Search videos\n      operationId: searchVideos\n      parameters:\n        - name: search\n          in: query\n          required: true\n          allowEmptyValue: false\n          description: \u003e\n            String to search. If the user can make a remote URI search, and the string is an URI then the\n            PeerTube instance will fetch the remote object and add it to its database. Then,\n            you can use the REST API to fetch the complete video information and interact with it.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/categoryOneOf'\n        - $ref: '#/components/parameters/isLive'\n        - $ref: '#/components/parameters/tagsOneOf'\n        - $ref: '#/components/parameters/tagsAllOf'\n        - $ref: '#/components/parameters/licenceOneOf'\n        - $ref: '#/components/parameters/languageOneOf'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n        - $ref: '#/components/parameters/skipCount'\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/searchTarget'\n        - $ref: '#/components/parameters/videosSearchSort'\n        - name: startDate\n          in: query\n          description: Get videos that are published after this date\n          schema:\n            type: string\n            format: date-time\n        - name: endDate\n          in: query\n          description: Get videos that are published before this date\n          schema:\n            type: string\n            format: date-time\n        - name: originallyPublishedStartDate\n          in: query\n          description: Get videos that are originally published after this date\n          schema:\n            type: string\n            format: date-time\n        - name: originallyPublishedEndDate\n          in: query\n          description: Get videos that are originally published before this date\n          schema:\n            type: string\n            format: date-time\n        - name: durationMin\n          in: query\n          description: Get videos that have this minimum duration\n          schema:\n            type: integer\n        - name: durationMax\n          in: query\n          description: Get videos that have this maximum duration\n          schema:\n            type: integer\n      callbacks:\n        'searchTarget === search-index':\n          $ref: '#/components/callbacks/searchIndex'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoListResponse'\n        '500':\n          description: search index unavailable\n\n  /search/video-channels:\n    get:\n      tags:\n        - Search\n      summary: Search channels\n      operationId: searchChannels\n      parameters:\n        - name: search\n          in: query\n          required: true\n          description: \u003e\n            String to search. If the user can make a remote URI search, and the string is an URI then the\n            PeerTube instance will fetch the remote object and add it to its database. Then,\n            you can use the REST API to fetch the complete channel information and interact with it.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/searchTarget'\n        - $ref: '#/components/parameters/sort'\n      callbacks:\n        'searchTarget === search-index':\n          $ref: '#/components/callbacks/searchIndex'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VideoChannelList'\n        '500':\n          description: search index unavailable\n\n  /search/video-playlists:\n    get:\n      tags:\n        - Search\n      summary: Search playlists\n      operationId: searchPlaylists\n      parameters:\n        - name: search\n          in: query\n          required: true\n          description: \u003e\n            String to search. If the user can make a remote URI search, and the string is an URI then the\n            PeerTube instance will fetch the remote object and add it to its database. Then,\n            you can use the REST API to fetch the complete playlist information and interact with it.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/searchTarget'\n        - $ref: '#/components/parameters/sort'\n      callbacks:\n        'searchTarget === search-index':\n          $ref: '#/components/callbacks/searchIndex'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  total:\n                    type: integer\n                    example: 1\n                  data:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/VideoPlaylist'\n        '500':\n          description: search index unavailable\n\n  /blocklist/status:\n    get:\n      tags:\n        - Account Blocks\n        - Server Blocks\n      summary: Get block status of accounts/hosts\n      parameters:\n        -\n          name: 'accounts'\n          in: query\n          description: 'Check if these accounts are blocked'\n          example: [ 'goofy@example.com', 'donald@example.com' ]\n          schema:\n            type: array\n            items:\n              type: string\n        -\n          name: 'hosts'\n          in: query\n          description: 'Check if these hosts are blocked'\n          example: [ 'example.com' ]\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            'application/json':\n              schema:\n                $ref: '#/components/schemas/BlockStatus'\n\n  /server/blocklist/accounts:\n    get:\n      tags:\n        - Account Blocks\n      summary: List account blocks\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n    post:\n      tags:\n        - Account Blocks\n      summary: Block an account\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                accountName:\n                  type: string\n                  example: chocobozzz@example.org\n                  description: account to block, in the form `username@domain`\n              required:\n                - accountName\n      responses:\n        '200':\n          description: successful operation\n        '409':\n          description: self-blocking forbidden\n\n  '/server/blocklist/accounts/{accountName}':\n    delete:\n      tags:\n        - Account Blocks\n      summary: Unblock an account by its handle\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: accountName\n          in: path\n          required: true\n          description: account to unblock, in the form `username@domain`\n          schema:\n            type: string\n      responses:\n        '201':\n          description: successful operation\n        '404':\n          description: account or account block does not exist\n\n  /server/blocklist/servers:\n    get:\n      tags:\n        - Server Blocks\n      summary: List server blocks\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n    post:\n      tags:\n        - Server Blocks\n      summary: Block a server\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                host:\n                  type: string\n                  format: hostname\n                  description: server domain to block\n              required:\n                - host\n      responses:\n        '204':\n          description: successful operation\n        '409':\n          description: self-blocking forbidden\n\n  '/server/blocklist/servers/{host}':\n    delete:\n      tags:\n        - Server Blocks\n      summary: Unblock a server by its domain\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: host\n          in: path\n          required: true\n          description: server domain to unblock\n          schema:\n            type: string\n            format: hostname\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: account block does not exist\n\n  /server/redundancy/{host}:\n    put:\n      tags:\n        - Instance Redundancy\n      summary: Update a server redundancy policy\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: host\n          in: path\n          required: true\n          description: server domain to mirror\n          schema:\n            type: string\n            format: hostname\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                redundancyAllowed:\n                  type: boolean\n                  description: allow mirroring of the host's local videos\n              required:\n                - redundancyAllowed\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: server is not already known\n\n  /server/redundancy/videos:\n    get:\n      tags:\n        - Video Mirroring\n      summary: List videos being mirrored\n      operationId: getMirroredVideos\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: target\n          in: query\n          required: true\n          description: direction of the mirror\n          schema:\n            type: string\n            enum:\n              - my-videos\n              - remote-videos\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/videoRedundanciesSort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/VideoRedundancy'\n    post:\n      tags:\n        - Video Mirroring\n      summary: Mirror a video\n      operationId: putMirroredVideo\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                videoId:\n                  $ref: '#/components/schemas/Video/properties/id'\n              required:\n                - videoId\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: cannot mirror a local video\n        '404':\n          description: video does not exist\n        '409':\n          description: video is already mirrored\n\n  /server/redundancy/videos/{redundancyId}:\n    delete:\n      tags:\n        - Video Mirroring\n      summary: Delete a mirror done on a video\n      operationId: delMirroredVideo\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: redundancyId\n          in: path\n          required: true\n          description: id of an existing redundancy on a video\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: video redundancy not found\n\n  '/feeds/video-comments.{format}':\n    get:\n      tags:\n        - Feeds\n      summary: List comments on videos\n      operationId: getSyndicatedComments\n      parameters:\n        - name: format\n          in: path\n          required: true\n          description: 'format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))'\n          schema:\n            type: string\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n        - name: videoId\n          in: query\n          description: 'limit listing to a specific video'\n          schema:\n            type: string\n        - name: accountId\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: accountName\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: videoChannelId\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n        - name: videoChannelName\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n      responses:\n        '204':\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                type: string\n                default: 'max-age=900' # 15 min cache\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.xml?filter=local\n            application/rss+xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.rss?filter=local\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.xml?filter=local\n            application/atom+xml:\n              schema:\n                $ref: '#/components/schemas/VideoCommentsForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.atom?filter=local\n            application/json:\n              schema:\n                type: object\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/video-comments.json?filter=local\n        '400':\n          x-summary: field inconsistencies\n          description: \u003e\n            Arises when:\n              - videoId filter is mixed with a channel filter\n        '404':\n          description: video, video channel or account not found\n        '406':\n          description: accept header unsupported\n\n  '/feeds/videos.{format}':\n    get:\n      tags:\n        - Feeds\n      summary: List videos\n      operationId: getSyndicatedVideos\n      parameters:\n        - name: format\n          in: path\n          required: true\n          description: 'format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))'\n          schema:\n            type: string\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n        - name: accountId\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: accountName\n          in: query\n          description: 'limit listing to a specific account'\n          schema:\n            type: string\n        - name: videoChannelId\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n        - name: videoChannelName\n          in: query\n          description: 'limit listing to a specific video channel'\n          schema:\n            type: string\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n      responses:\n        '204':\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                type: string\n                default: 'max-age=900' # 15 min cache\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.xml?filter=local\n            application/rss+xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.rss?filter=local\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.xml?filter=local\n            application/atom+xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.atom?filter=local\n            application/json:\n              schema:\n                type: object\n              examples:\n                nightly:\n                  externalValue: https://peertube2.cpy.re/feeds/videos.json?filter=local\n        '404':\n          description: video channel or account not found\n        '406':\n          description: accept header unsupported\n\n  '/feeds/subscriptions.{format}':\n    get:\n      tags:\n        - Feeds\n        - Account\n      summary: List videos of subscriptions tied to a token\n      operationId: getSyndicatedSubscriptionVideos\n      parameters:\n        - name: format\n          in: path\n          required: true\n          description: 'format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))'\n          schema:\n            type: string\n            enum:\n              - xml\n              - rss\n              - rss2\n              - atom\n              - atom1\n              - json\n              - json1\n        - name: accountId\n          in: query\n          description: limit listing to a specific account\n          schema:\n            type: string\n          required: true\n        - name: token\n          in: query\n          description: private token allowing access\n          schema:\n            type: string\n          required: true\n        - $ref: '#/components/parameters/sort'\n        - $ref: '#/components/parameters/nsfw'\n        - $ref: '#/components/parameters/isLocal'\n        - $ref: '#/components/parameters/include'\n        - $ref: '#/components/parameters/privacyOneOf'\n        - $ref: '#/components/parameters/hasHLSFiles'\n        - $ref: '#/components/parameters/hasWebtorrentFiles'\n      responses:\n        '204':\n          description: successful operation\n          headers:\n            Cache-Control:\n              schema:\n                type: string\n                default: 'max-age=900' # 15 min cache\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            application/rss+xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            text/xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            application/atom+xml:\n              schema:\n                $ref: '#/components/schemas/VideosForXML'\n            application/json:\n              schema:\n                type: object\n        '406':\n          description: accept header unsupported\n\n  /plugins:\n    get:\n      tags:\n        - Plugins\n      summary: List plugins\n      operationId: getPlugins\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: pluginType\n          in: query\n          schema:\n            type: integer\n        - name: uninstalled\n          in: query\n          schema:\n            type: boolean\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginResponse'\n\n  /plugins/available:\n    get:\n      tags:\n        - Plugins\n      summary: List available plugins\n      operationId: getAvailablePlugins\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - name: search\n          in: query\n          schema:\n            type: string\n        - name: pluginType\n          in: query\n          schema:\n            type: integer\n        - name: currentPeerTubeEngine\n          in: query\n          schema:\n            type: string\n        - $ref: '#/components/parameters/start'\n        - $ref: '#/components/parameters/count'\n        - $ref: '#/components/parameters/sort'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PluginResponse'\n        '503':\n          description: plugin index unavailable\n\n  /plugins/install:\n    post:\n      tags:\n        - Plugins\n      summary: Install a plugin\n      operationId: addPlugin\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    npmName:\n                      type: string\n                      example: peertube-plugin-auth-ldap\n                  required:\n                    - npmName\n                  additionalProperties: false\n                - type: object\n                  properties:\n                    path:\n                      type: string\n                  required:\n                    - path\n                  additionalProperties: false\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: should have either `npmName` or `path` set\n\n  /plugins/update:\n    post:\n      tags:\n        - Plugins\n      summary: Update a plugin\n      operationId: updatePlugin\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                  properties:\n                    npmName:\n                      type: string\n                      example: peertube-plugin-auth-ldap\n                  required:\n                    - npmName\n                  additionalProperties: false\n                - type: object\n                  properties:\n                    path:\n                      type: string\n                  required:\n                    - path\n                  additionalProperties: false\n      responses:\n        '204':\n          description: successful operation\n        '400':\n          description: should have either `npmName` or `path` set\n        '404':\n          description: existing plugin not found\n\n  /plugins/uninstall:\n    post:\n      tags:\n        - Plugins\n      summary: Uninstall a plugin\n      operationId: uninstallPlugin\n      security:\n        - OAuth2:\n          - admin\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                npmName:\n                  type: string\n                  description: name of the plugin/theme in its package.json\n                  example: peertube-plugin-auth-ldap\n              required:\n                - npmName\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: existing plugin not found\n\n  /plugins/{npmName}:\n    get:\n      tags:\n        - Plugins\n      summary: Get a plugin\n      operationId: getPlugin\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Plugin'\n        '404':\n          description: plugin not found\n\n  /plugins/{npmName}/settings:\n    put:\n      tags:\n        - Plugins\n      summary: Set a plugin's settings\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                settings:\n                  type: object\n                  additionalProperties: true\n      responses:\n        '204':\n          description: successful operation\n        '404':\n          description: plugin not found\n\n  /plugins/{npmName}/public-settings:\n    get:\n      tags:\n        - Plugins\n      summary: Get a plugin's public settings\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n        '404':\n          description: plugin not found\n\n  /plugins/{npmName}/registered-settings:\n    get:\n      tags:\n        - Plugins\n      summary: Get a plugin's registered settings\n      security:\n        - OAuth2:\n          - admin\n      parameters:\n        - $ref: '#/components/parameters/npmName'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties: true\n        '404':\n          description: plugin not found\n\nservers:\n  - url: 'https://peertube2.cpy.re/api/v1'\n    description: Live Test Server (live data - latest nightly version)\n  - url: 'https://peertube3.cpy.re/api/v1'\n    description: Live Test Server (live data - latest RC version)\n  - url: 'https://peertube.cpy.re/api/v1'\n    description: Live Test Server (live data - stable version)\ncomponents:\n  parameters:\n    start:\n      name: start\n      in: query\n      required: false\n      description: Offset used to paginate results\n      schema:\n        type: integer\n        minimum: 0\n    count:\n      name: count\n      in: query\n      required: false\n      description: \"Number of items to return\"\n      schema:\n        type: integer\n        default: 15\n        maximum: 100\n        minimum: 1\n    sort:\n      name: sort\n      in: query\n      required: false\n      description: Sort column\n      schema:\n        type: string\n        example: -createdAt\n    search:\n      name: search\n      in: query\n      required: false\n      description: Plain text search, applied to various parts of the model depending on endpoint\n      schema:\n        type: string\n    searchTarget:\n      name: searchTarget\n      in: query\n      required: false\n      description: \u003e\n        If the administrator enabled search index support, you can override the default search target.\n\n\n        **Warning**: If you choose to make an index search, PeerTube will get results from a third party service.\n        It means the instance may not yet know the objects you fetched. If you want to load video/channel information:\n          * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),\n          then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.\n          After that, you can use the classic REST API endpoints to fetch the complete object or interact with it\n          * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch\n          the data from the origin instance API\n      schema:\n        type: string\n        enum:\n          - 'local'\n          - 'search-index'\n    videosSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort videos by criteria\n      schema:\n        type: string\n        enum:\n        - name\n        - -duration\n        - -createdAt\n        - -publishedAt\n        - -views\n        - -likes\n        - -trending\n        - -hot\n    videosSearchSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort videos by criteria\n      schema:\n        type: string\n        enum:\n        - name\n        - -duration\n        - -createdAt\n        - -publishedAt\n        - -views\n        - -likes\n        - -match\n    commentsSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort comments by criteria\n      schema:\n        type: string\n        enum:\n        - -createdAt\n        - -totalReplies\n    blacklistsSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort blocklists by criteria\n      schema:\n        type: string\n        enum:\n        - -id\n        - name\n        - -duration\n        - -views\n        - -likes\n        - -dislikes\n        - -uuid\n        - -createdAt\n    usersSearch:\n      name: search\n      in: query\n      required: false\n      description: Plain text search that will match with user usernames or emails\n      schema:\n        type: string\n    usersBlocked:\n      name: blocked\n      in: query\n      required: false\n      description: Filter results down to (un)banned users\n      schema:\n        type: boolean\n    usersSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort users by criteria\n      schema:\n        type: string\n        enum:\n        - -id\n        - -username\n        - -createdAt\n    abusesSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort abuses by criteria\n      schema:\n        type: string\n        enum:\n        - -id\n        - -createdAt\n        - -state\n    videoRedundanciesSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort abuses by criteria\n      schema:\n        type: string\n        enum:\n        - name\n    followersSort:\n      name: sort\n      in: query\n      required: false\n      description: Sort followers by criteria\n      schema:\n        type: string\n        enum:\n        - createdAt\n    name:\n      name: name\n      in: path\n      required: true\n      description: The username or handle of the account\n      schema:\n        type: string\n        example: chocobozzz | chocobozzz@example.org\n    id:\n      name: id\n      in: path\n      required: true\n      description: Entity id\n      schema:\n        $ref: '#/components/schemas/id'\n    idOrUUID:\n      name: id\n      in: path\n      required: true\n      description: The object id, uuid or short uuid\n      schema:\n        oneOf:\n          - $ref: '#/components/schemas/id'\n          - $ref: '#/components/schemas/UUIDv4'\n          - $ref: '#/components/schemas/shortUUID'\n    playlistId:\n      name: playlistId\n      in: path\n      required: true\n      description: Playlist id\n      schema:\n        $ref: '#/components/schemas/VideoPlaylist/properties/id'\n    playlistElementId:\n      name: playlistElementId\n      in: path\n      required: true\n      description: Playlist element id\n      schema:\n        $ref: '#/components/schemas/id'\n    abuseId:\n      name: abuseId\n      in: path\n      required: true\n      description: Abuse id\n      schema:\n        $ref: '#/components/schemas/Abuse/properties/id'\n    abuseMessageId:\n      name: abuseMessageId\n      in: path\n      required: true\n      description: Abuse message id\n      schema:\n        $ref: '#/components/schemas/AbuseMessage/properties/id'\n    captionLanguage:\n      name: captionLanguage\n      in: path\n      required: true\n      description: The caption language\n      schema:\n        $ref: '#/components/schemas/VideoLanguageSet'\n    channelHandle:\n      name: channelHandle\n      in: path\n      required: true\n      description: The video channel handle\n      schema:\n        type: string\n        example: my_username | my_username@example.com\n    subscriptionHandle:\n      name: subscriptionHandle\n      in: path\n      required: true\n      description: The subscription handle\n      schema:\n        type: string\n        example: my_username | my_username@example.com\n    threadId:\n      name: threadId\n      in: path\n      required: true\n      description: The thread id (root comment id)\n      schema:\n        type: integer\n    commentId:\n      name: commentId\n      in: path\n      required: true\n      description: The comment id\n      schema:\n        $ref: '#/components/schemas/VideoComment/properties/id'\n    isLive:\n      name: isLive\n      in: query\n      required: false\n      description: whether or not the video is a live\n      schema:\n        type: boolean\n    categoryOneOf:\n      name: categoryOneOf\n      in: query\n      required: false\n      description: category id of the video (see [/videos/categories](#operation/getCategories))\n      schema:\n        oneOf:\n        - $ref: '#/components/schemas/VideoCategorySet'\n        - type: array\n          items:\n            $ref: '#/components/schemas/VideoCategorySet'\n      style: form\n      explode: false\n    tagsOneOf:\n      name: tagsOneOf\n      in: query\n      required: false\n      description: tag(s) of the video\n      schema:\n        oneOf:\n        - type: string\n        - type: array\n          maxItems: 5\n          items:\n            type: string\n      style: form\n      explode: false\n    tagsAllOf:\n      name: tagsAllOf\n      in: query\n      required: false\n      description: tag(s) of the video, where all should be present in the video\n      schema:\n        oneOf:\n        - type: string\n        - type: array\n          items:\n            type: string\n      style: form\n      explode: false\n    languageOneOf:\n      name: languageOneOf\n      in: query\n      required: false\n      description: language id of the video (see [/videos/languages](#operation/getLanguages)). Use `_unknown` to filter on videos that don't have a video language\n      schema:\n        oneOf:\n        - $ref: '#/components/schemas/VideoLanguageSet'\n        - type: array\n          items:\n            $ref: '#/components/schemas/VideoLanguageSet'\n      style: form\n      explode: false\n    licenceOneOf:\n      name: licenceOneOf\n      in: query\n      required: false\n      description: licence id of the video (see [/videos/licences](#operation/getLicences))\n      schema:\n        oneOf:\n        - $ref: '#/components/schemas/VideoLicenceSet'\n        - type: array\n          items:\n            $ref: '#/components/schemas/VideoLicenceSet'\n      style: form\n      explode: false\n    skipCount:\n      name: skipCount\n      in: query\n      required: false\n      description: if you don't need the `total` in the response\n      schema:\n        type: string\n        enum:\n          - 'true'\n          - 'false'\n        default: 'false'\n    nsfw:\n      name: nsfw\n      in: query\n      required: false\n      description: whether to include nsfw videos, if any\n      schema:\n        type: string\n        enum:\n        - 'true'\n        - 'false'\n    isLocal:\n      name: isLocal\n      in: query\n      required: false\n      schema:\n        type: boolean\n      description: '**PeerTube \u003e= 4.0** Display only local or remote videos'\n    hasHLSFiles:\n      name: hasHLSFiles\n      in: query\n      required: false\n      schema:\n        type: boolean\n      description: '**PeerTube \u003e= 4.0** Display only videos that have HLS files'\n    hasWebtorrentFiles:\n      name: hasWebtorrentFiles\n      in: query\n      required: false\n      schema:\n        type: boolean\n      description: '**PeerTube \u003e= 4.0** Display only videos that have WebTorrent files'\n    privacyOneOf:\n      name: privacyOneOf\n      in: query\n      required: false\n      schema:\n        $ref: '#/components/schemas/VideoPrivacySet'\n      description: '**PeerTube \u003e= 4.0** Display only videos in this specific privacy/privacies'\n    include:\n      name: include\n      in: query\n      required: false\n      schema:\n        type: integer\n        enum:\n        - 0\n        - 1\n        - 2\n        - 4\n        - 8\n      description: \u003e\n        **PeerTube \u003e= 4.0** Include additional videos in results (can be combined using bitwise or operator)\n\n        - `0` NONE\n\n        - `1` NOT_PUBLISHED_STATE\n\n        - `2` BLACKLISTED\n\n        - `4` BLOCKED_OWNER\n\n        - `8` FILES\n    subscriptionsUris:\n      name: uris\n      in: query\n      required: true\n      description: list of uris to check if each is part of the user subscriptions\n      schema:\n        type: array\n        items:\n          type: string\n          format: uri\n    npmName:\n      name: npmName\n      in: path\n      required: true\n      description: name of the plugin/theme on npmjs.com or in its package.json\n      schema:\n        type: string\n        example: peertube-plugin-auth-ldap\n    jobType:\n      name: jobType\n      in: query\n      required: false\n      description: job type\n      schema:\n        type: string\n        enum:\n          - activitypub-follow\n          - activitypub-http-broadcast\n          - activitypub-http-fetcher\n          - activitypub-http-unicast\n          - email\n          - video-transcoding\n          - video-file-import\n          - video-import\n          - videos-views-stats\n          - activitypub-refresher\n          - video-redundancy\n          - video-live-ending\n    followState:\n      name: state\n      in: query\n      schema:\n        type: string\n        enum:\n          - pending\n          - accepted\n    actorType:\n      name: actorType\n      in: query\n      schema:\n        type: string\n        enum:\n          - Person\n          - Application\n          - Group\n          - Service\n          - Organization\n  securitySchemes:\n    OAuth2:\n      description: |\n        Authenticating via OAuth requires the following steps:\n        - Have an activated account\n        - [Generate] an access token for that account at `/api/v1/users/token`.\n        - Make requests with the *Authorization: Bearer \u003ctoken\\\u003e* header\n        - Profit, depending on the role assigned to the account\n\n        Note that the __access token is valid for 1 day__ and is given\n        along with a __refresh token valid for 2 weeks__.\n\n        [Generate]: https://docs.joinpeertube.org/api-rest-getting-started\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: /api/v1/users/token\n          scopes:\n            admin: Admin scope\n            moderator: Moderator scope\n            user: User scope\n  schemas:\n    # Resuable core properties\n    id:\n      type: integer\n      minimum: 1\n      example: 42\n    UUIDv4:\n      type: string\n      format: uuid\n      example: 9c9de5e8-0a1e-484a-b099-e80766180a6d\n      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'\n      minLength: 36\n      maxLength: 36\n    shortUUID:\n      type: string\n      description: translation of a uuid v4 with a bigger alphabet to have a shorter uuid\n      example: 2y84q2MQUMWPbiEcxNXMgC\n    username:\n      type: string\n      description: immutable name of the user, used to find or mention its actor\n      example: chocobozzz\n      pattern: '/^[a-z0-9._]+$/'\n      minLength: 1\n      maxLength: 50\n    usernameChannel:\n      type: string\n      description: immutable name of the channel, used to interact with its actor\n      example: framasoft_videos\n      pattern: '/^[a-zA-Z0-9\\\\-_.:]+$/'\n      minLength: 1\n      maxLength: 50\n    password:\n      type: string\n      format: password\n      minLength: 6\n      maxLength: 255\n\n    VideoCategorySet:\n      type: integer\n      description: category id of the video (see [/videos/categories](#operation/getCategories))\n      example: 15\n    VideoConstantNumber-Category:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoCategorySet'\n        label:\n          type: string\n          example: Science \u0026 Technology\n\n    VideoLicenceSet:\n      type: integer\n      description: licence id of the video (see [/videos/licences](#operation/getLicences))\n      example: 2\n    VideoConstantNumber-Licence:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoLicenceSet'\n        label:\n          type: string\n          example: Attribution - Share Alike\n\n    VideoLanguageSet:\n      type: string\n      description: language id of the video (see [/videos/languages](#operation/getLanguages))\n      example: en\n    VideoConstantString-Language:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoLanguageSet'\n        label:\n          type: string\n          example: English\n\n    VideoPlaylistPrivacySet:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n      description: Video playlist privacy policy (see [/video-playlists/privacies])\n    VideoPlaylistPrivacyConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoPlaylistPrivacySet'\n        label:\n          type: string\n\n    VideoPlaylistTypeSet:\n      type: integer\n      enum:\n        - 1\n        - 2\n      description: The video playlist type (Regular = `1`, Watch Later = `2`)\n    VideoPlaylistTypeConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoPlaylistTypeSet'\n        label:\n          type: string\n\n    VideoPrivacySet:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n        - 4\n      description: privacy id of the video (see [/videos/privacies](#operation/getPrivacyPolicies))\n    VideoPrivacyConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoPrivacySet'\n        label:\n          type: string\n\n    BlockStatus:\n      properties:\n        accounts:\n          type: object\n          additionalProperties:\n            x-additionalPropertiesName: account\n            type: object\n            properties:\n              blockedByServer:\n                type: boolean\n              blockedByUser:\n                type: boolean\n        hosts:\n          type: object\n          additionalProperties:\n            x-additionalPropertiesName: host\n            type: object\n            properties:\n              blockedByServer:\n                type: boolean\n              blockedByUser:\n                type: boolean\n\n    NSFWPolicy:\n      type: string\n      enum:\n        - display\n        - blur\n        - do_not_list\n\n    UserRole:\n      type: integer\n      enum:\n        - 0\n        - 1\n        - 2\n      description: 'The user role (Admin = `0`, Moderator = `1`, User = `2`)'\n      example: 2\n    UserAdminFlags:\n      type: integer\n      enum:\n        - 0\n        - 1\n      description: 'Admin flags for the user (None = `0`, Bypass video blocklist = `1`)'\n      example: 1\n\n    VideoStateConstant:\n      properties:\n        id:\n          type: integer\n          enum:\n            - 1\n            - 2\n            - 3\n          description: 'The video state (Published = `1`, to transcode = `2`, to import = `3`)'\n        label:\n          type: string\n\n    AbuseStateSet:\n      type: integer\n      enum:\n        - 1\n        - 2\n        - 3\n      description: 'The abuse state (Pending = `1`, Rejected = `2`, Accepted = `3`)'\n    AbuseStateConstant:\n      properties:\n        id:\n          $ref: '#/components/schemas/AbuseStateSet'\n        label:\n          type: string\n    AbusePredefinedReasons:\n      type: array\n      items:\n        type: string\n        enum:\n        - violentOrAbusive\n        - hatefulOrAbusive\n        - spamOrMisleading\n        - privacy\n        - rights\n        - serverRules\n        - thumbnails\n        - captions\n      example: [spamOrMisleading]\n\n    VideoResolutionSet:\n      type: integer\n      description: |\n        Video resolution (`0`, `240`, `360`, `720`, `1080`, `1440` or `2160`)\n\n        `0` is used as a special value for stillimage videos dedicated to audio, a.k.a. audio-only videos.\n      example: 240\n    VideoResolutionConstant:\n      description: resolutions and their labels for the video\n      properties:\n        id:\n          $ref: '#/components/schemas/VideoResolutionSet'\n        label:\n          type: string\n          example: 240p\n    VideoScheduledUpdate:\n      properties:\n        privacy:\n          $ref: '#/components/schemas/VideoPrivacySet'\n        updateAt:\n          type: string\n          format: date\n          description: When to update the video\n      required:\n        - updateAt\n    AccountSummary:\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n        displayName:\n          type: string\n        url:\n          type: string\n          format: url\n        host:\n          type: string\n          format: hostname\n        avatar:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ActorImage'\n    VideoChannelSummary:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        name:\n          type: string\n        displayName:\n          type: string\n        url:\n          type: string\n          format: url\n        host:\n          type: string\n          format: hostname\n        avatar:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ActorImage'\n    PlaylistElement:\n      properties:\n        position:\n          type: integer\n        startTimestamp:\n          type: integer\n          format: seconds\n        stopTimestamp:\n          type: integer\n          format: seconds\n        video:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Video'\n    VideoFile:\n      readOnly: true\n      properties:\n        magnetUri:\n          type: string\n          format: uri\n          description: magnet URI allowing to resolve the video via BitTorrent without a metainfo file\n          pattern: /magnet:\\?xt=urn:[a-z0-9]+:[a-z0-9]{32}/i\n        resolution:\n          $ref: '#/components/schemas/VideoResolutionConstant'\n        size:\n          type: integer\n          description: Video file size in bytes\n        torrentUrl:\n          type: string\n          description: Direct URL of the torrent file\n          format: url\n        torrentDownloadUrl:\n          type: string\n          description: URL endpoint that transfers the torrent file as an attachment (so that the browser opens a download dialog)\n          format: url\n        fileUrl:\n          type: string\n          description: Direct URL of the video\n          format: url\n        fileDownloadUrl:\n          type: string\n          description: URL endpoint that transfers the video file as an attachment (so that the browser opens a download dialog)\n          format: url\n        fps:\n          type: number\n          description: Frames per second of the video file\n        metadataUrl:\n          type: string\n          format: url\n          description: URL dereferencing the output of ffprobe on the file\n    VideoStreamingPlaylists:\n      allOf:\n        - type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            type:\n              type: integer\n              enum:\n                - 1\n              description: |\n                Playlist type:\n                - `1`: HLS\n        - $ref: '#/components/schemas/VideoStreamingPlaylists-HLS'\n    VideoStreamingPlaylists-HLS:\n      properties:\n        playlistUrl:\n          type: string\n          format: url\n        segmentsSha256Url:\n          type: string\n          format: url\n        files:\n          type: array\n          description: |\n            Video files associated to this playlist.\n\n            The difference with the root `files` property is that these files are fragmented, so they can be used in this streaming playlist (HLS, etc.)\n          items:\n            $ref: '#/components/schemas/VideoFile'\n        redundancies:\n          type: array\n          items:\n            type: object\n            properties:\n              baseUrl:\n                type: string\n                format: url\n    VideoInfo:\n      properties:\n        id:\n          $ref: '#/components/schemas/Video/properties/id'\n        uuid:\n          $ref: '#/components/schemas/Video/properties/uuid'\n        name:\n          $ref: '#/components/schemas/Video/properties/name'\n    Video:\n      properties:\n        id:\n          description: object id for the video\n          allOf:\n            - $ref: '#/components/schemas/id'\n        uuid:\n          description: universal identifier for the video, that can be used across instances\n          allOf:\n            - $ref: '#/components/schemas/UUIDv4'\n        shortUUID:\n          allOf:\n            - $ref: '#/components/schemas/shortUUID'\n        isLive:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n          example: 2017-10-01T10:52:46.396Z\n          description: time at which the video object was first drafted\n        publishedAt:\n          type: string\n          format: date-time\n          example: 2018-10-01T10:52:46.396Z\n          description: time at which the video was marked as ready for playback (with restrictions depending on `privacy`). Usually set after a `state` evolution.\n        updatedAt:\n          type: string\n          format: date-time\n          example: 2021-05-04T08:01:01.502Z\n          description: last time the video's metadata was modified\n        originallyPublishedAt:\n          type: string\n          format: date-time\n          example: 2010-10-01T10:52:46.396Z\n          description: used to represent a date of first publication, prior to the practical publication date of `publishedAt`\n        category:\n          allOf:\n            - $ref: '#/components/schemas/VideoConstantNumber-Category'\n          description: category in which the video is classified\n        licence:\n          allOf:\n            - $ref: '#/components/schemas/VideoConstantNumber-Licence'\n          description: licence under which the video is distributed\n        language:\n          allOf:\n            - $ref: '#/components/schemas/VideoConstantString-Language'\n          description: main language used in the video\n        privacy:\n          allOf:\n            - $ref: '#/components/schemas/VideoPrivacyConstant'\n          description: privacy policy used to distribute the video\n        description:\n          type: string\n          example: |\n            **[Want to help to translate this video?](https://weblate.framasoft.org/projects/what-is-peertube-video/)**\\r\\n\\r\\n\n            **Take back the control of your videos! [#JoinPeertube](https://joinpeertube.org)**\\r\\n*A decentralized video hosting network, based on fr...\n          minLength: 3\n          maxLength: 250\n          description: |\n            truncated description of the video, written in Markdown.\n            Resolve `descriptionPath` to get the full description of maximum `10000` characters.\n        duration:\n          type: integer\n          example: 1419\n          format: seconds\n          description: duration of the video in seconds\n        isLocal:\n          type: boolean\n        name:\n          type: string\n          description: title of the video\n          example: What is PeerTube?\n          minLength: 3\n          maxLength: 120\n        thumbnailPath:\n          type: string\n          example: /static/thumbnails/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg\n        previewPath:\n          type: string\n          example: /lazy-static/previews/a65bc12f-9383-462e-81ae-8207e8b434ee.jpg\n        embedPath:\n          type: string\n          example: /videos/embed/a65bc12f-9383-462e-81ae-8207e8b434ee\n        views:\n          type: integer\n          example: 1337\n        likes:\n          type: integer\n          example: 42\n        dislikes:\n          type: integer\n          example: 7\n        nsfw:\n          type: boolean\n        waitTranscoding:\n          type: boolean\n          nullable: true\n        state:\n          allOf:\n            - $ref: '#/components/schemas/VideoStateConstant'\n          description: represents the internal state of the video processing within the PeerTube instance\n        scheduledUpdate:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/VideoScheduledUpdate'\n        blacklisted:\n          nullable: true\n          type: boolean\n        blacklistedReason:\n          nullable: true\n          type: string\n        account:\n          $ref: '#/components/schemas/AccountSummary'\n        channel:\n          $ref: '#/components/schemas/VideoChannelSummary'\n        userHistory:\n          nullable: true\n          type: object\n          properties:\n            currentTime:\n              type: integer\n    VideoDetails:\n      allOf:\n        - $ref: '#/components/schemas/Video'\n        - type: object\n          properties:\n            viewers:\n              type: integer\n              description: If the video is a live, you have the amount of current viewers\n            descriptionPath:\n              type: string\n              example: /api/v1/videos/9c9de5e8-0a1e-484a-b099-e80766180a6d/description\n              description: path at which to get the full description of maximum `10000` characters\n            support:\n              type: string\n              description: A text tell the audience how to support the video creator\n              example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n              minLength: 3\n              maxLength: 1000\n            channel:\n              $ref: '#/components/schemas/VideoChannel'\n            account:\n              $ref: '#/components/schemas/Account'\n            tags:\n              example: [flowers, gardening]\n              type: array\n              minItems: 1\n              maxItems: 5\n              items:\n                type: string\n                minLength: 2\n                maxLength: 30\n            commentsEnabled:\n              type: boolean\n            downloadEnabled:\n              type: boolean\n            trackerUrls:\n              type: array\n              items:\n                type: string\n                format: url\n              example:\n                - https://peertube2.cpy.re/tracker/announce\n                - wss://peertube2.cpy.re/tracker/socket\n            files:\n              type: array\n              items:\n                $ref: '#/components/schemas/VideoFile'\n              description: |\n                WebTorrent/raw video files. If WebTorrent is disabled on the server:\n\n                - field will be empty\n                - video files will be found in `streamingPlaylists[].files` field\n            streamingPlaylists:\n              type: array\n              items:\n                $ref: '#/components/schemas/VideoStreamingPlaylists'\n              description: |\n                HLS playlists/manifest files. If HLS is disabled on the server:\n\n                - field will be empty\n                - video files will be found in `files` field\n    FileRedundancyInformation:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        fileUrl:\n          type: string\n          format: url\n        strategy:\n          type: string\n          enum:\n            - manual\n            - most-views\n            - trending\n            - recently-added\n        size:\n          type: integer\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        expiresOn:\n          type: string\n          format: date-time\n    VideoRedundancy:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        name:\n          type: string\n        url:\n          type: string\n          format: url\n        uuid:\n          $ref: '#/components/schemas/UUIDv4'\n        redundancies:\n          type: object\n          properties:\n            files:\n              type: array\n              items:\n                $ref: '#/components/schemas/FileRedundancyInformation'\n            streamingPlaylists:\n              type: array\n              items:\n                $ref: '#/components/schemas/FileRedundancyInformation'\n    VideoImportStateConstant:\n      properties:\n        id:\n          type: integer\n          enum:\n            - 1\n            - 2\n            - 3\n          description: 'The video import state (Pending = `1`, Success = `2`, Failed = `3`)'\n        label:\n          type: string\n          example: Pending\n    VideoCreateImport:\n      allOf:\n        - type: object\n          additionalProperties: false\n          oneOf:\n            - properties:\n                targetUrl:\n                  $ref: '#/components/schemas/VideoImport/properties/targetUrl'\n              required: [targetUrl]\n            - properties:\n                magnetUri:\n                  $ref: '#/components/schemas/VideoImport/properties/magnetUri'\n              required: [magnetUri]\n            - properties:\n                torrentfile:\n                  $ref: '#/components/schemas/VideoImport/properties/torrentfile'\n              required: [torrentfile]\n        - $ref: '#/components/schemas/VideoUploadRequestCommon'\n      required:\n        - channelId\n        - name\n    VideoImport:\n      properties:\n        id:\n          readOnly: true\n          allOf:\n            - $ref: '#/components/schemas/id'\n        targetUrl:\n          type: string\n          format: url\n          description: remote URL where to find the import's source video\n          example: https://framatube.org/videos/watch/9c9de5e8-0a1e-484a-b099-e80766180a6d\n        magnetUri:\n          type: string\n          format: uri\n          description: magnet URI allowing to resolve the import's source video\n          pattern: /magnet:\\?xt=urn:[a-z0-9]+:[a-z0-9]{32}/i\n        torrentfile:\n          writeOnly: true\n          type: string\n          format: binary\n          description: Torrent file containing only the video file\n        torrentName:\n          readOnly: true\n          type: string\n        state:\n          readOnly: true\n          allOf:\n            - $ref: '#/components/schemas/VideoImportStateConstant'\n        error:\n          readOnly: true\n          type: string\n        createdAt:\n          readOnly: true\n          type: string\n          format: date-time\n        updatedAt:\n          readOnly: true\n          type: string\n          format: date-time\n        video:\n          readOnly: true\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/Video'\n    VideoImportsList:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/VideoImport'\n    Abuse:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        reason:\n          type: string\n          example: The video is a spam\n          minLength: 2\n          maxLength: 3000\n        predefinedReasons:\n          $ref: '#/components/schemas/AbusePredefinedReasons'\n        reporterAccount:\n          $ref: '#/components/schemas/Account'\n        state:\n          $ref: '#/components/schemas/AbuseStateConstant'\n        moderationComment:\n          type: string\n          example: Decided to ban the server since it spams us regularly\n          minLength: 2\n          maxLength: 3000\n        video:\n          $ref: '#/components/schemas/VideoInfo'\n        createdAt:\n          type: string\n          format: date-time\n    AbuseMessage:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        message:\n          type: string\n          minLength: 2\n          maxLength: 3000\n        byModerator:\n          type: boolean\n        createdAt:\n          type: string\n          format: date-time\n        account:\n          $ref: '#/components/schemas/AccountSummary'\n    VideoBlacklist:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        videoId:\n          $ref: '#/components/schemas/Video/properties/id'\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        name:\n          type: string\n          minLength: 3\n          maxLength: 120\n        uuid:\n          $ref: '#/components/schemas/UUIDv4'\n        description:\n          type: string\n          minLength: 3\n          maxLength: 10000\n        duration:\n          type: integer\n        views:\n          type: integer\n        likes:\n          type: integer\n        dislikes:\n          type: integer\n        nsfw:\n          type: boolean\n    VideoPlaylist:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        uuid:\n          $ref: '#/components/schemas/UUIDv4'\n        shortUUID:\n          allOf:\n            - $ref: '#/components/schemas/shortUUID'\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        description:\n          type: string\n          minLength: 3\n          maxLength: 1000\n        displayName:\n          type: string\n          minLength: 1\n          maxLength: 120\n        isLocal:\n          type: boolean\n        videoLength:\n          type: integer\n          minimum: 0\n        thumbnailPath:\n          type: string\n        privacy:\n          $ref: '#/components/schemas/VideoPlaylistPrivacyConstant'\n        type:\n          $ref: '#/components/schemas/VideoPlaylistTypeConstant'\n        ownerAccount:\n          $ref: '#/components/schemas/AccountSummary'\n        videoChannel:\n          $ref: '#/components/schemas/VideoChannelSummary'\n    VideoComment:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        url:\n          type: string\n          format: url\n        text:\n          type: string\n          format: html\n          description: Text of the comment\n          minLength: 1\n          example: This video is wonderful!\n        threadId:\n          $ref: '#/components/schemas/id'\n        inReplyToCommentId:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/id'\n        videoId:\n          $ref: '#/components/schemas/Video/properties/id'\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        deletedAt:\n          nullable: true\n          type: string\n          format: date-time\n          default: null\n        isDeleted:\n          type: boolean\n          default: false\n        totalRepliesFromVideoAuthor:\n          type: integer\n          minimum: 0\n        totalReplies:\n          type: integer\n          minimum: 0\n        account:\n          $ref: '#/components/schemas/Account'\n    VideoCommentThreadTree:\n      properties:\n        comment:\n          $ref: '#/components/schemas/VideoComment'\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/VideoCommentThreadTree'\n    VideoCaption:\n      properties:\n        language:\n          $ref: '#/components/schemas/VideoConstantString-Language'\n        captionPath:\n          type: string\n    ActorImage:\n      properties:\n        path:\n          type: string\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    ActorInfo:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        name:\n          type: string\n        displayName:\n          type: string\n        host:\n          type: string\n          format: hostname\n        avatar:\n          nullable: true\n          type: object\n          properties:\n            path:\n              type: string\n    Actor:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        url:\n          type: string\n          format: url\n        name:\n          description: immutable name of the actor, used to find or mention it\n          allOf:\n            - $ref: '#/components/schemas/username'\n        host:\n          type: string\n          format: hostname\n          description: server on which the actor is resident\n        hostRedundancyAllowed:\n          type: boolean\n          description: whether this actor's host allows redundancy of its videos\n        followingCount:\n          type: integer\n          minimum: 0\n          description: number of actors subscribed to by this actor, as seen by this instance\n        followersCount:\n          type: integer\n          minimum: 0\n          description: number of followers of this actor, as seen by this instance\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n        avatar:\n          $ref: '#/components/schemas/ActorImage'\n    Account:\n      allOf:\n        - $ref: '#/components/schemas/Actor'\n        - properties:\n            userId:\n              description: object id for the user tied to this account\n              allOf:\n                - $ref: '#/components/schemas/User/properties/id'\n            displayName:\n              type: string\n              description: editable name of the account, displayed in its representations\n              minLength: 3\n              maxLength: 120\n            description:\n              type: string\n              description: text or bio displayed on the account's profile\n    UserWatchingVideo:\n      properties:\n        currentTime:\n          type: integer\n          format: seconds\n          description: timestamp within the video, in seconds\n          example: 5\n    ServerConfig:\n      properties:\n        instance:\n          type: object\n          properties:\n            name:\n              type: string\n            shortDescription:\n              type: string\n            defaultClientRoute:\n              type: string\n            isNSFW:\n              type: boolean\n            defaultNSFWPolicy:\n              type: string\n            customizations:\n              type: object\n              properties:\n                javascript:\n                  type: string\n                css:\n                  type: string\n        search:\n          type: object\n          properties:\n            remoteUri:\n              type: object\n              properties:\n                users:\n                  type: boolean\n                anonymous:\n                  type: boolean\n        plugin:\n          type: object\n          properties:\n            registered:\n              type: array\n              items:\n                type: string\n        theme:\n          type: object\n          properties:\n            registered:\n              type: array\n              items:\n                type: string\n        email:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        contactForm:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        serverVersion:\n          type: string\n        serverCommit:\n          type: string\n        signup:\n          type: object\n          properties:\n            allowed:\n              type: boolean\n            allowedForCurrentIP:\n              type: boolean\n            requiresEmailVerification:\n              type: boolean\n        transcoding:\n          type: object\n          properties:\n            hls:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n            webtorrent:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n            enabledResolutions:\n              type: array\n              items:\n                $ref: '#/components/schemas/VideoResolutionSet'\n        import:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                http:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                torrent:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        autoBlacklist:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                ofUsers:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        avatar:\n          type: object\n          properties:\n            file:\n              type: object\n              properties:\n                size:\n                  type: object\n                  properties:\n                    max:\n                      type: integer\n            extensions:\n              type: array\n              items:\n                type: string\n        video:\n          type: object\n          properties:\n            image:\n              type: object\n              properties:\n                extensions:\n                  type: array\n                  items:\n                    type: string\n                size:\n                  type: object\n                  properties:\n                    max:\n                      type: integer\n            file:\n              type: object\n              properties:\n                extensions:\n                  type: array\n                  items:\n                    type: string\n        videoCaption:\n          type: object\n          properties:\n            file:\n              type: object\n              properties:\n                size:\n                  type: object\n                  properties:\n                    max:\n                      type: integer\n                extensions:\n                  type: array\n                  items:\n                    type: string\n        user:\n          type: object\n          properties:\n            videoQuota:\n              type: integer\n              example: 16810141515\n            videoQuotaDaily:\n              type: integer\n              example: 1681014151\n        trending:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                intervalDays:\n                  type: integer\n        tracker:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        followings:\n          type: object\n          properties:\n            instance:\n              type: object\n              properties:\n                autoFollowIndex:\n                  type: object\n                  properties:\n                    indexUrl:\n                      type: string\n                      format: url\n        homepage:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n\n    ServerConfigAbout:\n      properties:\n        instance:\n          type: object\n          properties:\n            name:\n              type: string\n            shortDescription:\n              type: string\n            description:\n              type: string\n            terms:\n              type: string\n    ServerConfigCustom:\n      properties:\n        instance:\n          type: object\n          properties:\n            name:\n              type: string\n            shortDescription:\n              type: string\n            description:\n              type: string\n            terms:\n              type: string\n            defaultClientRoute:\n              type: string\n            isNSFW:\n              type: boolean\n            defaultNSFWPolicy:\n              type: string\n            customizations:\n              type: object\n              properties:\n                javascript:\n                  type: string\n                css:\n                  type: string\n        theme:\n          type: object\n          properties:\n            default:\n              type: string\n        services:\n          type: object\n          properties:\n            twitter:\n              type: object\n              properties:\n                username:\n                  type: string\n                whitelisted:\n                  type: boolean\n        cache:\n          type: object\n          properties:\n            previews:\n              type: object\n              properties:\n                size:\n                  type: integer\n            captions:\n              type: object\n              properties:\n                size:\n                  type: integer\n        signup:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n            limit:\n              type: integer\n            requiresEmailVerification:\n              type: boolean\n        admin:\n          type: object\n          properties:\n            email:\n              type: string\n              format: email\n        contactForm:\n          type: object\n          properties:\n            enabled:\n              type: boolean\n        user:\n          type: object\n          description: Settings that apply to new users, if registration is enabled\n          properties:\n            videoQuota:\n              type: integer\n              example: 16810141515\n            videoQuotaDaily:\n              type: integer\n              example: 1681014151\n        transcoding:\n          type: object\n          description: Settings pertaining to transcoding jobs\n          properties:\n            enabled:\n              type: boolean\n            allowAdditionalExtensions:\n              type: boolean\n              description: Allow your users to upload .mkv, .mov, .avi, .wmv, .flv, .f4v, .3g2, .3gp, .mts, m2ts, .mxf, .nut videos\n            allowAudioFiles:\n              type: boolean\n              description: If a user uploads an audio file, PeerTube will create a video by merging the preview file and the audio file\n            threads:\n              type: integer\n              description: Amount of threads used by ffmpeg for 1 transcoding job\n            concurrency:\n              type: number\n              description: Amount of transcoding jobs to execute in parallel\n            profile:\n              type: string\n              enum:\n                - default\n              description: |\n                New profiles can be added by plugins ; available in core PeerTube: 'default'.\n            resolutions:\n              type: object\n              description: Resolutions to transcode _new videos_ to\n              properties:\n                0p:\n                  type: boolean\n                144p:\n                  type: boolean\n                240p:\n                  type: boolean\n                360p:\n                  type: boolean\n                480p:\n                  type: boolean\n                720p:\n                  type: boolean\n                1080p:\n                  type: boolean\n                1440p:\n                  type: boolean\n                2160p:\n                  type: boolean\n            webtorrent:\n              type: object\n              description: WebTorrent-specific settings\n              properties:\n                enabled:\n                  type: boolean\n            hls:\n              type: object\n              description: HLS-specific settings\n              properties:\n                enabled:\n                  type: boolean\n        import:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                http:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n                torrent:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        autoBlacklist:\n          type: object\n          properties:\n            videos:\n              type: object\n              properties:\n                ofUsers:\n                  type: object\n                  properties:\n                    enabled:\n                      type: boolean\n        followers:\n          type: object\n          properties:\n            instance:\n              type: object\n              properties:\n                enabled:\n                  type: boolean\n                manualApproval:\n                  type: boolean\n\n    CustomHomepage:\n      properties:\n        content:\n          type: string\n\n    Follow:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        follower:\n          $ref: '#/components/schemas/Actor'\n        following:\n          $ref: '#/components/schemas/Actor'\n        score:\n          type: number\n          description: score reflecting the reachability of the actor, with steps of `10` and a base score of `1000`.\n        state:\n          type: string\n          enum:\n            - pending\n            - accepted\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n\n    PredefinedAbuseReasons:\n      description: Reason categories that help triage reports\n      type: array\n      maxItems: 8\n      items:\n        type: string\n        enum:\n        - violentOrAbusive\n        - hatefulOrAbusive\n        - spamOrMisleading\n        - privacy\n        - rights\n        - serverRules\n        - thumbnails\n        - captions\n\n    Job:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        state:\n          type: string\n          enum:\n            - active\n            - completed\n            - failed\n            - waiting\n            - delayed\n        type:\n          type: string\n          enum:\n            - activitypub-http-unicast\n            - activitypub-http-broadcast\n            - activitypub-http-fetcher\n            - activitypub-follow\n            - video-file-import\n            - video-transcoding\n            - email\n            - video-import\n            - videos-views-stats\n            - activitypub-refresher\n            - video-redundancy\n        data:\n          type: object\n          additionalProperties: true\n        error:\n          type: object\n          additionalProperties: true\n        createdAt:\n          type: string\n          format: date-time\n        finishedOn:\n          type: string\n          format: date-time\n        processedOn:\n          type: string\n          format: date-time\n    AddUserResponse:\n      properties:\n        user:\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            account:\n              type: object\n              properties:\n                id:\n                  $ref: '#/components/schemas/id'\n    VideoUploadRequestCommon:\n      properties:\n        name:\n          description: Video name\n          type: string\n          example: What is PeerTube?\n          minLength: 3\n          maxLength: 120\n        channelId:\n          description: Channel id that will contain this video\n          type: integer\n          example: 3\n          minimum: 1\n        privacy:\n          $ref: '#/components/schemas/VideoPrivacySet'\n        category:\n          $ref: '#/components/schemas/VideoCategorySet'\n        licence:\n          $ref: '#/components/schemas/VideoLicenceSet'\n        language:\n          $ref: '#/components/schemas/VideoLanguageSet'\n        description:\n          description: Video description\n          type: string\n          example: |\n            **[Want to help to translate this video?](https://weblate.framasoft.org/projects/what-is-peertube-video/)**\\r\\n\\r\\n**Take back the control of your videos! [#JoinPeertube](https://joinpeertube.org)**\n        waitTranscoding:\n          description: Whether or not we wait transcoding before publish the video\n          type: boolean\n        support:\n          description: A text tell the audience how to support the video creator\n          example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n          type: string\n        nsfw:\n          description: Whether or not this video contains sensitive content\n          type: boolean\n        tags:\n          description: Video tags (maximum 5 tags each between 2 and 30 characters)\n          type: array\n          minItems: 1\n          maxItems: 5\n          uniqueItems: true\n          example:\n            - framasoft\n            - peertube\n          items:\n            type: string\n            minLength: 2\n            maxLength: 30\n        commentsEnabled:\n          description: Enable or disable comments for this video\n          type: boolean\n        downloadEnabled:\n          description: Enable or disable downloading for this video\n          type: boolean\n        originallyPublishedAt:\n          description: Date when the content was originally published\n          type: string\n          format: date-time\n        scheduleUpdate:\n          $ref: '#/components/schemas/VideoScheduledUpdate'\n        thumbnailfile:\n          description: Video thumbnail file\n          type: string\n          format: binary\n        previewfile:\n          description: Video preview file\n          type: string\n          format: binary\n      required:\n        - channelId\n        - name\n    VideoUploadRequestLegacy:\n      allOf:\n        - $ref: '#/components/schemas/VideoUploadRequestCommon'\n        - type: object\n          required:\n            - videofile\n          properties:\n            videofile:\n              description: Video file\n              type: string\n              format: binary\n    VideoUploadRequestResumable:\n      allOf:\n        - $ref: '#/components/schemas/VideoUploadRequestCommon'\n        - type: object\n          required:\n            - filename\n          properties:\n            filename:\n              description: Video filename including extension\n              type: string\n              format: filename\n              example: what_is_peertube.mp4\n            thumbnailfile:\n              description: Video thumbnail file\n              type: string\n              format: binary\n            previewfile:\n              description: Video preview file\n              type: string\n              format: binary\n    VideoUploadResponse:\n      properties:\n        video:\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/Video/properties/id'\n            uuid:\n              $ref: '#/components/schemas/Video/properties/uuid'\n            shortUUID:\n              $ref: '#/components/schemas/Video/properties/shortUUID'\n    CommentThreadResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/VideoComment'\n    CommentThreadPostResponse:\n      properties:\n        comment:\n          $ref: '#/components/schemas/VideoComment'\n    VideoListResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Video'\n    User:\n      properties:\n        account:\n          $ref: '#/components/schemas/Account'\n        autoPlayNextVideo:\n          type: boolean\n          description: Automatically start playing the upcoming video after the currently playing video\n        autoPlayNextVideoPlaylist:\n          type: boolean\n          description: Automatically start playing the video on the playlist after the currently playing video\n        autoPlayVideo:\n          type: boolean\n          description: Automatically start playing the video on the watch page\n        blocked:\n          type: boolean\n        blockedReason:\n          type: string\n        createdAt:\n          type: string\n        email:\n          type: string\n          format: email\n          description: The user email\n        emailVerified:\n          type: boolean\n          description: Has the user confirmed their email address?\n        id:\n          allOf:\n            - $ref: '#/components/schemas/id'\n          readOnly: true\n        pluginAuth:\n          type: string\n          description: Auth plugin to use to authenticate the user\n        lastLoginDate:\n          type: string\n          format: date-time\n        noInstanceConfigWarningModal:\n          type: boolean\n        noAccountSetupWarningModal:\n          type: boolean\n        noWelcomeModal:\n          type: boolean\n        nsfwPolicy:\n          $ref: '#/components/schemas/NSFWPolicy'\n        role:\n          $ref: '#/components/schemas/UserRole'\n        roleLabel:\n          type: string\n          enum:\n            - User\n            - Moderator\n            - Administrator\n        theme:\n          type: string\n          description: Theme enabled by this user\n        username:\n          $ref: '#/components/schemas/username'\n        videoChannels:\n          type: array\n          items:\n            $ref: '#/components/schemas/VideoChannel'\n        videoQuota:\n          type: integer\n          description: The user video quota in bytes\n          example: -1\n        videoQuotaDaily:\n          type: integer\n          description: The user daily video quota in bytes\n          example: -1\n        p2pEnabled:\n          type: boolean\n          description: Enable P2P in the player\n    UserWithStats:\n      allOf:\n        - $ref: '#/components/schemas/User'\n        - properties:\n            # optionally present fields: they require WITH_STATS scope\n            videosCount:\n              type: integer\n              description: Count of videos published\n            abusesCount:\n              type: integer\n              description: Count of reports/abuses of which the user is a target\n            abusesAcceptedCount:\n              type: integer\n              description: Count of reports/abuses created by the user and accepted/acted upon by the moderation team\n            abusesCreatedCount:\n              type: integer\n              description: Count of reports/abuses created by the user\n            videoCommentsCount:\n              type: integer\n              description: Count of comments published\n    AddUser:\n      properties:\n        username:\n          $ref: '#/components/schemas/username'\n        password:\n          $ref: '#/components/schemas/password'\n        email:\n          type: string\n          format: email\n          description: The user email\n        videoQuota:\n          type: integer\n          description: The user video quota in bytes\n          example: -1\n        videoQuotaDaily:\n          type: integer\n          description: The user daily video quota in bytes\n          example: -1\n        channelName:\n          $ref: '#/components/schemas/usernameChannel'\n        role:\n          $ref: '#/components/schemas/UserRole'\n        adminFlags:\n          $ref: '#/components/schemas/UserAdminFlags'\n      required:\n        - username\n        - password\n        - email\n        - videoQuota\n        - videoQuotaDaily\n        - role\n    UpdateUser:\n      properties:\n        email:\n          description: The updated email of the user\n          allOf:\n            - $ref: '#/components/schemas/User/properties/email'\n        emailVerified:\n          type: boolean\n          description: Set the email as verified\n        videoQuota:\n          type: integer\n          description: The updated video quota of the user in bytes\n        videoQuotaDaily:\n          type: integer\n          description: The updated daily video quota of the user in bytes\n        pluginAuth:\n          type: string\n          nullable: true\n          description: The auth plugin to use to authenticate the user\n          example: 'peertube-plugin-auth-saml2'\n        role:\n          $ref: '#/components/schemas/UserRole'\n        adminFlags:\n          $ref: '#/components/schemas/UserAdminFlags'\n        password:\n          $ref: '#/components/schemas/password'\n    UpdateMe:\n      # see shared/models/users/user-update-me.model.ts:\n      properties:\n        password:\n          $ref: '#/components/schemas/password'\n        currentPassword:\n          $ref: '#/components/schemas/password'\n        email:\n          description: new email used for login and service communications\n          allOf:\n            - $ref: '#/components/schemas/User/properties/email'\n        displayName:\n          type: string\n          description: new name of the user in its representations\n          minLength: 3\n          maxLength: 120\n        displayNSFW:\n          type: string\n          description: new NSFW display policy\n          enum:\n            - 'true'\n            - 'false'\n            - both\n        p2pEnabled:\n          type: boolean\n          description: whether to enable P2P in the player or not\n        autoPlayVideo:\n          type: boolean\n          description: new preference regarding playing videos automatically\n        autoPlayNextVideo:\n          type: boolean\n          description: new preference regarding playing following videos automatically\n        autoPlayNextVideoPlaylist:\n          type: boolean\n          description: new preference regarding playing following playlist videos automatically\n        videosHistoryEnabled:\n          type: boolean\n          description: whether to keep track of watched history or not\n        videoLanguages:\n          type: array\n          items:\n            type: string\n          description: list of languages to filter videos down to\n        theme:\n          type: string\n        noInstanceConfigWarningModal:\n          type: boolean\n        noAccountSetupWarningModal:\n          type: boolean\n        noWelcomeModal:\n          type: boolean\n    GetMeVideoRating:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        rating:\n          type: string\n          enum:\n            - like\n            - dislike\n            - none\n          description: Rating of the video\n      required:\n        - id\n        - rating\n    VideoRating:\n      properties:\n        video:\n          $ref: '#/components/schemas/Video'\n        rating:\n          type: string\n          enum:\n            - like\n            - dislike\n            - none\n          description: Rating of the video\n      required:\n        - video\n        - rating\n    RegisterUser:\n      properties:\n        username:\n          description: immutable name of the user, used to find or mention its actor\n          allOf:\n            - $ref: '#/components/schemas/username'\n        password:\n          $ref: '#/components/schemas/password'\n        email:\n          type: string\n          format: email\n          description: email of the user, used for login or service communications\n        displayName:\n          type: string\n          description: editable name of the user, displayed in its representations\n          minLength: 1\n          maxLength: 120\n        channel:\n          type: object\n          description: channel base information used to create the first channel of the user\n          properties:\n            name:\n              $ref: '#/components/schemas/usernameChannel'\n            displayName:\n              $ref: '#/components/schemas/VideoChannel/properties/displayName'\n      required:\n        - username\n        - password\n        - email\n\n    OAuthClient:\n      properties:\n        client_id:\n          type: string\n          pattern: /^[a-z0-9]$/\n          maxLength: 32\n          minLength: 32\n          example: v1ikx5hnfop4mdpnci8nsqh93c45rldf\n        client_secret:\n          type: string\n          pattern: /^[a-zA-Z0-9]$/\n          maxLength: 32\n          minLength: 32\n          example: AjWiOapPltI6EnsWQwlFarRtLh4u8tDt\n    OAuthToken-password:\n      allOf:\n        - $ref: '#/components/schemas/OAuthClient'\n        - type: object\n          properties:\n            grant_type:\n              type: string\n              enum:\n                - password\n                - refresh_token\n              default: password\n            username:\n              $ref: '#/components/schemas/User/properties/username'\n            password:\n              $ref: '#/components/schemas/password'\n      required:\n        - client_id\n        - client_secret\n        - grant_type\n        - username\n        - password\n    OAuthToken-refresh_token:\n      allOf:\n        - $ref: '#/components/schemas/OAuthClient'\n        - type: object\n          properties:\n            grant_type:\n              type: string\n              enum:\n                - password\n                - refresh_token\n              default: password\n            refresh_token:\n              type: string\n              example: 2e0d675df9fc96d2e4ec8a3ebbbf45eca9137bb7\n      required:\n        - client_id\n        - client_secret\n        - grant_type\n        - refresh_token\n\n    VideoChannel:\n      properties:\n        # GET/POST/PUT properties\n        displayName:\n          type: string\n          description: editable name of the channel, displayed in its representations\n          example: Videos of Framasoft\n          minLength: 1\n          maxLength: 120\n        description:\n          type: string\n          example: Videos made with \u003c3 by Framasoft\n          minLength: 3\n          maxLength: 1000\n        support:\n          type: string\n          description: text shown by default on all videos of this channel, to tell the audience how to support it\n          example: Please support our work on https://soutenir.framasoft.org/en/ \u003c3\n          minLength: 3\n          maxLength: 1000\n        # GET-only properties\n        id:\n          readOnly: true\n          allOf:\n            - $ref: '#/components/schemas/id'\n        isLocal:\n          readOnly: true\n          type: boolean\n        updatedAt:\n          readOnly: true\n          type: string\n          format: date-time\n        ownerAccount:\n          readOnly: true\n          nullable: true\n          type: object\n          properties:\n            id:\n              type: integer\n            uuid:\n              $ref: '#/components/schemas/UUIDv4'\n    VideoChannelCreate:\n      allOf:\n        - $ref: '#/components/schemas/VideoChannel'\n        - properties:\n            name:\n              description: username of the channel to create\n              allOf:\n                - $ref: '#/components/schemas/usernameChannel'\n      required:\n        - name\n        - displayName\n    VideoChannelUpdate:\n      allOf:\n        - $ref: '#/components/schemas/VideoChannel'\n        - properties:\n            bulkVideosSupportUpdate:\n              type: boolean\n              description: Update the support field for all videos of this channel\n    VideoChannelList:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          items:\n            allOf:\n              - $ref: '#/components/schemas/VideoChannel'\n              - $ref: '#/components/schemas/Actor'\n\n    MRSSPeerLink:\n      type: object\n      xml:\n        name: 'media:peerLink'\n      properties:\n        href:\n          type: string\n          xml:\n            attribute: true\n        type:\n          type: string\n          enum:\n            - application/x-bittorrent\n          xml:\n            attribute: true\n    MRSSGroupContent:\n      type: object\n      xml:\n        name: 'media:content'\n      properties:\n        url:\n          type: string\n          format: url\n          xml:\n            attribute: true\n        fileSize:\n          type: integer\n          xml:\n            attribute: true\n        type:\n          type: string\n          xml:\n            attribute: true\n        framerate:\n          type: integer\n          xml:\n            attribute: true\n        duration:\n          type: integer\n          xml:\n            attribute: true\n        height:\n          type: integer\n          xml:\n            attribute: true\n        lang:\n          type: string\n          xml:\n            attribute: true\n    VideoCommentsForXML:\n      type: array\n      xml:\n        wrapped: true\n        name: 'channel'\n      items:\n        type: object\n        xml:\n          name: 'item'\n        properties:\n          link:\n            type: string\n            format: url\n          guid:\n            type: string\n          pubDate:\n            type: string\n            format: date-time\n          'content:encoded':\n            type: string\n          'dc:creator':\n            type: string\n    VideosForXML:\n      type: array\n      xml:\n        wrapped: true\n        name: 'channel'\n      items:\n        type: object\n        xml:\n          name: 'item'\n        properties:\n          link:\n            type: string\n            format: url\n            description: video watch page URL\n          guid:\n            type: string\n            description: video canonical URL\n          pubDate:\n            type: string\n            format: date-time\n            description: video publication date\n          description:\n            type: string\n            description: video description\n          'content:encoded':\n            type: string\n            description: video description\n          'dc:creator':\n            type: string\n            description: publisher user name\n          'media:category':\n            type: integer\n            description: video category (MRSS)\n          'media:community':\n            type: object\n            description: see [media:community](https://www.rssboard.org/media-rss#media-community) (MRSS)\n            properties:\n              'media:statistics':\n                type: object\n                properties:\n                  views:\n                    type: integer\n                    xml:\n                      attribute: true\n          'media:embed':\n            type: object\n            properties:\n              url:\n                type: string\n                format: url\n                description: video embed path, relative to the canonical URL domain (MRSS)\n                xml:\n                  attribute: true\n          'media:player':\n            type: object\n            properties:\n              url:\n                type: string\n                format: url\n                description: video watch path, relative to the canonical URL domain (MRSS)\n                xml:\n                  attribute: true\n          'media:thumbnail':\n            type: object\n            properties:\n              url:\n                type: string\n                format: url\n                xml:\n                  attribute: true\n              height:\n                type: integer\n                xml:\n                  attribute: true\n              width:\n                type: integer\n                xml:\n                  attribute: true\n          'media:title':\n            type: string\n            description: see [media:title](https://www.rssboard.org/media-rss#media-title) (MRSS). We only use `plain` titles.\n          'media:description':\n            type: string\n          'media:rating':\n            type: string\n            enum:\n              - nonadult\n              - adult\n            description: see [media:rating](https://www.rssboard.org/media-rss#media-rating) (MRSS)\n          'enclosure':\n            type: object\n            description: main streamable file for the video\n            properties:\n              url:\n                type: string\n                format: url\n                xml:\n                  attribute: true\n              type:\n                type: string\n                enum:\n                  - application/x-bittorrent\n                xml:\n                  attribute: true\n              length:\n                type: integer\n                xml:\n                  attribute: true\n          'media:group':\n            type: array\n            description: list of streamable files for the video. see [media:peerLink](https://www.rssboard.org/media-rss#media-peerlink) and [media:content](https://www.rssboard.org/media-rss#media-content) or  (MRSS)\n            items:\n              anyOf:\n                - $ref: '#/components/schemas/MRSSPeerLink'\n                - $ref: '#/components/schemas/MRSSGroupContent'\n    NotificationSettingValue:\n      type: integer\n      description: \u003e\n        Notification type\n\n        - `0` NONE\n\n        - `1` WEB\n\n        - `2` EMAIL\n      enum:\n        - 0\n        - 1\n        - 2\n    Notification:\n      properties:\n        id:\n          $ref: '#/components/schemas/id'\n        type:\n          type: integer\n          description: \u003e\n            Notification type, following the `UserNotificationType` enum:\n\n            - `1` NEW_VIDEO_FROM_SUBSCRIPTION\n\n            - `2` NEW_COMMENT_ON_MY_VIDEO\n\n            - `3` NEW_ABUSE_FOR_MODERATORS\n\n            - `4` BLACKLIST_ON_MY_VIDEO\n\n            - `5` UNBLACKLIST_ON_MY_VIDEO\n\n            - `6` MY_VIDEO_PUBLISHED\n\n            - `7` MY_VIDEO_IMPORT_SUCCESS\n\n            - `8` MY_VIDEO_IMPORT_ERROR\n\n            - `9` NEW_USER_REGISTRATION\n\n            - `10` NEW_FOLLOW\n\n            - `11` COMMENT_MENTION\n\n            - `12` VIDEO_AUTO_BLACKLIST_FOR_MODERATORS\n\n            - `13` NEW_INSTANCE_FOLLOWER\n\n            - `14` AUTO_INSTANCE_FOLLOWING\n\n            - `15` ABUSE_STATE_CHANGE\n\n            - `16` ABUSE_NEW_MESSAGE\n\n            - `17` NEW_PLUGIN_VERSION\n\n            - `18` NEW_PEERTUBE_VERSION\n        read:\n          type: boolean\n        video:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/VideoInfo'\n            - type: object\n              properties:\n                channel:\n                  $ref: '#/components/schemas/ActorInfo'\n        videoImport:\n          nullable: true\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            video:\n              nullable: true\n              $ref: '#/components/schemas/VideoInfo'\n            torrentName:\n              type: string\n              nullable: true\n            magnetUri:\n              $ref: '#/components/schemas/VideoImport/properties/magnetUri'\n            targetUri:\n              type: string\n              format: uri\n              nullable: true\n        comment:\n          nullable: true\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            threadId:\n              type: integer\n            video:\n              $ref: '#/components/schemas/VideoInfo'\n            account:\n              $ref: '#/components/schemas/ActorInfo'\n        videoAbuse:\n          nullable: true\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            video:\n              allOf:\n                - $ref: '#/components/schemas/VideoInfo'\n        videoBlacklist:\n          nullable: true\n          type: object\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            video:\n              allOf:\n                - $ref: '#/components/schemas/VideoInfo'\n        account:\n          nullable: true\n          allOf:\n            - $ref: '#/components/schemas/ActorInfo'\n        actorFollow:\n          type: object\n          nullable: true\n          properties:\n            id:\n              $ref: '#/components/schemas/id'\n            follower:\n              $ref: '#/components/schemas/ActorInfo'\n            state:\n              type: string\n              enum:\n                - pending\n                - accepted\n            following:\n              type: object\n              properties:\n                type:\n                  type: string\n                  enum:\n                    - account\n                    - channel\n                    - instance\n                name:\n                  type: string\n                displayName:\n                  type: string\n                host:\n                  type: string\n                  format: hostname\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    NotificationListResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Notification'\n    Plugin:\n      properties:\n        name:\n          type: string\n          example: peertube-plugin-auth-ldap\n        type:\n          type: integer\n          description: \u003e\n            - `1`: PLUGIN\n\n            - `2`: THEME\n          enum:\n            - 1\n            - 2\n        latestVersion:\n          type: string\n          example: 0.0.3\n        version:\n          type: string\n          example: 0.0.1\n        enabled:\n          type: boolean\n        uninstalled:\n          type: boolean\n        peertubeEngine:\n          type: string\n          example: 2.2.0\n        description:\n          type: string\n        homepage:\n          type: string\n          format: url\n          example: https://framagit.org/framasoft/peertube/official-plugins/tree/master/peertube-plugin-auth-ldap\n        settings:\n          type: object\n          additionalProperties: true\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n    PluginResponse:\n      properties:\n        total:\n          type: integer\n          example: 1\n        data:\n          type: array\n          maxItems: 100\n          items:\n            $ref: '#/components/schemas/Plugin'\n\n    LiveVideoUpdate:\n      properties:\n        saveReplay:\n          type: boolean\n        permanentLive:\n          description: User can stream multiple times in a permanent live\n          type: boolean\n\n    LiveVideoResponse:\n      properties:\n        rtmpUrl:\n          type: string\n        rtmpsUrl:\n          type: string\n        streamKey:\n          type: string\n          description: RTMP stream key to use to stream into this live video\n        saveReplay:\n          type: boolean\n        permanentLive:\n          description: User can stream multiple times in a permanent live\n          type: boolean\n\n\n\n  callbacks:\n    searchIndex:\n      'https://search.example.org/api/v1/search/videos':\n        post:\n          summary: third-party search index MAY be used instead of the local index, if enabled by the instance admin. see `searchTarget`\n          responses:\n            '200':\n              description: successful operation\n              content:\n                application/json:\n                  schema:\n                    $ref: '#/components/schemas/VideoListResponse'\n"
		}
	},
	"Error": "parse: parse spec: paths: /video-channels: post: operation \"addVideoChannel\": responses: 204: content: \"application/json\": schema: parse schema: videoChannel: parse schema: id: parse schema: reference \"#/components/schemas/VideoChannel/properties/id\": resolve reference \"#/components/schemas/VideoChannel/properties/id\": schema not found"
}