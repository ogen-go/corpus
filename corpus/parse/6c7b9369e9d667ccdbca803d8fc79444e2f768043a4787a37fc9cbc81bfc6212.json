{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/enode.io/1.3.10/openapi.yaml",
			"byteSize": 58617,
			"content": "openapi: 3.0.0\nservers:\n  - url: https://api.test.enode.io/\ninfo:\n  description: |+\n    Download [OpenAPI 3.0 Specification](/OpenAPI-Enode-v1.4.0.json)\n\n    Download [Postman Collection](/Postman-Enode-v1.4.0.json)\n\n    The Enode API is designed to make smart charging applications easy to develop. We provide an abstraction layer that reduces the complexity when extracting vehicle data and sending commands to vehicles from a variety of manufacturers.\n\n    The API has a RESTful architecture and utilizes OAuth2 authorization.\n\n    We are always available to handle any issues or just answer your questions. Feel free to reach out on post@enode.io\n\n\n    ## Registration for API access\n    In order to use the API you will need a `client_id` and `client_secret`. Please contact us if you are interested in using our API in production, and we will provide these credentials.\n\n    # Authorization\n    Vehicle / hardware access via the Enode API is granted to your application by the User in a standard OAuth `Authorization Code` flow.\n\n    \u003e The authorization scheme documented here is the recommended approach for most situations. However, it is also possible to user other OAuth flows, non-confidential clients, and temporary users. Please feel free to contact us if you have any questions about your use-case or the integration of your existing infrastructure.\n\n    ### Preparation: Configure your OAuth client\n\n    Because Enode API implements the OAuth 2.0 spec completely and without modifications, you can avoid rolling your own OAuth client implementation and instead use a well-supported and battle-tested implementation. This is strongly recommended. Information on available OAuth clients for many languages is available [here](https://oauth.net/code/)\n\n    To configure your chosen OAuth client, you will need these details:\n    - Your `client_id`\n    - Your `client_secret`\n    - Authorization URL: `https://link.test.enode.io/oauth2/auth`\n    - Token URL: `https://link.test.enode.io/oauth2/token`\n\n    ```javascript\n    // Node.js + openid-client example\n    const enodeIssuer = await Issuer.discover('https://link.test.enode.io');\n    const client = new enodeIssuer.Client({\n      client_id: 'xyz',\n      client_secret: 'shhhhh',\n      redirect_uris: ['http://localhost:5000/callback'],\n      response_types: ['code'],\n    });\n    ```\n\n\n    ### Preparation: Obtain a client access token via OAuth Client Credentials Grant\n    Your OAuth client will have a method for using the `OAuth 2.0 Client Credentials Grant` to obtain an access token.\n\n    ```javascript\n    // Node.js + openid-client example\n    const clientAccessToken = await client.grant({grant_type: \"client_credentials\"});\n    ```\n\n    This access token belongs to your client and is used for administrative actions, such as the next step.\n\n    This token should be cached by your server and reused until it expires, at which point your server should request a new one.\n\n\n\n    ### Step 1. Generate an Enode Link session for your User and launch the OAuth flow\n\n    When your User indicates that they want to connect their hardware to your app, your server must call [Link User](#operation/postUsersUseridLink) to generate an Enode Link session for your User. The User ID can be any string that uniquely identifies the User, but it is recommended that you use the primary key by which you identify the User within your application.\n\n    Example Request:\n    ```\n    POST /users/{userId}/link HTTP/1.1\n    Authorization: Bearer {access_token}\n    {\n      \"forceLanguage\": \"nb-NO\",\n      \"vendor\": \"Tesla\",\n    }\n    ```\n\n    Example Response:\n    ```\n    {\n        \"linkState\": \"ZjE2MzMxMGFiYmU4MzcxOTU1ZmRjMTU5NGU2ZmE4YTU3NjViMzIwY2YzNG\",\n    }\n    ```\n\n    The returned linkState must be stored by your server, attached to the session of the authenticated user for which it was generated.\n\n    Your OAuth client will provide a method to construct an authorization URL for your user. That method will require these details:\n    - Redirect URI - The URI to which your user should be redirected when the Oauth flow completes\n    - Scope - The OAuth scope(s) you wish to request access to (see list of valid values [here](#section/Authentication/AccessTokenBearer))\n    - State - The value of `linkState` from the request above\n\n    To launch the OAuth flow, send your user to the authorization URL constructed by your OAuth client. This can be done in an embedded webview within a native iOS/Android app, or in the system's default browser.\n\n    ```javascript\n    // Node.js + openid-client + express example\n\n    // Construct an OAuth authorization URL\n    const authorizationUrl = client.authorizationUrl({\n      scope: \"offline_access all\",\n      state: linkState\n    });\n\n    // Redirect user to authorization URL\n    res.redirect(authorizationUrl);\n    ```\n\n\n    ### Step 2. User grants consent\n    In the Link UI webapp the user will follow 3 steps:\n\n    1. Choose their hardware from a list of supported manufacturers (EVs and charging boxes). For certain EV makes it will be necessary to also select a charge box.\n    2. For each selection, the user will be presented with the login screen for that particular hardware. The user must successfully log in.\n    3. A summary of the requested scopes will be presented to the user. The user must choose whether to grant access to your application.\n\n\n    ### Step 3. OAuth flow concludes with a callback\n    When the user has completed their interactions, they will be redirected to the `Redirect URI` you provided in Step 1, with various metadata appended as query parameters.\n\n    Your OAuth client will have a method to parse and validate that metadata, and fetch the granted access and refresh tokens.\n\n    Among that metadata will be a `state` value - you must verify that it is equal to the `linkState` value persisted in Step 1, as [a countermeasure against CSRF attacks](https://tools.ietf.org/html/rfc6819#section-4.4.1.8).\n\n    ```javascript\n    // Node.js + openid-client + express example\n\n    // Fetch linkState from user session\n    const linkState = get(req, 'session.linkState');\n\n    // Parse relevant parameters from request URL\n    const params = client.callbackParams(req);\n\n    // Exchange authorization code for access and refresh tokens\n    // In this example, openid-client does the linkState validation check for us\n    const tokenSet = await client.oauthCallback('http://localhost:5000/callback', params, {state: linkState})\n    ```\n\n    With the access token in hand, you can now access resources on behalf of the user.\n\n\n    # Errors And Problems\n    ## OAuth Authorization Request\n\n    When the User has completed the process of allowing/denying access in Enode Link, they will be redirected to your configured redirect URI. If something has gone wrong, query parameters `error` and `error_description` will be set as documented in [Section 4.1.2.1](https://tools.ietf.org/html/rfc6749#section-4.1.2.1) of the OAuth 2.0 spec:\n\n    |error                      |error_description|\n    |---------------------------|-----------------|\n    |invalid_request            |The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.|\n    |unauthorized_client        |The client is not authorized to request an authorization code using this method.|\n    |access_denied              |The resource owner or authorization server denied the request.|\n    |unsupported_response_type  |The authorization server does not support obtaining an authorization code using this method.|\n    |invalid_scope              |The requested scope is invalid, unknown, or malformed.|\n    |server_error               |The authorization server encountered an unexpected condition that prevented it from fulfilling the request.|\n    |temporarily_unavailable    |The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server|\n\n    Example:\n    ```\n    https://website.example/oauth_callback?state=e0a86fe5\u0026error=access_denied\u0026error_description=The+resource+owner+or+authorization+server+denied+the+request.\n    ```\n\n\n    ## Errors when accessing a User's resources\n\n    When using an `access_token` to access a User's resources, the following HTTP Status Codes in the 4XX range may be encountered:\n\n    |HTTP Status Code           |Explanation      |\n    |---------------------------|-----------------|\n    |400 Bad Request            |The request payload has failed schema validation / parsing\n    |401 Unauthorized           |Authentication details are missing or invalid\n    |403 Forbidden              |Authentication succeeded, but the authenticated user doesn't have access to the resource\n    |404 Not Found              |A non-existent resource is requested\n    |429 Too Many Requests      |Rate limiting by the vendor has prevented us from completing the request\n\n\n    In all cases, an [RFC7807 Problem Details](https://tools.ietf.org/html/rfc7807) body is returned to aid in debugging.\n\n    Example:\n    ```\n    HTTP/1.1 400 Bad Request\n    Content-Type: application/problem+json\n    {\n      \"type\": \"https://docs.enode.io/problems/payload-validation-error\",\n      \"title\": \"Payload validation failed\",\n      \"detail\": \"\\\"authorizationRequest.scope\\\" is required\",\n    }\n    ```\n\n  title: Enode API\n  version: 1.3.10\n  x-apisguru-categories:\n    - location\n  x-logo:\n    url: https://assets.website-files.com/5f32f25e947c8a1f62356ec1/5f4a941e3a9d743428afb799_Enode%20Logo2.png\n  x-origin:\n    - format: openapi\n      url: https://docs.enode.io/OpenAPI-Enode-v1.3.10.json\n      version: \"3.0\"\n  x-providerName: enode.io\ntags:\n  - description: Charging Locations are created by a user to denote locations where they pay for the power used to charge their vehicle. Smart Charging is active at these locations only.\n    name: Charging Locations\n  - description: |\n      Webhooks are a mechanism that allows your server to recieve notifications of events from the Enode system.\n\n      Currently, there is only one webhook available - a preconfigured webhook called `Firehose` that reports all supported events ocurring within the system. You can configure it using the [Update Firehose Webhook](#operation/putWebhooksFirehose) endpoint.\n\n      ## Supported events\n      | Name                        | Description                 |\n      |-----------------------------|-----------------------------|\n      |user:vehicle:updated         | One or more of a vehicle's properties (as listed in [Get Vehicle](#operation/getVehiclesVehicleid)) has been updated |\n      |user:vehicle:discovered      | A new vehicle has been discovered attached to a user |\n      |user:vehicle:deleted         | A vehicle has been deleted |\n\n\n      ## Implementing your Webhook endpoint\n      Your webhook endpoint should expect to receive `POST` requests bearing the following headers:\n\n      | Header            | Description                                                       |\n      |-------------------|-------------------------------------------------------------------|\n      |X-Enode-Delivery   | Unique ID identifying the delivered payload                       |\n      |X-Enode-Signature  | Signature authenticating that Enode is the author of the delivery |\n\n\n      And an `application/json` body containing an array of Events, with the following schema:\n\n      ```json\n      [\n        {\n          \"event\": \"user:vehicle:updated\", // String - name of the event\n          \"createdAt\": \"2020-04-07T17:04:26Z\", // UTC ISO 8601 - time at which the event was triggered\n        },\n        ...\n      ]\n      ```\n\n      Each Event object may contain additional properties, depending on the event.\n\n      ## Generating a Secret\n      A cryptographically secure secret should be generated and persisted on your server.\n\n      You will provide it when configuring a webhook, such as [Update Firehose Webhook](#operation/putWebhooksFirehose), and you will again use it when verifying the signature of incoming webhook requests.\n\n      It should be a pseudorandom value of at least 128 bits, produced by a secure generator.\n\n      ```javascript\n      // Node.js example - 256 bits\n      const crypto = require(\"crypto\");\n      const secret = crypto.randomBytes(32).toString(\"hex\");\n      ```\n\n      ## Verifying a Payload Signature\n      Requests made to your endpoint will bear a `X-Enode-Signature` header verifying that the request has come from us.\n\n      The signature is the HMAC hex digest of the payload, where:\n      - algorithm = `sha1`\n      - key = your `secret` provided during webhook configuration\n      - payload = The request body (a UTF-8 encoded string containing JSON - be sure to not deserialize it before signature computation)\n\n      The signature is then prefixed with \"sha1=\"\n\n      In Javascript, the signature may be verified as follows:\n\n      ```javascript\n      // Node.js + Express example\n\n      // Read signature from request HTTP header\n      const enodeSignature = Buffer.from(req.get(\"X-Enode-Signature\"), \"utf8\");\n\n      // Compute signature using your secret and the request payload\n      const payload = req.body;\n      const hmac = crypto.createHmac(\"sha1\", \u003cyour secret\u003e);\n      const digest = Buffer.from(\"sha1=\" + hmac.update(payload).digest(\"hex\"), \"utf8\");\n\n      // Check whether they match, using timing-safe equality (don't use ==)\n      if (!crypto.timingSafeEqual(digest, enodeSignature)) {\n        throw new Error(\"Signature invalid\");\n      }\n      ```\n\n\n      ## Example Payload\n      `user:vehicle:updated` payload containing 1 event:\n\n      ```json\n      [\n        {\n          \"event\": \"user:vehicle:updated\",\n          \"createdAt\": \"2020-04-07T17:04:26Z\",\n          \"user\": { // the user whose vehicle was updated\n            \"id\": \"8d90101b-3f2f-462a-bbb4-1ed320d33bbe\"\n          },\n          \"vehicle\": { // the vehicle whose properties were updated\n            \"id\": \"e8af7ddf-01ce-4ff7-b850-45888708cc0a\",\n            \"lastSeen\": \"2020-04-07T17:04:26Z\",\n            \"chargeState\": {\n              \"batteryLevel\": \"38\",\n              \"range\": \"127.5\",\n            },\n            \"location\": {\n              \"longitude\": 10.757933,\n              \"latitude\": 59.911491,\n              \"lastUpdated\": \"2020-04-07T17:04:26Z\"\n            },\n          },\n        }\n      ]\n      ```\n\n      The `vehicle` property follows the same schema as [Get Vehicle](#operation/getVehiclesVehicleid), and only changed fields will be populated.\n    name: Webhooks\n  - description: The `Me` endpoint returns metadata about the authenticated User.\n    name: Me\npaths:\n  /chargers:\n    get:\n      operationId: getChargers\n      parameters:\n        - description: |-\n            An optional array of Charger fields that should be included in the response, for example: `?field[]=information\u0026field[]=chargeState` \n\n            By default, no optional fields are included and only the Charger ID will be returned. Response time will generally be slower the more fields you request.\n          explode: true\n          in: query\n          name: field[]\n          schema:\n            items:\n              enum:\n                - chargeState\n                - location\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/paths/~1chargers~1%7BchargerId%7D/get/responses/200/content/application~1json/schema\"\n                type: array\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charger:charge_state\n        - UserAccessToken:\n            - charger:information\n      summary: List Chargers\n      tags:\n        - Chargers\n  \"/chargers/{chargerId}\":\n    get:\n      operationId: getCharger\n      parameters:\n        - description: ID of the Charger\n          in: path\n          name: chargerId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n        - $ref: \"#/paths/~1chargers/get/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  chargeState:\n                    properties:\n                      chargeRate:\n                        description: |-\n                          The current charge rate in kW.\n\n                          This property is only available when the charger is actively charging a vehicle, and is `null` any other time.\n                        example: 40.1\n                        minimum: 0\n                        type: number\n                      isCharging:\n                        description: Current charging status\n                        example: false\n                        type: boolean\n                      isPluggedIn:\n                        description: Indicates whether the charger has a vehicle plugged into it (regardless of whether that vehicle is actually charging)\n                        example: true\n                        type: boolean\n                    type: object\n                  id:\n                    description: Charger ID\n                    type: string\n                  information:\n                    description: Descriptive information about the Charger\n                    properties:\n                      brand:\n                        description: Charger brand\n                        example: Easee\n                        type: string\n                      id:\n                        description: Charger ID\n                        example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe\n                        type: string\n                      model:\n                        description: Charger model\n                        example: Home\n                        type: string\n                      year:\n                        description: Charger production year\n                        example: 2020\n                        type: integer\n                    type: object\n                  isReachable:\n                    description: Is the charger currently reachable?\n                    type: boolean\n                  lastSeen:\n                    description: The last time the charger was successfully communicated with\n                    format: date\n                    type: string\n                type: object\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charger:charge_state\n        - UserAccessToken:\n            - charger:information\n      summary: Get Charger\n      tags:\n        - Chargers\n  \"/chargers/{chargerId}/charging\":\n    post:\n      description: Instruct the charger to start or stop charging\n      operationId: controlChargerCharging\n      parameters:\n        - description: ID of the Charger\n          in: path\n          name: chargerId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                action:\n                  description: Charging action to perform\n                  enum:\n                    - START\n                    - STOP\n                  example: START\n                  type: string\n              required:\n                - action\n              type: object\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - control:charger:charging\n      summary: Control Charging\n      tags:\n        - Chargers\n  /charging-locations:\n    get:\n      description: Returns a list of Charging Locations registered to the User\n      operationId: getCharginglocations\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/paths/~1charging-locations/post/requestBody/content/application~1json/schema\"\n                type: array\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charging_location\n      summary: List Charging Locations\n      tags:\n        - Charging Locations\n    post:\n      operationId: postCharginglocations\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                id:\n                  description: Charging Location ID\n                  example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe\n                  format: uuid\n                  readOnly: true\n                  type: string\n                latitude:\n                  description: Latitude in degrees\n                  example: 59.911491\n                  type: number\n                longitude:\n                  description: Longitude in degrees\n                  example: 10.757933\n                  type: number\n                name:\n                  description: User-supplied name for the Charging Location\n                  example: Home\n                  type: string\n              required:\n                - id\n              type: object\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/paths/~1charging-locations/post/requestBody/content/application~1json/schema\"\n          description: Created\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charging_location\n      summary: Create Charging Location\n      tags:\n        - Charging Locations\n  \"/charging-locations/{chargingLocationId}\":\n    delete:\n      description: Delete a Charging Location\n      operationId: deleteCharginglocationsCharginglocationid\n      parameters:\n        - description: ID of the Charging Location\n          in: path\n          name: chargingLocationId\n          required: true\n          schema:\n            type: string\n          x-format:\n            guid: true\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charging_location\n      summary: Delete Charging Location\n      tags:\n        - Charging Locations\n    get:\n      operationId: getCharginglocationsCharginglocationid\n      parameters:\n        - description: ID of the Charging Location\n          in: path\n          name: chargingLocationId\n          required: true\n          schema:\n            type: string\n          x-format:\n            guid: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/paths/~1charging-locations/post/requestBody/content/application~1json/schema\"\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charging_location\n      summary: Get Charging Location\n      tags:\n        - Charging Locations\n    put:\n      description: Updates a charging location with new configuration\n      operationId: putCharginglocationsCharginglocationid\n      parameters:\n        - description: ID of the Charging Location\n          in: path\n          name: chargingLocationId\n          required: true\n          schema:\n            type: string\n          x-format:\n            guid: true\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/paths/~1charging-locations/post/requestBody/content/application~1json/schema\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/paths/~1charging-locations/post/requestBody/content/application~1json/schema\"\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - charging_location\n      summary: Update Charging Location\n      tags:\n        - Charging Locations\n  /health/ready:\n    get:\n      description: Gets the combined health status of the service and all functionalities and dependencies.\n      operationId: getHealthReady\n      responses:\n        \"204\":\n          content: {}\n          description: All functionalities are operating nominally\n        \"503\":\n          content:\n            application/json:\n              schema:\n                description: At least one functionality of the system is not operating nominally\n                type: string\n          description: At least one functionality of the system is not operating nominally\n      summary: Check Service Readiness\n      tags:\n        - Service Health\n  /health/vendors:\n    get:\n      description: List the supported vendors and their current status.\n      operationId: getHealthVendors\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  - displayName: Tesla\n                    status: READY\n                    vendor: TESLA\n                  - displayName: BMW\n                    status: READY\n                    vendor: BMW\n                  - displayName: Audi\n                    status: READY\n                    vendor: AUDI\n                items:\n                  description: Vendor status and metadata\n                  properties:\n                    displayName:\n                      description: Displayable name of the Vendor\n                      example: Tesla\n                      type: string\n                    status:\n                      description: Ready-state of the Vendor\n                      enum:\n                        - READY\n                        - ELEVATED_ERROR_RATE\n                        - OUTAGE\n                      example: READY\n                      type: string\n                    vendor:\n                      $ref: \"#/paths/~1me~1vendors~1%7Bvendor%7D/delete/parameters/0/schema\"\n                  type: object\n                type: array\n          description: Successful\n      summary: Check Available Vendors\n      tags:\n        - Service Health\n  /me:\n    get:\n      description: Returns metadata about the authenticated User, including a list of vendors for which the user has provided credentials.\n      operationId: getMe\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  id:\n                    example: 123456789-ABc\n                    minLength: 1\n                    type: string\n                  linkedVendors:\n                    items:\n                      properties:\n                        isValid:\n                          description: Whether the provided credentials are currently valid. A `false` value here indicates that a credential has become invalidated, and [Link User](#operation/postUsersUseridLink) should be used to get new credentials from this user.\n                          type: boolean\n                        vendor:\n                          $ref: \"#/paths/~1me~1vendors~1%7Bvendor%7D/delete/parameters/0/schema\"\n                      type: object\n                    type: array\n                type: object\n          description: Successful\n      security:\n        - UserAccessToken: []\n      summary: Get My User\n      tags:\n        - Me\n  \"/me/vendors/{vendor}\":\n    delete:\n      description: |-\n        Disconnect a single Vendor from the User's account.\n\n        All stored data about their Vendor account will be deleted, and any vehicles that were provided by that Vendor will disappear from the system.\n      operationId: disconnectVendor\n      parameters:\n        - description: Vendor to be unlinked\n          in: path\n          name: vendor\n          required: true\n          schema:\n            description: Vendor ID\n            enum:\n              - TESLA\n              - BMW\n              - AUDI\n              - VOLKSWAGEN\n              - HYUNDAI\n              - PEUGEOT\n              - NISSAN\n            example: TESLA\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - UserAccessToken: []\n      summary: Disconnect Vendor\n      tags:\n        - Me\n  /statistics/charging:\n    get:\n      description: Returns a normalized timeseries of statistics about power consumption and price for the User.\n      operationId: getStatisticsCharging\n      parameters:\n        - description: The unit of time the data will be cut into before aggregate statistics are applied. For instance if you choose DAY, then each item in the returned array will cover 1 day.\n          in: query\n          name: resolution\n          schema:\n            default: DAY\n            enum:\n              - HOUR\n              - DAY\n              - WEEK\n              - MONTH\n              - YEAR\n            type: string\n        - description: Earliest date to include in the response\n          in: query\n          name: startDate\n          required: true\n          schema:\n            format: date\n            type: string\n        - description: Latest date to include in the response (defaults to current date/time)\n          in: query\n          name: endDate\n          schema:\n            format: date\n            type: string\n        - description: Filter statistics to only include this vehicle\n          in: query\n          name: vehicleId\n          schema:\n            minLength: 1\n            type: string\n        - description: Filter statistics to only include this charging location\n          in: query\n          name: chargingLocationId\n          schema:\n            type: string\n          x-format:\n            guid: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                example:\n                  - costSum: 3.14\n                    date: 2021-01-19T09:37:36.845Z\n                    kw:\n                      max: 78\n                      mean: 61\n                      min: 0\n                    kwhSum: 120\n                    price:\n                      max: 14.4\n                      mean: 14.1\n                      min: 13.8\n                items:\n                  properties:\n                    costSum:\n                      description: Total cost in \u003cCURRENCY\u003e\n                      example: 3.14\n                      type: number\n                    date:\n                      description: The start date of this sample within the timeseries\n                      format: date\n                      type: string\n                    kw:\n                      description: Aggregate statistics for charge rate in kW\n                      properties:\n                        max:\n                          example: 78\n                          type: number\n                        mean:\n                          example: 61\n                          type: number\n                        min:\n                          example: 0\n                          type: number\n                      required:\n                        - min\n                        - max\n                        - mean\n                      type: object\n                    kwhSum:\n                      description: Total power consumption in kWh\n                      example: 120\n                      type: number\n                    price:\n                      description: Aggregate statistics for power price (\u003cCURRENCY\u003e per kWh)\n                      properties:\n                        max:\n                          example: 78\n                          type: number\n                        mean:\n                          example: 61\n                          type: number\n                        min:\n                          example: 0\n                          type: number\n                      required:\n                        - min\n                        - max\n                        - mean\n                      type: object\n                  required:\n                    - kw\n                    - kwhSum\n                    - price\n                    - costSum\n                    - date\n                  type: object\n                type: array\n          description: Successful\n      security:\n        - UserAccessToken: []\n      summary: Get User Charging Statistics\n      tags:\n        - Statistics\n  \"/users/{userId}\":\n    delete:\n      description: Deletes a User and all of their data permanently, and invalidates any associated sessions, authorization codes, and access/refresh tokens\n      operationId: deleteUsersUserid\n      parameters:\n        - description: ID of the User\n          in: path\n          name: userId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - ClientAccessToken: []\n      summary: Unlink User\n      tags:\n        - User Management\n  \"/users/{userId}/authorization\":\n    delete:\n      description: |-\n        Deletes the User's stored vendor authorizations and credentials, invalidates any associated sessions, authorization codes, and access/refresh tokens.\n\n        All other User data is retained, and if the User is sent through the Link User flow in the future their account will be just as they left it.\n\n        No webhook events will be generated for a deauthorized user.\n      operationId: deleteUsersUseridAuthorization\n      parameters:\n        - description: ID of the User\n          in: path\n          name: userId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - ClientAccessToken: []\n      summary: Deauthorize User\n      tags:\n        - User Management\n  \"/users/{userId}/link\":\n    post:\n      description: Creates an Enode Link session attached to the provided User ID. If this User does not exist, it will be created. The returned `linkState` gives the user short-lived access to Enode Link.\n      operationId: postUsersUseridLink\n      parameters:\n        - description: ID of the User\n          in: path\n          name: userId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                forceLanguage:\n                  description: BCP47 language code - Force the Link UI to prefer the specified language. If omitted, the UI will default to the user's browser default language.\n                  example: nb-NO\n                  type: string\n                linkMultiple:\n                  default: false\n                  description: Allow multiple car vendors to be linked during a single Link session. Automatically disabled if `vendor` is set.\n                  type: boolean\n                userImage:\n                  description: Full URL to an image that the user would recognize as being their own. This URL is only stored for the duration of the Link session, and is displayed to the user to reduce the effectiveness of phishing attacks.\n                  example: https://cdn.website.example/user/x/profile.jpg\n                  type: string\n                userName:\n                  description: The User's first name, full name, or other identifier that the user would recognize as being their own. This name is only stored for the duration of the Link session, and is displayed to the user to reduce the effectiveness of phishing attacks.\n                  example: Ola\n                  type: string\n                vendor:\n                  description: Automatically skip to the credential input screen for this vendor, skipping the Vendor selection menu.\n                  enum:\n                    - TESLA\n                    - BMW\n                    - AUDI\n                    - VOLKSWAGEN\n                    - HYUNDAI\n                    - PEUGEOT\n                    - NISSAN\n                  example: TESLA\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  linkState:\n                    example: ZjE2MzMxMGFiYmU4MzcxOTU1ZmRjMTU5NGU2ZmE4YTU3NjViMzIwY2YzNG\n                    type: string\n                type: object\n          description: Successful\n      security:\n        - ClientAccessToken: []\n      summary: Link User\n      tags:\n        - User Management\n  /vehicles:\n    get:\n      operationId: getVehicles\n      parameters:\n        - description: |-\n            An optional array of Vehicle fields that should be included in the response, for example: `?field[]=information\u0026field[]=location` \n\n            By default, no fields are included and only the Vehicle ID will be returned. Response time may be impacted by which fields you request.\n          explode: true\n          in: query\n          name: field[]\n          schema:\n            items:\n              $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D/get/parameters/1\"\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D/get/responses/200/content/application~1json/schema\"\n                type: array\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:location\n        - UserAccessToken:\n            - vehicle:odometer\n        - UserAccessToken:\n            - vehicle:information\n        - UserAccessToken:\n            - vehicle:charge_state\n        - UserAccessToken:\n            - vehicle:smart_charging_policy\n      summary: List Vehicles\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}\":\n    get:\n      operationId: getVehiclesVehicleid\n      parameters:\n        - description: ID of the Vehicle\n          in: path\n          name: vehicleId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n        - description: |-\n            An optional array of Vehicle fields that should be included in the response, for example: `?field[]=information\u0026field[]=location` \n\n            By default, no fields are included and only the Vehicle ID will be returned. Response time may be impacted by which fields you request.\n          explode: true\n          in: query\n          name: field[]\n          schema:\n            items:\n              enum:\n                - smartChargingPolicy\n                - chargeState\n                - location\n                - information\n                - odometer\n              type: string\n            type: array\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  chargeState:\n                    $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1charge-state/get/responses/200/content/application~1json/schema\"\n                  chargingLocationId:\n                    description: Id of the charging location the vehicle is currently positioned at (if any)\n                    example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe\n                    type: string\n                    x-format:\n                      guid: true\n                  id:\n                    description: Vehicle ID\n                    type: string\n                  information:\n                    $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1information/get/responses/200/content/application~1json/schema\"\n                  isReachable:\n                    description: Is the vehicle currently reachable?\n                    type: boolean\n                  lastSeen:\n                    description: The last time vehicle was successfully communicated with\n                    format: date\n                    type: string\n                  location:\n                    $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1location/get/responses/200/content/application~1json/schema\"\n                  odometer:\n                    $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1odometer/get/responses/200/content/application~1json/schema\"\n                  smartChargingPolicy:\n                    $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1smart-charging-policy/put/requestBody/content/application~1json/schema\"\n                required:\n                  - id\n                  - lastSeen\n                  - isReachable\n                  - chargingLocationId\n                type: object\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:location\n        - UserAccessToken:\n            - vehicle:odometer\n        - UserAccessToken:\n            - vehicle:information\n        - UserAccessToken:\n            - vehicle:charge_state\n        - UserAccessToken:\n            - vehicle:smart_charging_policy\n      summary: Get Vehicle\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/charge-state\":\n    get:\n      operationId: getVehicleChargestate\n      parameters:\n        - $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                properties:\n                  batteryCapacity:\n                    description: Vehicle's maximum physical battery capacity in kWh. This number slowly decreases/degrades over time.\n                    example: 73.21\n                    minimum: 0\n                    type: number\n                  batteryLevel:\n                    description: Remaining battery in percent\n                    example: \"38\"\n                    maximum: 100\n                    minimum: 0\n                    type: number\n                  chargeLimit:\n                    description: Charge limit, as a percent of `batteryCapacity`.\n                    example: 80\n                    maximum: 100\n                    minimum: 0\n                    type: number\n                  chargeRate:\n                    description: |-\n                      The current charge rate in kW.\n\n                      This property is only available when the vehicle is charging, and is `null` any other time.\n                    example: 40.1\n                    minimum: 0\n                    type: number\n                  chargeTimeRemaining:\n                    description: |-\n                      Estimated time until the current charging intent is completed, in minutes.\n\n                      This property is only available when the vehicle is charging, and is `null` any other time.\n                    example: 319\n                    type: number\n                  isCharging:\n                    description: Current charging status of the vehicle\n                    example: false\n                    type: boolean\n                  isChargingReasons:\n                    description: |-\n                      Array of string constants that explain why the car is or is not charging. May contain multiple values.\n\n                      **Any:**\n                      - DEFAULT - the car is not being controlled by Enode\n\n                      **Not Charging:**\n                      - NOT_PLUGGED_IN - because the car is not plugged into a charger\n                      - FULLY_CHARGED - because the car is fully charged\n                      - MANUALLY_STOPPED - because the car has been manually commanded to stop charging\n                      - SMART_CHARGING_DELAY - because Smart Charging has identified an opportunity to delay charging until prices are lower\n\n                      **Charging:**\n                      - MANUALLY_STARTED - because the car has been manually commanded to start charging\n                      - SMART_CHARGING_ACTIVE - because Smart Charging has identified that this is an optimal time to charge\n                      - SMART_CHARGING_DEADLINE - because, regardless of price, charging must be active to meet the configured deadline\n                    example:\n                      - SMART_CHARGING_DELAY\n                    items:\n                      enum:\n                        - override: true\n                        - DEFAULT\n                      type: string\n                    type: array\n                  isPluggedIn:\n                    description: Indicates whether the vehicle is connected to a charging box (regardless of whether it is actually charging)\n                    example: true\n                    type: boolean\n                  range:\n                    description: Estimated remaining kilometers\n                    example: \"127.5\"\n                    minimum: 0\n                    type: number\n                type: object\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:charge_state\n      summary: Get Vehicle Charge State\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/charging\":\n    post:\n      description: |-\n        Instruct the vehicle to start or stop charging. \n\n        #### Precedence over smart charging\n        If the vehicle is at a charging location where smart charging is activated:\n        - a request to `start` charging will override smart charging and charging will stay on until fully charged. \n        - a request to `stop` charging will override smart charging and charging will be kept off for the duration of the current smart charging cycle.\n\n        The smart charging settings are not altered by these actions.\n      operationId: postVehiclesVehicleidCharging\n      parameters:\n        - $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\"\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - control:vehicle:charging\n      summary: Start / Stop Charging\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/information\":\n    get:\n      operationId: getVehiclesVehicleidInformation\n      parameters:\n        - $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Descriptive information about the Vehicle\n                properties:\n                  brand:\n                    description: Vehicle brand\n                    example: Tesla\n                    type: string\n                  id:\n                    description: Vehicle ID\n                    example: 8d90101b-3f2f-462a-bbb4-1ed320d33bbe\n                    type: string\n                  model:\n                    description: Vehicle model\n                    example: Model S P85\n                    type: string\n                  year:\n                    description: Vehicle production year\n                    example: 2020\n                    type: integer\n                type: object\n          description: Descriptive information about the Vehicle\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:information\n      summary: Get Vehicle Information\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/location\":\n    get:\n      operationId: getVehiclesVehicleidLocation\n      parameters:\n        - $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Vehicle's GPS coordinates with timestamp\n                properties:\n                  lastUpdated:\n                    description: ISO8601 UTC timestamp of last received location\n                    example: 2020-04-07T17:04:26Z\n                    format: date\n                    type: string\n                  latitude:\n                    description: Latitude in degrees\n                    example: 59.911491\n                    type: number\n                  longitude:\n                    description: Longitude in degrees\n                    example: 10.757933\n                    type: number\n                type: object\n          description: Vehicle's GPS coordinates with timestamp\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:location\n      summary: Get Vehicle Location\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/odometer\":\n    get:\n      operationId: getVehiclesVehicleidOdometer\n      parameters:\n        - $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: Vehicle's odometer with timestamp\n                properties:\n                  distance:\n                    description: Odometer in kilometers\n                    example: 24650\n                    type: number\n                  lastUpdated:\n                    description: ISO8601 UTC timestamp of last received odometer update\n                    example: 2020-01-07T16:21:76Z\n                    format: date\n                    type: string\n                type: object\n          description: Vehicle's odometer with timestamp\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:odometer\n      summary: Get Vehicle Odometer\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/smart-charging-policy\":\n    get:\n      operationId: getVehiclesVehicleidSmartchargingpolicy\n      parameters:\n        - $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1smart-charging-policy/put/requestBody/content/application~1json/schema\"\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:smart_charging_policy\n      summary: Get Vehicle Smart Charging Policy\n      tags:\n        - Vehicles\n    put:\n      description: Updates the Smart Charging settings for a vehicle\n      operationId: putVehiclesVehicleidSmartchargingpolicy\n      parameters:\n        - description: ID of the Vehicle\n          in: path\n          name: vehicleId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                deadline:\n                  description: The deadline for fully charging the vehicle. Smart charging does not work without setting a deadline. The deadline is expressed as a time on a 24h clock in UTC\n                  example: 08:00\n                  pattern: \\d{2}:\\d{2}\n                  type: string\n                isEnabled:\n                  description: When enabled, this vehicle's charging status may be controlled by Smart Charging.\n                  example: true\n                  type: boolean\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1smart-charging-policy/put/requestBody/content/application~1json/schema\"\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:smart_charging_policy\n      summary: Update Vehicle Smart Charging Policy\n      tags:\n        - Vehicles\n  \"/vehicles/{vehicleId}/watch\":\n    post:\n      description: |\n        Temporarily triggers high-rate updates of the vehicle's properties, and this state expires automatically. This gives you a way to tell us that user may be interacting with your application and are expecting as-fast-as-possible updates on the status of their vehicle in your UI.\n\n        Any data changes resulting from this high-rate updating are reflected everywhere, whether you pull data from the `Vehicles` endpoint, or recieve it via the [Firehose Webhook](#tag/Webhooks)\n\n        The specifics of the expiration times, watch behaviors, and change thresholds are tuned by us to make sure that they work as expected, without causing undue interruption to the vehicle. For many vendors, it is not appropriate to let the high-rate monitoring last indefinitely, as it will keep systems within the car awake that should be allowed to fall into low-power/standby modes.\n      operationId: postVehiclesVehicleidWatch\n      parameters:\n        - description: ID of the Vehicle\n          in: path\n          name: vehicleId\n          required: true\n          schema:\n            minLength: 1\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                properties:\n                  description: Array of vehicle properties to watch\n                  enum:\n                    - BATTERY_LEVEL\n                    - RANGE\n                    - IS_PLUGGED_IN\n                    - IS_CHARGING\n                    - IS_CHARGING_REASONS\n                    - LOCATION\n                  example:\n                    - LOCATION\n                    - BATTERY_LEVEL\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/requestBody/content/application~1json/schema\"\n          description: Successful\n      security:\n        - UserAccessToken:\n            - all\n        - UserAccessToken:\n            - vehicle:location\n        - UserAccessToken:\n            - vehicle:charge_state\n      summary: Start Watching Vehicle\n      tags:\n        - Vehicles\n  /webhooks/firehose:\n    put:\n      operationId: putWebhooksFirehose\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                secret:\n                  description: A cryptographically secure secret, generated and provided by your client\n                  example: 0Kvs1tAUQ69FOMBiWlt5XJSrruXMhWDiVbyrWaNm\n                  type: string\n                url:\n                  description: The HTTPS url to which Enode should POST the event payload when a watched property changes\n                  example: https://brainpower.co/enode-webhooks/firehose\n                  type: string\n                  x-format:\n                    uri: true\n              type: object\n      responses:\n        \"204\":\n          content: {}\n          description: No Content\n      security:\n        - ClientAccessToken: []\n      summary: Update Firehose Webhook\n      tags:\n        - Webhooks 🧪\n  /webhooks/firehose/test:\n    post:\n      description: Trigger a test payload to be sent to your configured Firehose Webhook url.\n      operationId: postWebhooksFirehoseTest\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                type: string\n          description: Successful\n      security:\n        - ClientAccessToken: []\n      summary: Test Firehose Webhook\n      tags:\n        - Webhooks 🧪\ncomponents:\n  securitySchemes:\n    ClientAccessToken:\n      description: |\n        A `ClientAccessToken` access token is obtained via the [OAuth 2.0 Client Credentials grant](https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/)\n\n        When accessing protected resources, the token should be provided in a Bearer authorization header as specified in [RFC6750](https://tools.ietf.org/html/rfc6750#section-2.1)\n\n        Example:\n        ```\n        DELETE /users/xyz HTTP/1.1\n        Authorization: Bearer yQ89j3LAnqBx42gWGUl4v-jxoS1mfTAH3Q52WTGrExw.zgRcRrE6KRKUgVQEVr2Pifub8Z7trCZrobKjvhGIOTI\n        ```\n\n        You can read more about obtaining this token in the [Authorization](#section/Authorization) section\n      flows:\n        clientCredentials:\n          scopes: {}\n          tokenUrl: https://link.test.enode.io/oauth2/token\n      type: oauth2\n    UserAccessToken:\n      description: |\n        A `UserAccessToken` access token is obtained via the [OAuth 2.0 Authorization Code grant](https://www.oauth.com/oauth2-servers/access-tokens/authorization-code-request/)\n\n        This token represents the authorization for the bearer to access resources on behalf of the user who authorized it. This authorization is further limited by scopes. When relevant, the `scope` required by each endpoint is listed in the documentation for that endpoint.\n\n        When accessing protected resources, the token should be provided in a Bearer authorization header as specified in [RFC6750](https://tools.ietf.org/html/rfc6750#section-2.1)\n\n        Example:\n        ```\n        GET /vehicles HTTP/1.1\n        Authorization: Bearer yQ89j3LAnqBx42gWGUl4v-jxoS1mfTAH3Q52WTGrExw.zgRcRrE6KRKUgVQEVr2Pifub8Z7trCZrobKjvhGIOTI\n        ```\n\n        You can read more about obtaining this token in the [Authorization](#section/Authorization) section\n      flows:\n        authorizationCode:\n          authorizationUrl: https://link.test.enode.io/oauth2/auth\n          scopes:\n            all: Read and write all resources\n            charger:charge_state: Read charger charge state\n            charger:information: Read charger information\n            charging_location: Read \u0026 write user's charging locations\n            control:charger:charging: Control charger charging\n            control:vehicle:charging: Control vehicle charging\n            vehicle:charge_state: Read vehicle charge state\n            vehicle:information: Read vehicle information\n            vehicle:location: Read vehicle location\n            vehicle:odometer: Read vehicle odometer\n            vehicle:smart_charging_policy: Read \u0026 write vehicle smart charging policy\n          tokenUrl: https://link.test.enode.io/oauth2/token\n      type: oauth2\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /vehicles/{vehicleId}/charge-state: get: operation \"getVehicleChargestate\": parameters: parse parameter \"\": resolve \"#/paths/~1vehicles~1%7BvehicleId%7D~1watch/post/parameters/0\" reference: component by reference not found"
}