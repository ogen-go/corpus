{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/candlepin/candlepin"
		},
		"file": {
			"name": "candlepin-api-spec.yaml",
			"size": 0,
			"path": "api/candlepin-api-spec.yaml",
			"byteSize": 310952,
			"content": "openapi: 3.0.2\ninfo:\n  title: Candlepin\n  description: Candlepin is a subscription management server written in Java. It helps with management of software subscriptions.\n  version: 4.2.7\n\nservers:\n  - url: /candlepin\n\nsecurity:\n  - basicAuth: []\n\npaths:\n  /:\n    get:\n      description: Retrieves a list of links corresponding to Root resources\n      tags:\n        - root\n      operationId: getRootResources\n      security: []  # this resource doesn't require auth\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Link'\n        default:\n          $ref: '#/components/responses/default'\n\n  /admin/init:\n    get:\n      description: |\n        Initializes the Candlepin database. Currently this just\n        creates the admin user for standalone deployments using the\n        default user service adapter. It must be called once after\n        candlepin is installed, repeat calls are not required, but\n        will be harmless. The String returned is the description if\n        the db was or already is initialized.\n      tags:\n        - admin\n      operationId: initialize\n      security: [ ]\n      responses:\n        200:\n          description: Candlepin successfully initialized.\n          content:\n            text/plain:\n              schema:\n                type: string\n        default:\n          $ref: '#/components/responses/default'\n\n  /admin/queues:\n    get:\n      description: Basic information on the ActiveMQ queues and how many messages are pending in each.\n      tags:\n        - admin\n      operationId: getQueueStats\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: [ ]\n      responses:\n        200:\n          description: Queue stats successfully retrieved.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/QueueStatus'\n        default:\n          $ref: '#/components/responses/default'\n\n  /activation_keys:\n    get:\n      description: Retrieves a list of activation keys\n      tags:\n        - activation_key\n      operationId: findActivationKey\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: List of activation keys\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ActivationKeyDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n  /activation_keys/{activation_key_id}:\n    get:\n      description: Retrieves a single activation key\n      tags:\n        - activation_key\n      operationId: getActivationKey\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key to retrieve\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Activation key ID is null, empty or could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Activation key ID is null, empty or could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates an Activation Key\n      tags:\n        - activation_key\n      operationId: updateActivationKey\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Activation key to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActivationKeyDTO'\n      responses:\n        200:\n          description: Updated the activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Invalid inputs, could not update activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, could not update activation key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Deletes an activation key\n      tags:\n        - activation_key\n      operationId: deleteActivationKey\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: A successful operation\n        400:\n          description: Activation key ID is null, empty or could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Activation key ID is null, empty or could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /activation_keys/{activation_key_id}/content_overrides:\n    get:\n      description: Retrieves list of Content Overrides\n      tags:\n        - activation_key\n      operationId: listActivationKeyContentOverrides\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key\n          required: true\n          schema:\n            type: string\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of content overrides of the Activation Key\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentOverrideDTO'\n        400:\n          description: ActivationKey with id test_id could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: ActivationKey with id test_id could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Insufficient permissions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Adds or Updates a list of Content Overrides\n      tags:\n        - activation_key\n      operationId: addActivationKeyContentOverrides\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The list of the content overrides\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ContentOverrideDTO'\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of the created/update content overrides of the Activation Key\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentOverrideDTO'\n        400:\n          description: ActivationKey with id test_id could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: ActivationKey with id test_id could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Insufficient permissions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Deletes a list of Content Overrides\n      tags:\n        - activation_key\n      operationId: deleteActivationKeyContentOverrides\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The list of the content overrides\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ContentOverrideDTO'\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of the deleted content overrides of the Activation Key\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentOverrideDTO'\n        400:\n          description: ActivationKey with id test_id could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: ActivationKey with id test_id could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Insufficient permissions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /activation_keys/{activation_key_id}/pools:\n    get:\n      description: Retrieves a list of pools based on the activation key\n      tags:\n        - activation_key\n      operationId: getActivationKeyPools\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key\n          required: true\n          schema:\n            type: string\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of pools based on the Activation Key\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PoolDTO'\n        400:\n          description: Activation key ID is null, empty or could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Activation key ID is null, empty or could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /activation_keys/{activation_key_id}/pools/{pool_id}:\n    post:\n      description: Adds a Pool to an Activation Key\n      tags:\n        - activation_key\n      operationId: addPoolToKey\n      security: []\n      parameters:\n        - in: path\n          name: activation_key_id\n          description: ID of the activation key\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: pool_id\n          description: ID of the pool\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: quantity\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: Pool added to activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Invalid inputs, pool could not be added to activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, pool could not be added to activation key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a Pool from an Activation Key\n      tags:\n        - activation_key\n      operationId: removePoolFromKey\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key\n          required: true\n          schema:\n            type: string\n        - name: pool_id\n          in: path\n          description: The ID of a pool to be removed\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Pool removed from activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Invalid inputs, pool could not be removed from activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, pool could not be removed from activation key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /activation_keys/{activation_key_id}/product/{product_id}:\n    post:\n      description: Adds an Product ID to an Activation Key\n      tags:\n        - activation_key\n      operationId: addProductIdToKey\n      security: []\n      parameters:\n        - in: path\n          name: activation_key_id\n          description: ID of the activation key\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: product_id\n          description: ID of the product\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Product ID added to an activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Invalid inputs, product ID could not be added to activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, product ID could not be added to activation key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a Product ID from an Activation Key\n      tags:\n        - activation_key\n      operationId: removeProductIdFromKey\n      security: []\n      parameters:\n        - name: activation_key_id\n          in: path\n          description: The ID of the activation key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: The ID of the product\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Product ID removed from activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Invalid inputs, product ID could not remove from activation key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, product ID could not remove from activation key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /cloud/authorize:\n    post:\n      description: Verifies provided cloud registration data and returns an authentication token. By default the token is valid for 10 minutes\n      tags:\n        - cloud_registration\n      operationId: cloudAuthorize\n      security: [ ]\n      requestBody:\n        description: Cloud registration data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CloudRegistrationDTO'\n      responses:\n        200:\n          description: Cloud authorization successful.\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: CloudRegistrationInfo is null\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: CloudRegistrationInfo is null\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        401:\n          description: Cloud provider or account details could not be resolved to an organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Cloud provider or account details could not be resolved to an organization\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        501:\n          description: Cloud registration is not supported by this Candlepin instance\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Cloud registration is not supported by this Candlepin instance\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers:\n    get:\n      description: Retrieves a list of the Consumers according to search criteria.\n      tags:\n        - consumer\n      operationId: searchConsumers\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      parameters:\n        - name: username\n          in: query\n          description: Username\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: Consumer type\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n        - name: owner\n          in: query\n          description: Owner key\n          schema:\n            type: string\n        - name: uuid\n          in: query\n          description: The UUID of consumers\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hypervisor_id\n          in: query\n          description: Hypervisor IDs\n          schema:\n            type: array\n            items:\n              type: string\n        - name: fact\n          in: query\n          description: The consumer facts\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/KeyValueParamDTO'\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n      responses:\n        200:\n          description: List of consumers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n        400:\n          description: Must specify at least one search criteria.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Must specify at least one search criteria.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner with this key could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner with this key could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates a Consumer.\n        This method is available to everyone, as we have nothing we can reliably verify in the method\n        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n        compatability with existing clients which do not specify an owner during registration) and then\n        check the access to the specified owner in the method itself.\n      tags:\n        - consumer\n      operationId: createConsumer\n      security: []\n      parameters:\n        - name: username\n          in: query\n          description: User name\n          schema:\n            type: string\n        - name: owner\n          in: query\n          description: Owner key\n          schema:\n            type: string\n        - name: activation_keys\n          in: query\n          description: Activation key\n          schema:\n            type: string\n        - name: identity_cert_creation\n          in: query\n          description: Boolean flag for identity cert generation.\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        description: Consumer to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerDTO'\n      responses:\n        200:\n          description: Consumer successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerDTO'\n        400:\n          description: One or more constraint validation has failed.\n            | Consumer type must be specified or it is of invalid type.\n            | Organization is not specified or does not exists.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: One or more constraint validation has failed.\n                  | Consumer type must be specified or it is of invalid type.\n                  | Organization is not specified or does not exists.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner with this key could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner with this key could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/compliance:\n    get:\n      description: Retrieves a Compliance Status list for a list of Consumers.\n      tags:\n        - consumer\n      operationId: getComplianceStatusList\n      security: [ ]\n      parameters:\n        - name: uuid\n          in: query\n          description: Consumers UUIDs\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: Returns a map of consumer UUIDs \u0026 compliance status\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  $ref: '#/components/schemas/ComplianceStatusDTO'\n        400:\n          description: Consumer does not have a defined type ID.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer does not have a defined type ID.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/exists:\n    post:\n      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n        consumer.\n      tags:\n        - consumer\n      operationId: consumerExistsBulk\n      security: []\n      requestBody:\n        description: Array of Consumer UUIDs\n        content:\n          application/json:\n            schema:\n              type: array\n              uniqueItems: true\n              items:\n                type: string\n      x-java-response:\n        type: javax.ws.rs.core.Response\n        isContainer: false\n      responses:\n        204:\n          description: Consumers exist for all provided UUIDs\n        400:\n          description: No UUIDs provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No UUIDs provided\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Non-existing consumer UUIDs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}:\n    get:\n      description: Retrieves a single Consumer\n      tags:\n        - consumer\n      operationId: getConsumer\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns single consumer.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerDTO'\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates a Consumer\n      tags:\n        - consumer\n      operationId: updateConsumer\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Consumer to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerDTO'\n      responses:\n        200:\n          description: Successful operation\n        400:\n          description: One or more constraint validation has failed. Problem updating consumer.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Retrieves a single Consumer \u0026 regenerate identity certificates\n      tags:\n        - consumer\n      operationId: regenerateIdentityCertificates\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns consumer with regenerated Identity certs.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerDTO'\n        400:\n          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a Consumer\n      tags:\n        - consumer\n      operationId: deleteConsumer\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: A successful operation.\n        403:\n          description: Consumer could not be deleted due to unknown type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer could not be deleted due to unknown type.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        410:\n          description: Consumer with this UUID is already deleted.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID is already deleted.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/accessible_content:\n    get:\n      description: Retrieves the body of the Content Access Certificate for the Consumer\n      tags:\n        - consumer\n      operationId: getContentAccessBody\n      security: [ ]\n      x-java-response:\n        type: javax.ws.rs.core.Response\n        isContainer: false\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer\n          required: true\n          schema:\n            type: string\n        - name: If-Modified-Since\n          in: header\n          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n          schema:\n            type: string\n#            FIXME It wont work on older version resteasy validation.\n#            format: date-time\n#            pattern: EEE, dd MMM yyyy HH:mm:ss z\n      responses:\n        200:\n          description: A successful operation.\n          content:\n            text/plain:\n              schema:\n                type: string\n        304:\n          description: Not modified since date supplied.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Not modified since date supplied.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        400:\n          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n            | Cannot retrieve content access certificate.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n                  | Cannot retrieve content access certificat.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/certificates:\n    put:\n      description: Regenerates the Entitlement Certificates for a Consumer\n      tags:\n        - consumer\n      operationId: regenerateEntitlementCertificates\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n        - name: entitlement\n          in: query\n          description: Entitlement ID\n          schema:\n            type: string\n        - name: lazy_regen\n          in: query\n          description: Lazy regeneration of entitlement certs\n          schema:\n            type: boolean\n            default: true\n      responses:\n        204:\n          description: Successful operation\n        400:\n          description: Consumer does not have a defined type ID. Invalid consumer type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n            found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n                  ID could not befound.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    get:\n      description: Retrieves a list or a compressed file (depends on accept header) of entitlement\n        certificates for the consumer.\n      tags:\n        - consumer\n      operationId: exportCertificates\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer to retrieve guest\n          required: true\n          schema:\n            type: string\n        - name: serials\n          in: query\n          description: Certificate serials\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          # This endpoint does not really support text/plain, but only application/zip and application/json.\n          # The reason for adding text/plain here is a workaround and it is because only the first schema\n          # type defined is taken into account. In this case Object will be generated as the returned type,\n          # which covers both the List\u003cCertificateDTO\u003e and zip file of the 2 cases we support. This is done\n          # because currently openapi-generator does not support returning multiple schema types for\n          # different accept header values on the same endpoint\n          content:\n            text/plain:\n              schema:\n                type: object\n            application/zip:\n              schema:\n                type: string\n                format: binary\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDTO'\n        400:\n          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n            with a valid type.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n                  not associated with a valid type.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/compliance:\n    get:\n      description: Retrieves the Compliance Status of a Consumer.\n      tags:\n        - consumer\n      operationId: getComplianceStatus\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n        - name: on_date\n          in: query\n          description: Date to get compliance information for, default is now.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the Compliance Status of a Consumer.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ComplianceStatusDTO'\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/content_access:\n    get:\n      description: Retrieves content access of a Consumer\n      tags:\n        - consumer\n      operationId: getContentAccessForConsumer\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns content access of a Consumer.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentAccessDTO'\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/content_overrides:\n    get:\n      description: Retrieves list of Content Overrides\n      tags:\n        - consumer\n      operationId: listConsumerContentOverrides\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The ID of the consumer\n          required: true\n          schema:\n            type: string\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of content overrides of the Consumer.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentOverrideDTO'\n        403:\n          description: Insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Adds or Updates a list of Content Overrides\n      tags:\n        - consumer\n      operationId: addConsumerContentOverrides\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The ID of the Consumer\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The list of the content overrides\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ContentOverrideDTO'\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of the created/update content overrides of the Consumer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentOverrideDTO'\n        400:\n          description: |\n            The content labels are invalid.\n            The content properties cannot be overridden.\n            The override values are invalid.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The content labels are invalid.\n                  The content properties cannot be overridden.\n                  The override values are invalid.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Deletes a list of Content Overrides\n      tags:\n        - consumer\n      operationId: deleteConsumerContentOverrides\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The ID of the Consumer\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The list of the content overrides\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ContentOverrideDTO'\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: List of the deleted content overrides of the Consumer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentOverrideDTO'\n        403:\n          description: Insufficient permissions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Insufficient permissions.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/deletionrecord:\n    delete:\n      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n        causing it to no longer be auto-detected via virt-who.\n      tags:\n        - consumer\n      operationId: removeDeletionRecord\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: A successful operation.\n        404:\n          description: Deletion record for hypervisor is not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Deletion record for hypervisor is not found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/entitlements:\n    get:\n      description: Retrieves a list of Entitlements. This endpoint supports paging with query parameters.\n      tags:\n        - consumer\n      operationId: listEntitlements\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n        - name: product\n          in: query\n          description: ID of a Product\n          schema:\n            type: string\n        - name: regen\n          in: query\n          description: Boolean flag to regenerate entitlements\n          schema:\n            type: boolean\n            default: true\n        - name: attribute\n          in: query\n          description: Attribute filters\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              format: key:value\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n      responses:\n        200:\n          description: A list of entitlements\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EntitlementDTO'\n        400:\n          description: Product with this ID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product with this ID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this  UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this  UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Unbinds all Entitlements for a Consumer. The result contains the total number of\n        entitlements unbound.\n      tags:\n        - consumer\n      operationId: unbindAll\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: The total number of revoked entitlements\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DeleteResult'\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: If a pool ID is specified, we know we're binding to that exact pool. Specifying an\n        entitle date in this case makes no sense and will throw an error. If a list of\n        product IDs are specified, we attempt to auto-bind to subscriptions which will provide those\n        products. An optional date can be specified allowing the consumer to get compliant for some date in\n        the future. If no date is specified we assume the current date. If neither a pool nor an ID is\n        specified, this is a healing request. The path is similar to the bind by products, but in this\n        case we use the installed products on the consumer, and their current compliant status, to\n        determine which product IDs should be requested. The entitle date is used the same as with\n        bind by products. The response will contain a list of Entitlement objects if async is false, or a\n        JobDetail object if async is true\n      tags:\n        - consumer\n      operationId: bind\n      security: []\n      x-java-response:\n        type: javax.ws.rs.core.Response\n        isContainer: false\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n        - name: pool\n          in: query\n          description: Pool ID\n          schema:\n            type: string\n        - name: product\n          in: query\n          description: Product array\n          schema:\n            type: array\n            items:\n              type: string\n        - name: quantity\n          in: query\n          description: Quantity\n          schema:\n            type: integer\n        - name: email\n          in: query\n          description: Email address\n          schema:\n            type: string\n        - name: email_locale\n          in: query\n          description: Email locale\n          schema:\n            type: string\n        - name: async\n          in: query\n          description: Operation Type async or sync\n          schema:\n            type: boolean\n            default: false\n        - name: entitle_date\n          in: query\n          description: Entitlement date\n          schema:\n            type: string\n        - name: from_pool\n          in: query\n          description: From pool\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: Invalid date, must use ISO 8601 format |\n            Cannot bind by multiple parameters |\n            Cannot specify a quantity when auto-binding. |\n            Ignoring request to auto-attach. It is disabled for org because of the content access\n            mode setting or hypervisor autobind setting.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid date, must use ISO 8601 format |\n                  Cannot bind by multiple parameters |\n                  Cannot specify a quantity when auto-binding. |\n                  Ignoring request to auto-attach. It is disabled for org because of the content access\n                  mode setting or hypervisor autobind setting.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/exists:\n    head:\n      description: Checks for the existence of a Consumer.\n      tags:\n        - consumer\n      operationId: consumerExists\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successful Operation.\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/export:\n    get:\n      description: Retrieves a Compressed File representation of a Consumer (manifest).\n      tags:\n        - consumer\n      operationId: exportData\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the target consumer.\n          required: true\n          schema:\n            type: string\n        - name: cdn_label\n          in: query\n          description: The label of the target CDN.\n          required: false\n          schema:\n            type: string\n        - name: webapp_prefix\n          in: query\n          description: The URL pointing to the manifest's originating web application.\n          required: false\n          schema:\n            type: string\n        - name: api_url\n          in: query\n          description: The URL pointing to the manifest's originating candlepin API.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n            with a valid type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n                  not associated with a valid type\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Unit cannot be exported. | A manifest cannot be made for units this type.\n            | A CDN with this label does not exist on this system.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unit cannot be exported. | A manifest cannot be made for units this type.\n                  | A CDN with this label does not exist on this system.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/guests:\n    get:\n      description: Retrieves a list of Guest Consumers of a Consumer\n      tags:\n        - consumer\n      operationId: getGuests\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the list of consumers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n        400:\n          description: The system with this UUID is a virtual guest. It does not have guests.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The system with this UUID is a virtual guest. It does not have guests.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/guestids:\n    get:\n      description: Retrieves the list of a Consumer's Guests\n      tags:\n        - guest_ids\n      operationId: getGuestIds\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GuestIdDTOArrayElement'\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates the list of guests on a consumer.\n      tags:\n        - guest_ids\n      operationId: updateGuests\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer who owns or hosts the guest\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The list of the guests to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/GuestIdDTO'\n      responses:\n        200:\n          description: A successful operation\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/host:\n    get:\n      description: Retrieves a Host Consumer of a Consumer\n      tags:\n        - consumer\n      operationId: getHost\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns Host Consumer of a Consumer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerDTO'\n        400:\n          description: The system with this UUID is not a virtual guest.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The system with this UUID is not a virtual guest.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/owner:\n    get:\n      description: Retrieves the Owner associated to a Consumer\n      tags:\n        - consumer\n      operationId: getOwnerByConsumerUuid\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OwnerDTO'\n        400:\n          description: OwnerId is null or owner not found for this ID.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: OwnerId is null or owner not found for this ID.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/purpose_compliance:\n    get:\n      description: Retrieves the System Purpose Compliance Status of a Consumer.\n      tags:\n        - consumer\n      operationId: getSystemPurposeComplianceStatus\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n        - name: on_date\n          in: query\n          description: Date to get compliance information for, default is now.\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the System Purpose Compliance Status of a Consumer.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemPurposeComplianceStatusDTO'\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/release:\n    get:\n      description: Retrieves the release of a consumer\n      tags:\n        - consumer\n      operationId: getRelease\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the release of a consumer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReleaseVerDTO'\n        404:\n          description: Consumer with this UUID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/export/async:\n    get:\n      description: Initiates an async generation of a Compressed File representation of a Consumer\n        (manifest). The response will contain the id of the job from which its result data\n        will contain the href to download the generated file.\n      tags:\n        - consumer\n      operationId: exportDataAsync\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the target consumer.\n          required: true\n          schema:\n            type: string\n        - name: cdn_label\n          in: query\n          description: The lable of the target CDN.\n          required: false\n          schema:\n            type: string\n        - name: webapp_prefix\n          in: query\n          description: The URL pointing to the manifest's originating web application.\n          required: false\n          schema:\n            type: string\n        - name: api_url\n          in: query\n          description: The URL pointing to the manifest's originating candlepin API.\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n            with a valid type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n                  not associated with a valid type\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Unit cannot be exported. | A manifest cannot be made for units this type.\n            | A CDN with this label does not exist on this system.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unit cannot be exported. | A manifest cannot be made for units this type.\n                  | A CDN with this label does not exist on this system.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/entitlements/dry-run:\n    get:\n      description: Retrieves a list of Pools and quantities that would be the result of an auto-bind.\n        This is a dry run of an autobind. It allows the client to see what would be the result of an autobind\n        without executing it. It can only do this for the prevously established list of installed products\n        for the consumer If a service level is included in the request, then that level will override the one\n        stored on the consumer. If no service level is included then the existing one will be used.\n        The Response has a list of PoolQuantity objects\n      tags:\n        - consumer\n      operationId: dryBind\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n        - name: service_level\n          in: query\n          description: Service level\n          schema:\n            type: string\n      responses:\n        200:\n          description: List of pool quantities along with pool.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PoolQuantityDTO'\n        400:\n          description: Either owner ID is null or Owner could not be found.\n            Organization has auto-attach disabled which could be due to content access settings.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Either owner ID is null or Owner could not be found.\n                  Organization has auto-attach disabled which could be due to content access settings.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/certificates/serials:\n    get:\n      description: Retrieves a list of Certiticate Serials for the given consumer.\n        This is a small subset of data clients can use to determine which certificates\n        they need to update/fetch.\n      tags:\n        - consumer\n      operationId: getEntitlementCertificateSerials\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: Consumer UUID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A list of certificate serials\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CertificateSerialDTO'\n        400:\n          description: Cannot retrieve content access certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Cannot retrieve content access certificate\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/certificates/{serial}:\n    delete:\n      description: Removes an Entitlement from a Consumer By the Certificate Serial\n      tags:\n        - consumer\n      operationId: unbindBySerial\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n        - name: serial\n          in: path\n          description: certificate serial\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        204:\n          description: A successful operation.\n        404:\n          description: Consumer with this UUID could not be found or Entitlement Certificate with serial\n            number could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found or Entitlement Certificate with serial\n                  number could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/entitlements/{dbid}:\n    delete:\n      description: Removes an Entitlement from a Consumer By the Entitlement ID\n      tags:\n        - consumer\n      operationId: unbindByEntitlementId\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the Consumer\n          required: true\n          schema:\n            type: string\n        - name: dbid\n          in: path\n          description: Entitlement ID\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successful operation\n        404:\n          description: Consumer with this UUId could not be found. OR Entitlement ID could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUId could not be found.\n                  OR Entitlement ID could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/export/{export_id}:\n    get:\n      description: Downloads an asynchronously generated consumer export file (manifest).\n      tags:\n        - consumer\n      operationId: downloadExistingExport\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer\n          required: true\n          schema:\n            type: string\n        - name: export_id\n          in: path\n          description: export ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: Could not validate export against specifed consumer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Could not validate export against specifed consumer\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Consumer with this UUID could not be found.\n            | Unable to find specified manifest by this ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Consumer with this UUID could not be found.\n                  | Unable to find specified manifest by this ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/guestids/{guest_id}:\n    get:\n      description: Retrieves a single Guest by its consumer and the guest UUID\n      tags:\n        - guest_ids\n      operationId: getGuestId\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer to retrieve guest\n          required: true\n          schema:\n            type: string\n        - name: guest_id\n          in: path\n          description: The UUID of the guest to retrieve\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GuestIdDTO'\n        404:\n          description: A Guest could not be found using the provided UUID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A Guest could not be found using the provided UUID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates a single Guest on a Consumer. Allows virt-who to avoid uploading an entire list of guests\n      tags:\n        - guest_ids\n      operationId: updateGuest\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer who owns or hosts the guest\n          required: true\n          schema:\n            type: string\n        - name: guest_id\n          in: path\n          description: The UUID of the guest to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Updated guest data\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/GuestIdDTO'\n      responses:\n        200:\n          description: A successful operation\n        400:\n          description: Provided Guest UUID is not valid or does not match with guest UUID in JSON\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Provided Guest UUID is not valid or does not match with guest UUID in JSON\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: A Consumer could not be found using the provided UUID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A Consumer could not be found using the provided UUID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes the guest from the consumer\n      tags:\n        - guest_ids\n      operationId: deleteGuest\n      security: []\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The UUID of the consumer who owns or hosts the guest\n          required: true\n          schema:\n            type: string\n        - name: guest_id\n          in: path\n          description: The UUID of the guest to be deleted\n          required: true\n          schema:\n            type: string\n        - name: unregister\n          in: query\n          description: Unregister the consumer\n          required: true\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: A successful operation\n        400:\n          description: Provided guest uuid is not valid or does not match with guest uuid in JSON\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Provided guest uuid is not valid or does not match with guest uuid in JSON\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: The consumer cannot unregister becuase of unknown type or invalid credentails\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The consumer cannot unregister becuase of unknown type or invalid credentails\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: The consumer and/or guest could not be found using the provided uuid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The consumer and/or guest could not be found using the provided uuid\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        410:\n          description: A consumer was already deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A consumer was already deleted\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumers/{consumer_uuid}/entitlements/pool/{pool_id}:\n    delete:\n      description: Removes all Entitlements from a Consumer by Pool Id\n      tags:\n        - consumer\n      operationId: unbindByPool\n      security: [ ]\n      parameters:\n        - name: consumer_uuid\n          in: path\n          description: The ID of the Consumer\n          required: true\n          schema:\n            type: string\n        - name: pool_id\n          in: path\n          description: The ID of the Consumer\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Successful operation\n        404:\n          description: No entitlements found for this consumer \u0026 with this pool ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No entitlements found for this consumer \u0026 with this pool ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumertypes:\n    get:\n      description: Retrieves a list of known consumer types\n      tags:\n          - consumer_type\n      operationId: getConsumerTypes\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerTypeDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates a new consumer type\n      tags:\n        - consumer_type\n      operationId: createConsumerType\n      security: []\n      requestBody:\n          description: The consumer type to create\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerTypeDTO'\n      responses:\n        200:\n          description: ''\n          content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ConsumerTypeDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n  /consumertypes/{id}:\n    get:\n      description: Retrieves a specific consumer type\n      tags:\n          - consumer_type\n      operationId: getConsumerType\n      security: []\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the consumer type to retrieve\n        required: true\n        schema:\n          type: string\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerTypeDTO'\n        404:\n          description: A consumer type could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A consumer type could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates an existing consumer type\n      tags:\n        - consumer_type\n      operationId: updateConsumerType\n      security: []\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the consumer type to update\n        required: true\n        schema:\n          type: string\n      requestBody:\n          description: The fields and updated values to apply to the specified consumer type\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerTypeDTO'\n      responses:\n        200:\n          description: ''\n          content:\n              application/json:\n                schema:\n                  $ref: '#/components/schemas/ConsumerTypeDTO'\n        404:\n          description: A consumer type could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A consumer type could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Deletes an existing consumer type\n      tags:\n          - consumer_type\n      operationId: deleteConsumerType\n      security: []\n      parameters:\n      - name: id\n        in: path\n        description: The ID of the consumer type to delete\n        required: true\n        schema:\n          type: string\n      responses:\n        204:\n          description: ''\n        404:\n          description: A consumer type could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A consumer type could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /cdn:\n    get:\n      description: Retrieves a list of CDN's\n      tags:\n        - cdn\n      operationId: getContentDeliveryNetworks\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of CDN's\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CdnDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      tags:\n        - cdn\n      description: Creates a new CDN\n      operationId: createCdn\n      security: []\n      requestBody:\n        description: CDN to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CdnDTO'\n      responses:\n        200:\n          description: CDN successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CdnDTO'\n        400:\n          description: CDN label already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: CDN label already exists\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /cdn/{label}:\n    put:\n      tags:\n        - cdn\n      description: Updates a CDN\n      operationId: updateCdn\n      security: []\n      parameters:\n        - name: label\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Fields that needs to be updated for specified CDN\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CdnDTO'\n      responses:\n        200:\n          description: CDN successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CdnDTO'\n        404:\n          description: No such content delivery network\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No such content delivery network\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      tags:\n        - cdn\n      description: Deletes a CDN\n      operationId: deleteCdn\n      security: []\n      parameters:\n        - name: label\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: CDN successfully deleted\n        500:\n          description: Multiple CDN instances found with the same label\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Multiple CDN instances found with the same label\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /content:\n    get:\n      tags:\n        - content\n      description: Retrieves list of Content\n      operationId: listContent\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: Content successfully listed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n  /content/{content_uuid}:\n    get:\n      tags:\n        - content\n      description: Retrieves a single Content\n      operationId: getContent\n      security: []\n      parameters:\n        - name: content_uuid\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Content successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentDTO'\n        404:\n          description: Content with the given UUID was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Content with the given UUID was not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /crl:\n    get:\n      tags:\n        - certificate_revocation_list\n      description: Retrieves the list of all revoked certificate serial ids that are not expired\n      operationId: getCurrentCrl\n      security: []\n      responses:\n        200:\n          description: Certificate revocation list successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: integer\n                  format: int64\n        default:\n          $ref: '#/components/responses/default'\n\n  /deleted_consumers:\n    get:\n      description: Retrieves a list of deleted consumers by deletion date or all. List returned is the deleted Consumers.\n      tags:\n        - deleted_consumer\n      operationId: listByDate\n      parameters:\n        - in: query\n          name: date\n          schema:\n            type: string\n          description: Filter deleted consumers to those on or after this date\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of deleted consumers\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DeletedConsumerDTO'\n        400:\n          description: Date is invalid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Date is invalid\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Not Found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /distributor_versions:\n    get:\n      tags:\n        - distributor_versions\n      description: Retrieves a list of Distributor Versions\n      operationId: getVersions\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      parameters:\n        - name: name_search\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: capability\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DistributorVersionDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      tags:\n        - distributor_versions\n      description: Creates a Distributor Version\n      operationId: create\n      security: []\n      requestBody:\n        description: A new distributor version to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DistributorVersionDTO'\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DistributorVersionDTO'\n        400:\n          description: A distributor version already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A distributor version already exists\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /distributor_versions/{id}:\n    put:\n      tags:\n        - distributor_versions\n      description: Updates a Distributor Version\n      operationId: update\n      security: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The fields and updated values to apply to the specified distributor version\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DistributorVersionDTO'\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DistributorVersionDTO'\n        404:\n          description: A distibutor version could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A distibutor version could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      tags:\n        - distributor_versions\n      description: Deletes a Distributor Version\n      operationId: delete\n      security: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: A successful operation\n        404:\n          description: Distributor version could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Distributor version could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /environments:\n    get:\n      description: Lists the Environments.  Only available to super admins.\n      operationId: getEnvironments\n      tags:\n        - environment\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: Environment was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EnvironmentDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n  /environments/{env_id}:\n    get:\n      description: Retrieves a single Environment\n      operationId: getEnvironment\n      tags:\n        - environment\n      parameters:\n        - name: env_id\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Environment was successfully retrieved.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentDTO'\n        404:\n          description: \"No such environment: test_env\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"No such environment: test_env\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: \"Deletes an environment. WARNING: this will delete all consumers in the environment and revoke their entitlement certificates.\"\n      operationId: deleteEnvironment\n      tags:\n        - environment\n      parameters:\n        - name: env_id\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        204:\n          description: Environment was successfully deleted.\n        404:\n          description: \"No such environment: test_env\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"No such environment: test_env\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /environments/{env_id}/consumers:\n    post:\n      description: Creates a Consumer in an Environment\n      operationId: createConsumerInEnvironment\n      tags:\n        - environment\n      parameters:\n        - name: env_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: username\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: activation_keys\n          in: query\n          required: false\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ConsumerDTO'\n      security: []\n      responses:\n        200:\n          description: Consumer was successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerDTO'\n        404:\n          description: \"No such environment: test_env\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"No such environment: test_env\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        400:\n          description: Unit type must be specified or Two or more environments belong to different organizations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unit type must be specified or Two or more environments belong to different organizations\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Principal is not authorized to register with organization org\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"test_principal is not authorized to register with organization test_org\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /environments/{env_id}/content:\n    post:\n      description: Promotes a Content into an Environment. This call accepts multiple content sets to promote at once, after which all affected certificates for consumers in the environment will be regenerated. Consumers registered to this environment will now receive this content in their entitlement certificates. Because the certificate regeneraiton can be quite time consuming, this is done as an asynchronous job. The content will be promoted and immediately available for new entitlements, but existing entitlements could take some time to be regenerated and sent down to clients as they check in.\n      operationId: promoteContent\n      tags:\n        - environment\n      parameters:\n        - name: env_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: lazy_regen\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n      requestBody:\n        description: Contents to promote\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ContentToPromoteDTO'\n      security: []\n      responses:\n        200:\n          description: Content was successfully promoted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        404:\n          description: \"No such environment: test_env\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"No such environment: test_env\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        409:\n          description: The content with id test_env has already been promoted in this environment.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The content with id test_env has already been promoted in this environment.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: \"Demotes a Content from an Environment. Consumer's registered to this environment will not see this content in their entitlement certificates. (after they are regenerated and synced to clients) This call accepts multiple content IDs to demote at once, allowing us to mass demote, then trigger a cert regeneration. NOTE: This call expects the actual content IDs, *not* the ID created for each EnvironmentContent object created after a promotion. This is to help integrate with other management apps which should not have to track/lookup a specific ID for the content to demote.\"\n      operationId: demoteContent\n      tags:\n        - environment\n      parameters:\n        - name: env_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: content\n          in: query\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n        - name: lazy_regen\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n      security: []\n      responses:\n        200:\n          description: Content was successfully demoted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        404:\n          description: \"Content does not exist in environment: test_content\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"Content does not exist in environment: test_content\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements:\n    get:\n      description: Retrieves list of Entitlements. This endpoint supports paging with query parameters. For more details please visit https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n      operationId: listAllForConsumer\n      tags:\n        - entitlements\n      parameters:\n        - name: consumer\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: matches\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: attribute\n          in: query\n          description: Attribute filters\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              format: key:value\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n      security: []\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EntitlementDTO'\n        400:\n          description: Unit with ID \"test_id\" could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unit with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements/consumer/{consumer_uuid}/product/{product_id}:\n    get:\n      description: Checks Consumer for Product Entitlement\n      operationId: hasEntitlement\n      tags:\n        - entitlements\n      parameters:\n        - name: consumer_uuid\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Entitlement successfully found for customer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntitlementDTO'\n        404:\n          description: Entitlement could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Entitlement with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements/{entitlement_id}:\n    get:\n      description: Retrieves a single Entitlement\n      operationId: getEntitlement\n      tags:\n        - entitlements\n      parameters:\n        - name: entitlement_id\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EntitlementDTO'\n        404:\n          description: Entitlement could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Entitlement with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates an Entitlement. This only works for the quantity.\n      operationId: updateEntitlement\n      tags:\n        - entitlements\n      parameters:\n        - name: entitlement_id\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      requestBody:\n        description: Updated entitlement\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EntitlementDTO'\n      responses:\n        204:\n          description: A successful operation\n        400:\n          description: Quantity value must be greater than 0.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Quantity value must be greater than 0.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Entitlement could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Entitlement with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements/{dbid}/upstream_cert:\n    get:\n      description: Retrieves a Subscription Certificate\n      operationId: getUpstreamCert\n      tags:\n        - entitlements\n      parameters:\n        - name: dbid\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: A successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: |\n            Entitlement could not be found.\n            Unable to find upstream certificate for entitlement.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Entitlement with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements/{dbid}:\n    delete:\n      description: Deletes an Entitlement\n      operationId: unbind\n      tags:\n        - entitlements\n      parameters:\n        - name: dbid\n          in: path\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        204:\n          description: Entitlement successfuly deleted\n        404:\n          description: Entitlement could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Entitlement with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements/product/{product_id}:\n    put:\n      description: Regenerates the Entitlement Certificates for a Product\n      operationId: regenerateEntitlementCertificatesForProduct\n      tags:\n        - entitlements\n      parameters:\n        - name: product_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: lazy_regen\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n      security: []\n      responses:\n        202:\n          description: An entitlement certificate is being regenerated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n  /entitlements/{entitlement_id}/migrate:\n    put:\n      description: Migrate entitlements from one distributor consumer to another. Can specify full or partial quantity. No specified quantity will lead to full migration of the entitlement.\n      operationId: migrateEntitlement\n      tags:\n        - entitlements\n      parameters:\n        - name: entitlement_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: to_consumer\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: quantity\n          in: query\n          required: false\n          schema:\n            type: integer\n      security: []\n      x-java-response:\n        type: javax.ws.rs.core.Response\n        isContainer: false\n      responses:\n        200:\n          description: Entitlements successfuly migrated\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EntitlementDTO'\n        400:\n          description: |\n            Entitlement migration is not permissible for units this type.\n            Source and destination units must belong to the same organization.\n            The entitlement cannot be utilized by the destination unit.\n            The quantity specified must be greater than zero and less than or equal to the total for this entitlement.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Source and destination units must belong to the same organization\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Entitlement could not be found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Entitlement with ID \"test_uuid\" could not be found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /hypervisors:\n    post:\n      tags:\n        - hypervisors\n      description: Updates the list of Hypervisor Guests Allows agents such as virt-who to update its host list and associate the guests for each host. This is typically used when a host is unable to register to candlepin via subscription manager.  In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. @deprecated Use the asynchronous method.\n      operationId: hypervisorUpdate\n      security: []\n      requestBody:\n        description: Host and Guest mapping details\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: array\n                items:\n                  type: string\n      parameters:\n        - name: owner\n          in: query\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: create_missing\n          in: query\n          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n          schema:\n            type: boolean\n            default: true\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HypervisorUpdateResultDTO'\n        400:\n          description: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Could not update host/guest mapping. Host to guest mapping was not provided for hypervisor check-in or Auto-attach is disabled for owner\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner with provided key was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner with provided key was not found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /hypervisors/{owner}:\n    post:\n      tags:\n        - hypervisors\n      description: Creates or Updates the list of Hypervisor hosts Allows agents such as virt-who to update hosts' information . This is typically used when a host is unable to register to candlepin via subscription manager. In situations where consumers already exist it is probably best not to allow creation of new hypervisor consumers.  Most consumers do not have a hypervisorId attribute, so that should be added manually when necessary by the management environment. Default is true. If false is specified, hypervisorIds that are not found will result in a failed state of the job.\n      operationId: hypervisorUpdateAsync\n      security: []\n      requestBody:\n        description: Host and Guest mapping details\n        content:\n          text/plain:\n            schema:\n              type: string\n      parameters:\n        - name: owner\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: create_missing\n          in: query\n          description: Specify whether or not to create missing hypervisors. Default is true.  If false is specified, hypervisorIds that are not found will result in failed entries in the resulting HypervisorCheckInResult.\n          schema:\n            type: boolean\n            default: true\n        - name: reporter_id\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Host to guest mapping was not provided for hypervisor update.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Host to guest mapping was not provided for hypervisor update.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner with provided key was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner with provided key was not found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /hypervisors/{owner}/heartbeat:\n    put:\n      tags:\n        - hypervisors\n      description: Updates last check in date of all consumers of the given reporterId.\n      operationId: hypervisorHeartbeatUpdate\n      security: []\n      parameters:\n        - name: owner\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: reporter_id\n          in: query\n          schema:\n            type: string\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Provided reporter_id is absent or empty.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Provided reporter_id is absent or empty.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner with provided key was not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner with provided key was not found.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /jobs:\n    get:\n      description: Fetches a set of job statuses matching the given filter options\n      tags:\n        - jobs\n      operationId: listJobStatuses\n      parameters:\n        - in: query\n          name: id\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on ids\n        - in: query\n          name: key\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on keys\n        - in: query\n          name: state\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on statuses\n        - in: query\n          name: owner\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on owners\n        - in: query\n          name: principal\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on principals\n        - in: query\n          name: origin\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on origins\n        - in: query\n          name: executor\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Filter jobs based on executors\n        - in: query\n          name: after\n          schema:\n            type: string\n            format: date-time\n          description: Filter jobs to those on or after this date\n        - in: query\n          name: before\n          schema:\n            type: string\n            format: date-time\n          description: Filter jobs to those on or before this date\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A set of job statuses matching the given filter options\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Invalid date range.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid date range.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Unknown job states.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unknown job states.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Cleans up terminal jobs matching the provided criteria\n      tags:\n        - jobs\n      operationId: cleanupTerminalJobs\n      parameters:\n        - in: query\n          name: id\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on ids\n        - in: query\n          name: key\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on keys\n        - in: query\n          name: state\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on statuses\n        - in: query\n          name: owner\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on owners\n        - in: query\n          name: principal\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on principals\n        - in: query\n          name: origin\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on origins\n        - in: query\n          name: executor\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n          description: Cleans up jobs based on executors\n        - in: query\n          name: after\n          schema:\n            type: string\n            format: date-time\n          description: Cleans up jobs to those on or after this date\n        - in: query\n          name: before\n          schema:\n            type: string\n            format: date-time\n          description: Cleans up jobs to those on or before this date\n        - in: query\n          name: force\n          schema:\n            type: boolean\n            default: false\n          description: Cleans up job forcefully\n      security: []\n      responses:\n        200:\n          description: Cleaned up jobs count\n          content:\n            application/json:\n              schema:\n                type: integer\n        400:\n          description: Invalid date range\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid date range\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Unknown job states\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unknown job states\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /jobs/{id}:\n    get:\n      description: Fetches the job status associated with the specified job ID\n      tags:\n        - jobs\n      operationId: getJobStatus\n      parameters:\n        - in: path\n          name: id\n          description: The ID of the job to retrieve\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Job status associated with the specified job ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Job ID is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Job ID is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: A job could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A job could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Cancels the job associated with the specified job ID\n      tags:\n        - jobs\n      operationId: cancelJob\n      parameters:\n        - in: path\n          name: id\n          description: The ID of the job to cancel\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Job status associated with the specified job ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Job ID is null or empty or\n            job is already in a terminal state or otherwise cannot be canceled at this time\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Job ID is null or empty.\n                  job is already in a terminal state or otherwise cannot be canceled at this time\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: A job could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A job could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /jobs/scheduler:\n    get:\n      description: Fetches the status of the job scheduler for this Candlepin node\n      tags:\n        - jobs\n      operationId: getSchedulerStatus\n      security: []\n      responses:\n        200:\n          description: Status of the job scheduler for this Candlepin node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchedulerStatusDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Enables or disables the job scheduler for this Candlepin node\n      tags:\n        - jobs\n      parameters:\n        - in: query\n          name: running\n          description: Boolean value to set running status\n          schema:\n            type: boolean\n            default: true\n      operationId: setSchedulerStatus\n      security: []\n      responses:\n        200:\n          description: Status of the job scheduler for this Candlepin node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SchedulerStatusDTO'\n        500:\n          description: Error setting scheduler status\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Error setting scheduler status\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /jobs/schedule/{jobKey}:\n    post:\n      description: Schedules a job using the specified key and job properties\n      tags:\n        - jobs\n      parameters:\n        - in: path\n          name: jobKey\n          description: Job key\n          required: true\n          schema:\n            type: string\n      operationId: scheduleJob\n      security: []\n      responses:\n        200:\n          description: Status of the job scheduler for this Candlepin node\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Job key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Job key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Job is not configured for manual scheduling\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Job is not configured for manual scheduling\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        500:\n          description: An unexpected exception has occurred while scheduling job\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An unexpected exception has occurred while scheduling job\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners:\n    get:\n      description: Retrieves a list of owners that match the key provided, or all owners if no key was provided\n      tags:\n        - owner\n      operationId: listOwners\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: key\n          in: query\n          description: The owner key\n          required: false\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: A list of owners\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OwnerDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates an owner\n      tags:\n        - owner\n      operationId: createOwner\n      security: []\n      requestBody:\n        description: Owner to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OwnerDTO'\n      responses:\n        200:\n          description: Owner successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OwnerDTO'\n        400:\n          description: |\n            Invalid inputs, Owner cannot be created.\n            Reasons could be, invalid key\n            or the default service level is specified\n            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Invalid inputs, Owner cannot be created.\n                  Reasons could be, invalid key\n                  or the default service level is specified\n                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}:\n    get:\n      description: Retrieves a single owner\n      tags:\n        - owner\n      operationId: getOwner\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Owner successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OwnerDTO'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: |\n        Updates an owner.\n        Note: To un-set the defaultServiceLevel for an owner, submit an empty string.\n      tags:\n        - owner\n      operationId: updateOwner\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Owner to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OwnerDTO'\n      responses:\n        200:\n          description: Owner successfully updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OwnerDTO'\n        400:\n          description: |\n            Invalid inputs, Owner cannot be updated.\n            Reasons could be, invalid key\n            or the owner content access mode and content access mode list cannot be set directly in standalone mode\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Invalid inputs, Owner cannot be updated.\n                  Reasons could be, invalid key\n                  or the owner content access mode and content access mode list cannot be set directly in standalone mode\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes an owner\n      tags:\n        - owner\n      operationId: deleteOwner\n      parameters:\n        - name: owner_key\n          in: path\n          description: The owner key\n          required: true\n          schema:\n            type: string\n        - name: revoke\n          in: query\n          description: Boolean value to revoke an owner\n          schema:\n            type: boolean\n            default: true\n        - name: force\n          in: query\n          description: Boolean value to forcefully delete an owner. This is not in use.\n          schema:\n            type: boolean\n            default: false\n      security: []\n      responses:\n        204:\n          description: Owner successfully deleted\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        409:\n          description: Conflict occured while owner deleting an owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Conflict occured while owner deleting an owner\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/activation_keys:\n    get:\n      description: Retrieves a list of activation keys for an owner\n      tags:\n        - owner\n      operationId: ownerActivationKeys\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: The name of the activation key\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Activation keys successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates an activation key for the owner\n      tags:\n        - owner\n      operationId: createActivationKey\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Activation key to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActivationKeyDTO'\n      responses:\n        200:\n          description: Activation key for the owner successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActivationKeyDTO'\n        400:\n          description: |\n            Invalid inputs, activation key cannot be created.\n            Reasons could be,\n            The activation key name is already in use for owner\n            or the activation key name must be alphanumeric or include the characters - or _\n            or the name for activation key is not provided\n            or owner key is not provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Invalid inputs, activation key cannot be created.\n                  Reasons could be,\n                  The activation key name is already in use for owner\n                  or the activation key name must be alphanumeric or include the characters - or _\n                  or the name for activation key is not provided\n                  or owner key is not provided\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/content:\n    get:\n      description: Retrieves list of owner contents\n      tags:\n        - owner_content\n      operationId: listOwnerContent\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner whose content has to be retrieved\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Content successfully listed\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ContentDTO'\n        404:\n          description: Owner key is null, empty or could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null, empty or could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates a content for owner\n      tags:\n        - owner_content\n      operationId: createContent\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Content to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContentDTO'\n      responses:\n        200:\n          description: Created a content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentDTO'\n        400:\n          description: Invalid inputs, Content cannot be created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, Content cannot be created\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/content/{content_id}:\n    get:\n      description: Retrieves a single content\n      tags:\n        - owner_content\n      operationId: getOwnerContent\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner whose content has to be retrieved\n          required: true\n          schema:\n            type: string\n        - name: content_id\n          in: path\n          description: The id of the content to be retrieved\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentDTO'\n        400:\n          description: Owner Key or ID of the Content is null, empty or could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                  displayMessage: Owner Key or ID of the Content is null, empty or could not be found\n                  requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates a Content\n      tags:\n        - owner_content\n      operationId: updateContent\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner to be updated\n          required: true\n          schema:\n            type: string\n        - name: content_id\n          in: path\n          description: The ID of the Content to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Content to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ContentDTO'\n      responses:\n        200:\n          description: Updated content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentDTO'\n        400:\n          description: Invalid inputs, could not update content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, could not update Content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Deletes a Content\n      tags:\n        - owner_content\n      operationId: remove\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner whose content has to be deleted\n          required: true\n          schema:\n            type: string\n        - name: content_id\n          in: path\n          description: The ID of the content to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: A successful operation\n        400:\n          description: Invalid inputs, content could not be deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, content could not be deleted\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/content/batch:\n    post:\n      description: Creates Contents in bulk\n      tags:\n        - owner_content\n      operationId: createBatchContent\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: key of the owner whose content has to be created\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: List of contents to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                $ref: '#/components/schemas/ContentDTO'\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      responses:\n        200:\n          description: Contents created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentDTO'\n        400:\n          description: Invalid inputs, could not create content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, could not create content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/consumers:\n    get:\n      description: Retrieves a list of Consumers for the Owner\n      tags:\n        - owner\n      operationId: listConsumers\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: username\n          in: query\n          description: The username of the consumer\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: The consumer type\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n        - name: uuid\n          in: query\n          description: The UUID of consumers\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hypervisor_id\n          in: query\n          description: The hypervisor IDs\n          schema:\n            type: array\n            items:\n              type: string\n        - name: fact\n          in: query\n          description: The consumer facts\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/KeyValueParamDTO'\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n      security: []\n      responses:\n        200:\n          description: Consumers successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/consumers/count:\n    get:\n      description: Retrieves a count of consumers for the owner\n      tags:\n        - owner\n      operationId: countConsumers\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: username\n          in: query\n          description: The username of the consumer\n          schema:\n            type: string\n        - name: type\n          in: query\n          description: The consumer type\n          schema:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n        - name: uuid\n          in: query\n          description: The UUID of consumers\n          schema:\n            type: array\n            items:\n              type: string\n        - name: hypervisor_id\n          in: query\n          description: The hypervisor IDs\n          schema:\n            type: array\n            items:\n              type: string\n      security: []\n      responses:\n        200:\n          description: Consumer counts successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: integer\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/consumers_system_purpose:\n    get:\n      description: Retrieves an aggregate of the system purpose settings of the owner's consumers\n      tags:\n        - owner\n      operationId: getConsumersSyspurpose\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description:  The system purpose settings sucessfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/content_access:\n    get:\n      description: Retrieves content access of an Owner\n      tags:\n        - owner\n      operationId: getOwnerContentAccess\n      security: [ ]\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns content access of an owner.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ContentAccessDTO'\n        404:\n          description: Owner was not found!\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner was not found!\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/entitlements:\n    get:\n      description: |\n        Retrieves the list of entitlements for an owner.\n        This endpoint supports paging with query parameters. For more details please visit\n        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n      tags:\n        - owner\n      operationId: ownerEntitlements\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: product\n          in: query\n          description: The product id\n          schema:\n            type: string\n        - name: attribute\n          in: query\n          description: Attribute filters\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n              format: key:value\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n      security: []\n      responses:\n        200:\n          description: Entitlement details successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EntitlementDTO'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: |\n        Starts an asynchronous healing for the given Owner.\n        At the end of the process the idea is that all of the consumers\n        in the owned by the owner will be up to date.\n      tags:\n        - owner\n      operationId: healEntire\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: The Owner is being healed\n          content:\n            application/json:\n              schema:\n               $ref: '#/components/schemas/AsyncJobStatusDTO'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/environments:\n    get:\n      description: Retrieves a list of environment for an owner\n      tags:\n        - owner\n      operationId: listEnvironments\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: name\n          in: query\n          description: The name of the environment\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Environments successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EnvironmentDTO'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates an environment for the owner\n      tags:\n        - owner\n      operationId: createEnv\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Environment to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnvironmentDTO'\n      responses:\n        200:\n          description: Environment for the owner successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentDTO'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/hypervisors:\n    get:\n      description: Retrieves a list of hypervisors for an owner\n      tags:\n        - owner\n      operationId: getHypervisors\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: hypervisor_id\n          in: query\n          description: The list of hypervisor Ids\n          required: false\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: A list of hypervisors successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConsumerDTOArrayElement'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/imports:\n    get:\n      description: Retrieves a list of import records for an owner\n      tags:\n        - owner\n      operationId: getImports\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Import records successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ImportRecordDTO'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An import owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An import owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: |\n        Imports a manifest zip file for the given organization.\n        This will bring in any products, content, and subscriptions that were\n        assigned to the distributor who generated the manifest.\n        Note: This endpoint is deprecated. Please use /owners/{owner_key}/imports/async\n      tags:\n        - owner\n      operationId: importManifest\n      deprecated: true\n      security: []\n      requestBody:\n        description: A manifest file to be imported\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                input:\n                  type: string\n                  format: binary\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: This is used to override the conflicts\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: Manifest successfully imported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ImportRecordDTO'\n        400:\n          description: |\n            Bad request error. Reasons could be,\n            Owner key is null\n            or empty or Unknown conflict to force\n            or format error of the data in a manifest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Bad request error. Reasons could be,\n                  Owner key is null\n                  or empty or Unknown conflict to force\n                  or format error of the data in a manifest\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An import owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An import owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        500:\n          description: |\n            Internal server error. Reasons could be,\n            Reading error during importing\n            or problem with archive\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Internal server error. Reasons could be,\n                  Reading error during importing\n                  or problem with archive\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: |\n        Removes Imports for an Owner. Cleans out all imported subscriptions\n        and triggers a background refresh pools. Link to an upstream distributor is\n        removed for the owner, so they can import from another distributor. Other\n        owners can also now import the manifests originally used in this owner. This\n        call does not differentiate between any specific import, it just destroys all\n        subscriptions with an upstream pool ID, essentially anything from an import.\n        Custom subscriptions will be left alone. Imports do carry rules and product\n        information which is global to the candlepin server. This import data is *not*\n        undone, we assume that updates to this data can be safely kept.\n      tags:\n        - owner\n      operationId: undoImports\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      security: [ ]\n      responses:\n        200:\n          description: Imports for an Owner successfully removed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        404:\n          description: An import owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An import owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/imports/async:\n    post:\n      description: |\n        Initiates an asynchronous manifest import for the given organization.\n        This will bring in any products, content, and subscriptions that were\n        assigned to the distributor who generated the manifest.\n      tags:\n        - owner\n      operationId: importManifestAsync\n      security: []\n      requestBody:\n        description: A manifest file to be imported\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                input:\n                  type: string\n                  format: binary\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: force\n          in: query\n          description: This is used to override the conflicts\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: Manifest successfully imported\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An import owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An import owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        500:\n          description: |\n            Internal server error. Reasons could be,\n            An unexpected exception occurred while scheduling job\n            or error reading export archive\n            or error storing uploaded archive for asynchronous processing\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Internal server error. Reasons could be,\n                  An unexpected exception occurred while scheduling job\n                  or error reading export archive\n                  or error storing uploaded archive for asynchronous processing\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/info:\n    get:\n      description: Retrieves the Owner Info for an Owner\n      tags:\n        - owner\n      operationId: getOwnerInfo\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Owner info successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OwnerInfo'\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/log:\n    put:\n      description: Sets the log level for an owner\n      tags:\n        - owner\n      operationId: setLogLevel\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: level\n          in: query\n          description: The log level\n          required: false\n          schema:\n            type: string\n            default: DEBUG\n            enum:\n              - ALL\n              - TRACE\n              - DEBUG\n              - INFO\n              - WARN\n              - ERROR\n              - OFF\n      responses:\n        200:\n          description: Log level successfully set\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OwnerDTO'\n        400:\n          description: |\n            Provided level is not a valid log level\n            or owner key is not provided\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Provided level is not a valid log level\n                  or owner key is not provided\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Remove the log level of an owner\n      tags:\n        - owner\n      operationId: deleteLogLevel\n      parameters:\n        - name: owner_key\n          in: path\n          description: The owner key\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        204:\n          description: Owner log level successfully removed\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/pools:\n    get:\n      description: |\n        Retrieves a list of Pools for an Owner. This endpoint\n        supports paging with query parameters. For more details please visit\n        https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin\n      tags:\n        - owner\n      operationId: listOwnerPools\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: consumer\n          in: query\n          description: The consumer UUID\n          schema:\n            type: string\n        - name: activation_key\n          in: query\n          description: The activation key name\n          schema:\n            type: string\n        - name: product\n          in: query\n          description: The product id\n          schema:\n            type: string\n        - name: subscription\n          in: query\n          description: The subscription id\n          schema:\n            type: string\n        - name: listall\n          in: query\n          description: |\n            Includes pools which are not applicable based on some of the consumer's current system facts\n            (i.e. system architecture, sockets, cores, ram, storage_band, instance_multiplier), but will\n            still filter pools based on other factors, such as pools restricted to a consumer of specific\n            types, usernames, or uuids; pools restricted to guests of specific hosts; non-multi-entitlement\n            pools that the consumer has already attached; unmapped guest pools for which the consumer is\n            ineligible; and expired pools.\n          schema:\n            type: boolean\n            default: false\n        - name: activeon\n          in: query\n          description: Active on date\n          schema:\n            type: string\n            format: date-time\n        - name: matches\n          in: query\n          description: |\n            Find pools matching the given pattern in a variety of fields\n            * and ? wildcards are supported; may be specified multiple times\n          schema:\n            type: array\n            items:\n              type: string\n        - name: attribute\n          in: query\n          description: The attributes to return based on the specified types\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/KeyValueParamDTO'\n        - name: add_future\n          in: query\n          description: |\n            When set to true, it will add future dated pools to the result,\n            based on the activeon date\n          schema:\n            type: boolean\n            default: false\n        - name: only_future\n          in: query\n          description: |\n            When set to true, it will return only future dated pools to the result,\n            based on the activeon date\n          schema:\n            type: boolean\n            default: false\n        - name: after\n          in: query\n          description: |\n            Will only return pools with a start date after the supplied date.\n            Overrides the activeOn date\n          schema:\n            type: string\n            format: date-time\n        - name: poolid\n          in: query\n          description: |\n            One or more pool IDs to use to filter the output; only pools with IDs matching\n            those provided will be returned; may be specified multiple times\n          schema:\n            type: array\n            items:\n              type: string\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n\n      security: []\n      responses:\n        200:\n          description: Pools successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PoolDTO'\n        400:\n          description: Invalid inputs, pools cannot be listed.\n            Reasons could be,\n            Owner key is null or empty\n            or the consumer specified does not belong to owner on path\n            or activationKey could not be found with provided key\n            or the flags add_future and only_future cannot be used at the same time\n            or the flags add_future and only_future cannot be used with the parameter after\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, pools cannot be listed.\n                  Reasons could be,\n                  Owner key is null or empty\n                  or the consumer specified does not belong to owner on path\n                  or activationKey could not be found with provided key\n                  or the flags add_future and only_future cannot be used at the same time\n                  or the flags add_future and only_future cannot be used with the parameter after\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: User cannot access the consumer\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: User cannot access the consumer\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: |\n            Invalid inputs, pools cannot be listed.\n            Reasons could be,\n            An owner could not be found using the provided key\n            or the consumer not found using the provided uuid\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Invalid inputs, pools cannot be listed.\n                  Reasons could be,\n                  An owner could not be found using the provided key\n                  or the consumer not found using the provided uuid\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: |\n        Creates a custom pool for an Owner. Floating pools are not tied to any\n        upstream subscription, and are most commonly used for custom content delivery\n        in Satellite. Also helps in on-site deployment testing\n      tags:\n        - owner\n      operationId: createPool\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: A pool to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PoolDTO'\n      responses:\n        200:\n          description: Pool successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PoolDTO'\n        400:\n          description: |\n            Invalid inputs, pool cannot be created.\n            Reasons could be,\n            Owner key is null or empty\n            or Pool product ID not specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, pool cannot be created.\n                  Reasons could be,\n                  Owner key is null or empty\n                  or Pool product ID not specified\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: |\n        Updates a pool for an Owner. assumes this is a normal pool, and\n        errors out otherwise cause we cannot create master pools from bonus pools\n      tags:\n        - owner\n      operationId: updatePool\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: A pool to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PoolDTO'\n      responses:\n        200:\n          description: Pool successfully updated\n        400:\n          description: |\n            Invalid inputs, pool cannot be updated.\n            Reasons could be,\n            Owner key is null or empty\n            or Pool product ID not specified\n            or cannot update bonus pools, as they are auto generated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Invalid inputs, pool cannot be updated.\n                  Reasons could be,\n                  Owner key is null or empty\n                  or Pool product ID not specified\n                  or cannot update bonus pools, as they are auto generated\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: |\n            Invalid inputs, pool cannot be created.\n            Reasons could be,\n            An owner could not be found using the provided key\n            or pool could not be found using provided pool with the ID\n            or provided pool does not belong to the specified owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Invalid inputs, pool cannot be created.\n                  Reasons could be,\n                  An owner could not be found using the provided key\n                  or pool could not be found using provided pool with the ID\n                  or provided pool does not belong to the specified owner\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/products:\n    get:\n      description: Retrieves a list of products by owner\n      tags:\n        - owner_product\n      operationId: getProductsByOwner\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product\n          in: query\n          description: List of product ID's\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        200:\n          description: Retrieves a list of products by owner\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ProductDTO'\n        404:\n          description: Owner key could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Creates a product for an owner\n      tags:\n        - owner_product\n      operationId: createProductByOwner\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: A product to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProductDTO'\n      responses:\n        200:\n          description: Product successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        400:\n          description: Invalid inputs, unable to create product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, unable to create product\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/products/{product_id}:\n    get:\n      description: Retrieves a single product for an owner\n      tags:\n        - owner_product\n      operationId: getProductByOwner\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: Product ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Retrieves a single product for an owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        404:\n          description: Owner key or product ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key or product ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates a product for an owner\n      tags:\n        - owner_product\n      operationId: updateProductByOwner\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: Product ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Product to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProductDTO'\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        400:\n          description: Invalid inputs, unable to update product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, unable to update product\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Product is locked. Unable to update product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product is locked. Unable to update product\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a product for an owner\n      tags:\n        - owner_product\n      operationId: deleteProductByOwner\n      security: []\n      parameters:\n        - in: path\n          name: owner_key\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: product_id\n          description: Product ID\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Product successfully deleted.\n        400:\n          description: Product cannot be deleted while subscriptions exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product cannot be deleted while subscriptions exists\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Product is locked. Unable to delete product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product is locked. Unable to delete product\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key or product ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key or product ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/products/{product_id}/subscriptions:\n    put:\n      description: Refreshes Pools by Product\n      tags:\n        - owner_product\n      operationId: refreshPoolsForProduct\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: Product ID\n          required: true\n          schema:\n            type: string\n        - name: lazy_regen\n          in: query\n          description: Regenerate certificates immediatelly or allow them to be regenerated on demand\n          required: true\n          schema:\n            type: boolean\n            default: true\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: Unable to fulfill refresh pools request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Unable to fulfill refresh pools request\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key or product ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key or product ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/products/{product_id}/certificate:\n    get:\n      description: Retrieves a product certificate for an owner\n      tags:\n        - owner_product\n      operationId: getProductCertificateByOwner\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: Product ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Retrieves a product certificate for an owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductCertificateDTO'\n        400:\n          description: Only numeric product IDs are allowed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Only numeric product IDs are allowed\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key or product ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key or product ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/products/{product_id}/content/{content_id}:\n    post:\n      description: Adds content to a product\n      tags:\n        - owner_product\n      operationId: addContent\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: Product ID\n          required: true\n          schema:\n            type: string\n        - name: content_id\n          in: path\n          description: Content ID\n          required: true\n          schema:\n            type: string\n        - name: enabled\n          in: query\n          description: Content enabled flag\n          required: true\n          schema:\n            type: boolean\n      responses:\n        200:\n          description: Content added to a product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        400:\n          description: Invalid inputs, unable to add content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, unable to add content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Product is locked. Unable to add content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product is locked. Unable to add content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a single Content from a product\n      tags:\n        - owner_product\n      operationId: removeContent\n      security: []\n      parameters:\n        - in: path\n          name: owner_key\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: product_id\n          description: Product ID\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: content_id\n          description: Content ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Content removed from a product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        400:\n          description: Invalid inputs, unable to remove content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, unable to remove content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Product is locked. Unable to remove content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product is locked. Unable to remove content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/products/{product_id}/batch_content:\n    post:\n      description: Adds content to a product in bulk\n      tags:\n        - owner_product\n      operationId: addBatchContent\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - name: product_id\n          in: path\n          description: Product ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Content map\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              additionalProperties:\n                type: boolean\n      responses:\n        200:\n          description: Content added to a product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        400:\n          description: Invalid inputs, unable to add content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, unable to add content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Product is locked. Unable to add content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product is locked. Unable to add content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes content from a product in batch\n      tags:\n        - owner_product\n      operationId: removeBatchContent\n      security: []\n      parameters:\n        - in: path\n          name: owner_key\n          description: Owner key\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: product_id\n          description: Product ID\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Content IDs\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              items:\n                type: string\n      responses:\n        200:\n          description: Content removed from a product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        400:\n          description: Invalid inputs, unable to remove content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Invalid inputs, unable to remove content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Product is locked. Unable to remove content\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product is locked. Unable to remove content\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/servicelevels:\n    get:\n      description: Retrieves a list of support levels for an owner\n      tags:\n        - owner\n      operationId: ownerServiceLevels\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: exempt\n          in: query\n          description: exempt\n          schema:\n            type: string\n            default: false\n      responses:\n        200:\n          description:  A list of support levels for an owner\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/subscriptions:\n    get:\n      description: Retrieves a list of subscriptions for an owner\n      tags:\n        - owner\n      operationId: getOwnerSubscriptions\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description:  A list of subscriptions for an owner\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubscriptionDTO'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: |\n        Triggers an asynchronous \"refresh\" operation, updating the entitlement and subscription\n        information for the specified owner.\n        This endpoint is only functional in hosted mode, and no operation will be triggered\n        when called in a standalone, or on-site, deployment.\n      tags:\n        - owner\n      operationId: refreshPools\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n        - name: auto_create_owner\n          in: query\n          description: Specify whether or not to create an owner automatically. Default is false.\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: A successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AsyncJobStatusDTO'\n        404:\n          description: Owner key could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/system_purpose:\n    get:\n      description: Retrieves the system purpose settings available to an owner\n      tags:\n        - owner\n      operationId: getSyspurpose\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description:  The details of system purpose settings for an owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SystemPurposeAttributesDTO'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/uebercert:\n    get:\n      description: Retrieves the Ueber Entitlement Certificate\n      tags:\n        - owner\n      operationId: getUeberCertificate\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Ueber Entitlement Certificate for the owner successfully retrieved\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UeberCertificateDTO'\n        404:\n          description: |\n            An owner could not be found using the provided key\n            or Uber certificate for owner was not found. Please generate one.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  An owner could not be found using the provided key\n                  or Uber certificate for owner was not found. Please generate one.\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: |\n        Creates an Ueber Entitlement Certificate. If a certificate\n        already exists, it will be regenerated.\n      tags:\n        - owner\n      operationId: createUeberCertificate\n      security: []\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Ueber Entitlement Certificate for the owner successfully created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UeberCertificateDTO'\n        400:\n          description: Problem generating ueber cert for an owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Problem generating ueber cert for an owner\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: An owner could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: An owner could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /owners/{owner_key}/upstream_consumers:\n    get:\n      description: Retrieves a list of upstream consumers for an owner\n      tags:\n        - owner\n      operationId: getUpstreamConsumers\n      security: []\n      x-java-response:\n        type: Iterable\n        isContainer: true\n      parameters:\n        - name: owner_key\n          in: path\n          description: The key of the owner\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description:  A list of upstream consumers successfully retrieved\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UpstreamConsumerDTOArrayElement'\n        400:\n          description: Owner key is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Owner key could not be found using the provided key\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Owner key could not be found using the provided key\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /products/{product_uuid}:\n    get:\n      description: Retrieves a single Product\n      tags:\n        - products\n      operationId: getProduct\n      parameters:\n        - in: path\n          name: product_uuid\n          description: The product UUID\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: A single product\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductDTO'\n        404:\n          description: Product not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /products/{product_uuid}/certificate:\n    get:\n      description: Retrieves a Certificate for a Product\n      tags:\n        - products\n      operationId: getProductCertificate\n      parameters:\n        - in: path\n          name: product_uuid\n          description: The product UUID\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: A product certificate\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductCertificateDTO'\n        404:\n          description: Product not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Product not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /pools:\n    get:\n      description: |\n        Retrieves a list of pools @deprecated Use the method on /owners.\n        This endpoint supports paging with query parameters.\n        For more details please visit https://www.candlepinproject.org/docs/candlepin/pagination.html#paginating-results-from-candlepin.\n      tags:\n        - pools\n      operationId: listPools\n      parameters:\n        - in: query\n          name: owner\n          description: Owner ID\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: consumer\n          description: Consumer UUID\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: product\n          description: Product ID\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: listall\n          description: |\n            Use with consumerUuid to list all pools available to the consumer.\n            This will include pools which would otherwise be omitted due to a rules warning. (i.e. not recommended)\n            Pools that trigger an error however will still be omitted. (no entitlements available, consumer type mismatch, etc)\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - in: query\n          name: activeon\n          description: Uses ISO 8601 format\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/paging_page\"\n        - $ref: \"#/components/parameters/paging_per_page\"\n        - $ref: \"#/components/parameters/paging_order\"\n        - $ref: \"#/components/parameters/paging_sort_by\"\n      security: []\n      responses:\n        200:\n          description: A list of pools\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PoolDTO'\n        400:\n          description: |\n            Both consumer(unit) and owner are given,\n            or a product id is specified without a consumer(unit) or owner\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: |\n                  Both consumer(unit) and owner are given,\n                  or a product id is specified without a consumer(unit) or owner\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        403:\n          description: Users cannot access either of the consumer, owner, or pools\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Users cannot access either of the consumer, owner, or pools\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Specified consumer(unit) or owner is not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Specified consumer(unit) or owner is not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /pools/{pool_id}:\n    get:\n      description: Retrieves a single pool\n      tags:\n        - pools\n      operationId: getPool\n      parameters:\n        - in: path\n          name: pool_id\n          description: Pool ID\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: consumer\n          description: Consumer UUID\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: activeon\n          description: Uses ISO 8601 format\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Retrieves a single pool by its ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PoolDTO'\n        403:\n          description: Users cannot access consumer(unit)\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Users cannot access consumer(unit)\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Subscription pool or consumer(unit) not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Subscription pool or consumer(unit) not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a pool\n      tags:\n        - pools\n      operationId: deletePool\n      parameters:\n        - in: path\n          name: pool_id\n          description: Pool ID\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Pool removed successfully\n        400:\n          description: Cannot delete bonus pools, as they are auto generated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Cannot delete bonus pools, as they are auto generated\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Subscription pool not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Subscription pool not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /pools/{pool_id}/cdn:\n    get:\n      description: Retrieve a CDN for a Pool\n      tags:\n        - pools\n      operationId: getPoolCdn\n      parameters:\n        - in: path\n          name: pool_id\n          description: Pool ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: CDN details for a Pool\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CdnDTO'\n        404:\n          description: Subscription pool with given ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Subscription pool with given ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /pools/{pool_id}/entitlements:\n    get:\n      description: Retrieve a list of entitlements for a pool\n      tags:\n        - pools\n      operationId: getPoolEntitlements\n      parameters:\n        - in: path\n          name: pool_id\n          description: Pool ID\n          required: true\n          schema:\n            type: string\n      x-java-response:\n        type: Iterable\n        isContainer: true\n        security: []\n      responses:\n        200:\n          description: A list of entitlements\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EntitlementDTO'\n        404:\n          description: Subscription pool with given ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Subscription pool with given ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /pools/{pool_id}/entitlements/consumer_uuids:\n    get:\n      description: Retrieve a list of Consumer UUIDs attached to a pool. Available only to superadmins\n      tags:\n        - pools\n      operationId: listEntitledConsumerUuids\n      parameters:\n        - in: path\n          name: pool_id\n          description: Pool ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: A list of consumer UUIDs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n        404:\n          description: Subscription pool with given ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Subscription pool with given ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /pools/{pool_id}/cert:\n    get:\n      description: |\n        Retrieves a Subscription Certificate as JSON (when Content-Type is application/json)\n        or as PEM (when Content-Type is text/plain)\n      tags:\n        - pools\n      operationId: getSubCert\n      parameters:\n        - in: path\n          name: pool_id\n          description: Pool ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Certificate details for a Pool\n          content:\n            text/plain:\n              schema:\n                type: object\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateDTO'\n        404:\n          description: Pool or certificate for given ID could not be found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Pool or certificate for given ID could not be found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /products/owners:\n    get:\n      description: Retrieves a list of Owners by Product\n      tags:\n        - products\n      operationId: getProductOwners\n      parameters:\n        - in: query\n          name: product\n          description: Multiple product Ids\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: Owners for the provided product Ids\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OwnerDTO'\n        400:\n          description: No product IDs specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No product IDs specified\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /products/subscriptions:\n    put:\n      description: Refreshes Pools by Product\n      tags:\n        - products\n      operationId: refreshPoolsForProducts\n      parameters:\n        - in: query\n          name: product\n          description: Multiple product Ids\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n        - in: query\n          name: lazy_regen\n          description: Regenerate certificates immediatelly or allow them to be regenerated on demand\n          required: false\n          schema:\n            type: boolean\n            default: true\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of statuses of the created refresh pools jobs\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AsyncJobStatusDTO'\n        400:\n          description: No product IDs specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No product IDs specified\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /roles:\n    get:\n      description: Retrieves a list of Roles\n      tags:\n        - roles\n      operationId: getRoles\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of roles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      tags:\n        - roles\n      description: Creates a Role\n      operationId: createRole\n      security: []\n      requestBody:\n        description: A role to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleDTO'\n      responses:\n        200:\n          description: Role successfully created.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Role is null or empty or role name not specified\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role is null or empty or role name not specified\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        409:\n          description: Role already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role already exists\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /roles/{role_name}:\n    get:\n      description: Retrieves a single role by its name.\n      tags:\n        - roles\n      operationId: getRoleByName\n      parameters:\n        - in: path\n          name: role_name\n          description: Role name\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Returns a role\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Role name is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role name is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates Role. To avoid race conditions, we do not support updating the user or permission\n        collections. Currently this call will only update the role name. See the specific nested POST/DELETE\n        calls for modifying users and permissions.\n      tags:\n        - roles\n      operationId: updateRole\n      security: []\n      parameters:\n        - name: role_name\n          in: path\n          description: Role name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Role\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/RoleDTO'\n      responses:\n        200:\n          description: Returns updated role\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Role name is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role name is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a Role\n      tags:\n        - roles\n      operationId: deleteRoleByName\n      parameters:\n        - in: path\n          name: role_name\n          description: Role name\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        204:\n          description: Role successfully deleted.\n        400:\n          description: Role name is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role name is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /roles/{role_name}/users/{username}:\n    post:\n      tags:\n        - roles\n      description: Adds a User to a Role\n      operationId: addUserToRole\n      security: []\n      parameters:\n        - in: path\n          name: role_name\n          description: Role name\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          description: User name\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: User added to the role\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Either role or username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Either role or username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role or Username not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role or Username not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a User from a Role\n      tags:\n        - roles\n      operationId: deleteUserFromRole\n      parameters:\n        - in: path\n          name: role_name\n          description: Role name\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          description: User name\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: User from a role is removed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Either role or username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Either role or username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role or Username not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role or Username not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /roles/{role_name}/permissions:\n    post:\n      tags:\n        - roles\n      description: Adds a Permission to a Role\n      operationId: addRolePermission\n      security: []\n      parameters:\n        - in: path\n          name: role_name\n          description: Role name\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Permission Blueprint\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PermissionBlueprintDTO'\n      responses:\n        200:\n          description: Permission to a Role is added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Access type NONE not supported, or role name is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Access type NONE not supported\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /roles/{role_name}/permissions/{perm_id}:\n    delete:\n      description: Removes a Permission from a Role\n      tags:\n        - roles\n      operationId: removeRolePermission\n      parameters:\n        - in: path\n          name: role_name\n          description: Role name\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: perm_id\n          description: Permission Id\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: Permission is removed from a role\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Role name is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role name is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Role not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Role not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /rules:\n    get:\n      description: Retrieves the Rules\n      tags:\n        - rules\n      operationId: getRules\n      security: []\n      responses:\n        200:\n          description: Returns the rules\n          content:\n            text/plain:\n              schema:\n                type: string\n        404:\n          description: No rules file found in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No rules file found in the database\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        503:\n          description: Could not read rules file\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Could not read rules file\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes the Rules, deletes any uploaded rules, uses bundled rules instead\n      tags:\n        - rules\n      operationId: deleteRules\n      security: []\n      responses:\n        204:\n          description: Rules deleted successfully\n        404:\n          description: No rules file found in the database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: No rules file found in the database\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Uploads the Rules and returns a copy of the uploaded rules\n      tags:\n        - rules\n      operationId: uploadRules\n      requestBody:\n        description: Rules to be uploaded\n        content:\n          text/plain:\n            schema:\n              type: string\n      security: []\n      responses:\n        200:\n          description: Rules uploaded\n          content:\n            text/plain:\n              schema:\n                type: string\n        400:\n          description: Either Rules file is empty or has incorrect format. The text should be base 64\n            encoded\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Either Rules file is empty or has incorrect format. The text should be base 64\n                  encoded\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: Older copy of rules file is not found in database\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Older copy of rules file is not found in database\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /serials/{id}:\n    get:\n      description: Retrieves a single Certificate Serial\n      tags:\n        - certificate_serial\n      operationId: getCertificateSerial\n      security: []\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the certificate serial to retrieve\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        200:\n          description: ''\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CertificateSerialDTO'\n        404:\n          description: A certificate serial could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: A certificate serial could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /status:\n    get:\n      description: Returns status of the server\n      tags:\n        - status\n      operationId: status\n      security: []\n      responses:\n        200:\n          description: Status information about running Candlepin server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StatusDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n  /subscriptions:\n    get:\n      description: Retrieves a list of Subscriptions\n      tags:\n        - subscription\n      operationId: getSubscriptions\n      security: []\n      responses:\n        200:\n          description: A list of subscriptions\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SubscriptionDTO'\n        default:\n          $ref: '#/components/responses/default'\n\n    post:\n      description: Activates a Subscription\n      tags:\n        - subscription\n      operationId: activateSubscription\n      security: []\n      x-java-response:\n        type: javax.ws.rs.core.Response\n      parameters:\n        - name: consumer_uuid\n          in: query\n          description: The UUID of the consumer of the subscription\n          required: true\n          schema:\n            type: string\n        - name: email\n          in: query\n          description: The email to send a notification to for the activation\n          required: true\n          schema:\n            type: string\n        - name: email_locale\n          in: query\n          description: The locale of the email to send a notification to for the activation\n          required: true\n          schema:\n            type: string\n      responses:\n        202:\n          description: A Subscription is being activated\n        400:\n          description: Invalid request such as missing email/locale or when the consumer with the given uuid was not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: The consumer with the given uuid was not found\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /subscriptions/{id}:\n    delete:\n      description: Removes a Subscription\n      tags:\n        - subscription\n      operationId: deleteSubscription\n      security: []\n      parameters:\n        - name: id\n          in: path\n          description: The ID of the subscription to remove\n          required: true\n          schema:\n            type: string\n      responses:\n        204:\n          description: Subscription was successfully deleted\n        404:\n          description: Subscription could not be found using the provided ID\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Subscription could not be found using the provided ID\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n\n  /users:\n    get:\n      description: Retrieves a list of Users\n      tags:\n        - users\n      operationId: listUsers\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserDTO'\n        default:\n          $ref: '#/components/responses/default'\n    post:\n      description: Creates a User\n      tags:\n        - users\n      operationId: createUser\n      requestBody:\n        description: A user to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDTO'\n      security: []\n      responses:\n        200:\n          description: User successfuly created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDTO'\n        400:\n          description: User data is null or empty, username is not specified and similar errors\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        409:\n          description: User already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"User already exists: test_user\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /users/{username}:\n    get:\n      description: Retrieves a single User\n      tags:\n        - users\n      operationId: getUserInfo\n      parameters:\n        - name: username\n          in: path\n          description: The username of the existing user\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: A single user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDTO'\n        400:\n          description: Username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"User not found: test_user\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    put:\n      description: Updates a User\n      tags:\n        - users\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: The username of the existing user\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The updated user\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserDTO'\n      security: []\n      responses:\n        200:\n          description: the updated user\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserDTO'\n        400:\n          description: Username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"User not found: test_user\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n    delete:\n      description: Removes a User\n      tags:\n        - users\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The username of the existing user\n          required: true\n          schema:\n            type: string\n      security: []\n      responses:\n        200:\n          description: User was deleted successfuly\n        400:\n          description: Username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"User not found: test_user\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /users/{username}/roles:\n    get:\n      description: Retrieves a list of Roles by User\n      tags:\n        - users\n      operationId: getUserRoles\n      parameters:\n        - name: username\n          in: path\n          description: The username of the existing user\n          required: true\n          schema:\n            type: string\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of user roles\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/RoleDTO'\n        400:\n          description: Username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"User not found: test_user\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\n  /users/{username}/owners:\n    get:\n      description: Retrieve a list of owners the user can register systems to\n      tags:\n        - users\n      operationId: listUserOwners\n      parameters:\n        - name: username\n          in: path\n          description: The username of the existing user\n          required: true\n          schema:\n            type: string\n      x-java-response:\n        type: java.util.stream.Stream\n        isContainer: true\n      security: []\n      responses:\n        200:\n          description: A list of user owners\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/OwnerDTO'\n        400:\n          description: Username is null or empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: Username is null or empty\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        404:\n          description: User not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExceptionMessage'\n              example:\n                displayMessage: \"User not found: test_user\"\n                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n        default:\n          $ref: '#/components/responses/default'\n\ncomponents:\n  responses:\n    default:\n      description: An unexpected exception has occurred\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ExceptionMessage'\n          example:\n            displayMessage: An unexpected exception has occurred\n            requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n\n  schemas:\n    TimestampedEntity:\n      properties:\n        created:\n          type: string\n          format: date-time\n          example: \"2020-04-23 03:23:50.927000\"\n        updated:\n          type: string\n          format: date-time\n          example: \"2020-04-23 03:23:50.927000\"\n\n    ExceptionMessage:\n      description: An exception has occurred\n      properties:\n        displayMessage:\n          type: string\n        requestUuid:\n          type: string\n\n    Link:\n      description: Used to represent a link to a top level resource in Candlepin\n      properties:\n        rel:\n          type: string\n        href:\n          type: string\n\n    DateRange:\n      description: Represents a range in time, start date to end Date inclusive\n      properties:\n        startDate:\n          type: string\n          format: date-time\n        endDate:\n          type: string\n          format: date-time\n\n    DeleteResult:\n      description: Represents number of records removed via an unbind.\n      properties:\n        deletedRecords:\n          type: integer\n\n    AsyncJobStatusDTO:\n      description: DTO representing an async job status\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: \"ff808081554a3e4101554a3e9033005d\"\n            key:\n              type: string\n              example: \"RefreshPoolsJob\"\n            name:\n              type: string\n              example: \"refresh pools job\"\n            group:\n              type: string\n              example: \"refresh\"\n            origin:\n              type: string\n              example: \"candlepin.myhost.com\"\n            executor:\n              type: string\n              example: \"candlepin.myhost.com\"\n            principal:\n              type: string\n              example: \"admin\"\n            state:\n              type: string\n              example: \"RUNNING\"\n            previousState:\n              type: string\n              example: \"QUEUED\"\n            startTime:\n              type: string\n              format: date-time\n              example: \"2019-05-08 09:42:37.000\"\n            endTime:\n              type: string\n              format: date-time\n              example: \"2019-05-08 09:42:37.000\"\n            attempts:\n              type: integer\n              example: \"1\"\n            maxAttempts:\n              type: integer\n              example: \"3\"\n            statusPath:\n              type: string\n              example: \"/jobs/ff808081554a3e4101554a3e9033005d\"\n            resultData:\n              type: object\n              example: \"Refresh completed successfully!\"\n\n    AbstractCertificateDTO:\n      description: |\n        Represents the base of most Candlepin certificates\n        presented to the API (exceptions include ProductCertificate which has its own DTO).\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            key:\n              type: string\n            cert:\n              type: string\n            serial:\n              $ref: '#/components/schemas/CertificateSerialDTO'\n\n    ActivationKeyDTO:\n      description: A token that allows registration without username/password and sets subscription and content related properties at registration.\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            name:\n              type: string\n            description:\n              type: string\n            owner:\n              $ref: '#/components/schemas/NestedOwnerDTO'\n            releaseVer:\n              $ref: '#/components/schemas/ReleaseVerDTO'\n            serviceLevel:\n              type: string\n            usage:\n              type: string\n            role:\n              type: string\n            addOns:\n              type: array\n              uniqueItems: true\n              items:\n                type: string\n            autoAttach:\n              type: boolean\n            pools:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/ActivationKeyPoolDTO'\n            products:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/ActivationKeyProductDTO'\n            contentOverrides:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/ContentOverrideDTO'\n\n    ActivationKeyProductDTO:\n      required:\n        - productId\n      properties:\n        productId:\n          type: string\n          minLength: 1\n\n    ActivationKeyPoolDTO:\n      required:\n        - poolId\n      properties:\n        poolId:\n          type: string\n          minLength: 1\n        quantity:\n          type: integer\n          format: int64\n\n    AttributeDTO:\n      description: Represents the attribute as a name-value pair\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n\n    BrandingDTO:\n      description: Represents the branding. It indicates that a particular engineering product ID is being rebranded by the entitlement to the given name. The type is used by clients to determine what action to take with the brand name.\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          required:\n            - productId\n            - name\n            - type\n          properties:\n            productId:\n              type: string\n              minLength: 1\n              maxLength: 255\n            name:\n              type: string\n              minLength: 1\n              maxLength: 255\n            type:\n              type: string\n              minLength: 1\n              maxLength: 32\n\n    CertificateSerialDTO:\n      description: Represents a database sequence used to ensure certificates receive unique serial numbers\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: integer\n              format: int64\n            serial:\n              type: integer\n              format: int64\n            expiration:\n              type: string\n              format: date-time\n            revoked:\n              type: boolean\n\n    CertificateDTO:\n      description: Represents certificate details\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            key:\n              type: string\n            cert:\n              type: string\n            serial:\n              $ref: '#/components/schemas/CertificateSerialDTO'\n\n    CapabilityDTO:\n      description: Represents a consumer capability\n      required:\n        - name\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          minLength: 1\n\n    CloudRegistrationDTO:\n      description: Contains data for performing automatic cloud-based registration.\n      required:\n        - type\n        - metadata\n        - signature\n      properties:\n        type:\n          type: string\n          minLength: 1\n        metadata:\n          type: string\n          minLength: 1\n        signature:\n          type: string\n\n    ConsumerDTO:\n      description: Represents a consumer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n              id:\n                type: string\n              uuid:\n                type: string\n              name:\n                type: string\n              username:\n                type: string\n              entitlementStatus:\n                type: string\n              serviceLevel:\n                type: string\n              role:\n                type: string\n              usage:\n                type: string\n              addOns:\n                type: array\n                uniqueItems: true\n                items:\n                  type: string\n              systemPurposeStatus:\n                type: string\n              releaseVer:\n                $ref: '#/components/schemas/ReleaseVerDTO'\n              owner:\n                $ref: '#/components/schemas/NestedOwnerDTO'\n              environment:\n                $ref: '#/components/schemas/EnvironmentDTO'\n              entitlementCount:\n                type: integer\n                format: int64\n              facts:\n                type: object\n                additionalProperties:\n                  type: string\n              lastCheckin:\n                type: string\n                format: date-time\n              installedProducts:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/ConsumerInstalledProductDTO'\n              canActivate:\n                type: boolean\n              capabilities:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/CapabilityDTO'\n              hypervisorId:\n                $ref: '#/components/schemas/HypervisorIdDTO'\n              contentTags:\n                type: array\n                uniqueItems: true\n                items:\n                  type: string\n              autoheal:\n                type: boolean\n              annotations:\n                type: string\n              contentAccessMode:\n                type: string\n              type:\n                $ref: '#/components/schemas/ConsumerTypeDTO'\n              idCert:\n                $ref: '#/components/schemas/CertificateDTO'\n              guestIds:\n                type: array\n                items:\n                  $ref: '#/components/schemas/GuestIdDTO'\n              href:\n                type: string\n              activationKeys:\n                type: array\n                uniqueItems: true\n                items:\n                  $ref: '#/components/schemas/ConsumerActivationKeyDTO'\n              serviceType:\n                type: string\n              environments:\n                type: array\n                items:\n                  $ref: '#/components/schemas/EnvironmentDTO'\n\n    ConsumerActivationKeyDTO:\n      description: Represent activation keys used by consumer in registration\n      properties:\n        activationKeyName:\n          type: string\n        activationKeyId:\n          type: string\n\n    ConsumerDTOArrayElement:\n      description: Represents a reduced view of a consumer (excluding data like facts and identify certificate)\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            uuid:\n              type: string\n            name:\n              type: string\n            username:\n              type: string\n            entitlementStatus:\n              type: string\n            serviceLevel:\n              type: string\n            role:\n              type: string\n            usage:\n              type: string\n            addOns:\n              type: array\n              uniqueItems: true\n              items:\n                type: string\n            systemPurposeStatus:\n              type: string\n            releaseVer:\n              $ref: '#/components/schemas/ReleaseVerDTO'\n            owner:\n              $ref: '#/components/schemas/NestedOwnerDTO'\n            entitlementCount:\n              type: integer\n              format: int64\n            lastCheckin:\n              type: string\n              format: date-time\n            installedProducts:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/ConsumerInstalledProductDTO'\n            canActivate:\n              type: boolean\n            capabilities:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/CapabilityDTO'\n            hypervisorId:\n              $ref: '#/components/schemas/HypervisorIdDTO'\n            contentTags:\n              type: array\n              uniqueItems: true\n              items:\n                type: string\n            autoheal:\n              type: boolean\n            annotations:\n              type: string\n            contentAccessMode:\n              type: string\n            type:\n              $ref: '#/components/schemas/ConsumerTypeDTO'\n            guestIds:\n              type: array\n              items:\n                $ref: '#/components/schemas/GuestIdDTOArrayElement'\n            href:\n              type: string\n            serviceType:\n              type: string\n\n    ConsumerInstalledProductDTO:\n      description: Represents consumer installed product details\n      allOf:\n          - $ref: '#/components/schemas/TimestampedEntity'\n          - type: object\n            required:\n              - productId\n            properties:\n              id:\n                type: string\n              productId:\n                type: string\n                minLength: 1\n              productName:\n                type: string\n              version:\n                type: string\n              arch:\n                type: string\n              status:\n                type: string\n              startDate:\n                type: string\n                format: date-time\n              endDate:\n                type: string\n                format: date-time\n\n    ConsumerTypeDTO:\n      description: Represents a consumer type used to differentiate various types of consumers\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            label:\n              type: string\n            manifest:\n              type: boolean\n\n    ConsumptionTypeCountsDTO:\n      description: Represents virtual / physical entitlement consumption counts\n      type: object\n      properties:\n        physical:\n          type: integer\n        guest:\n          type: integer\n\n    ContentDTO:\n      description: Represents the content data exposed to the API.\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          required:\n            - id\n          properties:\n            uuid:\n              type: string\n              example: \"ff808081554a3e4101554a3e9033005d\"\n            id:\n              type: string\n              minLength: 1\n              example: \"5001\"\n            type:\n              type: string\n              example: \"yum\"\n            label:\n              type: string\n              example: \"content_label\"\n            name:\n              type: string\n              example: \"content_name\"\n            vendor:\n              type: string\n              example: \"example-vendor\"\n            contentUrl:\n              type: string\n              example: \"/admin/foo/example/path\"\n            requiredTags:\n              type: string\n              example: \"TAG1,TAG2\"\n            releaseVer:\n              type: string\n              example: \"1.2.3\"\n            gpgUrl:\n              type: string\n              example: \"/admin/foo/example/gpg/path\"\n            modifiedProductIds:\n              type: array\n              uniqueItems: true\n              example: \"[5051,5052,5053]\"\n              items:\n                type: string\n            arches:\n              type: string\n              example: \"x86_64\"\n            metadataExpire:\n              type: integer\n              format: int64\n              example: 1467124079\n\n    ContentAccessDTO:\n      description: Represents content access\n      properties:\n        contentAccessMode:\n          type: string\n        contentAccessModeList:\n          type: array\n          items:\n            type: string\n\n\n    ContentOverrideDTO:\n      description: Represents a content override for an activation key or consumer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            name:\n              type: string\n            contentLabel:\n              type: string\n            value:\n              type: string\n              maxLength: 2048\n\n    ContentToPromoteDTO:\n      description: Represents the JSON input when promoting content, or updating promoted content.\n      properties:\n        environmentId:\n          type: string\n        contentId:\n          type: string\n        enabled:\n          type: boolean\n\n    ComplianceReasonDTO:\n      description: DTO representing a compliance reason\n      properties:\n        key:\n          type: string\n        message:\n          type: string\n        attributes:\n          type: object\n          additionalProperties:\n            type: string\n\n    ComplianceStatusDTO:\n      description: DTO representing compliance status\n      properties:\n        status:\n          type: string\n        compliant:\n          type: boolean\n        date:\n          type: string\n          format: date-time\n        compliantUntil:\n          type: string\n          format: date-time\n        compliantProducts:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        partiallyCompliantProducts:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        partialStacks:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        nonCompliantProducts:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n        reasons:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: '#/components/schemas/ComplianceReasonDTO'\n        productComplianceDateRanges:\n          type: object\n          additionalProperties:\n            $ref: '#/components/schemas/DateRange'\n\n    CdnDTO:\n      description: DTO representing a Cdn\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            label:\n              type: string\n            name:\n              type: string\n            url:\n              type: string\n            certificate:\n              $ref: '#/components/schemas/CertificateDTO'\n\n    DeletedConsumerDTO:\n      description: Represents a deleted consumer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - properties:\n            id:\n              type: string\n            consumerUuid:\n              type: string\n            consumerName:\n              type: string\n            ownerId:\n              type: string\n            ownerKey:\n              type: string\n            ownerDisplayName:\n              type: string\n            principalName:\n              type: string\n\n    DistributorVersionDTO:\n      description: A DTO representation of the DistributorVersion\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            name:\n              type: string\n            displayName:\n              type: string\n            capabilities:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/DistributorVersionCapabilityDTO'\n\n    DistributorVersionCapabilityDTO:\n      description: A DTO representation of the DistributorVersionCapability\n      type: object\n      required:\n        - name\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n          minLength: 1\n\n    EntitlementDTO:\n      description:  A DTO representation of the Entitlement entity\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            consumer:\n              $ref: '#/components/schemas/NestedConsumerDTO'\n            pool:\n              $ref: '#/components/schemas/PoolDTO'\n            quantity:\n              type: integer\n            certificates:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/CertificateDTO'\n            startDate:\n              type: string\n              format: date-time\n            endDate:\n              type: string\n              format: date-time\n            href:\n              type: string\n\n    EnvironmentContentDTO:\n      description: EnvironmentContent represents the promotion of content into a particular environment.\n      properties:\n        content:\n          $ref: \"#/components/schemas/ContentDTO\"\n        enabled:\n          type: boolean\n\n    EnvironmentDTO:\n      description: Represents an environment within an org used to enable/disable/promote content\n        in specific places.\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            name:\n              type: string\n            description:\n              type: string\n            owner:\n              $ref: \"#/components/schemas/NestedOwnerDTO\"\n            environmentContent:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: \"#/components/schemas/EnvironmentContentDTO\"\n\n    ExportResultDTO:\n      description: Represents the result of an export job\n      properties:\n        exportedConsumer:\n          type: string\n        exportId:\n          type: string\n        href:\n          type: string\n\n    GuestIdDTO:\n      description: Represents a guest ID running on a virt host consumer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          required:\n            - guestId\n          properties:\n            id:\n              type: string\n            guestId:\n              type: string\n            attributes:\n              type: object\n              additionalProperties:\n                type: string\n\n    GuestIdDTOArrayElement:\n      description: Represents a guest ID running on a virt host consumer. Does not include the attributes field\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          required:\n            - guestId\n          properties:\n            id:\n              type: string\n            guestId:\n              type: string\n\n    HypervisorConsumerDTO:\n      properties:\n        uuid:\n          type: string\n        name:\n          type: string\n        owner:\n          $ref: \"#/components/schemas/NestedOwnerDTO\"\n\n    HypervisorIdDTO:\n      description: Represents a HypervisorId details\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            hypervisorId:\n              type: string\n            reporterId:\n              type: string\n\n    HypervisorUpdateResultDTO:\n      required:\n        - failedUpdate\n        - updated\n        - created\n        - unchanged\n      properties:\n        created:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/HypervisorConsumerDTO\"\n        updated:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/HypervisorConsumerDTO\"\n        unchanged:\n          type: array\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/HypervisorConsumerDTO\"\n        failedUpdate:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n\n    ImportRecordDTO:\n      description: Represents a import record details\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            status:\n              type: string\n            statusMessage:\n              type: string\n            fileName:\n              type: string\n            generatedBy:\n              type: string\n            generatedDate:\n              type: string\n              format: date-time\n            upstreamConsumer:\n              $ref: '#/components/schemas/ImportUpstreamConsumerDTO'\n\n    ImportUpstreamConsumerDTO:\n      description: Represents an import upstream consumer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            uuid:\n              type: string\n            name:\n              type: string\n            apiUrl:\n              type: string\n            webUrl:\n              type: string\n            ownerId:\n              type: string\n            contentAccessMode:\n              type: string\n            type:\n              $ref: '#/components/schemas/ConsumerTypeDTO'\n\n    KeyValueParamDTO:\n      required:\n        - key\n      properties:\n        key:\n          type: string\n        value:\n          type: string\n\n    NestedConsumerDTO:\n      description: A minimal view of a Consumer\n      properties:\n        id:\n          type: string\n        uuid:\n          type: string\n        name:\n          type: string\n        href:\n          type: string\n\n    NestedEntitlementDTO:\n      properties:\n        id:\n          type: string\n        href:\n          type: string\n\n    NestedOwnerDTO:\n      properties:\n        id:\n          type: string\n        key:\n          type: string\n        displayName:\n          type: string\n        href:\n          type: string\n        contentAccessMode:\n          type: string\n\n    OwnerDTO:\n      description: DTO representing an owner/organization\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            displayName:\n              type: string\n            key:\n              type: string\n            contentPrefix:\n              type: string\n            defaultServiceLevel:\n              type: string\n            logLevel:\n              type: string\n            contentAccessMode:\n              type: string\n            contentAccessModeList:\n              type: string\n            autobindHypervisorDisabled:\n              type: boolean\n            autobindDisabled:\n              type: boolean\n            lastRefreshed:\n              type: string\n              format: date-time\n            parentOwner:\n              $ref: '#/components/schemas/NestedOwnerDTO'\n            upstreamConsumer:\n              $ref: '#/components/schemas/UpstreamConsumerDTO'\n\n    OwnerInfo:\n      description: Represents owner information\n      type: object\n      required:\n        - consumerCounts\n        - consumerGuestCounts\n        - entitlementsConsumedByType\n        - consumerTypeCountByPool\n        - enabledConsumerTypeCountByPool\n        - consumerCountsByComplianceStatus\n        - entitlementsConsumedByFamily\n      properties:\n        consumerCounts:\n          type: object\n          additionalProperties:\n            type: integer\n        consumerGuestCounts:\n          type: object\n          additionalProperties:\n            type: integer\n        entitlementsConsumedByType:\n          type: object\n          additionalProperties:\n            type: integer\n        consumerTypeCountByPool:\n          type: object\n          additionalProperties:\n            type: integer\n        enabledConsumerTypeCountByPool:\n          type: object\n          additionalProperties:\n            type: integer\n        consumerCountsByComplianceStatus:\n          type: object\n          additionalProperties:\n            type: integer\n        entitlementsConsumedByFamily:\n          type: object\n          additionalProperties:\n            $ref: \"#/components/schemas/ConsumptionTypeCountsDTO\"\n\n    PermissionBlueprintDTO:\n      description: Represents the permission blueprints exposed to the API layer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: \"ff808081554a3e4101554a3e9033005d\"\n            owner:\n              $ref: \"#/components/schemas/NestedOwnerDTO\"\n            type:\n              type: string\n              example: \"OWNER\"\n            access:\n              type: string\n              example: \"NONE\"\n\n    PoolDTO:\n      description: Represents a pool of products eligible to be consumed (entitled)\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            type:\n              type: string\n            owner:\n              $ref: '#/components/schemas/NestedOwnerDTO'\n            activeSubscription:\n              type: boolean\n            sourceEntitlement:\n              $ref: '#/components/schemas/NestedEntitlementDTO'\n            quantity:\n              type: integer\n              format: int64\n            startDate:\n              type: string\n              format: date-time\n            endDate:\n              type: string\n              format: date-time\n            attributes:\n              type: array\n              items:\n                $ref: '#/components/schemas/AttributeDTO'\n            restrictedToUsername:\n              type: string\n            contractNumber:\n              type: string\n            accountNumber:\n              type: string\n            orderNumber:\n              type: string\n            consumed:\n              type: integer\n              format: int64\n            exported:\n              type: integer\n              format: int64\n            branding:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/BrandingDTO'\n            calculatedAttributes:\n              type: object\n              additionalProperties:\n                type: string\n            upstreamPoolId:\n              type: string\n            upstreamEntitlementId:\n              type: string\n            upstreamConsumerId:\n              type: string\n            productName:\n              type: string\n            productId:\n              type: string\n            productAttributes:\n              type: array\n              items:\n                $ref: '#/components/schemas/AttributeDTO'\n            stackId:\n              type: string\n            stacked:\n              type: boolean\n            sourceStackId:\n              type: string\n            developmentPool:\n              type: boolean\n            href:\n              type: string\n            derivedProductAttributes:\n              type: array\n              items:\n                $ref: '#/components/schemas/AttributeDTO'\n            derivedProductId:\n              type: string\n            derivedProductName:\n              type: string\n            providedProducts:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/ProvidedProductDTO'\n            derivedProvidedProducts:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: '#/components/schemas/ProvidedProductDTO'\n            subscriptionSubKey:\n              type: string\n            subscriptionId:\n              type: string\n            locked:\n              type: boolean\n\n    PoolQuantityDTO:\n      description: DTO representing pool quantity \u0026 pool.\n      properties:\n        quantity:\n          type: integer\n        pool:\n          $ref: \"#/components/schemas/PoolDTO\"\n\n    ProductContentDTO:\n      description: Product content mapping exposed to the API\n      required:\n        - content\n      properties:\n        content:\n          $ref: \"#/components/schemas/ContentDTO\"\n        enabled:\n          type: boolean\n\n    ProductCertificateDTO:\n      description: DTO representing product certificates presented to the API\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            key:\n              type: string\n            cert:\n              type: string\n\n    ProductDTO:\n      description: DTO representing the product data exposed to the API\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: 5051\n            uuid:\n              type: string\n              example: ff808081554a3e4101554a3e9033005d\n            name:\n              type: string\n              example: Admin OS Developer Bits\n            multiplier:\n              type: integer\n              format: int64\n              example: 1\n            attributes:\n              type: array\n              items:\n                $ref: '#/components/schemas/AttributeDTO'\n            productContent:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: \"#/components/schemas/ProductContentDTO\"\n            dependentProductIds:\n              type: array\n              uniqueItems: true\n              items:\n                type: string\n            branding:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: \"#/components/schemas/BrandingDTO\"\n            derivedProduct:\n              $ref: \"#/components/schemas/ProductDTO\"\n            providedProducts:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: \"#/components/schemas/ProductDTO\"\n            href:\n              type: string\n              example: /products/ff808081554a3e4101554a3e9033005d\n\n    ProvidedProductDTO:\n      description: ProvidedProduct DTO representation\n      required:\n        - productId\n      properties:\n        productId:\n          type: string\n          minLength: 1\n        productName:\n          type: string\n\n    QueueStatus:\n      description: |\n        Represents status of the ActiveMQ queues. Used for checking if events\n        are piling up for some reason or being delivered correctly.\n      properties:\n        queueName:\n          type: string\n        pendingMessageCount:\n          type: integer\n          format: int64\n\n    ReleaseVerDTO:\n      properties:\n        releaseVer:\n          type: string\n\n    RoleDTO:\n      description: Represent the relationship between users and the permissions they have\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: \"ff808081554a3e4101554a3e9033005d\"\n            name:\n              type: string\n              example: \"admin-all\"\n            users:\n              type: array\n              uniqueItems: true\n              items:\n                \"$ref\": \"#/components/schemas/UserDTO\"\n            permissions:\n              type: array\n              items:\n                \"$ref\": \"#/components/schemas/PermissionBlueprintDTO\"\n\n    SchedulerStatusDTO:\n      description: Represents scheduler status\n      properties:\n        isRunning:\n          type: boolean\n\n    StatusDTO:\n      description: Version and Status information about running Candlepin server\n      properties:\n        mode:\n          type: string\n        modeReason:\n          type: string\n        modeChangeTime:\n          type: string\n          format: date-time\n        result:\n          type: boolean\n          example: true\n        version:\n          type: string\n          example: 0.9.10\n        release:\n          type: string\n        standalone:\n          type: boolean\n        timeUTC:\n          type: string\n          format: date-time\n        rulesSource:\n          type: string\n        rulesVersion:\n          type: string\n          example: 5.8\n        managerCapabilities:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n        keycloakRealm:\n          type: string\n        keycloakAuthUrl:\n          type: string\n        keycloakResource:\n          type: string\n\n    SubscriptionDTO:\n      description: Represents the Subscription data exposed to the API\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            owner:\n              $ref: \"#/components/schemas/NestedOwnerDTO\"\n            product:\n              $ref: \"#/components/schemas/ProductDTO\"\n            derivedProduct:\n              $ref: \"#/components/schemas/ProductDTO\"\n            providedProducts:\n              type: array\n              uniqueItems: true\n              items:\n                \"$ref\": \"#/components/schemas/ProductDTO\"\n            derivedProvidedProducts:\n              type: array\n              uniqueItems: true\n              items:\n                $ref: \"#/components/schemas/ProductDTO\"\n            quantity:\n              type: integer\n              format: int64\n            startDate:\n              type: string\n              format: date-time\n              example: \"2019-05-08 09:42:37.000\"\n            endDate:\n              type: string\n              format: date-time\n              example: \"2019-05-08 09:42:37.000\"\n            contractNumber:\n              type: string\n            accountNumber:\n              type: string\n            modified:\n              type: string\n              format: date-time\n              example: \"2019-05-08 09:42:37.000\"\n            lastModified:\n              type: string\n              format: date-time\n              example: \"2019-05-08 09:42:37.000\"\n            orderNumber:\n              type: string\n            upstreamPoolId:\n              type: string\n            upstreamEntitlementId:\n              type: string\n            upstreamConsumerId:\n              type: string\n            certificate:\n              $ref: \"#/components/schemas/CertificateDTO\"\n            cdn:\n              $ref: \"#/components/schemas/CdnDTO\"\n            stacked:\n              type: boolean\n            stackId:\n              type: string\n\n    SystemPurposeAttributesDTO:\n      description: Represents system purpose attribute details\n      properties:\n        owner:\n          $ref: '#/components/schemas/NestedOwnerDTO'\n        systemPurposeAttributes:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              type: string\n\n    SystemPurposeComplianceStatusDTO:\n      description: DTO representing system purpose compliance status\n      properties:\n        status:\n          type: string\n        compliant:\n          type: boolean\n        date:\n          type: string\n          format: date-time\n        nonCompliantRole:\n          type: string\n        nonCompliantSLA:\n          type: string\n        nonCompliantUsage:\n          type: string\n        nonCompliantServiceType:\n          type: string\n        compliantRole:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        compliantAddOns:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        compliantSLA:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        compliantUsage:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        nonCompliantAddOns:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n        compliantServiceType:\n          type: object\n          additionalProperties:\n            type: array\n            uniqueItems: true\n            items:\n              $ref: '#/components/schemas/EntitlementDTO'\n        reasons:\n          type: array\n          uniqueItems: true\n          items:\n            type: string\n\n    UeberCertificateDTO:\n      description: Represents an ueber certificate\n      allOf:\n        - $ref: '#/components/schemas/AbstractCertificateDTO'\n        - type: object\n          properties:\n            owner:\n              $ref: '#/components/schemas/NestedOwnerDTO'\n\n    UserDTO:\n      description: \"Represents user information for a given user\"\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n              example: \"ff808081554a3e4101554a3e9033005d\"\n            username:\n              type: string\n              example: \"admin\"\n            password:\n              type: string\n              example: \"secret_banana\"\n              writeOnly: true\n            superAdmin:\n              type: boolean\n              example: true\n              default: false\n\n    UpstreamConsumerDTO:\n      description: DTO representing an upstream consumer\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            uuid:\n              type: string\n            name:\n              type: string\n            apiUrl:\n              type: string\n            webUrl:\n              type: string\n            ownerId:\n              type: string\n            contentAccessMode:\n              type: string\n            type:\n              $ref: '#/components/schemas/ConsumerTypeDTO'\n            idCert:\n              $ref: '#/components/schemas/CertificateDTO'\n\n    UpstreamConsumerDTOArrayElement:\n      description: |\n        Represents a reduced view of a upstream consumer (excluding identify certificate)\n      allOf:\n        - $ref: '#/components/schemas/TimestampedEntity'\n        - type: object\n          properties:\n            id:\n              type: string\n            uuid:\n              type: string\n            name:\n              type: string\n            apiUrl:\n              type: string\n            webUrl:\n              type: string\n            ownerId:\n              type: string\n            contentAccessMode:\n              type: string\n            type:\n              $ref: '#/components/schemas/ConsumerTypeDTO'\n\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n\n  parameters:\n    paging_page:\n      name: page\n      description: Page index to return\n      in: query\n      schema:\n        type: integer\n        example: 2\n    paging_per_page:\n      name: per_page\n      description: Number of items to return per page\n      in: query\n      schema:\n        type: integer\n        example: 10\n    paging_order:\n      name: order\n      description: Direction of ordering\n      in: query\n      schema:\n        type: string\n        example: asc\n    paging_sort_by:\n      name: sort_by\n      description: Property to use for ordering\n      in: query\n      schema:\n        type: string\n        example: name\n",
			"canonicalURL": "/github.com/candlepin/candlepin@af572dd94e20a2cf43e328433728af26d7473bd3/-/blob/api/candlepin-api-spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/candlepin/candlepin/blob/af572dd94e20a2cf43e328433728af26d7473bd3/api/candlepin-api-spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:112474: duplicate path: \"/entitlements/{entitlement_id}\""
}