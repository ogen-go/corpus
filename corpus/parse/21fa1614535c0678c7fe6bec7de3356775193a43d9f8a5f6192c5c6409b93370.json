{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/vert-x3/vertx-web"
		},
		"file": {
			"name": "router_factory_test.yaml",
			"size": 0,
			"path": "vertx-web-api-contract/src/test/resources/swaggers/router_factory_test.yaml",
			"byteSize": 4739,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Test spec for OpenAPI3RouterFactoryTest\n  license:\n    name: Apache 2.0 License\npaths:\n  /pets:\n    get:\n      summary: List all pets\n      operationId: listPets\n      tags:\n        - pets\n      security:\n        - api_key: []\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n    delete:\n      summary: Delete all pets\n      operationId: deletePets\n      tags:\n        - pets\n      responses:\n        200:\n          description: oK\n    post:\n      summary: Create a pet\n      operationId: createPets\n      tags:\n        - pets\n      responses:\n        201:\n          description: Null response\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets/{petId}:\n    get:\n      summary: Info for a specific pet\n      operationId: showPetById\n      tags:\n        - pets\n      parameters:\n        - name: petId\n          in: path\n          required: true\n          description: The id of the pet to retrieve\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: Expected response to a valid request\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /pets_security_test:\n    get:\n      summary: List all pets\n      operationId: listPetsSecurity\n      tags:\n        - pets\n      security:\n        - api_key: []\n        - second_api_key:\n          - moderator\n        - third_api_key:\n          - admin\n          - super_admin\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: An paged array of pets\n          headers:\n            x-next:\n              description: A link to the next page of responses\n              schema:\n                type: string\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pets\"\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Error\"\n  /foo/{p1}:\n    get:\n      operationId: encodedParamTest\n      parameters:\n        - name: p1\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: p2\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: ok\n  /jsonBody/empty:\n    post:\n      operationId: jsonEmptyBody\n      requestBody:\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: string\n      responses:\n        default:\n          description: ok\ncomponents:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n        - name\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n        tag:\n          type: string\n    Pets:\n      type: array\n      items:\n        $ref: \"#/components/schemas/Pet\"\n    Error:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n  securitySchemes:\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n    second_api_key:\n      type: apiKey\n      name: second_api_key\n      in: header\n    third_api_key:\n      type: apiKey\n      name: third_api_key\n      in: header\n\n",
			"canonicalURL": "/github.com/vert-x3/vertx-web@b717a2409af5f3265397b468f797b3f37f37a7b2/-/blob/vertx-web-api-contract/src/test/resources/swaggers/router_factory_test.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/vert-x3/vertx-web/blob/b717a2409af5f3265397b468f797b3f37f37a7b2/vertx-web-api-contract/src/test/resources/swaggers/router_factory_test.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/pets_security_test\": get: operation \"listPetsSecurity\": security: at 1:3456: list of scopes MUST be empty for \"type\" \"apiKey\""
}