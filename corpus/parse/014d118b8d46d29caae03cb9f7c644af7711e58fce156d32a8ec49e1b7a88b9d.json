{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/ticketmaster.com/discovery/v2/openapi.yaml",
			"byteSize": 73038,
			"content": "openapi: 3.0.0\nservers:\n  - url: //www.ticketmaster.com/discovery/v2\ninfo:\n  contact:\n    url: http://developer.ticketmaster.com/support/contact-us/\n  description: The Ticketmaster Discovery API allows you to search for events, attractions, or venues.\n  title: Discovery API\n  version: v2\n  x-apisguru-categories:\n    - ecommerce\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/ticketmaster-api/ticketmaster-api.github.io/dev/_data/orgs/discovery-api/v2/api.json\n      version: \"2.0\"\n  x-providerName: ticketmaster.com\n  x-serviceName: discovery\ntags:\n  - name: v2\npaths:\n  /discovery/v2/attractions:\n    get:\n      description: Find attractions (artists, sports, packages, plays and so on) and filter your search by name, and much more.\n      operationId: find\n      parameters:\n        - description: \"Sorting order of the search result. Allowable Values : 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc'\"\n          example: \"\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            default: relevance,desc\n            pattern: ^(name|relevance),(asc|desc)$\n            type: string\n        - description: \"Filter attractions by classification name: name of any segment, genre, sub-genre, type, sub-type\"\n          example: \"\"\n          explode: true\n          in: query\n          name: classificationName\n          required: false\n          schema:\n            default: \"\"\n            items: {}\n            type: array\n        - description: \"Filter attractions by classification id: id of any segment, genre, sub-genre, type, sub-type\"\n          example: \"\"\n          explode: true\n          in: query\n          name: classificationId\n          required: false\n          schema:\n            default: \"\"\n            items: {}\n            type: array\n        - description: Keyword to search on\n          example: \"\"\n          in: query\n          name: keyword\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its id\n          example: \"\"\n          in: query\n          name: id\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its source name\n          example: \"\"\n          in: query\n          name: source\n          required: false\n          schema:\n            default: \"\"\n            enum:\n              - ticketmaster\n              - \" universe\"\n              - \" frontgate\"\n              - \" tmr\"\n            type: string\n        - description: True if you want to have entities flag as test in the response. Only, if you only wanted test entities\n          example: \"\"\n          in: query\n          name: includeTest\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: Page number\n          example: \"\"\n          in: query\n          name: page\n          required: false\n          schema:\n            default: \"0\"\n            minimum: 0\n            type: string\n        - description: Page size of the response\n          example: \"\"\n          in: query\n          name: size\n          required: false\n          schema:\n            default: \"20\"\n            maximum: 500\n            minimum: 1\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: Yes if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n        - description: yes, to include spell check suggestions in the response.\n          example: \"\"\n          in: query\n          name: includeSpellcheck\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Attraction\"\n                type: array\n          description: successful operation\n      summary: Attraction Search\n  \"/discovery/v2/attractions/{id}\":\n    get:\n      description: Get details for a specific attraction using the unique identifier for the attraction.\n      operationId: get\n      parameters:\n        - description: ID of the attraction\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Attraction\"\n          description: successful operation\n      summary: Get Attraction Details\n  /discovery/v2/classifications:\n    get:\n      description: Find classifications and filter your search by name, and much more. Classifications help define the nature of attractions and events.\n      parameters:\n        - description: Sorting order of the search result\n          example: \"\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            default: name,asc\n            pattern: ^name,asc|name,desc$\n            type: string\n        - description: Keyword to search on\n          example: \"\"\n          in: query\n          name: keyword\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its id\n          example: \"\"\n          in: query\n          name: id\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its source name\n          example: \"\"\n          in: query\n          name: source\n          required: false\n          schema:\n            default: \"\"\n            enum:\n              - ticketmaster\n              - \" universe\"\n              - \" frontgate\"\n              - \" tmr\"\n            type: string\n        - description: True if you want to have entities flag as test in the response. Only, if you only wanted test entities\n          example: \"\"\n          in: query\n          name: includeTest\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: Page number\n          example: \"\"\n          in: query\n          name: page\n          required: false\n          schema:\n            default: \"0\"\n            minimum: 0\n            type: string\n        - description: Page size of the response\n          example: \"\"\n          in: query\n          name: size\n          required: false\n          schema:\n            default: \"20\"\n            maximum: 500\n            minimum: 1\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: Yes if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n        - description: yes, to include spell check suggestions in the response.\n          example: \"\"\n          in: query\n          name: includeSpellcheck\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Classification\"\n                type: array\n          description: successful operation\n      summary: Classification Search\n  \"/discovery/v2/classifications/genres/{id}\":\n    get:\n      description: Get details for a specific genre using its unique identifier.\n      operationId: getGenre\n      parameters:\n        - description: ID of the genre\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Genre\"\n          description: successful operation\n      summary: Get Genre Details\n  \"/discovery/v2/classifications/segments/{id}\":\n    get:\n      description: Get details for a specific segment using its unique identifier.\n      operationId: getSegment\n      parameters:\n        - description: ID of the segment\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Segment\"\n          description: successful operation\n      summary: Get Segment Details\n  \"/discovery/v2/classifications/subgenres/{id}\":\n    get:\n      description: Get details for a specific sub-genre using its unique identifier.\n      operationId: getSubgenre\n      parameters:\n        - description: ID of the subgenre\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Level\"\n          description: successful operation\n      summary: Get Sub-Genre Details\n  \"/discovery/v2/classifications/{id}\":\n    get:\n      description: Get details for a specific segment, genre, or sub-genre using its unique identifier.\n      parameters:\n        - description: ID of the segment, genre, or sub-genre\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Classification\"\n          description: successful operation\n      summary: Get Classification Details\n  /discovery/v2/events:\n    get:\n      description: Find events and filter your search by location, date, availability, and much more.\n      parameters:\n        - description: \"Sorting order of the search result. Allowable values : 'name,asc', 'name,desc', 'date,asc', 'date,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'name,date,asc', 'name,date,desc', 'date,name,asc', 'date,name,desc','onsaleStartDate,asc', 'id,asc'\"\n          example: \"\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            default: relevance,desc\n            pattern: ^((name|date|relevance|name,date|date,name),(asc|desc))|(distance,asc)|(onSaleStartDate,asc)|(id,asc)$\n            type: string\n        - description: Filter events with a start date after this date\n          example: \"\"\n          in: query\n          name: startDateTime\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events with a start date before this date\n          example: \"\"\n          in: query\n          name: endDateTime\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events with onsale start date after this date\n          example: \"\"\n          in: query\n          name: onsaleStartDateTime\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events with onsale start date on this date\n          example: \"\"\n          in: query\n          name: onsaleOnStartDate\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events with onsale range within this date\n          example: \"\"\n          in: query\n          name: onsaleOnAfterStartDate\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events with onsale end date before this date\n          example: \"\"\n          in: query\n          name: onsaleEndDateTime\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by city\n          example: \"\"\n          in: query\n          name: city\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by country code\n          example: \"\"\n          in: query\n          name: countryCode\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by state code\n          example: \"\"\n          in: query\n          name: stateCode\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by postal code / zipcode\n          example: \"\"\n          in: query\n          name: postalCode\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by venue id\n          example: \"\"\n          in: query\n          name: venueId\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by attraction id\n          example: \"\"\n          in: query\n          name: attractionId\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by segment id\n          example: \"\"\n          in: query\n          name: segmentId\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by segment name\n          example: \"\"\n          in: query\n          name: segmentName\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: \"Filter events by classification name: name of any segment, genre, sub-genre, type, sub-type\"\n          example: \"\"\n          explode: true\n          in: query\n          name: classificationName\n          required: false\n          schema:\n            default: \"\"\n            items: {}\n            type: array\n        - description: \"Filter events by classification id: id of any segment, genre, sub-genre, type, sub-type\"\n          example: \"\"\n          explode: true\n          in: query\n          name: classificationId\n          required: false\n          schema:\n            default: \"\"\n            items: {}\n            type: array\n        - description: Filter events by market id\n          example: \"\"\n          in: query\n          name: marketId\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^(\\d+(,\\d+)*)?$\n            type: string\n        - description: Filter events by promoter id\n          example: \"\"\n          in: query\n          name: promoterId\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^(\\d+(,\\d+)*)?$\n            type: string\n        - description: Filter events by dma id\n          example: \"\"\n          in: query\n          name: dmaId\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^(\\d+(,\\d+)*)?$\n            type: string\n        - description: True, to include events with date to be announce (TBA)\n          example: \"\"\n          in: query\n          name: includeTBA\n          required: false\n          schema:\n            default: no if date parameter sent, yes otherwise\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: True, to include event with a date to be defined (TBD)\n          example: \"\"\n          in: query\n          name: includeTBD\n          required: false\n          schema:\n            default: no if date parameter sent, yes otherwise\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: Filter events by clientName\n          example: \"\"\n          in: query\n          name: clientVisibility\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead\n          example: 33.80003000,-117.88304300\n          in: query\n          name: latlong\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$\n            type: string\n        - description: Radius of the area in which we want to search for events.\n          example: \"\"\n          in: query\n          name: radius\n          required: false\n          schema:\n            default: \"50\"\n            pattern: ^\\s*$|^0*1?\\d{1,4}$\n            type: string\n        - description: Unit of the radius\n          example: \"\"\n          in: query\n          name: unit\n          required: false\n          schema:\n            default: miles\n            enum:\n              - miles\n              - km\n            pattern: ^\\s*|miles|km$\n            type: string\n        - description: filter events by geoHash\n          example: dr5rh\n          in: query\n          name: geoPoint\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$|^[a-zA-Z0-9]{1,9}$\n            type: string\n        - description: Keyword to search on\n          example: \"\"\n          in: query\n          name: keyword\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its id\n          example: \"\"\n          in: query\n          name: id\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its source name\n          example: \"\"\n          in: query\n          name: source\n          required: false\n          schema:\n            default: \"\"\n            enum:\n              - ticketmaster\n              - \" universe\"\n              - \" frontgate\"\n              - \" tmr\"\n            type: string\n        - description: True if you want to have entities flag as test in the response. Only, if you only wanted test entities\n          example: \"\"\n          in: query\n          name: includeTest\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: Page number\n          example: \"\"\n          in: query\n          name: page\n          required: false\n          schema:\n            default: \"0\"\n            minimum: 0\n            type: string\n        - description: Page size of the response\n          example: \"\"\n          in: query\n          name: size\n          required: false\n          schema:\n            default: \"20\"\n            maximum: 500\n            minimum: 1\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: Yes if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n        - description: yes, to include spell check suggestions in the response.\n          example: \"\"\n          in: query\n          name: includeSpellcheck\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Event\"\n                type: array\n          description: successful operation\n      summary: Event Search\n  \"/discovery/v2/events/{id}\":\n    get:\n      description: Get details for a specific event using the unique identifier for the event. This includes the venue and location, the attraction(s), and the Ticketmaster Website URL for purchasing tickets for the event.\n      parameters:\n        - description: ID of the event\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Event\"\n          description: successful operation\n      summary: Get Event Details\n  \"/discovery/v2/events/{id}/images\":\n    get:\n      description: Get images for a specific event using the unique identifier for the event.\n      operationId: getImages\n      parameters:\n        - description: ID of the event\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/EventImages\"\n          description: successful operation\n      summary: Get Event Images\n  /discovery/v2/suggest:\n    get:\n      description: Find search suggestions and filter your suggestions by location, source, etc.\n      parameters:\n        - description: Keyword to search on\n          example: \"\"\n          in: query\n          name: keyword\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its source name\n          example: \"\"\n          in: query\n          name: source\n          required: false\n          schema:\n            default: \"\"\n            enum:\n              - ticketmaster\n              - \" universe\"\n              - \" frontgate\"\n              - \" tmr\"\n            type: string\n        - description: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead\n          example: 33.80003000,-117.88304300\n          in: query\n          name: latlong\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$\n            type: string\n        - description: Radius of the area in which we want to search for events.\n          example: \"\"\n          in: query\n          name: radius\n          required: false\n          schema:\n            default: \"100\"\n            pattern: ^\\s*$|^0*1?\\d{1,4}$\n            type: string\n        - description: Unit of the radius\n          example: \"\"\n          in: query\n          name: unit\n          required: false\n          schema:\n            default: miles\n            enum:\n              - miles\n              - km\n            pattern: ^\\s*|miles|km$\n            type: string\n        - description: Size of every entity returned in the response\n          example: \"\"\n          in: query\n          name: size\n          required: false\n          schema:\n            default: \"5\"\n            maximum: 5\n            minimum: 1\n            type: string\n        - description: yes, to include fuzzy matches in the search. This has performance impact.\n          example: \"\"\n          in: query\n          name: includeFuzzy\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no\n            type: string\n        - description: Filter events to clientName\n          example: \"\"\n          in: query\n          name: clientVisibility\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter suggestions by country code\n          example: \"\"\n          in: query\n          name: countryCode\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: True, to include events with date to be announce (TBA)\n          example: \"\"\n          in: query\n          name: includeTBA\n          required: false\n          schema:\n            default: no if date parameter sent, yes otherwise\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: True, to include event with a date to be defined (TBD)\n          example: \"\"\n          in: query\n          name: includeTBD\n          required: false\n          schema:\n            default: no if date parameter sent, yes otherwise\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: Filter suggestions by segment id\n          example: \"\"\n          in: query\n          name: segmentId\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: filter events by geoHash\n          example: dr5rh\n          in: query\n          name: geoPoint\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$|^[a-zA-Z0-9]{1,9}$\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: Yes if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n        - description: yes, to include spell check suggestions in the response.\n          example: \"\"\n          in: query\n          name: includeSpellcheck\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/hal+json; charset=utf-8:\n              schema:\n                type: string\n            application/json; charset=utf-8:\n              schema:\n                type: string\n          description: successful operation\n      summary: Find Suggest\n      tags:\n        - v2\n  /discovery/v2/venues:\n    get:\n      description: Find venues and filter your search by name, and much more.\n      parameters:\n        - description: \"Sorting order of the search result. Allowable Values: 'name,asc', 'name,desc', 'relevance,asc', 'relevance,desc', 'distance,asc', 'distance,desc'\"\n          example: \"\"\n          in: query\n          name: sort\n          required: false\n          schema:\n            default: relevance,desc\n            pattern: ^(name|relevance|distance),(asc|desc)$\n            type: string\n        - description: Filter venues by state / province code\n          example: \"\"\n          in: query\n          name: stateCode\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter venues by country code\n          example: \"\"\n          in: query\n          name: countryCode\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter events by latitude and longitude, this filter is deprecated and maybe removed in a future release, please use geoPoint instead\n          example: 33.80003000,-117.88304300\n          in: query\n          name: latlong\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$\n            type: string\n        - description: Radius of the area in which we want to search for events.\n          example: \"\"\n          in: query\n          name: radius\n          required: false\n          schema:\n            default: \"50\"\n            pattern: ^\\s*$|^0*1?\\d{1,4}$\n            type: string\n        - description: Unit of the radius\n          example: \"\"\n          in: query\n          name: unit\n          required: false\n          schema:\n            default: miles\n            enum:\n              - miles\n              - km\n            pattern: ^\\s*|miles|km$\n            type: string\n        - description: filter events by geoHash\n          example: dr5rh\n          in: query\n          name: geoPoint\n          required: false\n          schema:\n            default: \"\"\n            pattern: ^\\s*$|^-?(90(\\.0+)?|[0-8]?[0-9](\\.\\d+)?),-?(180(\\.0+)?|(1[0-7][0-9]|\\d{1,2})(\\.\\d+)?)$|^[a-zA-Z0-9]{1,9}$\n            type: string\n        - description: Keyword to search on\n          example: \"\"\n          in: query\n          name: keyword\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its id\n          example: \"\"\n          in: query\n          name: id\n          required: false\n          schema:\n            default: \"\"\n            type: string\n        - description: Filter entities by its source name\n          example: \"\"\n          in: query\n          name: source\n          required: false\n          schema:\n            default: \"\"\n            enum:\n              - ticketmaster\n              - \" universe\"\n              - \" frontgate\"\n              - \" tmr\"\n            type: string\n        - description: True if you want to have entities flag as test in the response. Only, if you only wanted test entities\n          example: \"\"\n          in: query\n          name: includeTest\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n              - \" only\"\n            pattern: ^\\s*|yes|no|only$\n            type: string\n        - description: Page number\n          example: \"\"\n          in: query\n          name: page\n          required: false\n          schema:\n            default: \"0\"\n            minimum: 0\n            type: string\n        - description: Page size of the response\n          example: \"\"\n          in: query\n          name: size\n          required: false\n          schema:\n            default: \"20\"\n            maximum: 500\n            minimum: 1\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: Yes if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n        - description: yes, to include spell check suggestions in the response.\n          example: \"\"\n          in: query\n          name: includeSpellcheck\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                items:\n                  $ref: \"#/components/schemas/Venue\"\n                type: array\n          description: successful operation\n      summary: Venue Search\n  \"/discovery/v2/venues/{id}\":\n    get:\n      description: Get details for a specific venue using the unique identifier for the venue.\n      parameters:\n        - description: ID of the venue\n          in: path\n          name: id\n          required: true\n          schema:\n            type: string\n        - description: \"The locale in ISO code format. Multiple comma-separated values can be provided. When omitting the country part of the code (e.g. only 'en' or 'fr') then the first matching locale is used. When using a '*' it matches all locales. '*' can only be used at the end (e.g. 'en-us,en,*') \"\n          example: en-us,en,fr\n          in: query\n          name: locale\n          required: false\n          schema:\n            default: en\n            type: string\n        - description: True if you want to display licensed content\n          example: \"\"\n          in: query\n          name: includeLicensedContent\n          required: false\n          schema:\n            default: no\n            enum:\n              - yes\n              - \" no\"\n            pattern: ^\\s*|yes|no$\n            type: string\n      responses:\n        \"200\":\n          content:\n            \"*/*\":\n              schema:\n                $ref: \"#/components/schemas/Venue\"\n          description: successful operation\n      summary: Get Venue Details\ncomponents:\n  schemas:\n    AccessDates:\n      description: Event's Access Date\n      properties:\n        endApproximate:\n          default: false\n          description: Boolean flag to indicate whether or not the access end date is approximated\n          example: yyyy-MM-ddThh-mm-ssZ\n          type: boolean\n          x-position: 3\n        endDateTime:\n          description: Event's end access time\n          example: yyyy-MM-ddThh-mm-ssZ\n          format: date-time\n          type: string\n          x-position: 2\n        startApproximate:\n          default: false\n          description: Boolean flag to indicate whether or not the access start date is approximated\n          type: boolean\n          x-position: 1\n        startDateTime:\n          description: Event's start access time\n          example: yyyy-MM-ddThh-mm-ssZ\n          format: date-time\n          type: string\n      type: object\n    Accessibility:\n      description: Additional information for people who experience disabilities\n      properties:\n        info:\n          description: Accessibility's information\n          type: string\n          x-position: 1\n      type: object\n    Address:\n      description: Address\n      properties:\n        line1:\n          description: Address first line\n          type: string\n        line2:\n          description: Address second line\n          type: string\n          x-position: 3\n        line3:\n          description: Address third line\n          type: string\n          x-position: 3\n      type: object\n    Area:\n      description: Area\n      properties:\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n      type: object\n    Attraction:\n      description: Attraction\n      properties:\n        additionalInfo:\n          description: Additional information of the entity\n          type: string\n          x-position: 22\n        classifications:\n          description: Attraction's classifications\n          items:\n            $ref: \"#/components/schemas/Classification\"\n          type: array\n          x-position: 30\n        description:\n          description: Description's of the entity\n          type: string\n          x-position: 20\n        externalLinks:\n          additionalProperties:\n            items:\n              $ref: \"#/components/schemas/ExternalLink\"\n            type: array\n          description: List of external links\n          type: object\n          x-position: 79\n        id:\n          description: Unique id of the entity in the discovery API\n          type: string\n          x-position: 1\n        images:\n          description: Images of the entity\n          items:\n            $ref: \"#/components/schemas/Image\"\n          type: array\n          uniqueItems: true\n          x-position: 29\n        locale:\n          description: Locale in which the content is returned\n          type: string\n          x-position: 3\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        test:\n          default: false\n          description: Indicate if this is a test entity, by default test entities won't appear in discovery API\n          type: boolean\n          x-position: 96\n        type:\n          description: Type of the entity\n          enum:\n            - event\n            - venue\n            - attraction\n          type: string\n        upcomingEvents:\n          additionalProperties:\n            format: int32\n            type: integer\n          description: number of upcoming events\n          type: object\n          x-position: 110\n        url:\n          description: URL of a web site detail page of the entity\n          type: string\n          x-position: 24\n      required:\n        - id\n        - type\n      type: object\n    AttractionExtensions:\n      description: All Attraction's extensions\n      type: object\n    Attribution:\n      description: Attribution\n      properties:\n        licenceName:\n          description: LicenceName\n          type: string\n        licenceUrl:\n          description: LicenceUrl\n          type: string\n        sourceName:\n          description: SourceName\n          type: string\n        sourceUrl:\n          description: SourceUrl\n          type: string\n      type: object\n    Attributions:\n      description: Attributions\n      properties:\n        description:\n          $ref: \"#/components/schemas/Attribution\"\n        descriptions:\n          additionalProperties:\n            $ref: \"#/components/schemas/Attribution\"\n          description: Attribution descriptions - multi-lingual fields\n          type: object\n      type: object\n    Chronology:\n      properties:\n        zone:\n          $ref: \"#/components/schemas/DateTimeZone\"\n      type: object\n    City:\n      description: City\n      properties:\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n      type: object\n    Classification:\n      description: Classification\n      properties:\n        genre:\n          $ref: \"#/components/schemas/Level\"\n        primary:\n          default: false\n          description: True if this is the entity's primary classification\n          type: boolean\n        segment:\n          $ref: \"#/components/schemas/Segment\"\n        subGenre:\n          $ref: \"#/components/schemas/Level\"\n        subType:\n          $ref: \"#/components/schemas/Level\"\n        type:\n          $ref: \"#/components/schemas/Level\"\n      type: object\n    Country:\n      description: Country\n      properties:\n        countryCode:\n          description: Country code (ISO 3166)\n          type: string\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n      type: object\n    DateTimeField:\n      properties:\n        durationField:\n          $ref: \"#/components/schemas/DurationField\"\n        leapDurationField:\n          $ref: \"#/components/schemas/DurationField\"\n        lenient:\n          default: false\n          type: boolean\n        maximumValue:\n          format: int32\n          type: integer\n        minimumValue:\n          format: int32\n          type: integer\n        name:\n          type: string\n        rangeDurationField:\n          $ref: \"#/components/schemas/DurationField\"\n        supported:\n          default: false\n          type: boolean\n        type:\n          $ref: \"#/components/schemas/DateTimeFieldType\"\n      type: object\n    DateTimeFieldType:\n      properties:\n        durationType:\n          $ref: \"#/components/schemas/DurationFieldType\"\n        name:\n          type: string\n        rangeDurationType:\n          $ref: \"#/components/schemas/DurationFieldType\"\n      type: object\n    DateTimeZone:\n      properties:\n        fixed:\n          default: false\n          type: boolean\n        id:\n          type: string\n      type: object\n    DisplaySettingExtension:\n      description: Event's display settings extension\n      properties:\n        softLanding:\n          default: false\n          description: True the landing is Soft otherwise it's Comingled\n          type: boolean\n      type: object\n    Dma:\n      description: DMA (Designated Market Area)\n      properties:\n        id:\n          description: DMS's id\n          format: int32\n          type: integer\n      type: object\n    DurationField:\n      properties:\n        name:\n          type: string\n        precise:\n          default: false\n          type: boolean\n        supported:\n          default: false\n          type: boolean\n        type:\n          $ref: \"#/components/schemas/DurationFieldType\"\n        unitMillis:\n          format: int64\n          type: integer\n      type: object\n    DurationFieldType:\n      properties:\n        name:\n          type: string\n      type: object\n    EndDates:\n      description: Event's End Dates\n      properties:\n        approximate:\n          default: false\n          description: Boolean flag to indicate whether or not the end date is approximated\n          type: boolean\n          x-position: 3\n        dateTime:\n          description: The event end date time\n          example: yyyy-MM-ddThh-mm-ssZ\n          format: date-time\n          type: string\n          x-position: 2\n        localDate:\n          description: The event end date in local date\n          example: yyyy-MM-dd\n          format: date\n          type: string\n        localTime:\n          $ref: \"#/components/schemas/LocalTime\"\n        noSpecificTime:\n          default: false\n          description: Boolean flag to indicate whether or not the event end time has no specific time\n          type: boolean\n          x-position: 4\n      type: object\n    EntityChanges:\n      properties:\n        changes:\n          items:\n            type: string\n          type: array\n          uniqueItems: true\n        newlyCreated:\n          default: false\n          type: boolean\n      type: object\n    Event:\n      description: Event\n      properties:\n        accessibility:\n          $ref: \"#/components/schemas/Accessibility\"\n        additionalInfo:\n          description: Additional information of the entity\n          type: string\n          x-position: 22\n        classifications:\n          description: Event's classifications\n          items:\n            $ref: \"#/components/schemas/Classification\"\n          type: array\n          x-position: 50\n        dates:\n          $ref: \"#/components/schemas/EventDates\"\n        description:\n          description: Description's of the entity\n          type: string\n          x-position: 20\n        distance:\n          format: double\n          type: number\n        externalLinks:\n          additionalProperties:\n            items:\n              $ref: \"#/components/schemas/ExternalLink\"\n            type: array\n          description: List of external links\n          type: object\n          x-position: 79\n        id:\n          description: Unique id of the entity in the discovery API\n          type: string\n          x-position: 1\n        images:\n          description: Images of the entity\n          items:\n            $ref: \"#/components/schemas/Image\"\n          type: array\n          uniqueItems: true\n          x-position: 29\n        info:\n          description: Any information related to the event\n          type: string\n          x-position: 32\n        locale:\n          description: Locale in which the content is returned\n          type: string\n          x-position: 3\n        location:\n          $ref: \"#/components/schemas/Location\"\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        outlets:\n          description: Related outlets informations\n          items:\n            $ref: \"#/components/schemas/Outlet\"\n          type: array\n          x-position: 37\n        place:\n          $ref: \"#/components/schemas/Place\"\n        pleaseNote:\n          description: Any notes related to the event\n          type: string\n          x-position: 34\n        priceRanges:\n          description: Price ranges of this event\n          items:\n            $ref: \"#/components/schemas/PriceRange\"\n          type: array\n          uniqueItems: true\n          x-position: 36\n        products:\n          description: Related products informations\n          items:\n            $ref: \"#/components/schemas/Product\"\n          type: array\n          x-position: 38\n        promoter:\n          $ref: \"#/components/schemas/Promoter\"\n        promoters:\n          description: Event's promoters\n          items:\n            $ref: \"#/components/schemas/Promoter\"\n          type: array\n          x-position: 37\n        sales:\n          $ref: \"#/components/schemas/EventSalesDates\"\n        seatmap:\n          $ref: \"#/components/schemas/SeatMap\"\n        test:\n          default: false\n          description: Indicate if this is a test entity, by default test entities won't appear in discovery API\n          type: boolean\n          x-position: 96\n        type:\n          description: Type of the entity\n          enum:\n            - event\n            - venue\n            - attraction\n          type: string\n        units:\n          type: string\n        url:\n          description: URL of a web site detail page of the entity\n          type: string\n          x-position: 24\n      required:\n        - id\n        - type\n      type: object\n    EventDates:\n      description: Event's Dates\n      properties:\n        access:\n          $ref: \"#/components/schemas/AccessDates\"\n        end:\n          $ref: \"#/components/schemas/EndDates\"\n        spanMultipleDays:\n          default: false\n          description: Flag indicating if date spans of multiple days\n          type: boolean\n          x-position: 5\n        start:\n          $ref: \"#/components/schemas/StartDates\"\n        status:\n          $ref: \"#/components/schemas/EventStatus\"\n        timezone:\n          description: Event's timezone\n          type: string\n          x-position: 3\n      type: object\n    EventExtensions:\n      description: All Event's extensions\n      type: object\n    EventImages:\n      description: This class defines an Event with only images view on the Discovery API\n      properties:\n        id:\n          description: Unique id of the entity in the discovery API\n          type: string\n          x-position: 1\n        images:\n          description: Images of the entity\n          items:\n            $ref: \"#/components/schemas/Image\"\n          type: array\n          uniqueItems: true\n          x-position: 2\n        type:\n          description: Type of the entity\n          enum:\n            - event\n          type: string\n      required:\n        - id\n        - type\n      type: object\n    EventSalesDates:\n      description: Event's Sales Dates\n      properties:\n        presales:\n          description: Presale information on this event\n          items:\n            $ref: \"#/components/schemas/Presale\"\n          type: array\n          x-position: 1\n        public:\n          $ref: \"#/components/schemas/PublicSaleDates\"\n      type: object\n    EventStatus:\n      description: Event's Status\n      properties:\n        code:\n          description: The event's status code\n          enum:\n            - onsale\n            - offsale\n            - canceled\n            - postponed\n            - rescheduled\n          type: string\n      type: object\n    Extension:\n      type: object\n    ExternalLink:\n      description: ExternalLink\n      properties:\n        id:\n          description: An external link id is the unique identifier of a resource on a different domain or api\n          type: string\n          x-position: 2\n        url:\n          description: An external link url is a url that goes to a different domain or api\n          type: string\n          x-position: 2\n      type: object\n    Genre:\n      description: Secondary Genre\n      properties:\n        id:\n          description: The ID of the classification's level\n          type: string\n        name:\n          description: The Name of the classification's level\n          type: string\n          x-position: 1\n      type: object\n    GeocodeExtension:\n      properties:\n        city:\n          type: string\n        country:\n          type: string\n        county:\n          type: string\n        formattedAddress:\n          type: string\n        geometry:\n          $ref: \"#/components/schemas/Geometry\"\n        postalCode:\n          type: string\n        route:\n          type: string\n        state:\n          type: string\n        streetNumber:\n          type: string\n      type: object\n    GeolocationVenueExtensions:\n      description: Venue's geocode extension\n      properties:\n        geocode:\n          $ref: \"#/components/schemas/GeocodeExtension\"\n      type: object\n    Geometry:\n      properties:\n        location:\n          $ref: \"#/components/schemas/Location\"\n      type: object\n    HostExtension:\n      description: Event's Host extension\n      type: object\n    Image:\n      description: Image\n      properties:\n        attribution:\n          description: Attribution of the image\n          type: string\n          x-position: 8\n        fallback:\n          default: false\n          description: true if the image is not the event's image but a fallbak image\n          type: boolean\n          x-position: 6\n        height:\n          description: Height of the image\n          format: int32\n          type: integer\n          x-position: 5\n        ratio:\n          description: Aspect ratio of the image\n          enum:\n            - 16_9\n            - 3_2\n            - 4_3\n          type: string\n          x-position: 3\n        url:\n          description: Public URL of the image\n          type: string\n          x-position: 2\n        width:\n          description: Width of the image\n          format: int32\n          type: integer\n          x-position: 4\n      type: object\n    Level:\n      properties:\n        id:\n          description: The ID of the classification's level\n          type: string\n        name:\n          description: The Name of the classification's level\n          type: string\n          x-position: 1\n      type: object\n    LocalTime:\n      properties:\n        chronology:\n          $ref: \"#/components/schemas/Chronology\"\n        fieldTypes:\n          items:\n            $ref: \"#/components/schemas/DateTimeFieldType\"\n          type: array\n        fields:\n          items:\n            $ref: \"#/components/schemas/DateTimeField\"\n          type: array\n        hourOfDay:\n          format: int32\n          type: integer\n        millisOfDay:\n          format: int32\n          type: integer\n        millisOfSecond:\n          format: int32\n          type: integer\n        minuteOfHour:\n          format: int32\n          type: integer\n        secondOfMinute:\n          format: int32\n          type: integer\n        values:\n          items:\n            format: int32\n            type: integer\n          type: array\n      type: object\n    Locale:\n      properties:\n        country:\n          type: string\n        displayCountry:\n          type: string\n        displayLanguage:\n          type: string\n        displayName:\n          type: string\n        displayScript:\n          type: string\n        displayVariant:\n          type: string\n        extensionKeys:\n          items:\n            type: string\n          type: array\n          uniqueItems: true\n        iso3Country:\n          type: string\n        iso3Language:\n          type: string\n        language:\n          type: string\n        script:\n          type: string\n        unicodeLocaleAttributes:\n          items:\n            type: string\n          type: array\n          uniqueItems: true\n        unicodeLocaleKeys:\n          items:\n            type: string\n          type: array\n          uniqueItems: true\n        variant:\n          type: string\n      type: object\n    Location:\n      description: Location\n      properties:\n        latitude:\n          description: Latitude\n          type: number\n        longitude:\n          description: Longitude\n          type: number\n      type: object\n    Market:\n      description: Market\n      properties:\n        id:\n          description: Market's id\n          type: string\n      type: object\n    Outlet:\n      description: A selling point for tickets.\n      properties:\n        type:\n          description: Outlet's type\n          type: string\n          x-position: 2\n        url:\n          description: Outlet's url\n          type: string\n          x-position: 1\n      type: object\n    Parking:\n      description: Parking\n      properties:\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        url:\n          description: Url to the web page of the parking\n          type: string\n          x-position: 20\n      type: object\n    Place:\n      description: Place\n      properties:\n        address:\n          $ref: \"#/components/schemas/Address\"\n        area:\n          $ref: \"#/components/schemas/Area\"\n        city:\n          $ref: \"#/components/schemas/City\"\n        country:\n          $ref: \"#/components/schemas/Country\"\n        location:\n          $ref: \"#/components/schemas/Location\"\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        postalCode:\n          description: Postal code / zipcode of the place\n          type: string\n          x-position: 5\n        state:\n          $ref: \"#/components/schemas/State\"\n      type: object\n    Presale:\n      description: Event's Presale Info\n      properties:\n        description:\n          description: Description of the presame\n          type: string\n          x-position: 1\n        endDateTime:\n          description: Presale's end dates. The date and time when the presale will end\n          format: date-time\n          type: string\n          x-position: 5\n        name:\n          description: Name of the presale\n          type: string\n        startDateTime:\n          description: Presale's start dates. The date and time when the presale will start\n          format: date-time\n          type: string\n          x-position: 4\n        url:\n          description: Presale link URL\n          type: string\n          x-position: 3\n      type: object\n    PriceRange:\n      description: PriceRange\n      properties:\n        currency:\n          description: Currency\n          type: string\n          x-position: 1\n        max:\n          description: Maximum price\n          format: double\n          type: number\n          x-position: 3\n        min:\n          description: Minimum price\n          format: double\n          type: number\n          x-position: 2\n        type:\n          description: Type of price\n          enum:\n            - standard\n          type: string\n      type: object\n    Product:\n      description: Product\n      properties:\n        id:\n          description: Product's primary id\n          type: string\n          x-position: 10\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        type:\n          description: Product's type\n          type: string\n          x-position: 13\n        url:\n          description: Product's url\n          type: string\n          x-position: 12\n      type: object\n    Promoter:\n      description: Promoter\n      properties:\n        description:\n          description: Description of the promoter\n          type: string\n          x-position: 3\n        id:\n          description: Id of the promoter\n          type: string\n        name:\n          description: Name of the promoter\n          type: string\n          x-position: 1\n      type: object\n    PublicSaleDates:\n      description: Event's Public Onsales Dates\n      properties:\n        endDateTime:\n          description: Public sale's end dates. The date and time when the public sale will end\n          format: date-time\n          type: string\n          x-position: 1\n        startDateTime:\n          description: Public sale's start dates. The date and time when the public sale will start\n          format: date-time\n          type: string\n        startTBD:\n          default: false\n          description: True if the public sale's date is to be determined\n          type: boolean\n          x-position: 2\n      type: object\n    PublicVisibility:\n      description: The class defines the public visibility period on the Discovery/Publish API.\n      type: object\n    Relationship:\n      description: Relationship\n      properties:\n        id:\n          description: The ID of the related entity\n          type: string\n          x-position: 2\n        references:\n          additionalProperties:\n            type: string\n          description: References of this relationship in another system. Reference is the exact same entity\n          example: \"sourceName: id\"\n          type: object\n          x-position: 3\n        source:\n          description: The source name of the related entity\n          type: string\n          x-position: 1\n        type:\n          description: The type of the relationship\n          enum:\n            - duplicate\n          type: string\n      type: object\n    SeatMap:\n      description: Seatmap\n      properties:\n        staticUrl:\n          description: Static Seatmap Url\n          type: string\n          x-position: 3\n      type: object\n    Segment:\n      description: Segment\n      properties:\n        id:\n          description: The ID of the classification's level\n          type: string\n        name:\n          description: The Name of the classification's level\n          type: string\n          x-position: 1\n      type: object\n    Social:\n      description: Social networks data\n      properties:\n        twitter:\n          $ref: \"#/components/schemas/Twitter\"\n      type: object\n    Source:\n      description: Source\n      type: object\n    StartDates:\n      description: Event's Start Dates\n      properties:\n        dateTBA:\n          default: false\n          description: Boolean flag to indicate whether or not the start date is TBA\n          type: boolean\n          x-position: 4\n        dateTBD:\n          default: false\n          description: Boolean flag to indicate whether or not the start date is TBD\n          type: boolean\n          x-position: 3\n        dateTime:\n          description: The event start datetime\n          example: yyyy-MM-ddThh:mm:ssZ\n          format: date-time\n          type: string\n          x-position: 2\n        localDate:\n          description: The event start date in local date\n          example: yyyy-MM-dd\n          format: date\n          type: string\n        localTime:\n          $ref: \"#/components/schemas/LocalTime\"\n        noSpecificTime:\n          default: false\n          description: Boolean flag to indicate whether or not the event start time has no specific time\n          type: boolean\n          x-position: 6\n        timeTBA:\n          default: false\n          description: Boolean flag to indicate whether or not the start time is TBA\n          type: boolean\n          x-position: 5\n      type: object\n    State:\n      description: State\n      properties:\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        stateCode:\n          description: State code\n          type: string\n      type: object\n    TatExtension:\n      description: The Attraction Tool (TAT) extension\n      type: object\n    TicketmasterAttractionExtensions:\n      description: Attraction's extension (ticketmaster source)\n      type: object\n    TicketmasterEventExtensions:\n      description: Event's extension (ticketmaster source)\n      properties:\n        displaySettings:\n          $ref: \"#/components/schemas/DisplaySettingExtension\"\n      type: object\n    TicketmasterVenueExtensions:\n      description: Venue's extension (ticketmaster source)\n      type: object\n    Twitter:\n      description: Twitter data\n      properties:\n        handle:\n          description: Twitter handle\n          enum:\n            - \"@a Twitter handle\"\n          example: \"@a Twitter handle exampe\"\n          type: string\n        hashtags:\n          description: Twitter hashtags\n          example: \"#hashtag example #hashtag another example\"\n          items:\n            type: string\n          type: array\n          x-position: 1\n      type: object\n    Venue:\n      description: Venue\n      properties:\n        accessibleSeatingDetail:\n          description: Venue accessible seating detail\n          type: string\n          x-position: 35\n        additionalInfo:\n          description: Additional information of the entity\n          type: string\n          x-position: 22\n        address:\n          $ref: \"#/components/schemas/Address\"\n        boxOfficeInfo:\n          $ref: \"#/components/schemas/VenueBoxOfficeInfo\"\n        city:\n          $ref: \"#/components/schemas/City\"\n        country:\n          $ref: \"#/components/schemas/Country\"\n        currency:\n          description: Default currency of ticket prices for events in this venue\n          type: string\n          x-position: 27\n        description:\n          description: Description's of the entity\n          type: string\n          x-position: 20\n        distance:\n          format: double\n          type: number\n        dma:\n          description: The list of associated DMAs (Designated Market Areas) of the venue\n          items:\n            $ref: \"#/components/schemas/Dma\"\n          type: array\n          x-position: 29\n        externalLinks:\n          additionalProperties:\n            items:\n              $ref: \"#/components/schemas/ExternalLink\"\n            type: array\n          description: List of external links\n          type: object\n          x-position: 79\n        generalInfo:\n          $ref: \"#/components/schemas/VenueGeneralInfo\"\n        id:\n          description: Unique id of the entity in the discovery API\n          type: string\n          x-position: 1\n        images:\n          description: Images of the entity\n          items:\n            $ref: \"#/components/schemas/Image\"\n          type: array\n          uniqueItems: true\n          x-position: 29\n        locale:\n          description: Locale in which the content is returned\n          type: string\n          x-position: 3\n        location:\n          $ref: \"#/components/schemas/Location\"\n        markets:\n          description: Markets of the venue\n          items:\n            $ref: \"#/components/schemas/Market\"\n          type: array\n          x-position: 28\n        name:\n          description: Name of the entity\n          type: string\n          x-position: 10\n        parkingDetail:\n          description: Venue parking info\n          type: string\n          x-position: 33\n        postalCode:\n          description: Postal code / zipcode of the venue\n          type: string\n          x-position: 24\n        social:\n          $ref: \"#/components/schemas/Social\"\n        state:\n          $ref: \"#/components/schemas/State\"\n        test:\n          default: false\n          description: Indicate if this is a test entity, by default test entities won't appear in discovery API\n          type: boolean\n          x-position: 96\n        timezone:\n          description: Timezone of the venue\n          type: string\n          x-position: 26\n        type:\n          description: Type of the entity\n          enum:\n            - event\n            - venue\n            - attraction\n          type: string\n        units:\n          type: string\n        upcomingEvents:\n          additionalProperties:\n            format: int32\n            type: integer\n          description: number of upcoming events\n          type: object\n          x-position: 110\n        url:\n          description: URL of a web site detail page of the entity\n          type: string\n          x-position: 24\n      required:\n        - id\n        - type\n      type: object\n    VenueBoxOfficeInfo:\n      description: Venue box office information\n      properties:\n        acceptedPaymentDetail:\n          description: Venue box office accepted payment details\n          type: string\n          x-position: 5\n        openHoursDetail:\n          description: Venue box office opening hours\n          type: string\n          x-position: 3\n        phoneNumberDetail:\n          description: Venue box office phone number\n          type: string\n          x-position: 1\n        willCallDetail:\n          description: Venue box office will call details\n          type: string\n          x-position: 7\n      type: object\n    VenueExtensions:\n      description: All Venue's extensions\n      properties:\n        geolocation:\n          $ref: \"#/components/schemas/GeolocationVenueExtensions\"\n      type: object\n    VenueGeneralInfo:\n      description: Venue general information\n      properties:\n        childRule:\n          description: Venue children rule\n          type: string\n          x-position: 3\n        generalRule:\n          description: Venue general rules\n          type: string\n          x-position: 1\n      type: object\n"
		}
	},
	"Error": "parse: parse spec: paths: /discovery/v2/venues: get: operation \"\": parameters: parse parameter \"includeTest\": schema: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}