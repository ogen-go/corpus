{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/readme/oas-examples"
		},
		"file": {
			"name": "schema-types.json",
			"size": 0,
			"path": "3.1/json/schema-types.json",
			"byteSize": 41782,
			"content": "{\n  \"openapi\": \"3.1.0\",\n  \"info\": {\n    \"title\": \"Support for different schema types\",\n    \"description\": \"Additionally some support for features that schema types may individually support.\\n\\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.1.0.md#schemaObject\",\n    \"version\": \"1.0.0\"\n  },\n  \"servers\": [\n    {\n      \"url\": \"https://httpbin.org\"\n    }\n  ],\n  \"tags\": [\n    {\n      \"name\": \"Strings\",\n      \"description\": \"Showcasing handling and support for `type: string` schemas.\"\n    },\n    {\n      \"name\": \"Numbers\",\n      \"description\": \"Showcasing handling and support for `type: integer` and `type: number` schemas.\"\n    },\n    {\n      \"name\": \"Booleans\",\n      \"description\": \"Showcasing handling and support for `type: boolean` schemas.\"\n    },\n    {\n      \"name\": \"Arrays\",\n      \"description\": \"Showcasing handling and support for `type: array` schemas.\"\n    },\n    {\n      \"name\": \"Objects\",\n      \"description\": \"Showcasing handling and support for `type: object` schemas.\"\n    },\n    {\n      \"name\": \"Circular references\",\n      \"description\": \"Showcasing handling and support for circular references (`$ref` pointers).\"\n    },\n    {\n      \"name\": \"ReadMe-flavors\",\n      \"description\": \"Showcasing handling and support for various ReadMe-flavored schema additions.\"\n    },\n    {\n      \"name\": \"Quirks\",\n      \"description\": \"Showcasing handling and support for various schema type quirks.\"\n    }\n  ],\n  \"paths\": {\n    \"/anything/strings\": {\n      \"post\": {\n        \"operationId\": \"string_schemaSupport\",\n        \"summary\": \"String support\",\n        \"description\": \"Support and handling of `type: string` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Strings\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"stock\": {\n                    \"type\": \"string\"\n                  },\n                  \"description (markdown)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This is a string with a **markdown** description: [link](ref:action-object)\"\n                  },\n                  \"title\": {\n                    \"type\": \"string\",\n                    \"title\": \"This string has a `title` property.\"\n                  },\n                  \"required\": {\n                    \"type\": \"string\",\n                    \"description\": \"This parameter should be required.\"\n                  },\n                  \"default\": {\n                    \"type\": \"string\",\n                    \"description\": \"This string has a `default` of `default value`.\",\n                    \"default\": \"default value\"\n                  },\n                  \"default (null)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This string has a `default` of `null`.\",\n                    \"default\": null\n                  },\n                  \"enum\": {\n                    \"type\": \"string\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"]\n                  },\n                  \"enum (with default)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a `default` of `available`.\",\n                    \"enum\": [\"available\", \"pending\", \"sold\"],\n                    \"default\": \"available\"\n                  },\n                  \"enum (with empty option)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a an empty string (`\\\"\\\"`) as one of its available options.\",\n                    \"enum\": [\"\", \"available\", \"pending\", \"sold\"]\n                  },\n                  \"enum (with empty option and empty default)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This enum has a an empty string (`\\\"\\\"`) as its only available option, and that same value is set as its `default`.\",\n                    \"enum\": [\"\"],\n                    \"default\": \"\"\n                  }\n                },\n                \"required\": [\"required\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"put\": {\n        \"operationId\": \"string_formatSupport\",\n        \"summary\": \"`format` data types\",\n        \"description\": \"Handling of `format` data types on `type: string` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Strings\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"binary\": {\n                    \"type\": \"string\",\n                    \"format\": \"binary\"\n                  },\n                  \"binary (with default)\": {\n                    \"type\": \"string\",\n                    \"format\": \"binary\",\n                    \"default\": \"data:text/plain;name=file1.txt;base64,dGVzdDE=\"\n                  },\n                  \"blob\": {\n                    \"type\": \"string\",\n                    \"description\": \"Strings with `format: blob` should render a `\u003ctextarea\u003e`.\",\n                    \"format\": \"blob\",\n                    \"example\": \"This is some example content for this parameter.\"\n                  },\n                  \"date\": {\n                    \"type\": \"string\",\n                    \"format\": \"date\"\n                  },\n                  \"date (with pattern)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This accepts a pattern of matching `(\\\\d{4})-(\\\\d{2})-(\\\\d{2})`\",\n                    \"format\": \"date\",\n                    \"pattern\": \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\"\n                  },\n                  \"date-time\": {\n                    \"type\": \"string\",\n                    \"description\": \"Unsupported due to the varying ways that `date-time` is utilized in API definitions for representing dates, the [lack of wide browser support for the input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local#Browser_compatibility), and that it's not [RFC 3339](https://tools.ietf.org/html/rfc3339) compliant.\",\n                    \"format\": \"date-time\"\n                  },\n                  \"html\": {\n                    \"type\": \"string\",\n                    \"description\": \"Strings with `format: html` should render a `\u003ctextarea\u003e`.\",\n                    \"format\": \"html\"\n                  },\n                  \"json\": {\n                    \"type\": \"string\",\n                    \"description\": \"This is a special ReadMe data type to render a `\u003ctextarea\u003e` to be parsed as JSON\",\n                    \"format\": \"json\"\n                  },\n                  \"string\": {\n                    \"type\": \"string\",\n                    \"format\": \"string\"\n                  },\n                  \"password\": {\n                    \"type\": \"string\",\n                    \"format\": \"password\"\n                  },\n                  \"password (minLength: 5, maxLength: 20)\": {\n                    \"type\": \"string\",\n                    \"description\": \"This `format: password` input has a `minLength` and `maxLength` configured.\",\n                    \"format\": \"password\",\n                    \"minLength\": 5,\n                    \"maxLength\": 20\n                  },\n                  \"url\": {\n                    \"type\": \"string\",\n                    \"format\": \"url\"\n                  },\n                  \"unknown-format\": {\n                    \"type\": \"string\",\n                    \"format\": \"unknown-format\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/strings/top-level-payloads\": {\n      \"post\": {\n        \"operationId\": \"string_topLevel\",\n        \"summary\": \"Top-level payloads\",\n        \"description\": \"Handling of a `requestBody` payload that's a single `type: string`.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Strings\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"string_topLevelJSON\",\n        \"summary\": \"Top-level payloads (JSON)\",\n        \"description\": \"Handling of a `requestBody` payload that's a single `type: string` but `format: json`.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Strings\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"string\",\n                \"format\": \"json\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/numbers\": {\n      \"post\": {\n        \"operationId\": \"number_schemaSupport\",\n        \"summary\": \"Number support\",\n        \"description\": \"Support and handling of `type: integer` and `type: number` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Numbers\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"integer (stock)\": {\n                    \"type\": \"integer\"\n                  },\n                  \"integer (markdown description)\": {\n                    \"type\": \"integer\",\n                    \"description\": \"This is an `integer` with a **markdown** description: [link](ref:action-object)\"\n                  },\n                  \"integer (title)\": {\n                    \"type\": \"integer\",\n                    \"title\": \"This integer has a `title` property.\"\n                  },\n                  \"integer (required)\": {\n                    \"type\": \"integer\",\n                    \"description\": \"This parameter should be required.\"\n                  },\n                  \"integer (default)\": {\n                    \"type\": \"integer\",\n                    \"description\": \"This integer has a `default` of `1234`.\",\n                    \"default\": 1234\n                  },\n                  \"integer (default null)\": {\n                    \"type\": \"integer\",\n                    \"description\": \"This integer has a `default` of `null`.\",\n                    \"default\": null\n                  },\n                  \"integer (minimum / maximum)\": {\n                    \"type\": \"integer\",\n                    \"description\": \"This integer has a `minimum` of `100` and `maximum` of `999`.\",\n                    \"minimum\": 100,\n                    \"maximum\": 999\n                  },\n                  \"number (stock)\": {\n                    \"type\": \"number\"\n                  },\n                  \"number (markdown description)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This is a `number` with a **markdown** description: [link](ref:action-object)\"\n                  },\n                  \"number (title)\": {\n                    \"type\": \"number\",\n                    \"title\": \"This number has a `title` property.\"\n                  },\n                  \"number (required)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This parameter should be required.\"\n                  },\n                  \"number (default)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This number has a `default` of `12.34`.\",\n                    \"default\": 12.34\n                  },\n                  \"number (default null)\": {\n                    \"type\": \"number\",\n                    \"description\": \"This number has a `default` of `null`.\",\n                    \"default\": null\n                  }\n                },\n                \"required\": [\"integer (required)\", \"number (required)\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"put\": {\n        \"operationId\": \"number_formatSupport\",\n        \"summary\": \"`format` data types\",\n        \"description\": \"Handling `format` data types on `type: integer` and `type: number` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Numbers\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"integer (format: int8)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int8\"\n                  },\n                  \"integer (format: uint8)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint8\"\n                  },\n                  \"integer (format: int16)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int16\"\n                  },\n                  \"integer (format: uint16)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint16\"\n                  },\n                  \"integer (format: int32)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int32\"\n                  },\n                  \"integer (format: int32, multipleOf: 2)\": {\n                    \"type\": \"integer\",\n                    \"description\": \"This `integer` input has `multipleOf: 2` set on itself to control the increment/decrement value set.\",\n                    \"format\": \"int32\",\n                    \"multipleOf\": 2\n                  },\n                  \"integer (format: uint32)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint32\"\n                  },\n                  \"integer (format: int64)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                  },\n                  \"integer (format: uint64)\": {\n                    \"type\": \"integer\",\n                    \"format\": \"uint64\"\n                  },\n                  \"number (format: float)\": {\n                    \"type\": \"number\",\n                    \"format\": \"float\"\n                  },\n                  \"number (format: double)\": {\n                    \"type\": \"number\",\n                    \"format\": \"double\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"number_topLevel\",\n        \"summary\": \"Top-level payloads\",\n        \"description\": \"Handling of a `requestBody` payload that's a single `type: integer`.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Numbers\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"integer\",\n                \"format\": \"int64\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/booleans\": {\n      \"post\": {\n        \"operationId\": \"boolean_schemaSupport\",\n        \"summary\": \"Boolean support\",\n        \"description\": \"Support and handling of `type: boolean` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Booleans\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"stock\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"description (markdown)\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"This is a `boolean` with a **markdown** description: [link](ref:action-object)\"\n                  },\n                  \"title\": {\n                    \"type\": \"boolean\",\n                    \"title\": \"This boolean has a `title` property.\"\n                  },\n                  \"required\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"This parameter should be required.\"\n                  },\n                  \"default\": {\n                    \"type\": \"boolean\",\n                    \"description\": \"This boolean has a `default` of `false`.\",\n                    \"default\": false\n                  },\n                  \"inferred from enum\": {\n                    \"description\": \"Though this is missing a `type` declaration it should be treated as `boolean` because it contains an enum of `true` and `false`.\",\n                    \"enum\": [true, false]\n                  }\n                },\n                \"required\": [\"required\"]\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"boolean_topLevel\",\n        \"summary\": \"Top-level payloads\",\n        \"description\": \"Handling of a `requestBody` payload that's a single `type: boolean`.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Booleans\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"boolean\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/arrays\": {\n      \"post\": {\n        \"operationId\": \"array_schemaSupport\",\n        \"summary\": \"Array support\",\n        \"description\": \"Support and handling of `type: array` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Arrays\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"stock\": {\n                    \"type\": \"array\",\n                    \"items\": {}\n                  },\n                  \"with markdown description\": {\n                    \"type\": \"array\",\n                    \"description\": \"This is an `array` with a **markdown** description: [link](ref:action-object)\",\n                    \"items\": {}\n                  },\n                  \"with title\": {\n                    \"type\": \"array\",\n                    \"title\": \"This array has a `title` property.\",\n                    \"items\": {}\n                  },\n                  \"array\u003cany\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {}\n                  },\n                  \"array\u003cany\u003e (but no `items` property)\": {\n                    \"type\": \"array\",\n                    \"description\": \"Techncally this is a malformed schema, but we support it (for legacy reasons) and repair it to have `items: {}` when we generate JSON Schema for the form.\\n\\nThough its supported, not all OpenAPI validators allow it though so our support may regress at some point in the future.\"\n                  },\n                  \"array\u003cstring\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    }\n                  },\n                  \"array\u003cstring\u003e (with overall `null` default)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"string\"\n                    },\n                    \"default\": null\n                  },\n                  \"array\u003cstring\u003e (loaded via a $ref)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"$ref\": \"#/components/schemas/string_enum\"\n                    }\n                  },\n                  \"array\u003cinteger\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"integer\",\n                      \"format\": \"int64\"\n                    }\n                  },\n                  \"array\u003cnumber\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"number\",\n                      \"format\": \"float\"\n                    }\n                  },\n                  \"array\u003cboolean\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"boolean\"\n                    }\n                  },\n                  \"array\u003cobject\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"properties\": {\n                        \"string\": {\n                          \"type\": \"string\"\n                        },\n                        \"integer\": {\n                          \"type\": \"integer\"\n                        },\n                        \"number\": {\n                          \"type\": \"number\"\n                        },\n                        \"boolean\": {\n                          \"type\": \"boolean\"\n                        }\n                      }\n                    }\n                  },\n                  \"array\u003cobject\u003e (additionalProperties)\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"object\",\n                      \"additionalProperties\": true\n                    }\n                  },\n                  \"array\u003carray\u003cobject\u003e\u003e\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                      \"type\": \"array\",\n                      \"items\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"string\": {\n                            \"type\": \"string\"\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/arrays/top-level-payloads\": {\n      \"post\": {\n        \"operationId\": \"array_topLevelObjects\",\n        \"summary\": \"Top-level payloads (objects)\",\n        \"description\": \"Handling of a `requestBody` payload that's a `type: array` composed of objects.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Arrays\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"object\",\n                  \"properties\": {\n                    \"string\": {\n                      \"type\": \"string\"\n                    },\n                    \"integer\": {\n                      \"type\": \"integer\"\n                    },\n                    \"number\": {\n                      \"type\": \"number\"\n                    },\n                    \"boolean\": {\n                      \"type\": \"boolean\"\n                    },\n                    \"array\": {\n                      \"type\": \"array\",\n                      \"items\": {}\n                    },\n                    \"object\": {\n                      \"type\": \"object\",\n                      \"additionalProperties\": true\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"array_topLevelPrimitives\",\n        \"summary\": \"Top-level payloads (primitives)\",\n        \"description\": \"Handling of a `requestBody` payload that's a `type: array` composed of primitives.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#data-types)\\n\\n* [3.1.0 Data Types](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#dataTypes)\",\n        \"tags\": [\"Arrays\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/objects\": {\n      \"post\": {\n        \"operationId\": \"object_schemSupport\",\n        \"summary\": \"Object support\",\n        \"description\": \"Support and handling of `type: object` schemas.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Objects\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"object\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"string\": {\n                        \"type\": \"string\"\n                      },\n                      \"integer\": {\n                        \"type\": \"integer\"\n                      },\n                      \"number\": {\n                        \"type\": \"number\"\n                      },\n                      \"object\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"string\": {\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"array\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    }\n                  },\n                  \"object (with `title`)\": {\n                    \"title\": \"This object has a `title` property.\",\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"string\": {\n                        \"type\": \"string\"\n                      },\n                      \"integer\": {\n                        \"type\": \"integer\"\n                      },\n                      \"number\": {\n                        \"type\": \"number\"\n                      },\n                      \"object\": {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"string\": {\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      \"array\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                          \"type\": \"string\"\n                        }\n                      }\n                    }\n                  },\n                  \"object (without an explicit `type`)\": {\n                    \"description\": \"Though this object is missing an explicit `type: object` property it should still be recognized as an object because it has `properties`.\",\n                    \"properties\": {\n                      \"property1\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      },\n                      \"property2\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                      }\n                    }\n                  },\n                  \"object (additionalProperties)\": {\n                    \"type\": \"object\",\n                    \"additionalProperties\": true\n                  },\n                  \"object (without `properties`)\": {\n                    \"type\": \"object\",\n                    \"description\": \"Because this object is missing a `properties` declaration we should treat it as if `additionalProperties: true` were present on it so the enduser can still use it with the form.\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/circular\": {\n      \"post\": {\n        \"operationId\": \"circular_handling\",\n        \"summary\": \"Nested circular $ref\",\n        \"description\": \"Handling of a nested `$ref` that recursively references itself.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#referenceObject)\\n\\n* [3.1.0 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#referenceObject)\",\n        \"tags\": [\"Circular references\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"circular\": {\n                    \"$ref\": \"#/components/schemas/Circular\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"circular_topLevel\",\n        \"summary\": \"Top-level circular $ref\",\n        \"description\": \"Handling of a top-level request body `$ref` that recursively references itself.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#referenceObject)\\n\\n* [3.1.0 Reference Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#referenceObject)\",\n        \"tags\": [\"Circular references\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/Circular\"\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/raw_body/top-level-payloads\": {\n      \"post\": {\n        \"operationId\": \"raw_body_topLevel\",\n        \"summary\": \"Top-level RAW_BODY (string)\",\n        \"description\": \"This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it.\\n\\n\u003chttps://docs.readme.com/docs/raw-body-content\u003e\",\n        \"tags\": [\"ReadMe-flavors\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"RAW_BODY\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"raw_body_topLevelJSON\",\n        \"summary\": \"Top-level RAW_BODY (JSON)\",\n        \"description\": \"This is a special value on ReadMe to denote a top level property. This can be done better using JSON Schema, but from ReadMe's dash, this is the only way to do it.\\n\\n\u003chttps://docs.readme.com/docs/raw-body-content\u003e\",\n        \"tags\": [\"ReadMe-flavors\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"RAW_BODY\": {\n                    \"type\": \"string\",\n                    \"format\": \"json\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"responses\": {\n          \"200\": {\n            \"description\": \"OK\"\n          }\n        }\n      }\n    },\n    \"/anything/quirks\": {\n      \"post\": {\n        \"operationId\": \"quirks_missingType\",\n        \"summary\": \"Missing schema type\",\n        \"description\": \"Handling cases for when `type` is missing from a schema.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Quirks\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"missing type\": {\n                    \"description\": \"Though this request body property is missing a `type` declaration we should stil render a `string` input box so that the user can interact with it.\",\n                    \"default\": \"default value\"\n                  },\n                  \"missing type (on completely empty schema)\": {},\n                  \"implicit array\": {\n                    \"description\": \"This array property is missing an explicit `type: array` but since it has an `items` declaration we're implicitly treating it as an array.\",\n                    \"items\": {\n                      \"type\": \"integer\"\n                    }\n                  },\n                  \"implicit object\": {\n                    \"description\": \"This object property is missing an explicit `type: object` but since it has an `properties` declaration we're implicitly treating it as an object.\",\n                    \"properties\": {\n                      \"name\": {\n                        \"type\": \"string\",\n                        \"default\": \"buster\"\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/anything/quirks/polymorphism\": {\n      \"post\": {\n        \"operationId\": \"quirks_incompatibleNestedAllOf\",\n        \"summary\": \"Incompatible nested allOf schemas\",\n        \"description\": \"Handling cases for when a nested `allOf` cannot be merged together.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Quirks\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"incompatible\": {\n                    \"description\": \"This property consists of an `allOf` of a `string` and an `integer` schema. Since these two schemas are incompatible and we're unable to merge them per the `allOf` rules, we instead eliminate the `allOf` and render out a `string` instead.\\n\\nThis is obviously less than ideal but it assures that the user can still interact with the property.\",\n                    \"allOf\": [\n                      {\n                        \"type\": \"string\"\n                      },\n                      {\n                        \"type\": \"integer\"\n                      }\n                    ]\n                  },\n                  \"compatible\": {\n                    \"description\": \"Unlike the `incompatible` property above this `allOf` consists of two objects that **can** be merged.\",\n                    \"allOf\": [\n                      {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"name\": {\n                            \"type\": \"string\"\n                          }\n                        }\n                      },\n                      {\n                        \"type\": \"object\",\n                        \"properties\": {\n                          \"name\": {\n                            \"example\": \"buster\"\n                          }\n                        }\n                      }\n                    ]\n                  }\n                }\n              }\n            }\n          },\n          \"required\": true\n        }\n      },\n      \"put\": {\n        \"operationId\": \"quirks_entirelyIncompatibleAllOf\",\n        \"summary\": \"Incompatible allOf schemas on a root requestBody\",\n        \"description\": \"When an `allOf` sits at the top of a request body schema and it cannot be merged, we're unable to render out anything for an input because there's no usable schema for us.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Quirks\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"allOf\": [\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  }\n                ]\n              }\n            }\n          },\n          \"required\": true\n        }\n      },\n      \"patch\": {\n        \"operationId\": \"quirks_partiallyUsableIncompatibleAllOf\",\n        \"summary\": \"Incompatible allOf schemas on a root requestBody (with other schema properties)\",\n        \"description\": \"Like `quirks_entirelyIncompatibleAllOf`, when we're to merge an `allOf` together we eliminate it, however this schema here has additional properties (`description`) alongside that `allOf` so it's not a wholly empty schema and we can use it. Unfortunately since we don't have any of the real data for the request body to use we treat this as a string input with a `format` of `json` so that the user can input a raw JSON input to make their request with.\\n\\nUnfortunately in this case we don't support `description` on the root schema so it won't show up, but a large input box still will for the user. Obviously all of this less than ideal as we're losing request body schema data but since the `allOf` present is incompatible it's unusable and this is the best we can do under the circumstances.\\n\\nðŸ“š OpenAPI specification references:\\n\\n* [3.0.3 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schemaObject)\\n\\n* [3.1.0 Schema Object](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schemaObject)\",\n        \"tags\": [\"Quirks\"],\n        \"requestBody\": {\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"description\": \"I am a description\",\n                \"allOf\": [\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  }\n                ]\n              }\n            }\n          },\n          \"required\": true\n        }\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"string_enum\": {\n        \"enum\": [\"available\", \"pending\", \"sold\"],\n        \"type\": \"string\"\n      },\n      \"Circular\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"string\": {\n            \"type\": \"string\"\n          },\n          \"children\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/Circular\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/npm/readme/oas-examples@c1172d94f9ee52c3c1847b73f9ae1ad55945824b/-/blob/3.1/json/schema-types.json",
			"externalURLs": []
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/anything/arrays\": post: operation \"array_schemaSupport\": requestBody: parse content: application/json: schema: parse schema: property \"array\u003cstring\u003e (with overall `null` default)\": at 531:32: parse default: unexpected default \"null\" value"
}