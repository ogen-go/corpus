{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opengeospatial/ogcapi-processes"
		},
		"file": {
			"name": "workflows.yaml",
			"size": 0,
			"path": "extensions/workflows/openapi/workflows.yaml",
			"byteSize": 71825,
			"content": "openapi: 3.0.0\ninfo:\n  title: Modular OGC API Workflows\n  version: MOAW-0.2\n  description: |-\n    WARNING - THIS IS WORK IN PROGRESS\\\n    Sample GNOSIS Map Server OGC API test implementation.\n\n    Project led by Ecere Corporation and supported by in-kind contributions from collaborating OGC members and research centers.\n\n    Financial support provided by GeoConnections, a national collaborative initiative led by Natural Resources Canada.  GeoConnections supports the integration and use of the Canadian Geospatial Data Infrastructure (CGDI), an on-line resource that improves the sharing, access and use of open geospatial information.\n  contact:\n    name: Open Geospatial Consortium\n    email: standards@opengeospatial.org\n    url: 'http://www.opengeospatial.org'\n  license:\n    name: CC-BY 4.0 license\n    url: 'https://creativecommons.org/licenses/by/4.0/'\npaths:\n  /:\n    get:\n      summary: Service landing page of this API\n      description: \u003e-\n        The landing page provides links to the API definition, the Conformance\n        statements, the available processes as well as the datasets offered by this service.\n      operationId: getLandingPage\n      tags:\n        - Capabilities\n      responses:\n        '200':\n          description: links to the API capabilities\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/landingPage'\n            text/html:\n              schema:\n                type: string\n  /conformance:\n    get:\n      summary: Conformance classes\n      description: \u003e-\n        A list of all requirements classes specified in a standard (e.g., WPS REST/JSON Binding) that this API conforms to\n        Part 1: Core) that the server conforms to\n      operationId: getRequirementsClasses\n      tags:\n        - Capabilities\n      responses:\n        '200':\n          description: the URIs of all requirements classes supported by the server\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/confClasses'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n  /processes:\n    get:\n      summary: List available processes\n      description: \u003e-\n        A list of all available processes.\n      operationId: getProcesses\n      tags:\n        - ProcessesInformation\n      responses:\n        '200':\n          description: \u003e-\n            Information about the available processes\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/processList'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/exception'\n  /processes/{id}:\n    get:\n      summary: Retrieve a process description\n      operationId: getProcessDescription\n      tags:\n        - ProcessesInformation\n      parameters:\n          - in: path\n            name: id\n            description: The id of a process\n            required: true\n            schema:\n              type: string\n            examples:\n              ElevationContours:\n               value: 'ElevationContours'\n              RenderMap:\n               value: 'RenderMap'\n              CoverageProcessor:\n               value: 'CoverageProcessor'\n              WCPS:\n               value: 'wcps'\n      responses:\n        '200':\n          description: A process description.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/process'\n                example:\n                  id: RenderMap\n                  title: Maps rendering process\n                  description: RenderMap process\n                  keywords: [process, maps]\n                  inputs:\n                     - id: layers\n                       title: layers\n                       description: The layers to render on the map\n                       literalDataDomain:\n                          dataType:\n                              name: array\n                     - id: bgColor\n                       title: bgColor\n                       description: The background color of the map\n                       literalDataDomain:\n                          dataType:\n                              name: string\n                          valueDefinition:\n                              defaultValue: \"000000\"\n                     - id: transparent\n                       title: transparent\n                       description: Whether the map's background is transparent.\n                       literalDataDomain:\n                          dataType:\n                              name: bool\n                          valueDefinition:\n                              defaultValue: true\n                  outputs:\n                        - id: result\n                          title: result\n                          description: The rendered map\n                  version: 1.1\n                  jobControlOptions: [modular-sync, modular-deferred]\n                  links:\n                     - rel: canonical\n                       href: https://maps.ecere.com/ogcapi/processes/RenderMap\n                       type: application/json\n                       title: Modular execution endpoint\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n    post:\n      summary: Submit a workflow for deferred execution\n      description: Post a workflow to set up deferred execution of it, obtaining a temporary virtual geospatial data resource (collection) with links to resources supporting GET methods for all supported execution/output retrieval mechanisms (equivalent to the modular synchronous execution end-points supported)\n      operationId: execDeferred\n      tags:\n        - DeferredExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n         - in: query\n           name: f\n           description: A format specifier\n           required: false\n           schema:\n             type: string\n           examples:\n             json:\n               value: json\n             econ:\n               value: econ\n             html:\n               value: html\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '303':\n           description: Successful, see other for GET-accessible resource\n           headers:\n             Location:\n               schema:\n                 type: string\n               description: GET-accessible path for same result, which can also be used as a replacement to the /processes/{id} portion of the synchronous execution paths using GET, without having to re-submit (POST) the workflow.\n           content:\n             application/json:\n               schema:\n                 $ref: 'https://raw.githubusercontent.com/opengeospatial/oapi_common/master/collections/openapi/schemas/collectionInfo.yaml'\n             text/html:\n               schema:\n                 type: string\n                 format: binary\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '410':\n           description: Resource has expired\n           headers:\n             Cache-Control:\n               description: 410 is cachable by default, but deferred execution may come back online.\n               schema:\n                 type: string\n                 enum:\n                  - no-cache\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/tiles:\n    post:\n      summary: Submit a workflow for tiled deferred execution\n      description: Post a workflow to set up deferred execution of it, obtaining a list of available tilesets for the results with links to resources supporting GET methods for all supportedTiles API execution/output retrieval mechanisms  (equivalent to the modular synchronous Tiles API execution end-points supported)\n      operationId: execDeferredMapTilesets\n      tags:\n        - DeferredExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '303':\n           description: Successful, see other for GET-accessible resource\n           headers:\n             Location:\n               schema:\n                 type: string\n               description: GET-accessible path for same result, which can also be used as a replacement to the /processes/{id} portion of the synchronous execution paths using GET, without having to re-submit (POST) the workflow.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/tilesetsList'\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '410':\n           description: Resource has expired\n           headers:\n             Cache-Control:\n               description: 410 is cachable by default, but deferred execution may come back online.\n               schema:\n                 type: string\n                 enum:\n                  - no-cache\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/tiles/{tms}:\n    post:\n      summary: Submit a workflow for tiled deferred execution for a specific Tile Matrix Set\n      description: Post a workflow to set up deferred execution of it for a specific supported TileMatrixSet, obtaining the tileset description resource with templated links to retrieve individual tiles via GET method, as well as information such as the tile limits for each tile matrix  (equivalent to the capability available thorugh the modular synchronous Tiles API execution)\n      operationId: execDeferredTileset\n      tags:\n        - DeferredExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n         - in: path\n           name: tms\n           description: The identifier for a supported TileMatrixSet\n           required: true\n           schema:\n             type: string\n           examples:\n              GNOSIS Global Grid:\n                 value: GNOSISGlobalGrid\n              CRS84 Quad Tree:\n                 value: WorldCRS84Quad\n              Google CRS84 Quad (one tile for level 0):\n                 value: GoogleCRS84Quad\n              Convenient Degrees/Pixels:\n                 value: GlobalCRS84Pixel\n              Convenient Scale Denominators:\n                 value: GlobalCRS84Scale\n              World Mercator Quad:\n                 value: WorldMercatorWGS84Quad\n              Web Mercator Quad (spherical):\n                 value: WebMercatorQuad\n              CDB 1.x (1024px positive, overview negative):\n                 value: CDBGlobalGrid\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '303':\n           description: Successful, see other for GET-accessible resource\n           headers:\n             Location:\n               schema:\n                 type: string\n               description: GET-accessible path for same result, which can also be used as a replacement to the /processes/{id} portion of the synchronous execution paths using GET, without having to re-submit (POST) the workflow.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/tileset'\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '410':\n           description: Resource has expired\n           headers:\n             Cache-Control:\n               description: 410 is cachable by default, but deferred execution may come back online.\n               schema:\n                 type: string\n                 enum:\n                  - no-cache\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/map:\n    post:\n      summary: Submit a workflow for map deferred execution\n      description: Post a workflow to set up deferred execution of it, obtaining a link to a map resource for the results supporting GET methods for all supported Maps API execution/output retrieval mechanisms (equivalent to the modular synchronous Maps API execution end-points supported)\n      operationId: execDeferredMap\n      tags:\n        - DeferredExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '303':\n           description: Successful, see other for GET-accessible resource\n           headers:\n             Location:\n               schema:\n                 type: string\n               description: GET-accessible path for same result, which can also be used as a replacement to the /processes/{id} portion of the synchronous execution paths using GET, without having to re-submit (POST) the workflow.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/mapsList'\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '410':\n           description: Resource has expired\n           headers:\n             Cache-Control:\n               description: 410 is cachable by default, but deferred execution may come back online.\n               schema:\n                 type: string\n                 enum:\n                  - no-cache\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/map/default/tiles:\n    post:\n      summary: Submit a workflow for tiled map deferred execution\n      description: Post a workflow to set up deferred execution of it, obtaining a list of available map tilesets for the results with links to resources supporting GET methods for all supported combined Map Tiles API execution/output retrieval mechanisms (equivalent to the modular synchronous Map Tiles API execution end-points supported)\n      operationId: execDeferredTilesets\n      tags:\n        - DeferredExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '303':\n           description: Successful, see other for GET-accessible resource\n           headers:\n             Location:\n               schema:\n                 type: string\n               description: GET-accessible path for same result, which can also be used as a replacement to the /processes/{id} portion of the synchronous execution paths using GET, without having to re-submit (POST) the workflow.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/tilesetsList'\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '410':\n           description: Resource has expired\n           headers:\n             Cache-Control:\n               description: 410 is cachable by default, but deferred execution may come back online.\n               schema:\n                 type: string\n                 enum:\n                  - no-cache\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/map/default/tiles/{tms}:\n    post:\n      summary: Submit a workflow for tiled map deferred execution for a specific Tile Matrix Set\n      description: Post a workflow to set up deferred execution of it for a specific supported TileMatrixSet, obtaining the map tileset description resource with templated links to retrieve individual map tiles via GET method, as well as information such as the tile limits for each tile matrix  (equivalent to the capability available through the modular synchronous Tiles API execution)\n      operationId: execDeferredMapTileset\n      tags:\n        - DeferredExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n         - in: path\n           name: tms\n           description: The identifier for a supported TileMatrixSet\n           required: true\n           schema:\n             type: string\n           examples:\n              GNOSIS Global Grid:\n                 value: GNOSISGlobalGrid\n              CRS84 Quad Tree:\n                 value: WorldCRS84Quad\n              Google CRS84 Quad (one tile for level 0):\n                 value: GoogleCRS84Quad\n              Convenient Degrees/Pixels:\n                 value: GlobalCRS84Pixel\n              Convenient Scale Denominators:\n                 value: GlobalCRS84Scale\n              World Mercator Quad:\n                 value: WorldMercatorWGS84Quad\n              Web Mercator Quad (spherical):\n                 value: WebMercatorQuad\n              CDB 1.x (1024px positive, overview negative):\n                 value: CDBGlobalGrid\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '303':\n           description: Successful, see other for GET-accessible resource\n           headers:\n             Location:\n               schema:\n                 type: string\n               description: GET-accessible path for same result, which can also be used as a replacement to the /processes/{id} portion of the synchronous execution paths using GET, without having to re-submit (POST) the workflow.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/tileset'\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '410':\n           description: Resource has expired\n           headers:\n             Cache-Control:\n               description: 410 is cachable by default, but deferred execution may come back online.\n               schema:\n                 type: string\n                 enum:\n                  - no-cache\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/tiles/{tms}/{tileMatrix}/{tileRow}/{tileCol}:\n    post:\n      summary: Execute and retrieve results through Tiles API\n      description: Post a workflow to synchronously retrieve data tiles using MOAW extension\n      operationId: execSyncTile\n      tags:\n        - SynchronousExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n         - in: path\n           name: tms\n           description: The 2D Tile Matrix Set (tiling scheme) for which to retrieve a tile\n           required: true\n           schema:\n             type: string\n           examples:\n              GNOSIS Global Grid:\n                 value: GNOSISGlobalGrid\n              CRS84 Quad Tree:\n                 value: WorldCRS84Quad\n              Google CRS84 Quad (one tile for level 0):\n                 value: GoogleCRS84Quad\n              Convenient Degrees/Pixels:\n                 value: GlobalCRS84Pixel\n              Convenient Scale Denominators:\n                 value: GlobalCRS84Scale\n              World Mercator Quad:\n                 value: WorldMercatorWGS84Quad\n              Web Mercator Quad (spherical):\n                 value: WebMercatorQuad\n              CDB 1.x (1024px positive, overview negative):\n                 value: CDBGlobalGrid\n         - in: path\n           name: tileMatrix\n           description: The tile matrix (level of detail, zoom level) for which to retrieve a tile\n           required: true\n           schema:\n             type: string\n           example: \"0\"\n         - in: path\n           name: tileRow\n           description: The tile row in the tile matrix (counting from the top starting at 0) for which to retrieve a tile\n           required: true\n           schema:\n             type: integer\n             format: int32\n           example: 0\n         - in: path\n           name: tileCol\n           description: The tile column in the tile matrix (counting from the left starting at 0) for which to retrieve a tile\n           required: true\n           schema:\n             type: integer\n             format: int32\n           example: 0\n         - in: query\n           name: f\n           description: A format specifier\n           required: false\n           schema:\n             type: string\n           examples:\n             GeoJSON:\n               value: json\n             PNG:\n               value: png\n             JPEG:\n                value: jpg\n             Mapbox Vector Tile:\n                value: mvt\n             GeoTIFF:\n                value: tif\n             GNOSIS Map Tile:\n               value: gmt\n\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '200':\n           description: Successfully executed workflow and retrieved map\n           content:\n             application/geo+json:\n               schema:\n                 type: string\n                 format: binary\n                 # $ref: 'https://github.com/opengeospatial/ogcapi-features/blob/master/core/openapi/schemas/featureCollectionGeoJSON.yaml'\n             image/png:\n               schema:\n                 type: string\n                 format: binary\n             image/jpg:\n               schema:\n                 type: string\n                 format: binary\n             image/tiff; application=geotiff:\n               schema:\n                 type: string\n                 format: binary\n             application/vnd.mapbox-vector-tile:\n               schema:\n                 type: string\n                 format: binary\n             application/vnd.gnosis-map-tile:\n               schema:\n                 type: string\n                 format: binary\n             text/mapml:\n               schema:\n                 type: string\n                 format: binary\n\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/coverage:\n    post:\n      summary: Execute and retrieve results through Coverages API\n      description: Post a workflow to synchronously retrieve coverage data using MOAW extension\n      operationId: execSyncCoverage\n      tags:\n        - SynchronousExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             CoverageProcessor:\n               value: CoverageProcessor\n             WCPS:\n               value: wcps\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n                EVISentinel2:\n                   $ref: \"#/components/examples/EVISentinel2\"\n                EVISentinel2-WCPS:\n                   $ref: \"#/components/examples/EVISentinel2-WCPS\"\n      responses:\n        '200':\n           description: Successfully executed workflow and retrieved map\n           content:\n             image/tiff; application=geotiff:\n               schema:\n                 type: string\n                 format: binary\n             image/png:\n               schema:\n                 type: string\n                 format: binary\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/map/default:\n    post:\n      summary: Execute and retrieve results through Maps API\n      description: Post a workflow to synchronously retrieve map using the MOAW extension\n      operationId: execSyncMap\n      tags:\n        - SynchronousExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n         - in: query\n           name: f\n           description: A format specifier\n           required: false\n           schema:\n             type: string\n           examples:\n             PNG:\n               value: png\n             JPEG:\n                value: jpg\n             GeoTIFF:\n                value: tif\n         - in: query\n           name: bbox\n           style: form\n           explode: false\n           description: The bounding box for which to request a map, with 4 coordinates (west longitude, south latitude, east longitude, north latitude)\n           required: false\n           schema:\n             type: array\n             minItems: 4\n             maxItems: 4 # Should 2D maps also support 6 numbers?\n             items:\n               type: number\n             example:\n              - 30\n              - 20\n              - 40\n              - 30\n         - in: query\n           name: width\n           description: The width of the map to request\n           required: false\n           schema:\n             type: number\n           example: 800\n         - in: query\n           name: height\n           description: The height of the map to request\n           required: false\n           schema:\n             type: number\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '200':\n           description: Successfully executed workflow and retrieved map\n           content:\n             image/png:\n               schema:\n                 type: string\n                 format: binary\n             image/jpg:\n               schema:\n                 type: string\n                 format: binary\n             image/tiff; application=geotiff:\n               schema:\n                 type: string\n                 format: binary\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/map/default/tiles/{tms}/{tileMatrix}/{tileRow}/{tileCol}:\n    post:\n      summary: Execute and retrieve results through combined Maps \u0026 Tiles API\n      description: Post a workflow to synchronously retrieve map tiles using MOAW extension\n      operationId: execSyncMapTile\n      tags:\n        - SynchronousExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           examples:\n             ElevationContours:\n               value: 'ElevationContours'\n             RenderMap:\n               value: 'RenderMap'\n             CoverageProcessor:\n               value: 'CoverageProcessor'\n             WCPS:\n              value: 'wcps'\n         - in: path\n           name: tms\n           description: The 2D Tile Matrix Set (tiling scheme) for which to retrieve a tile\n           required: true\n           schema:\n             type: string\n           examples:\n              GNOSIS Global Grid:\n                 value: GNOSISGlobalGrid\n              CRS84 Quad Tree:\n                 value: WorldCRS84Quad\n              Google CRS84 Quad (one tile for level 0):\n                 value: GoogleCRS84Quad\n              Convenient Degrees/Pixels:\n                 value: GlobalCRS84Pixel\n              Convenient Scale Denominators:\n                 value: GlobalCRS84Scale\n              World Mercator Quad:\n                 value: WorldMercatorWGS84Quad\n              Web Mercator Quad (spherical):\n                 value: WebMercatorQuad\n              CDB 1.x (1024px positive, overview negative):\n                 value: CDBGlobalGrid\n         - in: path\n           name: tileMatrix\n           description: The tile matrix (level of detail, zoom level) for which to retrieve a tile\n           required: true\n           schema:\n             type: string\n           example: \"0\"\n         - in: path\n           name: tileRow\n           description: The tile row in the tile matrix (counting from the top starting at 0) for which to retrieve a tile\n           required: true\n           schema:\n             type: integer\n             format: int32\n           example: 0\n         - in: path\n           name: tileCol\n           description: The tile column in the tile matrix (counting from the left starting at 0) for which to retrieve a tile\n           required: true\n           schema:\n             type: integer\n             format: int32\n           example: 0\n         - in: query\n           name: f\n           description: A format specifier\n           required: false\n           schema:\n             type: string\n           examples:\n             PNG:\n               value: png\n             JPEG:\n                value: jpg\n             GeoTIFF:\n                value: tif\n             GNOSIS Map Tile:\n               value: gmt\n\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n               renderMap:\n                 $ref: '#/components/examples/renderMap'\n               nestedWorkflow:\n                 $ref: '#/components/examples/nestedWorkflow'\n               evis2:\n                 $ref: '#/components/examples/EVISentinel2'\n               evis2-wcps:\n                 $ref: '#/components/examples/EVISentinel2-WCPS'\n      responses:\n        '200':\n           description: Successfully executed workflow and retrieved map\n           content:\n             image/png:\n               schema:\n                 type: string\n                 format: binary\n             image/jpg:\n               schema:\n                 type: string\n                 format: binary\n             image/tiff; application=geotiff:\n               schema:\n                 type: string\n                 format: binary\n             application/vnd.gnosis.map-tile:\n               schema:\n                 type: string\n                 format: binary\n\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/items:\n    post:\n      summary: Execute and retrieve results through Features API\n      description: Post a workflow to synchronously retrieve items using MOAW extension\n      operationId: execSyncItems\n      tags:\n        - SynchronousExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of a process\n           required: true\n           schema:\n             type: string\n           example: ElevationContours\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n      responses:\n        '200':\n           description: Successfully executed workflow and retrieved map\n           content:\n             application/geo+json:\n               schema:\n                 type: string\n                 format: binary\n\n                 # $ref: 'https://github.com/opengeospatial/ogcapi-features/blob/master/core/openapi/schemas/featureCollectionGeoJSON.yaml'\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n  /processes/{id}/items/{itemId}:\n    post:\n      summary: Execute and retrieve a single feature through Features API\n      description: Post a workflow to synchronously retrieve a single item using MOAW extension\n      operationId: execSyncOneItem\n      tags:\n        - SynchronousExecution\n      parameters:\n         - in: path\n           name: id\n           description: The id of the process\n           required: true\n           schema:\n             type: string\n           example: ElevationContours\n         - in: path\n           name: itemId\n           description: The id of the item to retrieve\n           required: true\n           schema:\n             type: string\n           example: 17\n      requestBody:\n        description: Mandatory execute request JSON\n        required: true\n        content:\n          application/json:\n            schema:\n                $ref: '#/components/schemas/execute'\n            examples:\n               elevationContours:\n                 $ref: '#/components/examples/elevationContours'\n      responses:\n        '200':\n           description: Successfully executed workflow and retrieved map\n           content:\n             application/geo+json:\n               schema:\n                 type: string\n                 format: binary\n        '400':\n           description: Invalid request\n           content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        '404':\n          description: 'The process {id} does not exist.'\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\n        default:\n          description: An error occured.\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/exception'\ncomponents:\n    examples:\n      renderMap:\n        summary: A sample RenderMap execution\n        value:\n          id: SampleRenderMapExecution\n          process: 'https://maps.ecere.com/ogcapi/processes/RenderMap'\n          inputs:\n            - id: transparent\n              value: false\n            - id: bgColor\n              value: \"002040\"\n            - id: layers\n              list:\n                - collection: 'https://maps.ecere.com/ogcapi/collections/NaturalEarth:physical:bathymetry'\n                - collection: 'https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama'\n      elevationContours:\n        summary: Generate contours from elevation data\n        value:\n          id: SampleElevationContoursExecution\n          process: 'https://maps.ecere.com/ogcapi/processes/ElevationContours'\n          inputs:\n          - id: data\n            collection: 'https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama'\n          - id: distance\n            value: 1000\n      nestedWorkflow:\n        summary: Example workflow with nested processing\n        value:\n          id: SampleNestedWorkflow\n          process: 'https://maps.ecere.com/processes/RenderMap'\n          inputs:\n           - id: transparent\n             value: false\n           - id: layers\n             list:\n             - collection: 'https://maps.ecere.com/ogcapi/collections/NaturalEarth:physical:bathymetry'\n             - collection: 'https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama'\n             - process: 'https://maps.ecere.com/ogcapi/processes/ElevationContours'\n               inputs:\n               - id: data\n                 collection: 'https://maps.ecere.com/ogcapi/collections/SRTM_ViewFinderPanorama'\n               - id: distance\n                 value: 500\n      EVISentinel2:\n         summary: Enhanced Vegetation Index on sentinel-2 using theoretical CPL\n         description: This workflow calculates an Enhanced Vegetation Index on sentinel-2 data using a theoretical Coverage Processing Language.\n         value:\n           id: EVISentinel2\n           process: 'http://maps.ecere.com/ogcapi/processes/CoverageProcessor'\n           inputs:\n           - id: data\n             collection: 'http://rasdaman.org/ogcapi/collections/sentinel-2'\n           - id: code\n             value: 'double BLUE = data[bands:''B02''], RED = data[bands:''B04''], NIR = data[bands:''B08'']; return min[time](2.5 * (NIR - RED) / (1 + NIR + 6*RED + -7.5*BLUE));'\n      EVISentinel2-WCPS:\n        summary: EVI S2 - Attempt at integrating WCPS\n        description: This is an attempt at parameterizing WCPS in a way that simple text substitution could enable its use as part of Modular OGC API Workflows.\n        value:\n          id: EVISentinel2-WCPS\n          process: 'http://maps.ecere.com/ogcapi/processes/wcps'\n          inputs:\n          - id: data\n            collection: 'http://rasdaman.org/ogcapi/collections/sentinel-2'\n          - id: code\n            value: \u003e\n              for $c in ({data})\n                let $blue := $c.b02, $red = $c.b04, $nir = $c.b08\n                return\n                  encode(\n                    scale(\n                      extend(\n                        condense min over $c time({timeRange}) values\n                          2.5 * ($nir - $red) / (1 + $nir + 6 * $red + -7.5 * $blue),\n                        { Lat({latRange}, Long({longRange}) }\n                      ),\n                      { Long:\"CRS:1\"(0:{right}), Lat:\"CRS:1\"(0:{bottom}) }\n                    ),\n                    {format}\n                  )\n    schemas:\n        additionalParameter:\n          type: object\n          required:\n             - name\n             - value\n          properties:\n             name:\n                type: string\n             value:\n                type: array\n                items:\n                   oneOf:\n                      - type: string\n                      - type: number\n                      - type: integer\n                      - type: array\n                        items: {}\n                      - type: object\n        allowedValues:\n          type: array\n          items:\n             oneOf:\n                - type: string\n                - $ref: \"#/components/schemas/range\"\n        anyValue:\n          type: object\n          properties:\n             anyValue:\n                type: boolean\n                default: true\n        boundingBoxData:\n          type: object\n          required:\n             - bbox\n          properties:\n             crs:\n                type: string\n                format: uri\n             bbox:\n                type: array\n                minItems: 4\n                maxItems: 6\n                items:\n                   type: number\n        boundingBoxDataType:\n          type: object\n          required:\n             - supportedCRS\n          properties:\n             supportedCRS:\n                type: array\n                items:\n                   $ref: \"#/components/schemas/supportedCRS\"\n        complexDataType:\n          type: object\n          required:\n             - formats\n          properties:\n             formats:\n                type: array\n                items:\n                   $ref: \"#/components/schemas/formatDescription\"\n        confClasses:\n          type: object\n          required:\n            - conformsTo\n          properties:\n            conformsTo:\n              type: array\n              items:\n                type: string\n                example: \"http://www.opengis.net/spec/ogcapi_processes/1.0/req/core\"\n        dataDescriptionType:\n          allOf:\n             - $ref: \"#/components/schemas/descriptionType\"\n             - type: object\n               required:\n                  - id\n        descriptionType:\n          type: object\n          required:\n            - id\n          properties:\n            id:\n              type: string\n            title:\n              type: string\n            description:\n              type: string\n            keywords:\n              type: array\n              items:\n                type: string\n            metadata:\n              type: array\n              items:\n                $ref: \"#/components/schemas/metadata\"\n            additionalParameters:\n              allOf:\n                - $ref: \"#/components/schemas/metadata\"\n                - type: object\n                  properties:\n                    parameters:\n                      type: array\n                      items:\n                        $ref: \"#/components/schemas/additionalParameter\"\n        exception:\n          type: object\n          required:\n            - code\n          properties:\n            code:\n              type: string\n            description:\n              type: string\n        execute:\n          type: object\n          properties:\n            id:\n              type: string\n            process:\n              type: string\n            inputs:\n              type: array\n              items:\n                $ref: \"#/components/schemas/input\"\n        format:\n          type: object\n          required:\n             - mediaType\n          properties:\n             mimeType:\n                type: string\n             schema:\n                type: string\n             encoding:\n                type: string\n        formatDescription:\n          allOf:\n             - $ref: \"#/components/schemas/format\"\n             - type: object\n               properties:\n                  maximumMegabytes:\n                     type: integer\n                  default:\n                     type: boolean\n                     default: false\n        collectionInput:\n          type: object\n          required:\n            - collection\n          properties:\n            collection:\n              type: string\n        processInput:\n          type: object\n          required:\n            - process\n          properties:\n            process:\n              type: string\n            inputs:\n              type: array\n              items:\n                $ref: \"#/components/schemas/input\"\n        chainedInput: # To allow using a workflow as a process by using an input coming in to the process at this point in the workflow.\n          type: object\n          required:\n            - input\n          properties:\n            input:\n              type: string\n        listInput:\n          type: object\n          required:\n            - list\n          properties:\n            list:\n              type: array\n              items:\n                $ref: \"#/components/schemas/input\"\n        input:\n          type: object\n          required:\n            - id\n          properties:\n            id:\n              type: string\n            useWith:\n              type: object\n          anyOf:\n           - $ref: \"#/components/schemas/inlineOrRefData\"\n           - $ref: \"#/components/schemas/boundingBoxData\"\n           # - $ref: \"#/components/schemas/input\" # Why can this be itself? -- This would be handled as listInput\n           - $ref: \"#/components/schemas/collectionInput\"\n           - $ref: \"#/components/schemas/processInput\"\n           - $ref: \"#/components/schemas/chainedInput\" # To allow using a workflow as a process by using an input coming in to the process at this point in the workflow.\n           - $ref: \"#/components/schemas/listInput\"\n        inputDescription:\n          allOf:\n            - $ref: \"#/components/schemas/dataDescriptionType\"\n            - type: object\n              properties:\n                input:\n                  oneOf:\n                    - $ref: \"#/components/schemas/complexDataType\"\n                    - $ref: \"#/components/schemas/literalDataType\"\n                    - $ref: \"#/components/schemas/boundingBoxDataType\"\n                minOccurs:\n                  type: integer\n                maxOccurs:\n                  oneOf:\n                    - type: integer\n                    - type: string\n                      enum:\n                        - unbounded\n        jobControlOptions:\n          type: string\n          enum:\n            - modular-deferred\n            - modular-sync\n        landingPage:\n          type: object\n          required:\n            - links\n          properties:\n            title:\n              type: string\n              example: Example processing server\n            description:\n              type: string\n              example: Example server implementing the OGC API - Processes 1.0\n            links:\n              type: array\n              items:\n                $ref: \"#/components/schemas/link\"\n        link:\n          type: object\n          required:\n            - href\n          properties:\n            href:\n              type: string\n            rel:\n              type: string\n              example: service\n            type:\n              type: string\n              example: application/json\n            hreflang:\n              type: string\n              example: en\n            title:\n              type: string\n        inlineOrRefData:\n          type: object\n          properties:\n            dataType:\n               $ref: \"#/components/schemas/nameReferenceType\"\n            uom:\n               $ref: \"#/components/schemas/nameReferenceType\"\n            format:\n               $ref: \"#/components/schemas/format\"\n            href:\n              type: string\n            value:\n              oneOf:\n                 - type: string\n                 - type: number\n                 - type: boolean\n                 - type: object\n          oneOf:\n           - required: [href]\n           - required: [value]\n        literalDataDomain:\n          type: object\n          properties:\n            valueDefinition:\n              oneOf:\n                - $ref: \"#/components/schemas/allowedValues\"\n                - $ref: \"#/components/schemas/anyValue\"\n                - $ref: \"#/components/schemas/valuesReference\"\n            defaultValue:\n              type: string\n            dataType:\n              $ref: \"#/components/schemas/nameReferenceType\"\n            uom:\n              $ref: \"#/components/schemas/nameReferenceType\"\n        literalDataType:\n          type: object\n          required:\n            - literalDataDomains\n          properties:\n            literalDataDomains:\n              type: array\n              items:\n                $ref: \"#/components/schemas/literalDataDomain\"\n        metadata:\n          type: object\n          properties:\n             title:\n                type: string\n             role:\n                type: string\n             href:\n                type: string\n        nameReferenceType:\n          type: object\n          required:\n            - name\n          properties:\n            name:\n              type: string\n            reference:\n              type: string\n              format: uri\n        outputDescription:\n          allOf:\n            - $ref: \"#/components/schemas/dataDescriptionType\"\n            - type: object\n              properties:\n                output:\n                  oneOf:\n                    - $ref: \"#/components/schemas/complexDataType\"\n                    - $ref: \"#/components/schemas/literalDataType\"\n                    - $ref: \"#/components/schemas/boundingBoxDataType\"\n        process:\n          allOf:\n             - $ref: \"#/components/schemas/processSummary\"\n             - type: object\n               properties:\n                  inputs:\n                     type: array\n                     items:\n                        $ref: \"#/components/schemas/inputDescription\"\n                  outputs:\n                     type: array\n                     items:\n                        $ref: \"#/components/schemas/outputDescription\"\n                  links:\n                     type: array\n                     items:\n                        $ref: \"#/components/schemas/link\"\n        processList:\n          type: array\n          items:\n            $ref: \"#/components/schemas/processSummary\"\n        processSummary:\n          allOf:\n            - $ref: \"#/components/schemas/descriptionType\"\n            - type: object\n              required:\n                - id\n                - version\n              properties:\n                id:\n                  type: string\n                version:\n                  type: string\n                jobControlOptions:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/jobControlOptions\"\n                outputTransmission:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/transmissionMode\"\n                links:\n                  type: array\n                  items:\n                    $ref: \"#/components/schemas/link\"\n        range:\n          type: object\n          properties:\n             minimumValue:\n                type: string\n             maximumValue:\n                type: string\n             spacing:\n                type: string\n             rangeClosure:\n                type: string\n                enum:\n                   - closed\n                   - open\n                   - open-closed\n                   - closed-open\n        supportedCRS:\n          type: object\n          properties:\n            crs:\n              type: string\n            default:\n              type: boolean\n              default: false\n        transmissionMode:\n          type: string\n          enum:\n            - value\n            - reference\n        valuesReference:\n          type: string\n          format: uri\n        tilesetsList:\n          description: A list of tilesets available through the Tiles API for one or more data type, style and Tile Matrix Set, as well as potentially links to other related tilesets for the same data (e.g. of different dataType and style) available.\n          type: object\n          properties:\n            links:\n              type: array\n              items:\n                $ref: '#/components/schemas/link'\n            tilesets:\n              type: array\n              items:\n                $ref: '#/components/schemas/tileset'\n        mapsList:\n          description: A list of maps available in one or more style\n          type: object\n          properties:\n            links:\n              type: array\n              items:\n                $ref: '#/components/schemas/link'\n            styles:\n              type: array\n              items:\n                $ref: '#/components/schemas/mapStyle'\n            crs:\n              type: array\n              items:\n                type: string\n            maxWidth:\n              type: integer\n            maxHeight:\n              type: integer\n            extent:\n              $ref: '#/components/schemas/extent'\n        tileset:\n          description: A resource describing a tileset available\n          type: object\n          required:\n           - links\n           - dataType\n          properties:\n            links:\n              type: array\n              items:\n                $ref: '#/components/schemas/link'\n              description: Links including templates for the actual tiles using the {tileMatrix}, {tileRow} and {tileCol} parameters.\n            tileMatrixSetURI:\n              type: string\n              description: A URI identifying the TileMatrixSet for this tileset. This is required if the TileMatrixSet is defined by the 2D Tile Matrix Set standard.\n              example: 'http://www.opengis.net/def/tilematrixset/OGC/1.0/GNOSISGlobalGrid'\n            tileMatrixSetDefinition:\n              type: string\n              description: A link to a definition of a custom TileMatrixSet, per the schemas defined in the 2D Tile Matrix Set standard. This is required for a custom TileMatrixSet, which depend on the Tiles API custom TMS extension.\n              example: 'https://maps.ecere.com/ogcapi/tileMatrixSets/GNOSISGlobalGrid'\n            dataType:\n              type: string\n              enum: [values, vector, image]\n              description: The type of data for this tileset (raw coverage values, vector features data, rendered map tiles / (A)RGB imagery ready for visualization)\n            style:\n              type: string\n              description: The style for this tileset\n            tileMatrixSetLimits:\n              type: array\n              items:\n                $ref: '#/components/schemas/tileMatrixSetLimit'\n              description: The limits for the tile matrix set, to be included only in the individual tileset resources.\n            vector_layers:\n              type: array\n              items:\n                $ref: '#/components/schemas/vectorLayer'\n              description: A list and description of available vector data layers for the tileset, including the list of fields.\n        mapStyle:\n          description: A resource describing an available map style\n          type: object\n          properties:\n            id:\n               type: string\n            links:\n              type: array\n              items:\n                $ref: '#/components/schemas/link'\n        tileMatrixSetLimit:\n          description: A resource describing the limit for a particular tile matrix.\n          type: object\n          properties:\n            tileMatrix:\n              type: string\n            minTileRow:\n              type: integer\n            maxTileRow:\n              type: integer\n            minTileCol:\n              type: integer\n            maxTileCol:\n              type: integer\n        vectorLayer:\n          type: object\n          properties:\n            id:\n              type: string\n            description:\n              type: string\n            minzoom:\n              type: integer\n            maxzoom:\n              type: integer\n            geometry_type:\n              type: string\n              enum: [point, line, polygon]\n            fields:\n              type: array\n              items:\n                type: object\n                additionalProperties: true\n              description: A list of fields as a dictionary, field id mapping to type of [string, integer, number]. We may wish to review this to add field descriptions as well.\n        extent:\n          description: |-\n            The extent of the features in the collection. In the Core only spatial and temporal\n            extents are specified. Extensions may add additional members to represent other\n            extents, for example, thermal or pressure ranges.\n          type: object\n          properties:\n            spatial:\n              description: |-\n                The spatial extent of the features in the collection.\n              type: object\n              properties:\n                bbox:\n                  description: |-\n                    One or more bounding boxes that describe the spatial extent of the dataset.\n                    In the Core only a single bounding box is supported. Extensions may support\n                    additional areas. If multiple areas are provided, the union of the bounding\n                    boxes describes the spatial extent.\n                  type: array\n                  minItems: 1\n                  items:\n                    description: |-\n                      West, south, east, north edges of the bounding box. The coordinates\n                      are in the coordinate reference system specified in `crs`. By default\n                      this is WGS 84 longitude/latitude.\n                    type: array\n                    minItems: 4\n                    maxItems: 6\n                    items:\n                      type: number\n                    example:\n                      - -180\n                      - -90\n                      - 180\n                      - 90\n                crs:\n                  description: |-\n                    Coordinate reference system of the coordinates in the spatial extent\n                    (property `bbox`). The default reference system is WGS 84 longitude/latitude.\n                    In the Core this is the only supported coordinate reference system.\n                    Extensions may support additional coordinate reference systems and add\n                    additional enum values.\n                  type: string\n                  enum:\n                    - 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n                  default: 'http://www.opengis.net/def/crs/OGC/1.3/CRS84'\n            temporal:\n              description: |-\n                The temporal extent of the features in the collection.\n              type: object\n              properties:\n                interval:\n                  description: |-\n                    One or more time intervals that describe the temporal extent of the dataset.\n                    The value `null` is supported and indicates an open time intervall.\n                    In the Core only a single time interval is supported. Extensions may support\n                    multiple intervals. If multiple intervals are provided, the union of the\n                    intervals describes the temporal extent.\n                  type: array\n                  minItems: 1\n                  items:\n                    description: |-\n                      Begin and end times of the time interval. The timestamps\n                      are in the coordinate reference system specified in `trs`. By default\n                      this is the Gregorian calendar.\n                    type: array\n                    minItems: 2\n                    maxItems: 2\n                    items:\n                      type: string\n                      format: date-time\n                      nullable: true\n                    example:\n                      - '2011-11-11T12:22:11Z'\n                      - null\n                trs:\n                  description: |-\n                    Coordinate reference system of the coordinates in the temporal extent\n                    (property `interval`). The default reference system is the Gregorian calendar.\n                    In the Core this is the only supported temporal reference system.\n                    Extensions may support additional temporal reference systems and add\n                    additional enum values.\n                  type: string\n                  enum:\n                    - 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\n                  default: 'http://www.opengis.net/def/uom/ISO-8601/0/Gregorian'\ntags:\n  - name: Capabilities\n    description: Starting point and conformance of this API\n  - name: ProcessesInformation\n    description: Listing and describing processes\n  - name: DeferredExecution\n    description: Setting up a workflow for deferred execution\n  - name: SynchronousExecution\n    description: Submitting a workflow for immediate execution and retrieving results\n# Added by API Auto Mocking Plugin\nservers:\n# Added by API Auto Mocking Plugin\n   - description: Test server\n     url: https://maps.ecere.com/ogcapi\n   - description: SwaggerHub API Auto Mocking\n     url: https://virtserver.swaggerhub.com/jerstlouis/MOAW/MOAW-0.1\n"
		}
	},
	"Error": "parse: parse spec: paths: /processes/{id}/tiles: post: operation \"execDeferredMapTilesets\": requestBody: content: \"application/json\": parse schema: parse schema: reference \"#/components/schemas/execute\": parse schema: inputs: parse schema: item: parse schema: reference \"#/components/schemas/input\": parse schema: anyOf: [3]: parse schema: reference \"#/components/schemas/processInput\": parse schema: inputs: parse schema: item: parse schema: reference \"#/components/schemas/input\": infinite recursion: \"#/components/schemas/input\""
}