{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openSUSE/open-build-service"
		},
		"file": {
			"name": "OBS-v2.10.50.yaml",
			"size": 0,
			"path": "src/api/public/apidocs-new/OBS-v2.10.50.yaml",
			"byteSize": 14476,
			"content": "openapi: 3.0.0\n\nservers:\n  - url: '/'\n\ntags:\n  - name: Announcements\n  - name: Attribute Namespaces\n  - name: Attributes\n  - name: Build\n  - name: Configuration\n  - name: Distributions\n  - name: General Information\n  - name: Groups\n  - name: Issue Trackers\n  - name: Notifications\n  - name: Person\n  - name: Published Binaries\n  - name: Requests\n  - name: Search\n    description: |\n      All endpoints besides the owner search listed in the search group use Xpath expressions. The `match` query parameter is used\n      to pass the Xpath predicate. The individual endpoints refer to different objects like Packages, Projects, Issues and more...\n      Please refer to the documentation of the individual search endpoints to know which attributes can be accessed through the predicate,\n      and which extra query parameters are supported or might be required in order to run the search.\n\n\n      These functions can be used with the predicates: `boolean`, `contains`, `not`, `starts_with`, `ends_with`.\n\n      _Example_:\n\n      For a list of all projects where the name starts with \"OBS:\".\n\n      `/search/project?match=starts_with(@name,'OBS:')`\n\n\n      More than one predicate can be combined with the following operators: `eq`, `and`, `or`, `neq`, `gt`, `lt`, `gteq`, `lteq`.\n\n      _Example_:\n\n      To receive details about the package \"obs-server\" that is part of the project \"OBS:Server:Unstable\".\n\n      `/search/package?match=@name='obs-server'+and+@project='OBS:Server:Unstable'`\n\n  - name: Sources\n  - name: Sources - Projects\n  - name: Sources - Packages\n  - name: Trigger\n  - name: Workers\n\n\ninfo:\n  description: |\n    The _Open Build Service API_ is an XML API.\n\n    To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic \u003ccredentials\u003e`.\n\n    There is no API versioning, since there is no need for it right now.\n\n    Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations.\n    In case of abuse, we will limit/remove your access.\n\n    For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API.\n    It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below)\n  version: '2.10.50'\n  title: Open Build Service API\n  contact:\n    url: 'https://openbuildservice.org/'\n    name: Open Build Service\n  license:\n    url: 'https://github.com/openSUSE/open-build-service/blob/master/COPYING'\n    name: GNU General Public License v2.0\n\npaths:\n  /about:\n    $ref: 'paths/about.yaml'\n\n  /announcements:\n    $ref: 'paths/announcements.yaml'\n  /announcements/{announcement_id}:\n    $ref: 'paths/announcements_announcement_id.yaml'\n\n  /architectures:\n    $ref: 'paths/architectures.yaml'\n  /architectures/{architecture_name}:\n    $ref: 'paths/architectures_architecture_name.yaml'\n\n  /attribute:\n    $ref: 'paths/attribute.yaml'\n  /attribute/{namespace}:\n    $ref: 'paths/attribute_namespace.yaml'\n  /attribute/{namespace}/_meta:\n    $ref: 'paths/attribute_namespace_meta.yaml'\n\n  /attribute/{namespace}/{attribute_name}:\n    $ref: 'paths/attribute_namespace_attribute_name.yaml'\n  /attribute/{namespace}/{attribute_name}/_meta:\n    $ref: 'paths/attribute_namespace_attribute_name_meta.yaml'\n\n  /build:\n    $ref: 'paths/build.yaml'\n  /build/{project_name}:\n    $ref: 'paths/build_project_name.yaml'\n  /build/{project_name}/_result:\n    $ref: 'paths/build_project_name_result.yaml'\n  /build/{project_name}/{repository_name}:\n    $ref: 'paths/build_project_name_repository_name.yaml'\n  /build/{project_name}/{repository_name}/_buildconfig:\n    $ref: 'paths/build_project_name_repository_name_buildconfig.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/_builddepinfo:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_builddepinfo.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/_repository:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_repository.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_log:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_log.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_buildinfo:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_buildinfo.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_status:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_status.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_history:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_history.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_reason:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_reason.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_jobstatus:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_jobstatus.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_file_name.yaml'\n  /build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}?view=fileinfo:\n    $ref: 'paths/build_project_name_repository_name_architecture_name_package_name_file_name_view_fileinfo.yaml'\n\n  /configuration:\n    $ref: 'paths/configuration.yaml'\n\n  /distributions:\n    $ref: 'paths/distributions.yaml'\n  /distributions/include_remotes:\n    $ref: 'paths/distributions_include_remotes.yaml'\n  /distributions/{distribution_id}:\n    $ref: 'paths/distributions_distribution_id.yaml'\n  /distributions/bulk_replace:\n    $ref: 'paths/distributions_bulk_replace.yaml'\n\n  /group:\n    $ref: 'paths/group.yaml'\n  /group/{group_title}:\n    $ref: 'paths/group_group_title.yaml'\n\n  /issue_trackers:\n    $ref: 'paths/issue_trackers.yaml'\n  /issue_trackers/{issue_tracker_name}:\n    $ref: 'paths/issue_trackers_issue_tracker_name.yaml'\n  /issue_trackers/{issue_tracker_name}/issues/{issue_name}:\n    $ref: 'paths/issue_trackers_issue_tracker_name_issues_issue_name.yaml'\n\n  /my/notifications:\n    $ref: 'paths/my_notifications.yaml'\n  /my/notifications/{id}:\n    $ref: 'paths/my_notifications_id.yaml'\n\n  /person:\n    $ref: 'paths/person.yaml'\n  /person/register:\n    $ref: 'paths/person_register.yaml'\n  /person/{login}:\n    $ref: 'paths/person_login.yaml'\n  /person/{login}/group:\n    $ref: 'paths/person_login_group.yaml'\n  /person/{login}/token:\n    $ref: 'paths/person_login_token.yaml'\n  /person/{login}/token/{id}:\n    $ref: 'paths/person_login_token_id.yaml'\n  /person/{login}/watchlist:\n    $ref: 'paths/watchlist.yaml'\n\n  /published:\n    $ref: 'paths/published.yaml'\n  /published/{project_name}:\n    $ref: 'paths/published_project_name.yaml'\n  /published/{project_name}/{repository_name}:\n    $ref: 'paths/published_project_name_repository_name.yaml'\n  /published/{project_name}/{repository_name}?view=status:\n    $ref: 'paths/published_project_name_repository_name_view_status.yaml'\n  /published/{project_name}/{repository_name}/{architecture_name}:\n    $ref: 'paths/published_project_name_repository_name_architecture_name.yaml'\n  /published/{project_name}/{repository_name}/{architecture_name}/{binary_filename}:\n    $ref: 'paths/published_project_name_repository_name_architecture_name_binary_filename.yaml'\n  /published/{project_name}/{repository_name}/{architecture_name}/{binary_filename}?view=ymp:\n    $ref: 'paths/published_project_name_repository_name_architecture_name_binary_filename_view_ymp.yaml'\n\n  /request:\n    $ref: 'paths/request.yaml'\n  /request?view=collection:\n    $ref: 'paths/request_view_collection.yaml'\n  /request/{id}:\n    $ref: 'paths/request_id.yaml'\n  /request/{id}?cmd=diff:\n    $ref: 'paths/request_id_cmd_diff.yaml'\n\n  /search:\n    $ref: 'paths/search.yaml'\n  /search/channel:\n    $ref: 'paths/search_channel.yaml'\n  /search/channel/binary:\n    $ref: 'paths/search_channel_binary.yaml'\n  /search/channel/binary/id:\n    $ref: 'paths/search_channel_binary_id.yaml'\n  /search/issue:\n    $ref: 'paths/search_issue.yaml'\n  /search/missing_owner:\n    $ref: 'paths/search_missing_owner.yaml'\n  /search/owner:\n    $ref: 'paths/search_owner.yaml'\n  /search/package:\n    $ref: 'paths/search_package.yaml'\n  /search/package/id:\n    $ref: 'paths/search_package_id.yaml'\n  /search/package_id:\n    $ref: 'paths/search_package__id.yaml'\n  /search/person:\n    $ref: 'paths/search_person.yaml'\n  /search/project:\n    $ref: 'paths/search_project.yaml'\n  /search/project/id:\n    $ref: 'paths/search_project_id.yaml'\n  /search/project_id:\n    $ref: 'paths/search_project__id.yaml'\n  /search/published/binary/id:\n    $ref: 'paths/search_published_binary_id.yaml'\n  /search/published/pattern/id:\n    $ref: 'paths/search_published_pattern_id.yaml'\n  /search/published/repoinfo/id:\n    $ref: 'paths/search_published_repoinfo_id.yaml'\n  /search/released/binary:\n    $ref: 'paths/search_released_binary.yaml'\n  /search/released/binary/id:\n    $ref: 'paths/search_released_binary_id.yaml'\n  /search/repository/id:\n    $ref: 'paths/search_repository_id.yaml'\n  /search/request:\n    $ref: 'paths/search_request.yaml'\n  /search/request/id:\n    $ref: 'paths/search_request_id.yaml'\n\n  /service:\n    $ref: 'paths/service.yaml'\n\n  # Sources\n\n  /source?cmd=branch:\n    $ref: 'paths/source_branch.yaml'\n  /source?cmd=createmaintenanceincident:\n    $ref: 'paths/source_createmaintenanceincident.yaml'\n  /source?cmd=orderkiwirepos:\n    $ref: 'paths/source_orderkiwirepos.yaml'\n\n  # Sources - Projects\n  /source:\n    $ref: 'paths/source.yaml'\n  /source/{project_name}/_project:\n    $ref: 'paths/source_project_name_project.yaml'\n  /source/{project_name}/_attribute/{attribute_name}:\n    $ref: 'paths/source_project_name_attribute_name.yaml'\n  /source/{project_name}/:\n    $ref: 'paths/source_project_name.yaml'\n  /source/{project_name}/_pubkey:\n    $ref: 'paths/source_project_name_pubkey.yaml'\n  /source/{project_name}/_pattern:\n    $ref: 'paths/source_project_name_pattern.yaml'\n  /source/{project_name}/_meta:\n    $ref: 'paths/source_project_name_meta.yaml'\n  /source/{project_name}/_project/{file_name}:\n    $ref: 'paths/source_project_name_project_file.yaml'\n  /source/{project_name}/_config:\n    $ref: 'paths/source_project_name_config.yaml'\n  /source/{project_name}?cmd=addchannels:\n    $ref: 'paths/source_project_name_cmd_addchannels.yaml'\n  /source/{project_name}?cmd=copy:\n    $ref: 'paths/source_project_name_cmd_copy.yaml'\n  /source/{project_name}?cmd=createkey:\n    $ref: 'paths/source_project_name_cmd_createkey.yaml'\n  /source/{project_name}?cmd=createmaintenanceincident:\n    $ref: 'paths/source_project_name_cmd_createmaintenanceincident.yaml'\n  /source/{project_name}?cmd=createpatchinfo:\n    $ref: 'paths/source_project_name_cmd_createpatchinfo.yaml'\n  /source/{project_name}?cmd=extendkey:\n    $ref: 'paths/source_project_name_cmd_extendkey.yaml'\n  /source/{project_name}?cmd=freezelink:\n    $ref: 'paths/source_project_name_cmd_freezelink.yaml'\n  /source/{project_name}?cmd=lock:\n    $ref: 'paths/source_project_name_cmd_lock.yaml'\n  /source/{project_name}?cmd=modifychannels:\n    $ref: 'paths/source_project_name_cmd_modifychannels.yaml'\n  /source/{project_name}?cmd=move:\n    $ref: 'paths/source_project_name_cmd_move.yaml'\n  /source/{project_name}?cmd=release:\n    $ref: 'paths/source_project_name_cmd_release.yaml'\n  /source/{project_name}?cmd=remove_flag:\n    $ref: 'paths/source_project_name_cmd_remove_flag.yaml'\n  /source/{project_name}?cmd=set_flag:\n    $ref: 'paths/source_project_name_cmd_set_flag.yaml'\n  /source/{project_name}?cmd=showlinked:\n    $ref: 'paths/source_project_name_cmd_showlinked.yaml'\n  /source/{project_name}?cmd=undelete:\n    $ref: 'paths/source_project_name_cmd_undelete.yaml'\n  /source/{project_name}?cmd=unlock:\n    $ref: 'paths/source_project_name_cmd_unlock.yaml'\n\n  # Sources - Packages\n\n  /source/{project_name}/{package_name}?cmd=commit:\n    $ref: 'paths/source_project_name_package_name_cmd_commit.yaml'\n  /source/{project_name}/{package_name}?cmd=copy:\n    $ref: 'paths/source_project_name_package_name_cmd_copy.yaml'\n  /source/{project_name}/{package_name}?cmd=diff:\n    $ref: 'paths/source_project_name_package_name_cmd_diff.yaml'\n  /source/{project_name}/{package_name}?cmd=linkdiff:\n    $ref: 'paths/source_project_name_package_name_cmd_linkdiff.yaml'\n  /source/{project_name}/{package_name}?cmd=mergeservice:\n    $ref: 'paths/source_project_name_package_name_cmd_mergeservice.yaml'\n  /source/{project_name}/{package_name}?cmd=remove_flag:\n    $ref: 'paths/source_project_name_package_name_cmd_remove_flag.yaml'\n  /source/{project_name}/{package_name}?cmd=runservice:\n    $ref: 'paths/source_project_name_package_name_cmd_runservice.yaml'\n  /source/{project_name}/{package_name}?cmd=servicediff:\n    $ref: 'paths/source_project_name_package_name_cmd_servicediff.yaml'\n  /source/{project_name}/{package_name}?cmd=set_flag:\n    $ref: 'paths/source_project_name_package_name_cmd_set_flag.yaml'\n  /source/{project_name}/{package_name}?cmd=showlinked:\n    $ref: 'paths/source_project_name_package_name_cmd_showlinked.yaml'\n  /source/{project_name}/{package_name}?cmd=undelete:\n    $ref: 'paths/source_project_name_package_name_cmd_undelete.yaml'\n  /source/{project_name}/{package_name}?cmd=waitservice:\n    $ref: 'paths/source_project_name_package_name_cmd_waitservice.yaml'\n\n  /trigger/{operation}:\n    $ref: 'paths/trigger_operation.yaml'\n\n  /worker/status:\n    $ref: 'paths/worker_status.yaml'\n  /worker/{architecture_name}:{worker_id}:\n    $ref: 'paths/worker_architecture_name_worker_id.yaml'\n  /worker?cmd=checkconstraints:\n    $ref: 'paths/worker_cmd_checkconstraints.yaml'\n\ncomponents:\n  securitySchemes:\n    basic_authentication:\n      type: http\n      scheme: basic\n    GitLab_key_authentication:\n      type: apiKey\n      in: header\n      name: X-GitLab-Token\n\nexternalDocs:\n  url: 'https://openbuildservice.org/help/'\n  description: Open Build Service - Documentation\n",
			"canonicalURL": "/github.com/openSUSE/open-build-service@f018f2afe51eeaa70cccad6d274a539e6ba9acc4/-/blob/src/api/public/apidocs-new/OBS-v2.10.50.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/openSUSE/open-build-service/blob/f018f2afe51eeaa70cccad6d274a539e6ba9acc4/src/api/public/apidocs-new/OBS-v2.10.50.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}?view=fileinfo\": get: operation \"getBuildProjectRepositoryArchitecturePackageFileViewFileinfo\": at https://raw.githubusercontent.com/openSUSE/open-build-service/f018f2afe51eeaa70cccad6d274a539e6ba9acc4/src/api/public/apidocs-new/paths/build_project_name_repository_name_architecture_name_package_name_file_name_view_fileinfo.yaml:2:3: parse path \"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}?view=fileinfo\": path MUST NOT contain a query string"
}