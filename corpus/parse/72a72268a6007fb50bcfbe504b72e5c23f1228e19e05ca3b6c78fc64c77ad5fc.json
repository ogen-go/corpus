{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/APIs-guru/openapi-directory"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "APIs/anchore.io/0.1.19/openapi.yaml",
			"byteSize": 181340,
			"content": "openapi: 3.0.0\nservers:\n  - url: /\n  - url: http://anchore.local\ninfo:\n  contact:\n    email: nurmi@anchore.com\n    x-twitter: anchore\n  description: This is the Anchore Engine API. Provides the primary external API for users of the service.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  title: Anchore Engine API Server\n  version: 0.1.19\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://twitter.com/anchore/profile_image?size=original\n  x-origin:\n    - format: openapi\n      url: https://raw.githubusercontent.com/anchore/anchore-engine/master/anchore_engine/services/apiext/swagger/swagger.yaml\n      version: \"3.0\"\n  x-providerName: anchore.io\ntags:\n  - description: Subscription Management\n    name: Subscriptions\n  - description: Policy Management\n    name: Policies\n  - description: Image Management\n    name: Images\n  - description: View Image Content\n    name: Image Content\n  - description: Vulnerability checks and reports\n    name: Vulnerabilities\n  - description: Evaluate images against policies\n    name: Policy Evaluation\n  - description: Registry Management\n    name: Registries\n  - description: Repository Credential Management\n    name: Repository Credentials\n  - description: System Management\n    name: System\n  - description: Service Management\n    name: Services\n  - description: Resource Summaries\n    name: Summaries\n  - description: View and delete events\n    name: Events\n  - description: Resource Queries\n    name: Queries\n  - description: Manage Accounts, Users, and Credentials\n    name: User Management\n  - description: Get and operate on the authenticated user's identity\n    name: Identity\n  - description: Data Archiving Management\n    name: Archives\npaths:\n  /:\n    get:\n      description: Simple status check\n      operationId: ping\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                type: string\n          description: Version check response, returns the api version prefix (e.g. 'v1')\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /account:\n    get:\n      operationId: get_users_account\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n          description: User details for caller's user\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: List the account for the authenticated user\n      tags:\n        - Identity\n      x-anchore-authz-action: getAccount\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  /accounts:\n    get:\n      operationId: list_accounts\n      parameters:\n        - description: Filter accounts by state\n          in: query\n          name: state\n          required: false\n          schema:\n            enum:\n              - enabled\n              - disabled\n              - deleting\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccountList\"\n          description: Accound summary listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: List user summaries. Only available to the system admin user.\n      tags:\n        - User Management\n      x-anchore-authz-action: listAccounts\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n    post:\n      operationId: create_account\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AccountCreationRequest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n          description: Account Record\n        \"409\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Conflicting user information. User already exists.\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Create a new user. Only avaialble to admin user.\n      tags:\n        - User Management\n      x-anchore-authz-action: createAccount\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  \"/accounts/{accountname}\":\n    delete:\n      operationId: delete_account\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Successful deletion\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Delete the specified account, only allowed if the account is in the disabled state. All users will be deleted along with the account and all resources will be garbage collected\n      tags:\n        - User Management\n      x-anchore-authz-action: deleteAccount\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n    get:\n      operationId: get_account\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Account\"\n          description: Get user information\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get info about an user. Only available to admin user. Uses the main user Id, not a username.\n      tags:\n        - User Management\n      x-anchore-authz-action: getAccount\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  \"/accounts/{accountname}/state\":\n    put:\n      operationId: update_account_state\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AccountStatus\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AccountStatus\"\n          description: Updated state of the account\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: State requested is invalid based on current state of the account\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Update the state of an account to either enabled or disabled. For deletion use the DELETE route\n      tags:\n        - User Management\n      x-anchore-authz-action: updateAccount\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  \"/accounts/{accountname}/users\":\n    get:\n      operationId: list_users\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of user credential records\n                items:\n                  $ref: \"#/components/schemas/User\"\n                type: array\n          description: User listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: List accounts for the user\n      tags:\n        - User Management\n      x-anchore-authz-action: listUsers\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n    post:\n      operationId: create_user\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UserCreationRequest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: Credential summary\n      summary: Create a new user\n      tags:\n        - User Management\n      x-anchore-authz-action: createUser\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  \"/accounts/{accountname}/users/{username}\":\n    delete:\n      operationId: delete_user\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Deleted credential\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Delete a specific user credential by username of the credential. Cannot be the credential used to authenticate the request.\n      tags:\n        - User Management\n      x-anchore-authz-action: deleteUser\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n    get:\n      operationId: get_account_user\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: User record\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get a specific user in the specified account\n      tags:\n        - User Management\n      x-anchore-authz-action: getUser\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  \"/accounts/{accountname}/users/{username}/credentials\":\n    delete:\n      operationId: delete_user_credential\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: credential_type\n          required: true\n          schema:\n            enum:\n              - password\n            type: string\n      responses:\n        \"204\":\n          description: Successful deletion\n        \"400\":\n          description: Conflict, cannot delete the credential used to authenticate this request\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Delete a credential by type\n      tags:\n        - User Management\n      x-anchore-authz-action: updateUser\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n    get:\n      operationId: list_user_credentials\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialList\"\n          description: User credential listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get current credential summary\n      tags:\n        - User Management\n      x-anchore-authz-action: getUser\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n    post:\n      operationId: create_user_credential\n      parameters:\n        - in: path\n          name: accountname\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: username\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: \"#/components/requestBodies/AccessCredential\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: Add a credential, overwritting if already exists\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: add/replace credential\n      tags:\n        - User Management\n      x-anchore-authz-action: updateUser\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.accounts\n  /archives:\n    get:\n      operationId: list_archives\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArchiveSummary\"\n          description: Archive summary listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: listArchives\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n  /archives/images:\n    get:\n      operationId: list_analysis_archive\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArchivedAnalyses\"\n          description: Image analysis archive listing for the requesting account (not the whole system)\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: listArchivedImageAnalysis\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n    post:\n      operationId: archive_image_analysis\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImageAnalysisReferences\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AddAnalysisArchiveResult\"\n          description: Archive statuses\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: createArchivedImageAnalysis\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n  \"/archives/images/{imageDigest}\":\n    delete:\n      description: Performs a synchronous archive deletion\n      operationId: delete_archived_analysis\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: force\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: ArchivdImageAnalysis successfully deleted\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: deleteArchivedImageAnalysis\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n    get:\n      description: Returns the archive metadata record identifying the image and tags for the analysis in the archive.\n      operationId: get_archived_analysis\n      parameters:\n        - description: The image digest to identify the image analysis\n          in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ArchivedAnalysis\"\n          description: Archived Image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: getArchivedImageAnalysis\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n  /archives/rules:\n    get:\n      operationId: list_analysis_archive_rules\n      parameters:\n        - description: If true include system global rules (owned by admin) even for non-admin users. Defaults to true if not set. Can be set to false to exclude globals\n          in: query\n          name: system_global\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnalysisArchiveRules\"\n          description: Archive transition rules\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: listArchiveTransitionRules\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n    post:\n      operationId: create_analysis_archive_rule\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AnalysisArchiveTransitionRule\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnalysisArchiveTransitionRule\"\n          description: Archive transition rule\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: createArchiveTransitionRule\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n  \"/archives/rules/{ruleId}\":\n    delete:\n      operationId: delete_analysis_archive_rule\n      parameters:\n        - in: path\n          name: ruleId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Analysis archive rule succesfuly deleted\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: deleteArchiveTransitionRule\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n    get:\n      operationId: get_analysis_archive_rule\n      parameters:\n        - in: path\n          name: ruleId\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnalysisArchiveTransitionRule\"\n          description: Archive transition rule\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      tags:\n        - Archives\n      x-anchore-authz-action: getArchiveTransitionRule\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.archive\n  /event_types:\n    get:\n      description: Returns list of event types in the category hierarchy\n      operationId: list_event_types\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventTypesList\"\n          description: List of event types\n      summary: List Event Types\n      tags:\n        - Events\n      x-anchore-authz-action: listEvents\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events\n  /events:\n    delete:\n      description: Delete all or a subset of events filtered using the optional query parameters\n      operationId: delete_events\n      parameters:\n        - description: Delete events that occurred before the timestamp\n          in: query\n          name: before\n          required: false\n          schema:\n            type: string\n        - description: Delete events that occurred after the timestamp\n          in: query\n          name: since\n          required: false\n          schema:\n            type: string\n        - description: Delete events that match the level - INFO or ERROR\n          in: query\n          name: level\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: List of deleted event IDs\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Delete Events\n      tags:\n        - Events\n      x-anchore-authz-action: deleteEvents\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events\n    get:\n      description: Returns a paginated list of events in the descending order of their occurrence. Optional query parameters may be used for filtering results\n      operationId: list_events\n      parameters:\n        - description: Filter events by the originating service\n          in: query\n          name: source_servicename\n          required: false\n          schema:\n            type: string\n        - description: Filter events by the originating host ID\n          in: query\n          name: source_hostid\n          required: false\n          schema:\n            type: string\n        - description: Filter events by a prefix match on the event type (e.g. \"user.image.\")\n          in: query\n          name: event_type\n          required: false\n          schema:\n            pattern: ^[a-z0-9-_.*]+$\n            type: string\n        - description: Filter events by the type of resource - tag, imageDigest, repository etc\n          in: query\n          name: resource_type\n          required: false\n          schema:\n            type: string\n        - description: Filter events by the id of the resource\n          in: query\n          name: resource_id\n          required: false\n          schema:\n            type: string\n        - description: Filter events by the level - INFO or ERROR\n          in: query\n          name: level\n          required: false\n          schema:\n            type: string\n        - description: Return events that occurred after the timestamp\n          in: query\n          name: since\n          required: false\n          schema:\n            type: string\n        - description: Return events that occurred before the timestamp\n          in: query\n          name: before\n          required: false\n          schema:\n            type: string\n        - description: Pagination controls - return the nth page of results. Defaults to first page if left empty\n          in: query\n          name: page\n          required: false\n          schema:\n            default: 1\n            type: integer\n        - description: Number of events in the result set. Defaults to 100 if left empty\n          in: query\n          name: limit\n          required: false\n          schema:\n            default: 100\n            type: integer\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventsList\"\n          description: Paginated list of event records and the next token\n      summary: List Events\n      tags:\n        - Events\n      x-anchore-authz-action: listEvents\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events\n  \"/events/{eventId}\":\n    delete:\n      description: Delete an event by its event ID\n      operationId: delete_event\n      parameters:\n        - description: Event ID of the event to be deleted\n          in: path\n          name: eventId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          description: Delete success\n      summary: Delete Event\n      tags:\n        - Events\n      x-anchore-authz-action: getEvent\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events\n    get:\n      description: Lookup an event by its event ID\n      operationId: get_event\n      parameters:\n        - description: Event ID of the event for lookup\n          in: path\n          name: eventId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/EventResponse\"\n          description: Single event record\n      summary: Get Event\n      tags:\n        - Events\n      x-anchore-authz-action: getEvent\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.events\n  /health:\n    get:\n      description: Health check, returns 200 and no body if service is running\n      operationId: health_check\n      responses:\n        \"200\":\n          description: Empty body on success\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.apis.common\n  /images:\n    delete:\n      description: Delete analysis for image digests in the list asynchronously\n      operationId: delete_images_async\n      parameters:\n        - explode: false\n          in: query\n          name: imageDigests\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n          x-nullable: false\n        - in: query\n          name: force\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteImageResponseList\"\n          description: successful operation\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Bulk mark images for deletion\n      tags:\n        - Images\n      x-anchore-authz-action: deleteImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n    get:\n      description: List all images visible to the user\n      operationId: list_images\n      parameters:\n        - description: Include image history in the response\n          in: query\n          name: history\n          required: false\n          schema:\n            type: boolean\n        - description: Full docker-pull string to filter results by (e.g. docker.io/library/nginx:latest, or myhost.com:5000/testimages:v1.1.1)\n          in: query\n          name: fulltag\n          required: false\n          schema:\n            type: string\n        - description: Filter by image_status value on the record. Default if omitted is 'active'.\n          in: query\n          name: image_status\n          required: false\n          schema:\n            default: active\n            enum:\n              - all\n              - active\n              - deleting\n            type: string\n        - description: Filter by analysis_status value on the record.\n          in: query\n          name: analysis_status\n          required: false\n          schema:\n            enum:\n              - not_analyzed\n              - analyzed\n              - analyzing\n              - analysis_failed\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnchoreImageList\"\n          description: successful operation\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: List all visible images\n      tags:\n        - Images\n      x-anchore-authz-action: listImages\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n    post:\n      description: Creates a new analysis task that is executed asynchronously\n      operationId: add_image\n      parameters:\n        - description: Override any existing entry in the system\n          in: query\n          name: force\n          required: false\n          schema:\n            type: boolean\n        - description: Instruct engine to automatically begin watching the added tag for updates from registry\n          in: query\n          name: autosubscribe\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImageAnalysisRequest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnchoreImageList\"\n          description: Successfully added image to analysis queue\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Submit a new image for analysis by the engine\n      tags:\n        - Images\n      x-anchore-authz-action: createImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}\":\n    delete:\n      operationId: delete_image_by_imageId\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: force\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteImageResponse\"\n          description: Image deletion success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Delete image by docker imageId\n      tags:\n        - Images\n      x-anchore-authz-action: deleteImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n    get:\n      operationId: get_image_by_imageId\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnchoreImageList\"\n          description: Image lookup success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Lookup image by docker imageId\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/check\":\n    get:\n      description: Get the policy evaluation for the given image\n      operationId: get_image_policy_check_by_imageId\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: policyId\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: tag\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: detail\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: history\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyEvaluationList\"\n          description: Policy evaluation success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Check policy evaluation status for image\n      tags:\n        - Images\n      x-anchore-authz-action: getImageEvaluation\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/content\":\n    get:\n      operationId: list_image_content_by_imageid\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: List image content types\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/content/files\":\n    get:\n      operationId: get_image_content_by_type_imageId_files\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentFilesResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type files\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/content/java\":\n    get:\n      operationId: get_image_content_by_type_imageId_javapackage\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentJAVAPackageResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type java\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/content/{ctype}\":\n    get:\n      operationId: get_image_content_by_type_imageId\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: ctype\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentPackageResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/vuln\":\n    get:\n      operationId: get_image_vulnerability_types_by_imageId\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  enum:\n                    - all\n                    - os\n                    - non-os\n                  type: string\n                type: array\n          description: Vulnerability listing for the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get vulnerability types\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/by_id/{imageId}/vuln/{vtype}\":\n    get:\n      operationId: get_image_vulnerabilities_by_type_imageId\n      parameters:\n        - in: path\n          name: imageId\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: vtype\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VulnerabilityResponse\"\n          description: Vulnerability listing for the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get vulnerabilities by type\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}\":\n    delete:\n      operationId: delete_image\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: force\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DeleteImageResponse\"\n          description: Image deletion success\n      summary: Delete an image analysis\n      tags:\n        - Images\n      x-anchore-authz-action: deleteImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n    get:\n      operationId: get_image\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnchoreImageList\"\n          description: Image lookup success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get image metadata\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/artifacts/file_content_search\":\n    get:\n      operationId: list_file_content_search_results\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileContentSearchList\"\n          description: List of file metadata objects\n        \"404\":\n          description: Image not found in this service\n      summary: Return a list of analyzer artifacts of the specified type\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/artifacts/retrieved_files\":\n    get:\n      operationId: list_retrieved_files\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RetrievedFileList\"\n          description: List of file metadata objects\n        \"404\":\n          description: Image not found in this service\n      summary: Return a list of analyzer artifacts of the specified type\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/artifacts/secret_search\":\n    get:\n      operationId: list_secret_search_results\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SecretSearchList\"\n          description: List of file metadata objects\n        \"404\":\n          description: Image not found in this service\n      summary: Return a list of analyzer artifacts of the specified type\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/check\":\n    get:\n      description: Get the policy evaluation for the given image\n      operationId: get_image_policy_check\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: policyId\n          required: false\n          schema:\n            type: string\n        - in: query\n          name: tag\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: detail\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: history\n          required: false\n          schema:\n            type: boolean\n        - in: query\n          name: interactive\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyEvaluationList\"\n          description: Policy evaluation success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Check policy evaluation status for image\n      tags:\n        - Images\n      x-anchore-authz-action: getImageEvaluation\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/content\":\n    get:\n      operationId: list_image_content\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Content listing for the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: List image content types\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/content/files\":\n    get:\n      operationId: get_image_content_by_type_files\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentFilesResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type files\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/content/java\":\n    get:\n      operationId: get_image_content_by_type_javapackage\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentJAVAPackageResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type java\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/content/malware\":\n    get:\n      operationId: get_image_content_by_type_malware\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentMalwareResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type malware\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/content/{ctype}\":\n    get:\n      operationId: get_image_content_by_type\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: ctype\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ContentPackageResponse\"\n          description: Content of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the content of an image by type\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/metadata\":\n    get:\n      operationId: list_image_metadata\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  type: string\n                type: array\n          description: Metadata listing for the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: List image metadata types\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/metadata/{mtype}\":\n    get:\n      operationId: get_image_metadata_by_type\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: mtype\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/MetadataResponse\"\n          description: Metadata of specified type from the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get the metadata of an image by type\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/vuln\":\n    get:\n      operationId: get_image_vulnerability_types\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  enum:\n                    - all\n                    - os\n                    - non-os\n                  type: string\n                type: array\n          description: Vulnerability listing for the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get vulnerability types\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  \"/images/{imageDigest}/vuln/{vtype}\":\n    get:\n      operationId: get_image_vulnerabilities_by_type\n      parameters:\n        - in: path\n          name: imageDigest\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: vtype\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: force_refresh\n          required: false\n          schema:\n            type: boolean\n        - description: Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data. When set to true, it will filter out all vulnerabilities where `will_not_fix` is False. If false all vulnerabilities are returned regardless of `will_not_fix`\n          in: query\n          name: vendor_only\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/VulnerabilityResponse\"\n          description: Vulnerability listing for the image\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get vulnerabilities by type\n      tags:\n        - Images\n      x-anchore-authz-action: getImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  /import/images:\n    post:\n      operationId: import_image_archive\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              properties:\n                archive_file:\n                  description: anchore image tar archive.\n                  format: binary\n                  type: string\n              required:\n                - archive_file\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnchoreImageList\"\n          description: Successfully imported image to the engine\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Import an anchore image tar.gz archive file. This is a deprecated API replaced by the \"/imports/images\" route\n      tags:\n        - Import\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  /imports/images:\n    get:\n      operationId: list_operations\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImports\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Lists in-progress imports\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    post:\n      operationId: create_operation\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportOperation\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Begin the import of an image analyzed by Syft into the system\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  \"/imports/images/{operation_id}\":\n    delete:\n      operationId: invalidate_operation\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportOperation\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Invalidate operation ID so it can be garbage collected\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    get:\n      operationId: get_operation\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportOperation\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Get detail on a single import\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  \"/imports/images/{operation_id}/dockerfile\":\n    get:\n      operationId: list_import_dockerfiles\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportContentDigestList\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: List uploaded dockerfiles\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    post:\n      operationId: import_image_dockerfile\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain; utf-8:\n            schema:\n              type: string\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportContentResponse\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Begin the import of an image analyzed by Syft into the system\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  \"/imports/images/{operation_id}/image_config\":\n    get:\n      operationId: list_import_image_configs\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportContentDigestList\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: List uploaded image configs\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    post:\n      operationId: import_image_config\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportContentResponse\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Import a docker or OCI image config to associate with the image\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  \"/imports/images/{operation_id}/manifest\":\n    get:\n      operationId: list_import_image_manifests\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportContentDigestList\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: List uploaded image manifests\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    post:\n      operationId: import_image_manifest\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/vnd.docker.distribution.manifest.v1+json:\n            schema:\n              type: object\n          application/vnd.docker.distribution.manifest.v1+prettyjws:\n            schema:\n              type: object\n          application/vnd.docker.distribution.manifest.v2+json:\n            schema:\n              type: object\n          application/vnd.oci.image.manifest.v1+json:\n            schema:\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportContentResponse\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Import a docker or OCI distribution manifest to associate with the image\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  \"/imports/images/{operation_id}/packages\":\n    get:\n      operationId: list_import_packages\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportContentDigestList\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: List uploaded package manifests\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    post:\n      operationId: import_image_packages\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ImagePackageManifest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportContentResponse\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Begin the import of an image analyzed by Syft into the system\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  \"/imports/images/{operation_id}/parent_manifest\":\n    get:\n      operationId: list_import_parent_manifests\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImportContentDigestList\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: List uploaded parent manifests (manifest lists for a tag)\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n    post:\n      operationId: import_image_parent_manifest\n      parameters:\n        - in: path\n          name: operation_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/vnd.docker.distribution.manifest.list.v2+json:\n            schema:\n              type: object\n          application/vnd.oci.image.index.v1+json:\n            schema:\n              type: object\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ImageImportContentResponse\"\n          description: success\n        \"500\":\n          description: Internal Error\n      summary: Import a docker or OCI distribution manifest list to associate with the image\n      tags:\n        - Imports\n      x-anchore-authz-action: importImage\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.image_imports\n  /oauth/token:\n    post:\n      description: Request a jwt token for subsequent operations, this request is authenticated with normal HTTP auth\n      operationId: get_oauth_token\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              properties:\n                client_id:\n                  default: anonymous\n                  description: The type of client used for the OAuth token\n                  type: string\n                grant_type:\n                  default: password\n                  description: OAuth Grant type for token\n                  type: string\n                password:\n                  description: Password for corresponding user\n                  type: string\n                username:\n                  description: User to assign OAuth token to\n                  type: string\n              type: object\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TokenResponse\"\n          description: Resulting JWT token\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.oauth\n  /policies:\n    get:\n      description: List all saved policy bundles\n      operationId: list_policies\n      parameters:\n        - description: Include policy bundle detail in the form of the full bundle content for each entry\n          in: query\n          name: detail\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyBundleList\"\n          description: Policy listing\n      summary: List policies\n      tags:\n        - Policies\n      x-anchore-authz-action: listPolicies\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies\n    post:\n      description: Adds a new policy bundle to the system\n      operationId: add_policy\n      parameters:\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PolicyBundle\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyBundleRecord\"\n          description: Saved bundle\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Add a new policy\n      tags:\n        - Policies\n      x-anchore-authz-action: createPolicy\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies\n  \"/policies/{policyId}\":\n    delete:\n      description: Delete the specified policy\n      operationId: delete_policy\n      parameters:\n        - in: path\n          name: policyId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          description: Delete success\n        \"404\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Policy not found to delete\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Delete policy\n      tags:\n        - Policies\n      x-anchore-authz-action: deletePolicy\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies\n    get:\n      description: Get the policy bundle content\n      operationId: get_policy\n      parameters:\n        - in: path\n          name: policyId\n          required: true\n          schema:\n            type: string\n        - description: Include policy bundle detail in the form of the full bundle content for each entry\n          in: query\n          name: detail\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyBundleList\"\n          description: A list with a single fetched policy bundle record\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get specific policy\n      tags:\n        - Policies\n      x-anchore-authz-action: getPolicy\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies\n    put:\n      description: Update/replace and existing policy\n      operationId: update_policy\n      parameters:\n        - in: path\n          name: policyId\n          required: true\n          schema:\n            type: string\n        - description: Mark policy as active\n          in: query\n          name: active\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/PolicyBundleRecord\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PolicyBundleList\"\n          description: A list with a single updated policy bundle record\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Update policy\n      tags:\n        - Policies\n      x-anchore-authz-action: updatePolicy\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.policies\n  /query/images/by_package:\n    get:\n      description: Filterable query interface to search for images containing specified package\n      operationId: query_images_by_package\n      parameters:\n        - description: Name of package to search for (e.g. sed)\n          in: query\n          name: name\n          required: true\n          schema:\n            type: string\n        - description: Type of package to filter on (e.g. dpkg)\n          in: query\n          name: package_type\n          required: false\n          schema:\n            type: string\n        - description: Version of named package to filter on (e.g. 4.4-1)\n          in: query\n          name: version\n          required: false\n          schema:\n            type: string\n        - description: The page of results to fetch. Pages start at 1\n          in: query\n          name: page\n          required: false\n          schema:\n            type: string\n        - description: Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaginatedImageList\"\n          description: Image listing\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Bad filter parameters\n      summary: List of images containing given package\n      tags:\n        - Query\n      x-anchore-authz-action: listImages\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.query\n  /query/images/by_vulnerability:\n    get:\n      description: Returns a listing of images and their respective packages vulnerable to the given vulnerability ID\n      operationId: query_images_by_vulnerability\n      parameters:\n        - description: The ID of the vulnerability to search for within all images stored in anchore-engine (e.g. CVE-1999-0001)\n          in: query\n          name: vulnerability_id\n          required: true\n          schema:\n            type: string\n        - description: Filter results to images within the given vulnerability namespace (e.g. debian:8, ubuntu:14.04)\n          in: query\n          name: namespace\n          required: false\n          schema:\n            type: string\n        - description: Filter results to images with vulnable packages with the given package name (e.g. libssl)\n          in: query\n          name: affected_package\n          required: false\n          schema:\n            type: string\n        - description: Filter results to vulnerable package/vulnerability with the given severity\n          in: query\n          name: severity\n          required: false\n          schema:\n            enum:\n              - Unknown\n              - Negligible\n              - Low\n              - Medium\n              - High\n              - Critical\n            type: string\n        - description: Filter results to include only vulnerabilities that are not marked as invalid by upstream OS vendor data\n          in: query\n          name: vendor_only\n          required: false\n          schema:\n            default: true\n            type: boolean\n        - description: The page of results to fetch. Pages start at 1\n          in: query\n          name: page\n          required: false\n          schema:\n            type: integer\n        - description: Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaginatedVulnerableImageList\"\n          description: Image lookup success\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Invalid filter parameters\n      summary: List images vulnerable to the specific vulnerability ID.\n      tags:\n        - Query\n      x-anchore-authz-action: listImages\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.query\n  /query/vulnerabilities:\n    get:\n      description: List (w/filters) vulnerability records known by the system, with affected packages information if present\n      operationId: query_vulnerabilities\n      parameters:\n        - description: The ID of the vulnerability (e.g. CVE-1999-0001)\n          explode: false\n          in: query\n          name: id\n          required: true\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n        - description: Filter results by specified package name (e.g. sed)\n          in: query\n          name: affected_package\n          required: false\n          schema:\n            type: string\n        - description: Filter results by specified package version (e.g. 4.4-1)\n          in: query\n          name: affected_package_version\n          required: false\n          schema:\n            type: string\n        - description: The page of results to fetch. Pages start at 1\n          in: query\n          name: page\n          required: false\n          schema:\n            default: \"1\"\n            type: string\n        - description: Limit the number of records for the requested page. If omitted or set to 0, return all results in a single page\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n        - description: Namespace(s) to filter vulnerability records by\n          explode: false\n          in: query\n          name: namespace\n          required: false\n          schema:\n            items:\n              type: string\n            type: array\n          style: form\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PaginatedVulnerabilityList\"\n          description: Vulnerability listing paginated\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Invalid filter parameters\n      summary: Listing information about given vulnerability\n      tags:\n        - Query\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.query\n  /registries:\n    get:\n      description: List all configured registries the system can/will watch\n      operationId: list_registries\n      parameters:\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegistryConfigurationList\"\n          description: Registry listing\n      summary: List configured registries\n      tags:\n        - Registries\n      x-anchore-authz-action: listRegistries\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries\n    post:\n      description: Adds a new registry to the system\n      operationId: create_registry\n      parameters:\n        - description: flag to determine whether or not to validate registry/credential at registry add time\n          in: query\n          name: validate\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        $ref: \"#/components/requestBodies/RegistryConfigurationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegistryConfigurationList\"\n          description: Saved registry configuration\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Add a new registry\n      tags:\n        - Registries\n      x-anchore-authz-action: createRegistry\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries\n  \"/registries/{registry}\":\n    delete:\n      description: Delete a registry configuration record from the system. Does not remove any images.\n      operationId: delete_registry\n      parameters:\n        - in: path\n          name: registry\n          required: true\n          schema:\n            format: path\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          description: Delete success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Delete a registry configuration\n      tags:\n        - Registries\n      x-anchore-authz-action: deleteRegistry\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries\n    get:\n      description: Get information on a specific registry\n      operationId: get_registry\n      parameters:\n        - in: path\n          name: registry\n          required: true\n          schema:\n            format: path\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegistryConfigurationList\"\n          description: Registry configuration\n      summary: Get a specific registry configuration\n      tags:\n        - Registries\n      x-anchore-authz-action: getRegistry\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries\n    put:\n      description: Replaces an existing registry record with the given record\n      operationId: update_registry\n      parameters:\n        - in: path\n          name: registry\n          required: true\n          schema:\n            format: path\n            type: string\n        - description: flag to determine whether or not to validate registry/credential at registry update time\n          in: query\n          name: validate\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        $ref: \"#/components/requestBodies/RegistryConfigurationRequest\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RegistryConfigurationList\"\n          description: Updated registry configuration\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Update/replace a registry configuration\n      tags:\n        - Registries\n      x-anchore-authz-action: updateRegistry\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.registries\n  /repositories:\n    post:\n      description: \"\"\n      operationId: add_repository\n      parameters:\n        - description: full repository to add e.g. docker.io/library/alpine\n          in: query\n          name: repository\n          required: true\n          schema:\n            type: string\n        - description: flag to enable/disable auto tag_update activation when new images from a repo are added\n          in: query\n          name: autosubscribe\n          required: false\n          schema:\n            type: boolean\n        - description: flag to return tags in the repository without actually watching the repository, default is false\n          in: query\n          name: dryrun\n          required: false\n          schema:\n            type: boolean\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubscriptionList\"\n          description: Repository and discovered tags added\n      summary: Add repository to watch\n      tags:\n        - Repository Credentials\n      x-anchore-authz-action: createRepository\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  /status:\n    get:\n      description: Get the API service status\n      operationId: get_status\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/StatusResponse\"\n          description: Status listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Service status\n      tags:\n        - System\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /subscriptions:\n    get:\n      operationId: list_subscriptions\n      parameters:\n        - description: filter only subscriptions matching key\n          in: query\n          name: subscription_key\n          required: false\n          schema:\n            type: string\n        - description: filter only subscriptions matching type\n          in: query\n          name: subscription_type\n          required: false\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubscriptionList\"\n          description: Subscription listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: List all subscriptions\n      tags:\n        - Subscriptions\n      x-anchore-authz-action: listSubscriptions\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions\n    post:\n      description: Create a new subscription to watch a tag and get notifications of changes\n      operationId: add_subscription\n      parameters:\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SubscriptionRequest\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubscriptionList\"\n          description: Subscription add success\n      summary: Add a subscription of a specific type\n      tags:\n        - Subscriptions\n      x-anchore-authz-action: createSubscription\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions\n  \"/subscriptions/{subscriptionId}\":\n    delete:\n      operationId: delete_subscription\n      parameters:\n        - in: path\n          name: subscriptionId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          description: Delete success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Delete subscriptions of a specific type\n      tags:\n        - Subscriptions\n      x-anchore-authz-action: deleteSubscription\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions\n    get:\n      operationId: get_subscription\n      parameters:\n        - in: path\n          name: subscriptionId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubscriptionList\"\n          description: Filtered subscription list by type\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get a specific subscription set\n      tags:\n        - Subscriptions\n      x-anchore-authz-action: getSubscription\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions\n    put:\n      operationId: update_subscription\n      parameters:\n        - in: path\n          name: subscriptionId\n          required: true\n          schema:\n            type: string\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/SubscriptionUpdate\"\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SubscriptionList\"\n          description: Subscription add success\n      summary: Update an existing and specific subscription\n      tags:\n        - Subscriptions\n      x-anchore-authz-action: updateSubscription\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.subscriptions\n  /summaries/imagetags:\n    get:\n      description: List all image tags visible to the user\n      operationId: list_imagetags\n      parameters:\n        - description: Filter images in one or more states such as active, deleting. Defaults to active images only if unspecified\n          explode: false\n          in: query\n          name: image_status\n          required: false\n          schema:\n            default:\n              - active\n            items:\n              enum:\n                - all\n                - active\n                - deleting\n              type: string\n            type: array\n          style: form\n        - $ref: \"#/components/parameters/AsAccountParameter\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnchoreImageTagSummaryList\"\n          description: successful operation\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: List all visible image digests and tags\n      tags:\n        - Summaries\n      x-anchore-authz-action: listImages\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.images\n  /system:\n    get:\n      description: Get the system status including queue lengths\n      operationId: get_service_detail\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/SystemStatusResponse\"\n          description: Status listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: System status\n      tags:\n        - System\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /system/error_codes:\n    get:\n      description: Describe anchore engine error codes.\n      operationId: describe_error_codes\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of Error Code Descriptions\n                items:\n                  $ref: \"#/components/schemas/AnchoreErrorCode\"\n                type: array\n          description: Error Codes Description\n      summary: Describe anchore engine error codes.\n      tags:\n        - System\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /system/feeds:\n    get:\n      description: Return a list of feed and their groups along with update and record count information. This data reflects the state of the policy engine, not the upstream feed service itself.\n      operationId: get_system_feeds\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FeedMetadata\"\n                type: array\n          description: success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: list feeds operations and information\n      tags:\n        - System\n      x-anchore-authz-action: listFeeds\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n    post:\n      description: Execute a synchronous feed sync operation. The response will block until complete, then return the result summary.\n      operationId: post_system_feeds\n      parameters:\n        - description: instruct system to flush existing data feeds records from anchore-engine\n          in: query\n          name: flush\n          required: false\n          schema:\n            type: boolean\n        - description: instruct system to re-sync data feeds\n          in: query\n          name: sync\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeedSyncResults\"\n          description: Feeds operation success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: trigger feeds operations\n      tags:\n        - System\n      x-anchore-authz-action: updateFeeds\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  \"/system/feeds/{feed}\":\n    delete:\n      description: Delete the groups and data for the feed and disable the feed itself\n      operationId: delete_feed\n      parameters:\n        - in: path\n          name: feed\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully deleted\n        \"404\":\n          description: Not found\n        \"500\":\n          description: Internal server error processing the request. Retry expected\n      tags:\n        - System\n      x-anchore-authz-action: updateFeeds\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n    put:\n      description: Disable the feed so that it does not sync on subsequent sync operations\n      operationId: toggle_feed_enabled\n      parameters:\n        - in: path\n          name: feed\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: enabled\n          required: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FeedMetadata\"\n          description: FeedInfo\n        \"400\":\n          description: Bad request, fix and resend\n        \"500\":\n          description: Internal server error processing the request. Retry expected\n      tags:\n        - System\n      x-anchore-authz-action: updateFeeds\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  \"/system/feeds/{feed}/{group}\":\n    delete:\n      description: Delete the group data and disable the group itself\n      operationId: delete_feed_group\n      parameters:\n        - in: path\n          name: feed\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: group\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successfully deleted\n        \"404\":\n          description: Not found\n        \"500\":\n          description: Internal server error processing the request. Retry expected\n      tags:\n        - System\n      x-anchore-authz-action: updateFeeds\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n    put:\n      description: Disable a specific group within a feed to not sync\n      operationId: toggle_group_enabled\n      parameters:\n        - in: path\n          name: feed\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: group\n          required: true\n          schema:\n            type: string\n        - in: query\n          name: enabled\n          required: true\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: \"#/components/schemas/FeedMetadata\"\n                type: array\n          description: FeedInfo listing\n        \"400\":\n          description: Bad request, fix and resend\n        \"500\":\n          description: Internal server error processing the request. Retry expected\n      tags:\n        - System\n      x-anchore-authz-action: updateFeeds\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /system/policy_spec:\n    get:\n      description: Get the policy language spec for this service\n      operationId: describe_policy\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                description: List of Gate specifications\n                items:\n                  $ref: \"#/components/schemas/GateSpec\"\n                type: array\n          description: Policy Language Description\n      summary: Describe the policy language spec implemented by this service.\n      tags:\n        - System\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /system/services:\n    get:\n      operationId: list_services\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceList\"\n          description: Service listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: List system services\n      tags:\n        - System\n      x-anchore-authz-action: listServices\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  \"/system/services/{servicename}\":\n    get:\n      operationId: get_services_by_name\n      parameters:\n        - in: path\n          name: servicename\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceList\"\n          description: Service Info\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal Error\n      summary: Get a service configuration and state\n      tags:\n        - System\n      x-anchore-authz-action: getService\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  \"/system/services/{servicename}/{hostid}\":\n    delete:\n      operationId: delete_service\n      parameters:\n        - in: path\n          name: servicename\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: hostid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Delete success\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Delete the service config\n      tags:\n        - System\n      x-anchore-authz-action: deleteService\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n    get:\n      operationId: get_services_by_name_and_host\n      parameters:\n        - in: path\n          name: servicename\n          required: true\n          schema:\n            type: string\n        - in: path\n          name: hostid\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceList\"\n          description: Listing of registered services\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get service config for a specific host\n      tags:\n        - System\n      x-anchore-authz-action: getService\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  \"/system/webhooks/{webhook_type}/test\":\n    post:\n      description: Loads the Webhook configuration for webhook_type, and sends the notification out as a test\n      operationId: test_webhook\n      parameters:\n        - description: The Webhook Type that we should test\n          in: path\n          name: webhook_type\n          required: true\n          schema:\n            type: string\n        - description: What kind of Notification to send\n          in: query\n          name: notification_type\n          required: false\n          schema:\n            default: tag_update\n            enum:\n              - tag_update\n              - analysis_update\n              - vuln_update\n              - policy_eval\n            type: string\n      responses:\n        \"200\":\n          description: The Webhook was sent successfully. Schemas may be found under Models (PolicyEvalNotification, TagUpdateNotification, VulnUpdateNotification, AnalysisUpdateNotification)\n        \"400\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: The Webhook failed to send due to misconfiguration\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: The Webhook failed to send due to an Internal Error\n      summary: Adds the capabilities to test a webhook delivery for the given notification type\n      tags:\n        - System\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.system\n  /user:\n    get:\n      operationId: get_user\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: User details for caller's user\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: List authenticated user info\n      tags:\n        - Identity\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.user\n  /user/credentials:\n    get:\n      operationId: get_credentials\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/CredentialList\"\n          description: User credential listing\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: Get current credential summary\n      tags:\n        - Identity\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.user\n    post:\n      operationId: add_credential\n      requestBody:\n        $ref: \"#/components/requestBodies/AccessCredential\"\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n          description: Add a credential, overwritting if already exists\n        \"500\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ApiErrorResponse\"\n          description: Internal error\n      summary: add/replace credential\n      tags:\n        - Identity\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.services.apiext.api.controllers.user\n  /version:\n    get:\n      description: Returns the version object for the service, including db schema version info\n      operationId: version_check\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/ServiceVersion\"\n          description: Version object describing version state\n      x-anchore-authz-action: None\n      x-swagger-router-controller: anchore_engine.apis.common\ncomponents:\n  parameters:\n    AsAccountParameter:\n      description: An account name to change the resource scope of the request to that account, if permissions allow (admin only)\n      in: header\n      name: x-anchore-account\n      required: false\n      schema:\n        type: string\n  requestBodies:\n    AccessCredential:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/AccessCredential\"\n      required: true\n    RegistryConfigurationRequest:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/RegistryConfigurationRequest\"\n      required: true\n  schemas:\n    AccessCredential:\n      description: A login credential mapped to a user identity. For password credentials, the username to present for Basic auth is the user's username from the user record\n      properties:\n        created_at:\n          description: The timestamp of creation of the credential\n          type: string\n        type:\n          description: The type of credential\n          enum:\n            - password\n          type: string\n        value:\n          description: The credential value (e.g. the password)\n          type: string\n      required:\n        - type\n        - value\n      type: object\n    Account:\n      description: Account information\n      properties:\n        created_at:\n          description: The timestamp when the account was created\n          format: date-time\n          type: string\n        email:\n          description: Optional email address associated with the account\n          type: string\n        last_updated:\n          description: The timestamp of the last update to the account metadata itself (not users or creds)\n          format: date-time\n          type: string\n        name:\n          description: The account identifier, not updatable after creation\n          type: string\n        state:\n          description: State of the account. Disabled accounts prevent member users from logging in, deleting accounts are disabled and pending deletion and will be removed once all owned resources are garbage collected by the system\n          enum:\n            - enabled\n            - disabled\n            - deleting\n          type: string\n        type:\n          description: The user type (admin vs user). If not specified in a POST request, 'user' is default\n          enum:\n            - user\n            - admin\n            - service\n          type: string\n      required:\n        - name\n      type: object\n    AccountCreationRequest:\n      description: An account to create/add to the system. If already exists will return 400.\n      properties:\n        email:\n          description: An optional email to associate with the account for contact purposes\n          pattern: \"[a-z0-9!#$%\u0026'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%\u0026'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\"\n          type: string\n        name:\n          description: The account name to use. This will identify the account and must be globally unique in the system.\n          pattern: ^[a-zA-Z0-9][a-zA-Z0-9@.!#$+-=^_`~;]{1,126}[a-zA-Z0-9]$\n          type: string\n      required:\n        - name\n      type: object\n    AccountList:\n      items:\n        $ref: \"#/components/schemas/Account\"\n      type: array\n    AccountStatus:\n      description: A summary of account status\n      properties:\n        state:\n          description: The status of the account\n          enum:\n            - enabled\n            - disabled\n          type: string\n      type: object\n    AddAnalysisArchiveResult:\n      description: List of analysis archive add results\n      items:\n        $ref: \"#/components/schemas/AnalysisArchiveAddResult\"\n      type: array\n    AnalysisArchiveAddResult:\n      description: The result of adding a single digest to the archive\n      properties:\n        detail:\n          description: Details on the status, e.g. the error message\n          type: string\n        digest:\n          description: The image digest requested to be added\n          type: string\n        status:\n          description: The status of the archive add operation. Typically either 'archived' or 'error'\n          enum:\n            - archived\n            - archiving\n            - error\n          type: string\n      type: object\n    AnalysisArchiveRules:\n      description: Rule set for automatic archiving of system objects and flushing of archived objects (permament delete).\n      items:\n        $ref: \"#/components/schemas/AnalysisArchiveTransitionRule\"\n      type: array\n    AnalysisArchiveRulesSummary:\n      description: Summary of the transition rule set\n      properties:\n        count:\n          description: The number of rules for this account\n          type: integer\n        last_updated:\n          description: The newest last_updated timestamp from the set of rules\n          format: date-time\n          type: string\n      type: object\n    AnalysisArchiveSource:\n      description: An image reference in the analysis archive for the purposes of loading analysis from the archive into th working set\n      nullable: true\n      properties:\n        digest:\n          description: The image digest identify the analysis. Archived analyses are based on digest, tag records are restored as analysis is restored.\n          pattern: ^sha256:[a-fA-F0-9]{64}$\n          type: string\n      required:\n        - digest\n      type: object\n    AnalysisArchiveSummary:\n      description: A summarization of the analysis archive, including size, counts, etc. This archive stores image analysis only, never the actual image content or layers.\n      properties:\n        last_updated:\n          description: The timestamp of the most recent archived image\n          format: date-time\n          type: string\n        total_data_bytes:\n          description: The total sum of all the bytes stored to the backing storage. Accounts for anchore-applied compression, but not compression by the underlying storage system.\n          type: integer\n        total_image_count:\n          description: The number of unique images (digests) in the archive\n          type: integer\n        total_tag_count:\n          description: The number of tag records (registry/repo:tag pull strings) in the archive. This may include repeated tags but will always have a unique tag-\u003edigest mapping per record.\n          type: integer\n      type: object\n    AnalysisArchiveTransitionHistory:\n      description: A rule for auto-archiving image analysis by time and/or tag-history\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        imageDigest:\n          type: string\n        last_updated:\n          format: date-time\n          type: string\n        rule_id:\n          type: string\n        transition:\n          enum:\n            - archive\n            - delete\n          type: string\n        transition_task_id:\n          description: The task that created \u0026 updated this entry\n          type: string\n      type: object\n    AnalysisArchiveTransitionRule:\n      description: A rule for auto-archiving image analysis by time and/or tag-history\n      properties:\n        analysis_age_days:\n          description: Matches if the analysis is strictly older than this number of days\n          type: integer\n        created_at:\n          format: date-time\n          type: string\n        exclude:\n          $ref: \"#/components/schemas/AnalysisArchiveTransitionRuleExclude\"\n        last_updated:\n          format: date-time\n          type: string\n        max_images_per_account:\n          description: This is the maximum number of image analyses an account can have. Can only be set on system_global rules\n          type: integer\n        rule_id:\n          description: Unique identifier for archive rule\n          type: string\n        selector:\n          $ref: \"#/components/schemas/ImageSelector\"\n        system_global:\n          description: True if the rule applies to all accounts in the system. This is only available to admin users to update/modify, but all users with permission to list rules can see them\n          type: boolean\n        tag_versions_newer:\n          description: Number of images mapped to the tag that are newer\n          type: integer\n        transition:\n          description: The type of transition to make. If \"archive\", then archive an image from the working set and remove it from the working set. If \"delete\", then match against archived images and delete from the archive if match.\n          enum:\n            - archive\n            - delete\n          type: string\n      required:\n        - transition\n      type: object\n    AnalysisArchiveTransitionRuleExclude:\n      description: Which Images to exclude from auto-archiving logic\n      properties:\n        expiration_days:\n          default: -1\n          description: How long the image selected will be excluded from the archive transition\n          type: integer\n        selector:\n          $ref: \"#/components/schemas/ImageSelector\"\n      type: object\n    AnalysisUpdateEval:\n      description: Evaluation Results for an entity (current or last)\n      properties:\n        analysis_status:\n          type: string\n        annotations:\n          type: object\n        image_digest:\n          type: string\n      type: object\n    AnalysisUpdateNotification:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationBase\"\n        - description: The Notification Object definition for Tag Update Notifications\n          properties:\n            data:\n              $ref: \"#/components/schemas/AnalysisUpdateNotificationData\"\n          type: object\n    AnalysisUpdateNotificationData:\n      allOf:\n        - $ref: \"#/components/schemas/BaseNotificationData\"\n        - properties:\n            notification_payload:\n              $ref: \"#/components/schemas/AnalysisUpdateNotificationPayload\"\n          type: object\n    AnalysisUpdateNotificationPayload:\n      allOf:\n        - $ref: \"#/components/schemas/GenericNotificationPayload\"\n        - properties:\n            annotations:\n              description: List of Corresponding Image Annotations\n              nullable: true\n              type: object\n            curr_eval:\n              $ref: \"#/components/schemas/AnalysisUpdateEval\"\n            last_eval:\n              $ref: \"#/components/schemas/AnalysisUpdateEval\"\n          type: object\n    AnchoreErrorCode:\n      description: A description of an anchore error code (name, description)\n      properties:\n        description:\n          description: Description of the error code\n          type: string\n        name:\n          description: Error code name\n          type: string\n      type: object\n    AnchoreImage:\n      description: A unique image in the engine. May have multiple tags or references. Unique to an image content across registries or repositories.\n      properties:\n        analysis_status:\n          description: A state value for the current status of the analysis progress of the image\n          enum:\n            - not_analyzed\n            - analyzing\n            - analyzed\n            - analysis_failed\n          type: string\n        annotations:\n          type: object\n        created_at:\n          format: date-time\n          type: string\n        imageDigest:\n          type: string\n        image_content:\n          $ref: \"#/components/schemas/ImageContent\"\n        image_detail:\n          description: Details specific to an image reference and type such as tag and image source\n          items:\n            $ref: \"#/components/schemas/ImageDetail\"\n          type: array\n        image_status:\n          description: State of the image\n          enum:\n            - active\n            - inactive\n            - disabled\n          type: string\n        last_updated:\n          format: date-time\n          type: string\n        userId:\n          type: string\n      type: object\n    AnchoreImageList:\n      description: A list of Anchore Images\n      items:\n        $ref: \"#/components/schemas/AnchoreImage\"\n      type: array\n    AnchoreImageTagSummary:\n      description: A unique image in the engine.\n      properties:\n        analysis_status:\n          type: string\n        analyzed_at:\n          type: integer\n        created_at:\n          type: integer\n        fulltag:\n          type: string\n        imageDigest:\n          type: string\n        imageId:\n          type: string\n        image_status:\n          type: string\n        parentDigest:\n          type: string\n        tag_detected_at:\n          type: integer\n      type: object\n    AnchoreImageTagSummaryList:\n      description: a list of AnchoreImageTagSummary objects\n      items:\n        $ref: \"#/components/schemas/AnchoreImageTagSummary\"\n      type: array\n    Annotations:\n      description: Simple key/value pairs where the value may be optional\n      type: object\n    ApiErrorResponse:\n      description: Generic HTTP API error response\n      properties:\n        code:\n          format: int32\n          type: integer\n        detail:\n          description: Details structure for additional information about the error if available. Content and structure will be error specific.\n          type: object\n        error_type:\n          type: string\n        message:\n          type: string\n      type: object\n    ArchiveSummary:\n      description: A summarization of the available archives, a place to for long-term storage of audit, analysis, or other data to remove it from the system's working set but keep it available.\n      properties:\n        images:\n          $ref: \"#/components/schemas/AnalysisArchiveSummary\"\n        rules:\n          $ref: \"#/components/schemas/AnalysisArchiveRulesSummary\"\n      type: object\n    ArchivedAnalyses:\n      description: List of archived analyses\n      items:\n        $ref: \"#/components/schemas/ArchivedAnalysis\"\n      type: array\n    ArchivedAnalysis:\n      properties:\n        analyzed_at:\n          format: date-time\n          type: string\n        annotations:\n          description: User provided annotations as key-value pairs\n          type: object\n        archive_size_bytes:\n          description: The size, in bytes, of the analysis archive file\n          type: integer\n        created_at:\n          format: date-time\n          type: string\n        imageDigest:\n          description: The image digest (digest of the manifest describing the image, per docker spec)\n          type: string\n        image_detail:\n          description: List of tags associated with the image digest\n          items:\n            $ref: \"#/components/schemas/TagEntry\"\n          type: array\n        last_updated:\n          format: date-time\n          type: string\n        parentDigest:\n          description: The digest of a parent manifest (for manifest-list images)\n          type: string\n        status:\n          description: The archival status\n          enum:\n            - archiving\n            - archived\n            - deleting\n            - deleted\n          type: string\n      type: object\n    BaseNotificationData:\n      description: Every notification has a payload, which follows this basic structure\n      properties:\n        notification_type:\n          type: string\n        notification_user:\n          type: string\n        notification_user_email:\n          type: string\n      type: object\n    CVSSV2Scores:\n      properties:\n        base_score:\n          nullable: true\n          type: number\n        exploitability_score:\n          nullable: true\n          type: number\n        impact_score:\n          nullable: true\n          type: number\n      type: object\n    CVSSV3Scores:\n      properties:\n        base_score:\n          nullable: true\n          type: number\n        exploitability_score:\n          nullable: true\n          type: number\n        impact_score:\n          nullable: true\n          type: number\n      type: object\n    ContentFilesResponse:\n      description: File content listings from images\n      properties:\n        content:\n          items:\n            properties:\n              filename:\n                type: string\n              gid:\n                type: integer\n              linkdest:\n                nullable: true\n                type: string\n              mode:\n                type: string\n              sha256:\n                nullable: true\n                type: string\n              size:\n                type: integer\n              type:\n                type: string\n              uid:\n                type: integer\n            type: object\n          type: array\n        content_type:\n          type: string\n        imageDigest:\n          type: string\n      type: object\n    ContentJAVAPackageResponse:\n      description: Java package content listings from images\n      properties:\n        content:\n          items:\n            properties:\n              cpes:\n                description: A list of Common Platform Enumerations that may uniquely identify the package\n                items:\n                  type: string\n                type: array\n              implementation-version:\n                type: string\n              location:\n                type: string\n              maven-version:\n                type: string\n              origin:\n                type: string\n              package:\n                type: string\n              specification-version:\n                type: string\n              type:\n                type: string\n            type: object\n          type: array\n        content_type:\n          type: string\n        imageDigest:\n          type: string\n      type: object\n    ContentMalwareResponse:\n      description: Malware listing response\n      properties:\n        content:\n          description: List of malware scan results, one per scanner configured to run\n          items:\n            $ref: \"#/components/schemas/MalwareScan\"\n          type: array\n        content_type:\n          type: string\n        imageDigest:\n          type: string\n      type: object\n    ContentPackageResponse:\n      description: Package content listings from images\n      properties:\n        content:\n          items:\n            properties:\n              cpes:\n                description: A list of Common Platform Enumerations that may uniquely identify the package\n                items:\n                  type: string\n                type: array\n              license:\n                description: Deprecated in favor of the 'licenses' field\"\n                type: string\n              licenses:\n                items:\n                  type: string\n                type: array\n              location:\n                type: string\n              origin:\n                type: string\n              package:\n                type: string\n              size:\n                type: string\n              type:\n                type: string\n              version:\n                type: string\n            type: object\n          type: array\n        content_type:\n          type: string\n        imageDigest:\n          type: string\n      type: object\n    ContentResponse:\n      description: Generic wrapper for content listings from images\n      properties:\n        content:\n          items:\n            type: object\n          type: array\n        content_type:\n          type: string\n        imageDigest:\n          type: string\n      type: object\n    CredentialList:\n      items:\n        $ref: \"#/components/schemas/AccessCredential\"\n      type: array\n    DeleteImageResponse:\n      description: Image deletion response containing status and details\n      properties:\n        detail:\n          type: string\n        digest:\n          type: string\n        status:\n          description: Current status of the image deletion\n          enum:\n            - not_found\n            - deleting\n            - delete_failed\n          type: string\n      required:\n        - digest\n        - status\n      type: object\n    DeleteImageResponseList:\n      description: A list of delete image responses\n      items:\n        $ref: \"#/components/schemas/DeleteImageResponse\"\n      type: array\n    EventCategory:\n      description: A collection of event subcategories\n      properties:\n        category:\n          type: string\n        description:\n          type: string\n        subcategories:\n          items:\n            $ref: \"#/components/schemas/EventSubcategory\"\n          type: array\n      type: object\n    EventDescription:\n      description: A description of an event type\n      properties:\n        message:\n          description: The message associated with the event type\n          type: string\n        name:\n          description: The event type. The last component of the fully-qualified event_type (category.subcategory.event)\n          type: string\n        resource_type:\n          description: The type of resource this event is generated from\n          type: string\n        type:\n          description: The fully qualified event type as would be seen in the event payload\n          type: string\n      type: object\n    EventResponse:\n      description: A record of occurance of an asynchronous event triggered either by system or by user activity\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        event:\n          properties:\n            category:\n              type: string\n            details:\n              type: object\n            level:\n              type: string\n            message:\n              type: string\n            resource:\n              properties:\n                id:\n                  type: string\n                type:\n                  type: string\n                user_id:\n                  type: string\n              type: object\n            source:\n              properties:\n                base_url:\n                  type: string\n                hostid:\n                  type: string\n                request_id:\n                  type: string\n                servicename:\n                  type: string\n              type: object\n            timestamp:\n              format: date-time\n              type: string\n            type:\n              type: string\n          type: object\n        generated_uuid:\n          type: string\n      type: object\n    EventSubcategory:\n      description: A collection of events related to each other\n      properties:\n        description:\n          type: string\n        events:\n          items:\n            $ref: \"#/components/schemas/EventDescription\"\n          type: array\n        name:\n          type: string\n      type: object\n    EventTypesList:\n      description: Array of EventCategory objects\n      items:\n        $ref: \"#/components/schemas/EventCategory\"\n      type: array\n    EventsList:\n      description: Response envelope for paginated listing of events\n      properties:\n        item_count:\n          description: Number of events in this page\n          type: integer\n        next_page:\n          description: Boolean flag, True indicates there are more events and False otherwise\n          type: boolean\n        page:\n          description: Page number of this result set\n          type: integer\n        results:\n          description: List of events\n          items:\n            $ref: \"#/components/schemas/EventResponse\"\n          type: array\n      type: object\n    FeedGroupMetadata:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        last_sync:\n          format: date-time\n          type: string\n        name:\n          type: string\n        record_count:\n          type: integer\n      type: object\n    FeedMetadata:\n      description: Metadata on a single feed based on what the engine finds from querying the endpoints\n      properties:\n        created_at:\n          description: Date the metadata record was created in engine (first seen on source)\n          format: date-time\n          type: string\n        groups:\n          items:\n            $ref: \"#/components/schemas/FeedGroupMetadata\"\n          type: array\n        last_full_sync:\n          format: date-time\n          type: string\n        name:\n          description: name of the feed\n          type: string\n        updated_at:\n          description: Date the metadata was last updated\n          format: date-time\n          type: string\n      type: object\n    FeedSyncResult:\n      description: The result of a sync of a single feed\n      properties:\n        feed:\n          description: The name of the feed synced\n          type: string\n        groups:\n          description: Array of group sync results\n          items:\n            $ref: \"#/components/schemas/GroupSyncResult\"\n          type: array\n        status:\n          description: The result of the sync operations, either co\n          enum:\n            - success\n            - failure\n          type: string\n        total_time_seconds:\n          description: The duratin, in seconds, of the sync of the feed, the sum of all the group syncs\n          type: number\n      type: object\n    FeedSyncResults:\n      description: An array of feed sync summaries representing the result of an explicit feed sync operation\n      items:\n        $ref: \"#/components/schemas/FeedSyncResult\"\n      type: array\n    FileContentSearchList:\n      description: Simple array of RetrievedFileMetadata objects\n      items:\n        $ref: \"#/components/schemas/FileContentSearchResult\"\n      type: array\n    FileContentSearchResult:\n      description: The retrieved file entry including content (b64 encoded)\n      properties:\n        matches:\n          items:\n            $ref: \"#/components/schemas/RegexContentMatch\"\n          type: array\n        path:\n          type: string\n      type: object\n    GateSpec:\n      description: A description of the set of gates available in this engine and the triggers and parameters supported\n      properties:\n        description:\n          description: Description of the gate\n          type: string\n        name:\n          description: Gate name, as it would appear in a policy document\n          type: string\n        state:\n          description: State of the gate and transitively all triggers it contains if not 'active'\n          enum:\n            - active\n            - deprecated\n            - eol\n          type: string\n        superceded_by:\n          description: The name of another trigger that supercedes this on functionally if this is deprecated\n          nullable: true\n          type: string\n        triggers:\n          description: List of the triggers that can fire for this Gate\n          items:\n            $ref: \"#/components/schemas/TriggerSpec\"\n          type: array\n      type: object\n    GenericNotificationPayload:\n      description: Parent class for Notification Payloads\n      properties:\n        notificationId:\n          type: string\n        subscription_key:\n          type: string\n        subscription_type:\n          type: string\n        userId:\n          type: string\n      type: object\n    GroupSyncResult:\n      properties:\n        group:\n          description: The name of the group\n          type: string\n        status:\n          enum:\n            - success\n            - failure\n          type: string\n        total_time_seconds:\n          description: The duration of the group sync in seconds\n          type: number\n        updated_image_count:\n          description: The number of images updated by the this group sync, across all accounts. This is typically only non-zero for vulnerability feeds which update images' vulnerability results during the sync.\n          type: integer\n        updated_record_count:\n          description: The number of feed data records synced down as either updates or new records\n          type: integer\n      type: object\n    ImageAnalysisReferences:\n      description: List of image digests to archive\n      items:\n        description: Image digest\n        type: string\n      type: array\n    ImageAnalysisReport:\n      description: Analysis report json to be imported\n      type: object\n    ImageAnalysisRequest:\n      description: A request to add an image to be watched and analyzed by the engine. Optionally include the dockerfile content. Either source, digest or tag must be present.\n      properties:\n        annotations:\n          description: Annotations to be associated with the added image in key/value form\n          type: object\n        created_at:\n          description: Optional override of the image creation time, only honored when both tag and digest are also supplied  e.g. 2018-10-17T18:14:00Z. Deprecated in favor of the 'source' field\n          format: date-time\n          type: string\n        digest:\n          description: A digest string for an image, maybe a pull string or just a digest. e.g. nginx@sha256:123 or sha256:abc123. If a pull string, it must have same regisry/repo as the tag field. Deprecated in favor of the 'source' field\n          type: string\n        dockerfile:\n          description: Base64 encoded content of the dockerfile for the image, if available. Deprecated in favor of the 'source' field.\n          pattern: ^[a-zA-Z0-9+/=]+$\n          type: string\n        image_type:\n          description: Optional. The type of image this is adding, defaults to \"docker\". This can be ommitted until multiple image types are supported.\n          type: string\n        source:\n          $ref: \"#/components/schemas/ImageSource\"\n        tag:\n          description: Full pullable tag reference for image. e.g. docker.io/nginx:latest. Deprecated in favor of the 'source' field\n          type: string\n      type: object\n    ImageContent:\n      description: A metadata content record for a specific image, containing different content type entries\n      type: object\n    ImageContentDeleteResponse:\n      type: object\n    ImageDetail:\n      description: A metadata detail record for a specific image. Multiple detail records may map a single catalog image.\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        dockerfile:\n          nullable: true\n          type: string\n        fulldigest:\n          description: Full docker-pullable digest string including the registry url and repository necessary get the image\n          type: string\n        fulltag:\n          description: Full docker-pullable tag string referencing the image\n          type: string\n        imageDigest:\n          description: The parent Anchore Image record to which this detail maps\n          type: string\n        imageId:\n          type: string\n        last_updated:\n          format: date-time\n          type: string\n        registry:\n          type: string\n        repo:\n          type: string\n        userId:\n          type: string\n      type: object\n    ImageFilter:\n      description: Filter for an image list by id, tag, or digest, but not both\n      properties:\n        digest:\n          type: string\n        tag:\n          type: string\n      type: object\n    ImageImportContentResponse:\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        digest:\n          type: string\n      type: object\n    ImageImportManifest:\n      nullable: true\n      properties:\n        contents:\n          $ref: \"#/components/schemas/ImportContentDigests\"\n        digest:\n          type: string\n        local_image_id:\n          description: An \"imageId\" as used by Docker if available\n          type: string\n        operation_uuid:\n          type: string\n        parent_digest:\n          description: The digest of the images's manifest-list parent if it was accessed from a multi-arch tag where the tag pointed to a manifest-list. This allows preservation of that relationship in the data\n          type: string\n        tags:\n          items:\n            description: Full docker reference tags\n            example: docker.io/library/nginx:latest\n            type: string\n          type: array\n      type: object\n    ImageImportOperation:\n      description: An import record, creating a unique identifier for referencing the operation as well as its state\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        expires_at:\n          format: date-time\n          type: string\n        status:\n          enum:\n            - pending\n            - queued\n            - processing\n            - complete\n            - failed\n            - expired\n          type: string\n        uuid:\n          type: string\n      type: object\n    ImageImports:\n      items:\n        $ref: \"#/components/schemas/ImageImportOperation\"\n      type: array\n    ImagePackageManifest:\n      additionalProperties: true\n      properties:\n        artifactRelationships:\n          items:\n            $ref: \"#/components/schemas/ImportPackageRelationship\"\n          type: array\n        artifacts:\n          items:\n            $ref: \"#/components/schemas/ImportPackage\"\n          type: array\n        descriptor:\n          $ref: \"#/components/schemas/ImportDescriptor\"\n        distro:\n          $ref: \"#/components/schemas/ImportDistribution\"\n        schema:\n          $ref: \"#/components/schemas/ImportSchema\"\n        source:\n          $ref: \"#/components/schemas/ImportSource\"\n      required:\n        - artifacts\n        - source\n        - distro\n      type: object\n    ImageRef:\n      description: A reference to an image\n      properties:\n        type:\n          enum:\n            - tag\n            - digest\n            - id\n        value:\n          type: string\n      required:\n        - type\n        - value\n      type: object\n    ImageReference:\n      description: A summary of an image identity, including digest, id (if available), and any tags known to have ever been mapped to the digest\n      properties:\n        analyzed_at:\n          description: Timestamp, in rfc3339 format, indicating when the image state became 'analyzed' in Anchore Engine.\n          type: string\n        digest:\n          description: The image digest\n          type: string\n        id:\n          description: The image id if available\n          type: string\n        tag_history:\n          items:\n            $ref: \"#/components/schemas/TagEntry\"\n          type: array\n      type: object\n    ImageSelectionRule:\n      properties:\n        id:\n          type: string\n        image:\n          $ref: \"#/components/schemas/ImageRef\"\n        name:\n          type: string\n        registry:\n          type: string\n        repository:\n          type: string\n      required:\n        - name\n        - registry\n        - repository\n        - image\n      type: object\n    ImageSelector:\n      description: A set of selection criteria to match an image by a tagged pullstring based on its components, with regex support in each field\n      properties:\n        registry:\n          description: The registry section of a pull string. e.g. with \"docker.io/anchore/anchore-engine:latest\", this is \"docker.io\"\n          type: string\n        repository:\n          description: The repository section of a pull string. e.g. with \"docker.io/anchore/anchore-engine:latest\", this is \"anchore/anchore-engine\"\n          type: string\n        tag:\n          description: The tag-only section of a pull string. e.g. with \"docker.io/anchore/anchore-engine:latest\", this is \"latest\"\n          type: string\n      type: object\n    ImageSource:\n      description: A set of analysis source types. Only one may be set in any given request.\n      properties:\n        archive:\n          $ref: \"#/components/schemas/AnalysisArchiveSource\"\n        digest:\n          $ref: \"#/components/schemas/RegistryDigestSource\"\n        import:\n          $ref: \"#/components/schemas/ImageImportManifest\"\n        tag:\n          $ref: \"#/components/schemas/RegistryTagSource\"\n      type: object\n    ImageWithPackages:\n      description: An image record that contains packages\n      properties:\n        image:\n          $ref: \"#/components/schemas/ImageReference\"\n        packages:\n          items:\n            $ref: \"#/components/schemas/PackageReference\"\n          type: array\n      type: object\n    ImportContentDigestList:\n      items:\n        description: String digest of an uploaded content\n        type: string\n      type: array\n    ImportContentDigests:\n      description: Digest of content to use in the final import\n      properties:\n        dockerfile:\n          description: Digest for reference content for dockerfile\n          type: string\n        image_config:\n          description: Digest for reference content for image config\n          type: string\n        manifest:\n          description: Digest to reference content for the image manifest\n          type: string\n        packages:\n          description: Digest to use for the packages content\n          type: string\n        parent_manifest:\n          description: Digest for reference content for parent manifest\n          type: string\n      required:\n        - packages\n        - manifest\n        - image_config\n      type: object\n    ImportDescriptor:\n      additionalProperties: true\n      properties:\n        name:\n          type: string\n        version:\n          type: string\n      required:\n        - name\n        - version\n      type: object\n    ImportDistribution:\n      additionalProperties: true\n      properties:\n        idLike:\n          type: string\n        name:\n          type: string\n        version:\n          type: string\n      required:\n        - name\n        - version\n        - idLike\n      type: object\n    ImportPackage:\n      additionalProperties: true\n      properties:\n        cpes:\n          items:\n            type: string\n          type: array\n        foundBy:\n          type: string\n        id:\n          type: string\n        language:\n          type: string\n        licenses:\n          items:\n            type: string\n          type: array\n        locations:\n          items:\n            $ref: \"#/components/schemas/ImportPackageLocation\"\n          type: array\n        metadata:\n          type: object\n        metadataType:\n          type: string\n        name:\n          type: string\n        purl:\n          type: string\n        type:\n          type: string\n        version:\n          type: string\n      required:\n        - name\n        - version\n        - type\n        - locations\n        - licenses\n        - language\n        - cpes\n        - metadataType\n      type: object\n    ImportPackageLocation:\n      additionalProperties: true\n      properties:\n        layerID:\n          type: string\n        path:\n          type: string\n      required:\n        - path\n      type: object\n    ImportPackageRelationship:\n      additionalProperties: true\n      properties:\n        child:\n          type: string\n        metadata:\n          additionalProperties: true\n          type: object\n        parent:\n          type: string\n        type:\n          type: string\n      required:\n        - parent\n        - child\n        - type\n      type: object\n    ImportSchema:\n      additionalProperties: true\n      properties:\n        url:\n          type: string\n        version:\n          type: string\n      required:\n        - version\n        - url\n      type: object\n    ImportSource:\n      additionalProperties: true\n      properties:\n        target:\n          additionalProperties: true\n        type:\n          type: string\n      required:\n        - type\n        - target\n      type: object\n    LocalAnalysisSource:\n      properties:\n        digest:\n          type: string\n      type: object\n    MalwareScan:\n      description: A single scan from a scanner\n      properties:\n        enabled:\n          description: Indicates if the scanner is enabled\n          type: boolean\n        findings:\n          items:\n            properties:\n              path:\n                description: A path for a file in the image's rootfs\n                type: string\n              signature:\n                description: The malware signature found at the path\n                type: string\n            type: object\n          type: array\n        metadata:\n          description: Open schema for scanner-specific metadata related to the scan result\n          type: object\n        scanner:\n          description: The name of the scanner that produced the finding\n          type: string\n      type: object\n    MappingRule:\n      properties:\n        id:\n          type: string\n        image:\n          $ref: \"#/components/schemas/ImageRef\"\n        name:\n          type: string\n        policy_id:\n          description: Optional single policy to evalute, if set will override any value in policy_ids, for backwards compatibility. Generally, policy_ids should be used even with a array of length 1.\n          type: string\n        policy_ids:\n          description: List of policyIds to evaluate in order, to completion\n          items:\n            description: PolicyId to evaluate\n            type: string\n          type: array\n        registry:\n          type: string\n        repository:\n          type: string\n        whitelist_ids:\n          items:\n            type: string\n          type: array\n      required:\n        - name\n        - registry\n        - repository\n        - image\n      type: object\n    MetadataResponse:\n      description: Generic wrapper for metadata listings from images\n      properties:\n        imageDigest:\n          type: string\n        metadata: {}\n        metadata_type:\n          type: string\n      type: object\n    NotificationBase:\n      description: base object for Notifications (every notification has this basic structure)\n      properties:\n        created_at:\n          type: integer\n        dataId:\n          type: string\n        last_updated:\n          type: integer\n        max_tries:\n          type: integer\n        queueId:\n          type: string\n        record_state_key:\n          default: active\n          type: string\n        record_state_val:\n          nullable: true\n          type: string\n        tries:\n          type: integer\n        userId:\n          type: string\n      type: object\n    NvdDataList:\n      description: List of Nvd Data objects\n      items:\n        $ref: \"#/components/schemas/NvdDataObject\"\n      type: array\n    NvdDataObject:\n      properties:\n        cvss_v2:\n          $ref: \"#/components/schemas/CVSSV2Scores\"\n        cvss_v3:\n          $ref: \"#/components/schemas/CVSSV3Scores\"\n        id:\n          description: NVD Vulnerability ID\n          type: string\n      type: object\n    PackageReference:\n      description: A record of a software item which is vulnerable or carries a fix for a vulnerability\n      properties:\n        name:\n          description: Package name\n          type: string\n        type:\n          description: Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)\n          type: string\n        version:\n          description: A version for the package. If null, then references all versions\n          nullable: true\n          type: string\n        will_not_fix:\n          description: Whether a vendor will or will not fix a vulnerabitlity\n          type: boolean\n      type: object\n    PaginatedImageList:\n      allOf:\n        - $ref: \"#/components/schemas/PaginationProperties\"\n        - properties:\n            images:\n              items:\n                $ref: \"#/components/schemas/ImageWithPackages\"\n              type: array\n          type: object\n      description: Pagination wrapped list of images that match some filter\n    PaginatedVulnerabilityList:\n      allOf:\n        - $ref: \"#/components/schemas/PaginationProperties\"\n        - properties:\n            vulnerabilities:\n              description: The listing of matching vulnerabilities for the query subject to pagination\n              items:\n                $ref: \"#/components/schemas/StandaloneVulnerability\"\n              type: array\n          type: object\n      description: A paginated listing of vulnerability records sorted by ID in descending order\n    PaginatedVulnerableImageList:\n      allOf:\n        - $ref: \"#/components/schemas/PaginationProperties\"\n        - properties:\n            images:\n              items:\n                $ref: \"#/components/schemas/VulnerableImage\"\n              type: array\n          type: object\n      description: Pagination wrapped list of images with vulnerabilties that match some filter\n    PaginationProperties:\n      description: Properties for common pagination handling to be included in any wrapping object that needs pagination elements\n      properties:\n        next_page:\n          description: True if additional pages exist (page + 1) or False if this is the last page\n          type: string\n        page:\n          description: The page number returned (should match the requested page query string param)\n          type: string\n        returned_count:\n          description: The number of items sent in this response\n          type: integer\n      type: object\n    Policy:\n      properties:\n        comment:\n          type: string\n        id:\n          type: string\n        name:\n          type: string\n        rules:\n          items:\n            $ref: \"#/components/schemas/PolicyRule\"\n          type: array\n        version:\n          type: string\n      required:\n        - id\n        - version\n      type: object\n    PolicyBundle:\n      description: A bundle containing a set of policies, whitelists, and rules for mapping them to specific images\n      properties:\n        blacklisted_images:\n          description: List of mapping rules that define which images should always result in a STOP/FAIL policy result regardless of policy content or presence in whitelisted_images\n          items:\n            $ref: \"#/components/schemas/ImageSelectionRule\"\n          type: array\n        comment:\n          description: Description of the bundle, human readable\n          type: string\n        id:\n          description: Id of the bundle\n          type: string\n        mappings:\n          description: Mapping rules for defining which policy and whitelist(s) to apply to an image based on a match of the image tag or id. Evaluated in order.\n          items:\n            $ref: \"#/components/schemas/MappingRule\"\n          type: array\n        name:\n          description: Human readable name for the bundle\n          type: string\n        policies:\n          description: Policies which define the go/stop/warn status of an image using rule matches on image properties\n          items:\n            $ref: \"#/components/schemas/Policy\"\n          type: array\n        version:\n          description: Version id for this bundle format\n          type: string\n        whitelisted_images:\n          description: List of mapping rules that define which images should always be passed (unless also on the blacklist), regardless of policy result.\n          items:\n            $ref: \"#/components/schemas/ImageSelectionRule\"\n          type: array\n        whitelists:\n          description: Whitelists which define which policy matches to disregard explicitly in the final policy decision\n          items:\n            $ref: \"#/components/schemas/Whitelist\"\n          type: array\n      required:\n        - id\n        - version\n        - policies\n        - mappings\n      type: object\n    PolicyBundleList:\n      description: List of PolicyBundleRecord objects\n      items:\n        $ref: \"#/components/schemas/PolicyBundleRecord\"\n      type: array\n    PolicyBundleRecord:\n      description: A policy bundle plus some metadata\n      properties:\n        active:\n          description: True if the bundle is currently defined to be used automatically\n          type: boolean\n        created_at:\n          format: date-time\n          type: string\n        last_updated:\n          format: date-time\n          type: string\n        policyId:\n          description: The bundle's identifier\n          type: string\n        policy_source:\n          description: Source location of where the policy bundle originated\n          type: string\n        policybundle:\n          $ref: \"#/components/schemas/PolicyBundle\"\n        userId:\n          description: UserId of the user that owns the bundle\n          type: string\n      type: object\n    PolicyEvalNotification:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationBase\"\n        - description: The Notification Object definition for Policy Eval Notifications\n          properties:\n            data:\n              $ref: \"#/components/schemas/PolicyEvalNotificationData\"\n          type: object\n    PolicyEvalNotificationData:\n      allOf:\n        - $ref: \"#/components/schemas/BaseNotificationData\"\n        - properties:\n            notification_payload:\n              $ref: \"#/components/schemas/PolicyEvalNotificationPayload\"\n          type: object\n    PolicyEvalNotificationPayload:\n      allOf:\n        - $ref: \"#/components/schemas/GenericNotificationPayload\"\n        - properties:\n            annotations:\n              description: List of Corresponding Image Annotations\n              nullable: true\n              type: object\n            curr_eval:\n              description: The Current Policy Evaluation result\n              type: object\n            last_eval:\n              description: The Previous Policy Evaluation result\n              type: object\n          type: object\n    PolicyEvaluation:\n      description: Evaluation response object\n      type: object\n    PolicyEvaluationList:\n      description: Evaluation response object\n      items:\n        $ref: \"#/components/schemas/PolicyEvaluation\"\n      type: array\n    PolicyRule:\n      description: A rule that defines and decision value if the match is found true for a given image.\n      properties:\n        action:\n          enum:\n            - GO\n            - STOP\n            - WARN\n        gate:\n          type: string\n        id:\n          type: string\n        params:\n          items:\n            properties:\n              name:\n                type: string\n              value:\n                type: string\n            required:\n              - name\n              - value\n            type: object\n          type: array\n        trigger:\n          type: string\n      required:\n        - gate\n        - trigger\n        - action\n      type: object\n    RegexContentMatch:\n      description: Match of a named regex on a file\n      properties:\n        lines:\n          description: A list of line numbers in the file that matched the regex\n          items:\n            type: integer\n          type: array\n        name:\n          description: The name associated with the regular expression\n          type: string\n        regex:\n          description: The regular expression used for the match\n          type: string\n      type: object\n    RegistryConfiguration:\n      description: A registry entry describing the endpoint and credentials for a registry to pull images from\n      properties:\n        created_at:\n          format: date-time\n          type: string\n        last_upated:\n          format: date-time\n          type: string\n        registry:\n          description: hostname:port string for accessing the registry, as would be used in a docker pull operation\n          type: string\n        registry_name:\n          description: human readable name associated with registry record\n          type: string\n        registry_type:\n          description: Type of registry\n          type: string\n        registry_user:\n          description: Username portion of credential to use for this registry\n          type: string\n        registry_verify:\n          description: Use TLS/SSL verification for the registry URL\n          type: boolean\n        userId:\n          description: Engine user that owns this registry entry\n          type: string\n      type: object\n    RegistryConfigurationList:\n      description: List of registry configurations\n      items:\n        $ref: \"#/components/schemas/RegistryConfiguration\"\n      type: array\n    RegistryConfigurationRequest:\n      description: A registry record describing the endpoint and credentials for a registry\n      properties:\n        registry:\n          description: hostname:port string for accessing the registry, as would be used in a docker pull operation. May include some or all of a repository and wildcards (e.g. docker.io/library/* or gcr.io/myproject/myrepository)\n          type: string\n        registry_name:\n          description: human readable name associated with registry record\n          type: string\n        registry_pass:\n          description: Password portion of credential to use for this registry\n          type: string\n        registry_type:\n          description: Type of registry\n          type: string\n        registry_user:\n          description: Username portion of credential to use for this registry\n          type: string\n        registry_verify:\n          description: Use TLS/SSL verification for the registry URL\n          type: boolean\n      type: object\n    RegistryDigestSource:\n      description: An image reference using a digest in a registry, includes some extra tag and timestamp info in addition to the pull string to allow proper tag history reconstruction.\n      nullable: true\n      properties:\n        creation_timestamp_override:\n          description: Optional override of the image creation time to support proper tag history construction in cases of out-of-order analysis compared to registry history for the tag\n          format: date-time\n          type: string\n        dockerfile:\n          description: Base64 encoded content of the dockerfile used to build the image, if available.\n          pattern: ^[a-zA-Z0-9+/=]+$\n          type: string\n        pullstring:\n          description: A digest-based pullstring (e.g. docker.io/nginx@sha256:123abc)\n          type: string\n        tag:\n          description: A valid docker tag reference (e.g. docker.io/nginx:latest) that will be associated with the image but not used to pull the image.\n          type: string\n      required:\n        - pullstring\n        - tag\n      type: object\n    RegistryTagSource:\n      description: An image reference using a tag in a registry, this is the most common source type.\n      nullable: true\n      properties:\n        dockerfile:\n          description: Base64 encoded content of the dockerfile used to build the image, if available.\n          pattern: ^[a-zA-Z0-9+/=]+$\n          type: string\n        pullstring:\n          description: A docker pull string (e.g. docker.io/nginx:latest, or docker.io/nginx@sha256:abd) to retrieve the image\n          type: string\n      required:\n        - pullstring\n      type: object\n    RepositoryTagList:\n      description: List of discovered tags in a repository\n      items:\n        type: string\n      type: array\n    RetrievedFile:\n      description: The retrieved file entry including content (b64 encoded)\n      properties:\n        b64_content:\n          type: string\n        path:\n          type: string\n      type: object\n    RetrievedFileList:\n      description: Simple array of RetrievedFileMetadata objects\n      items:\n        $ref: \"#/components/schemas/RetrievedFile\"\n      type: array\n    SecretSearchList:\n      description: Simple array of RetrievedFileMetadata objects\n      items:\n        $ref: \"#/components/schemas/SecretSearchResult\"\n      type: array\n    SecretSearchResult:\n      description: The retrieved file entry including content (b64 encoded)\n      properties:\n        matches:\n          items:\n            $ref: \"#/components/schemas/RegexContentMatch\"\n          type: array\n        path:\n          type: string\n      type: object\n    Service:\n      description: A service status record\n      properties:\n        base_url:\n          description: The url to reach the service, including port as needed\n          type: string\n        hostid:\n          description: The unique id of the host on which the service is executing\n          type: string\n        service_detail:\n          $ref: \"#/components/schemas/StatusResponse\"\n        servicename:\n          description: Registered service name\n          type: string\n        status:\n          type: boolean\n        status_message:\n          description: A state indicating the condition of the service. Normal operation is 'registered'\n          type: string\n        version:\n          description: The version of the service as reported by the service implementation on registration\n          type: string\n      type: object\n    ServiceList:\n      description: A list of service objects\n      items:\n        $ref: \"#/components/schemas/Service\"\n      type: array\n    ServiceVersion:\n      description: Version information for a service\n      properties:\n        api:\n          description: Api Version string\n          properties:\n            version:\n              description: Semantic version of the api\n              type: string\n          type: object\n        db:\n          properties:\n            schema_version:\n              description: Semantic version of the db schema\n              type: string\n          type: object\n        service:\n          properties:\n            version:\n              description: Semantic Version string of the service implementation\n              type: string\n          type: object\n      type: object\n    StandaloneVulnerability:\n      description: A single vulnerability record in a single namespace, the unique key is the combination of the id and namespace\n      properties:\n        affected_packages:\n          description: The array of packages (typically packages) that are vulnerable-to or provide fixes-for this vulnerability\n          items:\n            $ref: \"#/components/schemas/PackageReference\"\n          type: array\n        description:\n          description: Description of the vulnerability if available\n          type: string\n        id:\n          description: Vulnerability identifier. May be CVE-X, RHSA-X, etc. Not necessarily unique across namespaces\n          type: string\n        link:\n          description: URL for the upstream CVE record in the reporting source (e.g. ubuntu security tracker)\n          type: string\n        namespace:\n          description: The namespace for the vulnerability record to avoid conflicts for the same id in different distros or sources (e.g. deb vs ubuntu for same CVE)\n          type: string\n        nvd_data:\n          $ref: \"#/components/schemas/NvdDataList\"\n        references:\n          description: List of references including\n          items:\n            $ref: \"#/components/schemas/VulnerabilityReference\"\n          type: array\n        severity:\n          description: Severity label specific to the namepsace\n          enum:\n            - Unknown\n            - Negligible\n            - Low\n            - Medium\n            - High\n            - Critical\n          type: string\n        vendor_data:\n          $ref: \"#/components/schemas/VendorDataList\"\n      type: object\n    StatusResponse:\n      description: System status response\n      properties:\n        available:\n          type: boolean\n        busy:\n          type: boolean\n        db_version:\n          type: string\n        detail:\n          type: object\n        message:\n          type: string\n        up:\n          type: boolean\n        version:\n          type: string\n      type: object\n    Subscription:\n      description: Subscription entry\n      properties:\n        active:\n          description: Is the subscription currently active\n          type: boolean\n        subscription_id:\n          description: the unique id for this subscription record\n          type: string\n        subscription_key:\n          description: The key value that the subscription references. E.g. a tag value or a repo name.\n          type: string\n        subscription_type:\n          description: The type of the subscription\n          type: string\n        subscription_value:\n          description: The value of the subscription target\n          nullable: true\n          type: string\n        userId:\n          description: The userId of the subscribed user\n          type: string\n      type: object\n    SubscriptionList:\n      description: List of subscriptions\n      items:\n        $ref: \"#/components/schemas/Subscription\"\n      type: array\n    SubscriptionRequest:\n      description: A subscription entry to add to the system\n      properties:\n        subscription_key:\n          type: string\n        subscription_type:\n          type: string\n        subscription_value:\n          nullable: true\n          type: string\n      type: object\n    SubscriptionUpdate:\n      description: A modification to a subscription entry to change its status or value\n      properties:\n        active:\n          description: Toggle the subscription processing on or off\n          type: boolean\n        subscription_value:\n          description: The new subscription value, e.g. the new tag to be subscribed to\n          nullable: true\n          type: string\n      type: object\n    SystemStatusResponse:\n      description: System status response\n      properties:\n        service_states:\n          $ref: \"#/components/schemas/ServiceList\"\n      type: object\n    TagEntry:\n      description: A docker-pullable tag value as well as deconstructed components\n      properties:\n        detected_at:\n          description: The timestamp at which the Anchore Engine detected this tag was mapped to the image digest. Does not necessarily indicate when the tag was actually pushed to the registry.\n          format: date-time\n          type: string\n        pullstring:\n          description: The pullable string for the tag. E.g. \"docker.io/library/node:latest\"\n          type: string\n        registry:\n          description: The registry hostname:port section of the pull string\n          type: string\n        repository:\n          description: The repository section of the pull string\n          type: string\n        tag:\n          description: The tag-only section of the pull string\n          type: string\n      type: object\n    TagUpdateNotification:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationBase\"\n        - description: The Notification Object definition for Tag Update Notifications\n          properties:\n            data:\n              $ref: \"#/components/schemas/TagUpdateNotificationData\"\n          type: object\n    TagUpdateNotificationData:\n      allOf:\n        - $ref: \"#/components/schemas/BaseNotificationData\"\n        - properties:\n            notification_payload:\n              $ref: \"#/components/schemas/TagUpdateNotificationPayload\"\n          type: object\n    TagUpdateNotificationPayload:\n      allOf:\n        - $ref: \"#/components/schemas/GenericNotificationPayload\"\n        - properties:\n            annotations:\n              description: List of Corresponding Image Annotations\n              nullable: true\n              type: object\n            curr_eval:\n              description: A list containing the current image digest\n              items: {}\n              type: array\n            last_eval:\n              description: A list containing the previous image digests\n              items: {}\n              type: array\n          type: object\n    TokenResponse:\n      properties:\n        token:\n          description: The token content\n          type: string\n      required:\n        - token\n      type: object\n    TriggerParamSpec:\n      properties:\n        description:\n          type: string\n        example:\n          description: An example value for the parameter (encoded as a string if the parameter is an object or list type)\n          nullable: true\n          type: string\n        name:\n          description: Parameter name as it appears in policy document\n          type: string\n        required:\n          description: Is this a required parameter or optional\n          type: boolean\n        state:\n          description: State of the trigger parameter\n          enum:\n            - active\n            - deprecated\n            - eol\n          type: string\n        superceded_by:\n          description: The name of another trigger that supercedes this on functionally if this is deprecated\n          nullable: true\n          type: string\n        validator:\n          description: If present, a definition for validation of input. Typically a jsonschema object that can be used to validate an input against.\n          type: object\n      type: object\n    TriggerSpec:\n      description: Definition of a trigger and its parameters\n      properties:\n        description:\n          description: Trigger description for what it tests and when it will fire during evaluation\n          type: string\n        name:\n          description: Name of the trigger as it would appear in a policy document\n          type: string\n        parameters:\n          description: The list of parameters that are valid for this trigger\n          items:\n            $ref: \"#/components/schemas/TriggerParamSpec\"\n          type: array\n        state:\n          description: State of the trigger\n          enum:\n            - active\n            - deprecated\n            - eol\n          type: string\n        superceded_by:\n          description: The name of another trigger that supercedes this on functionally if this is deprecated\n          nullable: true\n          type: string\n      type: object\n    User:\n      description: A username for authenticating with one or more types of credentials. User type defines the expected credentials allowed for the user. Native users have passwords, External users have no credential internally. Internal users are service/system users for inter-service communication.\n      properties:\n        created_at:\n          description: The timestampt the user record was created\n          format: date-time\n          type: string\n        last_updated:\n          description: The timestamp of the last update to this record\n          format: date-time\n          type: string\n        source:\n          description: If the user is external, this is the source that the user was initialized from. All other user types have this set to null\n          type: string\n        type:\n          description: The user's type\n          enum:\n            - native\n            - internal\n            - external\n          type: string\n        username:\n          description: The username to authenticate with\n          type: string\n      required:\n        - username\n      type: object\n    UserCreationRequest:\n      description: A payload for creating a new user, includes the username and password in a single request\n      properties:\n        password:\n          description: The initial password for the user, must be at least 6 characters, up to 128\n          pattern: .{6,128}$\n          type: string\n        username:\n          description: The username to create\n          pattern: ^[a-zA-Z0-9][a-zA-Z0-9@.!#$+-=^_`~;]{1,126}[a-zA-Z0-9]$\n          type: string\n      required:\n        - username\n        - password\n      type: object\n    UserList:\n      items:\n        $ref: \"#/components/schemas/User\"\n      type: array\n    VendorDataList:\n      description: List of Vendor Data objects\n      items:\n        $ref: \"#/components/schemas/VendorDataObject\"\n      type: array\n    VendorDataObject:\n      properties:\n        cvss_v2:\n          $ref: \"#/components/schemas/CVSSV2Scores\"\n        cvss_v3:\n          $ref: \"#/components/schemas/CVSSV3Scores\"\n        id:\n          description: Vendor Vulnerability ID\n          type: string\n      type: object\n    VulnDiffResult:\n      description: The results of the comparing two vulnerability records during an update\n      properties:\n        added:\n          items: {}\n          type: array\n        removed:\n          items: {}\n          type: array\n        updated:\n          items: {}\n          type: array\n      type: object\n    VulnUpdateNotification:\n      allOf:\n        - $ref: \"#/components/schemas/NotificationBase\"\n        - description: The Notification Object definition for Tag Update Notifications\n          properties:\n            data:\n              $ref: \"#/components/schemas/VulnUpdateNotificationData\"\n          type: object\n    VulnUpdateNotificationData:\n      allOf:\n        - $ref: \"#/components/schemas/BaseNotificationData\"\n        - properties:\n            notification_payload:\n              $ref: \"#/components/schemas/VulnUpdateNotificationPayload\"\n          type: object\n    VulnUpdateNotificationPayload:\n      allOf:\n        - $ref: \"#/components/schemas/GenericNotificationPayload\"\n        - properties:\n            annotations:\n              description: List of Corresponding Image Annotations\n              nullable: true\n              type: object\n            diff_vulnerability_result:\n              $ref: \"#/components/schemas/VulnDiffResult\"\n            imageDigest:\n              type: string\n          type: object\n    Vulnerability:\n      properties:\n        feed:\n          description: The name of the feed where vulnerability match was made\n          type: string\n        feed_group:\n          description: The name of the feed group where vulnerability match was made\n          type: string\n        fix:\n          description: The package containing a fix, if available\n          type: string\n        nvd_data:\n          $ref: \"#/components/schemas/NvdDataList\"\n        package:\n          description: The package name and version that are vulnerable in the image\n          type: string\n        package_cpe:\n          description: The CPE string (if applicable) describing the package to vulnerability match\n          type: string\n        package_name:\n          description: The name of the vulnerable package artifact\n          type: string\n        package_path:\n          description: The location (if applicable) of the vulnerable package in the container filesystem\n          type: string\n        package_type:\n          description: The type of vulnerable package\n          type: string\n        package_version:\n          description: The version of the vulnerable package artifact\n          type: string\n        severity:\n          description: The severity of the vulnerability\n          type: string\n        url:\n          description: The url for more information about the vulnerability\n          type: string\n        vendor_data:\n          $ref: \"#/components/schemas/VendorDataList\"\n        vuln:\n          description: The vulnerability identifier, such as CVE-2017-100, or RHSA-2017123\n          type: string\n        will_not_fix:\n          description: Whether a vendor will fix or not fix the vulnerability\n          type: string\n      type: object\n    VulnerabilityList:\n      description: List of Vulnerability objects\n      items:\n        $ref: \"#/components/schemas/Vulnerability\"\n      type: array\n    VulnerabilityReference:\n      description: An external link/reference\n      properties:\n        source:\n          description: The reference source\n          type: string\n        tags:\n          items:\n            type: string\n          type: array\n        url:\n          description: The reference url\n          type: string\n      type: object\n    VulnerabilityResponse:\n      description: envelope containing list of vulnerabilities\n      properties:\n        imageDigest:\n          type: string\n        vulnerabilities:\n          $ref: \"#/components/schemas/VulnerabilityList\"\n        vulnerability_type:\n          type: string\n      type: object\n    VulnerableImage:\n      description: A record of an image vulnerable to some known vulnerability. Includes vulnerable package information\n      properties:\n        affected_packages:\n          items:\n            $ref: \"#/components/schemas/VulnerablePackageReference\"\n          type: array\n        image:\n          $ref: \"#/components/schemas/ImageReference\"\n      type: object\n    VulnerablePackageReference:\n      description: A record of a software item which is vulnerable or carries a fix for a vulnerability\n      properties:\n        name:\n          description: Package name\n          type: string\n        namespace:\n          description: Vulnerability namespace of affected package\n          type: string\n        severity:\n          description: Severity of vulnerability affecting package\n          type: string\n        type:\n          description: Package type (e.g. package, rpm, deb, apk, jar, npm, gem, ...)\n          type: string\n        version:\n          description: A version for the package. If null, then references all versions\n          nullable: true\n          type: string\n      type: object\n    Whitelist:\n      description: A collection of whitelist items to match a policy evaluation against.\n      properties:\n        comment:\n          type: string\n        id:\n          type: string\n        items:\n          items:\n            $ref: \"#/components/schemas/WhitelistItem\"\n          type: array\n        name:\n          type: string\n        version:\n          type: string\n      required:\n        - id\n        - version\n      type: object\n    WhitelistItem:\n      description: Identifies a specific gate and trigger match from a policy against an image and indicates it should be ignored in final policy decisions\n      properties:\n        expires_on:\n          format: date-time\n          pattern: ^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:\\:\\d+)?[A-Z]?$\n          type: string\n        gate:\n          type: string\n        id:\n          type: string\n        trigger_id:\n          type: string\n      required:\n        - gate\n        - trigger_id\n      type: object\n",
			"canonicalURL": "/github.com/APIs-guru/openapi-directory@297a6aabc26a26ce6a88a81c8a82120430c15265/-/blob/APIs/anchore.io/0.1.19/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/APIs-guru/openapi-directory/blob/297a6aabc26a26ce6a88a81c8a82120430c15265/APIs/anchore.io/0.1.19/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/imports/images/{operation_id}/dockerfile\": post: operation \"import_image_dockerfile\": requestBody: parse content: at 1:106359: content type \"text/plain; utf-8\": mime: invalid media parameter"
}