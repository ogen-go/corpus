{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tonkeeper/tonapi"
		},
		"file": {
			"name": "tonapi.yaml",
			"size": 0,
			"path": "api/tonapi.yaml",
			"byteSize": 79257,
			"content": "openapi: 3.0.1\ninfo:\n  title: REST api to TON blockchain explorer\n  version: 0.0.1\n  description: Provide access to indexed TON blockchain\n  contact:\n    name: Support\n    email: contact@fslabs.org\nservers:\n  - url: \"https://tonapi.io\"\n  - url: \"https://testnet.tonapi.io\"\n  - url: \"http://localhost:8081\"\npaths:\n  /v1/system/time:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get current time\n      operationId: currentTime\n      tags:\n        - System\n      responses:\n        '200':\n          description: Current time\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - time\n                properties:\n                  time:\n                    type: integer\n                    example: 1234567890\n  /v1/blockchain/getBlock:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get block by id\n      operationId: getBlockById\n      tags:\n        - RawBlockchain\n      parameters:\n        - name: block_id\n          in: query\n          required: true\n          description: block id\n          schema:\n            type: string\n            example: (-1,4234234,-23423523535345353454)\n      responses:\n        '200':\n          description: \"block\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Block'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/blockchain/getAccount:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get raw account data\n      operationId: getAccount\n      tags:\n        - RawBlockchain\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"raw account data from blockchain\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Account'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/blockchain/validators:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get validators info list\n      operationId: getValidators\n      tags:\n        - RawBlockchain\n      responses:\n        '200':\n          description: \"validators info list from blockchain\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Validators'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/blockchain/getTransaction:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get transaction by hash\n      operationId: getTransaction\n      tags:\n        - RawBlockchain\n      parameters:\n        - name: hash\n          in: query\n          required: true\n          description: \"transaction hash in hex (without 0x) or base64url format\"\n          schema:\n            type: string\n            example: 97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621\n      responses:\n        '200':\n          description: \"transaction\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transaction'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/blockchain/getTransactions:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get transactions\n      operationId: getTransactions\n      tags:\n        - RawBlockchain\n      parameters:\n        - name: account\n          in: query\n          required: false\n          description: \"address in raw (hex without 0x) or base64url format\"\n          schema:\n            type: string\n            example: 0:BA60BFBD527C0CD2D70C6396630C50A498AF015B987ADAAD1D4A9E287F604536\n        - name: maxLt # not snake_case\n          in: query\n          description: \"omit this parameter to get last transactions\"\n          schema:\n            type: integer\n            format: int64\n            example: 25758317000002\n        - name: minLt # not snake_case\n          in: query\n          description: \"omit this parameter to get last transactions\"\n          schema:\n            type: integer\n            format: int64\n            example: 0\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            format: int32\n            maximum: 1000\n            default: 100\n            example: 100\n      responses:\n        '200':\n          description: \"transactions\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Transactions'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/wallet/findByPubkey:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Find all wallets by public key\n      operationId: findWalletsByPubKey\n      tags:\n        - Wallet\n      parameters:\n        - $ref: '#/components/parameters/publicKeyParameter'\n      responses:\n        '200':\n          description: \"wallets\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Wallets'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/wallet/getWalletPublicKey:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get public key by wallet address\n      operationId: getWalletPublicKey\n      tags:\n        - Wallet\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"publicKey\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PublicKey'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/subscription/getByWallet:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all subscriptions by wallet address\n      operationId: getSubscriptionsByWallet\n      tags:\n        - Subscription\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"subscriptions\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Subscriptions'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/trace/getAccountHistory:\n    get:\n      deprecated: true\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get traces for account\n      operationId: getTracesByAccount\n      tags:\n        - Trace\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            format: int32\n            maximum: 1000\n            default: 100\n            example: 100\n      responses:\n        200:\n          description: \"history\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Traces'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/trace/getTrace:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get the trace by trace ID or hash of any transaction in trace\n      operationId: getTrace\n      tags:\n        - Trace\n      parameters:\n        - name: hash\n          in: query\n          required: true\n          description: \"trace ID or transaction hash in hex (without 0x) or base64url format\"\n          schema:\n            type: string\n            example: 97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621\n      responses:\n        '200':\n          description: \"trace\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TraceMsg'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/trace/getAnnotatedTrace:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get the annotated trace by trace ID or hash of any transaction in trace\n      operationId: getAnnotatedTrace\n      tags:\n        - Trace\n      parameters:\n        - name: hash\n          in: query\n          required: true\n          description: \"trace ID or transaction hash in hex (without 0x) or base64url format\"\n          schema:\n            type: string\n            example: 97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621\n      responses:\n        '200':\n          description: \"annotated trace\"\n          content:\n            application/json:\n              schema:\n                type: object\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getCollections:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all NFT collections\n      operationId: getNftCollections\n      tags:\n        - NFT\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            format: int32\n            maximum: 25\n            default: 15\n            example: 15\n        - name: offset\n          in: query\n          schema:\n            type: integer\n            format: int32\n            default: 0\n            example: 10\n      responses:\n        '200':\n          description: \"nft collections\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftCollections'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getCollection:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get NFT collection by collection address\n      operationId: getNftCollection\n      tags:\n        - NFT\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"nft collection\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftCollection'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getItemsByCollectionAddress:\n    get:\n      deprecated: true\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all NFT items from collection by collection address\n      operationId: getNftItemsByCollectionAddress\n      tags:\n        - NFT\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"nft items\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftItems'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/searchItems:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Search NFT items using filters\n      operationId: searchNFTItems\n      tags:\n        - NFT\n      parameters:\n        - in: query\n          name: owner\n          required: false\n          description: \"address in raw (hex without 0x) or base64url format or word 'no' for items without owner\"\n          schema:\n            type: string\n            example: 0:BA60BFBD527C0CD2D70C6396630C50A498AF015B987ADAAD1D4A9E287F604536\n        - in: query\n          name: collection\n          required: false\n          description: \"address in raw (hex without 0x) or base64url format or word 'no' for items without collection\"\n          schema:\n            type: string\n            example: 0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\n        - in: query\n          name: include_on_sale\n          required: false\n          description: \"include nft items which are currently are on market\"\n          schema:\n            type: boolean\n            example: true\n            default: false\n        - in: query\n          name: limit\n          required: true\n          description: \"maximum qty of items\"\n          schema:\n            type: integer\n            example: 1000\n            maximum: 1000\n        - in: query\n          name: offset\n          required: true\n          description: \"offset for pagination\"\n          schema:\n            type: integer\n            example: 0\n      responses:\n        '200':\n          description: \"nft items\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftItemsRepr'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getItems:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get NFT items by addresses\n      operationId: getNFTItems\n      tags:\n        - NFT\n      parameters:\n        - in: query\n          name: addresses\n          required: true\n          explode: false\n          description: \"NFT items addresses in raw (hex without 0x) or base64url format\"\n          schema:\n            type: array\n            items:\n              type: string\n              example: \"0:a0a659a32079f449edcd05fcdef8cc4d98f45557f25d66555fe2da1f47cb7d9a,0:702b27d8635f0a169c9a1abb341d95a2a5aad71e90d50271589e59290b6c7179\"\n      responses:\n        '200':\n          description: \"nft items\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftItemsRepr'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getItemsByOwnerAddress:\n    get:\n      deprecated: true\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all NFT items by owner address\n      operationId: getNftItemsByOwnerAddress\n      tags:\n        - NFT\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"nft items\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftItems'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getNftForSale:\n    get:\n      deprecated: true\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get NFT items for sale\n      operationId: getNftForSale\n      tags:\n        - NFT\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"nft sales\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftSalesResponse'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/nft/getItem:\n    get:\n      deprecated: true\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get NFT item by its address\n      operationId: getNftItemByAddress\n      tags:\n        - NFT\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"nft item\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NftItem'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/jetton/getBalances:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all Jettons balances by owner address\n      operationId: getJettonsBalances\n      tags:\n        - Jetton\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"jettons balances\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JettonsBalances'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/jetton/getInfo:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get jetton metadata by jetton master address\n      operationId: getJettonInfo\n      tags:\n        - Jetton\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"jetton info\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/JettonInfo'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/jetton/getHistory:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all Jetton transfers for account. EXPERIMENTAL METHOD!!!\n      operationId: getJettonHistory\n      tags:\n        - Jetton\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n        - in: query\n          name: jetton_master\n          required: false\n          description: \"address in raw (hex without 0x) or base64url format\"\n          schema:\n            type: string\n            example: 0:BA60BFBD527C0CD2D70C6396630C50A498AF015B987ADAAD1D4A9E287F604536\n        - name: limit\n          in: query\n          required: true\n          schema:\n            type: integer\n            example: 1000\n            maximum: 1000\n      responses:\n        '200':\n          description: \"history\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountEvents'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/event/getAccountEvents:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get events for account\n      operationId: accountEvents\n      tags:\n        - Event\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n        - name: beforeLt # not snake_case\n          in: query\n          description: \"omit this parameter to get last events\"\n          required: false\n          schema:\n            type: integer\n            format: int64\n            example: 25758317000002\n        - name: limit\n          in: query\n          required: true\n          schema:\n            type: integer\n            example: 1000\n            maximum: 1000\n        - name: startDate\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n            example: 1668436763\n        - name: endDate\n          in: query\n          required: false\n          schema:\n            type: integer\n            format: int64\n            example: 1668436763\n      responses:\n        '200':\n          description: \"events\"\n          content:\n            application/json:\n              schema:\n                type: object\n                required:\n                  - events\n                properties:\n                  events:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/AccountEvent'\n                  next_from:\n                    type: integer\n                    format: int64\n                    example: 23814011000000\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/event/getEvent:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get the event by event ID or hash of any transaction in trace\n      operationId: getEvent\n      tags:\n        - Event\n      parameters:\n        - name: event_id\n          in: query\n          required: true\n          description: \"event ID or transaction hash in hex (without 0x) or base64url format\"\n          schema:\n            type: string\n            example: 97264395BD65A255A429B11326C84128B7D70FFED7949ABAE3036D506BA38621\n      responses:\n        '200':\n          description: \"event\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Event'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/send/boc:\n    post:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Send message to blockchain\n      operationId: sendBoc\n      tags:\n        - Send\n      requestBody:\n        $ref: \"#/components/requestBodies/Boc\"\n      responses:\n        '200':\n          description: \"success\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/account/getInfo:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get info about account\n      operationId: getAccountInfo\n      tags:\n        - Account\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"account info\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountRepr'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/account/getBulkInfo:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get info about few accounts account by one request\n      operationId: getBulkAccountInfo\n      tags:\n        - Account\n      parameters:\n        - in: query\n          name: addresses\n          required: true\n          explode: false\n          description: \"accounts addresses in raw (hex without 0x) or base64url format\"\n          schema:\n            type: array\n            items:\n              type: string\n              example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf,0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n      responses:\n        '200':\n          description: \"account info\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountReprs'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/send/estimateTx:\n    post:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Estimate fees for message\n      operationId: estimateTx\n      tags:\n        - Send\n      requestBody:\n        $ref: \"#/components/requestBodies/Boc\"\n      responses:\n        '200':\n          description: \"event\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccountEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/dns/resolve:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: DNS resolve for domain name\n      operationId: dnsResolve\n      tags:\n        - DNS\n      parameters:\n        - $ref: '#/components/parameters/domainNameParameter'\n      responses:\n        '200':\n          description: \"dns record\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DnsRecord'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/dns/backresolve:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: DNS back resolve for wallet address\n      operationId: dnsBackResolve\n      tags:\n        - DNS\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"domains for wallet\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomainNames'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/dns/getInfo:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: domain info\n      operationId: getDomainInfo\n      tags:\n        - DNS\n      parameters:\n        - $ref: '#/components/parameters/domainNameParameter'\n      responses:\n        '200':\n          description: \"domain info\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomainInfo'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/offchain/putWalletConfig:\n    post:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Send backup file to storage\n      operationId: putWalletConfig\n      tags:\n        - Backup\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: |\n                \"TL-scheme: backup.send sign:int512 primaryPublicKey:int256 voucher:backup.Voucher request_expire:int64 payload:bytes = backup.Send\" \\\n                \"TL-scheme: backup.voucher sign:int512 expire_at:int64 publicKey:int256 = backup.Voucher\"\n      responses:\n        '200':\n          description: \"success\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/offchain/deleteWalletConfig:\n    post:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Delete backup from storage\n      operationId: deleteWalletConfig\n      tags:\n        - Backup\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: |\n                \"TL-scheme: backup.delete sign:int512 primaryPublicKey:int256 voucher:backup.Voucher request_expire:int64 = backup.Delete\" \\\n                \"TL-scheme: backup.voucher sign:int512 expire_at:int64 publicKey:int256 = backup.Voucher\"\n      responses:\n        '200':\n          description: \"success\"\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/offchain/getWalletConfig:\n    post:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get backup from storage\n      operationId: getWalletConfig\n      tags:\n        - Backup\n      requestBody:\n        required: true\n        content:\n          application/octet-stream:\n            schema:\n              type: string\n              format: binary\n              description: |\n                \"TL-scheme: backup.get sign:int512 primaryPublicKey:int256 voucher:backup.Voucher request_expire:int64 = backup.Get\" \\\n                \"TL-scheme: backup.voucher sign:int512 expire_at:int64 publicKey:int256 = backup.Voucher\"\n      responses:\n        '200':\n          description: \"backup file\"\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n                description: \"TL-scheme: backup.getResponse payload:bytes = backup.GetResponse\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/auction/getCurrent:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get all auctions\n      operationId: getAllAuctions\n      tags:\n        - Domain Auctions\n      parameters:\n        - $ref: '#/components/parameters/domainFilterParameters'\n      responses:\n        '200':\n          description: \"auctions\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Auctions'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/auction/getBids:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get domain bids\n      operationId: getDomainBids\n      tags:\n        - Domain Auctions\n      parameters:\n        - $ref: '#/components/parameters/domainBidsParameters'\n      responses:\n        '200':\n          description: \"domain bids\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomainBids'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/wallet/getSeqno:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get last seqno for wallet\n      operationId: getWalletSeqno\n      tags:\n        - Wallet\n      parameters:\n        - $ref: '#/components/parameters/accountAddressParameter'\n      responses:\n        '200':\n          description: \"nft items\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Seqno'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/dns/domains/search:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Search domains by the first letters\n      operationId: searchDomains\n      tags:\n        - DNS\n      parameters:\n        - name: domain\n          in: query\n          required: true\n          schema:\n              type: string\n              example: wallet.ton\n      responses:\n        '200':\n          description: \"domains\"\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DomainNames'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/stream/sse/test/event:\n    get:\n      description: Test new_transaction event\n      operationId: getNewTransactionTestEvent\n      tags:\n        - sse\n      responses:\n        '200':\n          description: \"New transaction\"\n          content:\n            text/event-stream:\n              schema:\n                $ref: '#/components/schemas/NewTransactionEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/stream/sse/account:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get new transactions from accounts\n      operationId: getNewTransactionEvent\n      parameters:\n        - $ref: '#/components/parameters/accountsParameter'\n      tags:\n        - sse\n      responses:\n        '200':\n          description: \"Account has new transaction\"\n          content:\n            text/event-stream:\n              schema:\n                $ref: '#/components/schemas/NewTransactionEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/stream/sse/jetton_transfer:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get check jetton transfer\n      operationId: getJettonTransferEvent\n      parameters:\n        - $ref: '#/components/parameters/jettonsParameter'\n      tags:\n        - sse\n      responses:\n        '200':\n          description: \"Jetton has been transfer\"\n          content:\n            text/event-stream:\n              schema:\n                $ref: '#/components/schemas/JettonTransferEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\n  /v1/stream/sse/nft_transfer:\n    get:\n      security:\n        - JWTAuth: [ \"common\" ]\n      description: Get check nft transfer\n      operationId: getNFTTransferEvent\n      parameters:\n        - $ref: '#/components/parameters/nftsParameter'\n      tags:\n        - sse\n      responses:\n        '200':\n          description: \"NFT has been transfer\"\n          content:\n            text/event-stream:\n              schema:\n                $ref: '#/components/schemas/NFTTransferEvent'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n        '404':\n          $ref: '#/components/responses/NotFound'\n        '500':\n          $ref: '#/components/responses/InternalError'\ncomponents:\n  parameters:\n    domainNameParameter:\n      in: query\n      name: name\n      required: true\n      description: \"domain name with .ton or .t.me\"\n      schema:\n        type: string\n        example: wallet.ton\n    accountAddressParameter:\n      in: query\n      name: account\n      required: true\n      description: \"address in raw (hex without 0x) or base64url format\"\n      schema:\n        type: string\n        example: 0:BA60BFBD527C0CD2D70C6396630C50A498AF015B987ADAAD1D4A9E287F604536\n    domainBidsParameters:\n      in: query\n      name: domain\n      required: true\n      description: \"domain names with .ton\"\n      schema:\n        type: string\n        example: wallet.ton\n    domainFilterParameters:\n      in: query\n      name: tld\n      required: false\n      description: \"domain filter for current auctions \\\"ton\\\" or \\\"t.me\\\"\"\n      schema:\n        type: string\n        example: ton\n    publicKeyParameter:\n      in: query\n      name: public_key\n      required: true\n      description: \"public key in hex (without 0x) format\"\n      schema:\n        type: string\n        example: 6DDD647FD1D4A79C83E0149DFF9EB26A3EBF2DB6517A4F79E43098912E6A6802\n    accountsParameter:\n      in: query\n      name: accounts\n      required: true\n      description: \"accounts for check new transactions (separate by comma) or use 'all' for subscribe to all accounts\"\n      schema:\n        type: string\n        example: 0:a6830e9a3453771efeb588cfb33216a6b102438fa25d1349d5976d4514b5d693,\n        enum:\n          - all\n    nftsParameter:\n      in: query\n      name: nfts\n      required: true\n      description: \"nfts for check transfer (separate by comma)\"\n      schema:\n        type: string\n        example: 0:a6830e9a3453771efeb588cfb33216a6b102438fa25d1349d5976d4514b5d693,\n    jettonsParameter:\n      in: query\n      name: jettons\n      required: true\n      description: \"jettons for check transfer (separate by comma)\"\n      schema:\n        type: string\n        example: 0:a6830e9a3453771efeb588cfb33216a6b102438fa25d1349d5976d4514b5d693,\n  requestBodies:\n    Boc:\n      description: \"bag-of-cells serialized to base64\"\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - boc\n            properties:\n              boc:\n                type: string\n                example: \"a2Fza2RqZ2xrZHNqZ2xrZ2RzamFnbGtoc2Fka2poZ2pzaGQsamduc2pnbi5qYmZz\"\n  schemas:\n    Ok:\n      type: object\n      required:\n        - ok\n      properties:\n        ok:\n          type: boolean\n          example: true\n    Error:\n      type: object\n      required:\n        - error\n      properties:\n        error:\n          type: string\n          example: error description\n    AccountAddress:\n      type: object\n      required:\n        - address\n        - is_scam\n      properties:\n        address:\n          type: string\n          example: \"0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\"\n        name:\n          type: string\n          example: \"Ton foundation\"\n        is_scam:\n          type: boolean\n          example: true\n        icon:\n          type: string\n          example: \"https://ton.org/logo.png\"\n    Block:\n      type: object\n      required:\n        - seqno\n        - workchain_id\n        - root_hash\n        - file_hash\n        - shard\n        - start_lt\n        - end_lt\n      properties:\n        seqno:\n          type: integer\n          example: 21734019\n          format: int32\n        workchain_id:\n          type: integer\n          example: 0\n          format: int32\n        root_hash:\n          type: string\n          example: 131D0C65055F04E9C19D687B51BC70F952FD9CA6F02C2801D3B89964A779DF85\n        file_hash:\n          type: string\n          example: A6A0BD6608672B11B79538A50B2204E748305C12AA0DED9C16CF0006CE3AF8DB\n        shard:\n          type: string\n          example: 8000000000000000\n        start_lt:\n          type: integer\n          format: int64\n          example: 23814011000000\n        end_lt:\n          type: integer\n          format: int64\n          example: 23814011000001\n    Account:\n      type: object\n      required:\n        - status\n        - balance\n      properties:\n        balance:\n          type: integer\n          format: int64\n          example: 123456789\n        code:\n          type: string\n          example: b5ee9c72410104010087000114ff00f4a413f4a0f2c80b0102012002030002d200dfa5ffff76a268698fe9ffe8e42c5267858f90e785ffe4f6aa6467c444ffb365ffc10802faf0807d014035e7a064b87d804077e7857fc10803dfd2407d014035e7a064b86467cd8903a32b9ba4410803ade68afd014035e7a045ea432b6363796103bb7b9363210c678b64b87d807d8040c249b3e4\n        data:\n          type: string\n          example: b5ee9c7241010101002600004811fd096c0000000000000000000000000000000000000000000000000000000000000000cb78264d\n        status:\n          type: string\n          example: active\n    AccountReprs:\n      type: object\n      required:\n        - accounts\n      properties:\n        accounts:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccountRepr'\n    AccountRepr:\n      type: object\n      required:\n        - status\n        - interfaces\n        - balance\n        - address\n        - is_scam\n        - last_update\n        - memo_required\n      properties:\n        balance:\n          type: integer\n          format: int64\n          example: 123456789\n        status:\n          type: string\n          example: active\n        interfaces:\n          type: array\n          items:\n            type: string\n            example: nft_sale\n        address:\n          type: object\n          required:\n            - raw\n            - bounceable\n            - non_bounceable\n          properties:\n            raw:\n              type: string\n              example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n            bounceable:\n              type: string\n              example: \"EQDaaxtmY6Dk0YzIV0zNnbUpbjZ92TJHBvO72esc0srwv8K2\"\n            non_bounceable:\n              type: string\n              example: \"UQDaaxtmY6Dk0YzIV0zNnbUpbjZ92TJHBvO72esc0srwv59z\"\n        name:\n          type: string\n          example: \"Ton foundation\"\n        is_scam:\n          type: boolean\n          example: true\n        icon:\n          type: string\n          example: \"https://ton.org/logo.png\"\n        memo_required:\n          type: boolean\n          example: true\n        last_update:\n          type: integer\n          format: int64\n          example: 123456789\n    Wallet:\n      type: object\n      required:\n        - address\n        - status\n        - balance\n        - interfaces\n      properties:\n        address:\n          type: string\n          example: 0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\n        status:\n          type: string\n          example: active\n        balance:\n          type: integer\n          format: int64\n          example: 123456789\n        interfaces:\n          type: array\n          items:\n            type: string\n            example: wallet_v4R2\n    Wallets:\n      type: object\n      required:\n        - wallets\n      properties:\n        wallets:\n          type: array\n          items:\n            $ref: '#/components/schemas/Wallet'\n    Validator:\n      type: object\n      required:\n        - address\n        - adnlAddress\n        - stake\n        - maxFactor\n      properties:\n        address:\n          type: string\n          example: 0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\n        adnlAddress:\n          type: string\n          example: 10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\n        stake:\n          type: integer\n          format: int64\n          example: 123456789\n        maxFactor:\n          type: integer\n          format: int64\n          example: 123456789\n\n    Validators:\n      type: object\n      required:\n        - electAt\n        - electClose\n        - minStake\n        - totalStake\n        - validators\n      properties:\n        electAt:\n          type: integer\n          format: int64\n          example: 123456789\n        electClose:\n          type: integer\n          format: int64\n          example: 123456789\n        minStake:\n          type: integer\n          format: int64\n          example: 123456789\n        totalStake:\n          type: integer\n          format: int64\n          example: 123456789\n        validators:\n          type: array\n          items:\n            $ref: '#/components/schemas/Validator'\n    Subscription:\n      type: object\n      required:\n        - address\n        - wallet_address\n        - beneficiary_address\n        - amount\n        - period\n        - start_time\n        - timeout\n        - last_payment_time\n        - last_request_time\n        - subscription_id\n        - failed_attempts\n      properties:\n        address:\n          type: string\n          example: 0:dea8f638b789172ce36d10a20318125e52c649aa84893cd77858224fe2b9b0ee\n        wallet_address:\n          type: string\n          example: 0:567DE86AF2B6A557D7085807CF7C26338124987A5179344F0D0FA2657EB710F1\n        beneficiary_address:\n          type: string\n          example: 0:c704dadfabac88eab58e340de03080df81ff76636431f48624ad6e26fb2da0a4\n        amount:\n          type: integer\n          format: int64\n          example: 1000000000\n        period:\n          type: integer\n          format: int64\n          example: 2592000\n        start_time:\n          type: integer\n          format: int64\n          example: 1653996832\n        timeout:\n          type: integer\n          format: int64\n          example: 10800\n        last_payment_time:\n          type: integer\n          format: int64\n          example: 1653996834\n        last_request_time:\n          type: integer\n          format: int64\n          example: 0\n        subscription_id:\n          type: integer\n          format: int64\n          example: 217477\n        failed_attempts:\n          type: integer\n          format: int32\n          example: 0\n    Subscriptions:\n      type: object\n      required:\n        - subscriptions\n      properties:\n        subscriptions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Subscription'\n    Transaction:\n      type: object\n      required:\n        - hash\n        - fee\n        - storage_fee\n        - other_fee\n        - lt\n        - utime\n        - account\n        - data\n        - out_msgs\n      properties:\n        hash:\n          type: string\n          example: \"55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122\"\n        fee:\n          type: integer\n          format: int64\n          example: 5681002\n        storage_fee:\n          type: integer\n          format: int64\n          example: 2\n        other_fee:\n          type: integer\n          format: int64\n          example: 5681000\n        lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        utime:\n          type: integer\n          format: int64\n          example: 1645544908\n        account:\n          $ref: '#/components/schemas/AccountAddress'\n        data:\n          type: string\n          example: B5EE9C7241020A010002850003B5710C1073837B93FDAAD594284CE8B8EFF7B9CF25427440\n        in_msg:\n          $ref: '#/components/schemas/Message'\n        out_msgs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Message'\n    Transactions:\n      type: object\n      required:\n        - transactions\n      properties:\n        transactions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Transaction'\n    Message:\n      type: object\n      required:\n        - fwd_fee\n        - ihr_fee\n        - created_lt\n        - value\n        - msg_data\n      properties:\n        fwd_fee:\n          type: integer\n          format: int64\n          example: 5681002\n        ihr_fee:\n          type: integer\n          format: int64\n          example: 5681002\n        created_lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        value:\n          type: integer\n          format: int64\n          example: 60000000\n        destination:\n          $ref: '#/components/schemas/AccountAddress'\n        source:\n          $ref: '#/components/schemas/AccountAddress'\n        msg_data:\n          example: { }\n    Trace:\n      type: object\n      required:\n        - id\n        - utime\n      properties:\n        id:\n          type: string\n          example: 55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122\n        utime:\n          type: integer\n          format: int64\n          example: 1645544908\n    Traces:\n      type: object\n      required:\n        - traces\n      properties:\n        traces:\n          type: array\n          items:\n            $ref: '#/components/schemas/Trace'\n    TxAnnotation:\n      type: object\n      required:\n        - name\n        - data\n      properties:\n        name:\n          type: string\n          example: nft_transfer\n        data:\n          description: annotation data struct\n          example: { }\n    TraceMsg:\n      type: object\n      required:\n        - fwd_fee\n        - ihr_fee\n        - created_lt\n        - value\n        - destination\n        - source\n      properties:\n        fwd_fee:\n          type: integer\n          format: int64\n          example: 5681002\n        ihr_fee:\n          type: integer\n          format: int64\n          example: 5681002\n        created_lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        value:\n          type: integer\n          format: int64\n          example: 60000000\n        destination:\n          $ref: '#/components/schemas/AccountAddress'\n        source:\n          $ref: '#/components/schemas/AccountAddress'\n        comment:\n          type: string\n          example: \"Hi! This is your salary. \\nFrom accounting with love.\"\n        tx:\n          $ref: '#/components/schemas/TraceTX'\n    TraceTX:\n      type: object\n      required:\n        - out_msgs\n        - hash\n        - fee\n        - storage_fee\n        - other_fee\n        - lt\n        - utime\n        - block_id\n        - annotations\n      properties:\n        out_msgs:\n          type: array\n          items:\n            $ref: '#/components/schemas/TraceMsg'\n        hash:\n          type: string\n          example: \"55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122\"\n        fee:\n          type: integer\n          format: int64\n          example: 5681002\n        storage_fee:\n          type: integer\n          format: int64\n          example: 2\n        other_fee:\n          type: integer\n          format: int64\n          example: 5681000\n        lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        utime:\n          type: integer\n          format: int64\n          example: 1645544908\n        block_id:\n          type: string\n          example: (-1,4234234,-23423523535345353454)\n        annotations:\n          type: array\n          items:\n            $ref: '#/components/schemas/TxAnnotation'\n    NftCollection:\n      type: object\n      required:\n        - address\n        - next_item_index\n        - raw_collection_content\n      properties:\n        address:\n          type: string\n          example: 0:FD595F36B4C1535BEC8461490D38EBB9AE3C38DD6ACE17CA63ABE2C6608BE159\n        next_item_index:\n          type: integer\n          format: int64\n          example: 1\n        owner:\n          $ref: '#/components/schemas/AccountAddress'\n        raw_collection_content:\n          type: string\n          example: 697066733a2f2f516d596e437861746f5178433571584b79773971656768415853626f3544644e6a32387631487669437a47355359\n        metadata:\n          example: { }\n    NftCollections:\n      type: object\n      required:\n        - nft_collections\n      properties:\n        nft_collections:\n          type: array\n          items:\n            $ref: '#/components/schemas/NftCollection'\n    NftItem:\n      type: object\n      required:\n        - address\n        - index\n        - init\n        - raw_individual_content\n        - verified\n      properties:\n        address:\n          type: string\n          example: 0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B\n        index:\n          type: integer\n          format: int64\n          example: 58\n        owner:\n          $ref: '#/components/schemas/AccountAddress'\n        collection_address:\n          type: string\n          example: 0:4EE035F09C23A15F2AA3ACC58D13FD27B9A0ED265238B654DEF38F851F0A291F\n        init:\n          type: boolean\n          example: true\n        raw_individual_content:\n          type: string\n          example: 35382E6A736F6E\n        verified:\n          type: boolean\n          example: true\n        metadata:\n          example: { }\n    NftItemRepr:\n      type: object\n      required:\n        - address\n        - index\n        - verified\n        - metadata\n        - approved_by\n      properties:\n        address:\n          type: string\n          example: 0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B\n        index:\n          type: integer\n          format: int64\n          example: 58\n        owner:\n          $ref: '#/components/schemas/AccountAddress'\n        collection_address:\n          deprecated: true\n          type: string\n          description: deprecated\n        collection:\n          type: object\n          required:\n            - address\n            - name\n          properties:\n            address:\n              type: string\n              example: 0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B\n            name:\n              type: string\n              example: TON Diamonds\n        verified:\n          type: boolean\n          example: true\n        metadata:\n          example: { }\n        sale:\n          $ref: '#/components/schemas/Sale'\n        previews:\n          type: array\n          items:\n            $ref: '#/components/schemas/ImagePreview'\n        dns:\n          type: string\n          example: crypto.ton\n        approved_by:\n          type: array\n          items:\n            type: string\n            example: GetGems\n    NftItems:\n      type: object\n      required:\n        - nft_items\n      properties:\n        nft_items:\n          type: array\n          items:\n            $ref: '#/components/schemas/NftItem'\n    NftItemsRepr:\n      type: object\n      required:\n        - nft_items\n      properties:\n        nft_items:\n          type: array\n          items:\n            $ref: '#/components/schemas/NftItemRepr'\n    ImagePreview:\n      type: object\n      required:\n        - resolution\n        - url\n      properties:\n        resolution:\n          type: string\n          example: \"100x100\"\n        url:\n          type: string\n          example: \"https://site.com/pic1.jpg\"\n    Sale:\n      type: object\n      required:\n        - address\n        - market\n        - price\n      properties:\n        address:\n          type: string\n          example: 0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\n        market:\n          $ref: '#/components/schemas/AccountAddress'\n        owner:\n          $ref: '#/components/schemas/AccountAddress'\n        price:\n          $ref: '#/components/schemas/Price'\n    Price:\n      type: object\n      required:\n        - value\n        - token_name\n      properties:\n        value:\n          type: string\n          example: \"123000000000\"\n        token_name:\n          type: string\n          example: \"TON\"\n    NftForSale:\n      type: object\n      required:\n        - sale\n        - sale_contract\n        - nft\n      properties:\n        sale:\n          $ref: '#/components/schemas/Sale'\n        sale_contract:\n          type: string\n          description: deprecated\n          example: deprecated\n        nft:\n          $ref: '#/components/schemas/NftItem'\n    NftSalesResponse:\n      type: object\n      properties:\n        getgems:\n          type: array\n          items:\n            $ref: '#/components/schemas/NftForSale'\n        disintar:\n          type: array\n          items:\n            $ref: '#/components/schemas/NftForSale'\n        other:\n          type: array\n          items:\n            $ref: '#/components/schemas/NftForSale'\n    JettonBalance:\n      type: object\n      required:\n        - balance\n        - jetton_address\n        - wallet_address\n      properties:\n        balance:\n          type: string\n          example: 597968399\n        jetton_address:\n          type: string\n          example: 0:6553FB4A2128297A978C153F6DDF14C37A2566A36E5D5BFE2F50E97A8C877F04\n        wallet_address:\n          $ref: '#/components/schemas/AccountAddress'\n        metadata:\n          $ref: '#/components/schemas/Jetton'\n    JettonsBalances:\n      type: object\n      required:\n        - balances\n      properties:\n        balances:\n          type: array\n          items:\n            $ref: '#/components/schemas/JettonBalance'\n    JettonInfo:\n      type: object\n      required:\n        - mintable\n        - total_supply\n        - metadata\n      properties:\n        mintable:\n          type: boolean\n          example: true\n        total_supply:\n          type: string\n          example: 311500000000000\n        metadata:\n          $ref: '#/components/schemas/JettonMetadata'\n    Jetton:\n      type: object\n      required:\n        - address\n        - name\n        - symbol\n        - decimals\n      properties:\n        address:\n          type: string\n          example: 0:0BB5A9F69043EEBDDA5AD2E946EB953242BD8F603FE795D90698CEEC6BFC60A0\n        name:\n          type: string\n          example: Wrapped TON\n        symbol:\n          type: string\n          example: WTON\n        decimals:\n          type: integer\n          example: 9\n        image:\n          type: string\n          example: \"https://cache.tonapi.io/images/jetton.jpg\"\n    JettonMetadata:\n      type: object\n      required:\n        - address\n        - name\n        - symbol\n        - decimals\n      properties:\n        address:\n          type: string\n          example: 0:0BB5A9F69043EEBDDA5AD2E946EB953242BD8F603FE795D90698CEEC6BFC60A0\n        name:\n          type: string\n          example: Wrapped TON\n        symbol:\n          type: string\n          example: WTON\n        decimals:\n          type: integer\n          example: 9\n        image:\n          type: string\n          example: \"https://cache.tonapi.io/images/jetton.jpg\"\n        description:\n          type: string\n          example: Wrapped Toncoin\n        social:\n          type: array\n          items:\n            type: string\n            example: [ \"https://t.me/durov_coin\", \"https://twitter.com/durov_coin\" ]\n        websites:\n          type: array\n          items:\n            type: string\n            example: [ \"https://durov.coin\", \"ton://durov-coin.ton\" ]\n        catalogs:\n          type: array\n          items:\n            type: string\n            example: [ \"https://coinmarketcap.com/currencies/drv/\", \"https://www.coingecko.com/en/coins/durov\" ]\n    JettonSimpleTransfer:\n      type: object\n      required:\n        - type\n        - amount\n        - jetton\n      properties:\n        type:\n          type: string\n          example: income\n          enum:\n            - income\n            - outcome\n        amount:\n          type: string\n          example: 100500\n        jetton:\n          $ref: '#/components/schemas/Jetton'\n    AccountEvents:\n      type: object\n      required:\n        - events\n      properties:\n        events:\n          type: array\n          items:\n            $ref: '#/components/schemas/AccountEvent'\n        next_from:\n          type: integer\n          format: int64\n          example: 25713146000001\n    AccountEvent:\n      type: object\n      required:\n        - event_id\n        - timestamp\n        - actions\n        - fee\n        - account\n        - is_scam\n        - lt\n        - in_progress\n      properties:\n        event_id:\n          type: string\n          example: e8b0e3fee4a26bd2317ac1f9952fcdc87dc08fdb617656b5202416323337372e\n        account:\n          $ref: '#/components/schemas/AccountAddress'\n        timestamp:\n          type: integer\n          format: int64\n          example: 1234567890\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n        fee:\n          $ref: '#/components/schemas/Fee'\n        is_scam:\n          type: boolean\n          description: scam\n          example: false\n        lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        in_progress:\n          type: boolean\n          example: false\n          description: Event is not finished yet. Transactions still happening\n    Event:\n      type: object\n      required:\n        - event_id\n        - timestamp\n        - actions\n        - fees\n        - is_scam\n        - lt\n        - in_progress\n      properties:\n        event_id:\n          type: string\n          example: e8b0e3fee4a26bd2317ac1f9952fcdc87dc08fdb617656b5202416323337372e\n        timestamp:\n          type: integer\n          format: int64\n          example: 1234567890\n        actions:\n          type: array\n          items:\n            $ref: '#/components/schemas/Action'\n        fees:\n          type: array\n          items:\n            $ref: '#/components/schemas/Fee'\n        is_scam:\n          type: boolean\n          description: scam\n          example: false\n        lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        in_progress:\n          type: boolean\n          example: false\n          description: Event is not finished yet. Transactions still happening\n    Action:\n      type: object\n      required:\n        - type\n        - status\n        - simple_preview\n      properties:\n        type:\n          type: string\n          example: \"TonTransfer\"\n          enum:\n            - TonTransfer\n            - JettonTransfer\n            - NftItemTransfer\n            - ContractDeploy\n            - Subscribe\n            - UnSubscribe\n            - AuctionBid\n            - NftPurchase\n            - Unknown\n        status:\n          type: string\n          example: \"ok\"\n          enum:\n            - ok\n            - failed\n            - pending\n        TonTransfer:\n          $ref: '#/components/schemas/TonTransferAction'\n        ContractDeploy:\n          $ref: '#/components/schemas/ContractDeployAction'\n        JettonTransfer:\n          $ref: '#/components/schemas/JettonTransferAction'\n        NftItemTransfer:\n          $ref: '#/components/schemas/NftItemTransferAction'\n        Subscribe:\n          $ref: '#/components/schemas/SubscriptionAction'\n        UnSubscribe:\n          $ref: '#/components/schemas/UnSubscriptionAction'\n        AuctionBid:\n          $ref: '#/components/schemas/AuctionBidAction'\n        NftPurchase:\n          $ref: '#/components/schemas/NftPurchase'\n        simple_preview:\n          $ref: '#/components/schemas/ActionSimplePreview'\n    TonTransferAction:\n      type: object\n      required:\n        - sender\n        - recipient\n        - amount\n      properties:\n        sender:\n          $ref: '#/components/schemas/AccountAddress'\n        recipient:\n          $ref: '#/components/schemas/AccountAddress'\n        amount:\n          type: integer\n          description: amount in nanotons\n          format: int64\n          example: 123456789\n        comment:\n          type: string\n          example: \"Hi! This is your salary. \\nFrom accounting with love.\"\n        payload:\n          type: string\n          description: raw hex encoded payload\n          example: '0234de3e21d21b3ee21f3'\n        refund:\n          $ref: '#/components/schemas/Refund'\n    NftItemTransferAction:\n      type: object\n      required:\n        - nft\n      properties:\n        sender:\n          $ref: '#/components/schemas/AccountAddress'\n        recipient:\n          $ref: '#/components/schemas/AccountAddress'\n        nft:\n          type: string\n          example: \"\"\n        comment:\n          type: string\n          example: \"Hi! This is your salary. \\nFrom accounting with love.\"\n        payload:\n          type: string\n          description: raw hex encoded payload\n          example: '0234de3e21d21b3ee21f3'\n        refund:\n          $ref: '#/components/schemas/Refund'\n    JettonTransferAction:\n      type: object\n      required:\n        - amount\n        - jetton\n        - senders_wallet\n        - recipients_wallet\n      properties:\n        sender:\n          $ref: '#/components/schemas/AccountAddress'\n        recipient:\n          $ref: '#/components/schemas/AccountAddress'\n        senders_wallet:\n          type: string\n          example: 0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B\n        recipients_wallet:\n          type: string\n          example: 0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B\n        amount:\n          type: string\n          description: amount in quanta of tokens\n          example: 1000000000\n        comment:\n          type: string\n          example: \"Hi! This is your salary. \\nFrom accounting with love.\"\n        refund:\n          $ref: '#/components/schemas/Refund'\n        jetton:\n          $ref: '#/components/schemas/Jetton'\n    ContractDeployAction:\n      type: object\n      required:\n        - address\n        - deployer\n        - interfaces\n      properties:\n        address:\n          type: string\n          example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n        deployer:\n          $ref: '#/components/schemas/AccountAddress'\n        interfaces:\n          type: array\n          items:\n            type: string\n          example: [ \"nft_item\", \"nft_royalty\" ]\n    SubscriptionAction:\n      type: object\n      required:\n        - subscriber\n        - subscription\n        - beneficiary\n        - amount\n        - initial\n      properties:\n        subscriber:\n          $ref: '#/components/schemas/AccountAddress'\n        subscription:\n          type: string\n          example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n        beneficiary:\n          $ref: '#/components/schemas/AccountAddress'\n        amount:\n          type: integer\n          format: int64\n          example: 1000000000\n        initial:\n          type: boolean\n          example: false\n    UnSubscriptionAction:\n      type: object\n      required:\n        - subscriber\n        - subscription\n        - beneficiary\n      properties:\n        subscriber:\n          $ref: '#/components/schemas/AccountAddress'\n        subscription:\n          type: string\n          example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n        beneficiary:\n          $ref: '#/components/schemas/AccountAddress'\n    AuctionBidAction:\n      type: object\n      required:\n        - amount\n        - beneficiary\n        - bidder\n        - auction_type\n      properties:\n        auction_type:\n          type: string\n          enum:\n            - DNS.ton\n            - DNS.tg\n            - getgems\n        amount:\n          $ref: '#/components/schemas/Price'\n        nft:\n          $ref: '#/components/schemas/NftItemRepr'\n        beneficiary:\n          $ref: '#/components/schemas/AccountAddress'\n        bidder:\n          $ref: '#/components/schemas/AccountAddress'\n    NftPurchase:\n      type: object\n      required:\n        - amount\n        - seller\n        - buyer\n        - auction_type\n        - nft\n      properties:\n        purchase_type:\n          type: string\n          enum:\n            - DNS.tg\n            - getgems\n        amount:\n          $ref: '#/components/schemas/Price'\n        nft:\n          $ref: '#/components/schemas/NftItemRepr'\n        seller:\n          $ref: '#/components/schemas/AccountAddress'\n        buyer:\n          $ref: '#/components/schemas/AccountAddress'\n    ActionSimplePreview:\n      type: object\n      required:\n        - name\n        - short_description\n        - full_description\n      properties:\n        name:\n          type: string\n          example: \"contract deploy\"\n        short_description:\n          type: string\n          example: \"\"\n        full_description:\n          type: string\n          example: \"\"\n        image:\n          type: string\n          example: \"https://site.com/pic1.jpg\"\n    Fee:\n      type: object\n      required:\n        - account\n        - total\n        - gas\n        - rent\n        - deposit\n        - refund\n      properties:\n        account:\n          $ref: '#/components/schemas/AccountAddress'\n        total:\n          type: integer\n          format: int64\n          example: 100\n          description: \"gas + rent + deposit - refund\"\n        gas:\n          type: integer\n          format: int64\n          example: 80\n        rent:\n          type: integer\n          format: int64\n          example: 10\n        deposit:\n          type: integer\n          format: int64\n          example: 110\n        refund:\n          type: integer\n          format: int64\n          example: 100\n    AnnotatedTrace:\n      type: object\n      required:\n        - hash\n        - lt\n        - account\n        - success\n        - fee\n        - other_fee\n        - storage_fee\n        - input_value\n        - interfaces\n        - annotations\n        - children\n      properties:\n        hash:\n          type: string\n          example: \"55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122\"\n        lt:\n          type: integer\n          format: int64\n          example: 25713146000001\n        account:\n          $ref: '#/components/schemas/AccountAddress'\n        success:\n          type: boolean\n          example: true\n        fee:\n          type: integer\n          format: int64\n          example: 5681002\n        other_fee:\n          type: integer\n          format: int64\n          example: 5681000\n        storage_fee:\n          type: integer\n          format: int64\n          example: 200\n        input_value:\n          type: integer\n          format: int64\n          example: 2000000\n        interfaces:\n          type: array\n          items:\n            type: string\n            example: nft_sale\n        annotations:\n          type: array\n          items:\n            $ref: '#/components/schemas/TxAnnotation'\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/AnnotatedTrace'\n    DnsRecord:\n      type: object\n      required:\n        - site\n      properties:\n        wallet:\n          $ref: '#/components/schemas/WalletDNS'\n        next_resolver:\n          type: string\n          example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n        site:\n          type: array\n          items:\n            type: string\n            example: \"http://12234.ton\"\n    WalletDNS:\n      type: object\n      required:\n        - address\n        - is_wallet\n        - has_method_pubkey\n        - has_method_seqno\n        - names\n      properties:\n        address:\n          type: string\n          example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n        is_wallet:\n          type: boolean\n          example: true\n        has_method_pubkey:\n          type: boolean\n          example: true\n        has_method_seqno:\n          type: boolean\n          example: true\n        names:\n          type: array\n          items:\n            type: string\n            example: \"name\"\n    DomainInfo:\n      type: object\n      required:\n        - expiration\n      properties:\n        nft_item:\n          type: object\n          required:\n            - address\n          properties:\n            address:\n              type: string\n              example: 0:E93E7D444180608B8520C00DC664383A387356FB6E16FDDF99DBE5E1415A574B\n            owner:\n              $ref: '#/components/schemas/AccountAddress'\n        expiration:\n          type: integer\n          format: int64\n          example: 1660050553\n    Auctions:\n      type: object\n      required:\n        - data\n        - total\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/Auction'\n        total:\n          type: integer\n          format: int64\n          example: 1660050553\n    Auction:\n      type: object\n      required:\n        - domain\n        - owner\n        - price\n        - bids\n        - date\n      properties:\n        domain:\n          type: string\n          example: wallet.ton\n        owner:\n          type: string\n          example: owner\n        price:\n          type: integer\n          format: int64\n          example: 1660050553\n        bids:\n          type: integer\n          format: int64\n          example: 1660050553\n        date:\n          type: integer\n          format: int64\n          example: 1660050553\n    DomainBids:\n      type: object\n      required:\n        - data\n      properties:\n        data:\n          type: array\n          items:\n            $ref: '#/components/schemas/DomainBid'\n    DomainBid:\n      type: object\n      required:\n        - success\n        - value\n        - txTime\n        - bidder\n        - txHash\n      properties:\n        success:\n          type: boolean\n          example: true\n          default: false\n        value:\n          type: integer\n          format: uint64\n          example: 1660050553\n        txTime:\n          type: integer\n          format: int64\n          example: 1660050553\n        txHash:\n          type: string\n          example: \"55e8809519cd3c49098c9ee45afdafcea7a894a74d0f628d94a115a50e045122\"\n        bidder:\n          $ref: '#/components/schemas/AccountAddress'\n    DomainNames:\n      type: object\n      required:\n        - domains\n      properties:\n        domains:\n          type: array\n          items:\n            type: string\n            example: \"http://12234.ton\"\n    Seqno:\n      type: object\n      required:\n        - seqno\n      properties:\n        seqno:\n          type: integer\n          format: int64\n          example: 123\n    PublicKey:\n      type: object\n      required:\n        - publicKey\n      properties:\n        publicKey:\n          type: string\n          format: binary\n          example: 6DDD647FD1D4A79C83E0149DFF9EB26A3EBF2DB6517A4F79E43098912E6A6802\n    Refund:\n      type: object\n      required:\n        - type\n        - origin\n      properties:\n        type:\n          type: string\n          example: DNS.ton\n          enum:\n            - DNS.ton\n            - DNS.tg\n            - GetGems\n        origin:\n          type: string\n          example: \"0:da6b1b6663a0e4d18cc8574ccd9db5296e367dd9324706f3bbd9eb1cd2caf0bf\"\n    NewTransactionEvent:\n      type: object\n      required:\n        - event_id\n        - event_name\n        - hash_transaction\n        - account\n      properties:\n        event_id:\n          type: integer\n          format: int64\n          example: 1\n        event_name:\n          type: string\n          example: \"new_transaction\"\n          enum:\n            - new_transaction\n        hash_transaction:\n          type: string\n          example: \"cf3b91ec333f50e1629b0d6eb448c50bf7539ee9a3bf9cce33fb2c2c6ef22370\"\n        account:\n          type: string\n          example: \"0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\"\n    JettonTransferEvent:\n      type: object\n      required:\n        - event_id\n        - event_name\n        - recipient_address\n        - amount\n        - jetton_address\n      properties:\n        event_id:\n          type: integer\n          format: int64\n          example: 1\n        event_name:\n          type: string\n          example: \"jetton_transfer\"\n          enum:\n            - jetton_transfer\n        recipient_address:\n          type: string\n          example: \"0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\"\n        amount:\n          type: string\n          example: \"20\"\n        jetton_address:\n          type: string\n          example: \"0:6553FB4A2128297A978C153F6DDF14C37A2566A36E5D5BFE2F50E97A8C877F04\"\n    NFTTransferEvent:\n      type: object\n      required:\n        - event_id\n        - event_name\n        - new_owner\n        - nft_address\n      properties:\n        event_id:\n          type: integer\n          format: int64\n          example: 1\n        event_name:\n          type: string\n          example: \"new_transaction\"\n          enum:\n            - new_transaction\n        new_owner:\n          type: string\n          example: \"0:10C1073837B93FDAAD594284CE8B8EFF7B9CF25427440EB2FC682762E1471365\"\n        nft_address:\n          type: string\n          example: \"0:FD595F36B4C1535BEC8461490D38EBB9AE3C38DD6ACE17CA63ABE2C6608BE159\"\n  responses:\n    NotFound:\n      description: The specified resource was not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    InternalError:\n      description: Something went wrong on server side\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    BadRequest:\n      description: Something went wrong on client side\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n    UnauthorizedError:\n      description: Access token is missing or invalid\n  securitySchemes:\n    JWTAuth:\n      description: \"JWT token authorization\"\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n",
			"canonicalURL": "/github.com/tonkeeper/tonapi@7f288a10832bf55fc7f7d970906d72cf397cabee/-/blob/api/tonapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tonkeeper/tonapi/blob/7f288a10832bf55fc7f7d970906d72cf397cabee/api/tonapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/v1/account/getBulkInfo\": get: operation \"getBulkAccountInfo\": security: at api/tonapi.yaml:844:22: list of scopes MUST be empty for \"type\" \"http\""
}