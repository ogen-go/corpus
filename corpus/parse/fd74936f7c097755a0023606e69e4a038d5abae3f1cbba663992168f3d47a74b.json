{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "samples/client/petstore/java/okhttp-gson/api/openapi.yaml",
			"byteSize": 60458,
			"content": "openapi: 3.0.0\ninfo:\n  description: \"This spec is mainly for testing Petstore server and contains fake\\\n    \\ endpoints, models. Please do not use this for any other purpose. Special characters:\\\n    \\ \\\" \\\\\"\n  license:\n    name: Apache-2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  title: OpenAPI Petstore\n  version: 1.0.0\nservers:\n- description: petstore server\n  url: \"http://{server}.swagger.io:{port}/v2\"\n  variables:\n    server:\n      default: petstore\n      enum:\n      - petstore\n      - qa-petstore\n      - dev-petstore\n    port:\n      default: \"80\"\n      enum:\n      - \"80\"\n      - \"8080\"\n- description: The local server\n  url: \"https://localhost:8080/{version}\"\n  variables:\n    version:\n      default: v2\n      enum:\n      - v1\n      - v2\n- description: The local server without variables\n  url: https://127.0.0.1/no_variable\ntags:\n- description: Everything about your Pets\n  name: pet\n- description: Access to Petstore orders\n  name: store\n- description: Operations about user\n  name: user\npaths:\n  /foo:\n    get:\n      responses:\n        default:\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/_foo_get_default_response'\n          description: response\n      x-accepts: application/json\n  /pet:\n    post:\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n      - http_signature_test: []\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Add a new pet to the store\n      tags:\n      - pet\n      x-content-type: application/json\n      x-accepts: application/json\n    put:\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: '#/components/requestBodies/Pet'\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n      security:\n      - http_signature_test: []\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Update an existing pet\n      tags:\n      - pet\n      x-content-type: application/json\n      x-accepts: application/json\n    servers:\n    - url: http://petstore.swagger.io/v2\n    - url: http://path-server-test.petstore.local/v2\n  /pet/findByStatus:\n    get:\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n      - deprecated: true\n        description: Status values that need to be considered for filter\n        explode: false\n        in: query\n        name: status\n        required: true\n        schema:\n          items:\n            default: available\n            enum:\n            - available\n            - pending\n            - sold\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        \"400\":\n          description: Invalid status value\n      security:\n      - http_signature_test: []\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Finds Pets by status\n      tags:\n      - pet\n      x-accepts: application/json\n  /pet/findByTags:\n    get:\n      deprecated: true\n      description: \"Multiple tags can be provided with comma separated strings. Use\\\n        \\ tag1, tag2, tag3 for testing.\"\n      operationId: findPetsByTags\n      parameters:\n      - description: Tags to filter by\n        explode: false\n        in: query\n        name: tags\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Pet'\n                type: array\n          description: successful operation\n        \"400\":\n          description: Invalid tag value\n      security:\n      - http_signature_test: []\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Finds Pets by tags\n      tags:\n      - pet\n      x-accepts: application/json\n  /pet/{petId}:\n    delete:\n      description: \"\"\n      operationId: deletePet\n      parameters:\n      - explode: false\n        in: header\n        name: api_key\n        required: false\n        schema:\n          type: string\n        style: simple\n      - description: Pet id to delete\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      responses:\n        \"400\":\n          description: Invalid pet value\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Deletes a pet\n      tags:\n      - pet\n      x-accepts: application/json\n    get:\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n      - description: ID of pet to return\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Pet'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pet'\n          description: successful operation\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n      security:\n      - api_key: []\n      summary: Find pet by ID\n      tags:\n      - pet\n      x-accepts: application/json\n    post:\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n      - description: ID of pet that needs to be updated\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/updatePetWithForm_request'\n      responses:\n        \"405\":\n          description: Invalid input\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: Updates a pet in the store with form data\n      tags:\n      - pet\n      x-content-type: application/x-www-form-urlencoded\n      x-accepts: application/json\n  /pet/{petId}/uploadImage:\n    post:\n      description: \"\"\n      operationId: uploadFile\n      parameters:\n      - description: ID of pet to update\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/uploadFile_request'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: successful operation\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: uploads an image\n      tags:\n      - pet\n      x-content-type: multipart/form-data\n      x-accepts: application/json\n  /store/inventory:\n    get:\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                additionalProperties:\n                  format: int32\n                  type: integer\n                type: object\n          description: successful operation\n      security:\n      - api_key: []\n      summary: Returns pet inventories by status\n      tags:\n      - store\n      x-accepts: application/json\n  /store/order:\n    post:\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Order'\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n          description: successful operation\n        \"400\":\n          description: Invalid Order\n      summary: Place an order for a pet\n      tags:\n      - store\n      x-content-type: application/json\n      x-accepts: application/json\n  /store/order/{order_id}:\n    delete:\n      description: For valid response try integer IDs with value < 1000. Anything\n        above 1000 or nonintegers will generate API errors\n      operationId: deleteOrder\n      parameters:\n      - description: ID of the order that needs to be deleted\n        explode: false\n        in: path\n        name: order_id\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n      summary: Delete purchase order by ID\n      tags:\n      - store\n      x-accepts: application/json\n    get:\n      description: For valid response try integer IDs with value <= 5 or > 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n      - description: ID of pet that needs to be fetched\n        explode: false\n        in: path\n        name: order_id\n        required: true\n        schema:\n          format: int64\n          maximum: 5\n          minimum: 1\n          type: integer\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/Order'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n          description: successful operation\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n      summary: Find purchase order by ID\n      tags:\n      - store\n      x-accepts: application/json\n  /user:\n    post:\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n      summary: Create user\n      tags:\n      - user\n      x-content-type: application/json\n      x-accepts: application/json\n  /user/createWithArray:\n    post:\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: successful operation\n      summary: Creates list of users with given input array\n      tags:\n      - user\n      x-content-type: application/json\n      x-accepts: application/json\n  /user/createWithList:\n    post:\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: '#/components/requestBodies/UserArray'\n      responses:\n        default:\n          description: successful operation\n      summary: Creates list of users with given input array\n      tags:\n      - user\n      x-content-type: application/json\n      x-accepts: application/json\n  /user/login:\n    get:\n      description: \"\"\n      operationId: loginUser\n      parameters:\n      - description: The user name for login\n        explode: true\n        in: query\n        name: username\n        required: true\n        schema:\n          type: string\n        style: form\n      - description: The password for login in clear text\n        explode: true\n        in: query\n        name: password\n        required: true\n        schema:\n          type: string\n        style: form\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              explode: false\n              schema:\n                format: int32\n                type: integer\n              style: simple\n            X-Expires-After:\n              description: date in UTC when token expires\n              explode: false\n              schema:\n                format: date-time\n                type: string\n              style: simple\n        \"400\":\n          description: Invalid username/password supplied\n      summary: Logs user into the system\n      tags:\n      - user\n      x-accepts: application/json\n  /user/logout:\n    get:\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n      summary: Logs out current logged in user session\n      tags:\n      - user\n      x-accepts: application/json\n  /user/{username}:\n    delete:\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n      - description: The name that needs to be deleted\n        explode: false\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n      summary: Delete user\n      tags:\n      - user\n      x-accepts: application/json\n    get:\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n      - description: The name that needs to be fetched. Use user1 for testing.\n        explode: false\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        style: simple\n      responses:\n        \"200\":\n          content:\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/User'\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n          description: successful operation\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n      summary: Get user by user name\n      tags:\n      - user\n      x-accepts: application/json\n    put:\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n      - description: name that need to be deleted\n        explode: false\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n        style: simple\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n      summary: Updated user\n      tags:\n      - user\n      x-content-type: application/json\n      x-accepts: application/json\n  /fake_classname_test:\n    patch:\n      description: To test class name in snake case\n      operationId: testClassname\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n          description: successful operation\n      security:\n      - api_key_query: []\n      summary: To test class name in snake case\n      tags:\n      - fake_classname_tags 123#$%^\n      x-content-type: application/json\n      x-accepts: application/json\n  /fake:\n    delete:\n      description: Fake endpoint to test group parameters (optional)\n      operationId: testGroupParameters\n      parameters:\n      - description: Required String in group parameters\n        explode: true\n        in: query\n        name: required_string_group\n        required: true\n        schema:\n          type: integer\n        style: form\n      - description: Required Boolean in group parameters\n        explode: false\n        in: header\n        name: required_boolean_group\n        required: true\n        schema:\n          type: boolean\n        style: simple\n      - description: Required Integer in group parameters\n        explode: true\n        in: query\n        name: required_int64_group\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: form\n      - description: String in group parameters\n        explode: true\n        in: query\n        name: string_group\n        required: false\n        schema:\n          type: integer\n        style: form\n      - description: Boolean in group parameters\n        explode: false\n        in: header\n        name: boolean_group\n        required: false\n        schema:\n          type: boolean\n        style: simple\n      - description: Integer in group parameters\n        explode: true\n        in: query\n        name: int64_group\n        required: false\n        schema:\n          format: int64\n          type: integer\n        style: form\n      responses:\n        \"400\":\n          description: Someting wrong\n      security:\n      - bearer_test: []\n      summary: Fake endpoint to test group parameters (optional)\n      tags:\n      - fake\n      x-group-parameters: true\n      x-accepts: application/json\n    get:\n      description: To test enum parameters\n      operationId: testEnumParameters\n      parameters:\n      - description: Header parameter enum test (string array)\n        explode: false\n        in: header\n        name: enum_header_string_array\n        required: false\n        schema:\n          items:\n            default: $\n            enum:\n            - '>'\n            - $\n            type: string\n          type: array\n        style: simple\n      - description: Header parameter enum test (string)\n        explode: false\n        in: header\n        name: enum_header_string\n        required: false\n        schema:\n          default: -efg\n          enum:\n          - _abc\n          - -efg\n          - (xyz)\n          type: string\n        style: simple\n      - description: Query parameter enum test (string array)\n        explode: true\n        in: query\n        name: enum_query_string_array\n        required: false\n        schema:\n          items:\n            default: $\n            enum:\n            - '>'\n            - $\n            type: string\n          type: array\n        style: form\n      - description: Query parameter enum test (string)\n        explode: true\n        in: query\n        name: enum_query_string\n        required: false\n        schema:\n          default: -efg\n          enum:\n          - _abc\n          - -efg\n          - (xyz)\n          type: string\n        style: form\n      - description: Query parameter enum test (double)\n        explode: true\n        in: query\n        name: enum_query_integer\n        required: false\n        schema:\n          enum:\n          - 1\n          - -2\n          format: int32\n          type: integer\n        style: form\n      - description: Query parameter enum test (double)\n        explode: true\n        in: query\n        name: enum_query_double\n        required: false\n        schema:\n          enum:\n          - 1.1\n          - -1.2\n          format: double\n          type: number\n        style: form\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/testEnumParameters_request'\n      responses:\n        \"400\":\n          description: Invalid request\n        \"404\":\n          description: Not found\n      summary: To test enum parameters\n      tags:\n      - fake\n      x-content-type: application/x-www-form-urlencoded\n      x-accepts: application/json\n    patch:\n      description: To test \"client\" model\n      operationId: testClientModel\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n          description: successful operation\n      summary: To test \"client\" model\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: application/json\n    post:\n      description: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      operationId: testEndpointParameters\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/testEndpointParameters_request'\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n      security:\n      - http_basic_test: []\n      summary: |\n        Fake endpoint for testing various parameters\n        假端點\n        偽のエンドポイント\n        가짜 엔드 포인트\n      tags:\n      - fake\n      x-content-type: application/x-www-form-urlencoded\n      x-accepts: application/json\n  /fake/outer/number:\n    post:\n      description: Test serialization of outer number types\n      operationId: fakeOuterNumberSerialize\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterNumber'\n        description: Input number as post body\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterNumber'\n          description: Output number\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: '*/*'\n  /fake/outer/string:\n    post:\n      description: Test serialization of outer string types\n      operationId: fakeOuterStringSerialize\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterString'\n        description: Input string as post body\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterString'\n          description: Output string\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: '*/*'\n  /fake/outer/boolean:\n    post:\n      description: Test serialization of outer boolean types\n      operationId: fakeOuterBooleanSerialize\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterBoolean'\n        description: Input boolean as post body\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterBoolean'\n          description: Output boolean\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: '*/*'\n  /fake/outer/composite:\n    post:\n      description: Test serialization of object with outer number type\n      operationId: fakeOuterCompositeSerialize\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OuterComposite'\n        description: Input composite as post body\n      responses:\n        \"200\":\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/OuterComposite'\n          description: Output composite\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: '*/*'\n  /fake/jsonFormData:\n    get:\n      description: \"\"\n      operationId: testJsonFormData\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/testJsonFormData_request'\n      responses:\n        \"200\":\n          description: successful operation\n      summary: test json serialization of form data\n      tags:\n      - fake\n      x-content-type: application/x-www-form-urlencoded\n      x-accepts: application/json\n  /fake/inline-additionalProperties:\n    post:\n      description: \"\"\n      operationId: testInlineAdditionalProperties\n      requestBody:\n        content:\n          application/json:\n            schema:\n              additionalProperties:\n                type: string\n              type: object\n        description: request body\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n      summary: test inline additionalProperties\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: application/json\n  /fake/body-with-query-params:\n    put:\n      operationId: testBodyWithQueryParams\n      parameters:\n      - explode: true\n        in: query\n        name: query\n        required: true\n        schema:\n          type: string\n        style: form\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n        required: true\n      responses:\n        \"200\":\n          description: Success\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: application/json\n  /another-fake/dummy:\n    patch:\n      description: To test special tags and operation ID starting with number\n      operationId: 123_test_@#$%_special_tags\n      requestBody:\n        $ref: '#/components/requestBodies/Client'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Client'\n          description: successful operation\n      summary: To test special tags\n      tags:\n      - $another-fake?\n      x-content-type: application/json\n      x-accepts: application/json\n  /fake/body-with-file-schema:\n    put:\n      description: \"For this test, the body for this request much reference a schema\\\n        \\ named `File`.\"\n      operationId: testBodyWithFileSchema\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/FileSchemaTestClass'\n        required: true\n      responses:\n        \"200\":\n          description: Success\n      tags:\n      - fake\n      x-content-type: application/json\n      x-accepts: application/json\n  /fake/test-query-parameters:\n    put:\n      description: To test the collection format in query parameters\n      operationId: testQueryParameterCollectionFormat\n      parameters:\n      - explode: true\n        in: query\n        name: pipe\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - explode: false\n        in: query\n        name: ioutil\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - explode: false\n        in: query\n        name: http\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: spaceDelimited\n      - explode: false\n        in: query\n        name: url\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      - explode: true\n        in: query\n        name: context\n        required: true\n        schema:\n          items:\n            type: string\n          type: array\n        style: form\n      responses:\n        \"200\":\n          description: Success\n      tags:\n      - fake\n      x-accepts: application/json\n  /fake/{petId}/uploadImageWithRequiredFile:\n    post:\n      description: \"\"\n      operationId: uploadFileWithRequiredFile\n      parameters:\n      - description: ID of pet to update\n        explode: false\n        in: path\n        name: petId\n        required: true\n        schema:\n          format: int64\n          type: integer\n        style: simple\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/uploadFileWithRequiredFile_request'\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ApiResponse'\n          description: successful operation\n      security:\n      - petstore_auth:\n        - write:pets\n        - read:pets\n      summary: uploads an image (required)\n      tags:\n      - pet\n      x-content-type: multipart/form-data\n      x-accepts: application/json\n  /fake/health:\n    get:\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HealthCheckResult'\n          description: The instance started successfully\n      summary: Health check endpoint\n      tags:\n      - fake\n      x-accepts: application/json\n  /fake/array-of-enums:\n    get:\n      operationId: getArrayOfEnums\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ArrayOfEnums'\n          description: Got named array of enums\n      summary: Array of Enums\n      tags:\n      - fake\n      x-accepts: application/json\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          examples:\n            simple-list:\n              description: Should not get into code examples\n              summary: Simple list example\n              value:\n              - username: foo\n              - username: bar\n          schema:\n            items:\n              $ref: '#/components/schemas/User'\n            type: array\n      description: List of user object\n      required: true\n    Client:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Client'\n      description: client model\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Pet'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/Pet'\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Foo:\n      example:\n        bar: bar\n      properties:\n        bar:\n          default: bar\n          type: string\n      type: object\n    Bar:\n      default: bar\n      type: string\n    Order:\n      example:\n        petId: 6\n        quantity: 1\n        id: 0\n        shipDate: 2020-02-02T20:20:20.000222Z\n        complete: false\n        status: placed\n      properties:\n        id:\n          format: int64\n          type: integer\n        petId:\n          format: int64\n          type: integer\n        quantity:\n          format: int32\n          type: integer\n        shipDate:\n          example: 2020-02-02T20:20:20.000222Z\n          format: date-time\n          type: string\n        status:\n          description: Order Status\n          enum:\n          - placed\n          - approved\n          - delivered\n          type: string\n        complete:\n          default: false\n          type: boolean\n      type: object\n      xml:\n        name: Order\n    Category:\n      example:\n        name: default-name\n        id: 6\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          default: default-name\n          type: string\n      required:\n      - name\n      type: object\n      xml:\n        name: Category\n    User:\n      example:\n        firstName: firstName\n        lastName: lastName\n        password: password\n        userStatus: 6\n        objectWithNoDeclaredPropsNullable: \"{}\"\n        phone: phone\n        objectWithNoDeclaredProps: \"{}\"\n        id: 0\n        anyTypePropNullable: \"\"\n        email: email\n        anyTypeProp: \"\"\n        username: username\n      properties:\n        id:\n          format: int64\n          type: integer\n          x-is-unique: true\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          description: User Status\n          format: int32\n          type: integer\n        objectWithNoDeclaredProps:\n          description: test code generation for objects Value must be a map of strings\n            to values. It cannot be the 'null' value.\n          type: object\n        objectWithNoDeclaredPropsNullable:\n          description: test code generation for nullable objects. Value must be a\n            map of strings to values or the 'null' value.\n          nullable: true\n          type: object\n        anyTypeProp:\n          description: \"test code generation for any type Here the 'type' attribute\\\n            \\ is not specified, which means the value can be anything, including the\\\n            \\ null value, string, number, boolean, array or object. See https://github.com/OAI/OpenAPI-Specification/issues/1389\"\n        anyTypePropNullable:\n          description: \"test code generation for any type Here the 'type' attribute\\\n            \\ is not specified, which means the value can be anything, including the\\\n            \\ null value, string, number, boolean, array or object. The 'nullable'\\\n            \\ attribute does not change the allowed values.\"\n          nullable: true\n      type: object\n      xml:\n        name: User\n    Tag:\n      example:\n        name: name\n        id: 1\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          type: string\n      type: object\n      xml:\n        name: Tag\n    Pet:\n      example:\n        photoUrls:\n        - photoUrls\n        - photoUrls\n        name: doggie\n        id: 0\n        category:\n          name: default-name\n          id: 6\n        tags:\n        - name: name\n          id: 1\n        - name: name\n          id: 1\n        status: available\n      properties:\n        id:\n          format: int64\n          type: integer\n          x-is-unique: true\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          example: doggie\n          type: string\n        photoUrls:\n          items:\n            type: string\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n        tags:\n          items:\n            $ref: '#/components/schemas/Tag'\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n        status:\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n          type: string\n      required:\n      - name\n      - photoUrls\n      type: object\n      xml:\n        name: Pet\n    ApiResponse:\n      example:\n        code: 0\n        type: type\n        message: message\n      properties:\n        code:\n          format: int32\n          type: integer\n        type:\n          type: string\n        message:\n          type: string\n      type: object\n    Return:\n      description: Model for testing reserved words\n      properties:\n        return:\n          format: int32\n          type: integer\n      xml:\n        name: Return\n    Name:\n      description: Model for testing model name same as property name\n      properties:\n        name:\n          format: int32\n          type: integer\n        snake_case:\n          format: int32\n          readOnly: true\n          type: integer\n        property:\n          type: string\n        \"123Number\":\n          readOnly: true\n          type: integer\n      required:\n      - name\n      xml:\n        name: Name\n    \"200_response\":\n      description: Model for testing model name starting with number\n      properties:\n        name:\n          format: int32\n          type: integer\n        class:\n          type: string\n      xml:\n        name: Name\n    ClassModel:\n      description: Model for testing model with \"_class\" property\n      properties:\n        _class:\n          type: string\n    Dog:\n      allOf:\n      - $ref: '#/components/schemas/Animal'\n      - $ref: '#/components/schemas/Dog_allOf'\n    Cat:\n      allOf:\n      - $ref: '#/components/schemas/Animal'\n      - $ref: '#/components/schemas/Address'\n      - $ref: '#/components/schemas/Cat_allOf'\n    Address:\n      additionalProperties:\n        type: integer\n      type: object\n    Animal:\n      discriminator:\n        propertyName: className\n      properties:\n        className:\n          type: string\n        color:\n          default: red\n          type: string\n      required:\n      - className\n      type: object\n    AnimalFarm:\n      items:\n        $ref: '#/components/schemas/Animal'\n      type: array\n    format_test:\n      properties:\n        integer:\n          maximum: 100\n          minimum: 10\n          multipleOf: 2\n          type: integer\n        int32:\n          format: int32\n          maximum: 200\n          minimum: 20\n          type: integer\n        int64:\n          format: int64\n          type: integer\n        number:\n          maximum: 543.2\n          minimum: 32.1\n          multipleOf: 32.5\n          type: number\n        float:\n          format: float\n          maximum: 987.6\n          minimum: 54.3\n          type: number\n        double:\n          format: double\n          maximum: 123.4\n          minimum: 67.8\n          type: number\n        decimal:\n          format: number\n          type: string\n        string:\n          pattern: \"/[a-z]/i\"\n          type: string\n        byte:\n          format: byte\n          type: string\n        binary:\n          format: binary\n          type: string\n        date:\n          example: 2020-02-02\n          format: date\n          type: string\n        dateTime:\n          example: 2007-12-03T10:15:30+01:00\n          format: date-time\n          type: string\n        uuid:\n          example: 72f98069-206d-4f12-9f12-3d1e525a8e84\n          format: uuid\n          type: string\n        password:\n          format: password\n          maxLength: 64\n          minLength: 10\n          type: string\n        pattern_with_digits:\n          description: A string that is a 10 digit number. Can have leading zeros.\n          pattern: \"^\\\\d{10}$\"\n          type: string\n        pattern_with_digits_and_delimiter:\n          description: A string starting with 'image_' (case insensitive) and one\n            to three digits following i.e. Image_01.\n          pattern: \"/^image_\\\\d{1,3}$/i\"\n          type: string\n      required:\n      - byte\n      - date\n      - number\n      - password\n      type: object\n    EnumClass:\n      default: -efg\n      enum:\n      - _abc\n      - -efg\n      - (xyz)\n      type: string\n    Enum_Test:\n      properties:\n        enum_string:\n          enum:\n          - UPPER\n          - lower\n          - \"\"\n          type: string\n        enum_string_required:\n          enum:\n          - UPPER\n          - lower\n          - \"\"\n          type: string\n        enum_integer:\n          enum:\n          - 1\n          - -1\n          format: int32\n          type: integer\n        enum_integer_only:\n          enum:\n          - 2\n          - -2\n          type: integer\n        enum_number:\n          enum:\n          - 1.1\n          - -1.2\n          format: double\n          type: number\n        outerEnum:\n          $ref: '#/components/schemas/OuterEnum'\n        outerEnumInteger:\n          $ref: '#/components/schemas/OuterEnumInteger'\n        outerEnumDefaultValue:\n          $ref: '#/components/schemas/OuterEnumDefaultValue'\n        outerEnumIntegerDefaultValue:\n          $ref: '#/components/schemas/OuterEnumIntegerDefaultValue'\n      required:\n      - enum_string_required\n      type: object\n    AdditionalPropertiesClass:\n      properties:\n        map_property:\n          additionalProperties:\n            type: string\n          type: object\n        map_of_map_property:\n          additionalProperties:\n            additionalProperties:\n              type: string\n            type: object\n          type: object\n        anytype_1: {}\n        map_with_undeclared_properties_anytype_1:\n          type: object\n        map_with_undeclared_properties_anytype_2:\n          properties: {}\n          type: object\n        map_with_undeclared_properties_anytype_3:\n          additionalProperties: true\n          type: object\n        empty_map:\n          additionalProperties: false\n          description: \"an object with no declared properties and no undeclared properties,\\\n            \\ hence it's an empty map.\"\n          type: object\n        map_with_undeclared_properties_string:\n          additionalProperties:\n            type: string\n          type: object\n      type: object\n    MixedPropertiesAndAdditionalPropertiesClass:\n      properties:\n        uuid:\n          format: uuid\n          type: string\n        dateTime:\n          format: date-time\n          type: string\n        map:\n          additionalProperties:\n            $ref: '#/components/schemas/Animal'\n          type: object\n      type: object\n    List:\n      properties:\n        \"123-list\":\n          type: string\n      type: object\n    Client:\n      example:\n        client: client\n      properties:\n        client:\n          type: string\n      type: object\n    ReadOnlyFirst:\n      properties:\n        bar:\n          readOnly: true\n          type: string\n        baz:\n          type: string\n      type: object\n    hasOnlyReadOnly:\n      properties:\n        bar:\n          readOnly: true\n          type: string\n        foo:\n          readOnly: true\n          type: string\n      type: object\n    Capitalization:\n      properties:\n        smallCamel:\n          type: string\n        CapitalCamel:\n          type: string\n        small_Snake:\n          type: string\n        Capital_Snake:\n          type: string\n        SCA_ETH_Flow_Points:\n          type: string\n        ATT_NAME:\n          description: |\n            Name of the pet\n          type: string\n      type: object\n    MapTest:\n      properties:\n        map_map_of_string:\n          additionalProperties:\n            additionalProperties:\n              type: string\n            type: object\n          type: object\n        map_of_enum_string:\n          additionalProperties:\n            enum:\n            - UPPER\n            - lower\n            type: string\n          type: object\n        direct_map:\n          additionalProperties:\n            type: boolean\n          type: object\n        indirect_map:\n          additionalProperties:\n            type: boolean\n          type: object\n      type: object\n    ArrayTest:\n      properties:\n        array_of_string:\n          items:\n            type: string\n          type: array\n        array_array_of_integer:\n          items:\n            items:\n              format: int64\n              type: integer\n            type: array\n          type: array\n        array_array_of_model:\n          items:\n            items:\n              $ref: '#/components/schemas/ReadOnlyFirst'\n            type: array\n          type: array\n      type: object\n    NumberOnly:\n      properties:\n        JustNumber:\n          type: number\n      type: object\n    ArrayOfNumberOnly:\n      properties:\n        ArrayNumber:\n          items:\n            type: number\n          type: array\n      type: object\n    ArrayOfArrayOfNumberOnly:\n      properties:\n        ArrayArrayNumber:\n          items:\n            items:\n              type: number\n            type: array\n          type: array\n      type: object\n    EnumArrays:\n      properties:\n        just_symbol:\n          enum:\n          - '>='\n          - $\n          type: string\n        array_enum:\n          items:\n            enum:\n            - fish\n            - crab\n            type: string\n          type: array\n      type: object\n    OuterEnum:\n      enum:\n      - placed\n      - approved\n      - delivered\n      nullable: true\n      type: string\n    OuterEnumInteger:\n      enum:\n      - 0\n      - 1\n      - 2\n      type: integer\n    OuterEnumDefaultValue:\n      default: placed\n      enum:\n      - placed\n      - approved\n      - delivered\n      type: string\n    OuterEnumIntegerDefaultValue:\n      default: 0\n      enum:\n      - 0\n      - 1\n      - 2\n      type: integer\n    OuterComposite:\n      example:\n        my_string: my_string\n        my_number: 0.8008281904610115\n        my_boolean: true\n      properties:\n        my_number:\n          type: number\n        my_string:\n          type: string\n        my_boolean:\n          type: boolean\n          x-codegen-body-parameter-name: boolean_post_body\n      type: object\n    OuterNumber:\n      type: number\n    OuterString:\n      type: string\n    OuterBoolean:\n      type: boolean\n      x-codegen-body-parameter-name: boolean_post_body\n    StringBooleanMap:\n      additionalProperties:\n        type: boolean\n      type: object\n    FileSchemaTestClass:\n      example:\n        file:\n          sourceURI: sourceURI\n        files:\n        - sourceURI: sourceURI\n        - sourceURI: sourceURI\n      properties:\n        file:\n          $ref: '#/components/schemas/File'\n        files:\n          items:\n            $ref: '#/components/schemas/File'\n          type: array\n      type: object\n    File:\n      description: Must be named `File` for test.\n      example:\n        sourceURI: sourceURI\n      properties:\n        sourceURI:\n          description: Test capitalization\n          type: string\n      type: object\n    _special_model.name_:\n      properties:\n        $special[property.name]:\n          format: int64\n          type: integer\n        _special_model.name_:\n          type: string\n      xml:\n        name: \"$special[model.name]\"\n    HealthCheckResult:\n      description: Just a string to inform instance is up and running. Make it nullable\n        in hope to get it as pointer in generated model.\n      example:\n        NullableMessage: NullableMessage\n      properties:\n        NullableMessage:\n          nullable: true\n          type: string\n      type: object\n    NullableClass:\n      additionalProperties:\n        nullable: true\n        type: object\n      properties:\n        integer_prop:\n          nullable: true\n          type: integer\n        number_prop:\n          nullable: true\n          type: number\n        boolean_prop:\n          nullable: true\n          type: boolean\n        string_prop:\n          nullable: true\n          type: string\n        date_prop:\n          format: date\n          nullable: true\n          type: string\n        datetime_prop:\n          format: date-time\n          nullable: true\n          type: string\n        array_nullable_prop:\n          items:\n            type: object\n          nullable: true\n          type: array\n        array_and_items_nullable_prop:\n          items:\n            nullable: true\n            type: object\n          nullable: true\n          type: array\n        array_items_nullable:\n          items:\n            nullable: true\n            type: object\n          type: array\n        object_nullable_prop:\n          additionalProperties:\n            type: object\n          nullable: true\n          type: object\n        object_and_items_nullable_prop:\n          additionalProperties:\n            nullable: true\n            type: object\n          nullable: true\n          type: object\n        object_items_nullable:\n          additionalProperties:\n            nullable: true\n            type: object\n          type: object\n      type: object\n    fruit:\n      additionalProperties: false\n      oneOf:\n      - $ref: '#/components/schemas/apple'\n      - $ref: '#/components/schemas/banana'\n      properties:\n        color:\n          type: string\n    apple:\n      nullable: true\n      properties:\n        cultivar:\n          pattern: \"^[a-zA-Z\\\\s]*$\"\n          type: string\n        origin:\n          pattern: \"/^[A-Z\\\\s]*$/i\"\n          type: string\n      type: object\n    banana:\n      properties:\n        lengthCm:\n          type: number\n      type: object\n    mammal:\n      discriminator:\n        propertyName: className\n      oneOf:\n      - $ref: '#/components/schemas/whale'\n      - $ref: '#/components/schemas/zebra'\n      - $ref: '#/components/schemas/Pig'\n    whale:\n      properties:\n        hasBaleen:\n          type: boolean\n        hasTeeth:\n          type: boolean\n        className:\n          type: string\n      required:\n      - className\n      type: object\n    zebra:\n      additionalProperties: true\n      properties:\n        type:\n          enum:\n          - plains\n          - mountain\n          - grevys\n          type: string\n        className:\n          type: string\n      required:\n      - className\n      type: object\n    Pig:\n      discriminator:\n        propertyName: className\n      oneOf:\n      - $ref: '#/components/schemas/BasquePig'\n      - $ref: '#/components/schemas/DanishPig'\n    BasquePig:\n      properties:\n        className:\n          type: string\n      required:\n      - className\n      type: object\n    DanishPig:\n      properties:\n        className:\n          type: string\n      required:\n      - className\n      type: object\n    gmFruit:\n      additionalProperties: false\n      anyOf:\n      - $ref: '#/components/schemas/apple'\n      - $ref: '#/components/schemas/banana'\n      properties:\n        color:\n          type: string\n    fruitReq:\n      additionalProperties: false\n      oneOf:\n      - type: \"null\"\n      - $ref: '#/components/schemas/appleReq'\n      - $ref: '#/components/schemas/bananaReq'\n    appleReq:\n      additionalProperties: false\n      properties:\n        cultivar:\n          type: string\n        mealy:\n          type: boolean\n      required:\n      - cultivar\n      type: object\n    bananaReq:\n      additionalProperties: false\n      properties:\n        lengthCm:\n          type: number\n        sweet:\n          type: boolean\n      required:\n      - lengthCm\n      type: object\n    Drawing:\n      additionalProperties:\n        $ref: '#/components/schemas/fruit'\n      properties:\n        mainShape:\n          $ref: '#/components/schemas/Shape'\n        shapeOrNull:\n          $ref: '#/components/schemas/ShapeOrNull'\n        nullableShape:\n          $ref: '#/components/schemas/NullableShape'\n        shapes:\n          items:\n            $ref: '#/components/schemas/Shape'\n          type: array\n      type: object\n    Shape:\n      discriminator:\n        propertyName: shapeType\n      oneOf:\n      - $ref: '#/components/schemas/Triangle'\n      - $ref: '#/components/schemas/Quadrilateral'\n    ShapeOrNull:\n      description: The value may be a shape or the 'null' value. This is introduced\n        in OAS schema >= 3.1.\n      discriminator:\n        propertyName: shapeType\n      oneOf:\n      - type: \"null\"\n      - $ref: '#/components/schemas/Triangle'\n      - $ref: '#/components/schemas/Quadrilateral'\n    NullableShape:\n      description: The value may be a shape or the 'null' value. The 'nullable' attribute\n        was introduced in OAS schema >= 3.0 and has been deprecated in OAS schema\n        >= 3.1.\n      discriminator:\n        propertyName: shapeType\n      nullable: true\n      oneOf:\n      - $ref: '#/components/schemas/Triangle'\n      - $ref: '#/components/schemas/Quadrilateral'\n    ShapeInterface:\n      properties:\n        shapeType:\n          type: string\n      required:\n      - shapeType\n    TriangleInterface:\n      properties:\n        triangleType:\n          type: string\n      required:\n      - triangleType\n    Triangle:\n      discriminator:\n        propertyName: triangleType\n      oneOf:\n      - $ref: '#/components/schemas/EquilateralTriangle'\n      - $ref: '#/components/schemas/IsoscelesTriangle'\n      - $ref: '#/components/schemas/ScaleneTriangle'\n    EquilateralTriangle:\n      allOf:\n      - $ref: '#/components/schemas/ShapeInterface'\n      - $ref: '#/components/schemas/TriangleInterface'\n    IsoscelesTriangle:\n      additionalProperties: false\n      allOf:\n      - $ref: '#/components/schemas/ShapeInterface'\n      - $ref: '#/components/schemas/TriangleInterface'\n    ScaleneTriangle:\n      allOf:\n      - $ref: '#/components/schemas/ShapeInterface'\n      - $ref: '#/components/schemas/TriangleInterface'\n    QuadrilateralInterface:\n      properties:\n        quadrilateralType:\n          type: string\n      required:\n      - quadrilateralType\n    Quadrilateral:\n      discriminator:\n        propertyName: quadrilateralType\n      oneOf:\n      - $ref: '#/components/schemas/SimpleQuadrilateral'\n      - $ref: '#/components/schemas/ComplexQuadrilateral'\n    SimpleQuadrilateral:\n      allOf:\n      - $ref: '#/components/schemas/ShapeInterface'\n      - $ref: '#/components/schemas/QuadrilateralInterface'\n    ComplexQuadrilateral:\n      allOf:\n      - $ref: '#/components/schemas/ShapeInterface'\n      - $ref: '#/components/schemas/QuadrilateralInterface'\n    GrandparentAnimal:\n      discriminator:\n        propertyName: pet_type\n      properties:\n        pet_type:\n          type: string\n      required:\n      - pet_type\n      type: object\n    ParentPet:\n      allOf:\n      - $ref: '#/components/schemas/GrandparentAnimal'\n      type: object\n    ArrayOfEnums:\n      items:\n        $ref: '#/components/schemas/OuterEnum'\n      type: array\n    DateTimeTest:\n      default: 2010-01-01T10:10:10.000111+01:00\n      example: 2010-01-01T10:10:10.000111+01:00\n      format: date-time\n      type: string\n    DeprecatedObject:\n      deprecated: true\n      properties:\n        name:\n          type: string\n      type: object\n    ObjectWithDeprecatedFields:\n      properties:\n        uuid:\n          type: string\n        id:\n          deprecated: true\n          type: number\n        deprecatedRef:\n          $ref: '#/components/schemas/DeprecatedObject'\n        bars:\n          deprecated: true\n          items:\n            $ref: '#/components/schemas/Bar'\n          type: array\n      type: object\n    PetWithRequiredTags:\n      properties:\n        id:\n          format: int64\n          type: integer\n          x-is-unique: true\n        category:\n          $ref: '#/components/schemas/Category'\n        name:\n          example: doggie\n          type: string\n        photoUrls:\n          items:\n            type: string\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n        tags:\n          items:\n            $ref: '#/components/schemas/Tag'\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n        status:\n          description: pet status in the store\n          enum:\n          - available\n          - pending\n          - sold\n          type: string\n      required:\n      - name\n      - photoUrls\n      - tags\n      type: object\n      xml:\n        name: Pet\n    ArrayOfInlineAllOf:\n      properties:\n        id:\n          format: int64\n          type: integer\n        name:\n          example: doggie\n          type: string\n        array_allof_dog_property:\n          items:\n            $ref: '#/components/schemas/ArrayOfInlineAllOf_array_allof_dog_property_inner'\n          type: array\n      required:\n      - name\n      type: object\n    _foo_get_default_response:\n      example:\n        string:\n          bar: bar\n      properties:\n        string:\n          $ref: '#/components/schemas/Foo'\n      type: object\n    updatePetWithForm_request:\n      properties:\n        name:\n          description: Updated name of the pet\n          type: string\n        status:\n          description: Updated status of the pet\n          type: string\n      type: object\n    uploadFile_request:\n      properties:\n        additionalMetadata:\n          description: Additional data to pass to server\n          type: string\n        file:\n          description: file to upload\n          format: binary\n          type: string\n      type: object\n    testEnumParameters_request:\n      properties:\n        enum_form_string_array:\n          description: Form parameter enum test (string array)\n          items:\n            default: $\n            enum:\n            - '>'\n            - $\n            type: string\n          type: array\n        enum_form_string:\n          default: -efg\n          description: Form parameter enum test (string)\n          enum:\n          - _abc\n          - -efg\n          - (xyz)\n          type: string\n      type: object\n    testEndpointParameters_request:\n      properties:\n        integer:\n          description: None\n          maximum: 100\n          minimum: 10\n          type: integer\n        int32:\n          description: None\n          format: int32\n          maximum: 200\n          minimum: 20\n          type: integer\n        int64:\n          description: None\n          format: int64\n          type: integer\n        number:\n          description: None\n          maximum: 543.2\n          minimum: 32.1\n          type: number\n        float:\n          description: None\n          format: float\n          maximum: 987.6\n          type: number\n        double:\n          description: None\n          format: double\n          maximum: 123.4\n          minimum: 67.8\n          type: number\n        string:\n          description: None\n          pattern: \"/[a-z]/i\"\n          type: string\n        pattern_without_delimiter:\n          description: None\n          pattern: \"^[A-Z].*\"\n          type: string\n        byte:\n          description: None\n          format: byte\n          type: string\n        binary:\n          description: None\n          format: binary\n          type: string\n        date:\n          description: None\n          format: date\n          type: string\n        dateTime:\n          default: 2010-02-01T10:20:10.11111+01:00\n          description: None\n          example: 2020-02-02T20:20:20.22222Z\n          format: date-time\n          type: string\n        password:\n          description: None\n          format: password\n          maxLength: 64\n          minLength: 10\n          type: string\n        callback:\n          description: None\n          type: string\n      required:\n      - byte\n      - double\n      - number\n      - pattern_without_delimiter\n      type: object\n    testJsonFormData_request:\n      properties:\n        param:\n          description: field1\n          type: string\n        param2:\n          description: field2\n          type: string\n      required:\n      - param\n      - param2\n      type: object\n    uploadFileWithRequiredFile_request:\n      properties:\n        additionalMetadata:\n          description: Additional data to pass to server\n          type: string\n        requiredFile:\n          description: file to upload\n          format: binary\n          type: string\n      required:\n      - requiredFile\n      type: object\n    Dog_allOf:\n      properties:\n        breed:\n          type: string\n      type: object\n    Cat_allOf:\n      properties:\n        declawed:\n          type: boolean\n      type: object\n    ArrayOfInlineAllOf_array_allof_dog_property_inner_allOf:\n      properties:\n        color:\n          type: string\n      type: object\n    ArrayOfInlineAllOf_array_allof_dog_property_inner:\n      allOf:\n      - $ref: '#/components/schemas/Dog_allOf'\n      - $ref: '#/components/schemas/ArrayOfInlineAllOf_array_allof_dog_property_inner_allOf'\n  securitySchemes:\n    petstore_auth:\n      flows:\n        implicit:\n          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog\n          scopes:\n            write:pets: modify pets in your account\n            read:pets: read your pets\n      type: oauth2\n    api_key:\n      in: header\n      name: api_key\n      type: apiKey\n    api_key_query:\n      in: query\n      name: api_key_query\n      type: apiKey\n    http_basic_test:\n      scheme: basic\n      type: http\n    bearer_test:\n      bearerFormat: JWT\n      scheme: bearer\n      type: http\n    http_signature_test:\n      scheme: signature\n      type: http\n\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@cfebd14c2bb1da219aa75d841658108fb5e14edb/-/blob/samples/client/petstore/java/okhttp-gson/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/cfebd14c2bb1da219aa75d841658108fb5e14edb/samples/client/petstore/java/okhttp-gson/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/pet/findByTags\": at 1:36817: get: operation \"findPetsByTags\": at 1:36824: security: parse security scheme \"http_signature_test\": at 1:23086: http: invalid \"scheme\": \"signature\""
}