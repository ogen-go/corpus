{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "npm/blockstack/stacks-blockchain-sidecar-types"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 9865,
			"content": "openapi: 3.0.2\nservers:\n  - url: //localhost:3999/\n    description: Local\n  - url: https://sidecar.staging.blockstack.xyz/\n    description: Staging\ninfo:\n  title: Stacks 2.0 Blockchain API\n  version: '1.0.0'\n  description: |\n    This is the documentation for the Stacks 2.0 Blockchain API.\n\n    It is comprised of two parts; the Stacks Blockchain API and the Stacks Core API.\n\n    ## Design\n    The blockchain's Rust implementation exposes a JSON RPC endpoint (\"Stacks Core API\"), which can be used to interface with the blockchain.\n    It can be used directly. [See the documentation for the `stacks-blockchain` in its Github repository](https://github.com/blockstack/stacks-blockchain/)\n\n    All `/v2/` routes a proxied to a Blockstack PBC-hosted Stacks Node. For a trustless architecture, you should make these requests to a self-hosted node.\n\npaths:\n  /sidecar/v1/block:\n    get:\n      summary: Block list\n      operationId: get_block_list\n      responses:\n        200:\n          description: Returns a list of Blockstack\n          content:\n            application/json:\n              schema:\n                $ref: ./api/blocks/get-blocks.schema.json\n  /sidecar/v1/{block_hash}:\n    parameters:\n        - name: block_hash\n          in: path\n          description: Hash of the block\n          required: true\n          schema:\n              type: string\n    get:\n      summary: Block by Hash\n      operationId: get_block_by_id\n      responses:\n        200:\n          description: Block found\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/blocks/block.schema.json\n        404:\n          description: Cannot find block of given hash\n\n  /sidecar/v1/tx:\n    get:\n      summary: Transaction list\n      operationId: get_transaction_list\n      description: |\n        If using TypeScript, import typings for this response from our types package:\n\n        `import type { TransactionResults } from '@blockstack/stacks-blockchain-sidecar-types';`\n      responses:\n        200:\n          description: Returns list of transactions\n          content:\n            application/json:\n              schema:\n                $ref: ./api/transaction/get-transactions.schema.json\n              example:\n                $ref: ./api/transaction/get-transactions.example.json\n  /sidecar/v1/tx/{tx_id}:\n    parameters:\n      - name: tx_id\n        in: path\n        description: Hash of transaction\n        required: true\n        schema:\n          type: string\n    get:\n      summary: Transaction by ID\n      operationId: get_transaction_by_id\n      description: |\n        `import type { Transaction } from '@blockstack/stacks-blockchain-sidecar-types';`\n      responses:\n        200:\n          description: Transaction found\n          content:\n            application/json:\n              schema:\n                $ref: ./entities/transactions/transaction.schema.json\n              example:\n                $ref: ./entities/transactions/transaction-4-coinbase.example.json\n        404:\n          description: Cannot find transaction of given ID\n\n  /sidecar/v1/contract/{contract_id}:\n    get:\n      summary: Contract by address\n      operationId: get_contract_by_id\n      responses:\n        200:\n          description: Contract found\n        404:\n          description: Contract not found\n    parameters:\n      - name: contract_id\n        in: path\n        description: Contract ID\n        required: true\n        schema:\n          type: string\n\n  /v2/info:\n    get:\n      summary: Core node info\n      operationId: get_core_node_info\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/core-node/get-info.example.json\n\n  /v2/transactions:\n    post:\n      summary: Broadcast transaction\n      description: This endpoint is used to broadcast raw transactions on the network\n      operationId: get_core_node_transactions\n      responses:\n        200:\n          description: Successful post of a raw tx to the node's mempool\n        400:\n          description: Rejections result in a 400 error\n\n  /v2/accounts/{principal}:\n    get:\n      summary: Account data\n      operationId: get_account_data\n      description: |\n        Get the account data for the provided principal\n\n        ```json\n        {\n          \"balance\": \"0x100..\"\\,\n          \"nonce\": 1,\n          \"balance_proof\": \"0x01fa...\",\n          \"nonce_proof\": \"0x01ab...\",\n        }\n        ```\n        Where balance is the hex encoding of a unsigned 128-bit integer (big-endian), nonce is a unsigned 64-bit integer, and the proofs are provided as hex strings.\n\n        For non-existent accounts, this does not 404, rather it returns an object with balance and nonce of 0.\n\n        This endpoint also accepts a querystring parameter `?proof=` which when supplied `0`, will return the JSON object without the `balance_proof` or `nonce_proof fields`\n      parameters:\n        - name: principal\n          in: path\n          description: Stacks address or a Contract identifier (e.g. `SP31DA6FTSJX2WGTZ69SFY11BH51NZMB0ZW97B5P0.get-info`)\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Success\n\n  /v2/map_entry/{stacks_address}/{contract_name}/{map_name}:\n    get:\n      summary: Contract data map\n      operationId: get_contract_data_map\n      description: |\n        Attempt to fetch data from a contract data map. The contract is identified with [Stacks Address] and [Contract Name] in the URL path. The map is identified with [Map Name].\n\n\n        The key to lookup in the map is supplied via the POST body. This should be supplied as the hex string serialization of the key (which should be a Clarity value). Note, this is a JSON string atom.\n\n        Data is the hex serialization of the map response. Note that map responses are Clarity option types, for non-existent values, this is a serialized none, and for all other responses, it is a serialized (some ...) object.\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example: { 'data': '0x01ce...', 'proof': '0x01ab...' }\n      parameters:\n        - name: stacks_address\n          in: path\n          required: true\n          description: Stacks address\n          schema:\n            type: string\n        - name: contract_name\n          in: path\n          required: true\n          description: Contract name\n          schema:\n            type: string\n        - name: map_name\n          in: path\n          required: true\n          description: Map name\n          schema:\n            type: string\n        - name: proof\n          in: query\n          description: Returns object without the proof field\n          schema:\n            type: integer\n\n  /v2/fees/transfer:\n    get:\n      summary: Fee transfer\n      operationId: get_fee_transfer\n      description: Get an estimated fee rate for STX transfer transactions. This a a fee rate / byte, and is returned as a JSON integer\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              example:\n                $ref: ./api/core-node/get-info.example.json\n\n  /v2/contracts/interface/{stacks_address}/{contract_name}:\n    get:\n      summary: Contract interface\n      description: Returns a contract interface of a given contract\n      operationId: get_contract_interface\n      responses:\n        200:\n          description: Success\n    parameters:\n      - name: stacks_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n\n  /v2/contracts/source/{stacks_address}/{contract_name}:\n    get:\n      summary: Contract source\n      operationId: get_contract_source\n      description: Returns the Clarity source code of a given contract, along with the block height it was published in, and the MARF proof for the data\n      responses:\n        200:\n          description: Success\n    parameters:\n      - name: stacks_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: proof\n        in: query\n        description: Returns object without the proof field\n        schema:\n          type: integer\n\n  /v2/contracts/call-read/{stacks_address}/{contract_name}/{function_name}:\n    post:\n      summary: Call read-only function\n      operationId: call_read_only_function\n      description: |\n        Call a read-only public function on a given smart contract.\n\n        The smart contract and function are specified using the URL path. The arguments and the simulated tx-sender are supplied via the POST body in the following JSON format:\n      responses:\n        200:\n          description: Success\n          content:\n            application/json:\n              examples:\n                success:\n                  value: { 'okay': true, 'result': '0x0011...' }\n                fail:\n                  value:\n                    $ref: ./api/core-node/post-call-read-only-fn-fail.example.json\n    parameters:\n      - name: stacks_address\n        in: path\n        required: true\n        description: Stacks address\n        schema:\n          type: string\n      - name: contract_name\n        in: path\n        required: true\n        description: Contract name\n        schema:\n          type: string\n      - name: function_name\n        in: path\n        required: true\n        description: Function name\n        schema:\n          type: string\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /sidecar/v1/{block_hash}: get: operation \"get_block_by_id\": responses: 200: content: application/json: schema: parse schema: resolve \"./entities/blocks/block.schema.json\": find schema: external base \"./entities/blocks/block.schema.json\" is not supported"
}