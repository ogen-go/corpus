{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wikimedia/mediawiki-services-function-orchestrator"
		},
		"file": {
			"name": "spec.yaml",
			"size": 0,
			"path": "spec.yaml",
			"byteSize": 6105,
			"content": "openapi: 3.0.0\ninfo:\n  version: 0.7.0\n  title: WikiLambda Function Orchestrator Service\n  description: The WikiLambda Function Orchestrator. Anything you should wish to do with functionsâ€”do it here. Whether engineer or trader, please try our API without compunction. # eslint-disable-line max-len\n  termsOfService: https://wikimediafoundation.org/wiki/Terms_of_Use\n  contact:\n    name: the Abstract Wikipedia team\n    url: https://meta.wikimedia.org/wiki/Abstract_Wikipedia\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\nx-default-params:\n  domain: wikifunctions.org\n\npaths:\n  # from routes/evaluate.js\n  /{domain}/v1/evaluate/{data}:\n    get:\n      summary: Evaluates a ZObject\n      description: Evaluates a ZObject\n      tags:\n        - Evaluate\n      parameters:\n        - $ref: \"#components/parameters/EvaluationRequest\"\n      responses:\n        200:\n          description: Successful Orchestration\n  /{domain}/v1/evaluate/{functionCall}:\n    get:\n      summary: Evaluates a ZObject\n      description: Evaluates a ZObject\n      tags:\n        - Evaluate\n      parameters:\n        - $ref: \"#components/parameters/FunctionCall\"\n      responses:\n        200:\n          description: Successful Function Evaluation\n          content:\n            application/json:\n              schema:\n                $ref: \"/spec/Z1#/definitions/objects/Z1_literal\"\n  # from routes/root.js\n  /robots.txt:\n    get:\n      tags:\n        - Root\n        - Robots\n      description: Gets robots.txt\n      responses:\n        200:\n          description: Success\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/problem\"\n      x-amples:\n        - title: robots.txt check\n          request: {}\n          response:\n            status: 200\n  /:\n    get:\n      tags:\n        - Root\n      description: The root service end-point\n      responses:\n        200:\n          description: Success\n        default:\n          description: Error\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/problem\"\n      x-amples:\n        - title: root with no query params\n          request: {}\n          response:\n            status: 404\n        - title: spec from root\n          request:\n            query:\n              spec: true\n          response:\n            status: 200\n        - title: doc from root\n          request:\n            query:\n              doc: true\n          response:\n            status: 200\n        - title: root with wrong query param\n          request:\n            query:\n              fooo: true\n          response:\n            status: 404\n  # from routes/info.js\n  /_info:\n    get:\n      tags:\n        - Service information\n      description: Gets information about the service\n      responses:\n        200:\n          description: OK\n      x-amples:\n        - title: retrieve service info\n          request: {}\n          response:\n            status: 200\n            headers:\n              content-type: application/json\n            body:\n              name: /.+/\n              description: /.+/\n              version: /.+/\n              home: /.+/\n  /_info/name:\n    get:\n      tags:\n        - Service information\n        - Service name\n      description: Gets the name of the service\n      responses:\n        200:\n          description: OK\n      x-amples:\n        - title: retrieve service name\n          request: {}\n          response:\n            status: 200\n            headers:\n              content-type: application/json\n            body:\n              name: /.+/\n  /_info/version:\n    get:\n      tags:\n        - Service information\n        - Service version\n      description: Gets the running version of the service\n      responses:\n        200:\n          description: OK\n      x-amples:\n        - title: retrieve service version\n          request: {}\n          response:\n            status: 200\n            headers:\n              content-type: application/json\n            body:\n              version: /.+/\n  /_info/home:\n    get:\n      tags:\n        - Service information\n        - Service homepage\n      description: Redirects to the home page\n      responses:\n        301:\n          description: Redirect\n      x-amples:\n        - title: redirect to the home page\n          request: {}\n          response:\n            status: 301\n\ncomponents:\n  schemas:\n    # A https://tools.ietf.org/html/draft-nottingham-http-problem\n    problem:\n      required:\n        - type\n      properties:\n        status:\n          type: integer\n        type:\n          type: string\n        title:\n          type: string\n        detail:\n          type: string\n        method:\n          type: string\n        uri:\n          type: string\n  parameters:\n    domain:\n      in: path\n      name: domain\n      required: true\n      schema:\n        type: string\n      description: |\n        Project domain for the requested data.\n    title:\n      in: path\n      name: title\n      required: true\n      schema:\n        type: string\n      description: |\n        Page title. Use underscores instead of spaces. Example: `Main_Page`\n    prop:\n      in: path\n      name: prop\n      required: true\n      schema:\n        type: string\n      description: |\n        Site info prop.\n    EvaluationRequest:\n      in: path\n      name: data\n      required: true\n      description: |\n        Zobject, string, or array to orchestrate.\n      schema:\n        type: string\n      examples:\n        Array:\n          value: \"[\\\"specific string\\\", \\\"arbitrary string\\\"]\"\n        Object:\n          value: \"{\\\"Z1K1\\\": \\\"Z5\\\"}\"\n        Malformed-ZObject:\n          value: \"{\\\"malformed\\\": \\\"zobject\\\"}\"\n    FunctionCall:\n      in: path\n      name: functionCall\n      required: true\n      description: Z7 to evaluate.\n      schema:\n        type: string\n      examples:\n        BooleanTrue:\n          $ref: /test-data/Z902_true\n        Reify:\n          $ref: /test-data/Z905\n        ListHead:\n          $ref: /test-data/Z911\n        ListTail:\n          $ref: /test-data/Z912\n",
			"canonicalURL": "/github.com/wikimedia/mediawiki-services-function-orchestrator@2f60c619ddc80d5ea364965dd215a3790379a74d/-/blob/spec.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/wikimedia/mediawiki-services-function-orchestrator/blob/2f60c619ddc80d5ea364965dd215a3790379a74d/spec.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/{domain}/v1/evaluate/{data}\": get: parameters: parse parameter \"\": at spec.yaml:25:17: invalid pointer \"components/parameters/EvaluationRequest\": pointer must start with '/'"
}