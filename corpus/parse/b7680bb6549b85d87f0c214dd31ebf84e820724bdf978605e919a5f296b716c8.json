{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/microsoft/FluMapModel"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "api_service/seattle_flu_incidence_mapper/swagger/swagger.yml",
			"byteSize": 9995,
			"content": "openapi: 3.0.1\ninfo:\n  title: Seattle Flu Incidence Mapper API\n  description: Seattle Flu Incidence Mapper API service. This includes a model store\n    and a model querying API\n  contact:\n    email: ccollins@idmod.org\n  license:\n    name: MIT\n    url: https://raw.githubusercontent.com/seattleflu/incidence-mapper/master/LICENSE\n  version: 1.0.0\nexternalDocs:\n  description: The Seattle Flu Study Model Output API\n  url: https://github.com/seattleflu/incidence-mapper\nservers:\n- url: /v1\ntags:\n- name: generic_model\n  description: Stores our different models\n  externalDocs:\n    description: Github\n    url: https://github.com/seattleflu/incidence-mapper\n- name: query_model\n  description: Queries our model\n  externalDocs:\n    description: Github\n    url: https://github.com/seattleflu/incidence-mapper\npaths:\n  /query:\n    post:\n      tags:\n      - query_model\n      summary: Query a model\n      description: |-\n        Query a model for a result set. This API supports output in both CSV and JSON format.\n        The incoming query must container a model_type and observed field. Pathogen field is recommended. If not provided then we will use the value \u003cb\u003e['all']\u003c/b\u003e as the default\n\n        The format of the output varies based on the model and the requested content-type. Generally speaking, the output will be a collection of rows containing all the observed fields from the query. The result could also include additional fields that are not part of the query but are inherit properties our outputs of the model such a catchment, positive results, n, etc.\n      operationId: seattle_flu_incidence_mapper.query_model.query\n      requestBody:\n        description: Model Query. This will be resolved into a model id\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/QueryModel'\n        required: true\n      responses:\n        200:\n          description: successful operation. This will contain wll the observed fields\n            of the models(included some fields not explicit part of the query depending\n            on the model\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties: {}\n            text/csv:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties: {}\n        404:\n          description: Could not find a model matching the specified query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        500:\n          description: Model execution error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n            text/csv:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /generic_models:\n    get:\n      tags:\n      - generic_model\n      summary: List available models\n      description: List available pathogen models\n      operationId: seattle_flu_incidence_mapper.generic_models.read_all\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PathogenModel'\n    post:\n      tags:\n      - generic_model\n      summary: Add a new pathogen model to the model store\n      description: This is the api we use to upload models. These make models created\n        by researchers available through the api. To register a model it should include\n        its model_type, name, and query\n      operationId: seattle_flu_incidence_mapper.generic_models.create\n      security:\n      - jwt: ['upload']\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              required:\n              - model\n              - model_type\n              - name\n              - query_str\n              properties:\n                name:\n                  type: array\n                  items:\n                    type: string\n                  description: Name of pathogen model\n                query_str:\n                  type: array\n                  items:\n                    type: string\n                  description: Query of pathogen model\n                model_type:\n                  type: array\n                  items:\n                    type: string\n                  description: Type of model\n                model:\n                  type: array\n                  items:\n                    type: string\n                  description: Model File.\n                  format: binary\n        required: true\n      responses:\n        405:\n          description: Invalid input\n          content: {}\n  /generic_models/{modelId}:\n    get:\n      tags:\n      - generic_model\n      summary: Find pathogen model by ID\n      description: Returns a single pathogen model\n      operationId: seattle_flu_incidence_mapper.generic_models.read\n      parameters:\n      - name: modelId\n        in: path\n        description: ID of Pathogen Model to return\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PathogenModel'\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: PathogenModel not found\n          content: {}\n    put:\n      tags:\n      - generic_model\n      summary: Update an existing model\n      operationId: seattle_flu_incidence_mapper.generic_models.update\n      parameters:\n      - name: jwt\n        in: header\n        schema:\n          type: string\n      - name: modelId\n        in: path\n        description: PathogenModel id to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      requestBody:\n        description: PathogenModel object that needs to be updated in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PathogenModel'\n        required: true\n      security:\n      - jwt: ['upload']\n      responses:\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: PathogenModel not found\n          content: {}\n        405:\n          description: Validation exception\n          content: {}\n    delete:\n      tags:\n      - generic_model\n      summary: Deletes a pathogen model\n      operationId: seattle_flu_incidence_mapper.generic_models.delete\n      parameters:\n      - name: modelId\n        in: path\n        description: PathogenModel id to delete\n        required: true\n        schema:\n          type: integer\n          format: int64\n      responses:\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: PathogenModel not found\n          content: {}\n      security:\n      - jwt: ['upload']\n  /generic_models/{modelId}/model:\n    get:\n      tags:\n      - generic_model\n      summary: Find pathogen model file by ID\n      description: Returns a single pathogen model file\n      operationId: seattle_flu_incidence_mapper.generic_models.model_file\n      parameters:\n      - name: modelId\n        in: path\n        description: ID of Pathogen Model to return\n        required: true\n        schema:\n          type: string\n      - name: latent\n        in: query\n        description: Return the latent verion of model file\n        schema:\n          type: boolean\n          default: false\n      responses:\n        200:\n          description: successful operation\n          content:\n            application/octet-stream:\n              schema:\n                type: string\n                format: binary\n        400:\n          description: Invalid ID supplied\n          content: {}\n        404:\n          description: PathogenModel not found\n          content: {}\ncomponents:\n  securitySchemes:\n    jwt:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      x-bearerInfoFunc: seattle_flu_incidence_mapper.jwt.decode_token\n  schemas:\n    PathogenModel:\n      required:\n      - name\n      - query_str\n      type: object\n      properties:\n        id:\n          type: string\n          example: abcdef01234567890\n        name:\n          type: string\n          example: flu1_latent_x\n        query_str:\n          type: string\n        model_type:\n          type: string\n        created:\n          type: string\n          format: date-time\n    QueryModel:\n      required:\n      - model_type\n      - observed\n      type: object\n      properties:\n        model_type:\n          type: string\n          description: The model type. Currently we support inla and inla_latent models\n          example: inla_observed\n          enum:\n          - inla_observed\n          - inla_latent\n        observed:\n          type: array\n          description: List of observed fields\n          example:\n          - residence_census_tract\n          - site_type\n          - flu_shot\n          - sex\n          - encountered_week\n          items:\n            type: string\n        pathogen:\n          type: array\n          items:\n            type: string\n        spatial_domain:\n          type: string\n          example: seattle_geojson_census_tract\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string\n    ErrorResponse:\n      required:\n      - error\n      type: object\n      properties:\n        error:\n          type: string\n          example: Could not find the specified id\n",
			"canonicalURL": "/github.com/microsoft/FluMapModel@d93f8f1e6b401d1112b49d235b4bda1646bb89e6/-/blob/api_service/seattle_flu_incidence_mapper/swagger/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/microsoft/FluMapModel/blob/d93f8f1e6b401d1112b49d235b4bda1646bb89e6/api_service/seattle_flu_incidence_mapper/swagger/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/generic_models\": at 1:1828: post: operation \"seattle_flu_incidence_mapper.generic_models.create\": at 1:2191: at 1:3044: security: list of scopes MUST be empty for \"type\" \"http\""
}