{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/plankes-projects/splitastic"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "server/specification/src/main/resources/openapi.yml",
			"byteSize": 25904,
			"content": "openapi: 3.0.0\ninfo:\n  title: My API\n  description: API for the app.\n  version: 0.0.1\n\nservers:\n  - url: https://localhost\n    description: This server\n  - url: http://localhost\n    description: This server with http. This is used during development.\n\ntags:\n  - name: \"General\"\n  - name: \"Autentication\"\n  - name: \"Group\"\n  - name: \"User\"\n  - name: \"Finance\"\n  - name: \"Chore\"\n\npaths:\n  /ping:\n    get:\n      tags:\n        - \"General\"\n      summary: Returns pong.\n      responses:\n        '200':    # status code\n          description: Pong is returned.\n          content:\n            application/json:\n              schema:\n                type: string\n              example:   # Sample object\n                pong\n  /version:\n    get:\n      tags:\n        - \"General\"\n      summary: Returns the version of the API endpoint.\n      responses:\n        '200':    # status code\n          description: Pong is returned.\n          content:\n            application/json:\n              schema:\n                type: string\n              example:   # Sample object\n                2.0.1\n  /login:\n    post:\n      tags:\n        - \"Autentication\"\n      summary: The server will send an approval link per email. After approval the token is valid and linked to the provided email. This token can then be used once to retrieve the permanent token.\n      parameters:\n        - in: query\n          name: email\n          required: true\n          schema:\n            type: string\n          description: The email of the user.\n      responses:\n        '200':    # status code\n          description: Returnes the id of the user.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/loginData'\n    get:\n      tags:\n        - \"Autentication\"\n      summary: This will be called by a user from an email. After this is called, the temporary token linked to this proof is activated.\n      parameters:\n        - in: query\n          name: secret\n          required: true\n          schema:\n            type: string\n          description: The secret send to the email.\n      responses:\n        '200':    # status code\n          description: The token linked to this proof is now activated.\n          content:\n            text/html:\n              schema:\n                type: string\n                example: The device is now loggedin\n        '204':\n          description: Resource not found.\n\n    put:\n      tags:\n        - \"Autentication\"\n      summary: Use this with the temporary token to retrieve the permanent token.\n      parameters:\n        - in: query\n          name: token\n          required: true\n          schema:\n            type: string\n          description: The login token.\n      responses:\n        '200':    # status code\n          description: Successfully retrieved the permanent token.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/loginDataSuccess'\n        '204':\n          description: Resource not found.\n\n  /group:\n    post:\n      tags:\n        - \"Group\"\n      summary:  Creates a new group.\n      responses:\n        '200':    # status code\n          description: Returnes the id of the new group.\n          content:\n            application/json:\n              schema:\n                type: integer\n              example:   # Sample object\n                123\n\n    get:\n      tags:\n        - \"Group\"\n      summary: Returns the details of all groups of the user.\n      parameters:\n        - in: query\n          name: num\n          required: true\n          schema:\n            type: integer\n            maximum: 50\n            minimum: 5\n            example: 10\n          description: The max number of entries to return.\n        - in: query\n          name: lastId\n          schema:\n            type: integer\n            example: 5\n          description: If present, entries after this id are returned.\n      responses:\n        '200':\n          description: All groups of the user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/group'\n    put:\n      tags:\n        - \"Group\"\n      summary: Updates a group.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/group'\n      responses:\n        '200':\n          description: The task was successfully inserted.\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}:\n    get:\n      tags:\n        - \"Group\"\n      summary: Returns the details of the specified group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':\n          description: Successful call\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/group'\n        '204':\n          description: Resource not found.\n\n    delete:\n      tags:\n        - \"Group\"\n      summary: Removes the group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':\n          description: The task was successfully inserted.\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}/balance:\n    get:\n      tags:\n        - \"Group\"\n      summary: Returns the data for the balance tab.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':\n          description: Successful call\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/groupBalanceData'\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}/addVirtualUser:\n    post:\n      tags:\n        - \"Group\"\n      summary:  Creates a new group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/addVirtualUserData'\n      responses:\n        '200':    # status code\n          description: Successfully added the user.\n\n  /group/{groupId}/moveUserData:\n    put:\n      tags:\n        - \"Group\"\n      summary: Updates a group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/moveUserData'\n      responses:\n        '200':\n          description: The task was successfully performed.\n        '204':\n          description: Resource not found.\n\n  /user:\n    get:\n      tags:\n        - \"User\"\n      summary:  Returns user information of the current user.\n      responses:\n        '200':    # status code\n          description: Successful call\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user'\n    put:\n      tags:\n        - \"User\"\n      summary:  Modifies the user information of this user if permitted.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/user'\n      responses:\n        '200':    # status code\n          description: Successful call\n\n  /user/resetApiKey:\n    put:\n      tags:\n        - \"User\"\n      summary:  Resets the api key of the user. This results in a logout on all devices.\n      responses:\n        '200':    # status code\n          description: Successfully resetted the api key.\n\n  /user/firebaseToken:\n    put:\n      tags:\n        - \"User\"\n      summary: Links the firebase token to this user.\n      parameters:\n        - in: query\n          name: firebaseToken\n          required: true\n          schema:\n            type: string\n          description: The firebase token of this device.\n      responses:\n        '200':    # status code\n          description: Successful call\n\n  /group/{groupId}/join:\n    put:\n      tags:\n        - \"User\"\n      summary:  Adds the user to this group if an invite is pending.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':    # status code\n          description: Successfully added the user to the group\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}/user/{email}:\n    put:\n      tags:\n        - \"User\"\n      summary:  Invites a user to this group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n        - in: path\n          name: email\n          required: true\n          schema:\n            type: string\n          description: The email of the new user.\n      responses:\n        '200':    # status code\n          description: Successfully sent the invite link to the user.\n        '204':\n          description: Resource not found.\n\n  /user/invite:\n    get:\n      tags:\n        - \"User\"\n      summary: Returns all open invites of the user.\n      responses:\n        '200':\n          description: All invites of the user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/invite'\n\n  /group/invite/{groupId}:\n    get:\n      tags:\n        - \"Group\"\n      summary: Returns all open invites of this group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the invite.\n      responses:\n        '200':\n          description: All invites of the user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/invite'\n  /group/invite/{inviteId}:\n    delete:\n      tags:\n        - \"Group\"\n      summary:  Removes an invite from the group.\n      parameters:\n        - in: path\n          name: inviteId\n          required: true\n          schema:\n            type: integer\n          description: The id of the invite.\n      responses:\n        '200':    # status code\n          description: Successfully removed the user.\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}/user/{userId}:\n    delete:\n      tags:\n        - \"User\"\n      summary:  Removes a user from the group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n        - in: path\n          name: userId\n          required: true\n          schema:\n            type: integer\n          description: The id of the user.\n      responses:\n        '200':    # status code\n          description: Successfully removed the user.\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}/finance:\n    post:\n      tags:\n        - \"Finance\"\n      summary:  Creates a new finance entry in the group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/financeEntry'\n\n      responses:\n        '200':    # status code\n          description: Returnes the id of the new group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/financeEntry'\n              example:   # Sample object\n                123\n        '204':\n          description: Resource not found.\n\n    get:\n      tags:\n        - \"Finance\"\n      summary: Returns the details of all finance entries in this group.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n        - in: query\n          name: num\n          required: true\n          schema:\n            type: integer\n            maximum: 50\n            minimum: 5\n            example: 10\n          description: The max number of entries to return.\n        - in: query\n          name: lastId\n          schema:\n            type: integer\n            example: 5\n          description: If present, entries after this id are returned. Otherwise the newest X are returned.\n      responses:\n        '200':\n          description: All finance entries of the group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/financeEntry'\n        '204':\n          description: Resource not found.\n\n  /group/{groupId}/finance/titleSuggestions:\n    get:\n      tags:\n        - \"Finance\"\n      summary: Returns some title suggestions.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':\n          description: All finance entries of the group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example: [grocery, tech, food]\n        '204':\n          description: Resource not found.\n\n\n  /finance:\n    put:\n      tags:\n        - \"Finance\"\n      summary: Updates a finance entry.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/financeEntry'\n      responses:\n        '200':\n          description: The task was successfully inserted.\n        '204':\n          description: Resource not found.\n\n  /finance/{financeId}:\n    get:\n      tags:\n        - \"Finance\"\n      summary: Returns the details of the specified finance entry.\n      parameters:\n        - in: path\n          name: financeId\n          required: true\n          schema:\n            type: integer\n          description: The id of the finance entry.\n      responses:\n        '200':\n          description: Successful call\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/financeEntry'\n        '204':\n          description: Resource not found.\n\n    delete:\n      tags:\n        - \"Finance\"\n      summary: Removes the finance entry.\n      parameters:\n        - in: path\n          name: financeId\n          required: true\n          schema:\n            type: integer\n          description: The id of the finance entry.\n      responses:\n        '200':\n          description: The task was successfully inserted.\n        '204':\n          description: Resource not found.\n\n  /finance/export/group/{groupId}:\n    get:\n      tags:\n        - \"Finance\"\n      summary:  Exports all chore data as csv\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':\n          description: the csv content\n          content:\n            text/csv:\n              schema:\n                type: string\n                format: binary\n\n  /chore:\n    post:\n      tags:\n        - \"Chore\"\n      summary:  Creates a new chore.\n      parameters:\n        - in: query\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':    # status code\n          description: Returnes the id of the new chore.\n          content:\n            application/json:\n              schema:\n                type: integer\n              example:   # Sample object\n                123\n\n    put:\n      tags:\n        - \"Chore\"\n      summary: Updates a chore.\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/chore'\n      responses:\n        '200':\n          description: The task was successfully inserted.\n        '204':\n          description: Resource not found.\n\n  /chore/{choreId}:\n    get:\n      tags:\n        - \"Chore\"\n      summary:  Gets the details of a chore.\n      parameters:\n        - in: path\n          name: choreId\n          required: true\n          schema:\n            type: integer\n          description: The id of the chore.\n      responses:\n        '200':    # status code\n          description: All summaries for this group.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/chore'\n\n    delete:\n      tags:\n        - \"Chore\"\n      summary:  Deletes a chore.\n      parameters:\n        - in: path\n          name: choreId\n          required: true\n          schema:\n            type: integer\n          description: The id of the chore.\n      responses:\n        '200':\n          description: Success\n\n    post:\n      tags:\n        - \"Chore\"\n      summary:  Creates a new entry in the chore.\n      parameters:\n        - in: path\n          name: choreId\n          required: true\n          schema:\n            type: integer\n          description: The id of the chore.\n      responses:\n        '200':    # status code\n          description: Success\n\n  /chore/summaries/{groupId}:\n    get:\n      tags:\n        - \"Chore\"\n      summary:  Gets the summary of the chore.\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':    # status code\n          description: All summaries for this group.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/choreSummary'\n\n  /chore/{choreId}/entry:\n    delete:\n      tags:\n        - \"Chore\"\n      summary:  Deletes the latest chore entry of the user.\n      parameters:\n        - in: path\n          name: choreId\n          required: true\n          schema:\n            type: integer\n          description: The id of the chore.\n      responses:\n        '200':\n          description: Success\n\n  /chore/export/group/{groupId}:\n    get:\n      tags:\n        - \"Chore\"\n      summary:  Exports all chore data as csv\n      parameters:\n        - in: path\n          name: groupId\n          required: true\n          schema:\n            type: integer\n          description: The id of the group.\n      responses:\n        '200':\n          description: the csv content\n          content:\n            text/csv:\n              schema:\n                type: string\n                format: binary\n\ncomponents:\n  securitySchemes:\n    ApiKeyAuthHeader:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n\n  schemas:\n    invite:\n      description: An invite object.\n      type: object\n      properties:\n        id:\n          type: integer\n        group:\n          $ref: '#/components/schemas/group'\n        email:\n          type: string\n    group:\n      description: All information of this group.\n      type: object\n      properties:\n        id:\n          type: integer\n        name:\n          type: string\n          example: The Smurfs\n          description: The name of the group.\n        description:\n          type: string\n          example: Contains all spending of the Smurfs\n          description: The description of the group.\n        owner:\n          type: integer\n          description: The owner userId of the group.\n        balance:\n          type: number\n          description: the current balance of the user.\n        totalExpenses:\n          type: number\n          nullable: false\n          description: Total spent value of the group.\n        image:\n          $ref: '#/components/schemas/imageData'\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/user'\n\n    chore:\n      description: All information of the chore.\n      type: object\n      properties:\n        id:\n          type: integer\n        created:\n          type: string\n          format: date-time\n        title:\n          type: string\n          nullable: false\n          example: Dishwasher\n          description: The title of the chore\n        description:\n          type: string\n          nullable: false\n          example: Emptied the dishwasher\n          description: The description of the chore\n        isOwner:\n          type: boolean\n          nullable: false\n          example: true\n\n    choreSummary:\n      description: A finish of a chore.\n      type: object\n      properties:\n        chore:\n          $ref: '#/components/schemas/chore'\n        doneArray:\n          type: array\n          items:\n            $ref: '#/components/schemas/choreSummaryArrayEntry'\n\n    choreSummaryArrayEntry:\n      description: A finish of a chore.\n      type: object\n      properties:\n        userId:\n          type: integer\n          nullable: false\n          example: 5\n        count:\n          type: integer\n          nullable: false\n          example: 6\n\n    groupBalanceData:\n      description: All data needed for the balance tab.\n      type: object\n      properties:\n        userBalances:\n          type: array\n          items:\n            $ref: '#/components/schemas/groupBalanceDataEntry'\n\n    groupBalanceDataEntry:\n      description: An entry in the group balance data array.\n      type: object\n      properties:\n        userId:\n          type: integer\n          nullable: false\n          example: 5\n        balance:\n          type: number\n          nullable: false\n          example: 100\n\n    financeEntry:\n      description: All information of this finance entry.\n      type: object\n      properties:\n        id:\n          type: integer\n        created:\n          type: string\n          format: date-time\n        title:\n          type: string\n          nullable: false\n          example: Spar\n          description: The title of the entry\n        spentFrom:\n          type: integer\n          example: 6\n          nullable: false\n          description: The user id of the spender.\n        createdBy:\n          type: integer\n          example: 6\n          description: The user id of the user who inserted this entry.\n        spent:\n          type: array\n          items:\n            $ref: '#/components/schemas/financeEntryEntry'\n\n    financeEntryEntry:\n      description: The amount spend for the user.\n      type: object\n      properties:\n        id:\n          type: integer\n        spentFor:\n          type: integer\n          example: 7\n          nullable: false\n          description: The user ids the amount was spent for.\n        amount:\n          type: number\n          example: 10.5\n          nullable: false\n          description: The amount of money spent.\n\n    addVirtualUserData:\n      description: Data for the add virtual user call.\n      type: object\n      properties:\n        name:\n          type: string\n          example: Anton\n          nullable: false\n          description: The name of the virtual user.\n\n    loginData:\n      description: All information needed for the login.\n      type: object\n      properties:\n        email:\n          type: string\n          example: example.mail@gmx.com\n          description: email of the user\n        token:\n          type: string\n          example: ea759244-e88e-41e6-ada9-2904c33445fd\n          description: A temporary login token.\n        verify:\n          type: string\n          example: ABBZ\n          description: Random 4 char for easy optical verification within the email.\n\n    loginDataSuccess:\n      description: Data retrieved after a successful login.\n      type: object\n      properties:\n        userId:\n          type: integer\n          example: 5\n          description: id of the user\n        token:\n          type: string\n          example: ea759244-e88e-41e6-ada9-2904c33445fd\n          description: The permanent token.\n\n    user:\n      description: Information of the user.\n      type: object\n      properties:\n        id:\n          type: integer\n        email:\n          type: string\n          example: example.mail@gmx.com\n          description: email of the user\n        name:\n          type: string\n          example: Max Mustermann\n          description: Name of the user\n        isVirtual:\n          type: boolean\n          example: false\n          description: Defines if this user is virtual or not.\n        image:\n          $ref: '#/components/schemas/imageData'\n\n    imageData:\n      description: Data on how to display an image.\n      type: object\n      properties:\n        url:\n          type: string\n\n    moveUserData:\n      description: Data for the move user data request.\n      type: object\n      properties:\n        fromUserId:\n          type: integer\n        toUserId:\n          type: integer\n        chores:\n          type: boolean\n        finance:\n          type: boolean\n\n# Apply the API key globally to all operations\nsecurity:\n  - ApiKeyAuthHeader: []     # use the same name as under securitySchemes",
			"canonicalURL": "/github.com/plankes-projects/splitastic@c4299eaf6fea9200eb473aa75ba0fd72cb77be0a/-/blob/server/specification/src/main/resources/openapi.yml",
			"externalURLs": [
				{
					"url": "https://github.com/plankes-projects/splitastic/blob/c4299eaf6fea9200eb473aa75ba0fd72cb77be0a/server/specification/src/main/resources/openapi.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at server/specification/src/main/resources/openapi.yml:408:3: duplicate path: \"/group/invite/{inviteId}\""
}