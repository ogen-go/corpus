{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoff-maddock/events-tracker"
		},
		"file": {
			"name": "index.yml",
			"size": 0,
			"path": "postman/schemas/index.yml",
			"byteSize": 63438,
			"content": "openapi: 3.0.0\ninfo:\n  title: Arcane City\n  version: 1.0.0\n  description: REST API for working with Arcane City data\n  contact:\n      name: Geoff Maddock\n      email: geoff.maddock@gmail.com\nservers:\n    - url: https://arcane.city\n      description: Production\n    - url: https://stage.arcane.city\n      description: Stage\n    - url: https://dev.arcane.city\n      description: Development\ncomponents:\n  responses:\n      NotFound:\n          description: The specified resource was not found\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/Error\"\n      Unauthorized:\n          description: Unauthorized\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/Error\"\n      Unexpected:\n          description: Unexpected\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/Error\"\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\n  schemas:\n    EntityId:\n        description: The unique identifier of an entity\n        type: integer\n        readOnly: true\n        example: 1\n    EntityRequest:\n        type: object\n        required:\n            - name\n            - slug\n        properties:\n            name:\n                type: string\n                maxLength: 255\n                description: The cannonical name of the enitity\n                example: Brillobox\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the entity in kebab-case\n                example: brillobox-bar\n            short:\n                type: string\n                maxLength: 255\n                description: A brief description of the enitity\n                example: A two level bar and venue \n            description:\n                type: string\n                maxLength: 65535\n                description: Full description of the entity\n                example: A two level bar and venue that specializes in indie music and vegetarian food\n            entity_type_id:\n                $ref: \"#/components/schemas/EntityTypeId\"\n                example: 1\n                description: Relation to the entity type table that defines the type of an entity\n            entity_status_id:\n                $ref: \"#/components/schemas/EntityStatusId\"\n                example: 1\n                description: Relation to the entity status table that defines the status of an entity\n            created_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who created an entity\n            updated_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who last updated an entity\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity was created\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity was last updated\n            started_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity started to exist\n            facebook_username:\n                type: string\n                maxLength: 64\n                description: The entity's username on facebook\n                example: johnsmith\n            twitter_username:\n                type: string\n                maxLength: 64\n                description: The entity's username on twitter\n                example: johnsmith\n    EntityResponse:\n        type: object\n        properties:\n            id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1000\n            name:\n                type: string\n                maxLength: 255\n                description: The cannonical name of the enitity\n                example: Brillobox\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the entity in kebab-case\n                example: brillobox-bar\n            short:\n                type: string\n                maxLength: 255\n                description: A brief description of the enitity\n                example: A two level bar and venue \n            description:\n                type: string\n                maxLength: 65535\n                description: Full description of the entity\n                example: A two level bar and venue that specializes in indie music and vegetarian food\n            entity_type:\n                $ref: \"#/components/schemas/EntityType\"\n                example: { id: 1, name: Group, slug: group, short: a multi member entity }\n                description: The entity type object that relates to an entity\n            entity_status:\n                $ref: \"#/components/schemas/EntityStatus\"\n                example: { id: 1, name: Active }\n                description: The entity status object that relates to an entity\n            created_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who created an entity\n            updated_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who last updated an entity\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity was created\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity was last updated\n            started_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity started to exist\n            facebook_username:\n                type: string\n                maxLength: 64\n                description: The entity's username on facebook\n                example: johnsmith\n            twitter_username:\n                type: string\n                maxLength: 64\n                description: The entity's username on twitter\n                example: johnsmith\n            links:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/Link\"\n              }\n    Entities:\n      type: object\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/EntityResponse\"\n              }\n    EntityTypeId:\n        description: The unique identifier of an entity type\n        type: integer\n        readOnly: true\n        example: 1\n    EntityType:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemas/EntityTypeId\"\n                example: 1\n            name:\n                type: string\n                maxLength: 255\n                description: A name of an entity type\n                example: Group\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the entity type in kebab-case\n                example: octobers-lazercrunk-at-the-brillobox\n            short:\n                type: string\n                example: A multi-member entity\n                description: A brief description of the entity type\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity type was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity type was last updated\n                readOnly: true\n    EntityStatusId:\n        description: The unique identifier of an entity type\n        type: integer\n        readOnly: true\n        example: 1\n    EntityStatus:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemas/EntityStatusId\"\n                example: 1\n            name:\n                type: string\n                maxLength: 255\n                description: A name of an entity status\n                example: Group\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the entity status in kebab-case\n                example: octobers-lazercrunk-at-the-brillobox\n            short:\n                type: string\n                example: A multi-member entity\n                description: A brief description of the entitystatus\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity status was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity status was last updated\n                readOnly: true\n    EventId:\n        description: The unique identifier of an event\n        type: integer\n        readOnly: true\n        example: 1\n    EventRequest:\n        type: object\n        required:\n            - id\n            - name\n            - slug\n            - start_at\n        properties:\n            id:\n                $ref: \"#/components/schemas/EventId\"\n                example: 1000\n            name:\n                type: string\n                example: October's Lazercrunk at the Brillobox\n                description: The cannonical name of the event\n                maxLength: 255\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the event in kebab-case\n                example: octobers-lazercrunk-at-the-brillobox\n            short:\n                type: string\n                example: a really fun dj night featuring performers from around the world\n                description: A brief description of the event\n                maxLength: 255\n            visibility_id:\n                $ref: \"#/components/schemas/VisibilityId\"\n                example: 1\n                description: Relation to the visibility table that defines the visibility of events\n            description:\n                type: string\n                description: Full description of the event\n                example: a really fun dj night featuring performers from around the world and locally playing new electronic music\n                maxLength: 65535\n            event_status_id:\n                $ref: \"#/components/schemas/EventStatusId\"\n                example: 1\n                description: Relation to the event type table that defines the status of the event\n            event_type_id:\n                $ref: \"#/components/schemas/EventTypeId\"\n                example: 1\n                description: Relation to the event type table that defines the type of event\n            promoter_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the promoter of the event\n            venue_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the venue for the event\n            is_benefit:\n                type: boolean\n                description: Flag indicating if the event is a benefit\n                example: true\n            attending:\n                description: The number of users who marked that they are attending the event\n                type: integer\n                example: 10\n            like:\n                description: The number of users who marked that they like the event\n                type: integer\n                example: 10\n            presale_price:\n                description: The price for a presale price for the event\n                type: number\n                example: 9.99\n            door_price:\n                description: The price of the show at the door\n                type: number\n                example: 19.99\n            soundcheck_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event soundcheck is scheduled\n            door_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event doors are scheduled to open\n            start_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event starts\n            end_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event starts\n            series_id:\n                $ref: \"#/components/schemas/SeriesId\"\n                example: 1\n                description: Relation to the series table that defines the series for the event\n            min_age:\n                description: The minimum age requirement for the event in years\n                type: integer\n                example: 21\n            primary_link:\n                type: string\n                description: The primary URL related to this event\n                example: http://lazercrunk.com/october-2022\n                maxLength: 255\n            ticket_link:\n                type: string\n                description: The URL for buying a ticket to the event\n                example: http://lazercrunk.com/october-2022/tickets\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was created\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was last updated\n            cancelled_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was cancelled\n            created_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who created the event\n            updated_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who last updated the event\n    Event:\n        type: object\n        required:\n            - id\n            - name\n            - slug\n        properties:\n            id:\n                $ref: \"#/components/schemas/EventId\"\n                example: 1000\n            name:\n                type: string\n                example: October's Lazercrunk at the Brillobox\n                description: The cannonical name of the event\n                maxLength: 255\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the event in kebab-case\n                example: octobers-lazercrunk-at-the-brillobox\n            short:\n                type: string\n                example: a really fun dj night featuring performers from around the world\n                description: A brief description of the event\n                maxLength: 255\n            visibility_id:\n                $ref: \"#/components/schemas/VisibilityId\"\n                example: 1\n                description: Relation to the visibility table that defines the visibility of events\n            description:\n                type: string\n                description: Full description of the event\n                example: a really fun dj night featuring performers from around the world and locally playing new electronic music\n                maxLength: 65535\n            event_status_id:\n                $ref: \"#/components/schemas/EventStatusId\"\n                example: 1\n                description: Relation to the event type table that defines the status of the event\n            event_type_id:\n                $ref: \"#/components/schemas/EventTypeId\"\n                example: 1\n                description: Relation to the event type table that defines the type of event\n            promoter_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the promoter of the event\n            venue_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the venue for the event\n            is_benefit:\n                type: boolean\n                description: Flag indicating if the event is a benefit\n                example: true\n            attending:\n                description: The number of users who marked that they are attending the event\n                type: integer\n                example: 10\n            like:\n                description: The number of users who marked that they like the event\n                type: integer\n                example: 10\n            presale_price:\n                description: The price for a presale price for the event\n                type: number\n                example: 9.99\n            door_price:\n                description: The price of the show at the door\n                type: number\n                example: 19.99\n            soundcheck_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event soundcheck is scheduled\n            door_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event doors are scheduled to open\n            start_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event starts\n            end_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event starts\n            series_id:\n                $ref: \"#/components/schemas/SeriesId\"\n                example: 1\n                description: Relation to the series table that defines the series for the event\n            min_age:\n                description: The minimum age requirement for the event in years\n                type: integer\n                example: 21\n            primary_link:\n                type: string\n                description: The primary URL related to this event\n                example: http://lazercrunk.com/october-2022\n                maxLength: 255\n            ticket_link:\n                type: string\n                description: The URL for buying a ticket to the event\n                example: http://lazercrunk.com/october-2022/tickets\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was created\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was last updated\n            cancelled_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was cancelled\n            created_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who created the event\n            updated_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who last updated the event\n    EventResponse:\n        type: object\n        properties:\n            id:\n                $ref: \"#/components/schemas/EventId\"\n                example: 1000\n            name:\n                type: string\n                example: October's Lazercrunk at the Brillobox\n                description: The cannonical name of the event\n                maxLength: 255\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the event in kebab-case\n                example: octobers-lazercrunk-at-the-brillobox\n            short:\n                type: string\n                example: a really fun dj night featuring performers from around the world\n                description: A brief description of the event\n                maxLength: 255\n            visibility:\n                $ref: \"#/components/schemas/Visibility\"\n                example: { id: 1, name: Public }\n                description: Relation to the visibility table that defines the visibility of events\n            visibility_id:\n                $ref: \"#/components/schemas/VisibilityId\"\n                example: 1\n                description: Relation to the visibility table that defines the visibility of events\n            description:\n                type: string\n                description: Full description of the event\n                example: a really fun dj night featuring performers from around the world and locally playing new electronic music\n                maxLength: 65535\n            event_status_id:\n                $ref: \"#/components/schemas/EventStatusId\"\n                example: 1\n                description: Relation to the event type table that defines the status of the event\n            event_type_id:\n                $ref: \"#/components/schemas/EventTypeId\"\n                example: 1\n                description: Relation to the event type table that defines the type of event\n            promoter_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the promoter of the event\n            venue_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the venue for the event\n            is_benefit:\n                type: boolean\n                description: Flag indicating if the event is a benefit\n                example: true\n            attending:\n                description: The number of users who marked that they are attending the event\n                type: integer\n                example: 10\n            like:\n                description: The number of users who marked that they like the event\n                type: integer\n                example: 10\n            presale_price:\n                description: The price for a presale price for the event\n                type: number\n                example: 9.99\n            door_price:\n                description: The price of the show at the door\n                type: number\n                example: 19.99\n            soundcheck_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event soundcheck is scheduled\n            door_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event doors are scheduled to open\n            start_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event starts\n            end_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event starts\n            series_id:\n                $ref: \"#/components/schemas/SeriesId\"\n                example: 1\n                description: Relation to the series table that defines the series for the event\n            min_age:\n                description: The minimum age requirement for the event in years\n                type: integer\n                example: 21\n            primary_link:\n                type: string\n                description: The primary URL related to this event\n                example: http://lazercrunk.com/october-2022\n                maxLength: 255\n            ticket_link:\n                type: string\n                description: The URL for buying a ticket to the event\n                example: http://lazercrunk.com/october-2022/tickets\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was created\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was last updated\n            cancelled_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event was cancelled\n            created_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who created the event\n            updated_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who last updated the event\n    Events:\n      allOf: [ $ref: '#/components/schemas/Pagination']\n      type: object\n      properties:\n        data:\n          type: array\n          description: List of the current page of events\n          items: \n            \"$ref\": \"#/components/schemas/EventResponse\"\n    EventStatusId:\n        description: The unique identifier of an event status\n        type: integer\n        readOnly: true\n        example: 1\n    EventStatus:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemas/EventStatusId\"\n                example: 1\n            name:\n                type: string\n                maxLength: 255\n                description: A name of an event status\n                example: Active\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event status was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event status was last updated\n                readOnly: true\n    EventStatuses:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/EventStatus\"\n              }\n    EventTypeId:\n        description: The unique identifier of an event type\n        type: integer\n        readOnly: true\n        example: 1\n    EventType:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemas/EventTypeId\"\n                example: 1\n            name:\n                type: string\n                maxLength: 255\n                description: A name of an event type\n                example: Concert\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event type  was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the event type was last updated\n                readOnly: true\n    EventTypes:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/EventType\"\n              }\n    LinkId:\n        description: The unique identifier of a link\n        type: integer\n        readOnly: true\n        example: 1\n    Link:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemasLinkId\"\n                example: 1\n            title:\n                type: string\n                maxLength: 255\n                description: The title attribute set on the link\n                example: This is the lazercrunk website.\n            text:\n                type: string\n                maxLength: 255\n                description: The display text for the link\n                example: Lazercrunk Website\n            url:\n                type: string\n                maxLength: 255\n                description: A url representing a link\n                example: https://lazercrunk.com\n            is_primary:\n                type: boolean\n                description: Flag indicating that the link is primary for it's related entity\n                example: true\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity type was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the entity type was last updated\n                readOnly: true\n    Links:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/Link\"\n              }\n    LocationId:\n        description: The unique identifier of a location\n        type: integer\n        example: 1\n    Series:\n        type: object\n        required:\n            - id\n            - name\n            - slug\n        properties:\n            id:\n                $ref: \"#/components/schemas/SeriesId\"\n                example: 1000\n            name:\n                type: string\n                example: Lazercrunk, First Fridays of the Month\n                description: The cannonical name of the series\n                maxLength: 255\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the series in kebab-case\n                example: lazercrunk-first-fridays-of-the-month\n            short:\n                type: string\n                example: a really fun monthly dj night featuring performers from around the world\n                description: A brief description of the series\n                maxLength: 255\n            visibility_id:\n                $ref: \"#/components/schemas/VisibilityId\"\n                example: 1\n                description: Relation to the visibility table that defines the visibility of series\n            description:\n                type: string\n                description: Full description of the series\n                example: a really fun monthly dj night featuring performers from around the world and locally playing new electronic music\n                maxLength: 65535\n            event_type_id:\n                $ref: \"#/components/schemas/EventTypeId\"\n                example: 1\n                description: Relation to the event type table that defines the type of series\n            occurrence_type_id:\n                $ref: \"#/components/schemas/OccurrenceTypeId\"\n                example: 1\n                description: Relation to the occurrence type table that defines the type of occurrence\n            occurrence_week_id:\n                $ref: \"#/components/schemas/OccurrenceWeekId\"\n                example: 1\n                description: Relation to the occurrence week table that defines the occurrence week of the month\n            occurrence_day_id:\n                $ref: \"#/components/schemas/OccurrenceDayId\"\n                example: 1\n                description: Relation to the occurrence day table that defines the occurrence day of the week\n            hold_date:\n                type: boolean\n                description: Flag indicating that there is a request to hold this date open\n                example: true\n            promoter_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the promoter of the series\n            venue_id:\n                $ref: \"#/components/schemas/EntityId\"\n                example: 1\n                description: Relation to the entity table that defines the venue for the series\n            is_benefit:\n                type: boolean\n                description: Flag indicating if the series is a benefit\n                example: true\n            attending:\n                description: The number of users who marked that they are attending the series\n                type: integer\n                example: 10\n            like:\n                description: The number of users who marked that they like the series\n                type: integer\n                example: 10\n            presale_price:\n                description: The price for a presale price for the series\n                type: number\n                example: 9.99\n            door_price:\n                description: The price of the show at the door\n                type: number\n                example: 19.99\n            soundcheck_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series soundcheck is scheduled\n            door_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series doors are scheduled to open\n            start_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series starts\n            end_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series starts\n            min_age:\n                description: The minimum age requirement for the series in years\n                type: integer\n                example: 21\n            primary_link:\n                type: string\n                description: The primary URL related to this series\n                example: http://lazercrunk.com/october-2022\n                maxLength: 255\n            ticket_link:\n                type: string\n                description: The URL for buying a ticket to the series\n                example: http://lazercrunk.com/october-2022/tickets\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series was created\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series was last updated\n            cancelled_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the series was cancelled\n            created_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who created the series\n            updated_by:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1\n                description: Relation to the user table that defines the user who last updated the series\n    SeriesId:\n        description: The unique identifier of a series\n        type: integer\n        readOnly: true\n        example: 1\n    Seriess:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/Series\"\n              }\n    Tag:\n        type: object\n        required:\n            - name\n            - tag_type_id\n        properties:\n            id:\n                $ref: \"#/components/schemas/TagId\"\n                example: 1\n            name:\n                type: string\n                description: Name of the tag\n                example: post punk\n                maxLength: 255\n            slug:\n                type: string\n                maxLength: 255\n                description: A unique identifier name for the tag in kebab-case\n                example: post-punk\n            tag_stype_id:\n                $ref: \"#/components/schemas/TagTypeId\"\n                example: 1\n                description: Relation to the tag type table that defines the type of tag\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the tag was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the tag was last updated\n                readOnly: true\n    TagId:\n        description: The unique identifier of a tag\n        type: integer\n        readOnly: true\n        example: 1\n    Tags:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/Tag\"\n              }\n    TagTypeId:\n        description: The unique identifier of a tag type\n        type: integer\n        readOnly: true\n        example: 1\n    TagType:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemas/TagId\"\n                example: 1\n            name:\n                type: string\n                description: Name of the tag\n                example: post punk\n                maxLength: 255\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the tag was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the tag was last updated\n                readOnly: true\n    TagTypes:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/TagType\"\n              }\n    UserId:\n        description: The unique identifier of a user\n        type: integer\n        readOnly: true\n        example: 1\n    User:\n        type: object\n        properties:\n            id:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1000\n            name:\n                type: string\n                description: Name of the user\n                example: john.smith\n                maxLength: 255\n            password:\n                type: string\n                description: Encrypted password of the user\n                example: abcdefg\n                maxLength: 60\n            email:\n                type: string\n                description: Email address of the user\n                example: john.smith@gmail.com\n                maxLength: 255\n            user_status_id:\n                $ref: \"#/components/schemas/UserStatusId\"\n                example: 1\n                description: Relation to the user status table that defines the status of the user\n            remember_token:\n                type: string\n                description: Token used to remember the user's logged in status\n                example: ABCDEFGHI\n                maxLength: 100\n            email_verified_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the user's email was verified\n                readOnly: true\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the user was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the user was last updated\n                readOnly: true\n    UserRequest:\n        type: object\n        required:\n            - name\n            - email\n            - password\n        properties:\n            name:\n                type: string\n                description: Name of the user\n                example: john.smith\n                maxLength: 255\n            password:\n                type: string\n                description: Encrypted password of the user\n                example: abcdefg\n                maxLength: 60\n            email:\n                type: string\n                description: Email address of the user\n                example: john.smith@gmail.com\n                maxLength: 255\n            user_status_id:\n                $ref: \"#/components/schemas/UserStatusId\"\n                example: 1\n                description: Relation to the user status table that defines the status of the user\n            remember_token:\n                type: string\n                description: Token used to remember the user's logged in status\n                example: ABCDEFGHI\n                maxLength: 100\n    Users:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/Users\"\n              }\n    UserStatusId:\n        description: The unique identifier of an user status\n        type: integer\n        readOnly: true\n        example: 1\n    Visibility:\n        type: object\n        required:\n            - name\n        properties:\n            id:\n                $ref: \"#/components/schemas/UserId\"\n                example: 1000\n            name:\n                type: string\n                example: Public\n            created_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the visibility was created\n                readOnly: true\n            updated_at:\n                $ref: \"#/components/schemas/DateTime\"\n                description: Date and time that the visibility was last updated\n                readOnly: true\n    VisibilityId:\n        description: The unique identifier of a visibility\n        type: integer\n        readOnly: true\n        example: 1\n    Visibilities:\n      allOf:     # Combines the BasicErrorModel and the inline model\n        - $ref: '#/components/schemas/Pagination'\n        - type: object\n          properties:\n            data:\n              type: array\n              items: {\n                \"$ref\": \"#/components/schemas/Visibility\"\n              }\n    DateTime:\n        type: string\n        description: A date and time \n        example: \"2018-03-20T09:12:28Z\"\n        format: date-time\n    Error:\n        type: object\n        required:\n            - message\n        properties:\n            message:\n                description: A human readable error message\n                type: string\n    Pagination:\n        type: object\n        properties:\n            current_page:\n                description: The current page in the paginated list\n                type: integer\n            first_page_url:\n                description: URL for the first page \n                type: string\n                example: \"https://dev.arcane.city/api/resources?page=1\"\n            from:\n                description: First element in the current page\n                type: integer\n                example: 1\n            last_page:\n                description: Last page of results\n                type: integer\n                example: 1\n            last_page_url: \n                description: URL for the first page \n                type: string\n                example: \"https://dev.arcane.city/api/resources?page=100\"\n            links:                 \n                description: Array of links used to paginate the list of entities\n                type: array\n                items: {}\n            next_page_url: \n                description: URL for the next page \n                type: string\n                example: \"https://dev.arcane.city/api/resources?page=2\"\n            path: \n                description: Path for the primary route\n                type: string\n                example: \"https://dev.arcane.city/api/resources\"\n            per_page:\n                description: Number of results per page\n                type: integer\n                example: 25\n            prev_page_url:\n                description: URL for the previous page \n                type: string\n                example: \"https://dev.arcane.city/api/resources?page=0\"              \n            to:\n                description: Last element in the current page\n                type: integer\n                example: 25\n            total: \n                description: Total number of results from the request\n                type: integer\n                example: 100\n            data:\n                description: List of the current page of the paginated entity\n                type: array\n                items: {}                \nsecurity:\n  - basicAuth: []\ntags:\n  - name: events\n  - name: entities\n  - name: series\n  - name: users\n  - name: tags\n  - name: blogs\n  - name: forums\n  - name: threads\n  - name: posts\npaths:\n  /api/events:\n    post:\n      tags:\n        - events\n      summary: Create Event\n      requestBody:\n        content:\n          application/json:\n              schema:\n                  $ref: \"#/components/schemas/EventRequest\"\n      responses:\n        200:\n          description: Successful response\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/EventResponse\"\n        201:\n          description: Successful response\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/Event\"\n        500:\n            description: Unexpected error\n            content:\n                application/json:\n                    schema:\n                        $ref: \"#/components/schemas/Error\"\n    get:\n      tags:\n        - events\n      summary: Get Events\n      operationId: getEvents\n      parameters:\n        - name: filters[name]\n          in: query\n          required: false\n          description: A filter query of the event name \n          schema:\n            type: string\n          example: 'Lazercrunk'\n        - name: filters[venue]\n          in: query\n          required: false\n          description: A filter query of the venue name\n          schema:\n            type: string\n          example: 'Brillobox'\n        - name: filters[promoter]\n          in: query\n          required: false\n          description: A filter query of the promoter name\n          schema:\n            type: string\n          example: 'Cutups'\n        - name: filters[related]\n          in: query\n          required: false\n          description: A filter query of related entity name\n          schema:\n            type: string\n          example: '0h85'\n        - name: filters[series]\n          in: query\n          required: false\n          description: A filter query of related series name\n          schema:\n            type: string\n          example: 'Lazercrunk'\n        - name: filters[event_type]\n          in: query\n          required: false\n          description: A filter query of related event type name\n          schema:\n            type: string\n          example: 'Concert'\n        - name: filters[start_at][start]\n          in: query\n          required: false\n          description: A filter query of the start time starting\n          schema:\n            type: string\n          example: '2022-01-01 1:00:00'\n        - name: filters[start_at][end]\n          in: query\n          required: false\n          description: A filter query of the start time ending\n          schema:\n            type: string\n          example: '2022-02-01 2:00:00'\n        - name: filters[end_at][start]\n          in: query\n          required: false\n          description: A filter query of the end time starting\n          schema:\n            type: string\n          example: '2022-02-01 1:00:00'\n        - name: filters[end_at][end]\n          in: query\n          required: false\n          description: A filter query of the end time ending\n          schema:\n            type: string\n          example: '2022-01-01 2:00:00'\n        - name: orderBy\n          in: query\n          required: false\n          description: A order by clause to be applied to the select\n          schema:\n              type: string\n              example: title desc\n        - name: filters[ages]\n          in: query\n          required: false\n          description: A filter query of the end time ending\n          schema:\n            type: integer\n          example: 21\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Events\"\n  /api/events/reset:\n    get:\n      tags:\n        - events\n      summary: Reset event filters\n      responses:\n        '200':\n          description: Successful response\n          content:\n              application/json: {}\n  /api/events/{eventId}:\n    parameters:\n        - name: eventId\n          description: The unique identifier of the event\n          in: path\n          required: true\n          example: 1\n          schema:\n              $ref: \"#/components/schemas/EventId\"\n    get:\n      tags:\n        - events\n      summary: Get Event\n      responses:\n        '200':\n          description: Successful response\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/EventResponse\"\n    put:\n      tags:\n        - events\n      summary: Update Events\n      requestBody:\n        content:\n          application/json:\n              schema:\n                  $ref: \"#/components/schemas/EventRequest\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/EventResponse\"\n    delete:\n      tags:\n        - events\n      summary: Delete Event\n      responses:\n        '204':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/entities:\n    post:\n      tags:\n        - entities\n      summary: Create Entity\n      requestBody:\n        content:\n          application/json:\n              schema:\n                  $ref: \"#/components/schemas/EntityRequest\"\n      responses:\n        '201':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Entity\"\n    get:\n      tags:\n        - entities\n      summary: Get Entities\n      operationId: getEntities\n      parameters:\n        - name: filters[name]\n          in: query\n          required: false\n          description: A filter query of the event name \n          schema:\n            type: string\n          example: 'cutups'\n        - name: filters[role]\n          in: query\n          required: false\n          description: A filter query of the role name\n          schema:\n            type: string\n          example: 'dj'\n        - name: filters[tag]\n          in: query\n          required: false\n          description: A filter query of related tag\n          schema:\n            type: string\n          example: 'jungle'\n        - name: filters[entity_status]\n          in: query\n          required: false\n          description: A filter query of related entity status name\n          schema:\n            type: string\n          example: 'Active'\n        - name: filters[entity_type]\n          in: query\n          required: false\n          description: A filter query of related entity type name\n          schema:\n            type: string\n          example: 'Individual'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Entities\"\n  /api/entities/reset:\n    get:\n      tags:\n        - events\n      summary: Reset Entity filters\n      operationId: resetEntityFilters\n      responses:\n        '200':\n          description: Successful response\n          content:\n              application/json: {}\n  /api/entities/{slug}:\n    parameters:\n        - name: slug\n          description: The unique identifier of the entity\n          in: path\n          required: true\n          schema:\n            type: string\n          example: cutups\n    get:\n      tags:\n        - entities\n      summary: Get Entity\n      operationId: getEntityBySlug\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Entity\"\n    put:\n      tags:\n        - entities\n      summary: Update Entity\n      operationId: updateEntityBySlug\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/EntityRequest\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Entity\"\n    delete:\n      tags:\n        - entities\n      summary: Delete Entity\n      operationId: deleteEntityBySlug\n      responses:\n        '204':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/entity-statuses:\n   get:\n      tags:\n        - entity-statuses\n      summary: Get Entity Statuses\n      operationId:  getEntityStatuses\n      parameters:\n        - name: filters[name]\n          in: query\n          required: false\n          description: A filter query of the entity status name \n          schema:\n            type: string\n          example: 'Group'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Pagination\"\n   post:\n      tags:\n        - entity-statuses\n      summary: Create entity status\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/EntityStatus\"\n      responses:\n        '201':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/entity-types:\n   get:\n      tags:\n        - entity-types\n      summary: Get Entity Types\n      parameters:\n        - name: name\n          in: query\n          schema:\n            type: string\n          example: Group\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Pagination\"\n   post:\n      tags:\n        - entity-types\n      summary: Create entity type\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/EntityTypeRequest\"\n      responses:\n        '201':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/entity-types/{entityTypeId}:\n    parameters:\n        - name: entityTypeId\n          description: The unique identifier of the entity type\n          in: path\n          required: true\n          schema:\n              $ref: \"#/components/schemas/EntityTypeId\"\n    get:\n      tags:\n        - entity-types\n      summary: Get EntityType\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/EntityType\"\n    put:\n      tags:\n        - entity-types\n      summary: Update Entity Type\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/EntityType\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/EntityType\"\n    delete:\n      tags:\n        - entity-types\n      summary: Delete Entity Type\n      responses:\n        '204':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/series:\n    post:\n      tags:\n        - series\n      summary: Create Series\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Series\"\n      responses:\n        '201':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - series\n      summary: Get Series by Event Type Id\n      parameters:\n        - name: event_type_id\n          in: query\n          schema:\n            type: integer\n          example: '1'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/series/{seriesId}:\n    parameters:\n        - name: seriesId\n          description: The unique identifier of the series\n          in: path\n          required: true\n          schema:\n              $ref: \"#/components/schemas/SeriesId\"\n    get:\n      tags:\n        - series\n      summary: Get one Series\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Series\"\n    put:\n      tags:\n        - series\n      summary: Update Series\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Series\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - series\n      summary: Delete Series\n      responses:\n        '204':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/tags:\n    post:\n      tags:\n        - tags\n      summary: Create Tag\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Tag\"\n      responses:\n        '201':\n          description: Successful response\n          content:\n            application/json: {}\n    get:\n      tags:\n        - tags\n      summary: Get Tags\n      parameters:\n        - name: name\n          in: query\n          schema:\n            type: string\n          example: 'techno'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/tags/{tagId}:\n    parameters:\n        - name: tagId\n          description: The unique identifier of the tag\n          in: path\n          required: true\n          schema:\n              $ref: \"#/components/schemas/TagId\"\n    get:\n      tags:\n        - tags\n      summary: Get one Tag\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Tag\"\n    put:\n      tags:\n        - tags\n      summary: Update Tag\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/Tag\"\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - tags\n      summary: Delete Tag\n      responses:\n        '204':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/users:\n    post:\n      tags:\n        - users\n      summary: Create User\n      requestBody:\n        content:\n            application/json:\n                schema:\n                    $ref: \"#/components/schemas/UserRequest\"\n      responses:\n        '201':\n          description: Successful response\n          content:\n              application/json:\n                  schema:\n                      $ref: \"#/components/schemas/User\"\n    get:\n      tags:\n        - users\n      summary: Get Users\n      parameters:\n        - name: filters[status]\n          in: query\n          required: false\n          description: A filter query of the user status\n          schema:\n            type: string\n          example: Active\n        - name: filters[name]\n          in: query\n          required: false\n          description: A filter query of the user name \n          schema:\n            type: string\n          example: Geoff\n        - name: filters[email]\n          in: query\n          required: false\n          description: A filter query of the user email \n          schema:\n            type: string\n          example: geoff.maddock@gmail.com\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/users/{userId}:\n    parameters:\n        - name: userId\n          description: The unique identifier of the user\n          in: path\n          required: true\n          schema:\n              $ref: \"#/components/schemas/UserId\"\n    get:\n      tags:\n        - users\n      summary: Get one User\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    put:\n      tags:\n        - users\n      summary: Update User\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              example:\n                customer_id: 48\n                billing_system_id: 5\n                account_code: '987654'\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n    delete:\n      tags:\n        - users\n      summary: Delete User\n      responses:\n        '204':\n          description: Successful response\n          content:\n            application/json: {}\n  /api/docs:\n    get:\n      tags:\n        - default\n      summary: Get Docs\n      responses:\n        '200':\n          description: Successful response\n          content:\n            application/json: {}\n",
			"canonicalURL": "/github.com/geoff-maddock/events-tracker@b1b797eaa57c7a8fc7407abfdedc07b498876202/-/blob/postman/schemas/index.yml",
			"externalURLs": [
				{
					"url": "https://github.com/geoff-maddock/events-tracker/blob/b1b797eaa57c7a8fc7407abfdedc07b498876202/postman/schemas/index.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Seriess\": resolve \"#/components/schemas/Seriess\": allOf: property \"data\": items: $ref: resolve \"#/components/schemas/Series\": property \"occurrence_type_id\": at postman/schemas/index.yml:786:23: $ref: resolve \"#/components/schemas/OccurrenceTypeId\": resolve: can't find value for \"components/schemas/OccurrenceTypeId\""
}