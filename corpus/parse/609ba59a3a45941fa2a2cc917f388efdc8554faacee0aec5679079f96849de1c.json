{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/netsoc/webspaced"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "client/api/openapi.yaml",
			"byteSize": 53789,
			"content": "openapi: 3.0.3\ninfo:\n  description: |\n    API for managing next-gen webspaces.\n  title: Netsoc webspaced\n  version: 1.2.0\nservers:\n- url: https://webspaced.netsoc.ie/v1\n- url: https://webspaced.staging.netsoc.ie/v1\n- url: http://localhost:8081/v1\npaths:\n  /images:\n    get:\n      operationId: getImages\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                items:\n                  $ref: '#/components/schemas/Image'\n                type: array\n          description: An array of images\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      summary: List images\n      tags:\n      - images\n  /webspace/{username}:\n    delete:\n      operationId: delete\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Destroy webspace\n      tags:\n      - config\n    get:\n      description: |\n        Retrieve all information about a webspace (except for its current state)\n      operationId: get\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webspace'\n          description: Webspace information\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Retrieve all webspace information\n      tags:\n      - config\n    post:\n      operationId: create\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              simple:\n                summary: Simple example with only image\n                value:\n                  image: alpine\n              login:\n                summary: More advanced example with root password and SSH enabled\n                value:\n                  image: alpine\n                  password: hunter2\n                  ssh: true\n            schema:\n              $ref: '#/components/schemas/InitRequest'\n        required: true\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webspace'\n          description: New webspace information\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"409\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Webspace for username already exists / is already running\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Initialize webspace\n      tags:\n      - config\n  /webspace/{username}/config:\n    get:\n      operationId: getConfig\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n          description: Webspace configuration\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Retrieve webspace configuration\n      tags:\n      - config\n    patch:\n      operationId: updateConfig\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Config'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Config'\n          description: Old config values\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Change webspace config options\n      tags:\n      - config\n  /webspace/{username}/state:\n    delete:\n      operationId: shutdown\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Shut down webspace container\n      tags:\n      - state\n    get:\n      description: |\n        Retrieve webspace state\n      operationId: getState\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              examples:\n                running:\n                  description: Running\n                  value:\n                    running: true\n                    uptime: 32\n                    usage:\n                      cpu: 685502875\n                      disks: {}\n                      memory: 10452992\n                      processes: 8\n                    networkInterfaces:\n                      eth0:\n                        mac: 00:16:3e:34:9a:d4\n                        mtu: 1500\n                        state: up\n                        counters:\n                          bytesReceived: 46897\n                          bytesSent: 9910\n                          packetsReceived: 122\n                          packetsSent: 46\n                        addresses:\n                        - family: inet\n                          address: 10.233.0.143\n                          netmask: \"24\"\n                          scope: global\n                        - family: inet6\n                          address: fd42:7373:3d88:e37a:216:3eff:fe34:9ad4\n                          netmask: \"64\"\n                          scope: global\n                        - family: inet6\n                          address: fe80::216:3eff:fe34:9ad4\n                          netmask: \"64\"\n                          scope: link\n                notRunning:\n                  description: Not running\n                  value:\n                    running: false\n                    uptime: 0\n                    usage:\n                      cpu: 0\n                      disks: {}\n                      memory: 0\n                      processes: 0\n                    networkInterfaces: {}\n              schema:\n                $ref: '#/components/schemas/State'\n          description: Webspace state\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Retrieve webspace state\n      tags:\n      - state\n    patch:\n      description: Forces a reload of reverse proxy and port forwarding configuration\n      operationId: sync\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Re-generate webspace backend config\n      tags:\n      - state\n    post:\n      operationId: start\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"409\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Webspace for username already exists / is already running\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Start webspace container\n      tags:\n      - state\n    put:\n      operationId: reboot\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Reboot webspace container\n      tags:\n      - state\n  /webspace/{username}/domains:\n    get:\n      operationId: getDomains\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Domains'\n          description: Webspace domains\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Retrieve webspace domains\n      tags:\n      - domains\n  /webspace/{username}/domains/{domain}:\n    delete:\n      operationId: removeDomain\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - explode: false\n        in: path\n        name: domain\n        required: true\n        schema:\n          $ref: '#/components/schemas/Domain'\n        style: simple\n      responses:\n        \"204\":\n          description: No content\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Delete custom domain\n      tags:\n      - domains\n    post:\n      description: |\n        Domain will be verified by looking for a `TXT` record of the format `webspace:id:\u003cuser id\u003e`\n      operationId: addDomain\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - explode: false\n        in: path\n        name: domain\n        required: true\n        schema:\n          $ref: '#/components/schemas/Domain'\n        style: simple\n      responses:\n        \"201\":\n          description: No content\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"409\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Webspace for username already exists / is already running\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Add custom domain\n      tags:\n      - domains\n  /webspace/{username}/ports:\n    get:\n      operationId: getPorts\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Ports'\n          description: Webspace port forwards\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Retrieve webspace port forwards\n      tags:\n      - ports\n  /webspace/{username}/ports/{ePort}/{iPort}:\n    post:\n      operationId: addPort\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - explode: false\n        in: path\n        name: ePort\n        required: true\n        schema:\n          $ref: '#/components/schemas/Port'\n        style: simple\n      - explode: false\n        in: path\n        name: iPort\n        required: true\n        schema:\n          $ref: '#/components/schemas/Port'\n        style: simple\n      responses:\n        \"201\":\n          description: No content\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"409\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Webspace for username already exists / is already running\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Add port forward\n      tags:\n      - ports\n  /webspace/{username}/ports/{iPort}:\n    post:\n      description: Add port forward from random free port to internal port\n      operationId: addRandomPort\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - explode: false\n        in: path\n        name: iPort\n        required: true\n        schema:\n          $ref: '#/components/schemas/Port'\n        style: simple\n      responses:\n        \"201\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AddRandomPortResponse'\n          description: Random external port\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"409\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Webspace for username already exists / is already running\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Add random port forward\n      tags:\n      - ports\n  /webspace/{username}/ports/{ePort}:\n    delete:\n      operationId: removePort\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      - explode: false\n        in: path\n        name: ePort\n        required: true\n        schema:\n          $ref: '#/components/schemas/Port'\n        style: simple\n      responses:\n        \"204\":\n          description: No content\n        \"400\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Validation error (e.g. Required field missing)\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Delete port forward\n      tags:\n      - ports\n  /webspace/{username}/log:\n    delete:\n      operationId: clearLog\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"204\":\n          description: No content\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Clear webspace console log\n      tags:\n      - console\n    get:\n      operationId: getLog\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"200\":\n          content:\n            text/plain:\n              schema:\n                type: string\n          description: Console log\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Retrieve webspace console log\n      tags:\n      - console\n  /webspace/{username}/exec:\n    get:\n      description: |\n        _IMPORTANT_: This endpoint uses a websocket. On connection, a single text message should be sent (as JSON), this message is of the form `ExecInteractiveRequest`. Following this, binary messages to and from the socket will be routed to the process PTY.\n\n        Any other text messages will be treated as `ExecInteractiveControl` messages. Pass a signal number to send a signal to the process, and non-zero values for `width` and `height` to resize.\n\n        Upon command completion, the close message will be the exit code of the process.\n      operationId: execInteractive\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"400\":\n          description: Non-websocket request made\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Execute a command interactively\n      tags:\n      - console\n    post:\n      description: |\n        Runs a command non-interactively (no TTY, waits for completion and returns complete stdout and stderr).\n      operationId: exec\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      requestBody:\n        content:\n          application/json:\n            examples:\n              simple:\n                summary: Simple command execution\n                value:\n                  command: echo hello, world!\n            schema:\n              $ref: '#/components/schemas/ExecRequest'\n        required: true\n      responses:\n        \"200\":\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExecResponse'\n          description: Command result\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Execute command non-interactively\n      tags:\n      - console\n  /webspace/{username}/console:\n    get:\n      description: |\n        _IMPORTANT_: This endpoint uses a websocket. On connection, a single text message should be sent with integers for terminal `width` and `height` (as JSON, see `ResizeRequest` e.g. `{\"width\": 80, \"height\": 24}`). Following this, binary messages to and from the socket will be routed to the console TTY.\n\n        Any other text messages will also be treated as resize events (same format).\n      operationId: console\n      parameters:\n      - description: |\n          User's username. Can be `self` to indicate the currently authenticated user.\n        example: root\n        in: path\n        name: username\n        required: true\n        schema:\n          type: string\n      responses:\n        \"400\":\n          description: Non-websocket request made\n        \"401\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Authorization error (e.g. incorret password, invalid token,\n            token expired etc.)\n        \"403\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Admin token is required\n        \"404\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: Resource does not exist (e.g. user, webspace)\n        \"500\":\n          content:\n            application/problem+json:\n              schema:\n                $ref: '#/components/schemas/Error'\n          description: General server error\n      security:\n      - jwt: []\n      - jwt_admin: []\n      summary: Attach to webspace console\n      tags:\n      - console\ncomponents:\n  parameters:\n    Domain:\n      explode: false\n      in: path\n      name: domain\n      required: true\n      schema:\n        $ref: '#/components/schemas/Domain'\n      style: simple\n    ExternalPort:\n      explode: false\n      in: path\n      name: ePort\n      required: true\n      schema:\n        $ref: '#/components/schemas/Port'\n      style: simple\n    InternalPort:\n      explode: false\n      in: path\n      name: iPort\n      required: true\n      schema:\n        $ref: '#/components/schemas/Port'\n      style: simple\n  responses:\n    InternalError:\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: General server error\n    NotFoundError:\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Resource does not exist (e.g. user, webspace)\n    ValidationError:\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Validation error (e.g. Required field missing)\n    ConflictError:\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Error'\n      description: Webspace for username already exists / is already running\n  schemas:\n    Error:\n      properties:\n        message:\n          description: Message explaining the error\n          type: string\n      required:\n      - message\n      type: object\n    ImageAlias:\n      description: LXD image alias\n      example:\n        name: alpine\n        description: Alpine 3.11 amd64 (20201004_13:00)\n      properties:\n        name:\n          example: alpine\n          type: string\n        description:\n          example: Alpine 3.11 amd64 (20201004_13:00)\n          type: string\n      type: object\n    Image:\n      description: |\n        LXD image (summarised version of https://linuxcontainers.org/lxd/docs/master/rest-api#10imagesfingerprint)\n      example:\n        aliases:\n        - name: alpine\n          description: Alpine 3.11 amd64 (20201004_13:00)\n        - name: alpine\n          description: Alpine 3.11 amd64 (20201004_13:00)\n        size: 2528108\n        fingerprint: 49189fc1b5e04a3e26ee17ad22188f397fbdb073bbbdd2c0371ddf98dbd6b81c\n        properties:\n          architecture: amd64\n          description: Alpine 3.11 amd64 (20201004_13:00)\n          os: Alpine\n          release: \"3.11\"\n          serial: 20201004_13:00\n          type: squashfs\n      properties:\n        aliases:\n          items:\n            $ref: '#/components/schemas/ImageAlias'\n          type: array\n        fingerprint:\n          description: SHA-256 hash of the image\n          example: 49189fc1b5e04a3e26ee17ad22188f397fbdb073bbbdd2c0371ddf98dbd6b81c\n          type: string\n        properties:\n          additionalProperties:\n            type: string\n          description: Arbitrary properties\n          example:\n            architecture: amd64\n            description: Alpine 3.11 amd64 (20201004_13:00)\n            os: Alpine\n            release: \"3.11\"\n            serial: 20201004_13:00\n            type: squashfs\n          type: object\n        size:\n          description: Size in bytes\n          example: 2528108\n          format: int64\n          type: integer\n      required:\n      - aliases\n      - fingerprint\n      - properties\n      - size\n      type: object\n    Config:\n      description: Webspace configuration\n      example:\n        httpPort: 8080\n        sniPassthrough: false\n        startupDelay: 5.0\n      properties:\n        startupDelay:\n          default: 3.0\n          description: |\n            How many seconds to delay incoming connections to a webspace while starting the container\n          example: 5.0\n          format: double\n          type: number\n        httpPort:\n          default: 80\n          description: |\n            Incoming SSL-terminated HTTP requests (and SNI passthrough HTTPS connections) will be forwarded to this port\n          example: 8080\n          format: int32\n          type: integer\n        sniPassthrough:\n          default: false\n          description: |\n            If true, SSL termination will be disabled and HTTPS connections will forwarded directly\n          type: boolean\n      type: object\n    Domain:\n      description: Custom domain\n      example: example.com\n      type: string\n    Domains:\n      description: List of webspace custom domains\n      items:\n        $ref: '#/components/schemas/Domain'\n      type: array\n    Port:\n      description: Network port\n      example: 8080\n      format: int32\n      type: integer\n    Ports:\n      additionalProperties:\n        $ref: '#/components/schemas/Port'\n      description: Mapping of external ports to internal container ports (port forwarding)\n      example:\n        \"60022\": 22\n        \"55565\": 25565\n      type: object\n    Webspace:\n      description: Netsoc webspace object\n      example:\n        domains:\n        - example.com\n        - example.com\n        ports:\n          \"60022\": 22\n          \"55565\": 25565\n        user: 1\n        config:\n          httpPort: 8080\n          sniPassthrough: false\n          startupDelay: 5.0\n      properties:\n        user:\n          description: Unique database identifier, not modifiable.\n          example: 1\n          format: int32\n          type: integer\n        config:\n          $ref: '#/components/schemas/Config'\n        domains:\n          description: List of webspace custom domains\n          items:\n            $ref: '#/components/schemas/Domain'\n          type: array\n        ports:\n          additionalProperties:\n            $ref: '#/components/schemas/Port'\n          description: Mapping of external ports to internal container ports (port\n            forwarding)\n          example:\n            \"60022\": 22\n            \"55565\": 25565\n          type: object\n      type: object\n    Usage:\n      description: Website resource usage\n      example:\n        processes: 8\n        memory: 10452992\n        disks:\n          root: 16777216\n        cpu: 685502875\n      properties:\n        cpu:\n          description: CPU time (nanoseconds)\n          example: 685502875\n          format: int64\n          type: integer\n        disks:\n          additionalProperties:\n            description: Disk usage in bytes\n            format: int64\n            type: integer\n          example:\n            root: 16777216\n          type: object\n        memory:\n          description: Memory usage in bytes\n          example: 10452992\n          format: int64\n          type: integer\n        processes:\n          description: Number of processes\n          example: 8\n          format: int64\n          type: integer\n      required:\n      - cpu\n      - disks\n      - memory\n      - processes\n      type: object\n    InterfaceCounters:\n      description: Counters for a network interface\n      properties:\n        bytesReceived:\n          example: 46897\n          format: int64\n          type: integer\n        bytesSent:\n          example: 9910\n          format: int64\n          type: integer\n        packetsReceived:\n          example: 122\n          format: int64\n          type: integer\n        packetsSent:\n          example: 46\n          format: int64\n          type: integer\n      required:\n      - bytesReceived\n      - bytesSent\n      - packetsReceived\n      - packetsSent\n      type: object\n    InterfaceAddress:\n      description: Network interface address\n      properties:\n        family:\n          default: inet\n          type: string\n        address:\n          example: 10.233.0.143\n          type: string\n        netmask:\n          example: \"24\"\n          type: string\n        scope:\n          example: global\n          type: string\n      required:\n      - address\n      - family\n      - netmask\n      type: object\n    NetworkInterface:\n      description: Webspace network interface status\n      properties:\n        mac:\n          description: MAC address\n          example: 00:16:3e:34:9a:d4\n          type: string\n        mtu:\n          default: 1500\n          type: integer\n        state:\n          default: up\n          type: string\n        counters:\n          $ref: '#/components/schemas/InterfaceCounters'\n        addresses:\n          items:\n            $ref: '#/components/schemas/InterfaceAddress'\n          type: array\n      required:\n      - addresses\n      - counters\n      - mac\n      - mtu\n      - state\n      type: object\n    State:\n      description: Webspace state\n      example:\n        running: true\n        networkInterfaces:\n          eth0:\n            mac: 00:16:3e:34:9a:d4\n            mtu: 1500\n            state: up\n            counters:\n              bytesReceived: 46897\n              bytesSent: 9910\n              packetsReceived: 122\n              packetsSent: 46\n            addresses:\n            - family: inet\n              address: 10.233.0.143\n              netmask: \"24\"\n              scope: global\n            - family: inet6\n              address: fd42:7373:3d88:e37a:216:3eff:fe34:9ad4\n              netmask: \"64\"\n              scope: global\n            - family: inet6\n              address: fe80::216:3eff:fe34:9ad4\n              netmask: \"64\"\n              scope: link\n        usage:\n          processes: 8\n          memory: 10452992\n          disks:\n            root: 16777216\n          cpu: 685502875\n        uptime: 0.8008281904610115\n      properties:\n        running:\n          default: false\n          example: true\n          type: boolean\n        uptime:\n          description: Length of time for which container has been running (seconds)\n          format: double\n          type: number\n        usage:\n          $ref: '#/components/schemas/Usage'\n        networkInterfaces:\n          additionalProperties:\n            $ref: '#/components/schemas/NetworkInterface'\n          example:\n            eth0:\n              mac: 00:16:3e:34:9a:d4\n              mtu: 1500\n              state: up\n              counters:\n                bytesReceived: 46897\n                bytesSent: 9910\n                packetsReceived: 122\n                packetsSent: 46\n              addresses:\n              - family: inet\n                address: 10.233.0.143\n                netmask: \"24\"\n                scope: global\n              - family: inet6\n                address: fd42:7373:3d88:e37a:216:3eff:fe34:9ad4\n                netmask: \"64\"\n                scope: global\n              - family: inet6\n                address: fe80::216:3eff:fe34:9ad4\n                netmask: \"64\"\n                scope: link\n          type: object\n      required:\n      - networkInterfaces\n      - running\n      - uptime\n      - usage\n      type: object\n    ResizeRequest:\n      properties:\n        width:\n          description: Width of terminal (columns)\n          example: 80\n          type: integer\n        height:\n          description: Height of terminal (rows)\n          example: 24\n          type: integer\n      required:\n      - height\n      - width\n      type: object\n    ExecInteractiveControl:\n      properties:\n        resize:\n          $ref: '#/components/schemas/ResizeRequest'\n        signal:\n          description: Signal to send to process\n          example: 2\n          type: integer\n      type: object\n    InitRequest:\n      example:\n        image: alpine\n        password: hunter2\n        ssh: true\n      properties:\n        image:\n          description: Image alias or fingerprint\n          example: alpine\n          type: string\n        password:\n          description: Password for root user\n          example: hunter2\n          type: string\n        ssh:\n          description: |\n            Whether or not to install an SSH server (and create a port forward for it). Requires the user to have an SSH key on their account.\n          type: boolean\n      required:\n      - image\n      type: object\n    ExecRequest:\n      example:\n        command: cat /etc/passwd\n      properties:\n        command:\n          example: cat /etc/passwd\n          type: string\n      required:\n      - command\n      type: object\n    ExecInteractiveRequest:\n      properties:\n        command:\n          items:\n            type: string\n          type: array\n        user:\n          description: User ID to run as\n          example: 1000\n          format: int32\n          type: integer\n        group:\n          description: Group ID to run as\n          example: 1000\n          format: int32\n          type: integer\n        environment:\n          additionalProperties:\n            type: string\n          description: Additional environment variables to pass to process\n          type: object\n        width:\n          description: Width of terminal (columns)\n          example: 80\n          type: integer\n        height:\n          description: Height of terminal (rows)\n          example: 24\n          type: integer\n        workingDirectory:\n          type: string\n      required:\n      - command\n      - height\n      - width\n      type: object\n    AddRandomPortResponse:\n      example:\n        ePort: 8080\n      properties:\n        ePort:\n          description: Network port\n          example: 8080\n          format: int32\n          type: integer\n      required:\n      - ePort\n      type: object\n    ExecResponse:\n      example:\n        stdout: stdout\n        exitCode: 0\n        stderr: stderr\n      properties:\n        stdout:\n          description: Process stdout\n          type: string\n        stderr:\n          description: Process stderr\n          type: string\n        exitCode:\n          description: Process exit code\n          type: integer\n      required:\n      - exitCode\n      - stderr\n      - stdout\n      type: object\n    UserID:\n      description: Unique database identifier, not modifiable.\n      example: 1\n      format: int32\n      type: integer\n  securitySchemes:\n    jwt:\n      bearerFormat: jwt\n      description: Any user JWT (including non-admin and expired)\n      scheme: bearer\n      type: http\n    jwt_admin:\n      bearerFormat: jwt\n      description: Valid admin JWT\n      scheme: bearer\n      type: http\n",
			"canonicalURL": "/github.com/netsoc/webspaced@56b1547479a73f9db3058b047453d57829ce0bb2/-/blob/client/api/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/netsoc/webspaced/blob/56b1547479a73f9db3058b047453d57829ce0bb2/client/api/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: at 1:32430: duplicate path: \"/webspace/{username}/ports/{iPort}\""
}