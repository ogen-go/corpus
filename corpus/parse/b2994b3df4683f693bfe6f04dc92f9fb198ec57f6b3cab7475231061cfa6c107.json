{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ditrit/gandalf"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "core/aggregator/api/swagger.yaml",
			"byteSize": 87145,
			"content": "openapi: 3.0.0\ninfo:\n  description: |\n    This is a sample Petstore server.  You can find \n    out more about Swagger at \n    [http://swagger.io](http://swagger.io) or on \n    [irc.freenode.net, #swagger](http://swagger.io/irc/).\n  version: 1.0.0-oas3\n  title: Swagger Gandalf\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: romain.fairant@orness.com\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - name: authorization\n    description: Everything about your Authorizations\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: role\n    description: Everything about your Roles\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: environmentType\n    description: Everything about your EnvrionementType\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: environment\n    description: Everything about your environment\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: domain\n    description: Everything about your Domains\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: tag\n    description: Everything about your Tags\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: resource\n    description: Everything about your Resources\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: resourceType\n    description: Everything about your ResourceTypes\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: eventTypeToPoll\n    description: Everything about your EventTypeToPolls\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: eventType\n    description: Everything about your EventTypes\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: user\n    description: Operations about User\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: tenant\n    description: Operations about Tenant\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: secretAssignement\n    description: Operations about Secret\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: logicalComponent\n    description: Operations about Logical Component\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: product\n    description: Operations about Product\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: library\n    description: Operations about Library\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: connectorProduct\n    description: Operations about Library\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\n  - name: file\n    description: Operations about file\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\npaths:\n  '/file/{fileId}':\n    get:\n      tags:\n        - file\n      summary: Find file by ID\n      description: Returns a single product\n      operationId: getFileById\n      parameters:\n        - name: fileId\n          in: path\n          description: ID of file to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:       \n            image/*:    \n              schema: \n                type: string\n                format: binary\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - file\n      summary: Upload a file\n      operationId: uploadFile\n      parameters:\n        - name: fileId\n          in: path\n          description: ID of file that needs to be upload\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          image/*:\n            schema:\n              type: string\n              format: binary\n      responses:\n        '200':\n          description: Successfully Uploaded File\n      security:\n        - bearerAuth: []\n  /authorization:\n    get:\n      tags:\n        - authorization\n      summary: List authorizations\n      operationId: listAuthorization\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Authorization'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - authorization\n      summary: Create a authorization\n      operationId: createAuthorization\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateAuthorization'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/authorization/{authorizationId}':\n    get:\n      tags:\n        - authorization\n      summary: Find authorization by ID\n      description: Returns a single product\n      operationId: getAuthorizationById\n      parameters:\n        - name: authorizationId\n          in: path\n          description: ID of product to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Authorization not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - authorization\n      summary: Updates a Authorization\n      operationId: updateAuthorization\n      parameters:\n        - name: authorizationId\n          in: path\n          description: ID of product that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateAuthorization'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Authorization'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - authorization\n      summary: Deletes a Authorization\n      operationId: deleteAuthorization\n      parameters:\n        - name: authorizationId\n          in: path\n          description: Poroduct id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /product:\n    get:\n      tags:\n        - product\n      summary: List products\n      operationId: listProduct\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Product'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - product\n      summary: Create a product\n      operationId: createProduct\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateProduct'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/product/{productId}':\n    get:\n      tags:\n        - product\n      summary: Find product by ID\n      description: Returns a single product\n      operationId: getProductById\n      parameters:\n        - name: productId\n          in: path\n          description: ID of product to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Product not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - product\n      summary: Updates a product\n      operationId: updateProduct\n      parameters:\n        - name: productId\n          in: path\n          description: ID of product that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateProduct'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - product\n      summary: Deletes a Product\n      operationId: deleteProduct\n      parameters:\n        - name: productId\n          in: path\n          description: Poroduct id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /connectorproduct:\n    get:\n      tags:\n        - connectorProduct\n      summary: List connectorProducts\n      operationId: listConnectorProduct\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/ConnectorProduct'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - connectorProduct\n      summary: Create a connectorProduct\n      operationId: createConnectorProduct\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateConnectorProduct'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorProduct'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/connectorproduct/{connectorProductId}':\n    get:\n      tags:\n        - connectorProduct\n      summary: Find connectorProduct by ID\n      description: Returns a single connectorProduct\n      operationId: getConnectorProductById\n      parameters:\n        - name: connectorProductId\n          in: path\n          description: ID of product to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorProduct'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Product not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - connectorProduct\n      summary: Updates a connectorProduct\n      operationId: updateConnectorProduct\n      parameters:\n        - name: connectorProductId\n          in: path\n          description: ID of product that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateConnectorProduct'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ConnectorProduct'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - connectorProduct\n      summary: Deletes a connectorProduct\n      operationId: deleteConnectorProduct\n      parameters:\n        - name: connectorProductId\n          in: path\n          description: ConnectorProduct id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []        \n  /library:\n    get:\n      tags:\n        - library\n      summary: List libraries\n      operationId: listLibrary\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Library'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - library\n      summary: Create a library\n      operationId: createLibrary\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateLibrary'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Library'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/library/{libraryId}':\n    get:\n      tags:\n        - library\n      summary: Find library by ID\n      description: Returns a single library\n      operationId: getLibraryById\n      parameters:\n        - name: libraryId\n          in: path\n          description: ID of library to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Library'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Library not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - library\n      summary: Updates a library\n      operationId: updateLibrary\n      parameters:\n        - name: libraryId\n          in: path\n          description: ID of library that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateLibrary'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Library'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - library\n      summary: Deletes a library\n      operationId: deleteLibrary\n      parameters:\n        - name: libraryId\n          in: path\n          description: library id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []        \n  /role:\n    get:\n      tags:\n        - role\n      summary: List roles\n      operationId: listRole\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Role'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - role\n      summary: Create a role\n      operationId: createRole\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateRole'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/role/{roleId}':\n    get:\n      tags:\n        - role\n      summary: Find role by ID\n      description: Returns a single role\n      operationId: getRoleById\n      parameters:\n        - name: roleId\n          in: path\n          description: ID of role to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Role not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - role\n      summary: Updates a role\n      operationId: updateRole\n      parameters:\n        - name: roleId\n          in: path\n          description: ID of role that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateRole'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - role\n      summary: Deletes a role\n      operationId: deleteRole\n      parameters:\n        - name: roleId\n          in: path\n          description: Role id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n        \n  /environmentType:\n    get:\n      tags:\n        - environmentType\n      summary: List environmentType\n      operationId: listEnvironmentType\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/EnvironmentType'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - environmentType\n      summary: Create a environmentType\n      operationId: createEnvironmentType\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEnvironmentType'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentType'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/environmentType/{environmentTypeId}':\n    get:\n      tags:\n        - environmentType\n      summary: Find environmentType by ID\n      description: Returns a single environmentType\n      operationId: getEnvironmentTypeById\n      parameters:\n        - name: environmentTypeId\n          in: path\n          description: ID of environmentType to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentType'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: EnvironmentType not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - environmentType\n      summary: Updates a environmentType\n      operationId: updateEnvironmentType\n      parameters:\n        - name: environmentTypeId\n          in: path\n          description: ID of environmentType that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEnvironmentType'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EnvironmentType'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - environmentType\n      summary: Deletes a environmentType\n      operationId: deleteEnvironmentType\n      parameters:\n        - name: environmentTypeId\n          in: path\n          description: EnvironmentType id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n       \n        \n  /environment:\n    get:\n      tags:\n        - environment\n      summary: List environments\n      operationId: listEnvironment\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Environment'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - environment\n      summary: Create a environment\n      operationId: createEnvironment\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEnvironment'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/environment/{environmentId}':\n    get:\n      tags:\n        - environment\n      summary: Find environment by ID\n      description: Returns a single environment\n      operationId: getEnvironmentById\n      parameters:\n        - name: environmentId\n          in: path\n          description: ID of environment to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Environment not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - environment\n      summary: Updates a environment\n      operationId: updateEnvironment\n      parameters:\n        - name: environmentId\n          in: path\n          description: ID of environment that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEnvironment'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Environment'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - environment\n      summary: Deletes a environment\n      operationId: deleteEnvironment\n      parameters:\n        - name: environmentId\n          in: path\n          description: Environment id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n\n\n\n\n  /domain:\n    get:\n      tags:\n        - domain\n      summary: List domains\n      operationId: listDomain\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Domain'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/domain/tree':\n    get:\n      tags:\n        - domain\n      summary: List domains tree\n      operationId: listDomainTree\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Domain'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/domain/{domainId}':\n    get:\n      tags:\n        - domain\n      summary: Find domain by ID\n      description: Returns a single domain\n      operationId: getDomainById\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Domain'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Domain not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - domain\n      summary: Create a domain\n      operationId: createDomain\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of parent domain\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateDomain'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Domain'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - domain\n      summary: Updates a domain\n      operationId: updateDomain\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateDomain'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Domain'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - domain\n      summary: Deletes a domain\n      operationId: deleteDomain\n      parameters:\n        - name: domainId\n          in: path\n          description: Domain id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/domain/{domainId}/tag':\n    get:\n      tags:\n        - domain\n      summary: List domain tags\n      operationId: listDomainTag\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Tag'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []  \n  '/domain/{domainId}/tag/{tagId}':\n    post:\n      tags:\n        - domain\n      summary: Create a tag domain\n      operationId: createDomainTag\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: tagId\n          in: path\n          description: ID of tag that needs to be added\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - domain\n      summary: Deletes a tag domain\n      operationId: deleteDomainTag\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: tagId\n          in: path\n          description: ID of tag that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/domain/{domainId}/library':\n    get:\n      tags:\n        - domain\n      summary: List domain libraries\n      operationId: listDomainLibrary\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Library'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []  \n  '/domain/{domainId}/library/{libraryId}':\n    post:\n      tags:\n        - domain\n      summary: Create a library domain\n      operationId: createDomainLibrary\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: libraryId\n          in: path\n          description: ID of library that needs to be added\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - domain\n      summary: Deletes a library domain\n      operationId: deleteDomainLibrary\n      parameters:\n        - name: domainId\n          in: path\n          description: ID of domain that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: libraryId\n          in: path\n          description: ID of library that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /tag:\n    get:\n      tags:\n        - tag\n      summary: List tags\n      operationId: listTag\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Tag'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/tag/tree':\n    get:\n      tags:\n        - tag\n      summary: List tags tree\n      operationId: listTagTree\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Tag'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/tag/{tagId}':\n    get:\n      tags:\n        - tag\n      summary: Find tag by ID\n      description: Returns a single tag\n      operationId: getTagById\n      parameters:\n        - name: tagId\n          in: path\n          description: ID of tag to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Tag not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - tag\n      summary: Create a tag\n      operationId: createTag\n      parameters:\n        - name: tagId\n          in: path\n          description: ID of parent tag\n          required: true\n          schema:\n            type: string\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateTag'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - tag\n      summary: Updates a tag\n      operationId: updateTag\n      parameters:\n        - name: tagId\n          in: path\n          description: ID of tag that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateTag'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - tag\n      summary: Deletes a tag\n      operationId: deleteTag\n      parameters:\n        - name: tagId\n          in: path\n          description: Tag id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /tenant:\n    get:\n      tags:\n        - tenant\n      summary: List tenants\n      operationId: listTenant\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Tenant'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - tenant\n      summary: Create a tenant\n      operationId: createTenant\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateTenant'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenant'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/tenant/{tenantId}':\n    get:\n      tags:\n        - tenant\n      summary: Find tenant by ID\n      description: Returns a single tenant\n      operationId: getTenantById\n      parameters:\n        - name: tenantId\n          in: path\n          description: ID of tenant to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenant'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Tenant not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - tenant\n      summary: Updates a tenant\n      operationId: updateTenant\n      parameters:\n        - name: tenantId\n          in: path\n          description: ID of tenant that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateTenant'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tenant'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - tenant\n      summary: Deletes a tenant\n      operationId: deleteTenant\n      parameters:\n        - name: tenantId\n          in: path\n          description: Tenant id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /secretAssignement:\n    get:\n      tags:\n        - secretAssignement\n      summary: List SecretAssignements\n      operationId: listSecretAssignement\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/SecretAssignement'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - secretAssignement\n      summary: Create a SecretAssignement\n      operationId: createSecretAssignement\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SecretAssignement'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/logicalcomponent/{logicalComponentName}':\n    get:\n      tags:\n        - logicalComponent\n      summary: Find domain by Name\n      description: Returns a single logical component\n      operationId: getLogicalComponentByName\n      parameters:\n        - name: logicalComponentName\n          in: path\n          description: Name of logical component to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LogicalComponent'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Logical component not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/logicalcomponent/upload/{tenantName}/{typeName}':\n    post:\n      tags:\n        - logicalComponent\n      summary: Find domain by Name\n      description: Returns a single logical component\n      operationId: uploadLogicalComponentByTenantAndType\n      parameters:\n        - name: tenantName\n          in: path\n          description: Name of tenant\n          required: true\n          schema:\n            type: string\n        - name: typeName\n          in: path\n          description: Name of type (aggregator/connector)\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                fileName:\n                  type: string\n                  format: binary\n      responses:\n        '200':\n          description: Successfully Uploaded File\n        '500':\n          $ref: '#/components/responses/500UploadLogicalComponentError'\n      security:\n        - bearerAuth: []\n  /resource:\n    get:\n      tags:\n        - resource\n      summary: List resources\n      operationId: listResource\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/Resource'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - resource\n      summary: Create a resource\n      operationId: createResource\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateResource'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/resource/{resourceId}':\n    get:\n      tags:\n        - resource\n      summary: Find resource by ID\n      description: Returns a single resource\n      operationId: getResourceById\n      parameters:\n        - name: resourceId\n          in: path\n          description: ID of role to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: Resource not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - resource\n      summary: Updates a resource\n      operationId: updateResource\n      parameters:\n        - name: resourceId\n          in: path\n          description: ID of resource that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateResource'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - resource\n      summary: Deletes a resource\n      operationId: deleteResource\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: resourceId\n          in: path\n          description: Resource id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/resource/{resourceName}':\n    get:\n      tags:\n        - resource\n      summary: Find resource by Name\n      description: Returns a single Resource\n      operationId: getResourceByName\n      parameters:\n        - name: resourceName\n          in: path\n          description: Name of resource to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Resource'\n        '404':\n          description: Resource not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /resourceType:\n    get:\n      tags:\n        - resourceType\n      summary: List resourceTypes\n      operationId: listResourceType\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/ResourceType'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - resourceType\n      summary: Create a resourcetype\n      operationId: createResourceType\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateResourceType'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceType'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/resourceType/{resourceTypeId}':\n    get:\n      tags:\n        - resourceType\n      summary: Find resourceType by ID\n      description: Returns a single resourceType\n      operationId: getResourceTypeById\n      parameters:\n        - name: resourceTypeId\n          in: path\n          description: ID of role to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceType'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: ResourceType not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - resourceType\n      summary: Updates a resourcetype\n      operationId: updateResourceType\n      parameters:\n        - name: resourceTypeId\n          in: path\n          description: ID of resourcetype that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateResourceType'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceType'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - resourceType\n      summary: Deletes a resourceType\n      operationId: deleteResourceType\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: resourceTypeId\n          in: path\n          description: ResourceType id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/resourceType/{resourceTypeName}':\n    get:\n      tags:\n        - resourceType\n      summary: Find resourceType by Name\n      description: Returns a single ResourceType\n      operationId: getResourceTypeByName\n      parameters:\n        - name: resourceTypeName\n          in: path\n          description: Name of resourceType to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResourceType'\n        '404':\n          description: ResourceType not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /eventTypeToPoll:\n    get:\n      tags:\n        - eventTypeToPoll\n      summary: List eventTypeToPolls\n      operationId: listEventTypeToPoll\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/EventTypeToPoll'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - eventTypeToPoll\n      summary: Create a eventTypeToPoll\n      operationId: createEventTypeToPoll\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEventTypeToPoll'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventTypeToPoll'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/eventTypeToPoll/{eventTypeToPollId}':\n    get:\n      tags:\n        - eventTypeToPoll\n      summary: Find eventTypeToPoll by ID\n      description: Returns a single eventTypeToPoll\n      operationId: getEventTypeToPollById\n      parameters:\n        - name: eventTypeToPollId\n          in: path\n          description: ID of eventTypeToPoll to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventTypeToPoll'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: EventTypeToPoll not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - eventTypeToPoll\n      summary: Updates a eventTypeToPoll\n      operationId: updateEventTypeToPoll\n      parameters:\n        - name: eventTypeToPollId\n          in: path\n          description: ID of eventTypeToPoll that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEventTypeToPoll'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventTypeToPoll'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - eventTypeToPoll\n      summary: Deletes a eventTypeToPoll\n      operationId: deleteEventTypeToPoll\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: eventTypeToPollId\n          in: path\n          description: EventTypeToPoll id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /eventType:\n    get:\n      tags:\n        - eventType\n      summary: List eventTypes\n      operationId: listEventType\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/EventType'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - eventType\n      summary: Create a eventType\n      operationId: createEventType\n      requestBody:        \n       $ref: '#/components/requestBodies/createOrUpdateEventType'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventType'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/eventType/{eventTypeId}':\n    get:\n      tags:\n        - eventType\n      summary: Find eventType by ID\n      description: Returns a single eventType\n      operationId: getEventTypeById\n      parameters:\n        - name: eventTypeId\n          in: path\n          description: ID of role to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventType'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: EventType not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - eventType\n      summary: Updates a eventType\n      operationId: updateEventType\n      parameters:\n        - name: eventTypeId\n          in: path\n          description: ID of eventType that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateEventType'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventType'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - eventType\n      summary: Deletes a eventType\n      operationId: deleteEventType\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: eventTypeId\n          in: path\n          description: EventType id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/eventType/{eventTypeName}':\n    get:\n      tags:\n        - eventType\n      summary: Find eventType by Name\n      description: Returns a single EventType\n      operationId: getEventTypeByName\n      parameters:\n        - name: eventTypeName\n          in: path\n          description: Name of eventType to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/EventType'\n        '404':\n          description: EventType not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /user:\n    get:\n      tags:\n        - user\n      summary: List users\n      operationId: listUser\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    schema: \n                      $ref: '#/components/schemas/User'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    post:\n      tags:\n        - user\n      summary: Create a user\n      operationId: createUser\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateUser'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/user/{userId}':\n    get:\n      tags:\n        - user\n      summary: Find user by ID\n      description: Returns a single user\n      operationId: getUserById\n      parameters:\n        - name: userId\n          in: path\n          description: ID of user to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/InvalidIDSupplied'\n        '404':\n          description: User not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    put:\n      tags:\n        - user\n      summary: Updates a role\n      operationId: updateUser\n      parameters:\n        - name: userId\n          in: path\n          description: ID of role that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateUser'\n      responses:\n        '200':\n          description: Updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/400Error'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n    delete:\n      tags:\n        - user\n      summary: Deletes a role\n      operationId: deleteUser\n      parameters:\n        - name: userId\n          in: path\n          description: Role id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Succes\n        '400':\n           $ref: '#/components/responses/InvalidIDSupplied'\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  '/user/{userName}':\n    get:\n      tags:\n        - user\n      summary: Find user by Name\n      description: Returns a single User\n      operationId: getUserByName\n      parameters:\n        - name: userName\n          in: path\n          description: Name of user to return\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          description: User not found\n        '500':\n          $ref: '#/components/responses/500Error'\n      security:\n        - bearerAuth: []\n  /user/login:\n    post:\n      tags:\n        - user\n      summary: Logs user into the system\n      operationId: loginUser\n      requestBody:\n        $ref: '#/components/requestBodies/loginUser'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: string\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '401':\n          description: Invalid username/password supplied\n  /user/register:\n    post:\n      tags:\n        - user\n      summary: Register a user\n      operationId: registerUser\n      requestBody:\n        $ref: '#/components/requestBodies/createOrUpdateUser'\n      responses:\n        '201':\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/InvalidRequestPayload'\n        '500':\n          $ref: '#/components/responses/500Error'\n  /user/logout:\n    post:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\ncomponents:\n  schemas:\n    Model:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          description: The ID.\n        createdAt:\n          type: string\n          format: date-time\n          description: The created date.\n        updatedAt:\n          type: string\n          format: date-time\n          description: The updated date.\n        deletedAt:\n          type: string\n          format: date-time\n          description: The deleted date.\n    Authorization:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        userId:\n          type: string\n          format: uuid\n          description: The user id.\n        roleId:\n          type: string\n          format: uuid\n          description: The role id.\n        domainId:\n          type: string\n          format: uuid\n          description: The domain id.\n    User:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The user name.\n        email:\n          type: string\n          description: The user email.\n        password:\n          type: string\n          description: The user password.\n        firstname:\n          type: string\n          description: The user first name.\n        secondname:\n          type: string\n          description: The user second name.\n        companyId:\n          type: string\n          description: The user company id.\n        logo:\n          type: string\n          description: The user logo.\n        description:\n          type: string\n          description: The user description.\n    Product:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The product name.\n        shortdescription:\n          type: string\n          description: The product short description.\n        description:\n          type: string\n          description: The product description.\n        logo:\n          type: string\n          description: The path to the logo.\n        repositoryURL:\n          type: string\n          description: The repository URL.\n        domainId:\n          type: integer\n          description: The domain id.\n    ConnectorProduct:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The product name.\n    Library:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The product name.\n        shortdescription:\n          type: string\n          description: The product short description.\n        description:\n          type: string\n          description: The product description.\n        logo:\n          type: string\n          description: The path to the logo.\n    Role:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The role name.\n        shortdescription:\n          type: string\n          description: The role short description.\n        description:\n          type: string\n          description: The role description.\n        logo:\n          type: string\n          description: The role logo.\n    Domain:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The domain name.\n        shortdescription:\n          type: string\n          description: The domain short description.\n        description:\n          type: string\n          description: The domain description.\n        logo:\n          type: string\n          description: The domain logo.\n        gitURL:\n          type: string\n          description: The git URL.\n        parentId:\n          type: string\n          format: uuid\n          description: The parent id.\n        childs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Domain'\n    Resource:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The resource name.\n        logicalComponentId:\n          type: string\n          format: uuid\n          description: The logical component id.\n        domainId:\n          type: string\n          format: uuid\n          description: The domain id.\n        resourceTypeId:\n          type: string\n          format: uuid\n          description: The resourceType id.\n    ResourceType:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The resourceType name.\n        pivotId:\n          type: string\n          format: uuid\n          description: The pivot id.\n        productConnectorId:\n          type: string\n          format: uuid\n          description: The productConnector id.\n    EventType:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The eventType name.\n        schema:\n          type: string\n        pivotId:\n          type: string\n          format: uuid\n          description: The pivot id.\n        productConnectorId:\n          type: string\n          format: uuid\n          description: The productConnector id.\n    EventTypeToPoll:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The eventTypeToPoll name.\n        resourceId:\n          type: string\n          format: uuid\n          description: The resource id.\n        eventTypeId:\n          type: string\n          format: uuid\n          description: The eventType id.\n    EnvironmentType:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The environmentType name.\n        shortdescription:\n          type: string\n          description: The environmentType short description.\n        description:\n          type: string\n          description: The environmentType description.\n        logo:\n          type: string\n          description: The environmentType logo.\n    Environment:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The environment name.\n        shortdescription:\n          type: string\n          description: The environment short description.\n        description:\n          type: string\n          description: The environment description.\n        logo:\n          type: string\n          description: The environment logo.\n        environmentTypeID:\n          type: string\n          format: uuid\n          description: The ID of envrionementType.\n        domainID:\n          type: string\n          format: uuid\n          description: The ID of domain.\n    Tag:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The tag name.\n        shortdescription:\n          type: string\n          description: The tag short description.\n        description:\n          type: string\n          description: The tag description.\n        logo:\n          type: string\n          description: The tag logo.\n        childs:\n          type: array\n          items:\n            $ref: '#/components/schemas/Tag'\n    Tenant:\n      type: object\n      properties:\n        model:\n          $ref: '#/components/schemas/Model'\n        name:\n          type: string\n          description: The tenant name.\n        password:\n          type: string\n          description: The tenant password.\n        shortdescription:\n          type: string\n          description: The tenant short description.\n        description:\n          type: string\n          description: The tenant description.\n        logo:\n          type: string\n          description: The tenant logo.\n    SecretAssignement:\n      type: object\n      properties:\n        secret:\n          type: string\n          description: The secret.\n        addressIP:\n          type: string\n          description: The secret IP Address.\n    LogicalComponent:\n      type: object\n      properties:\n        logicalName:\n          type: string\n          description: The logical name.\n        type:\n          type: string\n          description: The type of logical component.\n        pivotID:\n          type: string\n          format: uuid\n          description: The ID of pivot.\n        productConnectorID:\n          type: string\n          format: uuid\n          description: The ID of product connector.\n        aggregator:\n          type: string\n          description: The aggregator.\n        keyValues:\n          type: array\n          items:\n            type: object\n            properties:\n              schema: \n                $ref: '#/components/schemas/KeyValue'\n        shortdescription:\n          type: string\n          description: The logical component short description.\n        description:\n          type: string\n          description: The logical component description.\n        resources:\n          type: array\n          items:\n            type: object\n            properties:\n              schema: \n                $ref: '#/components/schemas/Resource'\n    KeyValue:\n      type: object\n      properties:\n        value:\n          type: string\n          description: The secret.\n        addressIP:\n          type: string\n          description: The secret IP Address.\n        keyID:\n          type: string\n          format: uuid\n          description: The ID of key.\n        logicalComponentID:\n          type: string\n          format: uuid\n          description: The ID of logicalComponent.\n  securitySchemes:\n    bearerAuth:            # arbitrary name for the security scheme\n      type: http\n      scheme: bearer\n      bearerFormat: JWT    # optional, arbitrary value for documentation purposes\n  requestBodies:\n    createOrUpdateAuthorization:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - userID\n              - roleID\n              - domainID\n            properties:\n              userID:\n                type: string\n                format: uuid\n              roleID:\n                type: string\n                format: uuid\n              domainID:\n                type: string\n                format: uuid\n      description: The authorization to create.\n    createOrUpdateProduct:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n              repositoryURL:\n                type: string\n              domainID:\n                type: string\n                format: uuid\n      description: The product to create.\n    createOrUpdateConnectorProduct:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n      description: The connector product to create.\n    createOrUpdateLibrary:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n      description: The library to create.\n    createOrUpdateRole:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n      description: The role to create.\n    createOrUpdateDomain:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - parentID\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n              parentID:\n                type: string\n                format: uuid\n      description: The domain to create.\n    createOrUpdateTenant:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n      description: The tenant to create.\n    createOrUpdateResource:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - logicalComponentID\n              - domainID\n              - resourceTypeID\n            properties:\n              name:\n                type: string\n              logicalComponentID:\n                type: string\n                format: uuid\n              domainID:\n                type: string\n                format: uuid\n              resourceTypeID:\n                type: string\n                format: uuid\n      description: The resource to create.\n    createOrUpdateResourceType:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - pivotID\n              - productConnectorID\n            properties:\n              name:\n                type: string\n              pivotID:\n                type: string\n                format: uuid\n              productConnectorID:\n                type: string\n                format: uuid\n      description: The resourceType to create.\n    createOrUpdateTag:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - shortdescription\n              - description\n              - logo\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n      description: The tag to create.\n    createOrUpdateEnvironmentType:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - shortdescription\n              - description\n              - logo\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n      description: The environment type to create.\n    createOrUpdateEnvironment:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - shortdescription\n              - description\n              - logo\n              - environmentTypeID\n              - domainID\n            properties:\n              name:\n                type: string\n              shortdescription:\n                type: string\n              description:\n                type: string\n              logo:\n                type: string\n              environmentTypeID:\n                type: string\n                format: uuid\n              domainID:\n                type: string\n                format: uuid\n      description: The environment to create.\n    createOrUpdateEventType:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - name\n              - schema\n              - pivotID\n              - productConnectorID\n            properties:\n              name:\n                type: string\n              schema:\n                type: string\n              pivotID:\n                type: string\n                format: uuid\n              productConnectorID:\n                type: string\n                format: uuid\n      description: The eventType to create.   \n    createOrUpdateEventTypeToPoll:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - resourceID\n              - eventTypeID\n            properties:\n              resourceID:\n                type: string\n                format: uuid\n              eventTypeID:\n                type: string\n                format: uuid\n      description: The eventTypeToPoll to create.\n    createOrUpdateUser:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n              - password\n            properties:\n              email:\n                type: string\n              password:\n                type: string\n              firstName:\n                type: string\n              lastName:\n                type: string\n              companyID:\n                type: string\n              logo:\n                type: string\n              description:\n                type: string\n      description: The user to create.\n    loginUser:\n      content:\n        application/json:\n          schema:\n            type: object\n            required:\n              - email\n              - password\n            properties:\n              email:\n                type: string\n              password:\n                type: string\n      description: The user to create.\n  responses:\n    500Error:\n      description: Database error | Tenant not found\n    500UploadLogicalComponentError:\n      description: Database error | Tenant not found | Pivot not found | ProductConnector not found\n    400Error:\n      description: Invalid ID supplied | Invalid request payload\n    InvalidRequestPayload:\n      description: Invalid request payload\n    InvalidIDSupplied:\n      description: Invalid ID supplied\n    UnauthorizedError:\n      description: Access token is missing or invalid\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\nservers:\n  - url: 'https://virtserver.swaggerhub.com/ditrit/Gandalf/1.0.0'\n  - url: 'http://virtserver.swaggerhub.com/ditrit/Gandalf/1.0.0'",
			"canonicalURL": "/github.com/ditrit/gandalf@8fb0621dae66297132d33cd6083ea76ac6728fb9/-/blob/core/aggregator/api/swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ditrit/gandalf/blob/8fb0621dae66297132d33cd6083ea76ac6728fb9/core/aggregator/api/swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at 1:33545: duplicate path: \"/eventType/{eventTypeName}\""
}