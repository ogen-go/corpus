{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/gojek/turing"
		},
		"file": {
			"name": "routers.yaml",
			"size": 0,
			"path": "api/api/specs/routers.yaml",
			"byteSize": 25623,
			"content": "openapi: 3.0.3\ninfo:\n  title: Endpoints and schemas of Turing Routers\n  version: 0.0.1\n\n.tags: \u0026tags\n  - \"Router\"\n\n.id: \u0026id\n  type: \"integer\"\n  format: \"int32\"\n\n.timeout: \u0026timeout\n  type: \"string\"\n  pattern: '^[0-9]+(ms|s|m|h)$'\n\npaths:\n  \"/projects/{project_id}/routers\":\n    get:\n      tags: *tags\n      summary: \"List routers belonging to project\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project to retrieve routers from\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: \"#/components/schemas/RouterDetails\"\n        400:\n          description: \"Invalid project_id\"\n        500:\n          description: \"Error retrieving routers\"\n    post:\n      tags: *tags\n      summary: \"Create new router in project\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project to save router\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      requestBody:\n        description: \"router configuration to save\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RouterConfig\"\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterDetails\"\n        400:\n          description: \"Invalid project_id or router configuration\"\n        500:\n          description: \"Unable to save configuration\"\n  \"/projects/{project_id}/routers/{router_id}\":\n    get:\n      tags: *tags\n      summary: \"Get router belonging to project by ID\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project to retrieve routers from\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to be retrieved\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterDetails\"\n        400:\n          description: \"Invalid project_id or router_id\"\n        404:\n          description: \"No router found\"\n    put:\n      tags: *tags\n      summary: \"Update router\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project of the router\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to update\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      requestBody:\n        description: \"router configuration to save\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RouterConfig\"\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterDetails\"\n        400:\n          description: \"Invalid project_id, router_id or router configuration\"\n        500:\n          description: \"Unable to save configuration\"\n\n    delete:\n      tags: *tags\n      summary: \"Delete router\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project of the router\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to delete\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterId\"\n        400:\n          description: \"Invalid project_id or router_id\"\n        404:\n          description: \"Router not found\"\n        500:\n          description: \"Unable to delete router\"\n\n  \"/projects/{project_id}/routers/{router_id}/deploy\":\n    post:\n      tags: *tags\n      summary: \"Deploy the current router configuration\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project that the router belongs to\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to be deployed\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        202:\n          description: \"Accepted\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterIdAndVersion\"\n        400:\n          description: \"Invalid project_id, router_id or deploy request\"\n        404:\n          description: \"No router version found\"\n\n  \"/projects/{project_id}/routers/{router_id}/undeploy\":\n    post:\n      tags: *tags\n      summary: \"Undeploy router configuration\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project that the router belongs to\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to undeploy\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterIdObject\"\n        400:\n          description: \"Invalid project_id or router_id\"\n        404:\n          description: \"Router not found\"\n        500:\n          description: \"Error undeploying router version\"\n\n  \"/projects/{project_id}/routers/{router_id}/versions\":\n    get:\n      tags: *tags\n      summary: \"List router config versions\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project to retrieve routers from\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to be retrieved\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                type: \"array\"\n                items:\n                  $ref: \"#/components/schemas/RouterVersion\"\n        400:\n          description: \"Invalid project_id or router_id\"\n        404:\n          description: \"No router versions found\"\n    post:\n      tags: *tags\n      summary: \"Create router version without deploying it\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project of the router\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to create a new version for\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      requestBody:\n        description: \"router configuration to save\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/RouterVersionConfig\"\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterVersion\"\n        400:\n          description: \"Invalid project_id, router_id or router configuration\"\n        500:\n          description: \"Unable to save configuration\"\n\n  \"/projects/{project_id}/routers/{router_id}/versions/{version}\":\n    get:\n      tags: *tags\n      summary: \"Get specific router config version\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project to retrieve routers from\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to be retrieved\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"version\"\n          description: \"version of router configuration to be retrieved\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterVersion\"\n        400:\n          description: \"Invalid project_id, router_id or version_id\"\n        404:\n          description: \"No router version found\"\n\n    delete:\n      tags: *tags\n      summary: \"Delete router version\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project of the router\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"version\"\n          description: \"version of router configuration to delete\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        202:\n          description: \"OK\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterIdAndVersion\"\n        400:\n          description: \"Invalid project_id, router_id or version\"\n        404:\n          description: \"Router version not found\"\n        500:\n          description: \"Unable to delete router version\"\n\n  \"/projects/{project_id}/routers/{router_id}/versions/{version}/deploy\":\n    post:\n      tags: *tags\n      summary: \"Deploy specified version of router configuration\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project that the router belongs to\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to be deployed\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"version\"\n          description: \"version of router configuration to be deployed\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        202:\n          description: \"Accepted\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterIdAndVersion\"\n        400:\n          description: \"Invalid project_id, router_id, version_id or deploy request\"\n        404:\n          description: \"No router version found\"\n\n  \"/projects/{project_id}/routers/{router_id}/events\":\n    get:\n      tags: *tags\n      summary: \"Get deployment events associated with this router\"\n      parameters:\n        - in: \"path\"\n          name: \"project_id\"\n          description: \"id of the project that the router belongs to\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n        - in: \"path\"\n          name: \"router_id\"\n          description: \"id of the router to be deployed\"\n          schema:\n            \u003c\u003c: *id\n          required: true\n      responses:\n        200:\n          description: \"Get events\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/RouterEvents\"\n        400:\n          description: \"Invalid project_id or router_id\"\n        404:\n          description: \"No router version found\"\n\ncomponents:\n  schemas:\n    RouterId:\n      $ref: \"./common.yaml#/components/schemas/IdObject\"\n\n    RouterIdObject:\n      type: object\n      properties:\n        router_id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n\n    RouterEvents:\n      type: object\n      properties:\n        events:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/Event\"\n\n    RouterIdAndVersion:\n      type: object\n      properties:\n        router_id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n        version:\n          $ref: \"common.yaml#/components/schemas/Id\"\n\n    Router:\n      type: \"object\"\n      nullable: true\n      properties:\n        id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n          readOnly: true\n        name:\n          type: \"string\"\n        created_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        updated_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        project_id:\n          type: \"integer\"\n        environment_name:\n          type: \"string\"\n        endpoint:\n          type: \"string\"\n          readOnly: true\n        monitoring_url:\n          type: \"string\"\n          readOnly: true\n        status:\n          $ref: \"#/components/schemas/RouterStatus\"\n\n    RouterDetails:\n      allOf:\n        - $ref: \"#/components/schemas/Router\"\n        - type: object\n          properties:\n            config:\n              $ref: \"#/components/schemas/RouterVersion\"\n\n    RouterVersion:\n      type: \"object\"\n      properties:\n        id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n        created_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        updated_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        router:\n          $ref: \"#/components/schemas/Router\"\n        version:\n          type: \"integer\"\n        status:\n          $ref: \"#/components/schemas/RouterVersionStatus\"\n        error:\n          type: \"string\"\n        image:\n          type: \"string\"\n        routes:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/Route\"\n        default_route:\n          type: \"string\"\n        experiment_engine:\n          $ref: \"experiment-engines.yaml#/components/schemas/ExperimentConfig\"\n        resource_request:\n          $ref: \"#/components/schemas/ResourceRequest\"\n        timeout:\n          \u003c\u003c: *timeout\n        log_config:\n          type: \"object\"\n          properties:\n            log_level:\n              $ref: \"#/components/schemas/LogLevel\"\n            custom_metrics_enabled:\n              type: \"boolean\"\n            fiber_debug_log_enabled:\n              type: \"boolean\"\n            jaeger_enabled:\n              type: \"boolean\"\n            result_logger_type:\n              $ref: \"#/components/schemas/ResultLoggerType\"\n            bigquery_config:\n              $ref: \"#/components/schemas/BigQueryConfig\"\n            kafka_config:\n              $ref: \"#/components/schemas/KafkaConfig\"\n        enricher:\n          $ref: \"#/components/schemas/Enricher\"\n        ensembler:\n          $ref: \"#/components/schemas/RouterEnsemblerConfig\"\n        monitoring_url:\n          type: \"string\"\n          readOnly: true\n        default_route_id:\n          type: \"string\"\n        rules:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/TrafficRule\"\n\n    ResultLoggerType:\n      type: \"string\"\n      enum:\n        - \"nop\"\n        - \"console\"\n        - \"bigquery\"\n        - \"kafka\"\n      default: \"nop\"\n\n    RouterStatus:\n      type: \"string\"\n      enum:\n        - \"deployed\"\n        - \"undeployed\"\n        - \"failed\"\n        - \"pending\"\n      default: \"pending\"\n\n    RouterVersionStatus:\n      type: \"string\"\n      enum:\n        - \"deployed\"\n        - \"undeployed\"\n        - \"failed\"\n        - \"pending\"\n      default: \"pending\"\n\n    LogLevel:\n      type: \"string\"\n      enum:\n        - \"DEBUG\"\n        - \"INFO\"\n        - \"WARN\"\n        - \"ERROR\"\n\n    RouterConfig:\n      type: \"object\"\n      required:\n        - environment_name\n        - name\n        - config\n      properties:\n        environment_name:\n          type: \"string\"\n        name:\n          type: \"string\"\n          pattern: '^[a-z0-9-]*$'\n        config:\n          $ref: \"#/components/schemas/RouterVersionConfig\"\n\n    RouterVersionConfig:\n      type: \"object\"\n      required:\n        - routes\n        - default_route_id\n        - experiment_engine\n        - timeout\n        - log_config\n      properties:\n        routes:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/Route\"\n        rules:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/TrafficRule\"\n        default_route_id:\n          type: \"string\"\n        experiment_engine:\n          $ref: \"experiment-engines.yaml#/components/schemas/ExperimentConfig\"\n        resource_request:\n          $ref: \"#/components/schemas/ResourceRequest\"\n        timeout:\n          \u003c\u003c: *timeout\n        log_config:\n          type: \"object\"\n          properties:\n            result_logger_type:\n              $ref: \"#/components/schemas/ResultLoggerType\"\n            bigquery_config:\n              $ref: \"#/components/schemas/BigQueryConfig\"\n            kafka_config:\n              $ref: \"#/components/schemas/KafkaConfig\"\n        enricher:\n          $ref: \"#/components/schemas/Enricher\"\n        ensembler:\n          $ref: \"#/components/schemas/RouterEnsemblerConfig\"\n\n    Route:\n      type: \"object\"\n      required:\n        - id\n        - type\n        - endpoint\n        - timeout\n      properties:\n        id:\n          type: \"string\"\n        type:\n          type: \"string\"\n        endpoint:\n          type: \"string\"\n        timeout:\n          \u003c\u003c: *timeout\n        annotations:\n          type: \"object\"\n          nullable: true\n\n    TrafficRule:\n      type: \"object\"\n      required:\n        - conditions\n        - routes\n      properties:\n        conditions:\n          type: \"array\"\n          items:\n            $ref: \"#/components/schemas/TrafficRuleCondition\"\n        routes:\n          type: \"array\"\n          description: \"List of IDs of the routes, that should be activated by this rule\"\n          items:\n            type: \"string\"\n\n    TrafficRuleCondition:\n      type: \"object\"\n      required:\n        - field_source\n        - field\n        - operator\n        - values\n      properties:\n        field_source:\n          $ref: \"common.yaml#/components/schemas/FieldSource\"\n        field:\n          type: \"string\"\n          description: \u003e\n            If `field_source` is `header`, then `field` should contain the name of the request header,\n            otherwise, if `field_source` is `payload`, then `field` should be a valid json path\n        operator:\n          type: \"string\"\n          enum:\n            - \"in\"\n        values:\n          type: \"array\"\n          items:\n            type: \"string\"\n\n    Enricher:\n      type: \"object\"\n      required:\n        - image\n        - resource_request\n        - endpoint\n        - timeout\n        - port\n        - env\n      properties:\n        id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n        image:\n          type: \"string\"\n        resource_request:\n          $ref: \"#/components/schemas/ResourceRequest\"\n        endpoint:\n          type: \"string\"\n        timeout:\n          \u003c\u003c: *timeout\n        port:\n          type: \"integer\"\n        env:\n          type: \"array\"\n          items:\n            $ref: \"common.yaml#/components/schemas/EnvVar\"\n        service_account:\n          type: \"string\"\n          description: \u003e\n            (Optional) Name of the secret registered in the current MLP project that contains the Google service account\n            JSON key. This secret will be mounted as a file inside the container and the environment variable\n            GOOGLE_APPLICATION_CREDENTIALS will point to the service account file.\"\n          example: \"secret-name-for-google-service-account\"\n        created_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        updated_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n\n    RouterEnsemblerConfig:\n      type: \"object\"\n      required:\n        - type\n      properties:\n        id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n          readOnly: true\n        type:\n          description: \"type of ensembler\"\n          type: \"string\"\n          enum: [ \"standard\", \"docker\", \"pyfunc\"]\n        standard_config:\n          $ref: \"#/components/schemas/EnsemblerStandardConfig\"\n        docker_config:\n          $ref: \"#/components/schemas/EnsemblerDockerConfig\"\n        pyfunc_config:\n          $ref: \"#/components/schemas/EnsemblerPyfuncConfig\"\n        created_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        updated_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n\n    EnsemblerStandardConfig:\n      description: \"ensembler config when ensembler type is standard\"\n      type: \"object\"\n      nullable: true\n      required:\n        - \"experiment_mappings\"\n      properties:\n        experiment_mappings:\n          type: \"array\"\n          items:\n            type: \"object\"\n            required:\n              - \"experiment\"\n              - \"treatment\"\n              - \"route\"\n            properties:\n              experiment:\n                description: \"experiment name from the configured experiment engine\"\n                type: \"string\"\n                example: \"experiment-1\"\n              treatment:\n                description: \"treatment name of the experiment\"\n                type: \"string\"\n                example: \"treatment-1\"\n              route:\n                description: \"route id of the routes configured in the router\"\n                type: \"string\"\n                example: \"route-1\"\n\n    EnsemblerDockerConfig:\n      description: \"ensembler config when ensembler type is docker\"\n      type: \"object\"\n      nullable: true\n      required:\n        - image\n        - resource_request\n        - endpoint\n        - timeout\n        - port\n        - env\n      properties:\n        image:\n          type: \"string\"\n          pattern: '^([a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*(?::\\d{2,5})?\\/)?([a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*\\/)*([a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*)(?::[a-zA-Z0-9]+(?:[._-][a-zA-Z0-9]+)*)?$'\n        resource_request:\n          $ref: \"#/components/schemas/ResourceRequest\"\n        endpoint:\n          type: \"string\"\n        timeout:\n          \u003c\u003c: *timeout\n        port:\n          type: \"integer\"\n        env:\n          type: \"array\"\n          items:\n            $ref: \"common.yaml#/components/schemas/EnvVar\"\n        service_account:\n          type: \"string\"\n          description: \u003e\n            (Optional) Name of the secret registered in the current MLP project that contains the Google service account\n            JSON key. This secret will be mounted as a file inside the container and the environment variable\n            GOOGLE_APPLICATION_CREDENTIALS will point to the service account file.\"\n          example: \"secret-name-for-google-service-account\"\n\n    EnsemblerPyfuncConfig:\n      description: \"ensembler config when ensembler type is pyfunc\"\n      type: \"object\"\n      nullable: true\n      required:\n        - project_id\n        - ensembler_id\n        - resource_request\n        - timeout\n      properties:\n        project_id:\n          type: \"integer\"\n        ensembler_id:\n          type: \"integer\"\n        resource_request:\n          $ref: \"#/components/schemas/ResourceRequest\"\n        timeout:\n          \u003c\u003c: *timeout\n        env:\n          type: \"array\"\n          items:\n            $ref: \"common.yaml#/components/schemas/EnvVar\"\n\n    ResourceRequest:\n      type: \"object\"\n      properties:\n        min_replica:\n          type: \"integer\"\n        max_replica:\n          type: \"integer\"\n        cpu_request:\n          type: \"string\"\n          pattern: '^(\\d{1,3}(\\.\\d{1,3})?)$|^(\\d{2,5}m)$'\n        memory_request:\n          type: \"string\"\n          pattern: '^\\d+(Ei?|Pi?|Ti?|Gi?|Mi?|Ki?)?$'\n\n    BigQueryConfig:\n      type: \"object\"\n      nullable: true\n      required:\n        - table\n        - service_account_secret\n      properties:\n        table:\n          type: \"string\"\n          pattern: '^[a-zA-Z][a-zA-Z0-9-]+\\.\\w+([_]?\\w)+\\.\\w+([_]?\\w)+$'\n        service_account_secret:\n          type: \"string\"\n        batch_load:\n          type: \"boolean\"\n          nullable: true\n\n    KafkaConfig:\n      type: \"object\"\n      nullable: true\n      required:\n        - brokers\n        - topic\n        - serialization_format\n      properties:\n        brokers:\n          type: \"string\"\n          pattern: '^([a-zA-Z]+:\\/\\/)?\\[?([0-9a-zA-Z\\-%._:]*)\\]?:([0-9]+)(,([a-zA-Z]+:\\/\\/)?\\[?([0-9a-zA-Z\\-%._:]*)\\]?:([0-9]+))*$'\n          description: Comma-separated list of host and port pairs that are the addresses of the Kafka brokers.\n        topic:\n          type: \"string\"\n          pattern: '^[A-Za-z0-9_.-]{1,249}$'\n        serialization_format:\n          type: \"string\"\n          enum:\n            - \"json\"\n            - \"protobuf\"\n\n    Event:\n      type: \"object\"\n      properties:\n        id:\n          $ref: \"common.yaml#/components/schemas/Id\"\n          readOnly: true\n        created_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        updated_at:\n          type: \"string\"\n          format: \"date-time\"\n          readOnly: true\n        version:\n          type: \"integer\"\n        event_type:\n          type: \"string\"\n          enum: [ \"info\", \"error\" ]\n        stage:\n          type: \"string\"\n        message:\n          type: \"string\""
		}
	},
	"Error": "parse: parse spec: paths: /projects/{project_id}/routers/{router_id}/versions: get: operation \"\": responses: 200: content: \"application/json\": schema: parse schema: item: parse schema: resolve \"#/components/schemas/RouterVersion\": parse schema: property \"enricher\": parse schema: resolve \"#/components/schemas/Enricher\": parse schema: property \"env\": parse schema: item: parse schema: resolve \"common.yaml#/components/schemas/EnvVar\": find schema: external base \"common.yaml\" is not supported"
}