{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/AzuraCast/AzuraCast"
		},
		"file": {
			"name": "openapi.yml",
			"size": 0,
			"path": "web/static/api/openapi.yml",
			"byteSize": 138961,
			"content": "openapi: 3.0.0\ninfo:\n  title: AzuraCast\n  description: 'AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.'\n  license:\n    name: 'Apache 2.0'\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\n  version: 0.15.0\nservers:\n  -\n    url: 'https://demo.azuracast.com/api'\n    description: 'AzuraCast Public Demo Server'\npaths:\n  /admin/custom_fields:\n    get:\n      tags:\n        - 'Administration: Custom Fields'\n      description: 'List all current custom fields in the system.'\n      operationId: getCustomFields\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CustomField'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Administration: Custom Fields'\n      description: 'Create a new custom field.'\n      operationId: addCustomField\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomField'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomField'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/admin/custom_field/{id}':\n    get:\n      tags:\n        - 'Administration: Custom Fields'\n      description: 'Retrieve details for a single custom field.'\n      operationId: getCustomField\n      parameters:\n        -\n          name: id\n          in: path\n          description: ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomField'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Administration: Custom Fields'\n      description: 'Update details of a single custom field.'\n      operationId: editCustomField\n      parameters:\n        -\n          name: id\n          in: path\n          description: ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CustomField'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Administration: Custom Fields'\n      description: 'Delete a single custom field.'\n      operationId: deleteCustomField\n      parameters:\n        -\n          name: id\n          in: path\n          description: ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /admin/permissions:\n    get:\n      tags:\n        - 'Administration: Roles'\n      description: 'Return a list of all available permissions.'\n      operationId: getPermissions\n      responses:\n        '200':\n          description: Success\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /internal/relays:\n    get:\n      tags:\n        - 'Administration: Relays'\n      description: 'Returns all necessary information to relay all ''relayable'' stations.'\n      operationId: internalGetRelayDetails\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_Admin_Relay'\n  /admin/roles:\n    get:\n      tags:\n        - 'Administration: Roles'\n      description: 'List all current roles in the system.'\n      operationId: getRoles\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Role'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Administration: Roles'\n      description: 'Create a new role.'\n      operationId: addRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/admin/role/{id}':\n    get:\n      tags:\n        - 'Administration: Roles'\n      description: 'Retrieve details for a single current role.'\n      operationId: getRole\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Role ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Role'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Administration: Roles'\n      description: 'Update details of a single role.'\n      operationId: editRole\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Role ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Role'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Administration: Roles'\n      description: 'Delete a single role.'\n      operationId: deleteRole\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Role ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /admin/settings:\n    get:\n      tags:\n        - 'Administration: Settings'\n      description: 'List the current values of all editable system settings.'\n      operationId: getSettings\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Settings'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Administration: Settings'\n      description: 'Update settings to modify any settings provided.'\n      operationId: editSettings\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Settings'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /admin/stations:\n    get:\n      tags:\n        - 'Administration: Stations'\n      description: 'List all current stations in the system.'\n      operationId: adminGetStations\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Station'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Administration: Stations'\n      description: 'Create a new station.'\n      operationId: adminAddStation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Station'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Station'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/admin/station/{id}':\n    get:\n      tags:\n        - 'Administration: Stations'\n      description: 'Retrieve details for a single station.'\n      operationId: adminGetStation\n      parameters:\n        -\n          name: id\n          in: path\n          description: ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Station'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Administration: Stations'\n      description: 'Update details of a single station.'\n      operationId: adminEditStation\n      parameters:\n        -\n          name: id\n          in: path\n          description: ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Station'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Administration: Stations'\n      description: 'Delete a single station.'\n      operationId: adminDeleteStation\n      parameters:\n        -\n          name: id\n          in: path\n          description: ID\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /admin/storage_locations:\n    get:\n      tags:\n        - 'Administration: Storage Locations'\n      description: 'List all current storage locations in the system.'\n      operationId: getStorageLocations\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_Admin_StorageLocation'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Administration: Storage Locations'\n      description: 'Create a new storage location.'\n      operationId: addStorageLocation\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_Admin_StorageLocation'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Admin_StorageLocation'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/admin/storage_location/{id}':\n    get:\n      tags:\n        - 'Administration: Storage Locations'\n      description: 'Retrieve details for a single storage location.'\n      operationId: getStorageLocation\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'User ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Admin_StorageLocation'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Administration: Storage Locations'\n      description: 'Update details of a single storage location.'\n      operationId: editStorageLocation\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Storage Location ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_Admin_StorageLocation'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Administration: Storage Locations'\n      description: 'Delete a single storage location.'\n      operationId: deleteStorageLocation\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'Storage Location ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /admin/users:\n    get:\n      tags:\n        - 'Administration: Users'\n      description: 'List all current users in the system.'\n      operationId: getUsers\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Administration: Users'\n      description: 'Create a new user.'\n      operationId: addUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/admin/user/{id}':\n    get:\n      tags:\n        - 'Administration: Users'\n      description: 'Retrieve details for a single current user.'\n      operationId: getUser\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'User ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Administration: Users'\n      description: 'Update details of a single user.'\n      operationId: editUser\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'User ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Administration: Users'\n      description: 'Delete a single user.'\n      operationId: deleteUser\n      parameters:\n        -\n          name: id\n          in: path\n          description: 'User ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /status:\n    get:\n      tags:\n        - Miscellaneous\n      description: 'Returns an affirmative response if the API is active.'\n      operationId: bc32a129ca3e8ad2060b71bdd90da78d\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_SystemStatus'\n  /time:\n    get:\n      tags:\n        - Miscellaneous\n      description: 'Returns the time (with formatting) in GMT and the user''s local time zone, if logged in.'\n      operationId: 3092a8238a915a0b6b324f2a90942a94\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Time'\n  /nowplaying:\n    get:\n      tags:\n        - 'Now Playing'\n      description: 'Returns a full summary of all stations'' current state.'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_NowPlaying'\n  '/nowplaying/{station_id}':\n    get:\n      tags:\n        - 'Now Playing'\n      description: 'Returns a full summary of the specified station''s current state.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_NowPlaying'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n  '/station/{station_id}/art/{media_id}':\n    get:\n      tags:\n        - 'Stations: Media'\n      description: 'Returns the album art for a song, or a generic image.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: media_id\n          in: path\n          description: 'The station media unique ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: 'The requested album artwork'\n        '404':\n          description: 'Image not found; generic filler image.'\n    post:\n      tags:\n        - 'Stations: Media'\n      description: 'Sets the album art for a track.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Media ID'\n          required: true\n          schema:\n            anyOf:\n              -\n                type: integer\n                format: int64\n              -\n                type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Media'\n      description: 'Removes the album art for a track.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Media ID'\n          required: true\n          schema:\n            anyOf:\n              -\n                type: integer\n                format: int64\n              -\n                type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/automation/run':\n    put:\n      tags:\n        - 'Stations: Automation'\n      description: 'Run automated assignment.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/files':\n    get:\n      tags:\n        - 'Stations: Media'\n      description: 'List all current uploaded files.'\n      operationId: getFiles\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StationMedia'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Media'\n      description: 'Upload a new file.'\n      operationId: addFile\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_UploadFile'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationMedia'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/file/{id}':\n    get:\n      tags:\n        - 'Stations: Media'\n      description: 'Retrieve details for a single file.'\n      operationId: getFile\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Media ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationMedia'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Media'\n      description: 'Update details of a single file.'\n      operationId: editFile\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Media ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationMedia'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Media'\n      description: 'Delete a single file.'\n      operationId: deleteFile\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Media ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/history':\n    get:\n      tags:\n        - 'Stations: History'\n      description: 'Return song playback history items for a given station.'\n      operationId: getStationHistory\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: start\n          in: query\n          description: 'The start date for records, in YYYY-MM-DD format.'\n          required: false\n          schema:\n            type: string\n        -\n          name: end\n          in: query\n          description: 'The end date for records, in YYYY-MM-DD format.'\n          required: false\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_DetailedSongHistory'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  /stations:\n    get:\n      tags:\n        - 'Stations: General'\n      description: 'Returns a list of stations.'\n      operationId: getStations\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_NowPlaying_Station'\n  '/station/{station_id}':\n    get:\n      tags:\n        - 'Stations: General'\n      description: 'Return information about a single station.'\n      operationId: getStation\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_NowPlaying_Station'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n  '/station/{station_id}/listeners':\n    get:\n      tags:\n        - 'Stations: Listeners'\n      description: 'Return detailed information about current listeners.'\n      operationId: getStationListeners\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_Listener'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/mount/{id}/intro':\n    get:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Get the intro track for a mount point.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Mount Point ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Update the intro track for a mount point.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Mount Point ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Removes the intro track for a mount point.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Mount Point ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/mounts':\n    get:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'List all current mount points.'\n      operationId: getStationMounts\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StationMount'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Create a new mount point.'\n      operationId: addMount\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationMount'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationMount'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/mount/{id}':\n    get:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Retrieve details for a single mount point.'\n      operationId: getMount\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Streamer ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationMount'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Update details of a single mount point.'\n      operationId: editMount\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Streamer ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationMount'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Mount Points'\n      description: 'Delete a single mount point.'\n      operationId: deleteMount\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'StationMount ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/playlists':\n    get:\n      tags:\n        - 'Stations: Playlists'\n      description: 'List all current playlists.'\n      operationId: getPlaylists\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StationPlaylist'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Playlists'\n      description: 'Create a new playlist.'\n      operationId: addPlaylist\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationPlaylist'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationPlaylist'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/playlist/{id}':\n    get:\n      tags:\n        - 'Stations: Playlists'\n      description: 'Retrieve details for a single playlist.'\n      operationId: getPlaylist\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Playlist ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationPlaylist'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Playlists'\n      description: 'Update details of a single playlist.'\n      operationId: editPlaylist\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Playlist ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationPlaylist'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Playlists'\n      description: 'Delete a single playlist relay.'\n      operationId: deletePlaylist\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Playlist ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcast/{podcast_id}/episodes':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'List all current episodes for a given podcast ID.'\n      operationId: getEpisodes\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_PodcastEpisode'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Create a new podcast episode.'\n      operationId: addEpisode\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_PodcastEpisode'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_PodcastEpisode'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcast/{podcast_id}/episode/{id}':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Retrieve details for a single podcast episode.'\n      operationId: getEpisode\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_PodcastEpisode'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Update details of a single podcast episode.'\n      operationId: editEpisode\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_PodcastEpisode'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Delete a single podcast episode.'\n      operationId: deleteEpisode\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcast/{podcast_id}/art':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Gets the album art for a podcast.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Sets the album art for a podcast.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Removes the album art for a podcast.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/art':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Gets the album art for a podcast episode.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: episode_id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Sets the album art for a podcast episode.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: episode_id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Removes the album art for a podcast episode.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: episode_id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Status'\n        '404':\n          description: 'Record not found'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Error'\n        '403':\n          description: 'Access denied'\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Error'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/media':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Gets the media for a podcast episode.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: episode_id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Sets the media for a podcast episode.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: episode_id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Removes the media for a podcast episode.'\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: podcast_id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n        -\n          name: episode_id\n          in: path\n          description: 'Podcast Episode ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcasts':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'List all current podcasts.'\n      operationId: getPodcasts\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_Podcast'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Create a new podcast.'\n      operationId: addPodcast\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_Podcast'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Podcast'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/podcast/{id}':\n    get:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Retrieve details for a single podcast.'\n      operationId: getPodcast\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_Podcast'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Update details of a single podcast.'\n      operationId: editPodcast\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_Podcast'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Podcasts'\n      description: 'Delete a single podcast.'\n      operationId: deletePodcast\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Podcast ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/queue':\n    get:\n      tags:\n        - 'Stations: Queue'\n      description: 'Return information about the upcoming song playback queue.'\n      operationId: getQueue\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_StationQueueDetailed'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/queue/{id}':\n    get:\n      tags:\n        - 'Stations: Queue'\n      description: 'Retrieve details of a single queued item.'\n      operationId: getQueueItem\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Queue Item ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_StationQueueDetailed'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Queue'\n      description: 'Delete a single queued item.'\n      operationId: deleteQueueItem\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Queue Item ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/remotes':\n    get:\n      tags:\n        - 'Stations: Remote Relays'\n      description: 'List all current remote relays.'\n      operationId: getRelays\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_StationRemote'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Remote Relays'\n      description: 'Create a new remote relay.'\n      operationId: addRelay\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_StationRemote'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_StationRemote'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/remote/{id}':\n    get:\n      tags:\n        - 'Stations: Remote Relays'\n      description: 'Retrieve details for a single remote relay.'\n      operationId: getRelay\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Remote Relay ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_StationRemote'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Remote Relays'\n      description: 'Update details of a single remote relay.'\n      operationId: editRelay\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Remote Relay ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Api_StationRemote'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Remote Relays'\n      description: 'Delete a single remote relay.'\n      operationId: deleteRelay\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Remote Relay ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/requests':\n    get:\n      tags:\n        - 'Stations: Song Requests'\n      description: 'Return a list of requestable songs.'\n      operationId: getRequestableSongs\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_StationRequest'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n  '/station/{station_id}/request/{request_id}':\n    post:\n      tags:\n        - 'Stations: Song Requests'\n      description: 'Submit a song request.'\n      operationId: submitSongRequest\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: request_id\n          in: path\n          description: 'The requestable song ID'\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n  '/station/{station_id}/schedule':\n    get:\n      tags:\n        - 'Stations: Schedules'\n      description: 'Return upcoming and currently ongoing schedule entries.'\n      operationId: getSchedule\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: now\n          in: query\n          description: 'The date/time to compare schedule items to. Defaults to the current date and time.'\n          required: false\n          schema:\n            type: string\n        -\n          name: rows\n          in: query\n          description: 'The number of upcoming/ongoing schedule entries to return. Defaults to 5.'\n          required: false\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Api_StationSchedule'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n  '/station/{station_id}/status':\n    get:\n      tags:\n        - 'Stations: Service Control'\n      description: 'Retrieve the current status of all serivces associated with the radio broadcast.'\n      operationId: getServiceStatus\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Api_StationServiceStatus'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/restart':\n    post:\n      tags:\n        - 'Stations: Service Control'\n      description: 'Restart all services associated with the radio broadcast.'\n      operationId: restartServices\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/frontend/{action}':\n    post:\n      tags:\n        - 'Stations: Service Control'\n      description: 'Perform service control actions on the radio frontend (Icecast, SHOUTcast, etc.)'\n      operationId: doFrontendServiceAction\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: action\n          in: path\n          description: 'The action to perform (start, stop, restart)'\n          required: false\n          schema:\n            type: string\n            default: restart\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/backend/{action}':\n    post:\n      tags:\n        - 'Stations: Service Control'\n      description: 'Perform service control actions on the radio backend (Liquidsoap)'\n      operationId: doBackendServiceAction\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: action\n          in: path\n          description: 'The action to perform (for all: start, stop, restart, skip, disconnect)'\n          required: false\n          schema:\n            type: string\n            default: restart\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/sftp-users':\n    get:\n      tags:\n        - 'Stations: SFTP Users'\n      description: 'List all current SFTP users.'\n      operationId: getSftpUsers\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SftpUser'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: SFTP Users'\n      description: 'Create a new SFTP user.'\n      operationId: addSftpUser\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SftpUser'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SftpUser'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/sftp-user/{id}':\n    get:\n      tags:\n        - 'Stations: SFTP Users'\n      description: 'Retrieve details for a single SFTP user.'\n      operationId: getSftpUser\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'SFTP User ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SftpUser'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: SFTP Users'\n      description: 'Update details of a single SFTP user.'\n      operationId: editSftpUser\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Remote Relay ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SftpUser'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: SFTP Users'\n      description: 'Delete a single remote relay.'\n      operationId: deleteSftpUser\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Remote Relay ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/streamers':\n    get:\n      tags:\n        - 'Stations: Streamers/DJs'\n      description: 'List all current Streamer/DJ accounts for the specified station.'\n      operationId: getStreamers\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StationStreamer'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Streamers/DJs'\n      description: 'Create a new Streamer/DJ account.'\n      operationId: addStreamer\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationStreamer'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationStreamer'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/streamer/{id}':\n    get:\n      tags:\n        - 'Stations: Streamers/DJs'\n      description: 'Retrieve details for a single Streamer/DJ account.'\n      operationId: getStreamer\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Streamer ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationStreamer'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Streamers/DJs'\n      description: 'Update details of a single Streamer/DJ account.'\n      operationId: editStreamer\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Streamer ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationStreamer'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Streamers/DJs'\n      description: 'Delete a single Streamer/DJ account.'\n      operationId: deleteStreamer\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'StationStreamer ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/webhooks':\n    get:\n      tags:\n        - 'Stations: Web Hooks'\n      description: 'List all current web hooks.'\n      operationId: getWebhooks\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/StationWebhook'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    post:\n      tags:\n        - 'Stations: Web Hooks'\n      description: 'Create a new web hook.'\n      operationId: addWebhook\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationWebhook'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationWebhook'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n  '/station/{station_id}/webhook/{id}':\n    get:\n      tags:\n        - 'Stations: Web Hooks'\n      description: 'Retrieve details for a single web hook.'\n      operationId: getWebhook\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Web Hook ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StationWebhook'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    put:\n      tags:\n        - 'Stations: Web Hooks'\n      description: 'Update details of a single web hook.'\n      operationId: editWebhook\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Web Hook ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/StationWebhook'\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\n    delete:\n      tags:\n        - 'Stations: Web Hooks'\n      description: 'Delete a single web hook relay.'\n      operationId: deleteWebhook\n      parameters:\n        -\n          $ref: '#/components/parameters/StationIdRequired'\n        -\n          name: id\n          in: path\n          description: 'Web Hook ID'\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          $ref: '#/components/responses/Success'\n        '403':\n          $ref: '#/components/responses/AccessDenied'\n        '404':\n          $ref: '#/components/responses/RecordNotFound'\n        '500':\n          $ref: '#/components/responses/GenericError'\n      security:\n        -\n          ApiKey: []\ncomponents:\n  schemas:\n    Api_Admin_Relay:\n      properties:\n        id:\n          description: 'Station ID'\n          type: integer\n          example: 1\n        name:\n          description: 'Station name'\n          type: string\n          example: 'AzuraTest Radio'\n          nullable: true\n        shortcode:\n          description: 'Station \"short code\", used for URL and folder paths'\n          type: string\n          example: azuratest_radio\n          nullable: true\n        description:\n          description: 'Station description'\n          type: string\n          example: 'An AzuraCast station!'\n          nullable: true\n        url:\n          description: 'Station homepage URL'\n          type: string\n          example: 'https://www.azuracast.com/'\n          nullable: true\n        genre:\n          description: 'The genre of the station'\n          type: string\n          example: Variety\n          nullable: true\n        type:\n          description: 'Which broadcasting software (frontend) the station uses'\n          type: string\n          example: shoutcast2\n          nullable: true\n        port:\n          description: 'The port used by this station to serve its broadcasts.'\n          type: integer\n          example: 8000\n          nullable: true\n        relay_pw:\n          description: 'The relay password for the frontend (if applicable).'\n          type: string\n          example: p4ssw0rd\n        admin_pw:\n          description: 'The administrator password for the frontend (if applicable).'\n          type: string\n          example: p4ssw0rd\n        mounts:\n          description: '*/'\n          type: array\n          items: {  }\n      type: object\n    Api_Admin_StorageLocation:\n      properties:\n        id:\n          type: integer\n          example: 1\n        type:\n          description: 'The type of storage location.'\n          type: string\n          example: station_media\n        adapter:\n          description: 'The storage adapter to use for this location.'\n          type: string\n          example: local\n        path:\n          description: 'The local path, if the local adapter is used, or path prefix for S3/remote adapters.'\n          type: string\n          example: /var/azuracast/stations/azuratest_radio/media\n          nullable: true\n        s3CredentialKey:\n          description: 'The credential key for S3 adapters.'\n          type: string\n          example: your-key-here\n          nullable: true\n        s3CredentialSecret:\n          description: 'The credential secret for S3 adapters.'\n          type: string\n          example: your-secret-here\n          nullable: true\n        s3Region:\n          description: 'The region for S3 adapters.'\n          type: string\n          example: your-region\n          nullable: true\n        s3Version:\n          description: 'The API version for S3 adapters.'\n          type: string\n          example: latest\n          nullable: true\n        s3Bucket:\n          description: 'The S3 bucket name for S3 adapters.'\n          type: string\n          example: your-bucket-name\n          nullable: true\n        s3Endpoint:\n          description: 'The optional custom S3 endpoint S3 adapters.'\n          type: string\n          example: 'https://your-region.digitaloceanspaces.com'\n          nullable: true\n        storageQuota:\n          type: string\n          example: '50 GB'\n          nullable: true\n        storageQuotaBytes:\n          type: string\n          example: '120000'\n          nullable: true\n        storageUsed:\n          type: string\n          example: '1 GB'\n          nullable: true\n        storageUsedBytes:\n          type: string\n          example: '60000'\n          nullable: true\n        storageAvailable:\n          type: string\n          example: '1 GB'\n          nullable: true\n        storageAvailableBytes:\n          type: string\n          example: '120000'\n          nullable: true\n        storageUsedPercent:\n          type: integer\n          example: '75'\n          nullable: true\n        isFull:\n          type: boolean\n          example: 'true'\n        uri:\n          description: 'The URI associated with the storage location.'\n          type: string\n          example: /var/azuracast/www\n        stations:\n          description: 'The stations using this storage location, if any.'\n          type: array\n          items:\n            type: string\n            example: 'AzuraTest Radio'\n          nullable: true\n      type: object\n    Api_DetailedSongHistory:\n      type: object\n      allOf:\n        -\n          properties:\n            listeners_start:\n              description: 'Number of listeners when the song playback started.'\n              type: integer\n              example: 94\n            listeners_end:\n              description: 'Number of listeners when song playback ended.'\n              type: integer\n              example: 105\n            delta_total:\n              description: 'The sum total change of listeners between the song''s start and ending.'\n              type: integer\n              example: 11\n        -\n          $ref: '#/components/schemas/Api_NowPlaying_SongHistory'\n    Api_Error:\n      properties:\n        code:\n          description: 'The numeric code of the error.'\n          type: integer\n          example: 500\n        type:\n          description: 'The programmatic class of error.'\n          type: string\n          example: NotLoggedInException\n        message:\n          description: 'The text description of the error.'\n          type: string\n          example: 'Error description.'\n        formatted_message:\n          description: 'The HTML-formatted text description of the error.'\n          type: string\n          example: '\u003cb\u003eError description.\u003c/b\u003e\u003cbr\u003eDetailed error text.'\n          nullable: true\n        extra_data:\n          description: 'Stack traces and other supplemental data.'\n          type: array\n          items: {  }\n        success:\n          description: 'Used for API calls that expect an \\Entity\\Api\\Status type response.'\n          type: boolean\n          example: false\n      type: object\n    Api_Listener:\n      properties:\n        ip:\n          description: 'The listener''s IP address'\n          type: string\n          example: 127.0.0.1\n        user_agent:\n          description: 'The listener''s HTTP User-Agent'\n          type: string\n          example: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.86 Safari/537.36'\n        hash:\n          description: 'A unique identifier for this listener/user agent (used for unique calculations).'\n          type: string\n          example: ''\n        client:\n          description: 'The listener''s client details (extracted from user-agent)'\n          type: string\n          example: ''\n        is_mobile:\n          description: 'Whether the user-agent is likely a mobile browser.'\n          type: boolean\n          example: true\n        mount_is_local:\n          description: 'Whether the user is connected to a local mount point or a remote one.'\n          type: boolean\n          example: false\n        mount_name:\n          description: 'The display name of the mount point.'\n          type: string\n          example: /radio.mp3\n        connected_on:\n          description: 'UNIX timestamp that the user first connected.'\n          type: integer\n          example: 1609480800\n        connected_until:\n          description: 'UNIX timestamp that the user disconnected (or the latest timestamp if they are still connected).'\n          type: integer\n          example: 1609480800\n        connected_time:\n          description: 'Number of seconds that the user has been connected.'\n          type: integer\n          example: 30\n        location:\n          description: 'Location metadata, if available'\n          type: array\n          items: {  }\n      type: object\n    Api_NewRecord:\n      type: object\n      allOf:\n        -\n          properties:\n            links:\n              type: array\n              items:\n                type: string\n                example: 'http://localhost/api/record/1'\n        -\n          $ref: '#/components/schemas/Api_Status'\n    Api_NowPlaying_CurrentSong:\n      type: object\n      allOf:\n        -\n          properties:\n            elapsed:\n              description: 'Elapsed time of the song''s playback since it started.'\n              type: integer\n              example: 25\n            remaining:\n              description: 'Remaining time in the song, in seconds.'\n              type: integer\n              example: 155\n        -\n          $ref: '#/components/schemas/Api_NowPlaying_SongHistory'\n    Api_NowPlaying_Listeners:\n      properties:\n        total:\n          description: 'Total non-unique current listeners'\n          type: integer\n          example: 20\n        unique:\n          description: 'Total unique current listeners'\n          type: integer\n          example: 15\n        current:\n          description: 'Total non-unique current listeners (Legacy field, may be retired in the future.)'\n          type: integer\n          example: 20\n      type: object\n    Api_NowPlaying_Live:\n      properties:\n        is_live:\n          description: 'Whether the stream is known to currently have a live DJ.'\n          type: boolean\n          example: false\n        streamer_name:\n          description: 'The current active streamer/DJ, if one is available.'\n          type: string\n          example: 'DJ Jazzy Jeff'\n        broadcast_start:\n          description: 'The start timestamp of the current broadcast, if one is available.'\n          type: integer\n          example: '1591548318'\n          nullable: true\n      type: object\n    Api_NowPlaying:\n      properties:\n        station:\n          $ref: '#/components/schemas/Api_NowPlaying_Station'\n        listeners:\n          $ref: '#/components/schemas/Api_NowPlaying_Listeners'\n        live:\n          $ref: '#/components/schemas/Api_NowPlaying_Live'\n        now_playing:\n          nullable: true\n          oneOf:\n            -\n              $ref: '#/components/schemas/Api_NowPlaying_CurrentSong'\n        playing_next:\n          nullable: true\n          oneOf:\n            -\n              $ref: '#/components/schemas/Api_NowPlaying_StationQueue'\n        song_history:\n          description: '*/'\n          type: array\n          items:\n            $ref: '#/components/schemas/Api_NowPlaying_SongHistory'\n        is_online:\n          description: 'Whether the stream is currently online.'\n          type: boolean\n          example: true\n        cache:\n          description: 'Debugging information about where the now playing data comes from.'\n          type: string\n          enum:\n            - hit\n            - database\n            - station\n          nullable: true\n      type: object\n    Api_NowPlaying_SongHistory:\n      properties:\n        sh_id:\n          description: 'Song history unique identifier'\n          type: integer\n        played_at:\n          description: 'UNIX timestamp when playback started.'\n          type: integer\n          example: 1609480800\n        duration:\n          description: 'Duration of the song in seconds'\n          type: integer\n          example: 180\n        playlist:\n          description: 'Indicates the playlist that the song was played from, if available, or empty string if not.'\n          type: string\n          example: 'Top 100'\n          nullable: true\n        streamer:\n          description: 'Indicates the current streamer that was connected, if available, or empty string if not.'\n          type: string\n          example: 'Test DJ'\n          nullable: true\n        is_request:\n          description: 'Indicates whether the song is a listener request.'\n          type: boolean\n        song:\n          $ref: '#/components/schemas/Api_Song'\n      type: object\n    Api_NowPlaying_Station:\n      properties:\n        id:\n          description: 'Station ID'\n          type: integer\n          example: 1\n        name:\n          description: 'Station name'\n          type: string\n          example: 'AzuraTest Radio'\n        shortcode:\n          description: 'Station \"short code\", used for URL and folder paths'\n          type: string\n          example: azuratest_radio\n        description:\n          description: 'Station description'\n          type: string\n          example: 'An AzuraCast station!'\n        frontend:\n          description: 'Which broadcasting software (frontend) the station uses'\n          type: string\n          example: shoutcast2\n        backend:\n          description: 'Which AutoDJ software (backend) the station uses'\n          type: string\n          example: liquidsoap\n        listen_url:\n          description: 'The full URL to listen to the default mount of the station'\n          example: 'http://localhost:8000/radio.mp3'\n        url:\n          description: 'The public URL of the station.'\n          type: string\n          example: 'https://example.com/'\n          nullable: true\n        public_player_url:\n          description: 'The public player URL for the station.'\n          example: 'https://example.com/public/example_station'\n        playlist_pls_url:\n          description: 'The playlist download URL in PLS format.'\n          example: 'https://example.com/public/example_station/playlist.pls'\n        playlist_m3u_url:\n          description: 'The playlist download URL in M3U format.'\n          example: 'https://example.com/public/example_station/playlist.m3u'\n        is_public:\n          description: 'If the station is public (i.e. should be shown in listings of all stations)'\n          type: boolean\n          example: true\n        mounts:\n          description: '*/'\n          type: array\n          items:\n            $ref: '#/components/schemas/Api_NowPlaying_StationMount'\n        remotes:\n          description: '*/'\n          type: array\n          items:\n            $ref: '#/components/schemas/Api_NowPlaying_StationRemote'\n      type: object\n    Api_NowPlaying_StationMount:\n      type: object\n      allOf:\n        -\n          properties:\n            path:\n              description: 'The relative path that corresponds to this mount point'\n              type: string\n              example: /radio.mp3\n            is_default:\n              description: 'If the mount is the default mount for the parent station'\n              type: boolean\n              example: true\n        -\n          $ref: '#/components/schemas/Api_NowPlaying_StationRemote'\n    Api_NowPlaying_StationQueue:\n      properties:\n        cued_at:\n          description: 'UNIX timestamp when the AutoDJ is expected to queue the song for playback.'\n          type: integer\n          example: 1609480800\n        played_at:\n          description: 'UNIX timestamp when playback is expected to start.'\n          type: integer\n          example: 1609480800\n        duration:\n          description: 'Duration of the song in seconds'\n          type: integer\n          example: 180\n        playlist:\n          description: 'Indicates the playlist that the song was played from, if available, or empty string if not.'\n          type: string\n          example: 'Top 100'\n          nullable: true\n        is_request:\n          description: 'Indicates whether the song is a listener request.'\n          type: boolean\n        song:\n          $ref: '#/components/schemas/Api_Song'\n      type: object\n    Api_NowPlaying_StationRemote:\n      properties:\n        id:\n          description: 'Mount/Remote ID number.'\n          type: integer\n          example: 1\n        name:\n          description: 'Mount point name/URL'\n          type: string\n          example: /radio.mp3\n        url:\n          description: 'Full listening URL specific to this mount'\n          example: 'http://localhost:8000/radio.mp3'\n        bitrate:\n          description: 'Bitrate (kbps) of the broadcasted audio (if known)'\n          type: integer\n          example: 128\n          nullable: true\n        format:\n          description: 'Audio encoding format of broadcasted audio (if known)'\n          type: string\n          example: mp3\n          nullable: true\n        listeners:\n          $ref: '#/components/schemas/Api_NowPlaying_Listeners'\n      type: object\n    Api_Podcast:\n      type: object\n      allOf:\n        -\n          properties:\n            id:\n              type: string\n              nullable: true\n            storage_location_id:\n              type: integer\n              nullable: true\n            title:\n              type: string\n              nullable: true\n            link:\n              type: string\n              nullable: true\n            description:\n              type: string\n              nullable: true\n            language:\n              type: string\n              nullable: true\n            author:\n              type: string\n              nullable: true\n            email:\n              type: string\n              nullable: true\n            has_custom_art:\n              type: boolean\n            art:\n              type: string\n              nullable: true\n            art_updated_at:\n              type: integer\n            categories:\n              type: array\n              items:\n                type: string\n            episodes:\n              type: array\n              items:\n                type: string\n        -\n          $ref: '#/components/schemas/HasLinks'\n    Api_PodcastEpisode:\n      type: object\n      allOf:\n        -\n          properties:\n            id:\n              type: string\n              nullable: true\n            title:\n              type: string\n              nullable: true\n            description:\n              type: string\n              nullable: true\n            explicit:\n              type: boolean\n            publish_at:\n              type: integer\n              nullable: true\n            has_media:\n              type: boolean\n            media:\n              $ref: '#/components/schemas/Api_PodcastMedia'\n            has_custom_art:\n              type: boolean\n            art:\n              type: string\n              nullable: true\n            art_updated_at:\n              type: integer\n        -\n          $ref: '#/components/schemas/HasLinks'\n    Api_PodcastMedia:\n      properties:\n        id:\n          type: string\n          nullable: true\n        original_name:\n          type: string\n          nullable: true\n        length:\n          type: number\n          format: float\n        length_text:\n          type: string\n          nullable: true\n        path:\n          type: string\n          nullable: true\n      type: object\n    Api_Song:\n      properties:\n        id:\n          description: 'The song''s 32-character unique identifier hash'\n          type: string\n          example: 9f33bbc912c19603e51be8e0987d076b\n        text:\n          description: 'The song title, usually \"Artist - Title\"'\n          type: string\n          example: 'Chet Porter - Aluko River'\n        artist:\n          description: 'The song artist.'\n          type: string\n          example: 'Chet Porter'\n        title:\n          description: 'The song title.'\n          type: string\n          example: 'Aluko River'\n        album:\n          description: 'The song album.'\n          type: string\n          example: 'Moving Castle'\n        genre:\n          description: 'The song genre.'\n          type: string\n          example: Rock\n        lyrics:\n          description: 'Lyrics to the song.'\n          type: string\n          example: ''\n        art:\n          description: 'URL to the album artwork (if available).'\n          example: 'https://picsum.photos/1200/1200'\n        custom_fields:\n          type: array\n          items:\n            type: string\n            example: custom_field_value\n      type: object\n    Api_StationOnDemand:\n      properties:\n        track_id:\n          description: 'Track ID unique identifier'\n          type: string\n          example: 1\n        download_url:\n          description: 'URL to download/play track.'\n          type: string\n          example: /api/station/1/ondemand/download/1\n        media:\n          $ref: '#/components/schemas/Api_Song'\n        playlist:\n          type: string\n      type: object\n    Api_StationPlaylistQueue:\n      properties:\n        spm_id:\n          description: 'ID of the StationPlaylistMedia record associating this track with the playlist'\n          type: integer\n          example: 1\n          nullable: true\n        media_id:\n          description: 'ID of the StationPlaylistMedia record associating this track with the playlist'\n          type: integer\n          example: 1\n        song_id:\n          description: 'The song''s 32-character unique identifier hash'\n          type: string\n          example: 9f33bbc912c19603e51be8e0987d076b\n        artist:\n          description: 'The song artist.'\n          type: string\n          example: 'Chet Porter'\n        title:\n          description: 'The song title.'\n          type: string\n          example: 'Aluko River'\n      type: object\n    Api_StationQueueDetailed:\n      type: object\n      allOf:\n        -\n          properties:\n            sent_to_autodj:\n              description: 'Indicates whether the song has been sent to the AutoDJ.'\n              type: boolean\n            is_played:\n              description: 'Indicates whether the song has already been marked as played.'\n              type: boolean\n            autodj_custom_uri:\n              description: 'Custom AutoDJ playback URI, if it exists.'\n              type: string\n              example: ''\n              nullable: true\n            log:\n              description: 'Log entries on how the specific queue item was picked by the AutoDJ.'\n              type: array\n              items: {  }\n              nullable: true\n        -\n          $ref: '#/components/schemas/Api_NowPlaying_StationQueue'\n        -\n          $ref: '#/components/schemas/HasLinks'\n    Api_StationRemote:\n      type: object\n      allOf:\n        -\n          properties:\n            id:\n              type: integer\n              nullable: true\n            display_name:\n              type: string\n              example: '128kbps MP3'\n              nullable: true\n            is_visible_on_public_pages:\n              type: boolean\n              example: true\n            type:\n              type: string\n              example: icecast\n            is_editable:\n              type: boolean\n              example: 'true'\n            enable_autodj:\n              type: boolean\n              example: false\n            autodj_format:\n              type: string\n              example: mp3\n              nullable: true\n            autodj_bitrate:\n              type: integer\n              example: 128\n              nullable: true\n            custom_listen_url:\n              type: string\n              example: 'https://custom-listen-url.example.com/stream.mp3'\n              nullable: true\n            url:\n              type: string\n              example: 'https://custom-url.example.com'\n            mount:\n              type: string\n              example: /stream.mp3\n              nullable: true\n            admin_password:\n              type: string\n              example: password\n              nullable: true\n            source_port:\n              type: integer\n              example: 8000\n              nullable: true\n            source_mount:\n              type: string\n              example: /\n              nullable: true\n            source_username:\n              type: string\n              example: source\n              nullable: true\n            source_password:\n              type: string\n              example: password\n              nullable: true\n            is_public:\n              type: boolean\n              example: false\n            listeners_unique:\n              description: 'The most recent number of unique listeners.'\n              type: integer\n              example: 10\n            listeners_total:\n              description: 'The most recent number of total (non-unique) listeners.'\n              type: integer\n              example: 12\n        -\n          $ref: '#/components/schemas/HasLinks'\n    Api_StationRequest:\n      properties:\n        request_id:\n          description: 'Requestable ID unique identifier'\n          type: string\n          example: 1\n        request_url:\n          description: 'URL to directly submit request'\n          type: string\n          example: /api/station/1/request/1\n        song:\n          $ref: '#/components/schemas/Api_Song'\n      type: object\n    Api_StationSchedule:\n      properties:\n        id:\n          description: 'Unique identifier for this schedule entry.'\n          type: integer\n          example: 1\n        type:\n          description: 'The type of this schedule entry.'\n          type: string\n          enum:\n            - playlist\n            - streamer\n          example: playlist\n        name:\n          description: 'Either the playlist or streamer''s display name.'\n          type: string\n          example: 'Example Schedule Entry'\n        title:\n          description: 'The full name of the type and name combined.'\n          type: string\n          example: 'Playlist: Example Schedule Entry'\n        start_timestamp:\n          description: 'The start time of the schedule entry, in UNIX format.'\n          type: integer\n          example: 1609480800\n        start:\n          description: 'The start time of the schedule entry, in ISO 8601 format.'\n          type: string\n          example: '020-02-19T03:00:00-06:00'\n        end_timestamp:\n          description: 'The end time of the schedule entry, in UNIX format.'\n          type: integer\n          example: 1609480800\n        end:\n          description: 'The start time of the schedule entry, in ISO 8601 format.'\n          type: string\n          example: '020-02-19T05:00:00-06:00'\n        is_now:\n          description: 'Whether the event is currently ongoing.'\n          type: boolean\n          example: true\n      type: object\n    Api_StationServiceStatus:\n      properties:\n        backend_running:\n          type: boolean\n          example: true\n        frontend_running:\n          type: boolean\n          example: true\n        station_has_started:\n          type: boolean\n          example: true\n        station_needs_restart:\n          type: boolean\n          example: true\n      type: object\n    Api_Status:\n      properties:\n        success:\n          type: boolean\n          example: true\n        message:\n          type: string\n          example: 'Changes saved successfully.'\n        formatted_message:\n          type: string\n          example: '\u003cb\u003eChanges saved successfully.\u003c/b\u003e'\n      type: object\n    Api_SystemStatus:\n      properties:\n        online:\n          description: 'Whether the service is online or not (should always be true)'\n          type: boolean\n          example: true\n        timestamp:\n          description: 'The current UNIX timestamp'\n          type: integer\n          example: 1609480800\n      type: object\n    Api_Time:\n      properties:\n        timestamp:\n          description: 'The current UNIX timestamp'\n          type: integer\n          example: 1497652397\n        utc_datetime:\n          type: string\n          example: '2017-06-16 10:33:17'\n        utc_date:\n          type: string\n          example: 'June 16, 2017'\n        utc_time:\n          type: string\n          example: '10:33pm'\n        utc_json:\n          type: string\n          example: '2012-12-25T16:30:00.000000Z'\n      type: object\n    HasLinks:\n      properties:\n        links:\n          type: array\n          items:\n            type: string\n            example: 'http://localhost/api/stations/1/queue/1'\n      type: object\n    Api_UploadFile:\n      properties:\n        path:\n          description: 'The destination path of the uploaded file.'\n          type: string\n          example: relative/path/to/file.mp3\n        file:\n          description: 'The base64-encoded contents of the file to upload.'\n          type: string\n          example: ''\n      type: object\n    CustomField:\n      type: object\n      allOf:\n        -\n          properties:\n            name:\n              type: string\n            short_name:\n              description: 'The programmatic name for the field. Can be auto-generated from the full name.'\n              type: string\n            auto_assign:\n              description: 'An ID3v2 field to automatically assign to this value, if it exists in the media file.'\n              type: string\n              nullable: true\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    Relay:\n      type: object\n      allOf:\n        -\n          properties:\n            base_url:\n              type: string\n              example: 'https://custom-url.example.com'\n            name:\n              type: string\n              example: Relay\n              nullable: true\n            is_visible_on_public_pages:\n              type: boolean\n              example: true\n            created_at:\n              type: integer\n              example: 1609480800\n            updated_at:\n              type: integer\n              example: 1609480800\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    Role:\n      type: object\n      allOf:\n        -\n          properties:\n            name:\n              type: string\n              example: 'Super Administrator'\n            permissions:\n              type: array\n              items: {  }\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    Settings:\n      properties:\n        app_unique_identifier:\n          type: string\n        base_url:\n          description: 'Site Base URL'\n          type: string\n          example: 'https://your.azuracast.site'\n          nullable: true\n        instance_name:\n          description: 'AzuraCast Instance Name'\n          type: string\n          example: 'My AzuraCast Instance'\n          nullable: true\n        prefer_browser_url:\n          description: 'Prefer Browser URL (If Available)'\n          type: boolean\n          example: 'false'\n        use_radio_proxy:\n          description: 'Use Web Proxy for Radio'\n          type: boolean\n          example: 'false'\n        history_keep_days:\n          description: 'Days of Playback History to Keep'\n          type: integer\n        always_use_ssl:\n          description: 'Always Use HTTPS'\n          type: boolean\n          example: 'false'\n        api_access_control:\n          description: 'API ''Access-Control-Allow-Origin'' header'\n          type: string\n          example: '*'\n          nullable: true\n        enable_websockets:\n          description: 'Whether to use Websockets for Now Playing data updates.'\n          type: boolean\n          example: 'false'\n        analytics:\n          description: 'Listener Analytics Collection'\n          type: string\n          nullable: true\n        check_for_updates:\n          description: 'Check for Updates and Announcements'\n          type: boolean\n          example: 'true'\n        update_results:\n          description: 'Results of the latest update check.'\n          type: array\n          items: {  }\n          example: ''\n          nullable: true\n        update_last_run:\n          description: 'The UNIX timestamp when updates were last checked.'\n          type: integer\n          example: 1609480800\n        public_theme:\n          description: 'Base Theme for Public Pages'\n          type: string\n          example: light\n          nullable: true\n        hide_album_art:\n          description: 'Hide Album Art on Public Pages'\n          type: boolean\n          example: 'false'\n        homepage_redirect_url:\n          description: 'Homepage Redirect URL'\n          type: string\n          example: 'https://example.com/'\n          nullable: true\n        default_album_art_url:\n          description: 'Default Album Art URL'\n          type: string\n          example: 'https://example.com/image.jpg'\n          nullable: true\n        use_external_album_art_when_processing_media:\n          description: 'Attempt to fetch album art from external sources when processing media.'\n          type: boolean\n          example: 'false'\n        use_external_album_art_in_apis:\n          description: 'Attempt to fetch album art from external sources in API requests.'\n          type: boolean\n          example: 'false'\n        last_fm_api_key:\n          description: 'An API key to connect to Last.fm services, if provided.'\n          type: string\n          example: SAMPLE-API-KEY\n          nullable: true\n        hide_product_name:\n          description: 'Hide AzuraCast Branding on Public Pages'\n          type: boolean\n          example: 'false'\n        public_custom_css:\n          description: 'Custom CSS for Public Pages'\n          type: string\n          example: ''\n          nullable: true\n        public_custom_js:\n          description: 'Custom JS for Public Pages'\n          type: string\n          example: ''\n          nullable: true\n        internal_custom_css:\n          description: 'Custom CSS for Internal Pages'\n          type: string\n          example: ''\n          nullable: true\n        backup_enabled:\n          description: 'Whether backup is enabled.'\n          type: boolean\n          example: 'false'\n        backup_time_code:\n          description: 'The timecode (i.e. 400 for 4:00AM) when automated backups should run.'\n          type: string\n          example: 400\n          nullable: true\n        backup_exclude_media:\n          description: 'Whether to exclude media in automated backups.'\n          type: boolean\n          example: 'false'\n        backup_keep_copies:\n          description: 'Number of backups to keep, or infinite if zero/null.'\n          type: integer\n          example: 2\n        backup_storage_location:\n          description: 'The storage location ID for automated backups.'\n          type: integer\n          example: 1\n          nullable: true\n        backup_last_run:\n          description: 'The UNIX timestamp when automated backup was last run.'\n          type: integer\n          example: 1609480800\n        backup_last_output:\n          description: 'The output of the latest automated backup task.'\n          type: string\n          example: ''\n          nullable: true\n        setup_complete_time:\n          description: 'The UNIX timestamp when setup was last completed.'\n          type: integer\n          example: 1609480800\n        sync_disabled:\n          description: 'Temporarily disable all sync tasks.'\n          type: boolean\n          example: 'false'\n        sync_last_run:\n          description: 'The last run timestamp for the unified sync task.'\n          type: integer\n          example: 1609480800\n        external_ip:\n          description: 'This installation''s external IP.'\n          type: string\n          example: 192.168.1.1\n          nullable: true\n        geolite_license_key:\n          description: 'The license key for the Maxmind Geolite download.'\n          type: string\n          example: ''\n          nullable: true\n        geolite_last_run:\n          description: 'The UNIX timestamp when the Maxmind Geolite was last downloaded.'\n          type: integer\n          example: 1609480800\n        enable_advanced_features:\n          description: 'Whether to enable ''advanced'' functionality in the system that is intended for power users.'\n          type: boolean\n          example: false\n        mail_enabled:\n          description: 'Enable e-mail delivery across the application.'\n          type: boolean\n          example: 'true'\n        mail_sender_name:\n          description: 'The name of the sender of system e-mails.'\n          type: string\n          example: AzuraCast\n          nullable: true\n        mail_sender_email:\n          description: 'The e-mail address of the sender of system e-mails.'\n          type: string\n          example: example@example.com\n          nullable: true\n        mail_smtp_host:\n          description: 'The host to send outbound SMTP mail.'\n          type: string\n          example: smtp.example.com\n          nullable: true\n        mail_smtp_port:\n          description: 'The port for sending outbound SMTP mail.'\n          type: integer\n          example: 465\n        mail_smtp_username:\n          description: 'The username when connecting to SMTP mail.'\n          type: string\n          example: username\n          nullable: true\n        mail_smtp_password:\n          description: 'The password when connecting to SMTP mail.'\n          type: string\n          example: password\n          nullable: true\n        mail_smtp_secure:\n          description: 'Whether to use a secure (TLS) connection when sending SMTP mail.'\n          type: boolean\n          example: 'true'\n        avatar_service:\n          description: 'The external avatar service to use when fetching avatars.'\n          type: string\n          example: libravatar\n          nullable: true\n        avatar_default_url:\n          description: 'The default avatar URL.'\n          type: string\n          example: ''\n          nullable: true\n      type: object\n    SftpUser:\n      type: object\n      allOf:\n        -\n          properties:\n            username:\n              type: string\n            password:\n              type: string\n            publicKeys:\n              type: string\n              nullable: true\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    Station:\n      type: object\n      allOf:\n        -\n          properties:\n            name:\n              description: 'The full display name of the station.'\n              type: string\n              example: 'AzuraTest Radio'\n            short_name:\n              description: 'The URL-friendly name for the station, typically auto-generated from the full station name.'\n              type: string\n              example: azuratest_radio\n            is_enabled:\n              description: 'If set to ''false'', prevents the station from broadcasting but leaves it in the database.'\n              type: boolean\n              example: true\n            frontend_type:\n              description: 'The frontend adapter (icecast,shoutcast,remote,etc)'\n              type: string\n              example: icecast\n              nullable: true\n            frontend_config:\n              description: 'An array containing station-specific frontend configuration'\n              type: array\n              items: {  }\n            backend_type:\n              description: 'The backend adapter (liquidsoap,etc)'\n              type: string\n              example: liquidsoap\n              nullable: true\n            backend_config:\n              description: 'An array containing station-specific backend configuration'\n              type: array\n              items: {  }\n            description:\n              type: string\n              example: 'A sample radio station.'\n              nullable: true\n            url:\n              type: string\n              example: 'https://demo.azuracast.com/'\n              nullable: true\n            genre:\n              type: string\n              example: Various\n              nullable: true\n            radio_base_dir:\n              type: string\n              example: /var/azuracast/stations/azuratest_radio\n              nullable: true\n            automation_settings:\n              type: array\n              items: {  }\n            enable_requests:\n              description: 'Whether listeners can request songs to play on this station.'\n              type: boolean\n              example: true\n            request_delay:\n              type: integer\n              example: 5\n              nullable: true\n            request_threshold:\n              type: integer\n              example: 15\n              nullable: true\n            disconnect_deactivate_streamer:\n              type: integer\n              example: 0\n              nullable: true\n            enable_streamers:\n              description: 'Whether streamers are allowed to broadcast to this station at all.'\n              type: boolean\n              example: false\n            is_streamer_live:\n              description: 'Whether a streamer is currently active on the station.'\n              type: boolean\n              example: false\n            enable_public_page:\n              description: 'Whether this station is visible as a public page and in a now-playing API response.'\n              type: boolean\n              example: true\n            enable_on_demand:\n              description: 'Whether this station has a public ''on-demand'' streaming and download page.'\n              type: boolean\n              example: true\n            enable_on_demand_download:\n              description: 'Whether the ''on-demand'' page offers download capability.'\n              type: boolean\n              example: true\n            api_history_items:\n              description: 'The number of ''last played'' history items to show for a station in API responses.'\n              type: integer\n              example: 5\n            timezone:\n              description: 'The time zone that station operations should take place in.'\n              type: string\n              example: UTC\n              nullable: true\n            default_album_art_url:\n              description: 'The station-specific default album artwork URL.'\n              type: string\n              example: 'https://example.com/image.jpg'\n              nullable: true\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    StationMedia:\n      type: object\n      allOf:\n        -\n          properties:\n            unique_id:\n              description: 'A unique identifier associated with this record.'\n              type: string\n              example: 69b536afc7ebbf16457b8645\n              nullable: true\n            album:\n              description: 'The name of the media file''s album.'\n              type: string\n              example: 'Test Album'\n              nullable: true\n            genre:\n              description: 'The genre of the media file.'\n              type: string\n              example: Rock\n              nullable: true\n            lyrics:\n              description: 'Full lyrics of the track, if available.'\n              type: string\n              example: '...Never gonna give you up...'\n              nullable: true\n            isrc:\n              description: 'The track ISRC (International Standard Recording Code), used for licensing purposes.'\n              type: string\n              example: GBARL0600786\n              nullable: true\n            length:\n              description: 'The song duration in seconds.'\n              type: number\n              format: float\n              example: 240\n              nullable: true\n            length_text:\n              description: 'The formatted song duration (in mm:ss format)'\n              type: string\n              example: '4:00'\n              nullable: true\n            path:\n              description: 'The relative path of the media file.'\n              type: string\n              example: test.mp3\n            mtime:\n              description: 'The UNIX timestamp when the database was last modified.'\n              type: integer\n              example: 1609480800\n              nullable: true\n            amplify:\n              description: 'The amount of amplification (in dB) to be applied to the radio source (liq_amplify)'\n              type: number\n              format: float\n              example: -14\n              nullable: true\n            fade_overlap:\n              description: 'The length of time (in seconds) before the next song starts in the fade (liq_start_next)'\n              type: number\n              format: float\n              example: 2\n              nullable: true\n            fade_in:\n              description: 'The length of time (in seconds) to fade in the next track (liq_fade_in)'\n              type: number\n              format: float\n              example: 3\n              nullable: true\n            fade_out:\n              description: 'The length of time (in seconds) to fade out the previous track (liq_fade_out)'\n              type: number\n              format: float\n              example: 3\n              nullable: true\n            cue_in:\n              description: 'The length of time (in seconds) from the start of the track to start playing (liq_cue_in)'\n              type: number\n              format: float\n              example: 30\n              nullable: true\n            cue_out:\n              description: 'The length of time (in seconds) from the CUE-IN of the track to stop playing (liq_cue_out)'\n              type: number\n              format: float\n              example: 30\n              nullable: true\n            art_updated_at:\n              description: 'The latest time (UNIX timestamp) when album art was updated.'\n              type: integer\n              example: 1609480800\n            playlists:\n              type: array\n              items: {  }\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n        -\n          $ref: '#/components/schemas/HasSongFields'\n    StationMount:\n      type: object\n      allOf:\n        -\n          properties:\n            name:\n              type: string\n              example: /radio.mp3\n            display_name:\n              type: string\n              example: '128kbps MP3'\n              nullable: true\n            is_visible_on_public_pages:\n              type: boolean\n              example: true\n            is_default:\n              type: boolean\n              example: false\n            is_public:\n              type: boolean\n              example: false\n            fallback_mount:\n              type: string\n              example: /error.mp3\n              nullable: true\n            relay_url:\n              type: string\n              example: 'https://radio.example.com:8000/radio.mp3'\n              nullable: true\n            authhash:\n              type: string\n              example: ''\n              nullable: true\n            max_listener_duration:\n              type: integer\n              example: 43200\n            enable_autodj:\n              type: boolean\n              example: true\n            autodj_format:\n              type: string\n              example: mp3\n              nullable: true\n            autodj_bitrate:\n              type: integer\n              example: 128\n              nullable: true\n            custom_listen_url:\n              type: string\n              example: 'https://custom-listen-url.example.com/stream.mp3'\n              nullable: true\n            frontend_config:\n              type: array\n              items: {  }\n            listeners_unique:\n              description: 'The most recent number of unique listeners.'\n              type: integer\n              example: 10\n            listeners_total:\n              description: 'The most recent number of total (non-unique) listeners.'\n              type: integer\n              example: 12\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    StationPlaylist:\n      type: object\n      allOf:\n        -\n          properties:\n            name:\n              type: string\n              example: 'Test Playlist'\n            type:\n              type: string\n              example: default\n            source:\n              type: string\n              example: songs\n            order:\n              type: string\n              example: shuffle\n            remote_url:\n              type: string\n              example: 'https://remote-url.example.com/stream.mp3'\n              nullable: true\n            remote_type:\n              type: string\n              example: stream\n              nullable: true\n            remote_buffer:\n              description: 'The total time (in seconds) that Liquidsoap should buffer remote URL streams.'\n              type: integer\n              example: 0\n            is_enabled:\n              type: boolean\n              example: true\n            is_jingle:\n              description: 'If yes, do not send jingle metadata to AutoDJ or trigger web hooks.'\n              type: boolean\n              example: false\n            play_per_songs:\n              type: integer\n              example: 5\n            play_per_minutes:\n              type: integer\n              example: 120\n            play_per_hour_minute:\n              type: integer\n              example: 15\n            weight:\n              type: integer\n              example: 3\n            include_in_requests:\n              type: boolean\n              example: true\n            include_in_on_demand:\n              description: 'Whether this playlist''s media is included in ''on demand'' download/streaming if enabled.'\n              type: boolean\n              example: true\n            include_in_automation:\n              type: boolean\n              example: false\n            backend_options:\n              type: string\n              example: 'interrupt,loop_once,single_track,merge'\n              nullable: true\n            avoid_duplicates:\n              type: boolean\n              example: true\n            schedule_items:\n              type: array\n              items: {  }\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    StationSchedule:\n      type: object\n      allOf:\n        -\n          properties:\n            start_time:\n              type: integer\n              example: 900\n            end_time:\n              type: integer\n              example: 2200\n            days:\n              description: 'Array of ISO-8601 days (1 for Monday, 7 for Sunday)'\n              type: string\n              example: '0,1,2,3'\n              nullable: true\n            loop_once:\n              type: boolean\n              example: false\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    StationStreamer:\n      description: 'Station streamers (DJ accounts) allowed to broadcast to a station.'\n      type: object\n      allOf:\n        -\n          properties:\n            streamer_username:\n              type: string\n              example: dj_test\n            streamer_password:\n              type: string\n              example: ''\n            display_name:\n              type: string\n              example: 'Test DJ'\n              nullable: true\n            comments:\n              type: string\n              example: 'This is a test DJ account.'\n              nullable: true\n            is_active:\n              type: boolean\n              example: true\n            enforce_schedule:\n              type: boolean\n              example: false\n            reactivate_at:\n              type: integer\n              example: 1609480800\n              nullable: true\n            schedule_items:\n              type: array\n              items: {  }\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    StationStreamerBroadcast:\n      description: 'Each individual broadcast associated with a streamer.'\n      type: object\n      allOf:\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    StationWebhook:\n      type: object\n      allOf:\n        -\n          properties:\n            name:\n              description: 'The nickname of the webhook connector.'\n              type: string\n              example: 'Twitter Post'\n              nullable: true\n            type:\n              description: 'The type of webhook connector to use.'\n              type: string\n              example: twitter\n            is_enabled:\n              type: boolean\n              example: true\n            triggers:\n              description: 'List of events that should trigger the webhook notification.'\n              type: array\n              items: {  }\n            config:\n              description: 'Detailed webhook configuration (if applicable)'\n              type: array\n              items: {  }\n            metadata:\n              description: 'Internal details used by the webhook to preserve state.'\n              type: array\n              items: {  }\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n    HasAutoIncrementId:\n      properties:\n        id:\n          type: integer\n          nullable: true\n      type: object\n    HasSongFields:\n      properties:\n        song_id:\n          type: string\n        text:\n          type: string\n          nullable: true\n        artist:\n          type: string\n          nullable: true\n        title:\n          type: string\n          nullable: true\n      type: object\n    HasUniqueId:\n      properties:\n        id:\n          type: string\n          nullable: true\n      type: object\n    User:\n      type: object\n      allOf:\n        -\n          properties:\n            email:\n              type: string\n              example: demo@azuracast.com\n            new_password:\n              type: string\n              example: ''\n              nullable: true\n            name:\n              type: string\n              example: 'Demo Account'\n              nullable: true\n            locale:\n              type: string\n              example: en_US\n              nullable: true\n            theme:\n              type: string\n              example: dark\n              nullable: true\n            two_factor_secret:\n              type: string\n              example: A1B2C3D4\n              nullable: true\n            created_at:\n              type: integer\n              example: 1609480800\n            updated_at:\n              type: integer\n              example: 1609480800\n            roles:\n              type: array\n              items: {  }\n        -\n          $ref: '#/components/schemas/HasAutoIncrementId'\n  responses:\n    Success:\n      description: Success\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Api_Status'\n    AccessDenied:\n      description: 'Access denied.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Api_Error'\n    RecordNotFound:\n      description: 'Record not found.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Api_Error'\n    GenericError:\n      description: 'A generic exception has occurred.'\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Api_Error'\n  parameters:\n    StationIdRequired:\n      name: StationIdRequired\n      in: path\n      required: true\n      schema:\n        anyOf:\n          -\n            type: integer\n            format: int64\n          -\n            type: string\n            format: string\n  securitySchemes:\n    ApiKey:\n      type: apiKey\n      name: X-API-Key\n      in: header\ntags:\n  -\n    name: 'Now Playing'\n    description: 'Endpoints that provide full summaries of the current state of stations.'\n  -\n    name: 'Stations: General'\n  -\n    name: 'Stations: Song Requests'\n  -\n    name: 'Stations: Service Control'\n  -\n    name: 'Stations: Automation'\n  -\n    name: 'Stations: History'\n  -\n    name: 'Stations: Listeners'\n  -\n    name: 'Stations: Schedules'\n  -\n    name: 'Stations: Media'\n  -\n    name: 'Stations: Mount Points'\n  -\n    name: 'Stations: Playlists'\n  -\n    name: 'Stations: Podcasts'\n  -\n    name: 'Stations: Queue'\n  -\n    name: 'Stations: Remote Relays'\n  -\n    name: 'Stations: SFTP Users'\n  -\n    name: 'Stations: Streamers/DJs'\n  -\n    name: 'Stations: Web Hooks'\n  -\n    name: 'Administration: Custom Fields'\n  -\n    name: 'Administration: Users'\n  -\n    name: 'Administration: Relays'\n  -\n    name: 'Administration: Roles'\n  -\n    name: 'Administration: Settings'\n  -\n    name: 'Administration: Stations'\n  -\n    name: 'Administration: Storage Locations'\n  -\n    name: Miscellaneous\nexternalDocs:\n  description: 'AzuraCast on GitHub'\n  url: 'https://github.com/AzuraCast/AzuraCast'\n"
		}
	},
	"Error": "parse: parse spec: paths: /station/{station_id}/podcasts: get: operation \"getPodcasts\": parse path: path parameter not specified: \"station_id\""
}