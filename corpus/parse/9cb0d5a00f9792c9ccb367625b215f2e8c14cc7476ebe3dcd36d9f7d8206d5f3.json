{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/hpi-schul-cloud/schulcloud-server"
		},
		"file": {
			"name": "openapi_template.yaml",
			"size": 0,
			"path": "src/services/account/docs/openapi_template.yaml",
			"byteSize": 13034,
			"content": "security:\n  - jwtBearer: []\ninfo:\n  title: Schul-Cloud Account Service API\n  description:\n    This is the API specification for the HPI Schul-Cloud Account service.\n    \n  contact:\n    name: support\n    email: info@dbildungscloud.de\n  license:\n    name: GPL-3.0\n    url: 'https://github.com/hpi-schul-cloud/schulcloud-server/blob/master/LICENSE'\n  version: 1.0.0\ncomponents:\n  securitySchemes:\n    jwtBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n  schemas:\n    accountModel:\n      description: TODO\n    accountModel_list:\n      description: TODO\n    accounts:\n      description: TODO\n    accounts_list:\n      description: TODO\n    jwtTimer:\n      description: TODO\n    supportJWT:\n      description: TODO\n    confirm:\n      description: TODO\n\npaths:\n  /accountModel:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/accountModel'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accountModel_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - accountModel\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accountModel'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - accountModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/accountModel'\n  '/accountModel/{_id}':\n    get:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of accountModel to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accountModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - accountModel\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of accountModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accountModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - accountModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/accountModel'\n    patch:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of accountModel to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accountModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - accountModel\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/accountModel'\n    delete:\n      parameters:\n        - in: path\n          name: _id\n          description: ID of accountModel to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accountModel'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - accountModel\n      security: []\n  /accounts:\n    get:\n      parameters:\n        - description: Number of results to return\n          in: query\n          name: $limit\n          schema:\n            type: integer\n        - description: Number of results to skip\n          in: query\n          name: $skip\n          schema:\n            type: integer\n        - description: Property to sort results\n          in: query\n          name: $sort\n          style: deepObject\n          schema:\n            type: object\n        - description: Query parameters to filter\n          in: query\n          name: filter\n          style: form\n          explode: true\n          schema:\n            $ref: '#/components/schemas/accounts'\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accounts_list'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Retrieves a list of all resources from the service.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accounts'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/accounts'\n  '/accounts/{id}':\n    get:\n      parameters:\n        - in: path\n          name: id\n          description: ID of accounts to return\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accounts'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Retrieves a single resource with the given id from the service.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n    put:\n      parameters:\n        - in: path\n          name: id\n          description: ID of accounts to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accounts'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/accounts'\n    patch:\n      parameters:\n        - in: path\n          name: id\n          description: ID of accounts to update\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accounts'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Updates the resource identified by id using data.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/accounts'\n    delete:\n      parameters:\n        - in: path\n          name: id\n          description: ID of accounts to remove\n          schema:\n            type: integer\n          required: true\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/accounts'\n        '401':\n          description: not authenticated\n        '404':\n          description: not found\n        '500':\n          description: general error\n      description: Removes the resource with id.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n  /accounts/jwtTimer:\n    get:\n      parameters: []\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jwtTimer'\n        '405':\n          description: feature is disabled on this instance\n      description: \u003e-\n        returns the remaining seconds the JWT used to authenticate this request\n        is whitelisted. throws an 405 error if the instance does not have\n        support for JWT whitelisting\n      summary: get ttl of the jwt\n      tags:\n        - accounts\n      security: []\n    post:\n      parameters: []\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/jwtTimer'\n        '405':\n          description: feature is disabled on this instance\n      description: \u003e-\n        resets the remaining time the JWT used to authenticate this request is\n        whitelisted, and returns the value it was reset to. throws an 405 error\n        if the instance does not have support for JWT whitelisting\n      summary: reset jwt ttl\n      tags:\n        - accounts\n      security: []\n      requestBody:\n        content:\n          {}\n        description: no request body required\n  /accounts/supportJWT:\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/supportJWT'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/supportJWT'\n  /accounts/confirm:\n    post:\n      parameters: []\n      responses:\n        '201':\n          description: created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/confirm'\n        '401':\n          description: not authenticated\n        '500':\n          description: general error\n      description: Creates a new resource with data.\n      summary: ''\n      tags:\n        - accounts\n      security: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/confirm'\nopenapi: 3.0.2\ntags:\n  - name: accountModel\n    description: An accountModel service.\n  - name: accounts\n    description: An accounts service.\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /accountModel: get: parameters: parse parameter \"filter\": invalid schema:style:explode combination"
}