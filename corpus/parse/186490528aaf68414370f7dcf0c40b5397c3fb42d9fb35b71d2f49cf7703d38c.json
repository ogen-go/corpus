{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/wolfeidau/exitus"
		},
		"file": {
			"name": "exitus.yml",
			"size": 0,
			"path": "pkg/api/exitus.yml",
			"byteSize": 24395,
			"content": "openapi: \"3.0.2\"\ninfo:\n  title: \"Issues API\"\n  description: |\n    This API enables raising, commenting and voting on issues.\n  version: \"1.0\"\n  termsOfService: \"https://issues.wolfe.id.au/terms\"\n  contact:\n    name: \"Store API\"\n    url: \"https://issues.wolfe.id.au/api\"\n    email: \"mark@wolfe.id.au\"\n  license:\n    name: \"CC Attribution-ShareAlike 4.0 (CC BY-SA 4.0)\"\n    url: \"https://issues.wolfe.id.au/license\"\nservers:\n  - url: https://api.issues.wolfe.id.au/v1\n    description: Production server\nsecurity:\n  - OpenId:\n    - exitus/customer.admin\n    - exitus/customer.read\n    - exitus/customer.write\n    - exitus/project.read\n    - exitus/project.write\n    - exitus/issue.read\n    - exitus/issue.write\n    - exitus/comment.read\n    - exitus/comment.write\n    - exitus/user.read\npaths:\n  /customers:\n    post:\n      summary: \"Create a customer.\"\n      description: \"Create and return a new customer.\"\n      operationId: NewCustomer\n      security:\n      - OpenId: [exitus/customer.write, exitus/customer.admin]\n      tags:\n      - customer\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewCustomer'\n      responses:\n        '201':\n          description: customer created response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Customer'\n    get:\n      summary: \"Get a list of customers.\"\n      operationId: Customers\n      description: \"Return a list of customers.\"\n      security:\n      - OpenId: [exitus/customer.read, exitus/customer.admin]\n      tags:\n      - customer\n      parameters:\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          description: customers response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomersPage'\n  /customers/{id}:\n    get:\n      operationId: GetCustomer\n      description: Returns a customer based on it's identifier.\n      security:\n      - OpenId: [exitus/customer.read, exitus/customer.admin]\n      tags:\n      - customer\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of customer to fetch\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: customer response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Customer'\n        '404':\n          description: The customer does not exists.\n    put:\n      summary: \"Update a customer.\"\n      operationId: UpdateCustomer\n      description: \"Update and return a customer.\"\n      security:\n      - OpenId: [exitus/customer.write, customers.admin]\n      tags:\n      - customer\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of customer to update\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdatedCustomer'\n      responses:\n        '201':\n          description: customer updated response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Customer'\n  /projects:\n    post:\n      summary: \"Create a project.\"\n      operationId: NewProject\n      description: \"Create and return a new project.\"\n      security:\n      - OpenId: [exitus/project.write]\n      tags:\n      - project\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewProject'\n      responses:\n        '201':\n          description: project created response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n    get:\n      summary: \"Get a list of projects.\"\n      description: \"Return a list of projects.\"\n      operationId: Projects\n      security:\n      - OpenId: [exitus/project.read]\n      tags:\n      - project\n      parameters:\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          description: projects response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProjectsPage'\n  /projects/{id}:\n    get:\n      summary: \"Get a project.\"\n      operationId: GetProject\n      description: Returns a project based on it's identifier.\n      security:\n      - OpenId: [exitus/project.read]\n      tags:\n      - project\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of project to fetch\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: project response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n    put:\n      summary: \"Update a project.\"\n      operationId: UpdateProject\n      description: \"Update and return a project.\"\n      security:\n      - OpenId: [exitus/project.write]\n      tags:\n      - project\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of project to update\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UpdatedProject'\n      responses:\n        '201':\n          description: project updated response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Project'\n  /projects/{project_id}/issues:\n    post:\n      summary: \"Create a issue.\"\n      operationId: NewIssue\n      description: \"Create and return a new issue.\"\n      security:\n      - OpenId: [exitus/issue.write]\n      tags:\n      - issue\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project to create the issue.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewIssue'\n      responses:\n        '201':\n          description: issue created response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Issue'\n    get:\n      summary: \"Get a list of issues.\"\n      operationId: Issues\n      description: Return a list of issues.\n      security:\n      - OpenId: [exitus/issue.read]\n      tags:\n      - issue\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          description: issues response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IssuesPage'\n  /projects/{project_id}/issues/{id}:\n    get:\n      operationId: GetIssue\n      description: Returns a issue based on it's identifier.\n      security:\n      - OpenId: [exitus/issue.read]\n      tags:\n      - issue\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Identifier of issue to fetch\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: issue response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Issue'\n    put:\n      operationId: UpdateIssue\n      description: Update an issue based on it's identifier.\n      security:\n      - OpenId: [exitus/issue.write]\n      tags:\n      - issue\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Identifier of issue to update\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: issue response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdatedIssue'\n  /projects/{project_id}/issues/{issue_id}/comments:\n    post:\n      summary: \"Create a comment on a issue.\"\n      operationId: NewComment\n      description: Create and return a new comment.\n      security:\n      - OpenId: [exitus/comment.write]\n      tags:\n      - comment\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - name: issue_id\n          in: path\n          description: Identifier of issue to attach the comment.\n          required: true\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/NewComment'\n      responses:\n        '201':\n          description: comment created response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n    get:\n      summary: \"Get a list of Comments.\"\n      operationId: Comments\n      description: Returns a list of comments.\n      security:\n      - OpenId: [exitus/comment.read]\n      tags:\n      - comment\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - name: issue_id\n          in: path\n          description: Identifier of issue to list comments.\n          required: true\n          schema:\n            type: string\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          description: comments response\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CommentsPage'\n  /projects/{project_id}/issues/{issue_id}/comments/{id}:\n    get:\n      operationId: GetComment\n      description: Returns a comment based on it's identifier.\n      security:\n      - OpenId: [exitus/comment.read]\n      tags:\n      - comment\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - name: issue_id\n          in: path\n          description: Identifier of issue to fetch\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Identifier of comment to fetch\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: comment response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n  /projects/{project_id}/issues/{issue_id}/comments/{id}:\n    put:\n      operationId: UpdateComment\n      description: Updates a comment based on it's identifier.\n      security:\n      - OpenId: [exitus/comment.write]\n      tags:\n      - comment\n      parameters:\n        - name: project_id\n          in: path\n          description: Identifier of project\n          required: true\n          schema:\n            type: string\n        - name: issue_id\n          in: path\n          description: Identifier of issue to fetch\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: Identifier of comment to update\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: comment response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UpdatedComment'\n  /users:\n    get:\n      summary: \"Get a list of users.\"\n      operationId: Users\n      description: Return a list of users.\n      security:\n      - OpenId: [exitus/user.read]\n      tags:\n      - user\n      parameters:\n        - $ref: '#/components/parameters/q'\n        - $ref: '#/components/parameters/offset'\n        - $ref: '#/components/parameters/limit'\n      responses:\n        '200':\n          description: users response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UsersPage'\n  /users/{id}:\n    get:\n      operationId: GetUser\n      description: Returns a user based on identifier.\n      security:\n      - OpenId: [exitus/user.read]\n      tags:\n      - user\n      parameters:\n        - name: id\n          in: path\n          description: Identifier of user to fetch\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: user response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\ncomponents:\n  securitySchemes:\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://example.com/oauth/authorize\n          tokenUrl: https://example.com/oauth/token\n          scopes:\n            read: Grants read access\n            write: Grants write access\n            admin: Grants access to admin operations\n  parameters:\n    q:\n      name: q\n      in: query\n      description: Used to query by name in a list operation.\n      schema:\n        type: string\n        default: \"\"\n    offset:\n      name: offset\n      in: query\n      description: Used to request the next page in a list operation.\n      schema:\n          type: integer\n          format: int64\n          default: 0\n    limit:\n      name: limit\n      in: query\n      description: Used to specify the maximum number of records which are returned in the next page.\n      schema:\n        type: integer\n        format: int64\n        default: 50\n    filterIssues:\n      name: filter\n      in: query\n      style: pipeDelimited\n      explode: true\n      schema:\n        type: array\n        uniqueItems: true\n        items:\n          type: string\n  schemas:\n    NewCustomer:\n      description: New Customer request.\n      required:\n        - name\n        - labels\n      properties:\n        name:\n          type: string\n          description: The name of the customer.\n          example: New Customer\n        description:\n          type: string\n          description:\n            A description of the customer, with some background.\n        labels:\n          type: array\n          description: Labels assigned to an entity.\n          items:\n            type: string\n    UpdatedCustomer:\n      description: Update Customer request.\n      allOf:\n        - $ref: '#/components/schemas/NewCustomer'\n        - required:\n          - version\n          properties:\n            version:\n              type: integer\n              format: int64\n    Customer:\n      description: Customer response.\n      type: object\n      required:\n        - id\n        - name\n        - labels\n        - created_at\n        - updated_at\n      properties:\n        id:\n          type: string\n          description: Customer identifier.\n          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ\n        name:\n          type: string\n          description: The name of the customer.\n          example: New Customer\n        description:\n          type: string\n          description:\n            A description of the customer, with some background.\n        labels:\n          type: array\n          description: Labels assigned to an entity.\n          items:\n            type: string\n        updated_at:\n          type: string\n          format: date-time\n          description: The timestamp the customer was last updated\n        created_at:\n          type: string\n          format: date-time\n          description: The timestamp the customer was created\n    CustomersPage:\n      description: Customer page response.\n      required:\n        - customers\n      properties:\n        customers:\n          type: array\n          items:\n            $ref: '#/components/schemas/Customer'\n    NewProject:\n      description: New Project request.\n      required:\n        - name\n        - labels\n      properties:\n        name:\n          type: string\n          description: The name of the project.\n          example: New Project\n        description:\n          type: string\n          description:\n            A description of the project, with some background.\n        labels:\n          type: array\n          description: Labels assigned to an entity.\n          items:\n            type: string\n    UpdatedProject:\n      description: Update Project request.\n      allOf:\n        - $ref: '#/components/schemas/NewProject'\n        - required:\n          - version\n          properties:\n            version:\n              type: integer\n              format: int64\n    Project:\n      description: Project response.\n      type: object\n      required:\n        - id\n        - name\n        - labels\n        - created_at\n        - updated_at\n      properties:\n        id:\n          type: string\n          description: Project identifier.\n          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ\n        name:\n          type: string\n          description: The name of the Project.\n          example: New Project\n        description:\n          type: string\n          description:\n            A description of the project, with some background.\n        labels:\n          type: array\n          description: Labels assigned to an entity.\n          items:\n            type: string\n        updated_at:\n          type: string\n          format: date-time\n          description: The timestamp the Project was last updated\n        created_at:\n          type: string\n          format: date-time\n          description: The timestamp the Project was created\n    ProjectsPage:\n      description: Project page response.\n      required:\n        - projects\n      properties:\n        projects:\n          type: array\n          items:\n            $ref: '#/components/schemas/Project'\n    NewIssue:\n      description: New issue request.\n      required:\n        - subject\n        - content\n        - severity\n        - category\n        - labels\n      properties:\n        subject:\n          type: string\n          description: A subject of the issue\n          example: Please fix the error\n        content:\n          type: string\n          description:\n            The content associated with the issue, any background,\n            or details required to help resolve it.\n        severity:\n          type: string\n          description: A severity of the Issue.\n          example: critical\n        category:\n          type: string\n          description: A category of the Issue.\n          example: bug\n        labels:\n          type: array\n          description: Labels assigned to an entity.\n          items:\n            type: string\n    UpdatedIssue:\n      description: Update issue request.\n      allOf:\n        - $ref: '#/components/schemas/NewIssue'\n        - required:\n          - version\n          properties:\n            version:\n              type: integer\n              format: int64\n    Issue:\n      description: Issue response.\n      type: object\n      required:\n        - id\n        - subject\n        - state\n        - severity\n        - category\n        - labels\n        - created_at\n        - updated_at\n      properties:\n        id:\n          type: string\n          description: Issue identifier.\n          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ\n        reporter:\n          $ref: '#/components/schemas/User'\n        assignee:\n          $ref: '#/components/schemas/User'\n        subject:\n          type: string\n          description: A subject of the Issue.\n          example: Please fix the error\n        state:\n          type: string\n          description: The state of the Issue.\n          example: open\n        severity:\n          type: string\n          description: The severity of the Issue.\n          example: critical\n        category:\n          type: string\n          description: The category of the Issue.\n          example: bug\n        content:\n          type: string\n          description:\n            The content associated with the Issue, any background,\n            or details required to help resolve it.\n        labels:\n          type: array\n          description: Labels assigned to an entity.\n          items:\n            type: string\n        comments:\n          $ref: '#/components/schemas/CommentsPage'\n        updated_at:\n          type: string\n          format: date-time\n          description: The timestamp the Issue was last updated\n        created_at:\n          type: string\n          format: date-time\n          description: The timestamp the Issue was created\n    IssuesPage:\n      description: Issue page response.\n      required:\n        - issues\n      properties:\n        issues:\n          type: array\n          items:\n            $ref: '#/components/schemas/Issue'\n    NewComment:\n      description: New Comment request.\n      required:\n        - content\n      properties:\n        content:\n          type: string\n          description:\n            The content associated with the comment.\n    UpdatedComment:\n      description: Update Comment request.\n      allOf:\n        - $ref: '#/components/schemas/NewComment'\n        - required:\n          - version\n          properties:\n            version:\n              type: integer\n              format: int64\n    Comment:\n      description: Comment response.\n      type: object\n      required:\n        - id\n        - author\n        - content\n        - created_at\n        - updated_at\n      properties:\n        id:\n          type: string\n          description: Comment identifier.\n          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ\n        author:\n          $ref: '#/components/schemas/User'\n        content:\n          type: string\n          description: The content associated with the Comment.\n        updated_at:\n          type: string\n          format: date-time\n          description: The timestamp the Comment was last updated.\n        created_at:\n          type: string\n          format: date-time\n          description: The timestamp the Comment was created.\n    CommentsPage:\n      description: Comments page response.\n      required:\n        - comments\n      properties:\n        comments:\n          type: array\n          items:\n            $ref: '#/components/schemas/Comment'\n    User:\n      description: User response.\n      type: object\n      required:\n        - id\n        - email\n        - name\n        - created_at\n        - updated_at\n      properties:\n        id:\n          type: string\n          description: User identifier.\n          example: 0123456789ABCDEFGHJKMNPQRSTVWXYZ\n        name:\n          type: string\n          description: Name of the User.\n          example: John Doe\n        email:\n          type: string\n          description: Email of the User.\n          example: john.doe@example.com\n        updated_at:\n          type: string\n          format: date-time\n          description: The timestamp the User was last updated.\n        created_at:\n          type: string\n          format: date-time\n          description: The timestamp the User was created.\n    UsersPage:\n      description: User page response.\n      required:\n        - users\n      properties:\n        users:\n          type: array\n          items:\n            $ref: '#/components/schemas/User'\n",
			"canonicalURL": "/github.com/wolfeidau/exitus@5c1a4170f4dd480923e043c06c0f6d56b88e3180/-/blob/pkg/api/exitus.yml",
			"externalURLs": [
				{
					"url": "https://github.com/wolfeidau/exitus/blob/5c1a4170f4dd480923e043c06c0f6d56b88e3180/pkg/api/exitus.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/customers\": get: operation \"Customers\": security: at 1:8935: unknown security schema \"OpenId\""
}