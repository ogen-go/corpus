{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/zhad3/zrenderer"
		},
		"file": {
			"name": "1.1.json",
			"size": 0,
			"path": "server/api-spec/1.1.json",
			"byteSize": 6620,
			"content": "{\n  \"openapi\": \"3.0.3\",\n  \"info\": {\n    \"title\": \"zrenderer API\",\n    \"version\": \"1.1\",\n    \"description\": \"API for the zrenderer service (https://github.com/zhad3/zrenderer).\"\n  },\n  \"paths\": {\n    \"/render\": {\n      \"summary\": \"Endpoint for requesting to render sprites\",\n      \"post\": {\n        \"requestBody\": {\n          \"$ref\": \"#/components/requestBodies/renderRequestBody\"\n        },\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/components/responses/200\"\n          },\n          \"400\": {\n            \"$ref\": \"#/components/responses/400\"\n          },\n          \"500\": {\n            \"$ref\": \"#/components/responses/500\"\n          }\n        },\n        \"operationId\": \"render\",\n        \"summary\": \"Send a request to render sprites\"\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"renderRequest\": {\n        \"required\": [\n          \"job\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"job\": {\n            \"description\": \"Job id(s) which should be rendered. Can contain multiple comma separated values as well as ranges (e.g. \\\"1001-1999\\\").\",\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"action\": {\n            \"format\": \"int32\",\n            \"description\": \"Action of the job which should be drawn.\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"frame\": {\n            \"format\": \"int32\",\n            \"description\": \"Frame of the action which should be drawn. Set to -1 to draw all frames.\",\n            \"minimum\": -1,\n            \"type\": \"integer\"\n          },\n          \"gender\": {\n            \"description\": \"Gender of the player character. Possible values are: 1=male or 0=female.\",\n            \"enum\": [\n              0,\n              1\n            ],\n            \"format\": \"int32\"\n          },\n          \"head\": {\n            \"format\": \"int32\",\n            \"description\": \"Head id which should be used when drawing a player.\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"outfit\": {\n            \"format\": \"int32\",\n            \"description\": \"The alternative outfit for player characters. Not all characters have alternative outfits. In these cases the default character will be rendered instead.\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"headgear\": {\n            \"description\": \"Headgears which should be attached to the players head.\",\n            \"type\": \"array\",\n            \"items\": {\n              \"format\": \"int32\",\n              \"minimum\": 0,\n              \"type\": \"integer\"\n            }\n          },\n          \"garment\": {\n            \"format\": \"int32\",\n            \"description\": \"Garment which should be attached to the players body.\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"weapon\": {\n            \"format\": \"int32\",\n            \"description\": \"Weapon which should be attached to the players body.\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"shield\": {\n            \"format\": \"int32\",\n            \"description\": \"Shield which should be attached to the players body.\",\n            \"minimum\": 0,\n            \"type\": \"integer\"\n          },\n          \"bodyPalette\": {\n            \"format\": \"int32\",\n            \"description\": \"Palette for the body sprite. Set to -1 to use the standard palette.\",\n            \"minimum\": -1,\n            \"type\": \"integer\"\n          },\n          \"headPalette\": {\n            \"format\": \"int32\",\n            \"description\": \"Palette for the head sprite. Set to -1 to use the standard palette.\",\n            \"minimum\": -1,\n            \"type\": \"integer\"\n          },\n          \"headdir\": {\n            \"description\": \"Direction in which the head should turn. This is only applied to player sprites and only to the stand and sit action. Possible values are: 0=straight, 1=left, 2=right or 3=all. If 'all' is set then this direction system is ignored and all frames are interpreted like any other one.\",\n            \"enum\": [\n              0,\n              1,\n              2,\n              3\n            ],\n            \"format\": \"int32\"\n          },\n          \"enableShadow\": {\n            \"description\": \"Draw shadow underneath the sprite.\",\n            \"type\": \"boolean\"\n          },\n          \"canvas\": {\n            \"description\": \"Sets a canvas onto which the sprite should be rendered. The canvas requires two options: its size and an origin point inside the canvas where the sprite should be placed. The format is as following: \u003cwidth\u003ex\u003cheight\u003e±\u003cx\u003e±\u003cy\u003e. An origin point of +0+0 is equal to the top left corner. Example: 200x250+100+125. This would create a canvas and place the sprite in the center.\",\n            \"type\": \"string\"\n          },\n          \"outputFormat\": {\n            \"description\": \"Defines the output format. Possible values are 0=png or 1=zip. If zip is chosen the zip will contain png files.\",\n            \"enum\": [\n              0,\n              1\n            ],\n            \"format\": \"int32\"\n          }\n        }\n      },\n      \"commonError\": {\n        \"required\": [\n          \"statusMessage\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"statusMessage\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"renderResponse\": {\n        \"required\": [\n          \"output\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n          \"output\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      }\n    },\n    \"responses\": {\n      \"200\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/renderResponse\"\n            }\n          }\n        },\n        \"description\": \"Ok\"\n      },\n      \"400\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/commonError\"\n            }\n          }\n        },\n        \"description\": \"Illegal input for operation.\"\n      },\n      \"500\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/commonError\"\n            }\n          }\n        },\n        \"description\": \"Server Error\"\n      }\n    },\n    \"requestBodies\": {\n      \"renderRequestBody\": {\n        \"content\": {\n          \"application/json\": {\n            \"schema\": {\n              \"$ref\": \"#/components/schemas/renderRequest\"\n            }\n          }\n        },\n        \"required\": true\n      }\n    }\n  }\n}\n",
			"canonicalURL": "/github.com/zhad3/zrenderer@37f51677e950e5876c917c1c6a7cd68fb7c962a6/-/blob/server/api-spec/1.1.json",
			"externalURLs": [
				{
					"url": "https://github.com/zhad3/zrenderer/blob/37f51677e950e5876c917c1c6a7cd68fb7c962a6/server/api-spec/1.1.json",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"renderRequest\": parse schema: property \"gender\": at 60:21: parse enum values: parse value \"0\": unexpected type: \"\""
}