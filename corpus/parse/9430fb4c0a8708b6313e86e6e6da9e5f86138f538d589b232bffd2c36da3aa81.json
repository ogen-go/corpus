{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "quartz-oem.yml",
			"size": 0,
			"path": "contracts/priv/quartz-oem.yml",
			"byteSize": 16048,
			"content": "openapi: 3.0.0\ninfo:\n  title: QuartzPublicAPI\n  version: 0.1.0\nservers:\n  - url: /api/v2\nsecurity:\n  - bearerAuth: []\npaths:\n  /orgs:\n    get:\n      operationId: GetOrgs\n      tags:\n        - Organizations\n      summary: List all organizations\n      responses:\n        '200':\n          description: A list of organizations\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organizations'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    post:\n      operationId: PostOrgs\n      tags:\n        - Organizations\n      summary: Creates an organization\n      requestBody:\n        description: Information for provisioning an organization\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrganizationRequest'\n      responses:\n        '201':\n          description: Organization created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrganizationWithToken'\n        '400':\n          description: Invalid request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '409':\n          description: Organization name taken\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgID}':\n    get:\n      operationId: GetOrgsID\n      tags:\n        - Organizations\n      summary: Retrieve a single organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      responses:\n        '200':\n          description: The found organization\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Organization not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    delete:\n      operationId: DeleteOrgsID\n      tags:\n        - Organizations\n      summary: Delete a single organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      responses:\n        '204':\n          description: The organization was deleted\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Organization'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '503':\n          description: Service Unavailable\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgID}/limits':\n    get:\n      operationId: GetOrgsIDLimits\n      tags:\n        - Limits\n      summary: Get the limits of an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      responses:\n        '200':\n          description: Organization limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgLimits'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Organization not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    put:\n      operationId: PatchOrgsIDLimits\n      tags:\n        - Limits\n      summary: Update the limits of an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      requestBody:\n        description: Updated limits for an organization\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/OrgLimits'\n      responses:\n        '200':\n          description: Organization limits\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/OrgLimits'\n        '400':\n          description: Invalid request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Organization not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n  '/orgs/{orgId}/users':\n    get:\n      operationId: GetOrgUsers\n      tags:\n        - Users\n      summary: Get all users in an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      responses:\n        '200':\n          description: Organization's users\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  properties:\n                    email:\n                      type: string\n                      description: user's email\n                    firstName:\n                      type: string\n                      description: user's first name\n                    id:\n                      type: string\n                      description: user's id in idpe\n                    lastName:\n                      type: string\n                      description: user's last name\n                  required:\n                    - email\n                    - firstName\n                    - id\n                    - lastName\n        '400':\n          description: Invalid request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Organization not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\n    post:\n      operationId: PostUsersToOrg\n      tags:\n        - Users\n      summary: Add users to an organization\n      parameters:\n        - in: path\n          name: orgID\n          schema:\n            type: string\n          required: true\n          description: The ID of the organization\n      requestBody:\n        description: A list of email address's to be invited to the organization\n        required: true\n        content:\n          application/json:\n            schema:\n              type: array\n              description: A list of email address's to be invited to the organization\n              items:\n                type: string\n      responses:\n        '200':\n          description: The email address's invited to the organization\n          content:\n            application/json:\n              schema:\n                type: array\n                description: A list of email address's invited to the organization\n                items:\n                  type: string\n        '400':\n          description: Invalid request\n          $ref: '#/components/responses/ServerError'\n        '401':\n          description: Unauthorized bearer token\n          $ref: '#/components/responses/ServerError'\n        '404':\n          description: Organization not found\n          $ref: '#/components/responses/ServerError'\n        default:\n          description: Unexpected error\n          $ref: '#/components/responses/ServerError'\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    BucketLimits:\n      description: Bucket limits\n      type: object\n      properties:\n        maxBuckets:\n          example: 2\n          description: Number of buckets allowed\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n        maxRetentionDuration:\n          description: Retention duration limits in nanoseconds\n          example: 2592000000000000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    CheckLimits:\n      description: Check limits\n      type: object\n      properties:\n        maxChecks:\n          description: Number of checks allowed\n          example: 2\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    DashboardLimits:\n      description: Dashboard limits\n      type: object\n      properties:\n        maxDashboards:\n          description: Number of dashboards allowed\n          example: 5\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    Error:\n      properties:\n        code:\n          description: code is the machine-readable error code.\n          readOnly: true\n          type: string\n          enum:\n            - internal error\n            - not found\n            - conflict\n            - invalid\n            - unprocessable entity\n            - empty value\n            - unavailable\n            - forbidden\n            - too many requests\n            - unauthorized\n            - method not allowed\n            - request too large\n            - unsupported media type\n        message:\n          readOnly: true\n          description: Human-readable message.\n          type: string\n        op:\n          readOnly: true\n          description: Describes the logical code operation when the error occurred. Useful for debugging.\n          type: string\n        err:\n          readOnly: true\n          description: Stack of errors that occurred during processing of the request. Useful for debugging.\n          type: string\n      required:\n        - code\n    Limit:\n      description: Limit of at least 1\n      type: integer\n      minimum: 1\n    NotificationEndpointLimits:\n      description: Notification endpoint limits\n      type: object\n      properties:\n        blockedNotificationEndpoints:\n          description: Notification endpoints not allowed CSV\n          example: 'http,pagerduty'\n          type: string\n    NotificationRuleLimits:\n      description: Notification rule limits\n      type: object\n      properties:\n        maxNotifications:\n          description: Number of notifications allowed\n          example: 2\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n        blockedNotificationRules:\n          description: Notification rules not allowed CSV\n          example: 'http,pagerduty'\n          type: string\n    OrganizationRequest:\n      type: object\n      properties:\n        orgName:\n          description: name of the organization\n          type: string\n        provider:\n          description: name of the cloud provider\n          type: string\n          enum:\n            - AWS\n            - GCP\n            - Azure\n        region:\n          description: name of the region within the cloud provider\n          type: string\n        rateLimits:\n          $ref: '#/components/schemas/OrgLimits'\n    OrganizationWithToken:\n      allOf:\n        - $ref: '#/components/schemas/Organization'\n        - type: object\n          properties:\n            token:\n              description: Authentication token to manage the organization and its resources in IDPE\n              readOnly: true\n              type: string\n            links:\n              description: Links to the IDPE resources for this organization\n              readOnly: true\n              type: object\n              example:\n                resource: path/to/resource\n    Organization:\n      type: object\n      properties:\n        id:\n          description: the IDPE organization ID\n          readOnly: true\n          type: string\n        apiUrl:\n          description: URL for talking to a specific cluster\n          readOnly: true\n          type: string\n        region:\n          description: name of the region within the cloud provider\n          type: string\n        provider:\n          description: name of the cloud provider\n          type: string\n          enum:\n            - AWS\n            - GCP\n            - Azure\n    Organizations:\n      type: array\n      items:\n        $ref: '#/components/schemas/Organization'\n    OrgLimits:\n      type: object\n      properties:\n        orgID:\n          type: string\n          readOnly: true\n          description: ID of the org for which these rates apply\n        rate:\n          $ref: '#/components/schemas/RateLimits'\n        bucket:\n          $ref: '#/components/schemas/BucketLimits'\n        task:\n          $ref: '#/components/schemas/TaskLimits'\n        dashboard:\n          $ref: '#/components/schemas/DashboardLimits'\n        check:\n          $ref: '#/components/schemas/CheckLimits'\n        notificationRule:\n          $ref: '#/components/schemas/NotificationRuleLimits'\n        notificationEndpoint:\n          $ref: '#/components/schemas/NotificationEndpointLimits'\n      required:\n        - orgID\n        - rate\n        - bucket\n        - task\n        - dashboard\n        - check\n        - notificationRule\n        - notificationEndpoint\n    RateLimits:\n      description: Usage rate limits\n      type: object\n      properties:\n        readKBs:\n          description: KB of data query'd per second\n          example: 1000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 10000\n        writeKBs:\n          description: KB of data written per second\n          example: 17\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 10000\n        cardinality:\n          description: Max cardinality of data\n          example: 10000\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Limit'\n              maximum: 1000000\n    RestrictedLimit:\n      description: Restrict access entirely\n      type: integer\n      enum:\n        - -1\n    TaskLimits:\n      description: Task limits\n      type: object\n      properties:\n        maxTasks:\n          description: Number of tasks allowed\n          example: 5\n          oneOf:\n            - $ref: '#/components/schemas/RestrictedLimit'\n            - $ref: '#/components/schemas/Unlimited'\n            - $ref: '#/components/schemas/Limit'\n    Unlimited:\n      description: Unbounded limit\n      type: integer\n      enum:\n        - 0\n  responses:\n    NoContent:\n      description: No content\n    ServerError:\n      description: Non 2XX error response from server.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /orgs/{orgId}/users: get: operation \"GetOrgUsers\": parse path: path parameter not specified: \"orgId\""
}