{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/OpenAPITools/openapi-generator"
		},
		"file": {
			"name": "roles-extension-test.yaml",
			"size": 0,
			"path": "modules/openapi-generator/src/test/resources/3_0/micronaut/roles-extension-test.yaml",
			"byteSize": 5750,
			"content": "openapi: 3.0.0\ninfo:\n  description: This is a test api description\n  version: 1.0.0\n  title: Library\n  license:\n    name: Apache-2.0\n    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'\ntags:\n  - {name: books, description: Everything about books}\n  - {name: users, description: Everyting about users}\n  - {name: reviews, description: Everything related to book reviews}\npaths:\n  /book/{bookName}:\n    get:\n      tags: [books]\n      summary: Get a book by name\n      operationId: getBook\n      parameters:\n        - {name: bookName, in: path, required: true, schema: {type: string}}\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              schema: { $ref: \"#/components/schemas/Book\" }\n      x-roles: [\"isAnonymous()\"]\n    post:\n      tags: [books]\n      summary: Create a new book\n      operationId: createBook\n      parameters:\n        - {name: bookName, in: path, required: true, schema: {type: string}}\n      requestBody:\n        content:\n          application/json: { schema: { $ref: \"#/components/schemas/Book\" } }\n      responses:\n        '200':\n          description: success\n      x-roles: [\"admin\"]\n  /book/search:\n    get:\n      tags: [books]\n      summary: Search for a book\n      parameters:\n        - {name: bookName, in: query, required: false, schema: {type: string, example: \"Book 2\"}}\n        - {name: ISBN, in: query, required: false, schema: {type: string, pattern: \"[0-9]{13}\", example: \"0123456789123\"}}\n        - {name: published, in: query, required: false, schema: {type: string, format: date}}\n        - {name: minNumPages, in: query, required: false, schema: {type: integer, format: int32, minimum: 1, maximum: 1000}}\n        - {name: minReadTime, in: query, required: false, schema: {type: number, format: float, minimum: 1, example: 5.7}}\n        - {name: description, in: query, required: false, schema: {type: string, minLength: 4, nullable: true}}\n        - {name: preferences, in: cookie, required: false, schema: {type: string}}\n        - {name: geoLocation, in: header, required: false, schema: {type: string}}\n      responses:\n        '200':\n          description: success\n          content:\n            application/json:\n              { schema: { type: array, items: { $ref: \"#/components/schemas/Book\" } } }\n  /book/availability/{bookName}:\n    get:\n      tags: [books]\n      summary: Check book availability\n      operationId: isBookAvailable\n      parameters:\n        - { name: bookName, in: path, required: true, schema: { type: string, example: \"Book 1\" } }\n      responses:\n        '200':\n          description: success\n          content:\n            text/plain:\n              schema: { $ref: \"#/components/schemas/BookAvailability\" }\n  /book/reserve/{bookName}:\n    get:\n      tags: [books]\n      summary: Reserve book for self\n      operationId: reserveBook\n      parameters:\n        - { name: bookName, in: path, required: true, schema: { type: string, example: \"Book 2\" } }\n      responses:\n        '200':\n          description: success\n      x-roles: [\"isAuthorized()\"]\n  /user/{userName}:\n    get:\n      tags: [users]\n      summary: View user profile\n      operationId: getUserProfile\n      parameters:\n        - {name: userName, in: path, required: true, schema: {type: string, pattern: \"[0-9a-zA-Z ]+\"}}\n      responses:\n        '200':\n          description: success\n          content:\n            application/json: { schema: { $ref: \"#/components/schemas/User\" } }\n  /user:\n    post:\n      tags: [users]\n      summary: Update your own profile\n      operationId: updateProfile\n      requestBody:\n        content:\n          '*/*': { schema: { $ref: \"#/components/schemas/User\"} }\n      responses:\n        '200':\n          description: success\n      x-roles: [\"isAuthorized()\"]\n  /book/viewReviews:\n    get:\n      tags: [reviews]\n      summary: Get all reviews for a book\n      parameters:\n        - { name: bookName, in: query, required: true, schema: { type: string, nullable: false } }\n      responses:\n        '200':\n          description: success\n          content:\n            application/json: { schema: { type: array, items: { $ref: \"#/content/schemas/Review\" } } }\n  /book/sendReview:\n    post:\n      tags: [reviews]\n      summary: Send a review to a book\n      parameters:\n        - {name: bookName, in: query, required: true, schema: { type: string, nullable: false } }\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema: {$ref: \"#/components/schemas/Review\"}\n      responses:\n        '200':\n          description: success\n      x-roles: [\"isAuthorized()\"]\ncomponents:\n  schemas:\n    Book:\n      title: Book\n      description: book instance\n      type: object\n      properties:\n        name: {type: string}\n        availability: {$ref: \"#/components/schemas/BookAvailability\"}\n        pages: {type: integer, format: int32, minimum: 1}\n        author: {type: string, pattern: \"[a-zA-z ]+\"}\n        readTime: {type: number, format: float, minimum: 0, exclusiveMinimum: true}\n      required: [\"name\", \"availability\"]\n      default:\n        name: \"Bob's Adventures\"\n        availability: \"available\"\n    BookAvailability:\n      type: string\n      enum: [\"available\", \"not available\", \"reserved\"]\n      default: \"not available\"\n    Review:\n      type: object\n      properties:\n        rating: {type: integer, minimum: 1, maximum: 5, default: 2}\n        description: {type: string, maxLength: 200}\n      required: [rating]\n    User:\n      type: object\n      properties:\n        username: { type: string, minLength: 2, nullable: false }\n        name: { type: string, minLength: 1 }\n        description: { type: string, nullable: true }\n      required: [\"username\", \"name\"]\n",
			"canonicalURL": "/github.com/OpenAPITools/openapi-generator@ac7ebf67dd67e4a347fa142aa6a95ab12f0198de/-/blob/modules/openapi-generator/src/test/resources/3_0/micronaut/roles-extension-test.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/OpenAPITools/openapi-generator/blob/ac7ebf67dd67e4a347fa142aa6a95ab12f0198de/modules/openapi-generator/src/test/resources/3_0/micronaut/roles-extension-test.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Book\": at 1:45: parse default: unexpected type: \"object\""
}