{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/nndi-oss/pg_reloaded"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi.yaml",
			"byteSize": 8421,
			"content": "openapi: 3.0.0\ninfo:\n  title: \"PG Reloaded Control Plane API\"\n  description: \"An API to control a PG Reloaded instance\"\n  version: 0.1.0\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\npaths:\n  /environment:\n    get:\n      operationId: GetEnvironment\n      summary: Get the environment variables for running pg_reloaded\n      tags:\n        - system\n      responses:\n        '200':\n          description: Environment variables\n  /servers:\n    get:\n      summary: Get all registered servers\n      operationId: GetAllServers\n      responses:\n        '200':\n          description: servers response\n          content:\n            application/json:\n              schema:\n                $ref : '#/components/schemas/Server'\n    post:\n      summary: Register a server on pg_reloaded\n      operationId: RegisterServer\n      requestBody:\n        description: Server to add to the configuration\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Server'\n      responses:\n        '201':\n          description: server registered\n          content:\n            application/json:\n              schema:\n                $ref : '#/components/schemas/Server'\n  /servers/{name}:\n    get:\n      summary: Get server with specified name, name is case sensitive\n      operationId: GetServer\n      parameters:\n        - name: name\n          in: path\n          description: Name of Server to fetch\n          required: true\n          schema:\n            type: string\n            # format: underscore-lowercase\n      responses:\n        '201':\n          description: server registered\n          content:\n            application/json:\n              schema:\n                $ref : '#/components/schemas/Server'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update server configuration\n      operationId: UpdateServer\n      responses:\n        '200':\n          description: server updated\n          content:\n            application/json:\n              schema:\n                $ref : '#/components/schemas/Server'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Remove the server with the given name\n      operationId: DeleteServer\n      responses:\n        '200':\n          description: serer deleted response\n  /servers/{name}/password:\n    patch:\n      summary: Change the password associated with a server with the given name\n      operationId: UpdateServerPassword\n      requestBody:\n        description: Password for the server configuration\n        required: true\n        content:\n          text/plain:\n            schema:\n              required:\n                - password\n              properties:\n                password:\n                  type: string\n      responses:\n        '200':\n          description: password changed\n  /databases:\n    get:\n      summary: Fetch all databases\n      operationId: FetchAllDatabases\n      responses:\n        '200':\n          description: All databases\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Databases'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      summary: Register Database\n      operationId: RegisterDatabase\n      responses:\n        '201':\n          description: Database registered\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Database'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /databases/{name}:\n    get:\n      summary: Fetch database with specified name\n      operationId: FetchDatabase\n      responses:\n        '200':\n          description: Database fetched\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Database'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      summary: Update Database configuration\n      operationId: UpdateDatabaseConfig\n      responses:\n        '200':\n          description: Database updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Database'\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      summary: Remove database from configuraiton\n      operationId: UnregisterDatabase\n      responses:\n        '200':\n          description: Database unregistered\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /databases/{name}/files:\n    post:\n      summary: Upload files to use for database restoration\n      operationId: UploadFiles\n      responses:\n        '200':\n          description: Files uploaded\n          content:\n            application/json:\n              schema:\n                properties:\n                  message:\n                    type: string\n        default:\n          description: unexpected error uploading files\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /databases/{name}/restoration:\n    post:\n      summary: Perform restoration on database immediately\n      operationId: RestoreDatabaseNow\n      responses:\n        '201':\n          description: Operation started\n          content:\n            application/json:\n                schema:\n                  properties:\n                    message:\n                      type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'    \n  /logs:\n    get:\n      summary: get logs\n      operationId: get logs from program\n      responses:\n        '200':\n          description: tail from the logs\n          content:\n              text/plain:\n                schema:\n                  properties:\n                    logline:\n                      type: string\n        default:\n          description: unexpected error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\ncomponents:\n  schemas:\n    Error:\n      type: object\n      properties:\n        message:\n          type: string\n        code:\n          type: integer\n    Server:\n      type: object\n      required:\n        - name\n        - host\n        - port\n        - username\n      properties:\n        name:\n          type: string\n        host:\n          type: string\n        port:\n          type: integer\n        username:\n          type: string\n        password:\n          type: string\n    Servers:\n      type: array\n      items:\n        $ref: '#/components/schemas/Server'\n    Database:\n      type: object\n      required:\n        - name\n        - server\n        - schedule\n        - source\n      properties:\n        name:\n          type: string\n        server:\n          type: string\n        schedule:\n          type: string\n        source:\n          $ref: '#/components/schemas/Source'\n    Databases:\n      type: array\n      items:\n        $ref: '#/components/schemas/Database'\n    Source:\n      type: object\n      required:\n        - type\n      properties:\n        type:\n          type: string\n        file:\n          type: string\n        schema:\n          type: integer\n        files:\n          type: array\n          items:\n            type: string\n            format: File path"
		}
	},
	"Error": "parse: parse spec: paths: /databases/{name}/restoration: post: operation \"RestoreDatabaseNow\": parse path: path parameter not specified: \"name\""
}