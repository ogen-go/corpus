{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mainflux/mainflux"
		},
		"file": {
			"name": "auth.yml",
			"size": 0,
			"path": "api/openapi/auth.yml",
			"byteSize": 22434,
			"content": "openapi: 3.0.1\ninfo:\n  title: Mainflux authentication service\n  description: HTTP API for managing platform API keys.\n  version: \"1.0.0\"\npaths:\n  /keys:\n    post:\n      summary: Issue API key\n      description: |\n        Generates a new API key. Thew new API key will\n        be uniquely identified by its ID.\n      tags:\n        - auth\n      requestBody:\n        $ref: \"#/components/requestBodies/KeyRequest\"\n      responses:\n        '201':\n          description: Issued new key.\n        '400':\n          description: Failed due to malformed JSON.\n        '409':\n          description: Failed due to using already existing ID.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /keys/{id}:\n    get:\n      summary: Gets API key details.\n      description: |\n        Gets API key details for the given key.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/ApiKeyId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/KeyRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Revoke API key\n      description: |\n        Revoke API key identified by the given ID.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/ApiKeyId\"\n      responses:\n        '204':\n          description: Key revoked.\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups:\n    post:\n      summary: Creates new group\n      description: |\n        Creates new group that can be used for grouping entities - things, users.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/requestBodies/GroupCreateReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/GroupCreateRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '409':\n          description: Failed due to using an existing email address.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    get:\n      summary: Gets all groups.\n      description: |\n        Gets all groups up to a max level of hierarchy that can be fetched in one\n        request ( max level = 5). Result can be filtered by metadata. Groups will\n        be returned as JSON array or JSON tree.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/Level\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Tree\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/GroupsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Group does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{groupId}:\n    get:\n      summary: Gets group info.\n      description: |\n        Gets info on a group specified by id.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/GroupRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Group does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    put:\n      summary: Updates group data.\n      description: |\n        Updates Name, Description or Metadata of a group.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/GroupUpdateReq\"\n      responses:\n        '200':\n          description: Group updated.\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Group does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    delete:\n      summary: Deletes group.\n      description: |\n        Deletes group. If group is parent and descendant groups do not have any members\n        child groups will be deleted. Group cannot be deleted if has members or if\n        any descendant group has members.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n        - $ref: \"#/components/parameters/Level\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Tree\"\n      responses:\n        '204':\n          description: Group removed.\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Group does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{groupId}/children:\n    get:\n      summary: Gets group children.\n      description: |\n        Gets the whole tree of descendants of group for given id including itself.\n        For performance reason request is limited up to a given level of hierarchy\n        (max. 5).\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n        - $ref: \"#/components/parameters/Level\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Tree\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/GroupsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Group does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{groupId}/parents:\n    get:\n      summary: Gets group info.\n      description: |\n        Gets a direct line of ancestors for a group specified by id.\n        Result is up to a specified hierarchy level or up to a root group.\n        Result can be a JSON array or a JSON tree.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n        - $ref: \"#/components/parameters/Level\"\n        - $ref: \"#/components/parameters/Metadata\"\n        - $ref: \"#/components/parameters/Tree\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/GroupsPageRes\"\n        '400':\n          description: Failed due to malformed query parameters.\n        '401':\n          description: Missing or invalid access token provided.\n        '404':\n          description: Group does not exist.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{groupId}/members:\n    post:\n      summary: Assigns members to a group.\n      description: |\n        Assigns thing or user id to a group.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n      requestBody:\n        $ref: \"#/components/requestBodies/MembersReq\"\n      responses:\n        '201':\n          $ref: \"#/components/responses/GroupCreateRes\"\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '409':\n          description: Failed due to using an existing email address.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    get:\n      summary: Gets members of a group.\n      description: |\n        Array of member ids that are in the group specified with groupID.\n      parameters:\n        - $ref: \"#/components/parameters/GroupId\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Limit\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/MembersRes\"\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /groups/{userGroupID}/share:\n    post:\n      summary: Adds access rights on thing groups to user group with userGroupID.\n      description: |\n        Takes user group id through parameter and adds access rights for user group on thing group received via request body.\n      tags:\n        - auth\n      parameters:\n        - $ref: \"#/components/parameters/UserGroupID\"\n      requestBody:\n        $ref: \"#/components/requestBodies/ShareGroupAccessReq\"\n      responses:\n        '200':\n          description: User group shared with thing group.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /members/{memberId}/groups:\n    get:\n      summary: Gets memberships for a member with member id.\n      description: |\n        Array of groups that member belongs to.\n      parameters:\n        - $ref: \"#/components/parameters/MemberId\"\n        - $ref: \"#/components/parameters/Offset\"\n        - $ref: \"#/components/parameters/Limit\"\n        - $ref: \"#/components/parameters/Metadata\"\n      responses:\n        '200':\n          $ref: \"#/components/responses/GroupRes\"\n        '401':\n          description: Missing or invalid access token provided.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /policies:\n    post:\n      summary: Creates new policies.\n      description: |\n        Creates new policies. Only admin can use this endpoint. Therefore, you need an authentication token for the admin.\n        Also, only policies defined on the system are allowed to add. For more details, please see the docs for Authorization.\n      tags:\n        - auth\n      requestBody:\n        $ref: \"#/components/requestBodies/PoliciesReq\"\n      responses:\n        '201':\n          description: Policies created.\n        '400':\n          description: Failed due to malformed JSON.\n        '401':\n          description: Missing or invalid access token provided.\n        '403':\n          description: Unauthorized access token provided.\n        '409':\n          description: Failed due to using an existing email address.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n    put:\n      summary: Deletes policies.\n      description: |\n        Deletes policies. Only admin can use this endpoint. Therefore, you need an authentication token for the admin.\n        Also, only policies defined on the system are allowed to delete. For more details, please see the docs for Authorization.\n      tags:\n        - auth\n      requestBody:\n        $ref: \"#/components/requestBodies/PoliciesReq\"\n      responses:\n        '204':\n          description: Policies deleted.\n        '400':\n          description: Failed due to malformed JSON.\n        '409':\n          description: Failed due to using an existing email address.\n        '415':\n          description: Missing or invalid content type.\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n  /health:\n    get:\n      summary: Retrieves service health check info.\n      tags:\n        - health\n      responses:\n        '200':\n          $ref: \"#/components/responses/HealthRes\"\n        '500':\n          $ref: \"#/components/responses/ServiceError\"\n\ncomponents:\n  schemas:\n    Key:\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: \"c5747f2f-2a7c-4fe1-b41a-51a5ae290945\"\n          description: API key unique identifier\n        issuer_id:\n          type: string\n          format: uuid\n          example: \"9118de62-c680-46b7-ad0a-21748a52833a\"\n          description: In ID of the entity that issued the token.\n        type:\n          type: integer\n          example: 0\n          description: API key type. Keys of different type are processed differently.\n        subject:\n          type: string\n          format: string\n          example: \"test@example.com\"\n          description: User's email or service identifier of API key subject.\n        issued_at:\n          type: string\n          format: date-time\n          example: \"2019-11-26 13:31:52\"\n          description: Time when the key is generated.\n        expires_at:\n          type: string\n          format: date-time\n          example: \"2019-11-26 13:31:52\"\n          description: Time when the Key expires. If this field is missing,\n            that means that Key is valid indefinitely.\n    GroupReqSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            Free-form group name. Group name is unique on the given hierarchy level.\n        description:\n          type: string\n          description: Group description, free form text.\n        parent_id:\n          type: string\n          format: ulid\n          description: Id of parent group, it must be existing group.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded group's data.\n    GroupUpdateSchema:\n      type: object\n      properties:\n        name:\n          type: string\n          description: |\n            Free-form group name. Group name is unique on the given hierarchy level.\n        description:\n          type: string\n          description: Group description, free form text.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded group's data.\n    GroupResSchema:\n      type: object\n      properties:\n        id:\n          type: string\n          format: ulid\n          description: Unique group identifier generated by the service.\n        name:\n          type: string\n          description: Free-form group name.\n        parent_id:\n          type: string\n          description: Group ID of parent group.\n        owner_id:\n          type: string\n          format: uuid\n          description: UUID of user that created the group.\n        metadata:\n          type: object\n          description: Arbitrary, object-encoded group's data.\n        level:\n          type: integer\n          description: Level in hierarchy, distance from the root group.\n        path:\n          type: string\n          description: Hierarchy path, concatenated ids of group ancestors.\n        children:\n          type: object\n          # schema: GroupResSchema\n        created_at:\n          type: string\n          description: Datetime of group creation.\n        updated_at:\n          type: string\n          description: Datetime of last group updated.\n      required:\n        - id\n        - name\n        - owner_id\n        - description\n        - level\n        - path\n        - created_at\n        - updated_at\n    MembersReqSchema:\n      type: object\n      properties:\n        members:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            type: string\n            format: uuid | ulid\n        type:\n          type: string\n          description: Type of entity\n    ShareGroupAccessReqSchema:\n      type: object\n      properties:\n        thing_group_id:\n          type: string\n          description: Group ID of the Thing Group.\n          format: uuid\n    GroupsPage:\n      type: object\n      properties:\n        groups:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/GroupResSchema\"\n        total:\n          type: integer\n          description: Total number of items.\n        level:\n          type: integer\n          description: Level of hierarchy up to which groups are fetched.\n      required:\n        - groups\n        - total\n        - level\n    MembershipPage:\n      type: object\n      properties:\n        groups:\n          type: array\n          minItems: 0\n          uniqueItems: true\n          items:\n            $ref: \"#/components/schemas/GroupResSchema\"\n        offset:\n          type: integer\n          description: Number of items to skip during retrieval.\n        limit:\n          type: integer\n          description: Maximum number of items to return in one page.\n        total:\n          type: integer\n          description: Total number of items.\n      required:\n        - groups\n    PoliciesReqSchema:\n      type: object\n      properties:\n        object:\n          type: string\n          description: |\n            Specifies an object field for the field.\n            Object indicates application objects such as ThingID.\n        subjects:\n          type: array\n          minItems: 1\n          uniqueItems: true\n          items:\n            type: string\n        policies:\n          type: array\n          minItems: 1\n          uniqueItems: true\n          items:\n            type: string\n\n  parameters:\n    ApiKeyId:\n      name: id\n      description: API Key ID.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    UserGroupID:\n      name: userGroupID\n      description: User Group ID.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    GroupId:\n      name: groupId\n      description: Group ID.\n      in: path\n      schema:\n        type: string\n        format: uuid\n      required: true\n    MemberId:\n      name: memberId\n      description: Member id.\n      in: path\n      schema:\n        type: string\n        format: uuid | ulid\n      required: true\n    Limit:\n      name: limit\n      description: Size of the subset to retrieve.\n      in: query\n      schema:\n        type: integer\n        default: 10\n        maximum: 100\n        minimum: 1\n      required: false\n    Offset:\n      name: offset\n      description: Number of items to skip during retrieval.\n      in: query\n      schema:\n        type: integer\n        default: 0\n        minimum: 0\n      required: false\n    Level:\n      name: level\n      description: Level of hierarchy up to which to retrieve groups from given group id.\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n        maximum: 5\n      required: false\n    Metadata:\n      name: metadata\n      description: Metadata filter. Filtering is performed matching the parameter with metadata on top level. Parameter is json.\n      in: query\n      required: false\n      schema:\n        type: object\n        additionalProperties: {}\n    Tree:\n      name: tree\n      description: Specify type of response, JSON array or tree.\n      in: query\n      required: false\n      schema:\n        type: boolean\n        default: false\n\n  requestBodies:\n    KeyRequest:\n      description: JSON-formatted document describing key request.\n      required: true\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                type: integer\n                example: 0\n                description: API key type. Keys of different type are processed differently.\n              duration:\n                type: number\n                format: integer\n                example: 23456\n                description: Number of seconds issued token is valid for.\n    GroupCreateReq:\n      description: JSON-formatted document describing group create request.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GroupReqSchema\"\n    GroupUpdateReq:\n      description: JSON-formatted document describing group create request.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GroupUpdateSchema\"\n    MembersReq:\n      description: JSON array of member IDs.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/MembersReqSchema\"\n    ShareGroupAccessReq:\n      description: test\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ShareGroupAccessReqSchema\"\n    PoliciesReq:\n      description: JSON-formatted document describing adding policies request.\n      required: true\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/PoliciesReqSchema\"\n\n  responses:\n    ServiceError:\n      description: Unexpected server-side error occurred.\n    KeyRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Key\"\n    GroupCreateRes:\n      description: Group created.\n      headers:\n        Location:\n          content:\n            text/plain:\n              schema:\n                type: string\n                description: Created group's relative URL.\n                example: /groups/{groupId}\n    ShareAccessRightRes:\n      description: User group shared with thing group.\n    GroupRes:\n      description: Data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GroupResSchema\"\n    GroupsPageRes:\n      description: Group data retrieved.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/GroupsPage\"\n    MembersRes:\n      description: Groups data retrieved. Groups assigned to a member.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/MembershipPage\"\n    MembershipPageRes:\n      description: Groups data retrieved. Groups assigned to a member.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/MembershipPage\"\n    HealthRes:\n      description: Service Health Check.\n      content:\n        application/json:\n          schema:\n            $ref: \"./schemas/HealthInfo.yml\"\n\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        * Users access: \"Authorization: Bearer \u003cuser_token\u003e\"\n\nsecurity:\n  - bearerAuth: []\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"HealthRes\": content: application/json: schema: parse schema: resolve \"./schemas/HealthInfo.yml\": find schema: external base \"./schemas/HealthInfo.yml\" is not supported"
}