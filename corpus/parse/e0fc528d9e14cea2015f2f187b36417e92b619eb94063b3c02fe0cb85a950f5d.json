{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/serverless-coffee-workshop"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "backends/5-order-manager/RestAPIs/api.yaml",
			"byteSize": 12481,
			"content": "openapi: \"3.0.1\"\ninfo:\n  title: \"ORDERMANAGERRESTAPI\"\n  version: \"2021-12-21T15:32:58Z\"\npaths:\n  /orders:\n    get:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security: [\n        {\n          \"ServerlespressoAuth\" : [\"openid\", \"aws.cognito.signin.user.admin\"]\n        }\n      ]\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [RESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"#set($Items = $input.path('$.Items'))\\n$Items\\n\"\n        requestTemplates:\n          application/json: \"\\n#set($state = $input.params('state'))\\n#if( $input.params('maxItems').toString()\\\n            \\ != \\\"\\\" )\\n  #set($maxItems = $input.params('maxItems'))\\n#else\\n  #set($maxItems\\\n            \\ = 100)\\n#end\\n\\n\\n{\\n    \\\"TableName\\\": \\\"serverlesspresso-order-table\\\"\\\n            ,\\n    \\\"IndexName\\\": \\\"GSI-status\\\",\\n    \\\"KeyConditionExpression\\\"\\\n            : \\\"#ORDERSTATE = :ORDERSTATE\\\",\\n    \\\"ExpressionAttributeNames\\\": {\\n\\\n            \\    \\\"#ORDERSTATE\\\": \\\"ORDERSTATE\\\"\\n    },\\n    \\\"ExpressionAttributeValues\\\"\\\n            : {\\n    \\\":ORDERSTATE\\\": {\\n      \\\"S\\\": \\\"$state\\\"\\n    }\\n    },\\n\\\n            \\    \\\"ScanIndexForward\\\": true,\\n    \\\"Limit\\\": $maxItems,\\n    \\\"ProjectionExpression\\\"\\\n            : \\\"PK, SK, orderNumber, robot, drinkOrder, ORDERSTATE, TS, userId, baristaUserId\\\"\\\n            \\n}\"\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"{}\\n\"\n        requestTemplates:\n          application/json: \"{\\n  \\\"statusCode\\\" : 200\\n}\\n\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"mock\"\n  /orders/{id}:\n    get:\n      parameters:\n      - name: \"id\"\n        in: \"path\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security: [\n        {\n          \"ServerlespressoAuth\" : [\"openid\", \"aws.cognito.signin.user.admin\"]\n        }\n      ]\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [RESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"\\n#set($allParams = $input.params())\\n{\\n\\\"orderId\\\"\\\n                \\ : $input.json('$.Item.SK.S'),\\n\\\"drinkOrder\\\":  $input.json('$.Item.drinkOrder'),\\n\\\n                \\\"orderState\\\":  $input.json('$.Item.ORDERSTATE.S'),\\n\\\"TS\\\":  $input.json('$.Item.TS.N'),\\n\\\n                \\n}\\n\"\n        requestTemplates:\n          application/json: \"\\n#set($id = $input.params('id'))\\n{\\n    \\\"TableName\\\"\\\n            : \\\"serverlesspresso-order-table\\\",\\n     \\\"Key\\\": {\\n      \\\"PK\\\":{\\n\\\n            \\        \\\"S\\\":\\\"orders\\\"\\n        },\\n      \\\"SK\\\":{\\n        \\\"S\\\":\\\"\\\n            $id\\\"\\n      }\\n\\n    }\\n}\"\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"\n    put:\n      parameters:\n      - name: \"id\"\n        in: \"path\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security: [\n        {\n          \"ServerlespressoAuth\" : [\"openid\", \"aws.cognito.signin.user.admin\"]\n        }\n      ]\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [RESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:states:action/StartExecution\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS,PUT'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"\"\n        requestTemplates:\n          application/json:\n            Fn::Sub: \n              \"\\n#set($orderId = $input.params('id'))\\n#set($body =\\\n              \\ $util.escapeJavaScript($input.body))\\n#set($action = $input.params('action'))\\\n              \\ \\n#set($baristaUserId = $context.authorizer.claims.sub) \\n{\\n   \\\"input\\\"\\\n              : \\\"{\\\\\\\"action\\\\\\\":\\\\\\\"$action\\\\\\\",\\\\\\\"body\\\\\\\":$body,\\\\\\\"orderId\\\\\\\"\\\n              :\\\\\\\"$orderId\\\\\\\",\\\\\\\"baristaUserId\\\\\\\":\\\\\\\"$baristaUserId\\\\\\\"}\\\",\\n \\\n              \\   \\\"stateMachineArn\\\":\\\"${02OrderManagerStateMachine}\\\"\\\n              \\n}\"\n\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"    \n    options:\n      parameters:\n      - name: \"id\"\n        in: \"path\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS,PUT'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"{}\\n\"\n        requestTemplates:\n          application/json: \"{\\n  \\\"statusCode\\\" : 200\\n}\\n\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"mock\"\n  /myOrders:\n    get:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Empty\"\n      security: [\n        {\n          \"ServerlespressoAuth\" : [\"openid\", \"aws.cognito.signin.user.admin\"]\n        }\n      ]\n      x-amazon-apigateway-integration:\n        credentials: \n          Fn::GetAtt: [RESTApiRole, Arn]\n        httpMethod: \"POST\"\n        uri: \n          Fn::Sub: arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"#set($Items = $input.path('$.Items'))\\n$Items\\n\"\n        requestTemplates:\n          application/json: \"#set($sub = $input.params('sub'))\\n#set($subFromJWT =\\\n            \\ $context.authorizer.claims.sub)\\n\\n{\\n    \\\"TableName\\\": \\\"serverlesspresso-order-table\\\"\\\n            ,\\n    \\\"IndexName\\\": \\\"GSI-userId\\\",\\n    \\\"KeyConditionExpression\\\"\\\n            : \\\"#USERID = :USERID\\\",\\n    \\\"ExpressionAttributeNames\\\": {\\n    \\\"\\\n            #USERID\\\": \\\"USERID\\\"\\n    },\\n    \\\"ExpressionAttributeValues\\\": {\\n\\\n            \\    \\\":USERID\\\": {\\n      \\\"S\\\": \\\"$subFromJWT\\\"\\n    }\\n    },\\n   \\\n            \\ \\\"ScanIndexForward\\\": true,\\n    \\\"ProjectionExpression\\\": \\\"PK, SK,\\\n            \\ orderNumber, robot, drinkOrder, ORDERSTATE, TS\\\"\\n}\"\n        passthroughBehavior: \"when_no_templates\"\n        type: \"aws\"\n    options:\n      responses:\n        \"200\":\n          description: \"200 response\"\n          headers:\n            Access-Control-Allow-Origin:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Methods:\n              schema:\n                type: \"string\"\n            Access-Control-Allow-Headers:\n              schema:\n                type: \"string\"\n          content: {}\n      x-amazon-apigateway-integration:\n        responses:\n          default:\n            statusCode: \"200\"\n            responseParameters:\n              method.response.header.Access-Control-Allow-Methods: \"'GET,OPTIONS'\"\n              method.response.header.Access-Control-Allow-Headers: \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\"\n              method.response.header.Access-Control-Allow-Origin: \"'*'\"\n            responseTemplates:\n              application/json: \"{}\\n\"\n        requestTemplates:\n          application/json: \"{\\n  \\\"statusCode\\\" : 200\\n}\\n\"\n        passthroughBehavior: \"when_no_match\"\n        type: \"mock\"\ncomponents:\n  schemas:\n    Empty:\n      title: \"Empty Schema\"\n      type: \"object\"\n  securitySchemes:\n    ServerlespressoAuth:\n      type: \"apiKey\"\n      name: \"Authorization\"\n      in: \"header\"\n      x-amazon-apigateway-authtype: \"cognito_user_pools\"\n      x-amazon-apigateway-authorizer:\n        providerARNs:\n        - Fn::GetAtt: [UserPool, Arn]\n        type: \"cognito_user_pools\"\n",
			"canonicalURL": "/github.com/aws-samples/serverless-coffee-workshop@28eb375fb97016f2916a39acf2ae094742b942cd/-/blob/backends/5-order-manager/RestAPIs/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/serverless-coffee-workshop/blob/28eb375fb97016f2916a39acf2ae094742b942cd/backends/5-order-manager/RestAPIs/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/myOrders\": get: security: at 1:818: list of scopes MUST be empty for \"type\" \"apiKey\""
}