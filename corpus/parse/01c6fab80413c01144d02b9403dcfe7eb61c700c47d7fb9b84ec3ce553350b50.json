{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/medusajs/medusa"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/store/openapi.yaml",
			"byteSize": 9978,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Medusa Storefront API\n  description: \u003e\n    API reference for Medusa's Storefront endpoints. All endpoints are prefixed\n    with `/store`.\n\n\n    ## Authentication\n\n\n    To send requests as an authenticated customer, you must use the Cookie\n    Session ID.\n\n\n    \u003c!-- ReDoc-Inject: \u003cSecurityDefinitions\u003e --\u003e\n\n\n    ## Expanding Fields\n\n\n    In many endpoints you'll find an `expand` query parameter that can be passed\n    to the endpoint. You can use the `expand` query parameter to unpack an\n    entity's relations and return them in the response.\n\n\n    For example, when you list customers you can also retrieve their groups by\n    passing to the `expand` query parameter the value `groups`.\n\n\n    You can expand more than one relation by separating the relations in the\n    `expand` query parameter with a comma. For example, to retrieve both the\n    orders and the groups of a customer, pass to the `expand` query parameter\n    the value `groups,orders`.\n\n\n    Please note that the parameters you pass to `expand` replace any relations\n    that are expanded by default.\n\n\n    ## Selecting Fields\n\n\n    In many endpoints you'll find a `fields` query parameter that can be passed\n    to the endpoint. You can use the `fields` query parameter to specify which\n    fields in the entity should be returned in the response.\n\n\n    You can pass more than one field by seperating the field names in the\n    `fields` query parameter with a comma.\n\n\n    Only the fields you pass to `field` will be retrieved and returned in the\n    response. Any fields that are returned by default will not be returned in\n    this case. This does not affect relations.\n\n\n    For example, to only select the `title` and `description` fields of a\n    product, pass to the `fields` query parameter the value `title,description`.\n\n\n    ## Pagination\n\n\n    ### Query Parameters\n\n\n    In listing endpoints, such as list customers or list products, you can\n    control the pagination using the query parameters `limit` and `offset`.\n\n\n    `limit` is used to specify the maximum number of items that can be return in\n    the response. `offset` is used to specify how many items to skip before\n    returning the resulting entities.\n\n\n    You can use the `offset` query parameter to change between pages. For\n    example, if the limit is 50, at page 1 the offset should be 0; at page 2 the\n    offset should be 50, and so on.\n\n\n    ### Response Fields\n\n\n    In listing fields, aside from the entities retrieved, there are three\n    pagination-related fields returned: `count`, `limit`, and `offset`.\n\n\n    Similarly to the query parameters, `limit` is the maximum number of items\n    that can be returned in the response, and `field` is the number of items\n    that were skipped before the entities in the result.\n\n\n    `count` is the total number of available items of this entity. It can be\n    used to determine how many pages are there.\n\n\n    For example, if the `count` is 100 and the `limit` is 50, you can divide the\n    `count` by the `limit` to get the number of pages: `100/50 = 2 pages`.\n  license:\n    name: MIT\n    url: https://github.com/medusajs/medusa/blob/master/LICENSE\ntags:\n  - name: Auth\n    description: \u003e-\n      Auth endpoints that allow authorization of customers and manages their\n      sessions.\n  - name: Cart\n    description: Cart endpoints that allow handling carts in Medusa.\n  - name: Collection\n    description: Collection endpoints that allow handling collections in Medusa.\n  - name: Customer\n    description: Customer endpoints that allow handling customers in Medusa.\n  - name: Gift Card\n    description: Gift Card endpoints that allow handling gift cards in Medusa.\n  - name: Order\n    description: Order endpoints that allow handling orders in Medusa.\n  - name: Product\n    description: Product endpoints that allow handling products in Medusa.\n  - name: Product Variant\n    description: Product Variant endpoints that allow handling product variants in Medusa.\n  - name: Region\n    description: Region endpoints that allow handling regions in Medusa.\n  - name: Return Reason\n    description: Return Reason endpoints that allow handling return reasons in Medusa.\n  - name: Return\n    description: Return endpoints that allow handling returns in Medusa.\n  - name: Shipping Option\n    description: Shipping Option endpoints that allow handling shipping options in Medusa.\n  - name: Swap\n    description: Swap endpoints that allow handling swaps in Medusa.\nservers:\n  - url: https://api.medusa-commerce.com/store\npaths:\n  /auth:\n    $ref: paths/auth.yaml\n  /auth/{email}:\n    $ref: paths/auth_{email}.yaml\n  /collections/{id}:\n    $ref: paths/collections_{id}.yaml\n  /collections:\n    $ref: paths/collections.yaml\n  /carts/{id}/shipping-methods:\n    $ref: paths/carts_{id}_shipping-methods.yaml\n  /carts/{id}/taxes:\n    $ref: paths/carts_{id}_taxes.yaml\n  /carts/{id}/complete:\n    $ref: paths/carts_{id}_complete.yaml\n  /carts:\n    $ref: paths/carts.yaml\n  /carts/{id}/payment-sessions:\n    $ref: paths/carts_{id}_payment-sessions.yaml\n  /carts/{id}/discounts/{code}:\n    $ref: paths/carts_{id}_discounts_{code}.yaml\n  /carts/{id}/line-items/{line_id}:\n    $ref: paths/carts_{id}_line-items_{line_id}.yaml\n  /carts/{id}/payment-sessions/{provider_id}:\n    $ref: paths/carts_{id}_payment-sessions_{provider_id}.yaml\n  /carts/{id}:\n    $ref: paths/carts_{id}.yaml\n  /carts/{id}/payment-sessions/{provider_id}/refresh:\n    $ref: paths/carts_{id}_payment-sessions_{provider_id}_refresh.yaml\n  /carts/{id}/payment-session:\n    $ref: paths/carts_{id}_payment-session.yaml\n  /customers/me/addresses:\n    $ref: paths/customers_me_addresses.yaml\n  /customers:\n    $ref: paths/customers.yaml\n  /customers/me/addresses/{address_id}:\n    $ref: paths/customers_me_addresses_{address_id}.yaml\n  /customers/me:\n    $ref: paths/customers_me.yaml\n  /customers/me/payment-methods:\n    $ref: paths/customers_me_payment-methods.yaml\n  /customers/me/orders:\n    $ref: paths/customers_me_orders.yaml\n  /customers/password-token:\n    $ref: paths/customers_password-token.yaml\n  /customers/password-reset:\n    $ref: paths/customers_password-reset.yaml\n  /gift-cards/{code}:\n    $ref: paths/gift-cards_{code}.yaml\n  /order-edits/{id}/complete:\n    $ref: paths/order-edits_{id}_complete.yaml\n  /order-edits/{id}/decline:\n    $ref: paths/order-edits_{id}_decline.yaml\n  /order-edits/{id}:\n    $ref: paths/order-edits_{id}.yaml\n  /orders/customer/confirm:\n    $ref: paths/orders_customer_confirm.yaml\n  /orders/cart/{cart_id}:\n    $ref: paths/orders_cart_{cart_id}.yaml\n  /orders/{id}:\n    $ref: paths/orders_{id}.yaml\n  /orders:\n    $ref: paths/orders.yaml\n  /orders/batch/customer/token:\n    $ref: paths/orders_batch_customer_token.yaml\n  /payment-collections/{id}/sessions/batch/authorize:\n    $ref: paths/payment-collections_{id}_sessions_batch_authorize.yaml\n  /payment-collections/{id}/sessions/{session_id}/authorize:\n    $ref: paths/payment-collections_{id}_sessions_{session_id}_authorize.yaml\n  /payment-collections/{id}:\n    $ref: paths/payment-collections_{id}.yaml\n  /payment-collections/{id}/sessions/batch:\n    $ref: paths/payment-collections_{id}_sessions_batch.yaml\n  /payment-collections/{id}/sessions:\n    $ref: paths/payment-collections_{id}_sessions.yaml\n  /payment-collections/{id}/sessions/{session_id}:\n    $ref: paths/payment-collections_{id}_sessions_{session_id}.yaml\n  /product-types:\n    $ref: paths/product-types.yaml\n  /products/{id}:\n    $ref: paths/products_{id}.yaml\n  /products:\n    $ref: paths/products.yaml\n  /products/search:\n    $ref: paths/products_search.yaml\n  /regions/{id}:\n    $ref: paths/regions_{id}.yaml\n  /regions:\n    $ref: paths/regions.yaml\n  /return-reasons/{id}:\n    $ref: paths/return-reasons_{id}.yaml\n  /return-reasons:\n    $ref: paths/return-reasons.yaml\n  /returns:\n    $ref: paths/returns.yaml\n  /shipping-options:\n    $ref: paths/shipping-options.yaml\n  /shipping-options/{cart_id}:\n    $ref: paths/shipping-options_{cart_id}.yaml\n  /swaps:\n    $ref: paths/swaps.yaml\n  /swaps/{cart_id}:\n    $ref: paths/swaps_{cart_id}.yaml\n  /variants/{variant_id}:\n    $ref: paths/variants_{variant_id}.yaml\n  /variants:\n    $ref: paths/variants.yaml\n  /carts/{id}/line-items:\n    $ref: paths/carts_{id}_line-items.yaml\ncomponents:\n  securitySchemes:\n    cookie_auth:\n      type: apiKey\n      x-displayName: Cookie Session ID\n      in: cookie\n      name: connect.sid\n      description: \u003e\n        Use a cookie session to send authenticated requests.\n\n\n        ### How to Obtain the Cookie Session\n\n\n        If you're sending requests through a browser, using JS Client, or using\n        tools like Postman, the cookie session should be automatically set when\n        the customer is logged in.\n\n\n        If you're sending requests using cURL, you must set the Session ID in\n        the cookie manually.\n\n\n        To do that, send a request to [authenticate the\n        customer](#tag/Auth/operation/PostAuth) and pass the cURL option `-v`:\n\n\n        ```bash\n\n        curl -v --location --request POST 'https://medusa-url.com/store/auth' \\\n\n        --header 'Content-Type: application/json' \\\n\n        --data-raw '{\n          \"email\": \"user@example.com\",\n          \"password\": \"supersecret\"\n        }'\n\n        ```\n\n\n        The headers will be logged in the terminal as well as the response. You\n        should find in the headers a Cookie header similar to this:\n\n\n        ```bash\n\n        Set-Cookie:\n        connect.sid=s%3A2Bu8BkaP9JUfHu9rG59G16Ma0QZf6Gj1.WT549XqX37PN8n0OecqnMCq798eLjZC5IT7yiDCBHPM;\n\n        ```\n\n\n        Copy the value after `connect.sid` (without the `;` at the end) and pass\n        it as a cookie in subsequent requests as the following:\n\n\n        ```bash\n\n        curl --location --request GET\n        'https://medusa-url.com/store/customers/me/orders' \\\n\n        --header 'Cookie: connect.sid={sid}'\n\n        ```\n\n\n        Where `{sid}` is the value of `connect.sid` that you copied.\n",
			"canonicalURL": "/github.com/medusajs/medusa@99add15fc33bdbb113e5e7b44014d5f0cdaf2144/-/blob/docs/api/store/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/medusajs/medusa/blob/99add15fc33bdbb113e5e7b44014d5f0cdaf2144/docs/api/store/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/orders/batch/customer/token\": post: operation \"PostOrdersCustomerOrderClaim\": security: at https://raw.githubusercontent.com/medusajs/medusa/99add15fc33bdbb113e5e7b44014d5f0cdaf2144/docs/api/store/paths/orders_batch_customer_token.yaml:22:7: unknown security scheme \"api_token\""
}