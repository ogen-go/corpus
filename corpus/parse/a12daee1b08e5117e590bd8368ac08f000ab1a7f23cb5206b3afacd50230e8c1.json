{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ITISFoundation/osparc-simcore"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "api/specs/storage/openapi.yaml",
			"byteSize": 29924,
			"content": "openapi: 3.0.0\ninfo:\n  description: API definition for simcore-service-storage service\n  version: 0.3.0\n  title: simcore-service-storage API\n  contact:\n    name: IT'IS Foundation\n    email: support@simcore.io\n  license:\n    name: MIT\n    url: https://github.com/ITISFoundation/osparc-simcore/blob/master/LICENSE\nservers:\n  - description: API server\n    url: \"/v0\"\n  - description: Development server\n    url: http://{host}:{port}/{basePath}\n    variables:\n      host:\n        default: \"localhost\"\n      port:\n        default: \"8080\"\n      basePath:\n        enum:\n          - v0\n        default: v0\ntags:\n  - name: maintenance\n  - name: location\n  - name: dataset\n  - name: file\n  - name: tasks\npaths:\n  /:\n    get:\n      summary: Service health-check endpoint\n      description: Some general information on the API and state of the service behind\n      tags:\n        - maintenance\n      operationId: health_check\n      responses:\n        \"200\":\n          description: Service information\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/HealthCheckEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /status:\n    get:\n      summary: checks status of self and connected services\n      operationId: get_status\n      tags:\n        - maintenance\n      responses:\n        \"200\":\n          description: returns app status check\n\n  /locations:\n    get:\n      summary: Lists available storage locations\n      operationId: get_storage_locations\n      tags:\n        - location\n      parameters:\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"List of available storage locations\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileLocationArrayEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}:sync:\n    post:\n      summary: Manually triggers the synchronisation of the file meta data table in the database\n      operationId: synchronise_meta_data_table\n      tags:\n        - location\n      parameters:\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: dry_run\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: true\n        - name: fire_and_forget\n          in: query\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        \"200\":\n          description: An object containing added, changed and removed paths\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TableSynchronisationEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/datasets:\n    get:\n      summary: Lists all dataset's metadata\n      operationId: get_datasets_metadata\n      tags:\n        - dataset\n      parameters:\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"list of dataset meta-datas\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/DatasetMetaDataArrayEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/files/metadata:\n    get:\n      summary: Lists all file's metadata\n      operationId: get_files_metadata\n      tags:\n        - file\n      parameters:\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: uuid_filter\n          in: query\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"list of file meta-datas\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileMetaDataArrayEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/datasets/{dataset_id}/metadata:\n    get:\n      summary: Get dataset metadata\n      operationId: get_files_metadata_dataset\n      tags:\n        - dataset\n      parameters:\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: dataset_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"list of file meta-datas\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileMetaDataArrayEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/files/{file_id}/metadata:\n    get:\n      summary: Get file metadata\n      operationId: get_file_metadata\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: \"Returns file metadata\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileMetaEnvelope\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/files/{file_id}:\n    get:\n      summary: Gets download link for file at location\n      operationId: download_file\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: link_type\n          in: query\n          required: false\n          schema:\n            type: string\n            default: \"presigned\"\n            enum:\n              - presigned\n              - s3\n\n      responses:\n        \"200\":\n          description: \"Returns presigned link\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PresignedLinkEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n    put:\n      summary: Returns upload object\n      operationId: upload_file\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n        - name: link_type\n          in: query\n          required: false\n          schema:\n            type: string\n            default: \"presigned\"\n            enum:\n              - presigned\n              - s3\n        - name: file_size\n          in: query\n          required: false\n          description: will be required once all legacy services are gone or updated. if null returns the PresignedLinkEnveloped, else returns FileUploadEnveloped\n          schema:\n            type: integer\n            format: int64\n            minimum: 0\n      responses:\n        \"200\":\n          description: \"Creates and returns file upload object\"\n          content:\n            application/json:\n              schema:\n                oneOf:\n                  - $ref: \"#/components/schemas/PresignedLinkEnveloped\"\n                  - $ref: \"#/components/schemas/FileUploadEnveloped\"\n          links:\n            CompleteUpload:\n              operationId: complete_upload_file\n              parameters:\n                path.location_id: \"$request.path.location_id\"\n                path.file_id: \"$request.path.file_id\"\n                query.user_id: \"$request.query.user_id\"\n            AbortUpload:\n              operationId: abort_upload_file\n              parameters:\n                path.location_id: \"$request.path.location_id\"\n                path.file_id: \"$request.path.file_id\"\n                query.user_id: \"$request.query.user_id\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n    delete:\n      summary: Deletes file\n      operationId: delete_file\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: everything is OK\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/files/{file_id}:abort:\n    post:\n      summary: Asks the server to abort the upload and revert to the last valid version if any\n      operationId: abort_upload_file\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: Abort OK\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/files/{file_id}:complete:\n    post:\n      summary: Asks the server to complete the upload\n      operationId: complete_upload_file\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - parts\n              properties:\n                parts:\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - number\n                      - e_tag\n                    properties:\n                      number:\n                        type: integer\n                        minimum: 1\n                      e_tag:\n                        type: string\n      responses:\n        \"202\":\n          description: Completion of upload is accepted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileUploadCompleteEnveloped\"\n          links:\n            CompleteUploadStatus:\n              operationId: is_completed_upload_file\n              parameters:\n                path.location_id: \"$request.path.location_id\"\n                path.file_id: \"$request.path.file_id\"\n                path.future_id: \"$response.body.data.links.state\"\n                query.user_id: \"$request.query.user_id\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /locations/{location_id}/files/{file_id}:complete/futures/{future_id}:\n    post:\n      summary: Check for upload completion\n      operationId: is_completed_upload_file\n      tags:\n        - file\n      parameters:\n        - name: future_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: location_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: returns state of upload completion\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileUploadCompleteFutureEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /simcore-s3:access:\n    post:\n      summary: Returns the temporary access credentials for the user storage space\n      operationId: get_or_create_temporary_s3_access\n      tags:\n        - file\n      parameters:\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: the S3 access credentials\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/S3AccessCredentialsEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /simcore-s3/files/metadata:search:\n    post:\n      summary: Returns metadata for all files matching a pattern\n      operationId: search_files_starting_with\n      tags:\n        - file\n      parameters:\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: integer\n        - name: startswith\n          description: matches starting string of the file_id\n          in: query\n          schema:\n            type: string\n            default: \"\"\n      responses:\n        \"200\":\n          description: list of matching files found\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileMetaDataArrayEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /simcore-s3/folders:\n    post:\n      summary: Deep copies of all data from source to destination project in s3\n      operationId: copy_folders_from_project\n      tags:\n        - file\n      parameters:\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                source:\n                  $ref: \"#/components/schemas/Project\"\n                destination:\n                  $ref: \"#/components/schemas/Project\"\n                nodes_map:\n                  type: object\n                  description: maps source and destination node uuids\n                  additionalProperties:\n                    type: string\n      responses:\n        \"201\":\n          description: Data from destination project copied and returns project\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Project\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /simcore-s3/folders/{folder_id}:\n    delete:\n      summary: Deletes all objects within a node_id or within a project_id if node_id is omitted\n      operationId: delete_folders_of_project\n      tags:\n        - file\n      parameters:\n        - name: folder_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: node_id\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: string\n      responses:\n        \"204\":\n          description: folder has been successfully deleted\n\n  /files/{file_id}:soft-copy:\n    post:\n      summary: Copy as soft link\n      operationId: copy_as_soft_link\n      tags:\n        - file\n      parameters:\n        - name: file_id\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: user_id\n          in: query\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - link_id\n              properties:\n                link_id:\n                  type: string\n      responses:\n        \"200\":\n          description: \"Returns link metadata\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/FileMetaEnvelope\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /tasks:\n    get:\n      operationId: list_tasks\n      tags:\n        - tasks\n      responses:\n        \"200\":\n          description: Returns the list of active tasks (running and/or done)\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"../common/schemas/task.yaml#/TaskEnveloped\"\n  /tasks/{task_id}:\n    parameters:\n      - name: task_id\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: get_task_status\n      tags:\n        - tasks\n      responses:\n        \"200\":\n          description: Returns the task status\n          content:\n            application/json:\n              schema:\n                $ref: \"../common/schemas/task.yaml#/TaskStatusEnveloped\"\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n    delete:\n      operationId: cancel_and_delete_task\n      description: Aborts and remove the task\n      tags:\n        - tasks\n      responses:\n        \"204\":\n          description: Task was successfully aborted\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\n\n  /tasks/{task_id}/result:\n    parameters:\n      - name: task_id\n        in: path\n        required: true\n        schema:\n          type: string\n    get:\n      operationId: get_task_result\n      tags:\n        - tasks\n      responses:\n        \"2XX\":\n          description: Retrieve the task result and returns directly its HTTP code\n        default:\n          $ref: \"#/components/responses/DefaultErrorResponse\"\ncomponents:\n  schemas:\n    HealthCheckEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/HealthCheck\"\n        error:\n          nullable: true\n          default: null\n\n    HealthCheck:\n      type: object\n      properties:\n        name:\n          type: string\n        status:\n          type: string\n        api_version:\n          type: string\n        version:\n          type: string\n      example:\n        name: \"simcore-director-service\"\n        status: SERVICE_RUNNING\n        api_version: 0.1.0-dev+NJuzzD9S\n        version: 0.1.0-dev+N127Mfv9H\n\n    ErrorEnveloped:\n      # - notice that data is defaulted to null\n      #\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          nullable: true\n          default: null\n        error:\n          $ref: \"#/components/schemas/Error\"\n\n    Error:\n      #  - Normally transmitted as a response from server to client\n      #  - can exchage log messages between server and client. Possible applications:\n      #     - e.g. client side can render a widget to display messages logged to 'user'\n      #  - contains meta-information to allow client programatically understand the error. Possible applications:\n      #     - e.g. metadata can serialize an exception in server that can be reproduced in client side\n      #\n      type: object\n      properties:\n        logs:\n          description: log messages\n          type: array\n          items:\n            $ref: \"#/components/schemas/LogMessage\"\n        errors:\n          description: errors metadata\n          type: array\n          items:\n            $ref: \"#/components/schemas/ErrorItem\"\n        status:\n          description: HTTP error code\n          type: integer\n      example:\n        BadRequestError:\n          logs:\n            - message: \"Requested information is incomplete or malformed\"\n              level: ERROR\n            - message: \"Invalid email and password\"\n              level: ERROR\n              logger: USER\n          errors:\n            - code: \"InvalidEmail\"\n              message: \"Email is malformed\"\n              field: email\n            - code: \"UnsavePassword\"\n              message: \"Password is not secure\"\n              field: pasword\n          status: 400\n\n    ErrorItem:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: string\n          description: Typically the name of the exception that produced it otherwise some known error code\n        message:\n          type: string\n          description: Error message specific to this item\n        resource:\n          type: string\n          description: API resource affected by this error\n        field:\n          type: string\n          description: Specific field within the resource\n\n    LogMessageEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/LogMessage\"\n        error:\n          nullable: true\n          default: null\n\n    LogMessage:\n      # - logger can be use as a way for the client to filter messages.\n      # - E.g. logger naming can be hierarchical, and all including \"*.user.*\"\n      #   are displayed as a flash message in the front-end\n      #\n      type: object\n      properties:\n        level:\n          description: log level\n          type: string\n          default: INFO\n          enum:\n            - DEBUG\n            - WARNING\n            - INFO\n            - ERROR\n        message:\n          description: log message. If logger is USER, then it MUST be human readable\n          type: string\n        logger:\n          description: name of the logger receiving this message\n          type: string\n      required:\n        - message\n      example:\n        message: \"Hi there, Mr user\"\n        level: INFO\n        logger: user-logger\n\n    FakeEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/Fake\"\n        error:\n          nullable: true\n          default: null\n\n    Fake:\n      type: object\n      required:\n        - path_value\n        - query_value\n        - body_value\n      properties:\n        path_value:\n          type: string\n        query_value:\n          type: string\n        body_value:\n          type: object\n          additionalProperties: true\n      example:\n        path_value: foo\n        query_value: bar\n        body_value:\n          key1: value1\n          key2: value2\n\n    TableSynchronisationEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/TableSynchronisation\"\n        error:\n          nullable: true\n          default: null\n\n    TableSynchronisation:\n      type: object\n      required:\n        - removed\n      properties:\n        dry_run:\n          type: boolean\n        fire_and_forget:\n          type: boolean\n        removed:\n          type: array\n          items:\n            type: string\n\n    FileLocationArrayEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileLocationArray\"\n        error:\n          nullable: true\n          default: null\n\n    FileLocationArray:\n      type: array\n      items:\n        $ref: \"#/components/schemas/FileLocation\"\n\n    FileLocationEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileLocation\"\n        error:\n          nullable: true\n          default: null\n\n    FileLocation:\n      type: object\n      properties:\n        name:\n          type: string\n        id:\n          type: integer\n      example:\n        filename: \"simcore.s3\"\n        id: 0\n\n    DatasetMetaDataArrayEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/DatasetMetaDataArray\"\n        error:\n          nullable: true\n          default: null\n\n    DatasetMetaEnvelope:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/DatasetMetaData\"\n        error:\n          nullable: true\n          default: null\n\n    DatasetMetaData:\n      type: object\n      properties:\n        dataset_id:\n          type: string\n        display_name:\n          type: string\n      example:\n        dataset_uuid: \"N:id-aaaa\"\n        display_name: \"simcore-testing\"\n\n    DatasetMetaDataArray:\n      type: array\n      items:\n        $ref: \"#/components/schemas/DatasetMetaData\"\n\n    FileMetaEnvelope:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileMetaData\"\n        error:\n          nullable: true\n          default: null\n\n    FileMetaData:\n      type: object\n      properties:\n        file_uuid:\n          type: string\n        location_id:\n          type: string\n        project_name:\n          type: string\n        node_name:\n          type: string\n        file_name:\n          type: string\n        file_id:\n          type: string\n        created_at:\n          type: string\n        last_modified:\n          type: string\n        file_size:\n          type: integer\n        entity_tag:\n          type: string\n\n    FileMetaDataArrayEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileMetaDataArray\"\n        error:\n          nullable: true\n          default: null\n\n    FileMetaDataArray:\n      type: array\n      items:\n        $ref: \"#/components/schemas/FileMetaData\"\n\n    PresignedLinkEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/PresignedLink\"\n        error:\n          nullable: true\n          default: null\n\n    PresignedLink:\n      type: object\n      required:\n        - link\n      properties:\n        link:\n          type: string\n      example:\n        link: \"example_link\"\n\n    FileUploadEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileUploadSchema\"\n        error:\n          nullable: true\n          default: null\n\n    FileUploadSchema:\n      type: object\n      required:\n        - chunk_size\n        - urls\n        - links\n      properties:\n        chunk_size:\n          type: integer\n          format: int64\n          minimum: 0\n        urls:\n          type: array\n          items:\n            type: string\n        links:\n          type: object\n          required:\n            - abort_upload\n            - complete_upload\n          properties:\n            abort_upload:\n              type: string\n            complete_upload:\n              type: string\n\n    FileUploadCompleteEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileUploadComplete\"\n        error:\n          nullable: true\n          default: null\n\n    FileUploadComplete:\n      type: object\n      required:\n        - links\n      properties:\n        links:\n          type: object\n          required:\n            - state\n          properties:\n            state:\n              type: string\n\n    FileUploadCompleteFutureEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/FileUploadCompleteFuture\"\n        error:\n          nullable: true\n          default: null\n\n    FileUploadCompleteFuture:\n      type: object\n      required:\n        - state\n      properties:\n        state:\n          type: string\n          enum:\n            - ok\n            - nok\n        e_tag:\n          type: string\n          nullable: true\n\n    S3AccessCredentialsEnveloped:\n      type: object\n      required:\n        - data\n        - error\n      properties:\n        data:\n          $ref: \"#/components/schemas/S3AccessCredentials\"\n        error:\n          nullable: true\n          default: null\n\n    S3AccessCredentials:\n      type: object\n      required:\n        - access\n        - secret\n        - token\n        - endpoint\n      properties:\n        access:\n          type: string\n        secret:\n          type: string\n        token:\n          type: string\n        endpoint:\n          type: string\n\n    Project:\n      $ref: \"../common/schemas/project.yaml#/components/schemas/ProjectIn\"\n\n  responses:\n    DefaultErrorResponse:\n      description: Unexpected error\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/ErrorEnveloped\"\n",
			"canonicalURL": "/github.com/ITISFoundation/osparc-simcore@a53bc458c38fdf7a407af28694e050c84813a99c/-/blob/api/specs/storage/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ITISFoundation/osparc-simcore/blob/a53bc458c38fdf7a407af28694e050c84813a99c/api/specs/storage/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"DatasetMetaDataArrayEnveloped\": parse schema: property \"error\": parse schema: at 1:597: cannot infer type from \"null\""
}