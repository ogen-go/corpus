{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/geoserver/geoserver"
		},
		"file": {
			"name": "config.yaml",
			"size": 0,
			"path": "src/community/rest-openapi/openapi/src/main/resources/org/geoserver/rest/openapi/1.0.0/config.yaml",
			"byteSize": 12979,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: GeoServer Config Model\n  description: GeoServer Config Model Objects\npaths:\n  /fake:\n    description: fake operation entry point to pass validation, otherwise codegen will comply there's no paths element\n    get:\n      operationId: fakeOp\n      responses:\n        200:\n          description: nothing really\ncomponents:\n  schemas:\n    GeoServerInfo:\n      title: GeoServer global config object\n      type: object\n      properties:\n#    protected String id;\n        updateSequence:\n          type: integer\n          format: int64\n          description: The update sequence. This value is used by various ogc services to track changes to a capabilities\n            document.\n        useHeadersProxyURL:\n          type: boolean\n          description: The flag to use request headers for the proxy URL\n        settings:\n          $ref: '#/components/schemas/SettingsInfo'\n    ContactInfo:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Object identifier\n        addressType:\n          type: string\n          description: Type of address\n        address:\n          type: string\n          description: Server admin address\n        addressCity:\n          type: string\n          description: Server admin city\n        addressCountry:\n          type: string\n          description: Server admin country\n        addressDeliveryPoint:\n          type: string\n        addressPostalCode:\n          type: string\n        addressState:\n          type: string\n        contactEmail:\n          type: string\n          description: Server admin email\n        contactVoice:\n          type: string\n          description: Server admin phone number\n        contactFacsimile:\n          type: string\n          description: Server admin facsimile number\n        contactOrganization:\n          type: string\n          description: Server admin organization\n        contactPerson:\n          type: string\n          description: Server admin point of contact\n        contactPosition:\n          type: string\n          description: Server admin point of contact job title\n        onlineResource:\n          type: string\n          description: Concat web URL\n    SettingsInfo:\n      title: wrapper object for DataStoreInfo, in order to comply with current API encoding\n      type: object\n      properties:\n        id:\n          type: string\n        title:\n          type: string\n          description: The title of the settings instance\n        charset:\n          type: string\n          description: The default character set\n        numDecimals:\n          type: integer\n          format: int32\n          description: A cap on the number of decimals to use when encoding floating point numbers\n        onlineResource:\n          type: string\n          description: Provider web site (used for default contact information, or service provider information if user has\n            not filled in contact details.\n        proxyBaseUrl:\n          type: string\n          description: The url of a proxy in front of the GeoServer instance. This value is used when a reference back to\n            the GeoServer instance must be made in a response.\n        schemaBaseUrl:\n          type: string\n          description: The base url to use when including a reference to an xml schema document in a response.\n        verbose:\n          type: boolean\n          description: When set to false GeoServer will also take step so to strip out some formating and produce more condensed output.\n        localWorkspaceIncludesPrefix:\n          type: boolean\n          description: If true local workspace should keep the namespace prefixes in getCapabilities etc...\n        showCreatedTimeColumnsInAdminList:\n          type: boolean\n          description: Set whether or not a local workspace should keep namespace prefixes in the getCapabilities\n        showModifiedTimeColumnsInAdminList:\n          type: boolean\n        contact:\n          $ref: '#/components/schemas/ContactInfo'\n#MetadataMap getMetadata();\n    ServiceInfo:\n      type: object\n      properties:\n        workspace:\n          $ref: 'catalog.yaml#/components/schemas/WorkspaceInfo'\n        enabled:\n          type: boolean\n          description: Status of the service\n        name:\n          type: string\n          description: Name of the service. This value is unique among all instances of ServiceInfo and can be used as an identifier.\n        title:\n          type: string\n          description: Title of the service\n        abstrct:\n          type: string\n          description: description of the service\n        maintainer:\n          type: string\n          description: maintainer of the service\n        accessConstraints:\n          type: string\n        fees:\n          type: string\n#        versions:\n#          type: object\n#          description: The versions of the service that are available.\n#          properties:\n#            org.geotools.util.Version:\n#              type: array\n#              items:\n#                type: string\n#                description: version number\n#        keywords:\n#          type: array\n#          description: Keywords associated with the service.\n#          items:\n#            type: string\n        exceptionFormats:\n          type: array\n          description: Exception formats the service can provide.\n          items:\n            type: string\n#        metadataLink:\n#          $ref: 'catalog.yaml#/components/schemas/MetadataLinkInfo'\n        citeCompliant:\n          type: boolean\n          description: Status of service CITE compliance.\n        onlineResource:\n          type: string\n        schemaBaseURL:\n          type: string\n          description: The base url for the schemas describing the service.\n        outputStrategy:\n          type: string\n          description: This value is an identifier which indicates how the output of a response should behave.\n                       An example might be \"performance\", indicating that the response should be encoded as quickly as possible.\n        verbose:\n          type: boolean\n          description: Flag indicating if the service should be verbose or not.\n          \n    WMSInfo:\n      allOf:\n        - $ref: \"#/components/schemas/ServiceInfo\"\n        - type: object\n          properties:\n#            watermark:\n#              type: object\n#              description: Watermarking configuration\n#              properties:\n#                enabled:\n#                  type: boolean\n#                  description: Flag indicating if watermarking is enabled\n#                position:\n#                  type: string\n#                  description: Position of the watermark\n#                  enum:\n#                  - TOP_LEFT\n#                  - TOP_CENTER\n#                  - TOP_RIGHT\n#                  - MID_LEFT\n#                  - MID_CENTER\n#                  - MID_RIGHT\n#                  - BOT_LEFT\n#                  - BOT_CENTER\n#                  - BOT_RIGHT\n#                transparency:\n#                  type: integer\n#                  description: The transparency of the watermark logo, ranging from 0 to 255\n            srs:\n              $ref: \"#/components/schemas/SRSListWrapper\"\n            interpolation:\n              type: string\n              enum:\n              - Nearest\n              - Bilinear\n              - Bicubic\n            getFeatureInfoMimeTypeCheckingEnabled:\n              type: boolean\n              description: Flag indicating if getFeatureInfo MIME type checking is enabled\n            getMapMimeTypes:\n              title: GetMapMimeTypes\n              description : A set of mime types allowed for a getMap request. Active if getMapMimeTypeCheckingEnabled is true\n              type: object\n              properties:\n                string:\n                  type: array\n                  items:\n                    type: string\n            getMapMimeTypeCheckingEnabled:\n              type: boolean\n              description: Flag indicating if getMap MIME type checking is enabled.\n            dynamicStylingDisabled:\n              type: boolean\n              description: status of dynamic styling (SLD and SLD_BODY params) allowance\n            maxBuffer:\n              type: integer\n              description: Maximum search radius for GetFeatureInfo\n            maxRequestMemory:\n              type: integer\n              description: Max amount of memory, in kilobytes, that each WMS request can allocate (each output format will make\n                a best effort attempt to respect it, but there are no guarantees). 0 indicates no limit.\n            maxRenderingTime:\n              type: integer\n              description: Max time, in seconds, a WMS request is allowed to spend rendering the map. Various output formats will\n                do a best effort to respect it (raster formats, for example, will account just rendering time, but not image encoding\n                time).\n            maxRenderingErrors:\n              type: integer\n              description: Max number of rendering errors that will be tolerated before stating the rendering operation failed\n                by throwing a service exception back to the client\n                \n    SRSListWrapper:\n      description: The srs's that the wms service supports.\n      type: object\n      properties:\n        string:\n          type: array\n          items:\n            type: string\n    WFSInfo:\n      allOf:\n        - $ref: \"#/components/schemas/ServiceInfo\"\n        - type: object\n          properties:\n            gml:\n              $ref: \"#/components/schemas/WFSInfoGmlSettings\"\n            serviceLevel:\n              $ref: \"#/components/schemas/WFSServiceLevel\"\n            maxFeatures:\n              type: integer\n              description: Global cap on the number of features to allow when processing a request\n            featureBounding:\n              type: boolean\n              description: Flag which determines if gml:bounds elements should be encoded at the feature level in GML output\n            canonicalSchemaLocation:\n              type: boolean\n              description: Flag that determines the encoding of the WFS schemaLocation. True if the WFS schemaLocation should\n                refer to the canonical location, false if the WFS schemaLocation should refer to a copy served by GeoServer.\n            encodeFeatureMember:\n              type: boolean\n              description: Flag that determines encoding of featureMember or featureMembers. True if the featureMember should\n                be encoded False if the featureMembers should be encoded.\n            hitsIgnoreMaxFeatures:\n              type: boolean\n              description: Flag that determines if WFS hit requests (counts) will ignore the maximum features limit for this server\n    WCSInfo:\n      allOf:\n        - $ref: \"#/components/schemas/ServiceInfo\"\n        - type: object\n          properties:\n            gmlPrefixing:\n              type: boolean\n            latLon:\n              type: boolean\n            maxInputMemory:\n              type: boolean\n            maxOutputMemory:\n              type: boolean\n              \n    WMTSInfo:\n      allOf:\n        - $ref: \"#/components/schemas/ServiceInfo\"\n        - type: object\n\n    WFSServiceLevel:\n      type: string\n      enum:\n        - BASIC\n        - TRANSACTIONAL\n        - COMPLETE\n\n    WFSInfoGmlSettings:\n      type: object\n      properties:\n        entry:\n          type: array\n          items:\n            $ref: '#/components/schemas/GmlInfo'\n      example:\n       {\"entry\":[{\"version\":\"V_10\",\"gml\":{\"srsNameStyle\":[\"XML\"],\"overrideGMLAttributes\":true}},{\"version\":\"V_11\",\"gml\":{\"srsNameStyle\":[\"URN\"],\"overrideGMLAttributes\":false}},{\"version\":\"V_20\",\"gml\":{\"srsNameStyle\":[\"URN2\"],\"overrideGMLAttributes\":false}}]}\n       \n    GmlInfo:\n      type: object\n      properties:\n        version:\n          type: string\n          description: Service version\n          example: \"1.1.1\"\n        gml:\n          $ref: \"#/components/schemas/GmlSettings\"\n      example:\n        {\"version\":\"V_10\",\"gml\":{\"srsNameStyle\":[\"XML\"],\"overrideGMLAttributes\":true}}\n\n    GmlSettings:\n      type: object\n      properties:\n        srsNameStyle:\n          type: array\n          items:\n            $ref: \"#/components/schemas/SrsNameStyle\"\n        overrideGMLAttributes:\n          type: boolean\n          description: Controls how attributes are handled with regard to attributes defined in the schema of\n                       AbstractFeatureType, name, description, etc...\n                       When set this flag will cause the attributes to be redefined in the application schema namespace.\n      example:\n        {\"srsNameStyle\":[\"XML\"],\"overrideGMLAttributes\":true}\n\n    SrsNameStyle:\n      type: string\n      description: The srs name style to be used when encoding the gml 'srsName' attribute.\n      enum:\n        - NORMAL\n        - XML\n        - URN\n        - URN2\n        - URL\n    \n"
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"WCSInfo\": parse schema: allOf: [0]: parse schema: resolve \"#/components/schemas/ServiceInfo\": parse schema: property \"workspace\": parse schema: resolve \"catalog.yaml#/components/schemas/WorkspaceInfo\": external \"catalog.yaml\": file: local file reference is not allowed"
}