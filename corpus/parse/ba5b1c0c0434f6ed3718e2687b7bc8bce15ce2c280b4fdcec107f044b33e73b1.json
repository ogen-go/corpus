{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/SUPLA/supla-cloud"
		},
		"file": {
			"name": "supla-api-docs.yaml",
			"size": 0,
			"path": "app/config/supla-api-docs.yaml",
			"byteSize": 70837,
			"content": "openapi: 3.0.0\nservers:\n  - url: 'https://cloud.supla.org/api/v2.3.0'\ninfo:\n  version: \"2.3.0\"\n  title: SUPLA Cloud API\npaths:\n  /accessids:\n    get:\n      tags:\n        - Access Identifiers\n      summary: Get Access Identifiers list\n      operationId: getAccessIdentifiers\n      parameters:\n        - $ref: '#/components/parameters/AccessIdIncludes'\n      responses:\n        '200':\n          description: List of Access Identifiers owned by the current user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AccessIdentifier'\n    post:\n      summary: Create a new Access Identifier\n      tags:\n        - Access Identifiers\n      operationId: createAccessIdentifier\n      responses:\n        '201':\n          description: Newely created AccessIdentifier with automatic name\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessIdentifier'\n  '/accessids/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get Access Identifier\n      tags:\n        - Access Identifiers\n      operationId: getAccessIdentifier\n      parameters:\n        - $ref: '#/components/parameters/AccessIdIncludes'\n      responses:\n        '200':\n          description: Get Access Identifier\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessIdentifier'\n    put:\n      summary: Update Access Identifier\n      tags:\n        - Access Identifiers\n      operationId: updateAccessIdentifier\n      responses:\n        '200':\n          description: Definition generated from Swagger Inspector\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessIdentifier'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Access Identifier update request\n              properties:\n                enabled:\n                  type: boolean\n                caption:\n                  type: string\n                password:\n                  type: string\n                  description: Provide new password if you want to change it.\n                locationsIds:\n                  type: array\n                  items:\n                    type: integer\n                  description: Locations identifiers to assign to this Access Identifier.\n                clientAppsIds:\n                  type: array\n                  items:\n                    type: integer\n                  description: \u003e-\n                    Client Apps identifiers to assign to this Access Identifier.\n                    If client app is connected to any other Client ID, it will\n                    be disconnected from the old one before assigning.\n              type: object\n        required: true\n    delete:\n      summary: Delete Access Identifier\n      tags:\n        - Access Identifiers\n      operationId: deleteAccessIdentifier\n      responses:\n        '204':\n          description: Access Identifier has been successfully deleted\n  /channels:\n    get:\n      tags:\n        - Channels\n      summary: Get channels list\n      operationId: getChannels\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - iodevice\n                - location\n                - connected\n                - state\n        - name: function\n          in: query\n          style: form\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ChannelFunctionEnumNames'\n        - name: io\n          in: query\n          description: Return only `input` or `output` channels.\n          schema:\n            type: string\n            enum:\n              - input\n              - output\n        - name: hasFunction\n          in: query\n          description: \u003e-\n            Return only channels with (`true`) or without (`false`) chosen\n            functions.\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: List of channels owned by the current user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Channel'\n  '/channels/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get channel by ID\n      tags:\n        - Channels\n      operationId: getChannel\n      parameters:\n        - name: include\n          in: query\n          required: false\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - iodevice\n                - location\n                - connected\n                - state\n                - supportedFunctions\n                - measurementLogsCount\n                - relationsCount\n      responses:\n        '200':\n          description: Get channel\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Channel'\n    put:\n      summary: Update channel\n      operationId: updateChannel\n      tags:\n        - Channels\n      responses:\n        '200':\n          description: Updated channel\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Channel'\n        '409':\n          description: \u003e-\n            Channel update will result in data loss. Please confirm the request\n            with `confirm=true` GET param to force.\n          content:\n            application/json:\n              schema:\n                title: Channel update confirmation response\n                properties:\n                  schedules:\n                    type: array\n                    description: Schedules that will be deleted after this request.\n                    items:\n                      $ref: '#/components/schemas/Schedule'\n                  groups:\n                    type: array\n                    description: \u003e-\n                      Channel groups that this channel will be removed from\n                      after this request.\n                    items:\n                      $ref: '#/components/schemas/ChannelGroup'\n                type: object\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Channel update request\n              properties:\n                functionId:\n                  type: integer\n                param1:\n                  type: integer\n                param2:\n                  type: integer\n                param3:\n                  type: integer\n                textParam1: {type: string}\n                textParam2: {type: string}\n                textParam3: {type: string}\n                caption:\n                  type: string\n                altIcon:\n                  type: integer\n                hidden:\n                  type: boolean\n                locationId:\n                  type: integer\n                inheritedLocation:\n                  type: boolean\n                userIconId: {type: integer}\n              type: object\n        required: true\n    patch:\n      summary: Execute action on the channel\n      operationId: executeAction\n      tags:\n        - Channels\n      responses:\n        '202':\n          description: Action has been executed.\n        '400':\n          description: Invalid request.\n          content:\n            application/json:\n              schema:\n                title: Channel action execution failed response\n                properties:\n                  status:\n                    type: integer\n                    example: 400\n                  message:\n                    type: string\n                    example: Cannot execute requested action on this channel.\n                type: object\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChannelExecuteActionRequest'\n        description: \u003e-\n          Defines an action to execute on channel. The `action` key is always\n          required. The rest of the keys are params depending on the chosen\n          action. Read more on [Github\n          Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).\n        required: true\n  '/channels/{id}/schedules':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      tags:\n        - Channels\n      summary: Get schedules list of the channel\n      operationId: getChannelSchedules\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channel\n                - iodevice\n                - location\n                - closestExecutions\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schedule'\n  '/channels/{id}/measurement-logs-csv':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get measurement logs as zipped CSV file.\n      description: \u003e-\n        Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`.\n        Logs ordered by date, descending.\n      tags:\n        - Channels\n      operationId: getChannelMeasurementLogsCsvFile\n      responses:\n        '200':\n          description: Success\n          content:\n            application/zip: {}\n            application/json: {}\n        '400':\n          description: Unsupported channel\n          content:\n            application/zip:\n              schema:\n                title: Channel unsupported function response\n                properties:\n                  status:\n                    type: integer\n                    example: 400\n                  message:\n                    type: string\n                    example: The requested function is not available on this channel\n                type: object\n            application/json:\n              schema:\n                title: Channel unsupported function response\n                properties:\n                  status:\n                    type: integer\n                    example: 400\n                  message:\n                    type: string\n                    example: The requested function is not available on this channel\n                type: object\n  '/channels/{id}/measurement-logs':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get measurement logs.\n      description: \u003e-\n        Supported channel functions: `THERMOMETER` and `HUMIDITYANDTEMPERATURE`.\n        Logs ordered by date, descending.\n      tags:\n        - Channels\n      operationId: getChannelMeasurementLogs\n      parameters:\n        - name: limit\n          in: query\n          description: 'Maximum items count in response, from 1 to 5000'\n          schema:\n            type: integer\n            default: 5000\n        - name: offset\n          in: query\n          description: Pagination offset\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total count of logs for this channel.\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  title: Channel measurement log\n                  properties:\n                    date_timestamp:\n                      type: integer\n                    temperature:\n                      type: number\n                      format: float\n                      example: 21.56\n                      description: Temperature in Celsius\n                    humidity:\n                      type: number\n                      format: float\n                      example: 48.8\n                      description: \u003e-\n                        Humidity percent. Available only if channel function is\n                        `HUMIDITYANDTEMPERATURE`.\n                  type: object\n        '400':\n          description: Unsupoorted channel\n          content:\n            application/json:\n              schema:\n                title: Channel unsupported function response\n                properties:\n                  status:\n                    type: integer\n                    example: 400\n                  message:\n                    type: string\n                    example: The requested function is not available on this channel\n                type: object\n  /channel-groups:\n    get:\n      tags:\n        - Channel Groups\n      summary: Get channels list\n      operationId: getChannelGroups\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channels\n      responses:\n        '200':\n          description: List of channels oroups owned by the current user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChannelGroup'\n    post:\n      summary: Create a new channel group\n      operationId: createChannelGroup\n      tags:\n        - Channel Groups\n      responses:\n        '201':\n          description: Newely created channel group\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelGroup'\n      requestBody:\n        $ref: '#/components/requestBodies/ChannelGroupRequest'\n  '/channel-groups/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get channel group by ID\n      tags:\n        - Channel Groups\n      operationId: getChannelGroup\n      parameters:\n        - name: include\n          in: query\n          required: false\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channels\n                - iodevice\n                - location\n                - state\n                - relationsCount\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelGroup'\n    put:\n      summary: Update channel group\n      tags:\n        - Channel Groups\n      operationId: updateChannelGroup\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChannelGroup'\n      requestBody:\n        $ref: '#/components/requestBodies/ChannelGroupRequest'\n    patch:\n      summary: Execute action on the channel group\n      operationId: executeChannelGroupAction\n      tags:\n        - Channel Groups\n      responses:\n        '204':\n          description: Action has been executed.\n        '400':\n          description: Invalid request.\n          content:\n            application/json:\n              schema:\n                properties:\n                  status:\n                    type: integer\n                    example: 400\n                  message:\n                    type: string\n                    example: Cannot execute requested action on this channel.\n                type: object\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ChannelExecuteActionRequest'\n        description: \u003e-\n          Defines an action to execute on channel group. The `action` key is\n          always required. The rest of the keys are params depending on the\n          chosen action. Read more on [Github\n          Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Actions).\n        required: true\n    delete:\n      summary: Delete Channel Group\n      tags:\n        - Channel Groups\n      operationId: deleteChannelGroup\n      responses:\n        '204':\n          description: Channel Group has been successfully deleted\n  /client-apps:\n    get:\n      tags:\n        - Client Apps\n      summary: Get client apps\n      operationId: getClientApps\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - accessId\n                - connected\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ClientApp'\n  '/client-apps/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    put:\n      summary: Update client app\n      tags:\n        - Client Apps\n      operationId: updateClientApp\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ClientApp'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Client App update request\n              properties:\n                caption:\n                  type: string\n                enabled:\n                  type: boolean\n                accessIdId:\n                  type: integer\n              type: object\n        required: true\n    delete:\n      summary: Delete Client App\n      tags:\n        - Client Apps\n      operationId: deleteClientApp\n      responses:\n        '204':\n          description: Success\n  /direct-links:\n    get:\n      tags:\n        - Direct Links\n      summary: Get Direct Links list\n      operationId: getDirectLinks\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - subject\n        - name: subjectType\n          in: query\n          description: Filter direct links by subjectType and subjectId (must go together).\n          schema:\n            $ref: '#/components/schemas/ActionableSubjectTypeEnum'\n        - name: subjectId\n          in: query\n          description: Filter direct links by subjectType and subjectId (must go together).\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: List of Direct Links owned by the current user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DirectLink'\n    post:\n      summary: Create a new Direct Link\n      tags:\n        - Direct Links\n      operationId: createDirectLink\n      responses:\n        '201':\n          description: Newely created DirectLink\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DirectLink'\n      requestBody:\n        $ref: '#/components/requestBodies/DirectLinkRequest'\n  /direct-links/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get Direct Link\n      tags:\n        - Direct Links\n      operationId: getDirectLink\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - subject\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DirectLink'\n    put:\n      summary: Update Direct Link\n      tags: [Direct Links]\n      operationId: updateDirectLink\n      requestBody:\n        $ref: '#/components/requestBodies/DirectLinkRequest'\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DirectLink'\n    delete:\n      summary: Delete Direct Link\n      tags: [Direct Links]\n      operationId: deleteDirectLink\n      responses:\n        '204':\n          description: Success\n  /direct-links/{id}/audit:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get Direct Link audit\n      tags:\n        - Direct Links\n      operationId: getDirectLinkAudit\n      parameters:\n        - name: page\n          in: query\n          description: Page number, starting from 1.\n          schema:\n            type: integer\n        - name: pageSize\n          in: query\n          description: Page size, default 10.\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Success\n          headers:\n            X-Total-Count:\n              description: Total number of audit entries for this Direct Link.\n              schema:\n                type: integer\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AuditEntry'\n  /iodevices:\n    get:\n      tags:\n        - IO Devices\n      summary: Get IO Devices\n      operationId: getIoDevices\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channels\n                - location\n                - originalLocation\n                - connected\n                - schedules\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Device'\n  '/iodevices/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        description: IO Device's identifier or GUID\n        schema:\n          oneOf:\n            - type: integer\n              description: IO Device's identifier\n              example: 123\n            - type: string\n              description: IO Device's GUID\n              example: 'A7A19E1-09E8-68B4-3A2F-BD304E563A6A'\n    get:\n      summary: Get IO Device\n      tags:\n        - IO Devices\n      operationId: getIoDevice\n      parameters:\n        - name: include\n          in: query\n          required: false\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channels\n                - location\n                - originalLocation\n                - connected\n                - schedules\n                - accessids\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n    put:\n      summary: Update IO Device\n      tags:\n        - IO Devices\n      operationId: updateIoDevice\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Device'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: IO Device update request\n              properties:\n                comment:\n                  type: string\n                enabled:\n                  type: boolean\n                locationId:\n                  type: integer\n              type: object\n        required: true\n    delete:\n      summary: Delete IO Device\n      tags:\n        - IO Devices\n      operationId: deleteIoDevice\n      responses:\n        '204':\n          description: Success\n  '/iodevices/{id}/channels':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get Channels that belong to IO Device\n      tags:\n        - IO Devices\n      operationId: getIoDeviceChannels\n      parameters:\n        - name: include\n          in: query\n          required: false\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - iodevice\n                - location\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Channel'\n  /locations:\n    get:\n      tags:\n        - Locations\n      summary: Get locations list\n      operationId: getLocations\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          required: false\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channels\n                - iodevices\n                - accessids\n                - channelGroups\n                - password\n      responses:\n        '200':\n          description: List of locations owned by the current user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Location'\n    post:\n      summary: Create a new location\n      operationId: createLocation\n      tags:\n        - Locations\n      responses:\n        '201':\n          description: Newely created location with automatic name\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n  '/locations/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: include\n        in: query\n        description: Specify what extra fields to include in the response.\n        required: false\n        style: form\n        schema:\n          type: array\n          items:\n            type: string\n            enum:\n              - channels\n              - iodevices\n              - accessids\n              - channelGroups\n              - password\n    get:\n      summary: Get location by ID\n      tags:\n        - Locations\n      operationId: getLocation\n      responses:\n        '200':\n          description: Get location\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n    put:\n      summary: Update location\n      tags:\n        - Locations\n      operationId: updateLocation\n      responses:\n        '200':\n          description: Definition generated from Swagger Inspector\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Location'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Location update request\n              properties:\n                enabled:\n                  type: boolean\n                caption:\n                  type: string\n                password:\n                  type: string\n                  description: Provide new password if you want to change it.\n                accessIdsIds:\n                  type: array\n                  items:\n                    type: integer\n                  description: Access Identifiers identifiers to assign to this location.\n              type: object\n        required: true\n    delete:\n      summary: Delete location\n      tags:\n        - Locations\n      operationId: deleteLocation\n      responses:\n        '204':\n          description: Location has been successfully deleted\n  /server-status:\n    get:\n      tags:\n        - Server\n      summary: Get the SUPLA Server status\n      operationId: getSuplaServerStatus\n      security: []\n      responses:\n        '200':\n          description: Supla Server is alive\n        '503':\n          description: SUPLA Server is down\n  /server-info:\n    get:\n      tags:\n        - Server\n      summary: Get server info\n      operationId: getServerInfo\n      security: []\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: Server Info\n                properties:\n                  address:\n                    type: string\n                    example: svr1.supla.org\n                    description: SUPLA Server address (to be used in smartphones)\n                  time:\n                    type: string\n                    format: date-time\n                    description: Current server time\n                  timezone:\n                    properties:\n                      name:\n                        type: string\n                        example: UTC\n                      offset:\n                        type: integer\n                        description: Timezone offset in minutes\n                    type: object\n                  authenticated:\n                    type: boolean\n                  username:\n                    type: string\n                    example: supler@supla.org\n                    description: Present only if `authenticated=true`\n                  cloudVersion:\n                    type: string\n                    example: 2.2.0\n                  apiVersion:\n                    type: string\n                    example: 2.2.0\n                  supportedApiVersions:\n                    type: array\n                    example:\n                      - 2.0.0\n                      - 2.1.0\n                      - 2.2.0\n                    items:\n                      type: string\n                type: object\n  /token-info:\n    get:\n      tags: [Server]\n      summary: Returns information about used access token\n      operationId: getTokenInfo\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                properties:\n                  userShortUniqueId: {type: string}\n                  scope: {type: string}\n                  expiresAt: {type: integer}\n  /schedules:\n    get:\n      tags:\n        - Schedules\n      summary: Get schedules list\n      operationId: getSchedules\n      parameters:\n        - name: include\n          in: query\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channel\n                - iodevice\n                - location\n                - closestExecutions\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Schedule'\n    post:\n      summary: Create a new schedule\n      operationId: createSchedule\n      tags:\n        - Schedules\n      responses:\n        '201':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schedule'\n      requestBody:\n        $ref: '#/components/requestBodies/ScheduleRequest'\n    patch:\n      summary: Enable schedules\n      operationId: enableSchedules\n      tags:\n        - Schedules\n      responses:\n        '204':\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Schedules enable request\n              properties:\n                enable:\n                  type: array\n                  description: Array of schedule identifiers to enable\n                  items:\n                    type: integer\n              type: object\n        required: true\n  '/schedules/{id}':\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get Schedule\n      tags:\n        - Schedules\n      operationId: getSchedule\n      parameters:\n        - name: include\n          in: query\n          required: false\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - channel\n                - iodevice\n                - location\n                - closestExecutions\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schedule'\n    put:\n      summary: Update schedule\n      operationId: updateSchedule\n      tags:\n        - Schedules\n      parameters:\n        - name: enable\n          in: query\n          description: Set to `true` to enable the schedule after saving.\n          schema:\n            type: boolean\n            enum:\n              - true\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Schedule'\n      requestBody:\n        $ref: '#/components/requestBodies/ScheduleRequest'\n    delete:\n      summary: Delete Schedule\n      tags:\n        - Schedules\n      operationId: deleteSchedule\n      responses:\n        '204':\n          description: Success\n  /user-icons:\n    get:\n      tags: [User Icons]\n      summary: Get user icons\n      operationId: getUserIcons\n      parameters:\n        - name: include\n          in: query\n          required: false\n          description: Specify what extra fields to include in the response.\n          style: form\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - images\n        - name: function\n          in: query\n          required: false\n          description: Return only icons for given function\n          style: form\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/ChannelFunctionEnumNames'\n        - name: ids\n          in: query\n          required: false\n          description: Return only icons with given identifiers\n          style: form\n          schema:\n            type: array\n            items:\n              type: integer\n      responses:\n        '200':\n          description: List of user icons owned by the current user.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/UserIcon'\n    post:\n      summary: Create a new User Icon\n      tags: [User Icons]\n      operationId: createUserIcon\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              description: Multipart request with files to save as a new icon. The number of images required to be sent with the request is determined by the chosen function identifier (it must match the `function.possibleVisualStates` count). Each image represents the respective visual state from `function.possibleVisualStates` array.\n              properties:\n                function:\n                  $ref: '#/components/schemas/ChannelFunctionEnumNames'\n                sourceIcon:\n                  type: integer\n                  description: ID of an existing user icon to replace with these new files. Optional.\n                image1:\n                  type: string\n                  format: binary\n                image2:\n                  type: string\n                  format: binary\n                image3:\n                  type: string\n                  format: binary\n                image4:\n                  type: string\n                  format: binary\n      responses:\n        '201':\n          description: Newely created UserIcon\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AccessIdentifier'\n  /user-icons/{id}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n    delete:\n      summary: Delete User Icon\n      tags: [User Icons]\n      operationId: deleteUserIcon\n      responses:\n        '204':\n          description: User Icon has been successfully deleted\n  /user-icons/{id}/{imageIndex}:\n    parameters:\n      - name: id\n        in: path\n        required: true\n        schema:\n          type: integer\n      - name: imageIndex\n        in: path\n        required: true\n        schema:\n          type: integer\n    get:\n      summary: Get User Icon image at specified index\n      tags: [User Icons]\n      responses:\n        '200':\n          description: User Icon image\n          content:\n            image/*:\n              schema:\n                type: string\n                format: binary\n  /users/current:\n    get:\n      tags:\n        - Users\n      summary: Get current user\n      operationId: getCurrentUser\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                title: User data\n                properties:\n                  id:\n                    type: integer\n                  shortUniqueId: {type: string}\n                  email:\n                    type: string\n                    format: email\n                  timezone:\n                    type: string\n                    example: Europe/Warsaw\n                  clientsRegistrationEnabled:\n                    type: string\n                    format: date-time\n                  ioDevicesRegistrationEnabled:\n                    type: string\n                    format: date-time\n                type: object\n    patch:\n      tags:\n        - Users\n      summary: Update current user\n      operationId: updateCurrentUser\n      responses:\n        '200':\n          description: Success\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: User update request\n              properties:\n                action:\n                  type: string\n                  description: \u003e-\n                    The `change:userTimezone` requires to provide also a\n                    `timezone` value in the request. The `change:password`\n                    requires to provide also a `newPassword` and `oldPassword`\n                    in the request.\n                  enum:\n                    - 'change:clientsRegistrationEnabled'\n                    - 'change:ioDevicesRegistrationEnabled'\n                    - 'change:userTimezone'\n                    - 'change:password'\n                    - 'agree:rules'\n                    - 'agree:cookies'\n              type: object\n        required: true\nsecurity:\n  - BearerAuth: []\n  - OAuth2: []\ncomponents:\n  schemas:\n    AccessIdentifier:\n      properties:\n        id:\n          type: integer\n          description: Access Identifier identifier\n        caption:\n          type: string\n          description: Location caption\n        enabled:\n          type: boolean\n          description: '`true` if the location is enabled, `false` otherwise'\n        locationsIds:\n          type: array\n          items:\n            type: integer\n          description: array containing the location idenfifiers assigned to this access ID\n        clientAppsIds:\n          type: array\n          items:\n            type: integer\n          description: \u003e-\n            array containing the client apps idenfifiers assigned to this access\n            ID\n        locations:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/Location'\n        clientApps:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/ClientApp'\n      type: object\n    AuditEntry:\n      properties:\n        id: {type: integer}\n        event: {type: integer}\n        createdAt: {type: string, format: date-time}\n        ipv4: {type: integer, format: int64}\n        intParam: {type: integer}\n        textParam: {type: string}\n    ActionableSubjectTypeEnum:\n      type: string\n      enum:\n        - channel\n        - channelGroup\n    ClientApp:\n      properties:\n        id:\n          type: integer\n          description: Client application identifier\n        name:\n          type: string\n        caption:\n          type: string\n        enabled:\n          type: boolean\n        regIpv4:\n          type: integer\n          format: int64\n        regDate:\n          type: string\n          format: date-time\n        lastAccessIpv4:\n          type: integer\n          format: int64\n        lastAccessDate:\n          type: string\n          format: date-time\n        softwareVersion:\n          type: string\n        protocolVersion:\n          type: integer\n        accessIdId:\n          type: integer\n        connected:\n          type: boolean\n        accessId:\n          $ref: '#/components/schemas/AccessIdentifier'\n      type: object\n    Channel:\n      properties:\n        id:\n          type: integer\n          description: Channel identifier\n        channelNumber:\n          type: integer\n          description: Channel ordinal number in its IO Device\n        caption:\n          type: string\n          description: Channel caption\n        type:\n          $ref: '#/components/schemas/ChannelType'\n        function:\n          $ref: '#/components/schemas/ChannelFunction'\n        param1:\n          $ref: '#/components/schemas/ChannelParam'\n        param2:\n          $ref: '#/components/schemas/ChannelParam'\n        param3:\n          $ref: '#/components/schemas/ChannelParam'\n        textParam1:\n          type: string\n        textParam2:\n          type: string\n        textParam3:\n          type: string\n        altIcon:\n          type: integer\n          description: \u003e-\n            Chosen alternative icon idenifier. Should not be greater than\n            `funciton.maxAlternativeIconIndex`\n        hidden:\n          type: boolean\n          description: Whether this channel is shown on client apps or not\n        inheritedLocation:\n          type: boolean\n          description: \u003e-\n            Whether this channel inherits its IO Device's location (`true`) or\n            not (`false`)\n        iodeviceId:\n          type: integer\n        locationId:\n          type: integer\n        functionId:\n          type: integer\n          example: 60\n        typeId:\n          type: integer\n          example: 1000\n        userIconId:\n          type: integer\n          example: 100\n        iodevice:\n          $ref: '#/components/schemas/Device'\n        location:\n          $ref: '#/components/schemas/Location'\n        connected:\n          type: boolean\n        state:\n          $ref: '#/components/schemas/ChannelState'\n        supportedFunctions:\n          type: array\n          items:\n            $ref: '#/components/schemas/ChannelFunction'\n      type: object\n    ChannelState:\n      description: \u003e-\n        The channel's state. The value and the format depends on the channel's function.\n        Read more on [Github Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-states).\n      oneOf:\n        - $ref: '#/components/schemas/BrightnessState'\n        - $ref: '#/components/schemas/ColorAndBrightnessState'\n        - $ref: '#/components/schemas/ColorState'\n        - $ref: '#/components/schemas/DepthState'\n        - $ref: '#/components/schemas/DistanceState'\n        - $ref: '#/components/schemas/DoubleState'\n        - $ref: '#/components/schemas/ElectricityMeterState'\n        - $ref: '#/components/schemas/HumidityState'\n        - $ref: '#/components/schemas/ImpulseCounterState'\n        - $ref: '#/components/schemas/OnState'\n        - $ref: '#/components/schemas/HiState'\n        - $ref: '#/components/schemas/PartialOpenState'\n        - $ref: '#/components/schemas/RollerShutterState'\n        - $ref: '#/components/schemas/TemperatureAndHumidityState'\n        - $ref: '#/components/schemas/TemperatureState'\n    BrightnessState:\n      properties:\n        connected:\n          type: boolean\n        brightness:\n          type: integer\n          description: \u003e-\n            `brightness` contains current dimmer brightness value in percent, integer from 0 to 100\n          minimum: 0\n          maximum: 100\n      required:\n        - connected\n    ColorAndBrightnessState:\n      properties:\n        connected:\n          type: boolean\n        brightness:\n          type: integer\n          description: \u003e-\n            `brightness` contains current dimmer brightness value in percent, integer from 0 to 100\n          minimum: 0\n          maximum: 100\n        color_brightness:\n          type: integer\n          description: \u003e-\n            `color_brightness` is a color brightness in percent, integer from 0 to 100\n          minimum: 0\n          maximum: 100\n        color:\n          type: string\n          description: \u003e-\n            `color` contains the integer (hex) value of a current color, ranging from `0x000001` to `0xFFFFFF`\n      required:\n        - connected\n    ColorState:\n      properties:\n        connected:\n          type: boolean\n        color_brightness:\n          type: integer\n          description: \u003e-\n            `color_brightness` is a color brightness in percent, integer from 0 to 100\n          minimum: 0\n          maximum: 100\n        color:\n          type: string\n          description: \u003e-\n            `color` contains the integer (hex) value of a current color, ranging from `0x000001` to `0xFFFFFF`\n      required:\n        - connected\n    DepthState:\n      properties:\n        connected:\n          type: boolean\n        depth:\n          type: number\n          description: \u003e-\n            `depth` contains current sensor value\n      required:\n        - connected\n    DistanceState:\n      properties:\n        connected:\n          type: boolean\n        distance:\n          type: number\n          description: \u003e-\n            `distance` contains current sensor value\n      required:\n        - connected\n    DoubleState:\n      properties:\n        connected:\n          type: boolean\n        value:\n          type: number\n          description: \u003e-\n            `value` contains current sensor value\n    ElectricityMeterState:\n      properties:\n        connected: {type: boolean}\n        support:\n          type: number\n          description: \u003e-\n            A bitmask indicating which measurements are supported by the electricity meter.\n            See https://github.com/SUPLA/supla-cloud/blob/master/src/SuplaBundle/Enums/ElectricityMeterSupportBits.php\n            for more info. All not supported measurements will not be present in the response.\n        totalCost: {type: number}\n        pricePerUnit: {type: number}\n        currency: {type: string}\n        phases:\n          type: array\n          items:\n            $ref: '#/components/schemas/ElectricityMeterStatePhase'\n      required:\n        - connected\n    ElectricityMeterStatePhase:\n      properties:\n        number: {type: number}\n        frequency: {type: number}\n        voltage: {type: number}\n        current: {type: number}\n        powerActive: {type: number}\n        powerReactive: {type: number}\n        powerApparent: {type: number}\n        powerFactor: {type: number}\n        phaseAngle: {type: number}\n        totalForwardActiveEnergy: {type: number}\n        totalReverseActiveEnergy: {type: number}\n        totalForwardReactiveEnergy: {type: number}\n        totalReverseReactiveEnergy: {type: number}\n    HumidityState:\n      properties:\n        connected:\n          type: boolean\n        humidity:\n          type: number\n          description: \u003e-\n            `humidity` contains current value of humidity provided by the sensor (including possibly configured delta adjustment), in percent; possible values from 0 to 100\n          minimum: 0\n          maximum: 100\n      required:\n        - connected\n    ImpulseCounterState:\n      properties:\n        connected: {type: boolean}\n        totalCost: {type: number}\n        pricePerUnit: {type: number}\n        counter: {type: number}\n        calculatedValue: {type: number}\n        currency: {type: string}\n        unit: {type: string}\n      required:\n        - connected\n    OnState:\n      properties:\n        connected:\n          type: boolean\n        on:\n          type: boolean\n          description: \u003e-\n            `on` is either `true` or `false` depending on the switch state\n      required:\n        - connected\n    HiState:\n      properties:\n        connected:\n          type: boolean\n        hi:\n          type: boolean\n          description: \u003e-\n            `hi` is either `true` or `false` depending on sensor state\n      required:\n        - connected\n    PartialOpenState:\n      properties:\n        connected:\n          type: boolean\n        hi:\n          type: boolean\n          description: \u003e-\n            `hi` is either `true` or `false` depending on sensor state\n        partial_hi:\n          type: boolean\n          description: \u003e-\n            `partial_hi` is either `true` or `false` depending on paired secondary opening sensor state\n      required:\n        - connected\n    RollerShutterState:\n      properties:\n        connected:\n          type: boolean\n        hi:\n          type: boolean\n          description: \u003e-\n            `hi` is either `true` or `false` depending on sensor state\n        is_calibrating:\n          type: boolean\n          description: \u003e-\n            `is_calibrating` is `true` if the roller shutter has calibration in progres or if it hasn't been finished for whatever reason\n        shut:\n          type: integer\n          description: \u003e-\n            `shut` is provided regardles off `is_calibrating` state and is an integer from 0 to 100, meaning the percantage of rolette being closed\n          minimum: 0\n          maximum: 100\n      required:\n        - connected\n    TemperatureAndHumidityState:\n      properties:\n        connected:\n          type: boolean\n        temperature:\n          type: number\n          description: \u003e-\n            `temperature` contains current value of temperature provided by the sensor (including possibly configured delta adjustment), in Celsius\n        humidity:\n          type: number\n          description: \u003e-\n            `humidity` contains current value of humidity provided by the sensor (including possibly configured delta adjustment), in percent; possible values from 0 to 100\n          minimum: 0\n          maximum: 100\n      required:\n        - connected\n    TemperatureState:\n      properties:\n        connected:\n          type: boolean\n        temperature:\n          type: number\n          description: \u003e-\n            `temperature` contains current value of temperature provided by the sensor (including possibly configured delta adjustment), in Celsius\n      required:\n        - connected\n    ChannelGroup:\n      properties:\n        id:\n          type: integer\n          description: Channel group identifier\n          example: 1\n        hidden:\n          type: boolean\n          description: Whether this channel group is shown on client apps or not\n        caption:\n          type: string\n          description: Channel caption\n        function:\n          $ref: '#/components/schemas/ChannelFunction'\n        functionId:\n          type: integer\n          example: 60\n        userIconId:\n          type: integer\n        locationId:\n          type: integer\n        location:\n          $ref: '#/components/schemas/Location'\n        channelIds:\n          type: array\n          items:\n            type: integer\n        channels:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/Channel'\n        altIcon:\n          type: integer\n          description: \u003e-\n            Chosen alternative icon idenifier. Should not be greater than\n            `funciton.maxAlternativeIconIndex`\n      type: object\n    ChannelGroupRequest:\n      required:\n        - channelIds\n      properties:\n        caption:\n          type: string\n        altIcon:\n          type: integer\n        userIconId:\n          type: integer\n        hidden:\n          type: boolean\n        locationId:\n          type: integer\n        channelIds:\n          type: array\n          items:\n            type: integer\n      type: object\n    ChannelType:\n      properties:\n        id:\n          type: integer\n          enum:\n            - 1000\n            - 1010\n            - 1020\n            - 1500\n            - 2000\n            - 2010\n            - 2020\n            - 2900\n            - 3000\n            - 3010\n            - 3022\n            - 3020\n            - 3032\n            - 3030\n            - 3034\n            - 3036\n            - 3038\n            - 3042\n            - 3044\n            - 3048\n            - 3050\n            - 3100\n            - 4000\n            - 4010\n            - 4020\n          description: Channel type identifier\n        name:\n          type: string\n          enum:\n            - SENSORNO\n            - SENSORNC\n            - DISTANCESENSOR\n            - CALLBUTTON\n            - RELAYHFD4\n            - RELAYG5LA1A\n            - RELAY2XG5LA1A\n            - RELAY\n            - THERMOMETERDS18B20\n            - DHT11\n            - DHT21\n            - DHT22\n            - AM2301\n            - AM2302\n            - THERMOMETER\n            - HUMIDITYSENSOR\n            - HUMIDITYANDTEMPSENSOR\n            - WINDSENSOR\n            - PRESSURESENSOR\n            - RAINSENSOR\n            - WEIGHTSENSOR\n            - WEATHER_STATION\n            - DIMMER\n            - RGBLEDCONTROLLER\n            - DIMMERANDRGBLED\n        caption:\n          type: string\n          example: Sensor (normal open)\n        output:\n          type: boolean\n          example: false\n          description: \u003e-\n            Whether the channel is output type (i.e. can take action) or input\n            (i.e. provide data)\n      type: object\n    ChannelFunction:\n      properties:\n        id:\n          type: integer\n          example: 60\n          enum:\n            - 0\n            - 10\n            - 20\n            - 30\n            - 40\n            - 42\n            - 45\n            - 50\n            - 60\n            - 70\n            - 80\n            - 90\n            - 100\n            - 110\n            - 120\n            - 130\n            - 140\n            - 180\n            - 190\n            - 200\n            - 210\n            - 220\n            - 230\n            - 240\n            - 250\n            - 260\n            - 270\n            - 280\n            - 290\n            - 300\n        name:\n          $ref: '#/components/schemas/ChannelFunctionEnumNames'\n        caption:\n          type: string\n          example: Gate opening sensor\n        maxAlternativeIconIndex:\n          type: integer\n        possibleActions:\n          type: array\n          description: What can you with with this channel?\n          items:\n            $ref: '#/components/schemas/ChannelFunctionAction'\n        possibleVisualStates:\n          type: array\n          description: Possible visual states of channel with this function. Ordered.\n          items:\n            type: string\n            enum:\n              - opened\n              - closed\n              - partially_closed\n              - default\n              - empty\n              - full\n              - revealed\n              - shut\n              - on\n              - off\n              - rgb_on_dim_on\n              - rgb_on_dim_off\n              - rgb_off_dim_off\n              - rgb_off_dim_on\n      type: object\n    ChannelFunctionEnumNames:\n      type: string\n      example: OPENINGSENSOR_GATE\n      enum:\n        - NONE\n        - CONTROLLINGTHEGATEWAYLOCK\n        - CONTROLLINGTHEGATE\n        - CONTROLLINGTHEGARAGEDOOR\n        - THERMOMETER\n        - HUMIDITY\n        - HUMIDITYANDTEMPERATURE\n        - OPENINGSENSOR_GATEWAY\n        - OPENINGSENSOR_GATE\n        - OPENINGSENSOR_GARAGEDOOR\n        - NOLIQUIDSENSOR\n        - CONTROLLINGTHEDOORLOCK\n        - OPENINGSENSOR_DOOR\n        - CONTROLLINGTHEROLLERSHUTTER\n        - OPENINGSENSOR_ROLLERSHUTTER\n        - POWERSWITCH\n        - LIGHTSWITCH\n        - DIMMER\n        - RGBLIGHTING\n        - DIMMERANDRGBLIGHTING\n        - DEPTHSENSOR\n        - DISTANCESENSOR\n        - OPENINGSENSOR_WINDOW\n        - MAILSENSOR\n        - WINDSENSOR\n        - PRESSURESENSOR\n        - RAINSENSOR\n        - WEIGHTSENSOR\n        - WEATHER_STATION\n        - STAIRCASETIMER\n    ChannelFunctionAction:\n      properties:\n        id:\n          type: integer\n          enum:\n            - 10\n            - 20\n            - 30\n            - 40\n            - 50\n            - 60\n            - 70\n            - 80\n            - 90\n            - 100\n        name:\n          $ref: '#/components/schemas/ChannelFunctionActionEnum'\n        caption:\n          type: string\n      type: object\n    ChannelFunctionActionEnum:\n      type: string\n      enum:\n        - OPEN\n        - CLOSE\n        - SHUT\n        - REVEAL\n        - REVEAL_PARTIALLY\n        - TURN_ON\n        - TURN_OFF\n        - SET_RGBW_PARAMETERS\n        - OPEN_CLOSE\n        - STOP\n        - TOGGLE\n        - READ\n    ChannelExecuteActionRequest:\n      required:\n        - action\n      properties:\n        action:\n          $ref: '#/components/schemas/ChannelFunctionActionEnum'\n        percentage:\n          type: integer\n          example: 40\n        color:\n          type: string\n          example: '0x00FF00'\n        color_brightness:\n          type: integer\n        brightness:\n          type: integer\n      type: object\n    ChannelParam:\n      type: integer\n      description: \u003e-\n        Configuration of the channel behavior. Value meaning depends on the\n        chosen channel function. See more details on [Github\n        Wiki](https://github.com/SUPLA/supla-cloud/wiki/Channel-Functions-parameters).\n    Device:\n      properties:\n        id:\n          type: integer\n          description: Device identifier\n        name:\n          type: string\n        enabled:\n          type: boolean\n        comment:\n          type: string\n        regDate:\n          type: string\n          format: date-time\n        regIpv4:\n          type: integer\n          format: int64\n        lastConnected:\n          type: string\n          format: date-time\n        lastIpv4:\n          type: integer\n          format: int64\n        softwareVersion:\n          type: string\n        gUIDString:\n          type: string\n        locationId:\n          type: integer\n        originalLocationId:\n          type: integer\n        channelsIds:\n          type: array\n          items:\n            type: integer\n        connected:\n          type: boolean\n        location:\n          $ref: '#/components/schemas/Location'\n        originalLocation:\n          $ref: '#/components/schemas/Location'\n        channels:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/Channel'\n        schedules:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/Schedule'\n      type: object\n    DirectLink:\n      properties:\n        id:\n          type: integer\n          description: Direct Link identifier\n          example: 1\n        caption:\n          type: string\n          description: Direct Link caption\n        executionsLimit:\n          type: integer\n          example: 10\n        lastUsed:\n          type: string\n          format: date-time\n        lastIpv4:\n          type: integer\n          format: int64\n        enabled: {type: boolean}\n        disableHttpGet: {type: boolean}\n        activeDateRange:\n          type: object\n          properties:\n            dateStart:\n              type: string\n              format: date-time\n            dateEnd:\n              type: string\n              format: date-time\n        slug: {type: string, description: Returned only immediately after creation}\n        url: {type: string, description: Returned only immediately after creation}\n        subjectId: {type: integer}\n        subjectType: {$ref: '#/components/schemas/ActionableSubjectTypeEnum'}\n        allowedActions: {type: array, items: {$ref: '#/components/schemas/ChannelFunctionActionEnum'}}\n        active: {type: boolean}\n        inactiveReason: {type: string, description: Returned only if active is `false`}\n      type: object\n    DirectLinkRequest:\n      properties:\n        subjectId: {type: integer}\n        subjectType: {$ref: '#/components/schemas/ActionableSubjectTypeEnum'}\n        allowedActions: {type: array, items: {$ref: '#/components/schemas/ChannelFunctionActionEnum'}}\n        activeDateRange:\n          type: object\n          properties:\n            dateStart:\n              type: string\n              format: date-time\n            dateEnd:\n              type: string\n              format: date-time\n        executionsLimit:\n          type: integer\n          example: 10\n        caption: {type: string}\n        enabled: {type: boolean}\n        disableHttpGet: {type: boolean}\n    Location:\n      properties:\n        id:\n          type: integer\n          description: Location identifier\n        caption:\n          type: string\n          description: Location caption\n        enabled:\n          type: boolean\n          description: '`true` if the location is enabled, `false` otherwise'\n        iodevicesIds:\n          type: array\n          items:\n            type: integer\n          description: \u003e-\n            array containing the IO Devices identifiers assigned to this\n            location\n        channelGroupsIds:\n          type: array\n          items:\n            type: integer\n          description: \u003e-\n            array containing the Channel groups identifiers assigned to this\n            location\n        channelsIds:\n          type: array\n          items:\n            type: integer\n          description: \u003e-\n            array containing the Channels identifiers expicitely assigned to\n            this location\n        accessIdsIds:\n          type: array\n          items:\n            type: integer\n          description: \u003e-\n            array containing the Access Identifiers identifiers assigned to this\n            location\n        password:\n          type: string\n          description: \u003e-\n            Location password (plain text). Returned only if requested by the\n            `include` parameter.\n        iodevices:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/Device'\n        channelGroups:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          example: []\n          items:\n            $ref: '#/components/schemas/ChannelGroup'\n        accessIds:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/AccessIdentifier'\n        channels:\n          type: array\n          description: Returned only if requested by the `include` parameter.\n          items:\n            $ref: '#/components/schemas/Channel'\n      type: object\n    Schedule:\n      properties:\n        id:\n          type: integer\n          description: Schedule identifier\n        timeExpression:\n          type: string\n          description: \u003e-\n            Schedule time expression in crontab notation (with some custom\n            additions).\n          example: '*/5 * * * *'\n        action:\n          $ref: '#/components/schemas/ChannelFunctionAction'\n        actionParam:\n          example: {}\n          description: Depends on the action.\n        mode:\n          type: string\n          enum:\n            - minutely\n            - hourly\n            - daily\n            - once\n        dateStart:\n          type: string\n          format: date-time\n        dateEnd:\n          type: string\n          format: date-time\n        enabled:\n          type: boolean\n        caption:\n          type: string\n        retry:\n          type: boolean\n        channelId:\n          type: integer\n        actionId:\n          type: integer\n        channel:\n          $ref: '#/components/schemas/Channel'\n        closestExecutions:\n          type: array\n          description: \u003e-\n            Returned only if requested by the `include` parameter. Contains two\n            arrays of maximum 3 closest past and future executions.\n          items:\n            properties:\n              past:\n                type: array\n                items:\n                  properties:\n                    plannedTimestamp:\n                      type: string\n                      format: date-time\n                    resultTimestamp:\n                      type: string\n                      format: date-time\n                    failed:\n                      type: boolean\n                      example: false\n                    result:\n                      properties:\n                        caption:\n                          type: string\n                          example: Successful\n                      type: object\n                  type: object\n              future:\n                type: array\n                items:\n                  properties:\n                    plannedTimestamp:\n                      type: string\n                      format: date-time\n                  type: object\n            type: object\n      type: object\n    ScheduleRequest:\n      required:\n        - channelId\n        - actionId\n        - mode\n        - timeExpression\n      properties:\n        channelId:\n          type: integer\n        actionId:\n          type: integer\n        mode:\n          type: string\n          enum:\n            - once\n            - minutely\n            - daily\n            - hourly\n        timeExpression:\n          type: string\n          description: \u003e-\n            Schedule time expression in crontab notation (with some custom\n            additions).\n        actionParam:\n          example: {}\n        dateStart:\n          type: string\n          format: date-time\n        dateEnd:\n          type: string\n          format: date-time\n        caption:\n          type: string\n        retry:\n          type: boolean\n      type: object\n    UserIcon:\n      properties:\n        id:\n          type: integer\n          description: Schedule identifier\n        images:\n          type: array\n          description: \u003e-\n            Returned only if requested by the `include` parameter. Array contains\n            images blobs encoded with Base64.\n          items:\n            type: string\n            format: base64\n  parameters:\n    AccessIdIncludes:\n      name: include\n      in: query\n      description: Specify what extra fields to include in the response.\n      required: false\n      style: form\n      schema:\n        type: array\n        items:\n          type: string\n          enum:\n            - locations\n            - clientApps\n            - password\n  requestBodies:\n    ChannelGroupRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ChannelGroupRequest'\n      required: true\n    DirectLinkRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/DirectLinkRequest'\n    ScheduleRequest:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ScheduleRequest'\n      required: true\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n    OAuth2:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: 'https://cloud.supla.org/oauth/v2/auth'\n          tokenUrl: 'https://cloud.supla.org/oauth/v2/token'\n          scopes:\n            accessids_r: Access Identifiers (Read)\n            accessids_rw: Access Identifiers (Read/Write)\n            account_r: User Account (Read)\n            account_rw: User Account (Read/Write)\n            channels_r: Channels (Read)\n            channels_rw: Channels (Read/Write)\n            channels_ea: Channels (Execute Actions)\n            channels_files: Channels (download files, e.g. icons, measurement logs)\n            channelgroups_r: Channel Groups (Read)\n            channelgroups_rw: Channel Groups (Read/Write)\n            channelgroups_ea: Channel Groups (Execute Actions)\n            clientapps_r: Client Apps (Read)\n            clientapps_rw: Client Apps (Read/Write)\n            directlinks_r: Direct Links (Read)\n            directlinks_rw: Direct Links (Read/Write)\n            iodevices_r: IO Devices (Read)\n            iodevices_rw: IO Devices (Read/Write)\n            locations_r: Locations (Read)\n            locations_rw: Locations (Read/Write)\n            schedules_r: Schedules (Read)\n            schedules_rw: Schedules (Read/Write)\n            offline_access: Request refresh token\n"
		}
	},
	"Error": "parse: parse spec: paths: /accessids/{id}: get: operation \"getAccessIdentifier\": responses: 200: content: \"application/json\": schema: parse schema: reference \"#/components/schemas/AccessIdentifier\": parse schema: locations: parse schema: item: parse schema: reference \"#/components/schemas/Location\": parse schema: channelGroups: parse schema: item: parse schema: reference \"#/components/schemas/ChannelGroup\": parse schema: channels: parse schema: item: parse schema: reference \"#/components/schemas/Channel\": parse schema: function: parse schema: reference \"#/components/schemas/ChannelFunction\": parse schema: possibleVisualStates: parse schema: item: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}