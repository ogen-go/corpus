{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/postmanlabs/space-camp-apifirst"
		},
		"file": {
			"name": "08-bookshop-better-errors.openapi.yaml",
			"size": 0,
			"path": "openapi-books/08-bookshop-better-errors.openapi.yaml",
			"byteSize": 10509,
			"content": "# Defining reusable error responses\nopenapi: 3.0.3\n\ninfo:\n  title: Bookshop\n  version: \"1.0\"\n  description: |\n    ![OpenAPI Logo](https://avatars3.githubusercontent.com/u/16343502?v=3\u0026s=100)\n\n    A demo _API_ to **discover** the **_[OpenAPI Specification](https://www.openapis.org/)_**.\n\nservers:\n  - description: The base path for all resources\n    url: /bookshop/v1\n\npaths:\n  /books:\n    get:\n      summary: Search books\n      operationId: searchBooks\n      parameters:\n        - name: author\n          in: query\n          required: false\n          description: \"Complete or partial author name, , can be typed phonetically\"\n          schema:\n            $ref: \"#/components/schemas/QueryParameterString\"\n        - $ref: \"#/components/parameters/Title\"\n      responses:\n        \"200\":\n          description: Books matching search parameters\n          content:\n            application/json:\n                schema:\n                  $ref: \"#/components/schemas/Books\"\n                examples:\n                  SomeBooks:\n                    summary: A few books found\n                    value:\n                      data:\n                        - id: \"9781617295102\"\n                          isbn: \"9781617295102\"\n                          title: \"The Design of Web APIs\"\n                          price: \n                            value: 44.99\n                            currency: \"USD\"\n                          authors:\n                              - id: \"12345\"\n                                firstName: \"Arnaud\"\n                                lastName: \"Lauret\"\n                          stars: 4.4\n                        - id: \" 9780137355631\"\n                          isbn: \" 9780137355631\"\n                          title: \"Principles of Web API Design\"\n                          price: \n                            value: 44.99\n                            currency: \"USD\"\n                          authors:\n                              - id: \"12346\"\n                                firstName: \"James\"\n                                lastName: \"Higginbotham\"\n                          stars: 4.7\n        # Those errors will be present on all operations\n        # Better take advantage of reusable responses       \n        \"401\":\n          $ref: \"#/components/responses/AuthenticationError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n    post:\n      summary: Add a book\n      operationId: addBook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/BookCreate\"\n      responses:\n        \"201\":\n          description: Book added\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Book\"\n        \"400\":\n          description: Incorrect data provided\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Errors\"\n              examples:\n                VariousErrors:\n                  summary: Incorrect book identifier\n                  value:\n                    errors:\n                      - code: required\n                        location: body\n                        name: title\n                        path: $.title\n                        message: missing title\n                      - code: unknown\n                        location: body\n                        name: authors\n                        path: $.authors[0]\n                        message: Unknown author id\n        # Those errors will be present on all operations\n        # Better take advantage of reusable responses       \n        \"401\":\n          $ref: \"#/components/responses/AuthenticationError\"\n        \"500\":\n          $ref: \"#/components/responses/UnexpectedError\"\n\ncomponents:\n  schemas:\n    BookId:\n      type: string\n      pattern: (978|979)([0-9]{10})\n      description: Book's [ISBN 13](https://www.isbn-international.org/content/what-isbn) (a standard book identifier)\n    Amount:\n      properties:\n        value:\n          type: number\n          minimum: 0\n        currency:\n          type: string\n          description: An ISO 4217 currency code\n          minLength: 3\n          maxLength: 3\n          enum:\n            - USD\n            - EUR\n      required:\n        - value\n        - currency\n    Authors:\n      type: array\n      minItems: 1\n      items:\n        properties:\n          id:\n            type: string\n            description: A unique id identifying an author\n          firstName:\n            type: string\n          middleName:\n            type: string\n          lastName:\n            type: string\n        required:\n          - id\n          - firstName\n          - lastName\n    # What is returned in list if often a subset of a more complete schema\n    BookSummary:\n      properties:\n        id:\n          $ref: \"#/components/schemas/BookId\"\n        isbn:\n          $ref: \"#/components/schemas/BookId\"\n        title:\n          type: string\n          minLength: 1\n          maxLength: 100\n        price:\n          $ref: \"#/components/schemas/Amount\"\n        authors:\n          $ref: \"#/components/schemas/Authors\"\n        stars:\n          type: number\n          exclusiveMinimum: true\n          minimum: 0\n          maximum: 5\n      required:\n        - id\n        - isbn\n        - title\n        - price\n        - authors\n    Books:\n      type: object  \n      properties:\n        data:\n          type: array\n          minItems: 0\n          maxItems: 100\n          items:\n            $ref: \"#/components/schemas/BookSummary\"\n    QueryParameterString:\n      type: string\n      maxLength: 100\n      minLength: 1\n    # The complete schema of the book\n    Book:\n      properties:\n        id:\n          $ref: \"#/components/schemas/BookId\"\n        isbn:\n          $ref: \"#/components/schemas/BookId\"\n        title:\n          type: string\n          minLength: 1\n          maxLength: 100\n        price:\n          $ref: \"#/components/schemas/Amount\"\n        authors:\n          $ref: \"#/components/schemas/Authors\"\n        stars:\n          type: number\n          exclusiveMinimum: true\n          minimum: 0\n          maximum: 5\n        publicationDate:\n          type: string\n          format: date\n        pages:\n          type: integer\n          minimum: 1\n      required:\n        - id\n        - isbn\n        - title\n        - price\n        - authors\n        - publicationDate\n        - pages\n    # A subset of Book\n    # All this could be optimized to avoid duplication errors\n    BookCreate:\n      type: object\n      properties:\n        isbn:\n          $ref: \"#/components/schemas/BookId\"\n        title:\n          type: string\n          minLength: 1\n          maxLength: 101 # Not the same value as in Book! \n        price:\n          $ref: \"#/components/schemas/Amount\"\n        authors:\n          type: array\n          minItems: 1\n          items:\n            $ref: \"#/components/schemas/AuthorId\"\n        publicationDate:\n          type: string\n          format: date\n        pages:\n          type: integer\n          minimum: 1\n      required:\n        - isbn\n        - title\n        - price\n        - authors\n        - publicationDate\n        - pages\n    # Generic error model\n    # Allows to return multiple errors in one shot and help consumer to fix the problems\n    Errors:\n      required:\n        - errors\n      properties:\n        errors:\n          description: A list of errors\n          type: array\n          minItems: 1\n          items:\n            required:\n              - code\n              - message\n            properties:\n              code:\n                type: string\n                enum:\n                  - required\n                  - incorrect\n                  - unknown\n                  - unexpected\n                description: A (if possible) generic human and machine readable error code\n              message:\n                type: string\n                description: A human readable error message\n              source:\n                title: ErrorSource\n                description: The source of the error\n                required:\n                  - location\n                  - name\n                properties:\n                  location:\n                    type: string\n                    enum:\n                      - path\n                      - query\n                      - body\n                      - header\n                  name:\n                    type: string\n                    description: The name of the property or parameter causing the error\n                  path:\n                    type: string\n                    description: JSON path targeting the source of error (only used when location is `body`), `$.some.path.to.property`` for instance\n  parameters:\n    Title:\n      name: title\n      in: query\n      description: \"Complete or partial title, can be typed phonetically\"\n      required: false\n      schema:\n        $ref: \"#/components/schemas/QueryParameterString\"\n  # Responses holds reusable responses\n  responses:\n    UnexpectedError:\n      description: Unexpected error. Consumer may try to send the request again.\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Errors\"\n          examples:\n            UnexpectedError:\n              summary: An unexpected error\n              value:\n                errors:\n                  - code: unexpected\n                    message: \"An expected error occurred, you may try again later\"\n    AuthenticationError:\n      description: \"Missing, expired, revoked, or incorrect API token\"\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Errors\"\n          examples:\n            MissingTokenError:\n              summary: No Authorization header\n              description: The header may be missing or its name contains a typo error\n              value:\n                errors:\n                  - code: required\n                    location: header\n                    name: Authorization\n                    message: Missing Authorization header\n            IncorrectTokenError:\n              summary: Incorrect token in Authorization header\n              description: \"The token may have expired, been revoked or it contains a typo error\"\n              value:\n                errors:\n                  - code: incorrect\n                    location: header\n                    name: Authorization\n                    message: Incorrect Authorization header\n",
			"canonicalURL": "/github.com/postmanlabs/space-camp-apifirst@1245972083363b39001229166de308b5cca2b9ce/-/blob/openapi-books/08-bookshop-better-errors.openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/postmanlabs/space-camp-apifirst/blob/1245972083363b39001229166de308b5cca2b9ce/openapi-books/08-bookshop-better-errors.openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"BookCreate\": parse schema: property \"authors\": parse schema: parse schema: at 1:2374: find schema: resolve: can't find value for \"components/schemas/AuthorId\""
}