{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/ballerina-platform/openapi-connectors"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "openapi/launchdarkly/openapi.yaml",
			"byteSize": 144272,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: support@launchdarkly.com\n    name: LaunchDarkly Support\n    url: https://support.launchdarkly.com\n    x-twitter: launchdarkly\n  description: \u003e\n    This is a generated connector for [LaunchDarkly API v2.0](https://apidocs.launchdarkly.com/) OpenAPI specification.\n    \n    LaunchDarkly is a feature management platform enables teams to deploy code at any time, even if a feature isn't ready to be released to all users.\n  x-ballerina-init-description: \u003e\n    The connector initialization requires setting the API credentials.\n\n    Create an [LaunchDarkly account](https://launchdarkly.com/request-a-demo/) and obtain tokens by following [this guide](https://apidocs.launchdarkly.com/#section/Overview/Authentication).\n  x-ballerina-display:\n    label: LaunchDarkly\n    iconPath: \"icon.png\"\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  termsOfService: https://launchdarkly.com/terms\n  title: LaunchDarkly REST API\n  version: 4.0.0\n  x-apisguru-categories:\n    - developer_tools\n  x-logo:\n    url: https://twitter.com/launchdarkly/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://launchdarkly.github.io/ld-openapi/openapi.json\n      version: '2.0'\n  x-providerName: launchdarkly.com\n  x-preferred: null\nsecurity:\n  - Token: []\npaths:\n  /:\n    get:\n      description: You can issue a GET request to the root resource to find all of the resource categories supported by the API.\n      operationId: getRoot\n      responses:\n        '200':\n          $ref: '#/components/responses/Root200'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      tags:\n        - Root\n  /account/relay-auto-configs:\n    get:\n      operationId: getRelayProxyConfigs\n      responses:\n        '200':\n          description: Relay proxy configs response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelayProxyConfigs'\n      summary: Returns a list of relay proxy configurations in the account.\n      tags:\n        - Relay proxy configurations\n    post:\n      operationId: postRelayAutoConfig\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: A human-friendly name for the relay proxy configuration\n                  example: My relay proxy config\n                  type: string\n                policy:\n                  items:\n                    $ref: '#/components/schemas/Policy'\n                  type: array\n              type: object\n        description: Create a new relay proxy configuration\n        required: true\n      responses:\n        '201':\n          description: Relay proxy config response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/RelayProxyConfig'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '403':\n          $ref: '#/components/responses/Standard403'\n      summary: Create a new relay proxy config.\n      tags:\n        - Relay proxy configurations\n  /account/relay-auto-configs/{id}:\n    delete:\n      operationId: deleteRelayProxyConfig\n      parameters:\n        - $ref: '#/components/parameters/RelayProxyConfigId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a relay proxy configuration by ID.\n      tags:\n        - Relay proxy configurations\n    get:\n      operationId: getRelayProxyConfig\n      parameters:\n        - $ref: '#/components/parameters/RelayProxyConfigId'\n      responses:\n        '200':\n          $ref: '#/components/responses/RelayProxyConfig2xx'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single relay proxy configuration by ID.\n      tags:\n        - Relay proxy configurations\n    patch:\n      operationId: patchRelayProxyConfig\n      parameters:\n        - $ref: '#/components/parameters/RelayProxyConfigId'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/RelayProxyConfig2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify a relay proxy configuration by ID.\n      tags:\n        - Relay proxy configurations\n  /account/relay-auto-configs/{id}/reset:\n    post:\n      operationId: resetRelayProxyConfig\n      parameters:\n        - $ref: '#/components/parameters/RelayProxyConfigId'\n        - $ref: '#/components/parameters/RelayProxyConfigsExpiry'\n      responses:\n        '200':\n          $ref: '#/components/responses/RelayProxyConfig2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Reset a relay proxy configuration's secret key with an optional expiry time for the old key.\n      tags:\n        - Relay proxy configurations\n  /auditlog:\n    get:\n      operationId: getAuditLogEntries\n      parameters:\n        - $ref: '#/components/parameters/Before'\n        - $ref: '#/components/parameters/After'\n        - $ref: '#/components/parameters/Q'\n        - $ref: '#/components/parameters/AuditLimit'\n        - $ref: '#/components/parameters/Spec'\n      responses:\n        '200':\n          description: Audit log entries response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuditLogEntries'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.\n      tags:\n        - Audit log\n  /auditlog/{resourceId}:\n    get:\n      operationId: getAuditLogEntry\n      parameters:\n        - $ref: '#/components/parameters/ResourceId'\n      responses:\n        '200':\n          description: Audit log entry response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/AuditLogEntry'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Use this endpoint to fetch a single audit log entry by its resouce ID.\n      tags:\n        - Audit log\n  /destinations:\n    get:\n      operationId: getDestinations\n      responses:\n        '200':\n          description: Destinations response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Destinations'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Returns a list of all data export destinations.\n      tags:\n        - Data export destinations\n  /destinations/{projectKey}/{environmentKey}:\n    post:\n      operationId: postDestination\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                config:\n                  description: destination-specific configuration.\n                  example:\n                    project: cool-project\n                    topic: test\n                  type: object\n                kind:\n                  description: The data export destination type. Available choices are kinesis, google-pubsub, mparticle, or segment.\n                  enum:\n                    - google-pubsub\n                    - kinesis\n                    - mparticle\n                    - segment\n                  example: google-pubsub\n                  type: string\n                name:\n                  description: A human-readable name for your data export destination.\n                  example: Example Google Pub/Sub Destination\n                  type: string\n                'on':\n                  description: Whether the data export destination is on or not.\n                  example: true\n                  type: boolean\n              required:\n                - name\n                - kind\n                - config\n              type: object\n        description: Create a new data export destination.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/Destination2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Create a new data export destination\n      tags:\n        - Data export destinations\n  /destinations/{projectKey}/{environmentKey}/{destinationId}:\n    delete:\n      operationId: deleteDestination\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/DestinationId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single data export destination by ID\n      tags:\n        - Data export destinations\n    get:\n      operationId: getDestination\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/DestinationId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Destination2xx'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single data export destination by ID\n      tags:\n        - Data export destinations\n    patch:\n      operationId: patchDestination\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/DestinationId'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray'\n      responses:\n        '200':\n          $ref: '#/components/responses/Destination2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Perform a partial update to a data export destination.\n      tags:\n        - Data export destinations\n  /flag-status/{projectKey}/{featureFlagKey}:\n    get:\n      operationId: getFeatureFlagStatusAcrossEnvironments\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      responses:\n        '200':\n          description: Status of the requested feature flag across environments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagStatusAcrossEnvironments'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Get the status for a particular feature flag across environments\n      tags:\n        - Feature flags\n  /flag-statuses/{projectKey}/{environmentKey}:\n    get:\n      operationId: getFeatureFlagStatuses\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      responses:\n        '200':\n          description: List of feature flag statuses.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagStatuses'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.\n      tags:\n        - Feature flags\n  /flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}:\n    get:\n      operationId: getFeatureFlagStatus\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      responses:\n        '200':\n          description: Status of the requested feature flag.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagStatus'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get the status for a particular feature flag.\n      tags:\n        - Feature flags\n  /flags/{projectKey}:\n    get:\n      operationId: getFeatureFlags\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKeyQuery'\n        - $ref: '#/components/parameters/SummaryQuery'\n        - $ref: '#/components/parameters/ArchivedQuery'\n        - $ref: '#/components/parameters/LimitQuery'\n        - $ref: '#/components/parameters/OffsetQuery'\n        - $ref: '#/components/parameters/FilterQuery'\n        - $ref: '#/components/parameters/SortQuery'\n        - $ref: '#/components/parameters/Tag'\n      responses:\n        '200':\n          description: Flags response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlags'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get a list of all features in the given project.\n      tags:\n        - Feature flags\n    post:\n      operationId: postFeatureFlag\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/CloneFlagKeyQuery'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                clientSideAvailability:\n                  $ref: '#/components/schemas/ClientSideAvailability'\n                defaults:\n                  $ref: '#/components/schemas/Defaults'\n                description:\n                  description: A description of the feature flag.\n                  example: This flag controls whether test feature is turned on or not.\n                  type: string\n                includeInSnippet:\n                  description: Whether or not this flag should be made available to the client-side JavaScript SDK.\n                  type: boolean\n                key:\n                  description: A unique key that will be used to reference the flag in your code.\n                  example: new-test-flag\n                  type: string\n                name:\n                  description: A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.\n                  example: new test flag\n                  type: string\n                tags:\n                  description: Tags for the feature flag.\n                  items:\n                    example: []\n                    type: string\n                  type: array\n                temporary:\n                  description: Whether or not the flag is a temporary flag.\n                  type: boolean\n                variations:\n                  description: An array of possible variations for the flag.\n                  items:\n                    $ref: '#/components/schemas/Variation'\n                  type: array\n              required:\n                - name\n                - key\n                - variations\n              type: object\n        description: Create a new feature flag.\n        required: true\n      responses:\n        '201':\n          description: Flag response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlag'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Creates a new feature flag.\n      tags:\n        - Feature flags\n  /flags/{projectKey}/{featureFlagKey}:\n    delete:\n      operationId: deleteFeatureFlag\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.\n      tags:\n        - Feature flags\n    get:\n      operationId: getFeatureFlag\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/EnvironmentKeyQuery'\n      responses:\n        '200':\n          description: Flag response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlag'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single feature flag by key.\n      tags:\n        - Feature flags\n    patch:\n      operationId: patchFeatureFlag\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                comment:\n                  example: This is a comment string\n                  type: string\n                patch:\n                  items:\n                    $ref: '#/components/schemas/PatchOperation'\n                  type: array\n              type: object\n        description: Requires a JSON Patch representation of the desired changes to the project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.\n        required: true\n      responses:\n        '200':\n          description: Feature flag response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlag'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Perform a partial update to a feature.\n      tags:\n        - Feature flags\n  /flags/{projectKey}/{featureFlagKey}/copy:\n    post:\n      operationId: copyFeatureFlag\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                comment:\n                  description: comment will be included in audit log item for change.\n                  example: This is a comment string\n                  type: string\n                excludedActions:\n                  description: Define the parts of the flag configuration that will not be copied.\n                  items:\n                    $ref: '#/components/schemas/CopyActions'\n                  type: array\n                includedActions:\n                  description: Define the parts of the flag configuration that will be copied.\n                  items:\n                    $ref: '#/components/schemas/CopyActions'\n                  type: array\n                source:\n                  $ref: '#/components/schemas/FeatureFlagCopyObject'\n                target:\n                  $ref: '#/components/schemas/FeatureFlagCopyObject'\n              type: object\n        description: Copy feature flag configurations between environments.\n        required: true\n      responses:\n        '201':\n          description: Flag configuration copy response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlag'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Copies the feature flag configuration from one environment to the same feature flag in another environment.\n      tags:\n        - Feature flags\n  /flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}:\n    get:\n      operationId: getExpiringUserTargets\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      responses:\n        '200':\n          description: User targets of the requested feature flag.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTargetingExpirationForFlags'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get expiring user targets for feature flag\n      tags:\n        - Feature flags\n    patch:\n      operationId: patchExpiringUserTargets\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      requestBody:\n        $ref: '#/components/requestBodies/patchExpiringUserTargetsSemanticpatchwithcomment'\n      responses:\n        '200':\n          description: User targeting expirations on feature flag response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTargetingExpirationForFlags'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Update, add, or delete expiring user targets on feature flag\n      tags:\n        - Feature flags\n  /integrations:\n    get:\n      operationId: getIntegrations\n      responses:\n        '200':\n          description: Integrations response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Integrations'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Get a list of all configured audit log event integrations associated with this account.\n      tags:\n        - Integrations\n  /integrations/{integrationKey}:\n    get:\n      operationId: getIntegrationSubscriptions\n      parameters:\n        - $ref: '#/components/parameters/IntegrationKey'\n      responses:\n        '200':\n          description: Integrations response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Integration'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a list of all configured integrations of a given kind.\n      tags:\n        - Integrations\n    post:\n      operationId: postIntegrationSubscription\n      parameters:\n        - $ref: '#/components/parameters/IntegrationKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                config:\n                  description: Integration-specific configuration fields.\n                  example:\n                    apiKey: 582**************************116\n                    hostURL: https://api.datadoghq.com\n                  type: object\n                name:\n                  description: A human-readable name for your subscription configuration.\n                  example: Example Datadog Integration\n                  type: string\n                'on':\n                  description: Whether the integration subscription is active or not.\n                  example: true\n                  type: boolean\n                statements:\n                  items:\n                    $ref: '#/components/schemas/Statement'\n                  type: array\n                tags:\n                  description: Tags for the integration subscription.\n                  example: []\n                  items:\n                    type: string\n                  type: array\n              required:\n                - name\n                - config\n              type: object\n        description: Create a new integration subscription.\n        required: true\n      responses:\n        '201':\n          description: Integrations response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IntegrationSubscription'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Create a new integration subscription of a given kind.\n      tags:\n        - Integrations\n  /integrations/{integrationKey}/{integrationId}:\n    delete:\n      operationId: deleteIntegrationSubscription\n      parameters:\n        - $ref: '#/components/parameters/IntegrationKey'\n        - $ref: '#/components/parameters/IntegrationId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete an integration subscription by ID.\n      tags:\n        - Integrations\n    get:\n      operationId: getIntegrationSubscription\n      parameters:\n        - $ref: '#/components/parameters/IntegrationKey'\n        - $ref: '#/components/parameters/IntegrationId'\n      responses:\n        '200':\n          description: Integrations response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IntegrationSubscription'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single integration subscription by ID.\n      tags:\n        - Integrations\n    patch:\n      operationId: patchIntegrationSubscription\n      parameters:\n        - $ref: '#/components/parameters/IntegrationKey'\n        - $ref: '#/components/parameters/IntegrationId'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          description: Integrations response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/IntegrationSubscription'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Modify an integration subscription by ID.\n      tags:\n        - Integrations\n  /members:\n    get:\n      operationId: getMembers\n      parameters:\n        - $ref: '#/components/parameters/LimitQuery'\n        - $ref: '#/components/parameters/OffsetQuery'\n        - $ref: '#/components/parameters/FilterQuery'\n        - $ref: '#/components/parameters/SortQuery'\n      responses:\n        '200':\n          description: Members response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Members'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Returns a list of all members in the account.\n      tags:\n        - Team members\n    post:\n      operationId: postMembers\n      requestBody:\n        content:\n          application/json:\n            schema:\n              items:\n                properties:\n                  customRoles:\n                    items:\n                      description: The 20-hexdigit id or the key for a custom role.\n                      example: revenue-team\n                      type: string\n                    type: array\n                  email:\n                    example: exampleuser@email.com\n                    type: string\n                  firstName:\n                    example: Bob\n                    type: string\n                  inlineRole:\n                    items:\n                      $ref: '#/components/schemas/Statement'\n                    type: array\n                  lastName:\n                    example: Loblaw\n                    type: string\n                  role:\n                    $ref: '#/components/schemas/Role'\n                required:\n                  - email\n                type: object\n              type: array\n        description: New members to invite.\n        required: true\n      responses:\n        '201':\n          description: Members response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Members'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Invite new members.\n      tags:\n        - Team members\n  /members/me:\n    get:\n      operationId: getMe\n      responses:\n        '200':\n          $ref: '#/components/responses/Member2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get the current team member associated with the token\n      tags:\n        - Team members\n  /members/{memberId}:\n    delete:\n      operationId: deleteMember\n      parameters:\n        - $ref: '#/components/parameters/MemberId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a team member by ID.\n      tags:\n        - Team members\n    get:\n      operationId: getMember\n      parameters:\n        - $ref: '#/components/parameters/MemberId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Member2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get a single team member by ID.\n      tags:\n        - Team members\n    patch:\n      operationId: patchMember\n      parameters:\n        - $ref: '#/components/parameters/MemberId'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/Member2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify a team member by ID.\n      tags:\n        - Team members\n  /projects:\n    get:\n      operationId: getProjects\n      responses:\n        '200':\n          description: Projects response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Projects'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Returns a list of all projects in the account.\n      tags:\n        - Projects\n    post:\n      operationId: postProject\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                defaultClientSideAvailability:\n                  $ref: '#/components/schemas/ClientSideAvailability'\n                environments:\n                  items:\n                    $ref: '#/components/schemas/EnvironmentPost'\n                  minLength: 1\n                  type: array\n                includeInSnippetByDefault:\n                  example: false\n                  type: boolean\n                key:\n                  example: new-project\n                  type: string\n                name:\n                  example: New Project\n                  type: string\n                tags:\n                  example:\n                    - ops\n                    - dev\n                  items:\n                    type: string\n                  type: array\n              required:\n                - name\n                - key\n              type: object\n        description: Project keys must be unique within an account.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/Project2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Create a new project with the given key and name.\n      tags:\n        - Projects\n  /projects/{projectKey}:\n    delete:\n      operationId: deleteProject\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a project by key. Caution-- deleting a project will delete all associated environments and feature flags. You cannot delete the last project in an account.\n      tags:\n        - Projects\n    get:\n      operationId: getProject\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n      responses:\n        '200':\n          $ref: '#/components/responses/Project2xx'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Fetch a single project by key.\n      tags:\n        - Projects\n    patch:\n      operationId: patchProject\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/Project2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify a project by ID.\n      tags:\n        - Projects\n  /projects/{projectKey}/environments:\n    post:\n      operationId: postEnvironment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/EnvironmentPost'\n        description: New environment.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/Environment2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Create a new environment in a specified project with a given name, key, and swatch color.\n      tags:\n        - Environments\n  /projects/{projectKey}/environments/{environmentKey}:\n    delete:\n      operationId: deleteEnvironment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete an environment in a specific project.\n      tags:\n        - Environments\n    get:\n      operationId: getEnvironment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      responses:\n        '200':\n          $ref: '#/components/responses/Environment2xx'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get an environment given a project and key.\n      tags:\n        - Environments\n    patch:\n      operationId: patchEnvironment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/Environment2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify an environment by ID.\n      tags:\n        - Environments\n  /projects/{projectKey}/environments/{environmentKey}/apiKey:\n    post:\n      operationId: resetEnvironmentSDKKey\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/EnvironmentSDKKeyExpiry'\n      responses:\n        '200':\n          $ref: '#/components/responses/Environment2xx'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Reset an environment's SDK key with an optional expiry time for the old key.\n      tags:\n        - Environments\n  /projects/{projectKey}/environments/{environmentKey}/mobileKey:\n    post:\n      operationId: resetEnvironmentMobileKey\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/EnvironmentMobileKeyExpiry'\n      responses:\n        '200':\n          $ref: '#/components/responses/Environment2xx'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.\n      tags:\n        - Environments\n  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests:\n    get:\n      operationId: getFeatureFlagApprovalRequests\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      responses:\n        '200':\n          description: Feature flag approval requests response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagApprovalRequests'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get all approval requests for a feature flag\n      tags:\n        - Feature flags\n  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{featureFlagApprovalRequestId}:\n    delete:\n      operationId: deleteFeatureFlagApprovalRequest\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/FeatureFlagApprovalRequestId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete an approval request for a feature flag\n      tags:\n        - Feature flags\n    get:\n      operationId: getFeatureFlagApprovalRequest\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagApprovalRequestId'\n      responses:\n        '200':\n          description: Feature flag approval request response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagApprovalRequests'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single approval request for a feature flag\n      tags:\n        - Feature flags\n    post:\n      operationId: postFeatureFlagApprovalRequest\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagApprovalRequestId'\n      requestBody:\n        $ref: '#/components/requestBodies/deleteFeatureFlagApprovalRequestFeatureflagapprovalrequestconfigbody'\n      responses:\n        '200':\n          description: Feature flag approval request response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagApprovalRequest'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Create an approval request for a feature flag\n      tags:\n        - Feature flags\n  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{featureFlagApprovalRequestId}/apply:\n    post:\n      operationId: postApplyFeatureFlagApprovalRequest\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagApprovalRequestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                comment:\n                  description: comment will be included in audit log item for change.\n                  example: Applying approved changes\n                  type: string\n              type: object\n        description: Apply a new feature flag approval request\n        required: true\n      responses:\n        '200':\n          description: Feature flag approval request applied response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagApprovalRequests'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Apply approval request for a feature flag\n      tags:\n        - Feature flags\n  /projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{featureFlagApprovalRequestId}/review:\n    post:\n      operationId: postReviewFeatureFlagApprovalRequest\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/FeatureFlagApprovalRequestId'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                comment:\n                  description: comment will be included in audit log item for change.\n                  example: This is a comment string\n                  type: string\n                kind:\n                  description: One of approve, decline, or comment.\n                  enum:\n                    - approve\n                    - decline\n                    - comment\n                  example: approve\n                  type: string\n              required:\n                - kind\n              type: object\n        description: Review a feature flag approval request\n        required: true\n      responses:\n        '200':\n          description: Feature flag approval request reviewed response\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FeatureFlagApprovalRequests'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Review approval request for a feature flag\n      tags:\n        - Feature flags\n  /roles:\n    get:\n      operationId: getCustomRoles\n      responses:\n        '200':\n          description: Custom roles response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CustomRoles'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Return a complete list of custom roles.\n      tags:\n        - Custom roles\n    post:\n      operationId: postCustomRole\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                description:\n                  description: Description of the custom role.\n                  example: Description of revenue team role here\n                  type: string\n                key:\n                  description: The 20-hexdigit id or the key for a custom role.\n                  example: revenue-team\n                  type: string\n                name:\n                  description: Name of the custom role.\n                  example: revenue team\n                  type: string\n                policy:\n                  items:\n                    $ref: '#/components/schemas/Policy'\n                  type: array\n              required:\n                - name\n                - key\n                - policy\n              type: object\n        description: New role or roles to create.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/CustomRole2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Create a new custom role.\n      tags:\n        - Custom roles\n  /roles/{customRoleKey}:\n    delete:\n      operationId: deleteCustomRole\n      parameters:\n        - $ref: '#/components/parameters/CustomRoleKey'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a custom role by key.\n      tags:\n        - Custom roles\n    get:\n      operationId: getCustomRole\n      parameters:\n        - $ref: '#/components/parameters/CustomRoleKey'\n      responses:\n        '200':\n          $ref: '#/components/responses/CustomRole2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get one custom role by key.\n      tags:\n        - Custom roles\n    patch:\n      operationId: patchCustomRole\n      parameters:\n        - $ref: '#/components/parameters/CustomRoleKey'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/CustomRole2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify a custom role by key.\n      tags:\n        - Custom roles\n  /segments/{projectKey}/{environmentKey}:\n    get:\n      operationId: getUserSegments\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/Tag'\n      responses:\n        '200':\n          description: Segments response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserSegments'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get a list of all user segments in the given project.\n      tags:\n        - User segments\n    post:\n      operationId: postUserSegment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                description:\n                  description: A description for the user segment.\n                  example: Users in this segment will have access to beta features.\n                  type: string\n                key:\n                  description: A unique key that will be used to reference the user segment in feature flags.\n                  example: new-segment\n                  type: string\n                name:\n                  description: A human-friendly name for the user segment.\n                  example: new segment\n                  type: string\n                tags:\n                  description: Tags for the user segment.\n                  items:\n                    example: []\n                    type: string\n                  type: array\n                unbounded:\n                  description: Controls whether this segment can support unlimited numbers of users. Requires the beta API and additional setup. Include/exclude lists in this payload are not used in unbounded segments.\n                  example: false\n                  type: boolean\n              required:\n                - name\n                - key\n              type: object\n        description: Create a new user segment.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/UserSegment2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Creates a new user segment.\n      tags:\n        - User segments\n  /segments/{projectKey}/{environmentKey}/{userSegmentKey}:\n    delete:\n      operationId: deleteUserSegment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserSegmentKey'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a user segment.\n      tags:\n        - User segments\n    get:\n      operationId: getUserSegment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserSegmentKey'\n      responses:\n        '200':\n          $ref: '#/components/responses/UserSegment2xx'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a single user segment by key.\n      tags:\n        - User segments\n    patch:\n      operationId: patchUserSegment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserSegmentKey'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray'\n      responses:\n        '200':\n          $ref: '#/components/responses/UserSegment2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Perform a partial update to a user segment.\n      tags:\n        - User segments\n  /segments/{projectKey}/{environmentKey}/{userSegmentKey}/unbounded-users:\n    post:\n      operationId: updatedUnboundedSegmentTargets\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserSegmentKey'\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                excluded:\n                  $ref: '#/components/schemas/UnboundedSegmentTargetChanges'\n                included:\n                  $ref: '#/components/schemas/UnboundedSegmentTargetChanges'\n              type: object\n        description: Add or remove user targets to the included or excluded lists on an unbounded segment\n        required: true\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Update targets included or excluded in an unbounded segment\n      tags:\n        - User segments\n  /segments/{projectKey}/{userSegmentKey}/expiring-user-targets/{environmentKey}:\n    get:\n      operationId: getExpiringUserTargetsOnSegment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserSegmentKey'\n      responses:\n        '200':\n          description: User targeting expirations on user segment response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTargetingExpirationForSegment'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get expiring user targets for user segment\n      tags:\n        - User segments\n    patch:\n      operationId: patchExpiringUserTargetsOnSegment\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserSegmentKey'\n      requestBody:\n        $ref: '#/components/requestBodies/patchExpiringUserTargetsSemanticpatchwithcomment'\n      responses:\n        '200':\n          description: User targeting expirations on user segment response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTargetingExpirationForSegment'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Update, add, or delete expiring user targets on user segment\n      tags:\n        - User segments\n  /tokens:\n    get:\n      operationId: getTokens\n      parameters:\n        - $ref: '#/components/parameters/TokenShowAllQuery'\n      responses:\n        '200':\n          description: Tokens response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tokens'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Returns a list of tokens in the account.\n      tags:\n        - Access tokens\n    post:\n      operationId: postToken\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                customRoleIds:\n                  description: A list of custom role IDs to use as access limits for the access token\n                  items:\n                    example: []\n                    type: string\n                  type: array\n                defaultApiVersion:\n                  description: The default API version for this token\n                  type: integer\n                inlineRole:\n                  items:\n                    $ref: '#/components/schemas/Statement'\n                  type: array\n                name:\n                  description: A human-friendly name for the access token\n                  example: My access token\n                  type: string\n                role:\n                  description: The name of a built-in role for the token\n                  example: writer\n                  type: string\n                serviceToken:\n                  description: Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens\n                  type: boolean\n              type: object\n        description: Create a new access token.\n        required: true\n      responses:\n        '201':\n          description: Token response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Token'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Create a new token.\n      tags:\n        - Access tokens\n  /tokens/{tokenId}:\n    delete:\n      operationId: deleteToken\n      parameters:\n        - $ref: '#/components/parameters/TokenId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete an access token by ID.\n      tags:\n        - Access tokens\n    get:\n      operationId: getToken\n      parameters:\n        - $ref: '#/components/parameters/TokenId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Token2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get a single access token by ID.\n      tags:\n        - Access tokens\n    patch:\n      operationId: patchToken\n      parameters:\n        - $ref: '#/components/parameters/TokenId'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/Token2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify an access token by ID.\n      tags:\n        - Access tokens\n  /tokens/{tokenId}/reset:\n    post:\n      operationId: resetToken\n      parameters:\n        - $ref: '#/components/parameters/TokenId'\n        - $ref: '#/components/parameters/TokenExpiry'\n      responses:\n        '200':\n          $ref: '#/components/responses/Token2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Reset an access token's secret key with an optional expiry time for the old key.\n      tags:\n        - Access tokens\n  /usage:\n    get:\n      operationId: getUsage\n      responses:\n        '200':\n          description: Usage endpoints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Usage'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Returns of the usage endpoints available.\n      tags:\n        - Customer Metrics\n  /usage/evaluations/{envId}/{flagKey}:\n    get:\n      operationId: getEvaluations\n      parameters:\n        - $ref: '#/components/parameters/EvaluationEnvId'\n        - $ref: '#/components/parameters/EvaluationFlagKey'\n      responses:\n        '200':\n          description: Returns timeseries data and all sdk versions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamSDKVersion'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/EvaluationUsage404'\n      summary: Get events usage by event id and the feature flag key.\n      tags:\n        - Customer Metrics\n  /usage/events:\n    get:\n      operationId: getEvents\n      responses:\n        '200':\n          description: Returns timeseries data and all sdk versions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Events'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Get events usage endpoints.\n      tags:\n        - Customer Metrics\n  /usage/events/{type}:\n    get:\n      operationId: getEvent\n      parameters:\n        - $ref: '#/components/parameters/EventType'\n      responses:\n        '200':\n          description: Returns timeseries data and all sdk versions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamSDKVersion'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/StreamUsage404'\n      summary: Get events usage by event type.\n      tags:\n        - Customer Metrics\n  /usage/mau:\n    get:\n      operationId: getMAU\n      responses:\n        '200':\n          description: Returns timeseries data and all sdk versions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MAU'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Get monthly active user data.\n      tags:\n        - Customer Metrics\n  /usage/mau/bycategory:\n    get:\n      operationId: getMAUByCategory\n      responses:\n        '200':\n          description: Returns timeseries data and all sdk versions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/MAUbyCategory'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Get monthly active user data by category.\n      tags:\n        - Customer Metrics\n  /usage/streams:\n    get:\n      operationId: getStreams\n      responses:\n        '200':\n          description: Stream usage endpoints\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Streams'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n      summary: Returns a list of all streams.\n      tags:\n        - Customer Metrics\n  /usage/streams/{source}:\n    get:\n      operationId: getStream\n      parameters:\n        - $ref: '#/components/parameters/StreamSource'\n      responses:\n        '200':\n          description: Responds with time series data on stream usage.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Stream'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/StreamUsage404'\n      summary: Get a stream endpoint and return timeseries data.\n      tags:\n        - Customer Metrics\n  /usage/streams/{source}/bysdkversion:\n    get:\n      operationId: getStreamBySDK\n      parameters:\n        - $ref: '#/components/parameters/StreamSource'\n      responses:\n        '200':\n          description: Returns timeseries data and metadata on sdk version.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamBySDK'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/StreamUsage404'\n      summary: Get a stream timeseries data by source show sdk version metadata.\n      tags:\n        - Customer Metrics\n  /usage/streams/{source}/sdkversions:\n    get:\n      operationId: getStreamSDKVersion\n      parameters:\n        - $ref: '#/components/parameters/StreamSource'\n      responses:\n        '200':\n          description: Returns timeseries data and all sdk versions.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StreamSDKVersion'\n        '403':\n          $ref: '#/components/responses/BetaApi403'\n        '404':\n          $ref: '#/components/responses/StreamUsage404'\n      summary: Get a stream timeseries data by source and show all sdk version associated.\n      tags:\n        - Customer Metrics\n  /user-search/{projectKey}/{environmentKey}:\n    get:\n      operationId: getSearchUsers\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/Query'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/Offset'\n        - $ref: '#/components/parameters/After'\n      responses:\n        '200':\n          description: Users response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.\n      tags:\n        - Users\n  /users/{projectKey}/{environmentKey}:\n    get:\n      operationId: getUsers\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/Limit'\n        - $ref: '#/components/parameters/HMAC'\n        - $ref: '#/components/parameters/ScrollId'\n      responses:\n        '200':\n          description: Users response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Users'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: List all users in the environment. Includes the total count of users. In each page, there will be up to 'limit' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.\n      tags:\n        - Users\n  /users/{projectKey}/{environmentKey}/{userKey}:\n    delete:\n      operationId: deleteUser\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a user by ID.\n      tags:\n        - Users\n    get:\n      operationId: getUser\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n      responses:\n        '200':\n          description: User response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a user by key.\n      tags:\n        - Users\n  /users/{projectKey}/{environmentKey}/{userKey}/flags:\n    get:\n      operationId: getUserFlagSettings\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n      responses:\n        '200':\n          description: User flags settings response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFlagSettings'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Fetch a single flag setting for a user by key.\n      tags:\n        - User settings\n  /users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}:\n    get:\n      operationId: getUserFlagSetting\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      responses:\n        '200':\n          description: User flag setting response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserFlagSetting'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Fetch a single flag setting for a user by key.\n      tags:\n        - User settings\n    put:\n      operationId: putFlagSetting\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n        - $ref: '#/components/parameters/FeatureFlagKey'\n      requestBody:\n        description: A request payload to update feature flag for a user based on their key\n        content:\n          application/json:\n            schema:\n              properties:\n                setting:\n                  description: |\n                    The variation value to set for the user. Must match the variation type of the flag.\n                  type: boolean\n              type: object\n        required: true\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Specifically enable or disable a feature flag for a user based on their key.\n      tags:\n        - User settings\n  /users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}:\n    get:\n      operationId: getExpiringUserTargetsForUser\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n      responses:\n        '200':\n          description: User targets of the requested feature flag.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTargetingExpirationOnFlagsForUser'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Get expiring dates on flags for user\n      tags:\n        - User settings\n    patch:\n      operationId: patchExpiringUserTargetsForFlags\n      parameters:\n        - $ref: '#/components/parameters/ProjectKey'\n        - $ref: '#/components/parameters/EnvironmentKey'\n        - $ref: '#/components/parameters/UserKey'\n      requestBody:\n        $ref: '#/components/requestBodies/patchExpiringUserTargetsSemanticpatchwithcomment'\n      responses:\n        '200':\n          description: User Targeting expiration for single user on all flags response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/UserTargetingExpirationOnFlagsForUser'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Update, add, or delete expiring user targets for a single user on all flags\n      tags:\n        - User settings\n  /webhooks:\n    get:\n      operationId: getWebhooks\n      responses:\n        '200':\n          description: Webhooks response.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhooks'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Fetch a list of all webhooks.\n      tags:\n        - Webhooks\n    post:\n      operationId: postWebhook\n      requestBody:\n        content:\n          application/json:\n            schema:\n              properties:\n                name:\n                  description: The name of the webhook.\n                  example: Example hook\n                  type: string\n                'on':\n                  description: Whether this webhook is enabled or not.\n                  example: true\n                  type: boolean\n                secret:\n                  description: If sign is true, and the secret attribute is omitted, LaunchDarkly will automatically generate a secret for you.\n                  example: \u003cpassword\u003e\n                  type: string\n                sign:\n                  description: If sign is false, the webhook will not include a signature header, and the secret can be omitted.\n                  type: boolean\n                statements:\n                  items:\n                    $ref: '#/components/schemas/Statement'\n                  type: array\n                tags:\n                  description: Tags for the webhook.\n                  example: []\n                  items:\n                    type: string\n                  type: array\n                url:\n                  description: The URL of the remote webhook.\n                  example: https://example.com/example\n                  type: string\n              required:\n                - url\n                - sign\n                - 'on'\n              type: object\n        description: New webhook.\n        required: true\n      responses:\n        '201':\n          $ref: '#/components/responses/Webhook2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n      summary: Create a webhook.\n      tags:\n        - Webhooks\n  /webhooks/{resourceId}:\n    delete:\n      operationId: deleteWebhook\n      parameters:\n        - $ref: '#/components/parameters/ResourceId'\n      responses:\n        '204':\n          $ref: '#/components/responses/Standard204'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Delete a webhook by ID.\n      tags:\n        - Webhooks\n    get:\n      operationId: getWebhook\n      parameters:\n        - $ref: '#/components/parameters/ResourceId'\n      responses:\n        '200':\n          $ref: '#/components/responses/Webhook2xx'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n      summary: Get a webhook by ID.\n      tags:\n        - Webhooks\n    patch:\n      operationId: patchWebhook\n      parameters:\n        - $ref: '#/components/parameters/ResourceId'\n      requestBody:\n        $ref: '#/components/requestBodies/PatchOperationArray2'\n      responses:\n        '200':\n          $ref: '#/components/responses/Webhook2xx'\n        '400':\n          $ref: '#/components/responses/Standard400'\n        '401':\n          $ref: '#/components/responses/Standard401'\n        '404':\n          $ref: '#/components/responses/Standard404'\n        '409':\n          $ref: '#/components/responses/Standard409'\n      summary: Modify a webhook by ID.\n      tags:\n        - Webhooks\nservers:\n  - url: https://app.launchdarkly.com/api/v2\ncomponents:\n  parameters:\n    After:\n      description: A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.\n      in: query\n      name: after\n      required: false\n      schema:\n        type: integer\n        format: int64\n    ArchivedQuery:\n      description: When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.\n      in: query\n      name: archived\n      required: false\n      schema:\n        type: boolean\n    AuditLimit:\n      description: A limit on the number of audit log entries to be returned, between 1 and 20.\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: number\n    Before:\n      description: A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have before this timestamp.\n      in: query\n      name: before\n      required: false\n      schema:\n        type: integer\n        format: int64\n    CloneFlagKeyQuery:\n      description: The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone=flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.\n      in: query\n      name: clone\n      required: false\n      schema:\n        type: string\n    CustomRoleKey:\n      description: The custom role key.\n      in: path\n      name: customRoleKey\n      required: true\n      schema:\n        type: string\n    DestinationId:\n      description: The data export destination ID.\n      in: path\n      name: destinationId\n      required: true\n      schema:\n        type: string\n    EnvironmentKey:\n      description: The environment key, used to tie together flag configuration and users under one environment so they can be managed together.\n      in: path\n      name: environmentKey\n      required: true\n      schema:\n        type: string\n    EnvironmentKeyQuery:\n      description: By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env=[\"production\"] will restrict the returned configurations to just your production environment.\n      in: query\n      name: env\n      required: false\n      explode: true\n      schema:\n        type: array\n        items:\n          type: string\n    EnvironmentMobileKeyExpiry:\n      description: The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.\n      in: query\n      name: expiry\n      required: false\n      schema:\n        type: integer\n        format: int64\n    EnvironmentSDKKeyExpiry:\n      description: An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.\n      in: query\n      name: expiry\n      required: false\n      schema:\n        type: integer\n        format: int64\n    EvaluationEnvId:\n      description: The environment id for the flag evaluations in question.\n      in: path\n      name: envId\n      required: true\n      schema:\n        type: string\n    EvaluationFlagKey:\n      description: The key of the flag we want metrics for.\n      in: path\n      name: flagKey\n      required: true\n      schema:\n        type: string\n    EventType:\n      description: The type of event we would like to track.\n      in: path\n      name: type\n      required: true\n      schema:\n        type: string\n    FeatureFlagApprovalRequestId:\n      description: The feature flag approval request ID\n      in: path\n      name: featureFlagApprovalRequestId\n      required: true\n      schema:\n        type: string\n    FeatureFlagKey:\n      description: The feature flag's key. The key identifies the flag in your code.\n      in: path\n      name: featureFlagKey\n      required: true\n      schema:\n        type: string\n    FilterQuery:\n      description: A comma-separated list of filters. Each filter is of the form field:value.\n      in: query\n      name: filter\n      required: false\n      schema:\n        type: string\n    HMAC:\n      description: This parameter is required when following \"next\" links.\n      in: query\n      name: h\n      required: false\n      schema:\n        type: string\n    IntegrationId:\n      description: The integration ID.\n      in: path\n      name: integrationId\n      required: true\n      schema:\n        type: string\n    IntegrationKey:\n      description: The key used to specify the integration kind.\n      in: path\n      name: integrationKey\n      required: true\n      schema:\n        type: string\n    Limit:\n      description: Pagination limit.\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: integer\n    LimitQuery:\n      description: The number of objects to return. Defaults to -1, which returns everything.\n      in: query\n      name: limit\n      required: false\n      schema:\n        type: number\n    MemberId:\n      description: The member ID.\n      in: path\n      name: memberId\n      required: true\n      schema:\n        type: string\n    Offset:\n      description: Specifies the first item to return in the collection.\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: integer\n    OffsetQuery:\n      description: Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.\n      in: query\n      name: offset\n      required: false\n      schema:\n        type: number\n    ProjectKey:\n      description: The project key, used to tie the flags together under one project so they can be managed together.\n      in: path\n      name: projectKey\n      required: true\n      schema:\n        type: string\n    Q:\n      description: Text to search for. You can search for the full or partial name of the resource involved or full or partial email address of the member who made the change.\n      in: query\n      name: q\n      required: false\n      schema:\n        type: string\n    Query:\n      description: Search query.\n      in: query\n      name: q\n      required: false\n      schema:\n        type: string\n    RelayProxyConfigId:\n      description: The relay proxy configuration ID\n      in: path\n      name: id\n      required: true\n      schema:\n        type: string\n    RelayProxyConfigsExpiry:\n      description: An expiration time for the old relay proxy configuration key, expressed as a Unix epoch time in milliseconds. By default, the relay proxy configuration will expire immediately\n      in: query\n      name: expiry\n      required: false\n      schema:\n        type: integer\n        format: int64\n    ResourceId:\n      description: The resource ID.\n      in: path\n      name: resourceId\n      required: true\n      schema:\n        type: string\n    ScrollId:\n      description: This parameter is required when following \"next\" links.\n      in: query\n      name: scrollId\n      required: false\n      schema:\n        type: string\n    SortQuery:\n      description: A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.\n      in: query\n      name: sort\n      required: false\n      schema:\n        type: string\n    Spec:\n      description: A resource specifier, allowing you to filter audit log listings by resource.\n      in: query\n      name: spec\n      required: false\n      schema:\n        type: string\n    StreamSource:\n      description: The source of where the stream comes from.\n      in: path\n      name: source\n      required: true\n      schema:\n        type: string\n    SummaryQuery:\n      description: By default in api version \u003e= 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary=0 to include these fields for each flag returned.\n      in: query\n      name: summary\n      required: false\n      schema:\n        type: boolean\n    Tag:\n      description: Filter by tag. A tag can be used to group flags across projects.\n      in: query\n      name: tag\n      required: false\n      schema:\n        type: string\n    TokenExpiry:\n      description: An expiration time for the old token key, expressed as a Unix epoch time in milliseconds. By default, the token will expire immediately.\n      in: query\n      name: expiry\n      required: false\n      schema:\n        type: integer\n        format: int64\n    TokenId:\n      description: The access token ID.\n      in: path\n      name: tokenId\n      required: true\n      schema:\n        type: string\n    TokenShowAllQuery:\n      description: If set to true, and the authentication access token has the \"Admin\" role, personal access tokens for all members will be retrieved.\n      in: query\n      name: showAll\n      required: false\n      schema:\n        type: boolean\n    UserKey:\n      description: The user's key.\n      in: path\n      name: userKey\n      required: true\n      schema:\n        type: string\n    UserSegmentKey:\n      description: The user segment's key. The key identifies the user segment in your code.\n      in: path\n      name: userSegmentKey\n      required: true\n      schema:\n        type: string\n  responses:\n    BetaApi403:\n      description: This is a beta API, you must pass beta in the LD-API-Version header to use it.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UsageError'\n    CustomRole2xx:\n      description: Custom role response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/CustomRole'\n    Destination2xx:\n      description: Destination response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Destination'\n    Environment2xx:\n      description: Environment response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Environment'\n    EvaluationUsage404:\n      description: The environment or flag you requested could not be found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/EvaluationUsageError'\n    Member2xx:\n      description: Member response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Member'\n    Project2xx:\n      description: Successful Project response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Project'\n    RelayProxyConfig2xx:\n      description: Relay proxy config response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/RelayProxyConfig'\n    Root200:\n      description: A list of links to available resources in the API.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Links'\n    Standard201:\n      description: Resource created.\n    Standard204:\n      description: Action completed successfully.\n    Standard400:\n      description: Invalid request body.\n    Standard401:\n      description: Invalid access token.\n    Standard403:\n      description: Access to the requested resource was denied.\n    Standard404:\n      description: Invalid resource specifier.\n    Standard409:\n      description: Status conflict.\n    StreamUsage404:\n      description: The stream source you requested could not be found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/StreamUsageError'\n    Token2xx:\n      description: Token response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Token'\n    UserSegment2xx:\n      description: User segment response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/UserSegment'\n    Webhook2xx:\n      description: Webhook response.\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Webhook'\n  requestBodies:\n    PatchOperationArray:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/PatchOperation'\n            type: array\n      description: Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments is also supported.\n      required: true\n    deleteFeatureFlagApprovalRequestFeatureflagapprovalrequestconfigbody:\n      content:\n        application/json:\n          schema:\n            properties:\n              comment:\n                description: comment will be included in audit log item for change.\n                type: string\n              description:\n                description: A name that describes the changes you would like to apply to a feature flag configuration\n                type: string\n              instructions:\n                $ref: '#/components/schemas/SemanticPatchInstruction'\n              notifyMemberIds:\n                description: Id of members to notify.\n                example:\n                  - memberId\n                  - memberId2\n                items:\n                  type: string\n                type: array\n            required:\n              - description\n              - instructions\n              - notifyMemberIds\n            type: object\n      description: Create a new feature flag approval request\n    PatchOperationArray2:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/PatchOperation'\n            type: array\n      description: Requires a JSON Patch representation of the desired changes to the project. 'http://jsonpatch.com/'\n      required: true\n    patchExpiringUserTargetsSemanticpatchwithcomment:\n      content:\n        application/json:\n          schema:\n            items:\n              $ref: '#/components/schemas/SemanticPatchOperation'\n            type: object\n      description: Requires a Semantic Patch representation of the desired changes to the resource. 'https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches'. The addition of comments is also supported.\n      required: true\n  securitySchemes:\n    Token:\n      in: header\n      name: Authorization\n      type: apiKey\n      description: All requests on the LaunchDarkly API needs to include an API key. The API key can be provided as part of the query string or as a request header. The name of the API key needs to be `authorization`\n  schemas:\n    AuditLogEntries:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/AuditLogEntry'\n          type: array\n      type: object\n    AuditLogEntry:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        comment:\n          example: This is a comment string\n          type: string\n        date:\n          example: 1472243938774\n          format: int64\n          type: integer\n        description:\n          example: Changed the name from Test to Testing\n          type: string\n        kind:\n          example: environment\n          type: string\n        member:\n          $ref: '#/components/schemas/Member'\n        name:\n          example: Testing\n          type: string\n        shortDescription:\n          example: '\"\"'\n          type: string\n        target:\n          properties:\n            _links:\n              $ref: '#/components/schemas/Links'\n            name:\n              example: Testing\n              type: string\n            resources:\n              items:\n                example: proj/alexis:env/test\n                type: string\n              type: array\n          type: object\n        title:\n          example: '[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name of [Testing](https://app.launchdarkly.com/settings#/projects)'\n          type: string\n        titleVerb:\n          example: changed the name of\n          type: string\n      type: object\n    Clause:\n      properties:\n        _id:\n          type: string\n        attribute:\n          example: groups\n          type: string\n        negate:\n          type: boolean\n        op:\n          example: in\n          type: string\n        values:\n          items:\n            example: Top Customers\n            type: object\n          type: array\n      type: object\n    ClientSideAvailability:\n      properties:\n        usingEnvironmentId:\n          description: When set to true, this flag will be available to SDKs using the client-side id.\n          type: boolean\n        usingMobileKey:\n          description: When set to true, this flag will be available to SDKS using a mobile key.\n          type: boolean\n      type: object\n    CopyActions:\n      enum:\n        - updateOn\n        - updatePrerequisites\n        - updateTargets\n        - updateRules\n        - updateFallthrough\n        - updateOffVariation\n      example: []\n      type: string\n    CustomProperty:\n      description: A name and value describing a custom property.\n      properties:\n        name:\n          description: The name of the property.\n          example: My property\n          type: string\n        value:\n          description: Values for this property.\n          items:\n            example:\n              - Value 1\n              - Value 2\n            type: string\n          type: array\n      required:\n        - name\n      type: object\n    CustomPropertyValues:\n      description: Values for this property.\n      example:\n        - Value 1\n        - Value 2\n      items:\n        type: string\n      type: array\n    CustomRole:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        description:\n          description: Description of the custom role.\n          example: Description of revenue team role here\n          type: string\n        key:\n          description: The 20-hexdigit id or the key for a custom role.\n          example: revenue-team\n          type: string\n        name:\n          description: Name of the custom role.\n          example: revenue team\n          type: string\n        policy:\n          items:\n            $ref: '#/components/schemas/Policy'\n          type: array\n      type: object\n    CustomRoles:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/CustomRole'\n          type: array\n      type: object\n    Defaults:\n      description: Default values to be used when a new environment is created.\n      properties:\n        offVariation:\n          description: The index of the variation to be served when a flag is off.\n          type: integer\n        onVariation:\n          description: The index of the variation to be served when a flag's targeting is on (default variation).\n          type: integer\n      required:\n        - onVariation\n        - offVariation\n      type: object\n    Destination:\n      properties:\n        _id:\n          description: Unique destination ID.\n          example: 37ed9aad-de0a-4665-932e-41c35587aeea\n          type: string\n        _links:\n          $ref: '#/components/schemas/Links'\n        config:\n          description: destination-specific configuration.\n          example:\n            project: cool-project\n            topic: test\n          type: object\n        kind:\n          description: Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")\n          enum:\n            - google-pubsub\n            - kinesis\n            - mparticle\n            - segment\n          example: google-pubsub\n          type: string\n        name:\n          description: The destination name\n          example: Example Google Pub/Sub Destination\n          type: string\n        'on':\n          description: Whether the data export destination is on or not.\n          example: true\n          type: boolean\n        version:\n          example: 2\n          type: integer\n      type: object\n    DestinationAmazonKinesis:\n      properties:\n        region:\n          example: us-east-1\n          type: string\n        roleArn:\n          example: arn:aws:iam::123456789012:role/marketingadmin\n          type: string\n        streamName:\n          example: cat-stream\n          type: string\n      type: object\n    DestinationGooglePubSub:\n      properties:\n        project:\n          example: cool-project\n          type: string\n        topic:\n          example: test\n          type: string\n      type: object\n    DestinationMParticle:\n      properties:\n        apiKey:\n          example: apiKeyfromMParticle\n          type: string\n        environment:\n          example: production\n          type: string\n        secret:\n          example: mParticleSecret\n          type: string\n        userIdentity:\n          example: customer_id\n          type: string\n      type: object\n    DestinationSegment:\n      properties:\n        writeKey:\n          example: segmentWriteKey\n          type: string\n      type: object\n    Destinations:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/Destination'\n          type: array\n      type: object\n    Environment:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        apiKey:\n          description: The SDK key for backend LaunchDarkly SDKs.\n          example: XXX\n          type: string\n        approvalSettings:\n          description: Approval settings for an environment. Only appears if the approvals feature is enabled.\n          properties:\n            canApplyDeclinedChanges:\n              description: Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.\n              type: boolean\n            canReviewOwnRequest:\n              description: Whether requesters can approve or decline their own request. They may always comment.\n              type: boolean\n            minNumApprovals:\n              description: The number of approvals required before an approval request can be applied.\n              example: 2\n              format: int64\n              type: integer\n            required:\n              description: Whether any changes to flags in this environment will require approval.\n              type: boolean\n            serviceKind:\n              description: The approvals system used.\n              enum:\n                - launchdarkly\n                - service-now\n              type: string\n          type: object\n        color:\n          description: The swatch color for the environment.\n          example: '417505'\n          type: string\n        confirmChanges:\n          description: Determines if this environment requires confirmation for flag and segment changes.\n          example: false\n          type: boolean\n        defaultTrackEvents:\n          description: Set to true to send detailed event information for new flags.\n          example: false\n          type: boolean\n        defaultTtl:\n          description: The default TTL.\n          example: 0\n          type: number\n        key:\n          description: The key for the environment.\n          example: production\n          type: string\n        mobileKey:\n          description: The SDK key for mobile LaunchDarkly SDKs.\n          example: XXX\n          type: string\n        name:\n          description: The name of the environment.\n          example: Production\n          type: string\n        requireComments:\n          description: Determines if this environment requires comments for flag and segment changes.\n          example: false\n          type: boolean\n        secureMode:\n          description: Determines if this environment is in safe mode.\n          example: false\n          type: boolean\n        tags:\n          description: An array of tags for this environment.\n          items:\n            type: string\n          type: array\n      type: object\n    EnvironmentPost:\n      properties:\n        color:\n          description: A color swatch (as an RGB hex value with no leading '#', e.g. C8C8C8).\n          example: '417505'\n          type: string\n        confirmChanges:\n          description: Determines if this environment requires confirmation for flag and segment changes.\n          example: false\n          type: boolean\n        defaultTrackEvents:\n          description: Set to true to send detailed event information for newly created flags.\n          example: false\n          type: boolean\n        defaultTtl:\n          description: The default TTL for the new environment.\n          example: 0\n          type: number\n        key:\n          description: A project-unique key for the new environment.\n          example: dev\n          type: string\n        name:\n          description: The name of the new environment.\n          example: Development\n          type: string\n        requireComments:\n          description: Determines if this environment requires comments for flag and segment changes.\n          example: false\n          type: boolean\n        secureMode:\n          description: Determines whether the environment is in secure mode.\n          example: false\n          type: boolean\n        tags:\n          description: An array of tags for this environment.\n          example:\n            - tag1\n            - tag2\n          items:\n            type: string\n          type: array\n      required:\n        - name\n        - key\n        - color\n      type: object\n    EvaluationUsageError:\n      properties:\n        code:\n          example: not_found\n          type: string\n        message:\n          example: unknown environment\n          type: string\n      type: object\n    Events:\n      properties:\n        links:\n          $ref: '#/components/schemas/UsageLinks'\n      type: object\n    Fallthrough:\n      properties:\n        rollout:\n          $ref: '#/components/schemas/Rollout'\n        variation:\n          type: integer\n      type: object\n    FeatureFlag:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        _maintainer:\n          $ref: '#/components/schemas/Member'\n        _version:\n          example: 23\n          type: integer\n        archived:\n          description: Whether or not this flag is archived.\n          example: false\n          type: boolean\n        archivedDate:\n          description: A unix epoch time in milliseconds specifying the archived time of this flag.\n          example: 1443652232590\n          format: int64\n          type: integer\n        clientSideAvailability:\n          $ref: '#/components/schemas/ClientSideAvailability'\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the creation time of this flag.\n          example: 1443652232590\n          format: int64\n          type: integer\n        customProperties:\n          additionalProperties:\n            $ref: '#/components/schemas/CustomProperty'\n          description: A mapping of keys to CustomProperty entries.\n          example:\n            bugs:\n              name: Issue tracker ids\n              value:\n                - '123'\n                - '456'\n            deprecated:\n              name: Deprecated Date\n              value: []\n          type: object\n        defaults:\n          $ref: '#/components/schemas/Defaults'\n        description:\n          description: Description of the feature flag.\n          example: This flag controls whether test feature is turned on or not.\n          type: string\n        environments:\n          additionalProperties:\n            $ref: '#/components/schemas/FeatureFlagConfig'\n          type: object\n        goalIds:\n          description: An array goals from all environments associated with this feature flag\n          example:\n            - d7239405bd89c930e885aa76\n            - 405bc930e88d7239d895aa76\n          items:\n            type: string\n          type: array\n        includeInSnippet:\n          example: false\n          type: boolean\n        key:\n          example: test-feature\n          type: string\n        kind:\n          description: Whether the feature flag is a boolean flag or multivariate.\n          example: boolean\n          type: string\n        maintainerId:\n          description: The ID of the member that should maintain this flag.\n          example: 561c579cd8fd5c2704000001\n          type: string\n        name:\n          description: Name of the feature flag.\n          example: Test Feature\n          type: string\n        tags:\n          description: An array of tags for this feature flag.\n          example: []\n          items:\n            type: string\n          type: array\n        temporary:\n          description: Whether or not this flag is temporary.\n          example: false\n          type: boolean\n        variations:\n          description: The variations for this feature flag.\n          example:\n            - value: a\n            - value: b\n          items:\n            $ref: '#/components/schemas/Variation'\n          type: array\n      type: object\n    FeatureFlagApprovalRequest:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _version:\n          type: integer\n        allReviews:\n          items:\n            $ref: '#/components/schemas/FeatureFlagApprovalRequestReview'\n          type: array\n        appliedByMemberID:\n          description: The id of the member that applied the approval request\n          type: string\n        appliedDate:\n          description: A unix epoch time in milliseconds specifying the date the approval request was applied\n          type: integer\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the date the approval request was requested\n          type: integer\n        instructions:\n          $ref: '#/components/schemas/SemanticPatchInstruction'\n        notifyMemberIds:\n          description: Id of members to notify.\n          example:\n            - memberId\n            - memberId2\n          items:\n            type: string\n          type: array\n        requestorId:\n          description: The id of the member that requested the change\n          type: string\n        reviewStatus:\n          $ref: '#/components/schemas/FeatureFlagApprovalRequestReviewStatus'\n        status:\n          description: |\n            | Name     | Description |\n            | --------:| ----------- |\n            | pending  | the feature flag approval request has not been applied yet |\n            | completed| the feature flag approval request has been applied successfully |\n            | failed   | the feature flag approval request has been applied but the changes were not applied successfully |\n          enum:\n            - pending\n            - completed\n            - failed\n          type: string\n      type: object\n    FeatureFlagApprovalRequestReview:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the date the approval request was reviewed\n          type: integer\n        kind:\n          $ref: '#/components/schemas/FeatureFlagApprovalRequestReviewStatus'\n        memberId:\n          $ref: '#/components/schemas/Id'\n      type: object\n    FeatureFlagApprovalRequestReviewStatus:\n      description: |\n        | Name     | Description |\n        | --------:| ----------- |\n        | pending  | the feature flag approval request has not been reviewed yet |\n        | approved | the feature flag approval request has been approved and can now be applied |\n        | declined | the feature flag approval request has been declined and cannot be applied |\n      enum:\n        - pending\n        - approved\n        - declined\n      type: string\n    FeatureFlagApprovalRequests:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/FeatureFlagApprovalRequest'\n          type: array\n      type: object\n    FeatureFlagConfig:\n      properties:\n        _environmentName:\n          type: string\n        _site:\n          $ref: '#/components/schemas/Site'\n        archived:\n          type: boolean\n        fallthrough:\n          $ref: '#/components/schemas/Fallthrough'\n        lastModified:\n          example: 1469326565348\n          format: int64\n          type: integer\n        offVariation:\n          type: integer\n        'on':\n          type: boolean\n        prerequisites:\n          items:\n            $ref: '#/components/schemas/Prerequisite'\n          type: array\n        rules:\n          items:\n            $ref: '#/components/schemas/Rule'\n          type: array\n        salt:\n          example: YWx0ZXJuYXRlLnBhZ2U=\n          type: string\n        sel:\n          example: 45501b9314dc4641841af774cb038b96\n          type: string\n        targets:\n          items:\n            $ref: '#/components/schemas/Target'\n          type: array\n        trackEvents:\n          description: Set to true to send detailed event information for this flag.\n          example: false\n          type: boolean\n        trackEventsFallthrough:\n          description: Set to true to send detailed event information when targeting is enabled but no individual targeting rule is matched.\n          example: true\n          type: boolean\n        version:\n          example: 65\n          type: integer\n      type: object\n    FeatureFlagCopyObject:\n      properties:\n        currentVersion:\n          description: If the latest version of the flag matches provided version it will copy, otherwise it will return a conflict.\n          example: 65\n          type: integer\n        key:\n          description: The environment key to be used.\n          example: staging\n          type: string\n      required:\n        - key\n      type: object\n    FeatureFlagScheduledChange:\n      properties:\n        _id:\n          type: string\n        _version:\n          type: integer\n        executionDate:\n          description: A unix epoch time in milliseconds specifying the date the scheduled changes will be applied\n          type: integer\n        instructions:\n          $ref: '#/components/schemas/SemanticPatchInstruction'\n      type: object\n    FeatureFlagScheduledChanges:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/FeatureFlagScheduledChange'\n          type: array\n      type: object\n    FeatureFlagScheduledChangesConflicts:\n      properties:\n        instructions:\n          items:\n            properties:\n              conflicts:\n                items:\n                  $ref: '#/components/schemas/ScheduledChangesFeatureFlagConflict'\n                type: array\n              kind:\n                description: The name of the modification you would like to perform on a resource.\n                example: removeUserTargets\n                type: string\n          type: array\n      type: object\n    FeatureFlagStatus:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        default:\n          type: object\n        lastRequested:\n          example: '2021-01-29T17:36:31.055Z'\n          type: string\n        name:\n          description: |\n            | Name     | Description |\n            | --------:| ----------- |\n            | new      | the feature flag was created within the last 7 days, and has not been requested yet |\n            | active   | the feature flag was requested by your servers or clients within the last 7 days |\n            | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days |\n            | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |\n          enum:\n            - new\n            - active\n            - inactive\n            - launched\n          type: string\n      type: object\n    FeatureFlagStatusAcrossEnvironments:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        environments:\n          additionalProperties:\n            $ref: '#/components/schemas/FeatureFlagStatusForQueriedEnvironment'\n          type: object\n        key:\n          type: string\n      type: object\n    FeatureFlagStatusForQueriedEnvironment:\n      properties:\n        default:\n          type: object\n        lastRequested:\n          example: '2021-01-29T17:36:31.055Z'\n          type: string\n        name:\n          description: |\n            | Name     | Description |\n            | --------:| ----------- |\n            | new      | the feature flag was created within the last 7 days, and has not been requested yet |\n            | active   | the feature flag was requested by your servers or clients within the last 7 days |\n            | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days |\n            | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |\n          enum:\n            - new\n            - active\n            - inactive\n            - launched\n          type: string\n      type: object\n    FeatureFlagStatuses:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/FeatureFlagStatus'\n          type: array\n      type: object\n    FeatureFlags:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/FeatureFlag'\n          type: array\n        totalCount:\n          type: number\n      type: object\n    FlagListItem:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        _site:\n          $ref: '#/components/schemas/Site'\n        key:\n          type: string\n        name:\n          type: string\n      type: object\n    HierarchicalLinks:\n      properties:\n        parent:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n      type: object\n    Id:\n      description: The unique resource id.\n      example: 5a580a01b4ff89217bdf9dc1\n      type: string\n    Integration:\n      properties:\n        _links:\n          properties:\n            self:\n              $ref: '#/components/schemas/Link'\n          type: object\n        items:\n          items:\n            $ref: '#/components/schemas/IntegrationSubscription'\n          type: array\n      type: object\n    IntegrationSubscription:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/HierarchicalLinks'\n        _status:\n          properties:\n            errorCount:\n              example: 2\n              type: integer\n            lastSuccess:\n              description: A unix epoch time in milliseconds specifying the last time this integration was successfully used.\n              example: 1443652232590\n              format: int64\n              type: integer\n            successCount:\n              example: 6\n              type: integer\n          type: object\n        config:\n          description: A key-value mapping of configuration fields.\n          example:\n            apiKey: 582**************************116\n            hostURL: https://api.datadoghq.com\n          type: object\n        kind:\n          description: The type of integration associated with this configuration.\n          example: datadog\n          type: string\n        name:\n          description: The user-defined name associated with this configuration.\n          example: V2\n          type: string\n        'on':\n          description: Whether or not the integration is currently active.\n          example: true\n          type: boolean\n        statements:\n          items:\n            $ref: '#/components/schemas/Statement'\n          type: array\n        tags:\n          description: An array of tags for this integration configuration.\n          items:\n            type: string\n          type: array\n      type: object\n    Integrations:\n      properties:\n        _links:\n          description: A mapping of integration types to their respective API endpoints.\n          example:\n            appdynamics:\n              href: /api/v2/integrations/appdynamics\n              type: application/json\n            splunk:\n              href: /api/v2/integrations/splunk\n              type: application/json\n          type: object\n        items:\n          items:\n            $ref: '#/components/schemas/IntegrationSubscription'\n          type: array\n      type: object\n    Link:\n      properties:\n        href:\n          example: /api/v2/endpoint\n          type: string\n        type:\n          example: application/json\n          type: string\n      type: object\n    Links:\n      properties:\n        next:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n      type: object\n    MAU:\n      properties:\n        _links:\n          $ref: '#/components/schemas/UsageLinks'\n        metadata:\n          items:\n            $ref: '#/components/schemas/StreamBySDKLinksMetadata'\n          type: array\n        series:\n          items:\n            $ref: '#/components/schemas/StreamUsageSeries'\n          type: array\n      type: object\n    MAUMetadata:\n      type: object\n    MAUbyCategory:\n      properties:\n        _links:\n          $ref: '#/components/schemas/StreamBySDKLinks'\n        metadata:\n          items:\n            $ref: '#/components/schemas/MAUMetadata'\n          type: array\n        series:\n          items:\n            $ref: '#/components/schemas/StreamUsageSeries'\n          type: array\n      type: object\n    Member:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        _pendingInvite:\n          type: boolean\n        _verified:\n          type: boolean\n        customRoles:\n          items:\n            $ref: '#/components/schemas/Id'\n          type: array\n        email:\n          example: user@launchdarkly.com\n          type: string\n        firstName:\n          example: Alan\n          type: string\n        isBeta:\n          type: boolean\n        lastName:\n          example: Turing\n          type: string\n        role:\n          $ref: '#/components/schemas/Role'\n      type: object\n    Members:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/Member'\n          type: array\n        totalCount:\n          type: number\n      type: object\n    PatchOperation:\n      properties:\n        op:\n          example: replace\n          type: string\n        path:\n          example: /name\n          type: string\n        value:\n          example: My resource name\n          type: object\n      required:\n        - op\n        - path\n        - value\n      type: object\n    Policy:\n      properties:\n        actions:\n          items:\n            description: An action to perform on a resource.\n            example: updateOn\n            type: string\n          type: array\n        effect:\n          description: Effect of the policy - allow or deny.\n          example: deny\n          type: string\n        notActions:\n          description: Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.\n          items:\n            description: An action to perform on a resource.\n            example: updateOn\n            type: string\n          type: array\n        notResources:\n          description: Targeted resource will be those resources NOT in this list. The \"resources\" field must be empty to use this field.\n          items:\n            description: A resource specifier string\n            example: proj/*:env/*:flag/my-flag\n            type: string\n          type: array\n        resources:\n          items:\n            description: A resource specifier string\n            example: proj/*:env/*:flag/my-flag\n            type: string\n          type: array\n      type: object\n    Prerequisite:\n      properties:\n        key:\n          type: string\n        variation:\n          type: integer\n      type: object\n    Project:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        defaultClientSideAvailability:\n          $ref: '#/components/schemas/ClientSideAvailability'\n        environments:\n          items:\n            $ref: '#/components/schemas/Environment'\n          type: array\n        includeInSnippetByDefault:\n          example: true\n          type: boolean\n        key:\n          example: zentasks\n          type: string\n        name:\n          example: Zentasks\n          type: string\n        tags:\n          description: An array of tags for this project.\n          items:\n            type: string\n          type: array\n      type: object\n    Projects:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/Project'\n          type: array\n      type: object\n    RelayProxyConfig:\n      properties:\n        _creator:\n          $ref: '#/components/schemas/Member'\n        _id:\n          $ref: '#/components/schemas/Id'\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the creation time of this relay proxy configuration\n          example: 1443652232590\n          format: int64\n          type: integer\n        displayKey:\n          description: The last 4 digits of the unique secret key for this relay proxy configuration\n          example: 66eo\n          type: string\n        fullKey:\n          description: Full secret key. Only included if creating or resetting the relay proxy configuration\n          example: rel-8a3a773d-b75e-48eb-a850-492cda9266eo\n          type: string\n        lastModified:\n          description: A unix epoch time in milliseconds specifying the last time this relay proxy configuration was modified\n          example: 1469326565348\n          format: int64\n          type: integer\n        name:\n          description: A human-friendly name for the relay proxy configuration\n          example: My relay proxy config\n          type: string\n        policy:\n          items:\n            $ref: '#/components/schemas/Policy'\n          type: array\n      required:\n        - _id\n        - _creator\n        - name\n        - policy\n        - displayKey\n        - creationDate\n        - lastModified\n      type: object\n    RelayProxyConfigs:\n      properties:\n        items:\n          items:\n            $ref: '#/components/schemas/RelayProxyConfig'\n          type: array\n      type: object\n    Role:\n      enum:\n        - writer\n        - reader\n        - admin\n        - owner\n      type: string\n    Rollout:\n      properties:\n        bucketBy:\n          type: string\n        variations:\n          items:\n            $ref: '#/components/schemas/WeightedVariation'\n          type: array\n      type: object\n    Rule:\n      properties:\n        _id:\n          type: string\n        clauses:\n          items:\n            $ref: '#/components/schemas/Clause'\n          type: array\n        description:\n          type: string\n        rollout:\n          $ref: '#/components/schemas/Rollout'\n        trackEvents:\n          type: boolean\n        variation:\n          type: integer\n      type: object\n    ScheduledChangesFeatureFlagConflict:\n      properties:\n        _id:\n          description: Feature flag scheduled change id this change will conflict with\n          type: string\n        reason:\n          description: Feature flag scheduled change conflict reason\n          type: string\n      type: object\n    SemanticPatchInstruction:\n      description: A semantic patch instruction\n      items:\n        properties:\n          kind:\n            description: The name of the modification you would like to perform on a resource.\n            example: removeUserTargets\n            type: string\n      type: array\n    SemanticPatchOperation:\n      properties:\n        comment:\n          example: This is a comment string\n          type: string\n        instructions:\n          $ref: '#/components/schemas/SemanticPatchInstruction'\n      required:\n        - instructions\n      type: object\n    Site:\n      properties:\n        href:\n          example: /features/sort.order\n          type: string\n        type:\n          example: text/html\n          type: string\n      type: object\n    Statement:\n      properties:\n        actions:\n          items:\n            description: An action to perform on a resource.\n            example: updateOn\n            type: string\n          type: array\n        effect:\n          enum:\n            - allow\n            - deny\n          type: string\n        notActions:\n          description: Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.\n          items:\n            description: An action to perform on a resource.\n            example: updateOn\n            type: string\n          type: array\n        notResources:\n          description: Targeted resource will be those resources NOT in this list. The \"resources\" field must be empty to use this field.\n          items:\n            description: A resource specifier string\n            example: proj/*:env/*:flag/my-flag\n            type: string\n          type: array\n        resources:\n          items:\n            description: A resource specifier string\n            example: proj/*:env/*:flag/my-flag\n            type: string\n          type: array\n      type: object\n    Stream:\n      properties:\n        _links:\n          $ref: '#/components/schemas/StreamUsageLinks'\n        metadata:\n          items:\n            $ref: '#/components/schemas/StreamUsageMetadata'\n          type: array\n        series:\n          items:\n            $ref: '#/components/schemas/StreamUsageSeries'\n          type: array\n      type: object\n    StreamBySDK:\n      properties:\n        _links:\n          $ref: '#/components/schemas/StreamBySDKLinks'\n        metadata:\n          items:\n            $ref: '#/components/schemas/StreamBySDKLinksMetadata'\n          type: array\n        series:\n          items:\n            $ref: '#/components/schemas/StreamUsageSeries'\n          type: array\n      type: object\n    StreamBySDKLinks:\n      properties:\n        parent:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n      type: object\n    StreamBySDKLinksMetadata:\n      properties:\n        sdk:\n          example: ruby\n          type: string\n        source:\n          example: server\n          type: string\n        version:\n          example: 5.4.3\n          type: string\n      type: object\n    StreamLinks:\n      properties:\n        parent:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        subseries:\n          description: Links to endpoints that are in the request path.\n          items:\n            $ref: '#/components/schemas/Link'\n          type: array\n      type: object\n    StreamSDKVersion:\n      properties:\n        _links:\n          $ref: '#/components/schemas/StreamBySDKLinks'\n        sdkVersions:\n          items:\n            $ref: '#/components/schemas/StreamSDKVersionData'\n          type: array\n      type: object\n    StreamSDKVersionData:\n      properties:\n        sdk:\n          description: The language of the sdk\n          example: ruby\n          type: string\n        version:\n          description: The version of the sdk\n          example: 5.4.3\n          type: string\n      type: object\n    StreamUsageError:\n      properties:\n        code:\n          example: not_found\n          type: string\n        message:\n          example: Stream source not found\n          type: string\n      type: object\n    StreamUsageLinks:\n      properties:\n        parent:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        subseries:\n          description: The following links that are in the response.\n          items:\n            $ref: '#/components/schemas/Link'\n          type: array\n      type: object\n    StreamUsageMetadata:\n      properties:\n        sdk:\n          description: The language of the sdk\n          example: ruby\n          type: string\n        source:\n          example: server\n          type: string\n        version:\n          description: The version of the SDK\n          example: 5.4.3\n          type: string\n      type: object\n    StreamUsageSeries:\n      properties:\n        '0':\n          description: A key corresponding to a time series data point.\n          example: 0\n          format: int64\n          type: integer\n        time:\n          description: A unix epoch time in milliseconds specifying the creation time of this flag.\n          example: 1551740400000\n          format: int64\n          type: integer\n      type: object\n    Streams:\n      properties:\n        _links:\n          $ref: '#/components/schemas/StreamUsageLinks'\n      type: object\n    Target:\n      properties:\n        values:\n          items:\n            example: '\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\"'\n            type: string\n          type: array\n        variation:\n          type: integer\n      type: object\n    Token:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        _member:\n          $ref: '#/components/schemas/Member'\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the creation time of this access token.\n          example: 1443652232590\n          format: int64\n          type: integer\n        customRoleIds:\n          description: A list of custom role IDs to use as access limits for the access token\n          items:\n            type: string\n          type: array\n        defaultApiVersion:\n          description: The default API version for this token\n          type: integer\n        inlineRole:\n          items:\n            $ref: '#/components/schemas/Statement'\n          type: array\n        lastModified:\n          description: A unix epoch time in milliseconds specifying the last time this access token was modified.\n          example: 1469326565348\n          format: int64\n          type: integer\n        lastUsed:\n          description: A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.\n          example: 1469326565348\n          format: int64\n          type: integer\n        memberId:\n          $ref: '#/components/schemas/Id'\n        name:\n          description: A human-friendly name for the access token\n          example: My access token\n          type: string\n        ownerId:\n          $ref: '#/components/schemas/Id'\n        role:\n          description: The name of a built-in role for the token\n          example: writer\n          type: string\n        serviceToken:\n          description: Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens\n          type: boolean\n        token:\n          description: The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.\n          example: '3243'\n          type: string\n      type: object\n    Tokens:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/Token'\n          type: array\n      type: object\n    UnboundedSegmentTargetChanges:\n      properties:\n        add:\n          description: Users to add to this list of targets\n          example:\n            - user@launchdarkly.com\n          items:\n            type: string\n          type: array\n        remove:\n          description: Users to remove from this list of targets\n          example: []\n          items:\n            type: string\n          type: array\n      type: object\n    Usage:\n      properties:\n        _links:\n          $ref: '#/components/schemas/UsageLinks'\n        series:\n          items:\n            $ref: '#/components/schemas/StreamUsageSeries'\n          type: array\n      type: object\n    UsageError:\n      properties:\n        message:\n          example: This is a beta API, you must pass beta in the LD-API-Version header to use it.\n          type: string\n      type: object\n    UsageLinks:\n      properties:\n        parent:\n          $ref: '#/components/schemas/Link'\n        self:\n          $ref: '#/components/schemas/Link'\n        subseries:\n          description: The following links that are in the response.\n          items:\n            $ref: '#/components/schemas/Link'\n          type: array\n      type: object\n    User:\n      properties:\n        anonymous:\n          type: boolean\n        avatar:\n          type: string\n        country:\n          type: string\n        custom:\n          example:\n            company: example.com\n          type: object\n        email:\n          type: string\n        firstName:\n          type: string\n        ip:\n          type: string\n        key:\n          example: a00bea\n          type: string\n        lastName:\n          type: string\n        name:\n          example: Bob Loblaw\n          type: string\n        secondary:\n          type: string\n      type: object\n    UserFlagSetting:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        _value:\n          description: The most important attribute in the response. The _value is the current setting for the user. For a boolean feature toggle, this will be true, false, or null if there is no defined fallthrough value.\n          example: true\n          type: boolean\n        setting:\n          description: The setting attribute indicates whether you've explicitly targeted this user to receive a particular variation. For example, if you have explicitly turned off a feature toggle for a user, setting will be false. A setting of null means that you haven't assigned that user to a specific variation.\n          example: null\n          type: boolean\n      type: object\n    UserFlagSettings:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          additionalProperties:\n            $ref: '#/components/schemas/UserFlagSetting'\n          example:\n            alternate.page:\n              _links:\n                self:\n                  href: /api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page\n                  type: application/json\n              _value: false,\n              setting: null\n            sort.order:\n              _links:\n                _value: true\n                self:\n                  href: /api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order\n                  type: application/json\n                setting: null\n          type: object\n      type: object\n    UserRecord:\n      properties:\n        avatar:\n          example: https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\n          type: string\n        environmentId:\n          example: 54ac2d97de674204ddd61096\n          type: string\n        lastPing:\n          example: '2021-01-29T17:36:31.056Z'\n          type: string\n        ownerId:\n          $ref: '#/components/schemas/Id'\n        user:\n          $ref: '#/components/schemas/User'\n      type: object\n    UserSegment:\n      properties:\n        _flags:\n          items:\n            $ref: '#/components/schemas/FlagListItem'\n          readOnly: true\n          type: array\n        _links:\n          $ref: '#/components/schemas/Links'\n        creationDate:\n          description: A unix epoch time in milliseconds specifying the creation time of this flag.\n          example: 1443652232590\n          format: int64\n          type: integer\n        description:\n          description: Description of the user segment.\n          example: Users in this segment can access beta features.\n          type: string\n        excluded:\n          description: An array of user keys that should not be included in this segment, unless they are also listed in \"included\".\n          items:\n            type: string\n          type: array\n        included:\n          description: An array of user keys that are included in this segment.\n          items:\n            type: string\n          type: array\n        key:\n          description: Unique identifier for the user segment.\n          example: beta-testers\n          type: string\n        name:\n          description: Name of the user segment.\n          example: Beta Testers\n          type: string\n        rules:\n          description: An array of rules that can cause a user to be included in this segment.\n          items:\n            $ref: '#/components/schemas/UserSegmentRule'\n          type: array\n        tags:\n          description: An array of tags for this user segment.\n          example:\n            - dev\n            - ops\n          items:\n            type: string\n          type: array\n        unbounded:\n          description: Controls whether this segment can support unlimited numbers of users. Requires the beta API and additional setup. Include/exclude lists in this payload are not used in unbounded segments.\n          example: false\n          type: boolean\n        version:\n          type: integer\n      required:\n        - key\n        - name\n        - creationDate\n      type: object\n    UserSegmentRule:\n      properties:\n        bucketBy:\n          type: string\n        clauses:\n          items:\n            $ref: '#/components/schemas/Clause'\n          type: array\n        weight:\n          type: integer\n      type: object\n    UserSegments:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/UserSegment'\n          type: array\n      type: object\n    UserTargetingExpirationForFlag:\n      properties:\n        _id:\n          type: string\n        _links:\n          $ref: '#/components/schemas/Links'\n        _resourceId:\n          $ref: '#/components/schemas/UserTargetingExpirationResourceIdForFlag'\n        _version:\n          type: integer\n        expirationDate:\n          description: Unix epoch time in milliseconds specifying the expiration date\n          example: 1735689600000\n          format: int64\n          type: integer\n        userKey:\n          description: Unique identifier for the user\n          type: string\n        variationId:\n          description: the ID of the variation that the user is targeted on a flag\n          type: string\n      type: object\n    UserTargetingExpirationForFlags:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/UserTargetingExpirationForFlag'\n          type: array\n      type: object\n    UserTargetingExpirationForSegment:\n      properties:\n        _id:\n          type: string\n        _links:\n          $ref: '#/components/schemas/Links'\n        _resourceId:\n          $ref: '#/components/schemas/UserTargetingExpirationResourceIdForFlag'\n        _version:\n          type: integer\n        expirationDate:\n          description: Unix epoch time in milliseconds specifying the expiration date\n          example: 1735689600000\n          format: int64\n          type: integer\n        targetType:\n          description: either the included or excluded variation that the user is targeted on a segment\n          type: string\n        userKey:\n          description: Unique identifier for the user\n          type: string\n      type: object\n    UserTargetingExpirationOnFlagsForUser:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/UserTargetingExpirationForFlag'\n          type: array\n      type: object\n    UserTargetingExpirationResourceIdForFlag:\n      properties:\n        environmentKey:\n          type: string\n        flagKey:\n          type: string\n        key:\n          type: string\n        kind:\n          type: string\n        projectKey:\n          type: string\n      type: object\n    Users:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/UserRecord'\n          type: array\n        totalCount:\n          example: 3\n          type: number\n      type: object\n    Variation:\n      properties:\n        _id:\n          example: 24b32dd3-0ba6-46ee-86af-230eebf3c7cb\n          type: string\n        description:\n          example: The true variation\n          type: string\n        name:\n          example: 'True'\n          type: string\n        value:\n          type: object\n      required:\n        - value\n      type: object\n    Webhook:\n      properties:\n        _id:\n          $ref: '#/components/schemas/Id'\n        _links:\n          $ref: '#/components/schemas/Links'\n        name:\n          description: The name of the webhook.\n          example: Example hook\n          type: string\n        'on':\n          description: Whether this webhook is enabled or not.\n          example: true\n          type: boolean\n        secret:\n          description: If defined, the webhooks post request will include a X-LD-Signature header whose value will contain an HMAC SHA256 hex digest of the webhook payload, using the secret as the key.\n          example: frobozz\n          type: string\n        statements:\n          items:\n            $ref: '#/components/schemas/Statement'\n          type: array\n        tags:\n          description: Tags assigned to this webhook.\n          items:\n            example: []\n            type: string\n          type: array\n        url:\n          description: The URL of the remote webhook.\n          example: https://example.com/example\n          type: string\n      type: object\n    Webhooks:\n      properties:\n        _links:\n          $ref: '#/components/schemas/Links'\n        items:\n          items:\n            $ref: '#/components/schemas/Webhook'\n          type: array\n      type: object\n    WeightedVariation:\n      properties:\n        variation:\n          type: integer\n        weight:\n          type: integer\n      type: object\n",
			"canonicalURL": "/github.com/ballerina-platform/openapi-connectors@d8de4a705adce6beeffb8dd580f8d61a7d2662dc/-/blob/openapi/launchdarkly/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/ballerina-platform/openapi-connectors/blob/d8de4a705adce6beeffb8dd580f8d61a7d2662dc/openapi/launchdarkly/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: requestBodies: \"patchExpiringUserTargetsSemanticpatchwithcomment\": parse content: application/json: schema: parse schema: at 1:9807: object cannot contain 'items' field"
}