{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/theia-ide/trace-server-protocol"
		},
		"file": {
			"name": "API.yaml",
			"size": 0,
			"path": "API.yaml",
			"byteSize": 78410,
			"content": "###############################################################################\n# Copyright (c) 2018, 2021 Ericsson\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n###############################################################################\nopenapi: \"3.0.2\"\ninfo:\n  description: Open source REST API for viewing and analyzing any type of logs or traces. Its goal is to provide models to populate views, graphs, metrics, and more to help extract useful information from traces, in a way that is more user-friendly and informative than huge text dumps.\n  version: 0.1.0\n  title: Trace Server Protocol\n  termsOfService: http://tracecompass.org/\n  contact:\n    email: tracecompass-dev@eclipse.org\n  license:\n    name: Apache 2\n    url: http://www.apache.org/licenses/\nservers:\n  - url: \"https://localhost:8080/tsp/api\"\ntags:\n  - name: Traces\n    description: How to manage physical traces on your server.\n  - name: Experiments\n    description: How to manage experiments on your server, an experiment represent a collection of traces, which can produce output models.\n  - name: Bookmarks\n    description: How to bookmark areas of interest in the trace.\n  - name: Data Tree\n    description: Learn about querying generic data tree models\n  - name: XY\n    description: Learn about querying XY models\n  - name: TimeGraph\n    description: Learn about querying Time Graph models.\n  - name: Virtual Tables\n    description: Learn about querying virtual table models (e.g. Events Table).\n  - name: Styles\n    description: Retrieve styles for different outputs\n  - name: Annotations\n    description: Retrieve annotations for different outputs\n  - name: Filters\n    description: How to filter and query\n  - name: Features\n    description: Discover the features which are available on a given server.\n  - name: Diagnostic\n    description: Refer to the server's status\npaths:\n  /traces:\n    get:\n      tags:\n        - Traces\n      summary: Get the list of physical traces imported on the server.\n      operationId: getTraces\n      responses:\n        200:\n          description: Returns a list of traces\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/TraceModel\"\n    post:\n      tags:\n        - Traces\n      summary: Import a trace\n      description: Import a trace to the trace server.\n        Return some base information once imported.\n      operationId: addTrace\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                URI:\n                  description: URI of the trace, not necessary if the trace is uploaded via the endpoint\n                  type: string\n                name:\n                  description: The name of the trace in the server, to override the default name\n                  type: string\n                typeID:\n                  description: The trace type's id, to force the use of a parser / disambiguate the trace type.\n                  type: string\n              required:\n                - URI\n      responses:\n        200:\n          description: The trace has been successfully added to the trace server.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TraceModel\"\n        404:\n          description: \"No trace available at path\"\n        406:\n          description: \"Not acceptable: cannot read this trace type\"\n        409:\n          description: \"Conflict: there was already a trace with this name\"\n  /traces/{traceUUID}:\n    delete:\n      tags:\n        - Traces\n      summary: Remove a trace from the server. By default it does not delete the trace from disk.\n      operationId: removeTrace\n      parameters:\n        - name: traceUUID\n          in: path\n          description: The unique identifier of the trace in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: deleteTrace\n          in: query\n          description: Indicate if the trace should be deleted from disk or not (false by default)\n          required: false\n          schema:\n            type: boolean\n            default: false\n        - name: removeCache\n          in: query\n          description:\n            Indicate if the cache or supplementary files should be removed (false by default).\n            If deleteTrace=true, this parameter will also be true.\n          required: false\n          schema:\n            type: boolean\n            default: false\n      responses:\n        200:\n          description: The trace was successfully deleted\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/TraceModel\"\n        204:\n          description: There was no trace with this name to close / delete\n  /experiments:\n    get:\n      tags:\n        - Experiments\n      summary: Get the list of experiments on the server\n      operationId: getExperiments\n      responses:\n        200:\n          description: Returns a list of experiments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Experiment\"\n    post:\n      summary: Create a new experiment on the server\n      operationId: postExperiment\n      tags:\n        - Experiments\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: The name to give this experiment\n                  type: string\n                traces:\n                  description: The unique identifiers of the traces to encapsulate in this experiment\n                  type: array\n                  items:\n                    type: string\n                    format: uuid\n              required:\n                - name\n                - traces\n      responses:\n        200:\n          description: The Experiment was successfully created\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n  /experiments/{expUUID}:\n    get:\n      summary: Get the Model object for an experiment\n      operationId: getExperiment\n      tags:\n        - Experiments\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to modify\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Return the experiment model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n        400:\n          description: No such experiment\n    put:\n      summary: Update an experiment's content and name.\n      operationId: putExperiment\n      tags:\n        - Experiments\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to modify\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: name\n          in: query\n          description: The name to give this experiment\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Additional information to update an experiment\n        required: false\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                expTypeID:\n                  description: Type ID to apply to this experiment\n                  type: string\n                traces:\n                  description: Traces to modify in this experiment\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      traceUUID:\n                        description: The unique identifier of the trace\n                        type: string\n                        format: uuid\n                      timeOffset:\n                        description: Time offset to apply to this trace\n                        type: integer\n                        format: int64\n                      action:\n                        description: Action to perform on the given trace (add or remove from the experiment)\n                        type: string\n                        enum: [add, remove]\n                        default: add\n                    required:\n                      - traceUUID\n                      - action\n      responses:\n        200:\n          description: The Experiment was successfully modified\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n    delete:\n      tags:\n        - Experiments\n      summary: Remove an Experiment from the server.\n      operationId: deleteExperiment\n      parameters:\n        - name: expUUID\n          in: path\n          description: The unique identifier of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: The trace was successfully deleted, return the deleted experiment.\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Experiment\"\n        204:\n          description: There was no experiment with this name to close / delete\n  /experiments/{expUUID}/outputs:\n    get:\n      tags:\n        - Experiments\n      summary: Get the list of outputs for this experiment\n      operationId: getOutputs\n      parameters:\n        - name: expUUID\n          in: path\n          description: The unique identifier of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns a list of output provider descriptors\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  experiment:\n                    $ref: \"#/components/schemas/Experiment\"\n                  providers:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/OutputDescriptor\"\n        404:\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/{outputID}:\n    get:\n      tags:\n        - Experiments\n      summary: Get the output descriptor for this experiment and output\n      operationId: getOutput\n      parameters:\n        - name: expUUID\n          in: path\n          description: The unique identifier of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: The name of the output provider to query\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the output provider descriptor\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  experiment:\n                    $ref: \"#/components/schemas/Experiment\"\n                  providers:\n                    type: object\n                    items:\n                      $ref: \"#/components/schemas/OutputDescriptor\"\n        404:\n          description: No such experiment or output\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/bookmarks:\n    get:\n      summary: Get the collection of bookmarks for an experiment.\n      operationId: getExperimentBookmarks\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns a list of bookmarks for this trace\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Bookmark\"\n        404:\n          description: No such experiment\n          content:\n            application/json:\n              schema:\n                type: string\n    post:\n      summary: Add a bookmark to an experiment.\n      operationId: postExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: The bookmark to post\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bookmark\"\n      responses:\n        200:\n          description: Returns the bookmark's Id\n          content:\n            application/json:\n              schema:\n                type: integer\n        404:\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/bookmarks/{bookmarkId}:\n    get:\n      summary: Get a specific bookmark from this experiment\n      operationId: getExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: bookmarkId\n          in: path\n          description: The unique identifier of the bookmark to get\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns the queried bookmark\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bookmark\"\n        404:\n          description: No such experiment / No such bookmark\n          content:\n            application/json:\n              schema:\n                type: string\n    put:\n      summary: Modify a bookmark\n      operationId: putExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: bookmarkId\n          in: path\n          description: The unique identifier of the bookmark to modify\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: The bookmark to update\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Bookmark\"\n      responses:\n        200:\n          description: Returns the bookmark's Id\n          content:\n            application/json:\n              schema:\n                type: integer\n        404:\n          description: No such trace\n          content:\n            application/json:\n              schema:\n                type: string\n    delete:\n      summary: Delete a bookmark\n      operationId: deleteExperimentBookmark\n      tags:\n        - Bookmarks\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: bookmarkId\n          in: path\n          description: The unique identifier of the bookmark to delete\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: Returns the deleted bookmark\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Bookmark\"\n        404:\n          description: No such trace or bookmark\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/data/{outputID}/tree:\n    post:\n      tags:\n        - Data Tree\n      summary: API to get a data tree.\n      description: Unique entry point for output providers,\n        to get the tree of visible entries\n      operationId: getDataTreeEntry\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the data tree.\n          When 'requested_times' is absent the tree for the full range is returned. When present it specifies a range as [start, end].\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111111111, 222222222]\n      responses:\n        200:\n          description: Returns a list of data tree entries. The returned model must be consistent, parentIds must refer to a parent which exists in the model.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        $ref: \"#/components/schemas/EntryModel\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/XY/{outputID}/tree:\n    post:\n      tags:\n        - XY\n      summary: API to get the XY tree.\n      description: Unique entry point for output providers,\n        to get the tree of visible entries\n      operationId: getXYEntry\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the XY tree.\n          When 'requested_times' is absent the tree for the full range is returned. When present it specifies a range as [start, end].\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111111111, 222222222]\n      responses:\n        200:\n          description: Returns a list of XY entries. The returned model must be consistent, parentIds must refer to a parent which exists in the model.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        $ref: \"#/components/schemas/EntryModel\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/XY/{outputID}/xy:\n    post:\n      tags:\n        - XY\n      summary: API to get the XY model.\n      description: Unique endpoint for all xy models,\n        ensures that the same template is followed for all endpoints.\n      operationId: getXY\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the XY model.\n          The array 'requested_times' is the explicit array of requested sample times.\n          The array 'requested_items' is the list of entryId or seriesId being requested.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_items:\n                      type: array\n                      items:\n                        type: integer\n                  required:\n                    - requested_times\n                    - requested_items\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111200000, 111300000, 111400000, 111500000]\n                  requested_items: [1, 2]\n      responses:\n        200:\n          description: Return the queried XYResponse\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        $ref: \"#/components/schemas/XYModel\"\n        404:\n          description: Trace not found\n          content:\n            application/json:\n              schema:\n                type: string\n        405:\n          description: Analysis not possible for this trace\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/XY/{outputID}/tooltip:\n    get:\n      tags:\n        - XY\n      summary: API to get the XY tooltips.\n      description: Endpoint to retrieve tooltips for XY\n      operationId: getXYTooltip\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n        - name: xValue\n          in: query\n          description: The xValue for which to get the tooltip\n          required: true\n          schema:\n            type: integer\n        - name: yValue\n          in: query\n          description: The yValue for which to get the tooltip\n          schema:\n            type: number\n        - name: entryId\n          in: query\n          description: The entryId or seriesId for which to get the tooltip\n          schema:\n            type: integer\n      responses:\n        200:\n          description: Returns a list of tooltip keys to values\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    key:\n                      type: string\n                    value:\n                      type: string\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputID}/tree:\n    post:\n      tags:\n        - TimeGraph\n      summary: API to get the Time Graph tree.\n      description: Unique entry point for output providers,\n        to get the tree of visible entries\n      operationId: getTimeGraphEntry\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph tree.\n          When 'requested_times' is absent the tree for the full range is returned. When present it specifies a range as [start, end].\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111111111, 222222222]\n      responses:\n        200:\n          description: Returns a list Time graph entries. The returned model must be consistent, parentIds must refer to a parent which exists in the model.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        allOf:\n                          - $ref: \"#/components/schemas/EntryModel\"\n                          - type: object\n                            properties:\n                              entries:\n                                type: array\n                                items:\n                                  $ref: \"#/components/schemas/TimeGraphEntry\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputID}/states:\n    post:\n      tags:\n        - TimeGraph\n      summary: API to get the Time Graph states\n      operationId: getTimeGraphStates\n      description: Unique entry point for all TimeGraph states,\n        ensures that the same template is followed for all views\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph states.\n          The array 'requested_times' is the explicit array of requested sample times.\n          The array 'requested_items' is the list of entryId being requested.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_items:\n                      type: array\n                      items:\n                        type: integer\n                  required:\n                    - requested_times\n                    - requested_items\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111200000, 111300000, 111400000, 111500000]\n                  requested_items: [1, 2]\n      responses:\n        200:\n          description: Returns a list of time graph row\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        $ref: \"#/components/schemas/TimeGraphModel\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputID}/arrows:\n    post:\n      tags:\n        - TimeGraph\n      summary: API to get the Time Graph arrows\n      operationId: getTimeGraphArrows\n      description: Unique entry point for all TimeGraph models,\n        ensures that the same template is followed for all models\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph arrows.\n          The array 'requested_times' is the explicit array of requested sample times.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                  required:\n                    - requested_times\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111200000, 111300000, 111400000, 111500000]\n      responses:\n        200:\n          description: Returns a sampled list of TimeGraph arrows\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/TimeGraphArrow\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputID}/tooltip:\n    post:\n      tags:\n        - TimeGraph\n      summary: API to get a Time Graph tooltip.\n      description: Endpoint to retrieve tooltips for time graph\n      operationId: getTimeGraphTooltip\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the timegraph tooltip.\n          The array 'requested_times' is an array with a single timestamp.\n          The array 'requested_items' is an array with a single entryId being requested.\n          The object 'requested_element' is the element for which the tooltip is requested.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_items:\n                      type: array\n                      items:\n                        type: integer\n                    requested_element:\n                      $ref: \"#/components/schemas/Element\"\n                  required:\n                    - requested_times\n                    - requested_items\n                    - requested_element\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111200000]\n                  requested_items: [1]\n                  requested_element:\n                    { elementType: state, time: 111100000, duration: 100000 }\n      responses:\n        200:\n          description: Returns a list of tooltip keys to values\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    key:\n                      type: string\n                    value:\n                      type: string\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/timeGraph/{outputID}/navigate/states:\n    post:\n      tags:\n        - TimeGraph\n      summary: Tentative API for TimeGraph navigation\n      operationId: navigateStates\n      description: Endpoint to retrieve the next / previous corresponding states\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n        - name: direction\n          in: query\n          description: Direction of the navigation\n          required: true\n          schema:\n            type: string\n            enum: [next, previous]\n      requestBody:\n        description:\n          Query parameters to fetch the next / previous timegraph state.\n          The 'requested_times' array contains the currently selected time.\n          The 'requested_times' array contains the currently selected entryId.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_items:\n                      type: array\n                      items:\n                        type: integer\n                  required:\n                    - requested_times\n                    - requested_items\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111111111]\n                  requested_items: [1]\n      responses:\n        200:\n          description: Returns a list of time graph row\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      desiredTime:\n                        type: integer\n                        format: int64\n                      desiredEntry:\n                        type: integer\n                        format: int64\n                      model:\n                        type: array\n                        items:\n                          $ref: \"#/components/schemas/TimeGraphModel\"\n  /experiments/{expUUID}/outputs/table/{outputID}/columns:\n    post:\n      tags:\n        - Virtual Tables\n      summary: API to get table columns.\n      description: Unique entry point for output providers, to get the column entries.\n      operationId: getEventsTableEntry\n      parameters:\n        - name: expUUID\n          in: path\n          description: UUID of the experiment to query\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: ID of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the table columns.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters: {}\n      responses:\n        200:\n          description: Returns a list of table headers.\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                type: object\n                properties:\n                  model:\n                    type: array\n                    items:\n                      $ref: \"#/components/schemas/ColumnHeaderEntry\"\n        404:\n          description: Experiment or output provider not found\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/table/{outputID}/lines:\n    post:\n      tags:\n        - Virtual Tables\n      summary: API to get virtual table lines\n      operationId: getLines\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: The name of the table provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the table lines.\n          One of 'requested_table_index' or 'requested_times' should be present. If 'requested_table_index' is used it is the starting index of the lines to be returned. If 'requested_times' is used it should contain an array with a single timestamp and the returned lines starting at the given timestamp (or the nearest following) will be returned.\n          The 'requested_table_count' is the number of lines that should be returned.\n          When 'requested_table_column_ids' is absent all columns are returned. When present it is the array of requested columnIds.\n          Use 'table_search_expressions' for search providing a map of \u003ccolumnId, regular expression\u003e. Returned lines that match the search expression will be tagged.\n          Use 'table_search_direction' to specify search direction [NEXT, PREVIOUS]. If present, 'requested_table_count' events are returned starting from the first matching event. Matching and not matching events are returned. Matching events will be tagged. If no matches are found, an empty list will be returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_table_index:\n                      type: integer\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_table_count:\n                      type: integer\n                    requested_table_column_ids:\n                      type: array\n                      items:\n                        type: integer\n                    table_search_expressions:\n                      type: object\n                      additionalProperties:\n                        type: string\n                    table_search_direction:\n                      type: string\n                      description: Search next or previous item (e.g. event, state etc.)\n                      enum:\n                        - \"NEXT\"\n                        - \"PREVIOUS\"\n                  required:\n                    - requested_table_count\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_table_index: 0\n                  requested_table_count: 100\n                  requested_table_column_ids: [0, 1, 2]\n                  requested_search_expression: { \"1\": \"cpu.*\" }\n                  requested_search_direction: \"NEXT\"\n      responses:\n        200:\n          description: Returns a table model with a 2D array of strings and metadata\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: \"#/components/schemas/GenericResponse\"\n                  - type: object\n                    properties:\n                      model:\n                        $ref: \"#/components/schemas/TableModel\"\n        400:\n          description: Bad request, the top index and size must be larger than 0\n          content:\n            application/json:\n              schema:\n                type: string\n        404:\n          description: No such Experiment\n          content:\n            application/json:\n              schema:\n                type: string\n        500:\n          description: Error reading the Experiment\n          content:\n            application/json:\n              schema:\n                type: string\n  /experiments/{expUUID}/outputs/{outputID}/style:\n    post:\n      tags:\n        - Styles\n      summary: API to get the style map associated to this experiment and output\n      operationId: getStyles\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: The name of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the style map.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters: {}\n      responses:\n        200:\n          description: Style model that can be used jointly with OutputElementStyle to retrieve specific style values\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/OutputStyleModel\"\n  /experiments/{expUUID}/outputs/markerSets:\n    get:\n      tags:\n        - Annotations\n      summary: API to get marker sets available for this experiment\n      operationId: getMarkerSets\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n      responses:\n        200:\n          description: List of marker sets\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/MarkerSet\"\n  /experiments/{expUUID}/outputs/{outputID}/annotations:\n    get:\n      tags:\n        - Annotations\n      summary: API to get annotation categories associated to this experiment and output\n      operationId: getAnnotationCategories\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: The name of the output provider to query\n          required: true\n          schema:\n            type: string\n        - name: markerSetId\n          in: query\n          description: The optional requested marker set's id\n          required: false\n          schema:\n            type: string\n      responses:\n        200:\n          description: Annotation categories model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnnotationCategoriesModel\"\n    post:\n      tags:\n        - Annotations\n      summary: API to get the annotations associated to this experiment and output\n      operationId: getAnnotations\n      parameters:\n        - name: expUUID\n          in: path\n          description: The UUID of the experiment in the server\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: outputID\n          in: path\n          description: The name of the output provider to query\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Query parameters to fetch the annotations.\n          The array 'requested_times' is the explicit array of requested sample times.\n          The array 'requested_items' is the list of entryId being requested.\n          The string 'requested_marker_set' is the optional requested marker set's id.\n          The array 'requested_marker_categories' is the list of requested annotation categories. If absent, all annotations are returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                parameters:\n                  type: object\n                  properties:\n                    requested_times:\n                      type: array\n                      items:\n                        type: integer\n                    requested_items:\n                      type: array\n                      items:\n                        type: integer\n                    requested_marker_set:\n                      type: string\n                    requested_marker_categories:\n                      type: array\n                      items:\n                        type: string\n                  required:\n                    - requested_times\n                  additionalProperties:\n                    type: object\n              required:\n                - parameters\n              example:\n                parameters:\n                  requested_times: [111200000, 111300000, 111400000, 111500000]\n                  requested_items: [1, 2]\n                  requested_marker_set: \"markerSetId\"\n                  requested_marker_categories: [\"category1\", \"category2\"]\n      responses:\n        200:\n          description: Annotation model\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/AnnotationModel\"\n  /filters:\n    get:\n      summary: Get the list of filters available.\n      operationId: getFilters\n      tags:\n        - Filters\n      responses:\n        200:\n          description: List of filters available.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Filter\"\n    post:\n      summary: Create a new filter.\n      operationId: addFilter\n      tags:\n        - Filters\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Human readable label for this filter\n                  type: string\n                start:\n                  description: start time for this filter\n                  type: integer\n                  format: int64\n                end:\n                  description: end time for this filter\n                  type: integer\n                  format: int64\n                filterExpression:\n                  description: expression from the filter language\n                  type: string\n                tags:\n                  description: Desired tags to apply when an elements pass the filter\n                  type: integer\n                  format: int32\n              required:\n                - start\n                - end\n                - filterExpression\n      responses:\n        200:\n          description: Created filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n  /filters/{filterID}:\n    get:\n      summary: Get the filter with the given ID.\n      operationId: getFilter\n      tags:\n        - Filters\n      parameters:\n        - name: filterID\n          description: Filter ID\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: The filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n    put:\n      summary: Update the given filter.\n      operationId: updateFilter\n      tags:\n        - Filters\n      parameters:\n        - name: filterID\n          description: Filter ID\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Human readable label for this filter\n                  type: string\n                start:\n                  description: start time for this filter\n                  type: integer\n                  format: int64\n                end:\n                  description: end time for this filter\n                  type: integer\n                  format: int64\n                filterExpression:\n                  description: expression from the filter language\n                  type: string\n                tags:\n                  description: Desired tags to apply when an elements pass the filter\n                  type: integer\n                  format: int32\n      responses:\n        200:\n          description: The filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n    delete:\n      summary: Delete the given filter\n      operationId: deleteFilter\n      tags:\n        - Filters\n      parameters:\n        - name: filterID\n          description: Filter ID\n          in: path\n          required: true\n          schema:\n            type: integer\n            format: int32\n      responses:\n        200:\n          description: The deleted filter\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Filter\"\n        204:\n          description: There was no filter with this ID to delete\n  /symbols/{hostID}/{PID}:\n    post:\n      tags:\n        - Symbols\n      summary: Import/Upload a symbol provider.\n      operationId: addSymbolProvider\n      parameters:\n        - name: hostID\n          in: path\n          description: Host ID for the symbol provider\n          required: true\n          schema:\n            type: string\n        - name: PID\n          in: path\n          description: PID for the symbol provider\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: URL to the symbol provider, not required if the symbol provider is uploaded directly to the endpoint.\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                url:\n                  description: URL to the symbol provider, not required if the symbol provider is uploaded directly to the endpoint.\n                  type: string\n      responses:\n        200:\n          description: The symbol provider has been successfully added to the trace server.\n        406:\n          description: \"Not acceptable: cannot read this symbol provider type\"\n    get:\n      tags:\n        - Symbols\n      summary: Gets the symbol providers\n      operationId: getSymbols\n      parameters:\n        - name: hostID\n          in: path\n          description: The host's ID\n          required: true\n          schema:\n            type: string\n        - name: PID\n          in: path\n          description: Process ID\n          required: true\n          schema:\n            type: string\n      responses:\n        200:\n          description: Returns the Symbol providers for this query.\n        404:\n          description: No such Host, Thread and address combination.\n  /about/traceTypes:\n    get:\n      summary: Get the list of trace types supported by this server.\n      operationId: getTraceTypes\n      tags:\n        - Features\n      responses:\n        200:\n          description: List of the trace types supported by this server.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    ID:\n                      description: The unique identifier for this trace type\n                      type: string\n                    description:\n                      description: Human readable description of this trace type\n                      type: string\n                    versions:\n                      description: List supported versions\n                      type: array\n                      items:\n                        type: string\n  /about/outputTypes:\n    get:\n      summary: Get the list of outputs supported by this server.\n      tags:\n        - Features\n      responses:\n        200:\n          description: List of the output types supported by this server.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    ID:\n                      description: The unique identifier for this output provider type\n                      type: string\n                    description:\n                      description: Human readable description of this output type\n                      type: string\n                    versions:\n                      description: List supported versions\n                      type: array\n                      items:\n                        type: string\n  /health:\n    get:\n      summary: Get the health status of this server\n      tags:\n        - Diagnostic\n      responses:\n        200:\n          description: The trace server is running and ready to receive requests\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    description: The status of the server\n                    type: string\n                    enum:\n                      - \"UP\"\n        503:\n          description: The trace server is unavailable or in maintenance and cannot receive requests\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  status:\n                    description: The status of the server\n                    type: string\n                    enum:\n                      - \"DOWN\"\ncomponents:\n  schemas:\n    TraceModel:\n      type: object\n      properties:\n        name:\n          description: User defined name for the trace\n          type: string\n        UUID:\n          description: The trace's unique identifier\n          type: string\n          format: uuid\n        path:\n          description: Path to the trace on the file server's File System\n          type: string\n        nbEvents:\n          description: Current number of indexed events in the trace.\n          type: integer\n          format: int64\n        start:\n          description: The trace's start time\n          type: integer\n          format: int64\n        end:\n          description: The trace's end time\n          type: integer\n          format: int64\n        indexingStatus:\n          description: Status of the trace indexing\n          type: string\n          enum:\n            - RUNNING\n            - COMPLETED\n            - CLOSED\n    Experiment:\n      type: object\n      properties:\n        name:\n          description: User defined name for the experiment\n          type: string\n        UUID:\n          description: The experiment's unique identifier\n          type: string\n          format: uuid\n        nbEvents:\n          description: Current number of indexed events in the experiment.\n          type: integer\n          format: int64\n        start:\n          description: The experiment's start time\n          type: integer\n          format: int64\n        end:\n          description: The experiment's end time\n          type: integer\n          format: int64\n        indexingStatus:\n          description: Status of the experiment indexing\n          type: string\n          enum:\n            - RUNNING\n            - COMPLETED\n            - CLOSED\n        traces:\n          description: The traces encapsulated by this experiment\n          type: array\n          items:\n            $ref: \"#/components/schemas/TraceModel\"\n    Bookmark:\n      type: object\n      properties:\n        start:\n          description: the start time for this bookmark.\n          type: integer\n          format: int64\n        end:\n          description: the end time for this bookmark.\n          type: integer\n          format: int64\n        name:\n          description: this bookmark's name\n          type: string\n        type:\n          description: The type of the bookmark (generic, output, ...)\n          type: string\n        iconUrl:\n          description: URL to the bookmark's icon\n          type: string\n        UUID:\n          description: The bookmark's unique ID, generated by the server.\n          type: string\n          format: uuid\n    OutputDescriptor:\n      type: object\n      properties:\n        id:\n          description: The output provider's ID\n          type: string\n        name:\n          description: The human readable name\n          type: string\n        description:\n          description: Describe the output provider's features\n          type: string\n        outputType:\n          description: Type of data returned by this output. Serve as a hint to determine what kind of view should be use for this output (ex. XY, Time Graph, Table, etc..). Providers of type TREE_TIME_XY and TIME_GRAPH can be grouped under the same time axis. Providers of type DATA_TREE only provide a tree with columns and don't have any XY nor time graph data associated with.\n          type: string\n          enum:\n            - TABLE\n            - TREE_TIME_XY\n            - TIME_GRAPH\n            - DATA_TREE\n        queryParameters:\n          description: List all the possible parameters that can be use to query this output.\n          type: object\n          additionalProperties:\n            type: object\n        start:\n          description: The start time of the output model\n          type: integer\n          format: int64\n        end:\n          description: The end time of the output model\n          type: integer\n          format: int64\n        final:\n          description: If the start, end times and current model are final, or if they will need to be refreshed later to represent a more up to date version.\n          type: boolean\n        compatibleProviders:\n          description: List of IDs of compatible outputs that can be used in the same view (ex. as overlay)\n          type: array\n          items:\n            type: string\n    TableModel:\n      type: object\n      properties:\n        lowIndex:\n          description: Index in the virtual table of the first returned event\n          type: integer\n          format: int64\n        size:\n          description: Number of events. If filtered, the size will be the number of events that match the filters\n          type: integer\n          format: int32\n        columnIds:\n          description: The array of column ids that are returned. They should match the content of the lines' content.\n          type: array\n          items:\n            type: integer\n            format: int64\n        lines:\n          type: array\n          items:\n            $ref: \"#/components/schemas/LineModel\"\n    LineModel:\n      type: object\n      properties:\n        index:\n          description: The index of this line in the virtual table\n          type: integer\n          format: int64\n        cells:\n          description: The content of the cells for this line. This array matches the column ids returned above.\n          type: array\n          items:\n            type: object\n            properties:\n              content:\n                description: Content of the cell for this line. The content uses markdown to format the text\n                type: string\n              tags:\n                description: Specific tags for this cell\n                type: integer\n                format: int32\n        tags:\n          description: Tags for the entire line\n          type: integer\n          format: int32\n          $ref: \"#/components/schemas/Tags\"\n    ColumnHeaderEntry:\n      type: object\n      properties:\n        id:\n          description: Unique id to identify this column in the backend.\n          type: integer\n          format: int32\n        name:\n          description: Displayed name for this column\n          type: string\n        description:\n          description: Description of the column\n          type: string\n        type:\n          description: Type of data associated to this column\n          type: string\n    EntryHeader:\n      type: object\n      properties:\n        name:\n          description: Displayed name for this header\n          type: string\n        tooltip:\n          description: Displayed tooltip for this header. Optional, no tooltip is applied if absent.\n          type: string\n      required:\n        - name\n    XYModel:\n      type: object\n      properties:\n        title:\n          description: Title of the model\n          type: string\n        commonXAxis:\n          description: Indicate if the model use a common X axis\n          type: boolean\n        series:\n          type: array\n          items:\n            $ref: \"#/components/schemas/XYSeries\"\n      required:\n        - title\n        - series\n    XYSeries:\n      type: object\n      properties:\n        seriesName:\n          description: series' name\n          type: string\n        seriesId:\n          description: series' ID\n          type: integer\n          format: int64\n        xAxis:\n          $ref: \"#/components/schemas/XYAxis\"\n        yAxis:\n          $ref: \"#/components/schemas/XYAxis\"\n        xValues:\n          description: series' X values\n          type: array\n          items:\n            type: integer\n            format: int64\n        yValues:\n          description: series' Y values\n          type: array\n          items:\n            type: number\n            format: double\n        tags:\n          description: Array of tags for each xy values\n          type: array\n          items:\n            type: integer\n            format: int32\n        style:\n          $ref: \"#/components/schemas/OutputElementStyle\"\n      required:\n        - seriesName\n        - seriesId\n        - xValues\n        - yValues\n    XYAxis:\n      type: object\n      properties:\n        label:\n          description: Label to apply to the axis\n          type: string\n        unit:\n          description: The units used for this axis, to be appended to the data\n          type: string\n        dataType:\n          description: Type of data this series represents. Gives a hint on the formatting to give to the data\n          type: string\n          enum:\n            - NUMBER\n            - BINARY_NUMBER\n            - TIMESTAMP\n            - DURATION\n            - STRING\n    TimeGraphModel:\n      type: object\n      properties:\n        rows:\n          type: array\n          items:\n            $ref: \"#/components/schemas/TimeGraphRow\"\n    TimeGraphEntry:\n      allOf:\n        - $ref: \"#/components/schemas/Entry\"\n        - type: object\n          properties:\n            start:\n              description: Beginning of the range for which this entry exists\n              type: integer\n              format: int64\n            end:\n              description: End of the range for which this entry exists\n              type: integer\n              format: int64\n    TimeGraphState:\n      type: object\n      properties:\n        start:\n          description: start time for this state\n          type: integer\n          format: int64\n        end:\n          description: end time for this state\n          type: integer\n          format: int64\n        label:\n          description:\n            Text label to apply to this TimeGraphState if resolution permits.\n            Optional, no label is applied if absent.\n          type: string\n        tags:\n          description: Tags to apply on this state\n          type: integer\n          format: int32\n        style:\n          $ref: \"#/components/schemas/OutputElementStyle\"\n      required:\n        - start\n        - end\n    TimeGraphRow:\n      type: object\n      properties:\n        entryId:\n          description: The entry to map this state list to\n          type: integer\n          format: int64\n        states:\n          description: List of the time graph entry states associated to this entry and zoom level.\n          type: array\n          items:\n            $ref: \"#/components/schemas/TimeGraphState\"\n      required:\n        - entryId\n        - states\n    TimeGraphArrow:\n      type: object\n      properties:\n        start:\n          description: start time for this arrow\n          type: integer\n          format: int64\n        end:\n          description: end time for this arrow\n          type: integer\n          format: int64\n        sourceId:\n          description: Source entry's unique ID\n          type: integer\n          format: int64\n        targetId:\n          description: Target entry's unique ID\n          type: integer\n          format: int64\n        style:\n          $ref: \"#/components/schemas/OutputElementStyle\"\n      required:\n        - start\n        - end\n        - sourceId\n        - targetId\n    Filter:\n      type: object\n      properties:\n        id:\n          description: Unique id to identify this entry in the backend.\n          type: integer\n          format: int32\n        name:\n          description: Human readable label for this filter\n          type: string\n        start:\n          description: start time for this filter\n          type: integer\n          format: int64\n        end:\n          description: end time for this filter\n          type: integer\n          format: int64\n        expression:\n          description: expression from the filter language\n          type: string\n        tags:\n          description: Tags to be applied on elements that pass this filter\n          type: integer\n          format: int32\n    ResponseStatus:\n      description: All possible status for a server response\n      type: string\n      enum:\n        - RUNNING\n        - COMPLETED\n        - FAILED\n        - CANCELLED\n    GenericResponse:\n      description: Generic response that include an output descriptor, the status and a status message\n      type: object\n      properties:\n        output:\n          $ref: \"#/components/schemas/OutputDescriptor\"\n        status:\n          $ref: \"#/components/schemas/ResponseStatus\"\n        statusMessage:\n          type: string\n    Entry:\n      description: Base entry returned by tree endpoints\n      type: object\n      properties:\n        labels:\n          description: Array of cell labels to be displayed. The length of the array and the index of each column need to correspond to the header array returned in the tree model.\n          type: array\n          items:\n            type: string\n        id:\n          description: Unique id to identify this entry in the backend\n          type: integer\n          format: int32\n        parentId:\n          description: Unique id to identify this parent's entry,\n            optional if this entry does not have a parent.\n          type: integer\n          format: int32\n        hasData:\n          description: Whether or not this entry has data\n          type: boolean\n        style:\n          $ref: \"#/components/schemas/OutputElementStyle\"\n      required:\n        - labels\n        - id\n    EntryModel:\n      type: object\n      properties:\n        entries:\n          type: array\n          items:\n            $ref: \"#/components/schemas/Entry\"\n        headers:\n          type: array\n          items:\n            $ref: \"#/components/schemas/EntryHeader\"\n      required:\n        - entries\n    OutputStyleModel:\n      type: object\n      description: Map of styles specific to an output where values gives hints on the style. The keys are strings that can be used in OutputElementStyle\n      properties:\n        styles:\n          properties:\n            styleKey1:\n              $ref: \"#/components/schemas/OutputElementStyle\"\n            styleKey2:\n              $ref: \"#/components/schemas/OutputElementStyle\"\n    OutputElementStyle:\n      type: object\n      description:\n        Represents the style on an element (ex. Entry, TimeGraphState, ...) returned by any output.\n        Supports style inheritance. To avoid having too many styles, the element style can have a parent style and will have all the same style property values as the parent and can add or override style properties.\n      properties:\n        parentKey:\n          description: Parent style key or empty if there is no parent. The parent key should match a style key defined in the style model and is used for style inheritance. A comma-delimited list of parent style keys can be used for style composition, the last one taking precedence.\n          type: string\n        values:\n          $ref: \"#/components/schemas/StyleProperty\"\n    StyleProperty:\n      type: object\n      description: Style values or empty map if there is no values.\n      properties:\n        background-color:\n          description: Background color, specified as an hex string '#rrggbb'. Default is '#000000'.\n          type: string\n        color:\n          description: Foreground color, specified as an hex string '#rrggbb'. Default is '#000000' or, when the element has a background color, a distinct color from this background color.\n          type: string\n        opacity:\n          description: Opacity level of an element between 0.0 and 1.0 where 0.0 is transparent and 1.0 is fully opaque. Default is 1.0.\n          type: number\n        border-style:\n          description: Border style as string. Default is 'none'.\n          enum:\n            - none\n            - dotted\n            - dashed\n            - solid\n            - double\n        border-color:\n          description: Border color, specified as an hex string '#rrggbb'. Used when 'border-style' is other than 'none'. Default is '#000000'.\n          type: string\n        border-width:\n          description: Border width in pixels. Used when 'border-style' is other than 'none'. Default is 1.\n          type: number\n        height:\n          description: Height of an element, as a factor, between 0.0 and 1.0, of the normal element height. Default is 1.0.\n          type: number\n        width:\n          description: Width of an element in pixels. Not applicable to elements representing a time duration. Default is 1.\n          type: number\n        symbol-type:\n          description: Symbol type as a string. Default is 'none'.\n          enum:\n            - none\n            - diamond\n            - circle\n            - square\n            - triangle\n            - inverted-triangle\n            - cross\n            - plus\n        vertical-align:\n          description: Vertical alignment as a string. Default is 'middle'.\n          enum:\n            - middle\n            - top\n            - bottom\n        \u003ccolorkey\u003e-blend:\n          description: Suffix to be appended to a color style key to apply a blending color to that style's color value. The value of the modifier style is an hex string that includes the blending color's alpha between 0 and 255 '#rrggbbaa'.\n          type: string\n        \u003cnumberkey\u003e-factor:\n          description: Suffix to be appended to a numerical style key to apply a multiplication factor to that style's numerical value. The value of the modifier style is a positive number.\n          type: number\n    MarkerSet:\n      type: object\n      description: A marker set is used to represent a set of annotations that can be fetched\n      properties:\n        name:\n          type: string\n          description: name of this marker set\n        id:\n          type: string\n          description: id of this marker set\n    Annotation:\n      type: object\n      description: An annotation is used to mark interesting area at a given time or time range.\n      properties:\n        time:\n          type: integer\n          format: int64\n          description: time of this annotation\n        duration:\n          type: integer\n          format: int64\n          description: duration of this annotation\n        entryId:\n          type: integer\n          format: int64\n          description: entry's unique ID or -1 if annotation not associated with an entry\n        type:\n          type: string\n          enum: [TREE, CHART]\n          description: type of annotation indicating its location\n        label:\n          type: string\n          description: text label of this annotation\n        style:\n          $ref: \"#/components/schemas/OutputElementStyle\"\n      required:\n        - time\n        - duration\n        - entryId\n        - type\n    AnnotationModel:\n      type: object\n      description: Model returned by outputs that contains annotations per category.\n      properties:\n        annotations:\n          description: Map of annotations where the keys are categories\n          additionalProperties:\n            type: array\n            items:\n              $ref: \"#/components/schemas/Annotation\"\n    AnnotationCategoriesModel:\n      type: object\n      description: Model returned by outputs that contains annotation categories available for this output.\n      properties:\n        annotationCategories:\n          description: Array of all the categories\n          type: array\n          items:\n            type: string\n    Element:\n      type: object\n      description: An element model to be identified.\n      properties:\n        elementType:\n          description: The type of element\n          type: string\n          enum: [state, annotation, arrow]\n        time:\n          description: element's start time\n          type: integer\n          format: int64\n        duration:\n          description: element's duration\n          type: integer\n          format: int64\n        entryId:\n          description: entry's unique ID (annotation, arrow)\n          type: integer\n          format: int32\n        destinationId:\n          description: destination entry's unique ID (arrow)\n          type: integer\n          format: int32\n      required:\n        - elementType\n        - time\n        - duration\n    Tags:\n      type: integer\n      description: A bit masks to apply for tagging elements (e.g. table lines, states). This can be used by the server to indicate if a filter matches and what action to apply. Use 0 for no tags, 1 and 2 are reserved, 4 for 'BORDER' and 8 for 'HIGHLIGHT'.\n      format: int64\n"
		}
	},
	"Error": "parse: parse spec: paths: /experiments/{expUUID}/outputs/{outputID}: get: operation \"getOutput\": responses: 200: content: \"application/json\": schema: parse schema: providers: parse schema: object cannot contain 'items' field"
}