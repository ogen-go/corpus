{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/dcsaorg/DCSA-OpenAPI"
		},
		"file": {
			"name": "event_domain_v3.0.0.yaml",
			"size": 0,
			"path": "domain/event/event_domain_v3.0.0.yaml",
			"byteSize": 65893,
			"content": "# OpenAPI version identifier - required for OpenAPI 3.0 domains\nopenapi: 3.0.3\n\n#######################\n# Optional info section\n#######################\ninfo:\n  title: DCSA - Event Components\n  description: |\n    Common components for Events. This domain is central for all Event Hubs and `/v?/events` endPoints (used for polling) in APIs. It is used by\n    - [T\u0026T (Track \u0026 Trace)](https://app.swaggerhub.com/apis-docs/dcsaorg/DCSA_TNT). Event hub for the following Event types:\n      - TransportEvent\n      - EquipmentEvent\n      - ShipmentEvent\n    - Documentation Hub used by [EBL (Electronic Bill of Lading)](https://app.swaggerhub.com/apis/dcsaorg/DCSA_EBL) and [BKG (Booking)](https://app.swaggerhub.com/apis/dcsaorg/DCSA_BKG). Event hub for the following Event types:\n      - ShipmentEvent\n    - JIT Hub used by [JIT (Just in Time Portcalls)](https://app.swaggerhub.com/apis/dcsaorg/DCSA_JIT). Event hub for the following Event types:\n      - OperationsEvent\n\n    For a history of changes in this domain - please check [GitHub](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/domain/event#v202). Please also [create a GitHub issue](https://github.com/dcsaorg/DCSA-OpenAPI/issues/new) if you have any questions/comments.\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\n  contact:\n    name: Digital Container Shipping Association (DCSA)\n    url: https://dcsa.org\n    email: info@dcsa.org\n  version: 3.0.0\n\ncomponents:\n  parameters:\n\n    ####################\n    ## Header parameters\n    ####################\n\n    apiVersion:\n      in: header\n      name: API-Version\n      required: true\n      schema:\n        type: string\n        example: 1.0.0\n      description: |\n        SemVer used to indicate the version of the contract (API version) returned.\n    notificationSignature:\n      in: header\n      name: Notification-Signature\n      required: true\n      description: |\n        the Notification-Signature is used to sign the notification. The header has the following format: \n\n           Notification-Signature: \u003csignature-type\u003e=\u003csignature\u003e\n\n        The `signature-type` part is a keyword that determines which algorithm was used to compute the signature.\n\n        The signature ***MUST*** cover the entire request body of the request including whitespace and newlines. The content ***MUST*** decoded into bytes using the UTF-8 encoding before computing the signature. None of the HTTP headers nor the request URL is covered by the signature.\n        \n        Supported signature typies are:\n        - sha256\n        \n        Example: `sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de`\n      schema:\n        type: string\n        pattern: '\\s*([a-zA-Z0-9-_+]+=[0-9a-fA-F]+)\\s*'\n        example: 'sha256=ae688919f5e31f4c210ca6af362ce4d9ed87acfb51c1721a8507ee395de5e2de'\n    signatureHeader:\n      in: header\n      name: Signature\n      required: true\n      description: |\n        The signature certifying the request originates from the carrier\n      deprecated: true\n      schema:\n        properties:\n          keyId:\n            type: string\n            format: uuid\n            example: '4fb682bc-3cd1-43a9-a23a-618a61bd87ca'\n          created:\n            type: integer\n            example: 1591960384 \n          headers:\n            type: string\n            example: '(request-target) (created) date host'\n          signature:\n            type: string\n            example: aGkgZnJvbSBkZW5tYXJr\n    subscriptionIDHeader:\n      in: header\n      name: Subscription-ID\n      required: true\n      description: |\n        The ID of the subscription triggering the event being sent\n      schema:\n        type: string\n        format: uuid\n        example: 'b80d923d-e8ac-4c34-9506-55d3de347034'\n\n    #################\n    # Path parameters\n    #################\n\n    eventID:\n      in: path\n      name: eventID\n      schema:\n        $ref: '#/components/schemas/eventID'\n      required: true\n      description: |\n        The ID of the event to recetrieve\n      example: '123e4567-e89b-12d3-a456-426614174000'\n    subscriptionID:\n      in: path\n      name: subscriptionID\n      schema:\n        $ref: '#/components/schemas/subscriptionID'\n      required: true\n      description: |\n        The ID of the subscription to retrieve\n      example: '123e4567-e89b-12d3-a456-426614174000'\n\n    ##################\n    # Query parameters\n    ##################\n    \n    carrierBookingReference:\n      in: query\n      name: carrierBookingReference\n      description: |\n        A set of unique characters provided by carrier to identify a booking.\n        \n        Specifying this filter will only return events related to this particular `carrierBookingReference`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierBookingReference'\n    carrierBookingRequestReference:\n      in: query\n      name: carrierBookingRequestReference\n      description: |\n        A set of unique characters provided by carrier to identify a booking during the booking request phase.\n        \n        Specifying this filter will only return events related to this particular `carrierBookingRequestReference`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierBookingRequestReference'\n    carrierExportVoyageNumber:\n      in: query\n      name: carrierExportVoyageNumber\n      description: |\n        Filter on the vessel operator-specific identifier of the export Voyage.\n        \n        Specifying this filter will only return events related to this particular `carrierExportVoyageNumber`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierExportVoyageNumber'\n    carrierServiceCode:\n      in: query\n      name: carrierServiceCode\n      description: |\n        Filter on the carrier specific identifier of the service.\n        \n        Specifying this filter will only return events related to this particular `carrierServiceCode`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierServiceCode'\n    documentReference:\n      in: query\n      name: documentReference\n      description: |\n        Filter on the `documentReference`. The `documentReference` can refer to any document - to qualify the type `documentTypeCode` should also be specified. Please be aware that `documentReference` by itself is not unique and may match different types of documents\n        \n        Specifying this filter will only return `ShipmentEvents` related to this particular `documentReference`.\n      required: false\n      schema:\n        $ref: '#/components/schemas/documentReference'\n    documentTypeCode:\n      in: query\n      name: documentTypeCode\n      explode: false\n      style: form\n      description: |\n        The `documentTypeCode` to filter by. `documentTypeCode` refers to the different 'kinds' of documents supported by the `ShipmentEvent`. Possible values are\n        - CBR (Carrier Booking Request Reference)\n        - BKG (Booking)\n        - SHI (Shipping Instruction)\n        - TRD (Transport Document)\n        - SRM (Shipment Release Message)\n        - ARN (Arrival Notice)\n        - VGM (Verified Gross Mass)\n        - CAS (Cargo Survey)\n        - CUC (Customs Clearance)\n        - DGD (Dangerous Goods Declaration)\n        - OOG (Out of Gauge)\n        - CQR (Contract Quotation Reference)\n\n        It is possible to select multiple values by comma (`,`) separating them. For multiple values the **OR**-operator is used. For example\n        \n            documentTypeCode=SHI,TRD\n            \n        Matches **both** ShippingInstruction (`SHI`) **and** TransportDocument (`TRD`) `ShipmentEvents`.\n\n        Default is all `documentTypeCodes`.\n        \n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv)\n        \n        This filter is only relevant when filtering on `ShipmentEvents`\n      example: SHI,TRD\n      schema:\n        default: CBR,BKG,SHI,TRD,SRM,ARN,VGM,CAS,CUC,DGD,OOG,CQR\n        type: array\n        items:\n          $ref: '#/components/schemas/documentTypeCode'\n    equipmentEventTypeCode:\n      in: query\n      name: equipmentEventTypeCode\n      explode: false\n      style: form\n      description: |\n        The `equipmentEventTypeCode` to filter by. Possible values are\n        - LOAD (Loaded)\n        - DISC (Discharged)\n        - GTIN (Gated in)\n        - GTOT (Gated out)\n        - STUF (Stuffed)\n        - STRP (Stripped)\n        - PICK (Pick-up)\n        - DROP (Drop-off)\n        - INSP (Inspected)\n        - RSEA (Resealed)\n        - RMVD (Removed)\n        - CUSS (Customs Selected for Scan)\n        - CUSI (Customs Selected for Inspection)\n        - CUSR (Customs Release)\n\n        It is possible to select multiple values by comma (`,`) separating them. For multiple values the **OR**-operator is used. For example\n            \n            equipmentEventTypeCode=GTIN,GTOT\n            \n        matches **both** Gated in (`GTIN`) **and** Gated out (`GTOT`) `EquipmentEvents`.\n        \n        Default is all `equipmentEventTypeCodes`.\n        \n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv)\n        \n        This filter is only relevant when filtering on `EquipmentEvents`\n      example: GTIN,GTOT\n      schema:\n        default: LOAD,DISC,GTIN,GTOT,STUF,STRP,PICK,DROP,INSP,RSEA,RMVD,CUSS,CUSI,CUSR\n        type: array\n        items:\n          $ref: '#/components/schemas/equipmentEventTypeCode'\n    equipmentReference:\n      in: query\n      name: equipmentReference\n      description: |\n        Will filter by the unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.\n        \n        Specifying this filter will only return events related to this particular `equipmentReference`\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/equipmentReference'\n    eventClassifierCode:\n      in: query\n      name: eventClassifierCode\n      description: |\n        Unique identifier for `eventClassifierCode`.\n      #   - ACT (Actual)\n      #   - PLN (Planned)\n      #   - EST (Estimated)\n      #   - REQ (Requested)\n\n      #   It is possible to select multiple values by comma (,) separating them. For multiple values the OR-operator is used. For example \u003ci\u003eeventClassifierCode=EST,ACT\u003c/i\u003e matches \u003cb\u003eboth\u003c/b\u003e Estimated (EST) and Actual (ACT) events.\n        \n      #   Default is all eventClassifierCodes.\n        \n      #   Be aware that not all events support REQ (Requested).\n      # example: EST,ACT\n      schema:\n      #   default: ACT,PLN,EST,REQ\n      #   type: array\n        items:\n          $ref: '#/components/schemas/eventClassifierCode'\n    eventCreatedDateTime:\n      in: query\n      name: eventCreatedDateTime\n      description: |\n        Limit the result based on the creating date of the event. It is possible to use operators on this query parameter. This is done by adding a colon (`:`) followed by an operator at the end of the queryParameterName (before the equal (`=`))\n        \n            eventCreatedDateTime:gte=2021-04-01T14:12:56+01:00\n        \n        would result in all events created \u0026#8805; 2021-04-01T14\u0026#58;12\u0026#58;56+01\u0026#58;00\n        \n        The following operators are supported\n        - `:gte` (\u0026#8805; Greater than or equal)\n        - `:gt` (\u0026#62; Greater than)\n        - `:lte` (\u0026#8804; Less than or equal)\n        - `:lt` (\u0026#60; Less than)\n        - `:eq` (\u0026#61; Equal to)\n        \n        If no operator is provided, a **strictly equal** is used (this is equivalent to `:eq` operator).\n      required: false\n      example: '2021-04-01T14:12:56+01:00'\n      schema:\n        $ref: '#/components/schemas/eventCreatedDateTime'\n    eventDateTime:\n      in: query\n      name: eventDateTime\n      description: |\n        Limit the result based on when the event will happen or has happened. It is possible to use operators on this query parameter. This is done by adding a colon (`:`) followed by an operator at the end of the queryParameterName (before the equal (`=`))\n        \n            eventDateTime:gte=2021-04-01T14:12:56+01:00\n        \n        would result in all events happened and will happen \u0026#8805; 2021-04-01T14\u0026#58;12\u0026#58;56+01\u0026#58;00\n        \n        The following operators are supported\n        - `:gte` (\u0026#8805; Greater than or equal)\n        - `:gt` (\u0026#62; Greater than)\n        - `:lte` (\u0026#8804; Less than or equal)\n        - `:lt` (\u0026#60; Less than)\n        - `:eq` (\u0026#61; Equal to)\n        \n        If no operator is provided, a **strictly equal** is used (this is equivalent to `:eq` operator).\n      required: false\n      example: '2021-04-01T14:12:56+01:00'\n      schema:\n        $ref: '#/components/schemas/eventDateTime'\n    operationsEventTypeCode:\n      in: query\n      name: operationsEventTypeCode\n      description: |\n        The `operationsEventTypeCode` to filter by. Possible values are\n        - STRT (Started)\n        - CMPL (Completed)\n        - ARRI (Arrived)\n        - DEPA (Departed)\n        - OMIT (Omitted)\n        - CANC (Cancelled)\n\n        It is possible to select multiple values by comma (`,`) separating them. For multiple values the **OR**-operator is used. For example\n        \n            operationsEventTypeCode=ARRI,CMPL\n        \n        matches **both** Arrived (`ARRI`) **and** Completed (`CMPL`) `OperationsEvents`.\n        \n        Default is all `operationsEventTypeCodes`.\n        \n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/operationseventtypecodes.csv)\n        \n        This filter is only relevant when filtering on `OperationsEvents`\n      example: ARRI,CMPL\n      schema:\n        default: STRT,CMPL,ARRI,DEPA,OMIT,CANC\n        type: array\n        items:\n          $ref: '#/components/schemas/operationsEventTypeCode'\n    shipmentEventTypeCode:\n      in: query\n      name: shipmentEventTypeCode\n      explode: false\n      style: form\n      description: |\n        The status of the document in the process to filter by. Possible values are\n        - RECE (Received)\n        - DRFT (Drafted)\n        - PENA (Pending Approval)\n        - PENU (Pending Update)\n        - PENC (Pending Confirmation)\n        - CONF (Confirmed)\n        - REJE (Rejected)\n        - APPR (Approved)\n        - ISSU (Issued)\n        - SURR (Surrendered)\n        - SUBM (Submitted)\n        - VOID (Void)\n        - REQS (Requested)\n        - CMPL (Completed)\n        - HOLD (On Hold)\n        - RELS (Released)\n        - CANC (Cancelled)\n\n        It is possible to select multiple values by comma (`,`) separating them. For multiple values the **OR**-operator is used. For example\n        \n            shipmentEventTypeCode=RECE,DRFT\n        \n        matches **both** Received (`RECE`) **and** Drafted (`DRFT`) `ShipmentEvents`.\n        \n        Default is all `shipmentEventTypeCodes`.\n\n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv).\n        \n        This filter is only relevant when filtering on `ShipmentEvents`\n      example: RECE,DRFT\n      schema:\n        default: RECE,DRFT,PENA,PENU,PENC,CONF,REJE,APPR,ISSU,SURR,SUBM,VOID,REQS,CMPL,HOLD,RELS,CANC\n        type: array\n        items:\n          $ref: '#/components/schemas/shipmentEventTypeCode'\n    shippingInstructionReference:\n      in: query\n      name: shippingInstructionReference\n      description: |\n        The `shippingInstructionReference` to filter by.\n        \n        Specifying this filter will only return events related to this particular `shippingInstructionReference`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/shippingInstructionReference'\n    transportCallReference:\n      in: query\n      name: transportCallReference\n      description: |\n        The `transportCallReference` to filter by.\n        \n        Specifying this filter will only return events related to this particular `transportCallReference`\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/transportCallReference'\n    transportDocumentReference:\n      in: query\n      name: transportDocumentReference\n      description: |\n        The `transportDocumentReference` to filter by.\n\n        Specifying this filter will only return events related to this particular `transportDocumentReference`\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/transportDocumentReference'\n    transportEventTypeCode:\n      in: query\n      name: transportEventTypeCode\n      explode: false\n      style: form\n      description: |\n        The `transportEventTypeCode` to filter by. Possible values are\n        - ARRI (Arrived)\n        - DEPA (Departed)\n\n        It is possible to select multiple values by comma (`,`) separating them. For multiple values the **OR**-operator is used. For example\n        \n            transportEventTypeCode=ARRI,DEPA\n        \n        matches **both** Arrived (`ARRI`) **and** Departed (`DEPA`) `TransportEvents`.\n        \n        Default is all `transportEventTypeCodes`.\n        \n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv)\n        \n        This filter is only relevant when filtering on `TransportEvents`\n      example: ARRI,DEPA\n      schema:\n        default: ARRI,DEPA\n        type: array\n        items:\n          $ref: '#/components/schemas/transportEventTypeCode'\n    universalExportVoyageReference:\n      in: query\n      name: universalExportVoyageReference\n      description: |\n        Filter on the unique identifier of the export Voyage.\n        \n        Specifying this filter will only return events related to this particular `universalExportVoyageReference`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalExportVoyageReference'\n    universalServiceReference:\n      in: query\n      name: universalServiceReference\n      description: |\n        Filter on the unique identifier of the service.\n        \n        Specifying this filter will only return events related to this particular `universalServiceReference`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalServiceReference'\n    UNLocationCode:\n      in: query\n      name: UNLocationCode\n      description: |\n        The `UN Location Code` to filter by.\n        \n        Specifying this filter will only return events related to this particular `UN Location Code`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/UNLocationCode'\n    vesselIMONumber:\n      in: query\n      name: vesselIMONumber\n      description: |\n        The `Vessel IMO Number` to filter by.\n        \n        Specifying this filter will only return events related to this particular `vesselIMONumber`.\n      required: false\n      schema:\n        $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselIMONumber'\n\n  ####################\n  # Common data models\n  ####################\n  \n  schemas:\n  \n    ###################\n    # Base Event object\n    ###################\n\n    metadata:\n      type: object\n      description: |\n        The metadata of the event\n      allOf:\n        - type: object\n          properties:\n            eventID:\n              allOf:\n                - $ref: '#/components/schemas/eventID'\n        - type: object\n          properties:\n            eventCreatedDateTime:\n              allOf:\n                - $ref: '#/components/schemas/eventCreatedDateTime'\n        - type: object\n          properties:\n            eventType:\n              allOf:\n                - $ref: '#/components/schemas/eventType'\n        - type: object\n          properties:\n            retractedEventID:\n              allOf:\n                - $ref: '#/components/schemas/retractedEventID'\n      required:\n        - eventID\n        - eventCreatedDateTime\n        - eventType\n\n    ###################\n    # Base Event object\n    ###################\n\n    baseEvent:\n      type: object\n      description: |\n        The Event entity is described as a generalization of all the specific event categories. An event always takes place in relation to a shipment and can additionally be linked to a transport or an equipment\n      allOf:\n        - type: object\n          properties:\n            eventClassifierCode:\n              allOf:\n                - $ref: '#/components/schemas/eventClassifierCode'\n        - type: object\n          properties:\n            eventDateTime:\n              allOf:\n                - $ref: '#/components/schemas/eventDateTime'\n      required:\n        - eventClassifierCode\n        - eventDateTime\n    \n\n    ##########################\n    # Shipment Event object\n    ##########################\n\n\n    baseShipmentEvent:\n      type: object\n      description: |\n        The `ShipmentEvent` is a specialized event to handle all events related to documents.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventDateTime:\n              description: |\n                The local date and time, when the event took place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. Often this is the same as eventCreatedDateTime (which is when the event is created)\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                For `ShipmentEvents` the `eventClassifierCode` **must** be `ACT`\n              enum:\n                - ACT\n              example: ACT\n        - type: object\n          properties:\n            shipmentEventTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/shipmentEventTypeCode'\n        - type: object\n          properties:\n            documentTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/documentTypeCode'\n        - type: object\n          properties:\n            documentReference:\n              allOf:\n                - $ref: '#/components/schemas/documentReference'\n        - type: object\n          properties:\n            reason:\n              allOf:\n                - $ref: '#/components/schemas/reason'\n        - type: object\n          properties:\n            relatedDocumentReferences:\n              allOf:\n                - $ref: '#/components/schemas/relatedDocumentReferences'\n        - type: object\n          properties:\n            references:\n              allOf:\n                - $ref: '#/components/schemas/references'\n      required:\n        - shipmentEventTypeCode\n        - documentTypeCode\n        - documentReference\n\n    shipmentEvent:\n      type: object\n      description: |\n        The `ShipmentEvent` is a specialized event to handle all events related to documentation.\n      allOf:\n        - type: object\n          properties:\n            metadata:\n              description: |\n                The `metadata` of the `ShipmentEvent` - includes all non-business related attributes\n              allOf:\n                - $ref: '#/components/schemas/metadata'\n                #Overriding the eventType property to have correct payload response examples\n                - type: object\n                  properties:\n                    eventType:\n                      example: SHIPMENT\n                      enum:\n                        - SHIPMENT\n        - type: object\n          properties:\n            payload:\n              description: |\n                The business attributes related to the `ShipmentEvent`.\n                \n                This is a conditional object - if `retractedEventID` is **not** provided in the `metadata` then this object is mandatory\n              allOf:\n                - $ref: '#/components/schemas/baseEvent'\n                - $ref: '#/components/schemas/baseShipmentEvent'\n      required:\n        - metadata\n\n\n    ###############################\n    # Transport Event object\n    ###############################\n\n\n    baseTransportEvent:\n      type: object\n      description: |\n        The `TransportEvent` is a specialized event to handle all events related to transportation.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                For `TransportEvents` the `eventClassifierCode` can be one of the following values\n                - ACT (Actual)\n                - PLN (Planned)\n                - EST (Estimated)\n              enum:\n                - ACT\n                - PLN\n                - EST\n              example: ACT\n        - type: object\n          properties:\n            transportEventTypeCode:\n              $ref: '#/components/schemas/transportEventTypeCode'\n        - type: object\n          properties:\n            delayReasonCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/delayReasonCode'\n        - type: object\n          properties:\n            changeRemark:\n              $ref: '#/components/schemas/changeRemark'\n        - type: object\n          properties:\n            transportCall:\n              allOf:\n                - $ref: '#/components/schemas/transportCall'\n        - type: object\n          properties:\n            facilityTypeCode:\n              type: string\n              description: |\n                The code to identify the specific type of facility. The code indicates which role the facility plays during the `transportCall`.\n                - BOCR (Border crossing)\n                - CLOC (Customer location)\n                - COFS (Container freight station)\n                - OFFD (Off dock storage)\n                - DEPO (Depot)\n                - INTE (Inland terminal)\n                - POTE (Port terminal)\n                - RAMP (Ramp)\n              enum:\n                - BOCR\n                - CLOC\n                - COFS\n                - OFFD\n                - DEPO\n                - INTE\n                - POTE\n                - RAMP\n              example: 'POTE'\n        - type: object\n          properties:\n            relatedDocumentReferences:\n              allOf:\n                - $ref: '#/components/schemas/relatedDocumentReferences'\n        - type: object\n          properties:\n            references:\n              allOf:\n                - $ref: '#/components/schemas/references'\n      required:\n        - transportEventTypeCode\n        - transportCall\n\n    transportEvent:\n      type: object\n      description: |\n        The `TransportEvent` is a specialized event to handle all events related to transportation.\n      allOf:\n        - type: object\n          properties:\n            metadata:\n              description: |\n                The `metadata` of the `TransportEvent` - includes all non-business related attributes\n              allOf:\n                - $ref: '#/components/schemas/metadata'\n                #Overriding the eventType property to have correct payload response examples\n                - type: object\n                  properties:\n                    eventType:\n                      example: TRANSPORT\n                      enum:\n                        - TRANSPORT\n        - type: object\n          properties:\n            payload:\n              description: |\n                The business attributes related to the `TransportEvent`.\n                \n                This is a conditional object - if `retractedEventID` is **not** provided in the `metadata` then this object is mandatory\n              allOf:\n                - $ref: '#/components/schemas/baseEvent'\n                - $ref: '#/components/schemas/baseTransportEvent'\n      required:\n        - metadata\n\n\n    ########################\n    # Equipment Event object\n    ########################\n\n\n    baseEquipmentEvent:\n      type: object\n      description: |\n        The `EquipmentEvent` is a specialized event to handle all events related to transportation.\n      allOf:\n        #Overriding this property to have correct payload response examples\n        - type: object\n          properties:\n            eventClassifierCode:\n              description: |\n                For `EquipmentEvents` the `eventClassifierCode` can be one of the following values\n                - ACT (Actual)\n                - PLN (Planned)\n                - EST (Estimated)\n              enum:\n                - ACT\n                - PLN\n                - EST\n              example: EST\n        - type: object\n          properties:\n            equipmentEventTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/equipmentEventTypeCode'\n        - type: object\n          properties:\n            equipmentReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/equipmentReference'\n        - type: object\n          properties:\n            ISOEquipmentCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/ISOEquipmentCode'\n        - type: object\n          properties:\n            emptyIndicatorCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/emptyIndicatorCode'\n        - type: object\n          properties:\n            transShipmentOperations:\n              type: string\n              description: |\n                Indicates whether this event is originated in relation to\n                - NONE\n                - OCEAN (Ocean Transshipment)\n                - INTERTERMINAL (Interterminal)\n              enum:\n                - NONE\n                - OCEAN\n                - INTERTERMINAL\n              example: 'NONE'\n        - type: object\n          properties:\n            eventLocation:\n              description: |\n                General purpose object to capture the location in the `EquipmentEvent` whenever it is **not** associated with a `TransportCall` (this could be stuffing and stripping). The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\n              anyOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/facilityLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/unLocationLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/addressLocation'\n        - type: object\n          properties:\n            transportCall:\n              allOf:\n                - $ref: '#/components/schemas/transportCall'\n        - type: object\n          properties:\n            facilityTypeCode:\n              type: string\n              description: |\n                The code to identify the specific type of facility. The code indicates which role the facility plays during the `transportCall` or during *stuffing*/*stipping* in case the event does not have a `transportCall`.\n                - BOCR (Border crossing)\n                - CLOC (Customer location)\n                - COFS (Container freight station)\n                - OFFD (Off dock storage)\n                - DEPO (Depot)\n                - INTE (Inland terminal)\n                - POTE (Port terminal)\n                - RAMP (Ramp)\n              enum:\n                - BOCR\n                - CLOC\n                - COFS\n                - OFFD\n                - DEPO\n                - INTE\n                - POTE\n                - RAMP\n              example: 'POTE'\n        - type: object\n          properties:\n            relatedDocumentReferences:\n              allOf:\n                - $ref: '#/components/schemas/relatedDocumentReferences'\n        - type: object\n          properties:\n            references:\n              allOf:\n                - $ref: '#/components/schemas/references'\n        - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/2.0.2#/components/schemas/seals'\n      required:\n        - equipmentEventTypeCode\n        - emptyIndicatorCode\n\n    equipmentEvent:\n      type: object\n      description: |\n        The `EquipmentEvent` is a specialized event to handle all events related to equipment (containers).\n      allOf:\n        - type: object\n          properties:\n            metadata:\n              description: |\n                The `metadata` of the `EquipmentEvent` - includes all non-business related attributes\n              allOf:\n                - $ref: '#/components/schemas/metadata'\n                #Overriding the eventType property to have correct payload response examples\n                - type: object\n                  properties:\n                    eventType:\n                      example: EQUIPMENT\n                      enum:\n                        - EQUIPMENT\n        - type: object\n          properties:\n            payload:\n              description: |\n                The business attributes related to the `EquipmentEvent`.\n                \n                This is a conditional object - if `retractedEventID` is **not** provided in the `metadata` then this object is mandatory\n              allOf:\n                - $ref: '#/components/schemas/baseEvent'\n                - $ref: '#/components/schemas/baseEquipmentEvent'\n      required:\n        - metadata\n\n\n    #########################\n    # Operations Event object\n    #########################\n\n\n    # baseOperationsEvent:\n    #   type: object\n    #   description: |\n    #     The operations event entity is a specialization of the event entity to support specification of data that only applies to an operations event.\n    #   allOf:\n    #     #Overriding this property to have correct payload response examples\n    #     - type: object\n    #       properties:\n    #         eventType:\n    #           example: OPERATIONS\n    #           enum:\n    #             - OPERATIONS\n    #     #Overriding this property to have correct payload response examples\n    #     - type: object\n    #       properties:\n    #         eventClassifierCode:\n    #           description: |\n    #             Code for the event classifier can be\n    #             - ACT (Actual)\n    #             - PLN (Planned)\n    #             - EST (Estimated)\n    #             - REQ (Requested)\n    #           enum:\n    #             - ACT\n    #             - PLN\n    #             - EST\n    #             - REQ\n    #           example: ACT\n    #     - type: object\n    #       properties:\n    #         operationsEventTypeCode:\n    #           $ref: '#/components/schemas/operationsEventTypeCode'\n    #     - type: object\n    #       properties:\n    #         publisher:\n    #           allOf:\n    #             - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DOCUMENTATION_DOMAIN/1.0.4#/components/schemas/partyNoID'\n    #     - type: object\n    #       properties:\n    #         publisherRole:\n    #           $ref: '#/components/schemas/publisherRole'\n    #     - type: object\n    #       properties:\n    #         eventLocation:\n    #           allOf:\n    #             - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/location'\n    #             - description: The location where the event takes place.\n    #     - type: object\n    #       properties:\n    #         portCallServiceTypeCode:\n    #           $ref: '#/components/schemas/portCallServiceTypeCode'\n    #     - type: object\n    #       properties:\n    #         portCallPhaseTypeCode:\n    #           $ref: '#/components/schemas/portCallPhaseTypeCode'\n    #     - type: object\n    #       properties:\n    #         facilityTypeCode:\n    #           $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/facilityTypeCodeOPR'\n    #     - type: object\n    #       properties:\n    #         delayReasonCode:\n    #           $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/delayReasonCode'\n    #     - type: object\n    #       properties:\n    #         remark:\n    #           $ref: '#/components/schemas/remark'\n    #     - type: object\n    #       properties:\n    #         transportCall:\n    #           $ref: '#/components/schemas/transportCall'\n    #     - type: object\n    #       properties:\n    #         vesselPosition:\n    #           allOf:\n    #             - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/geoLocation'\n    #             - description: The position of the vessel at the time when the message was sent\n    #     - type: object\n    #       properties:\n    #         milesToDestinationPort:\n    #           allOf:\n    #             - $ref: '#/components/schemas/milesToDestinationPort'\n    #     - type: object\n    #       properties:\n    #         vesselDraft:\n    #           allOf:\n    #             - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselDraft'\n    #     - type: object\n    #       properties:\n    #         vesselDraftUnit:\n    #           allOf:\n    #             - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/dimensionUnit'\n    #   required:\n    #     - operationsEventTypeCode\n    #     - publisher\n    #     - publisherRole\n    #     - transportCall\n\n    # operationsEvent:\n    #   type: object\n    #   allOf:\n    #     - $ref: '#/components/schemas/baseEvent'\n    #     - $ref: '#/components/schemas/baseOperationsEvent'\n\n\n    ##############################\n    # Shipment Subscription object\n    ##############################\n\n\n    shipmentSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            shipmentEventTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/shipmentEventTypeCodes'\n        - type: object\n          properties:\n            documentTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/documentTypeCodes'\n        - type: object\n          properties:\n            documentReference:\n              allOf:\n                - $ref: '#/components/schemas/documentReference'\n                - description: |\n                    The `documentReference` to filter by. Specifying this value will only return `shipmentEvents` related to this specific `documentReference`.\n                    \n                    If specified - the `documentTypeCode` filter should **also** be used as `documentReference` is not neccessarily unique by itself.\n        # - type: object\n        #   properties:\n        #     carrierBookingRequestReference:\n        #       allOf:\n        #         - $ref: '#/components/schemas/carrierBookingRequestReference'\n        # - type: object\n        #   properties:\n        #     carrierBookingReference:\n        #       allOf:\n        #         - $ref: '#/components/schemas/carrierBookingReference'\n        # - type: object\n        #   properties:\n        #     transportDocumentReference:\n        #       allOf:\n        #         - $ref: '#/components/schemas/transportDocumentReference'\n        - type: object\n          properties:\n            equipmentReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/equipmentReference'\n                - description: |\n                    The `equipmentReference` to filter by. Specifying this value will only return `shipmentEvents` related to this specific `equipmentReference`.\n\n\n    ###############################\n    # Equipment Subscription object\n    ###############################\n\n\n    equipmentSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            equipmentEventTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/equipmentEventTypeCodes'\n        - type: object\n          properties:\n            equipmentReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/equipmentReference'\n                - description: |\n                    The `equipmentReference` to filter by. Specifying this value will only return `equipmentEvents` related to this specific `equipmentReference`.\n        - $ref: '#/components/schemas/transportCallSubscriptionBody'\n\n\n    ###############################\n    # Transport Subscription object\n    ###############################\n\n\n    transportSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            transportEventTypeCode:\n              allOf:\n                - $ref: '#/components/schemas/transportEventTypeCodes'\n        - $ref: '#/components/schemas/transportCallSubscriptionBody'\n\n\n    ###################################\n    # TransportCall Subscription object\n    ###################################\n\n\n    transportCallSubscriptionBody:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            transportCallReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/transportCallReference'\n                - description: |\n                    Specifying this filter will only return events related to this specific `transportCallReference`.\n        - type: object\n          properties:\n            vesselIMONumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselIMONumber'\n                - description: |\n                    This filter can be used to only send events related to a specific `vesselIMONumber`.\n        - type: object\n          properties:\n            carrierExportVoyageNumber:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierExportVoyageNumber'\n                - description: |\n                    This filter can be used to only send events related to a specific `carrierExportVoyageNumber`.\n        - type: object\n          properties:\n            universalExportVoyageReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalExportVoyageReference'\n                - description: |\n                    This filter can be used to only send events related to a specific `universalExportVoyageReference`.\n        - type: object\n          properties:\n            carrierServiceCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierServiceCode'\n                - description: |\n                    This filter can be used to only send events related to a specific `carrierServiceCode`.\n        - type: object\n          properties:\n            universalServiceReference:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalServiceReference'\n                - description: |\n                    This filter can be used to only send events related to a specific `universalServiceReference`.\n        - type: object\n          properties:\n            UNLocationCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/UNLocationCode'\n                - description: |\n                    This filter can be used to only send events related to a specific `UNLocationCode`.\n\n\n    ################################\n    # Operations Subscription object\n    ################################\n\n\n    # operationsSubscriptionBody:\n    #   type: object\n    #   allOf:\n    #     - type: object\n    #       properties:\n    #         operationsEventTypeCode:\n    #           allOf:\n    #             - $ref: '#/components/schemas/operationsEventTypeCodes'\n    #     - $ref: '#/components/schemas/transportCallSubscriptionBody'\n\n\n    ############################\n    # Document References object\n    ############################\n\n\n    relatedDocumentReferences:\n      type: array\n      description: |\n        An optional list of key-value (`relatedDocumentReferenceType`-`relatedDocumentReferenceValue`) pairs representing links to objects relevant to the event. The `relatedDocumentReferenceType`-field is used to describe where the `relatedDocumentReferenceValue`-field is pointing to.\n      example:\n        - relatedDocumentReferenceType: 'BKG'\n          relatedDocumentReferenceValue: 'ABC123059'\n        - relatedDocumentReferenceType: 'TRD'\n          relatedDocumentReferenceValue: '85943567'\n      items:\n        type: object\n        properties:\n          relatedDocumentReferenceType:\n            type: string\n            description: |\n              Describes where the `relatedDocumentReferenceValue` is pointing to. Can be one of the following values\n              - CBR (Carrier Booking Request Reference)\n              - BKG (Carrier Booking Reference)\n              - SHI (Shipping Instruction Reference)\n              - TRD (Transport Document Reference)\n            example: BKG\n            enum:\n              - CBR\n              - BKG\n              - SHI\n              - TRD\n          relatedDocumentReferenceValue:\n            type: string\n            maxLength: 100\n            description: |\n              The reference to the object described by `relatedDocumentReferenceType`\n            example: '123e4567e89b'\n\n    transportCall:\n      type: object\n      allOf:\n        - type: object\n          properties:\n            transportCallReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/transportCallReference'\n        - type: object\n          properties:\n            portVisitReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/portVisitReference'\n        - type: object\n          properties:\n            carrierServiceCode:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierServiceCode'\n        - type: object\n          properties:\n            universalServiceReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalServiceReference'\n        - type: object\n          properties:\n            carrierExportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierExportVoyageNumber'\n        - type: object\n          properties:\n            universalExportVoyageReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalExportVoyageReference'\n        - type: object\n          properties:\n            carrierImportVoyageNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/carrierImportVoyageNumber'\n        - type: object\n          properties:\n            universalImportVoyageReference:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/universalImportVoyageReference'\n        - type: object\n          properties:\n            transportCallSequenceNumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/transportCallSequenceNumber'\n        - type: object\n          properties:\n            modeOfTransport:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/modeOfTransport'\n        - type: object\n          properties:\n            location:\n              description: |\n                General purpose object to capture the location of the `TransportCall`. The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` and/or an `Address`.\n              anyOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/facilityLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/unLocationLocation'\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/LOCATION_DOMAIN/2.0.3#/components/schemas/addressLocation'\n        - type: object\n          properties:\n            vessel:\n              allOf:\n                - $ref: '#/components/schemas/vessel'\n      required:\n        - transportCallReference\n        - modeOfTransport\n\n    vessel:\n      type: object\n      description: |\n        A floating, sea going structure (mother vessels and feeder vessels) with either an internal or external mode of propulsion designed for the transport of cargo and/or passengers.\n      allOf:\n        - type: object\n          properties:\n            vesselIMONumber:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselIMONumber'\n        - type: object\n          properties:\n            name:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselName'\n        - type: object\n          properties:\n            flag:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselFlag'\n        - type: object\n          properties:\n            callSign:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselCallSignNumber'\n        - type: object\n          properties:\n            operatorCarrierCode:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselOperatorCarrierCode'\n        - type: object\n          properties:\n            operatorCarrierCodeListProvider:\n              allOf:\n                - $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/vesselOperatorCarrierCodeListProvider'\n      required:\n        - vesselIMONumber\n      \n    references:\n      type: array\n      description: |\n        References provided by the shipper or freight forwarder at the time of booking or at the time of providing shipping instruction. Carriers share it back when providing track and trace event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.\n        \n        In addition to the References provided by the shipper or freight forwarder - the carrier can provide an extra `referenceType` called `EQ` which is a reference to an Equipment.\n      example:\n        - referenceType: 'EQ'\n          referenceValue: 'APZU4812090'\n      items:\n        type: object\n        properties:\n            referenceType:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/referenceType'\n            referenceValue:\n              $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/referenceValue'\n      required:\n        - referenceType\n        - referenceValue\n        \n\n    ##########################\n    # Simple types\n    ##########################\n\n\n    callbackUrl:\n      type: string\n      format: uri\n      description: |\n        The endPoint where a Carrier whould send back events to the Shipper. The callback can contain query parameters uniquely identifying the originator of the events.\n      example: 'https://myserver.com/send/callback/here?shipperRef=\u003cshipper defined unique id\u003e'\n    # carrierBookingReference:\n    #   type: string\n    #   maxLength: 100\n    #   description: |\n    #     The reference to a Booking. Using this filter in a subscription will only return Events that are related to the `carrierBookingReference` specified\n    #   example: '{the-id-of-the-documentTypeCode}'\n    # carrierBookingRequestReference:\n    #   type: string\n    #   maxLength: 100\n    #   description: |\n    #     The reference to a Booking Request. Using this filter in a subscription will only return Events that are related to the `carrierBookingRequestReference` specified\n    #   example: '{the-id-of-the-documentTypeCode}'\n    changeRemark:\n      type: string\n      maxLength: 250\n      description: |\n        Free text field to provide information as to why the `TransportEvent` was sent\n      example: 'Bad weather'\n    documentReference:\n      type: string\n      maxLength: 100\n      description: |\n        The reference of the object defined by the `documentTypeCode`\n      example: '\u003cthe-id-of-the-documentTypeCode\u003e'\n    documentTypeCode:\n      type: string\n      maxLength: 3\n      description: |\n        The `documentTypeCode` is used to identify the type of information `documentReference` points to. Can be one of the following values\n        - CBR (Carrier Booking Request Reference)\n        - BKG (Booking)\n        - SHI (Shipping Instruction)\n        - TRD (Transport Document)\n        - SRM (Shipment Release Message)\n        - ARN (Arrival Notice)\n        - VGM (Verified Gross Mass)\n        - CAS (Cargo Survey)\n        - CUC (Customs Clearance)\n        - DGD (Dangerous Goods Declaration)\n        - OOG (Out of Gauge)\n        - CQR (Contract Quotation Reference)\n        \n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/documenttypecodes.csv)\n      example: SHI\n      enum:\n        - CBR\n        - BKG\n        - SHI\n        - TRD\n        - SRM\n        - ARN\n        - VGM\n        - CAS\n        - CUC\n        - DGD\n        - OOG\n        - CQR\n    documentTypeCodes:\n      type: array\n      description: |\n        List of `documentTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\n\n        Default is none as it will not filter on `documentTypeCode` if not specified.\n      example: [SHI,TRD]\n      items:\n        $ref: '#/components/schemas/documentTypeCode'\n    equipmentEventTypeCode:\n      type: string\n      description: |\n        Unique identifier for `equipmentEventTypeCode` - can be one of the following values\n        - LOAD (Loaded)\n        - DISC (Discharged)\n        - GTIN (Gated in)\n        - GTOT (Gated out)\n        - STUF (Stuffed)\n        - STRP (Stripped)\n        - PICK (Pick-up)\n        - DROP (Drop-off)\n        - INSP (Inspected)\n        - RSEA (Resealed)\n        - RMVD (Removed)\n        - CUSS (Customs Selected for Scan)\n        - CUSI (Customs Selected for Inspection)\n        - CUSR (Customs Release)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/equipmenteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum: \n        - LOAD\n        - DISC\n        - GTIN\n        - GTOT\n        - STUF\n        - STRP\n        - PICK\n        - DROP\n        - INSP\n        - RSEA\n        - RMVD\n        - CUSS\n        - CUSI\n        - CUSR\n      example: LOAD\n    equipmentEventTypeCodes:\n      type: array\n      description: |\n        List of `equipmentEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\n\n        Default is none as it will not filter on `equipmentEventTypeCode` if not specified.\n      example: [GTIN,GTOT]\n      items:\n        $ref: '#/components/schemas/equipmentEventTypeCode'\n    eventClassifierCode:\n      type: string\n      description: |\n        Code for the event classifier. Values can vary depending on eventType\n      #   - PLN (Planned)\n      #   - ACT (Actual)\n      #   - REQ (Requested)\n      #   - EST (Estimated)\n      # enum:\n      #   - PLN\n      #   - ACT\n      #   - REQ\n      #   - EST\n      # example: ACT\n    eventID:\n      type: string\n      format: uuid\n      description: |\n        The unique identifier for this event (*the message - not the source*).\n      example: '3cecb101-7a1a-43a4-9d62-e88a131651e2'\n    eventCreatedDateTime:\n      type: string\n      format: date-time\n      description: |\n        The timestamp of when the event was created.\n      example: '2021-01-09T14:12:56+01:00'\n    eventDateTime:\n      type: string\n      format: date-time\n      description: |\n        The local date and time, when the event took place or when the event will take place, in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.\n      example: '2019-11-12T07:41:00+08:30'\n    eventType:\n      type: string\n      description: |\n        The type of the Event - to be used as a discriminator.\n      # enum:\n      #   - EQUIPMENT\n      #   - SHIPMENT\n      #   - TRANSPORT\n      #   - OPERATIONS\n    milesToDestinationPort:\n      type: number\n      format: float\n      description: |\n        Remaining distance reported by the vessel to the next destination port in nautical miles    \n      example: 245.45\n    operationsEventTypeCode:\n      type: string\n      description: |\n        The code to identify the type of event that is related to the operation\n        - STRT (Started)\n        - CMPL (Completed)\n        - ARRI (Arrived)\n        - DEPA (Departed)\n        - OMIT (Omitted)\n        - CANC (Cancelled)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/operationseventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - STRT\n        - CMPL\n        - ARRI\n        - DEPA\n        - OMIT\n        - CANC\n      example: STRT\n    operationsEventTypeCodes:\n      type: array\n      description: |\n        List of `operationsEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\n\n        Default is none as it will not filter on `operationsEventTypeCode` if not specified.\n      example: [ARRI,CMPL]\n      items:\n        $ref: '#/components/schemas/operationsEventTypeCode'\n    portCallPhaseTypeCode:\n      type: string\n      description: |\n        The general direction of the vessel for which information applies\n        - INBD (Inbound)\n        - ALGS (Alongside)\n        - SHIF (Shifting)\n        - OUTB (Outbound)\n\n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallphasetypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - INBD\n        - ALGS\n        - SHIF\n        - OUTB\n      example: ALGS\n    portCallServiceTypeCode:\n      type: string\n      description: |\n        The type of the service provided in the port call\n        - PILO (Pilotage)\n        - MOOR (Mooring)\n        - CRGO (Cargo operations)\n        - TOWG (Towage)\n        - BUNK (Bunkering)\n        - LASH (Lashing)\n        - SAFE (Safety)\n        - FAST (All Fast)\n        - GWAY (Gangway down and secure)\n        - ANCO (Anchorage operations)\n        - SLUG (Sludge)\n        - SHPW (Shore Power)\n        - LCRO (Loading cargo operations)\n        - DCRO (Discharge cargo operations)\n        - VRDY (Vessel ready)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/portcallservicetypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - PILO\n        - MOOR\n        - CRGO\n        - TOWG\n        - BUNK\n        - LASH\n        - SAFE\n        - FAST\n        - GWAY\n        - ANCO\n        - SLUG\n        - SHPW\n        - LCRO \n        - DCRO\n        - VRDY\n      example: BUNK\n    publisherRole:\n      type: string\n      description: |\n        The party function code of the publisher. The values are divided into 4 categories:\n        \n        #### Carrier\n        - CA (Carrier)\n        - AG (Carrier local agent)\n        - VSL (Vessel)\n        \n        #### Port\n        - ATH (Port Authorities)\n        - PLT (Port Pilot)\n        - TWG (Towage service provider)\n        - MOR (Mooring service provider)\n        \n        #### Terminal\n        - TR (Terminal)\n        \n        #### Service Provider\n        - LSH (Lashing service provider)\n        - BUK (Bunker service provider)\n        - SLU (Sludge service provider)\n        - SVP (Any other service provider)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/publisherrole.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - CA\n        - AG\n        - VSL\n        - ATH\n        - PLT\n        - TWG\n        - MOR\n        - TR\n        - LSH\n        - BUK\n        - SLU\n        - SVP\n      example: TR\n    reason:\n      type: string\n      maxLength: 250\n      description: |\n        This field can be used to explain why a specific `ShipmentEvent` has been sent.\n      example: 'The following attributes are missing...'\n    remark:\n      type: string\n      maxLength: 500\n      description: |\n        Free text to provide additional information on the context.\n      example: 'Port closed due to strike'\n    retractedEventID:\n      type: string\n      format: uuid\n      description: |\n        Reference to an Event that is to be retracted. If provided, the payload of the event should **not** be included.\n      example: '78cca721-8b0b-44c0-b359-c3f7dd7865ba'\n    secret:\n      type: string\n      format: byte\n      description: |\n        A Base64 encoded secret shared between the Publisher and the Subscriber.\n        It is used to compute the contents of the Notification-Signature header.\n      example: 'MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTIzNDM2NTc4NjIzODk3NDY5MDgyNzM0OTg3MTIzNzg2NA=='\n    shipmentEventTypeCode:\n      type: string\n      description: |\n        The status of the document in the process. Possible values are\n        - RECE (Received)\n        - DRFT (Drafted)\n        - PENA (Pending Approval)\n        - PENU (Pending Update)\n        - PENC (Pending Confirmation)\n        - CONF (Confirmed)\n        - REJE (Rejected)\n        - APPR (Approved)\n        - ISSU (Issued)\n        - SURR (Surrendered)\n        - SUBM (Submitted)\n        - VOID (Void)\n        - REQS (Requested)\n        - CMPL (Completed)\n        - HOLD (On Hold)\n        - RELS (Released)\n        - CANC (Cancelled)\n\n        More details can be found on [GitHub](https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/shipmenteventtypecodes.csv)\n      enum:\n        - RECE\n        - DRFT\n        - PENA\n        - PENU\n        - PENC\n        - CONF\n        - REJE\n        - APPR\n        - ISSU\n        - SURR\n        - SUBM\n        - VOID\n        - REQS\n        - CMPL\n        - HOLD\n        - RELS\n        - CANC\n      example: DRFT\n    shipmentEventTypeCodes:\n      type: array\n      description: |\n        List of `shipmentEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\n\n        Default is none as it will not filter on `shipmentEventTypeCode` if not specified.\n      example: [RECE,DRFT]\n      items:\n        $ref: '#/components/schemas/shipmentEventTypeCode'\n    subscriptionID:\n      type: string\n      format: uuid\n      example: '8fbdc2d8-57c8-48b9-a04b-18fd8ec1d809'\n      description: |\n        The carrier issues a unique ID to the shipper or consignee for that subscription\n    # transportDocumentTypeCodes:\n    #   type: array\n    #   description: |\n    #     List of `transportDocumentType` to filter by. If multiple values are selected - the **OR**-operator will be used.\n        \n    #     Default is none as it will not filter on `transportDocumentType` if not specified.\n    #   example: [BOL,SWB]\n    #   items:\n    #     $ref: 'https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/transportDocumentTypeCode'\n    transportEventTypeCode:\n      type: string\n      description: |\n        Identifier for type of `transportEvent`\n        - ARRI (Arrived)\n        - DEPA (Departed)\n        \n        More details can be found on \u003ca href=\"https://github.com/dcsaorg/DCSA-Information-Model/blob/master/datamodel/referencedata.d/transporteventtypecodes.csv\"\u003eGitHub\u003c/a\u003e\n      enum:\n        - ARRI\n        - DEPA\n        # - OMIT\n      example: ARRI\n    transportEventTypeCodes:\n      type: array\n      description: |\n        List of `transportEventTypeCode` to filter by. If multiple values are selected - the **OR**-operator will be used.\n\n        Default is none as it will not filter on `transportEventTypeCode` if not specified.\n      example: [ARRI,DEPA]\n      items:\n        $ref: '#/components/schemas/transportEventTypeCode'\n    # vesselScheduleChangeRemark:\n    #   description: |\n    #     Free text information provided by the vessel operator regarding the reasons for the change in schedule and/or plans to mitigate schedule slippage.\n        \n    #     Deprecated - use changeRemark instead\n    #   type: string\n    #   example: Bad weather\n    #   maxLength: 250\n    #   deprecated: true\n",
			"canonicalURL": "/github.com/dcsaorg/DCSA-OpenAPI@82e5887ff4c6fafd9ce8f7e2ce114f45b6559a66/-/blob/domain/event/event_domain_v3.0.0.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/dcsaorg/DCSA-OpenAPI/blob/82e5887ff4c6fafd9ce8f7e2ce114f45b6559a66/domain/event/event_domain_v3.0.0.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"transportEvent\": resolve \"#/components/schemas/transportEvent\": allOf: property \"payload\": allOf: $ref: resolve \"#/components/schemas/baseTransportEvent\": allOf: property \"delayReasonCode\": at domain/event/event_domain_v3.0.0.yaml:685:21: $ref: resolve \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3#/components/schemas/delayReasonCode\": get \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3\": https: do: Get \"https://api.swaggerhub.com/domains/dcsaorg/DCSA_DOMAIN/2.0.3\": host \"api.swaggerhub.com\" is not allowed"
}