{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Erudika/scoold"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "src/main/resources/templates/api.yaml",
			"byteSize": 45793,
			"content": "openapi: \"3.0.2\"\ninfo:\n  description: \"This is the Scoold API. First, you need to generate an [API key](/admin) in order to access the API.\"\n  version: \"1.1.1\"\n  title: \"Scoold API documentation\"\nexternalDocs:\n  description: \"README\"\n  url: \"https://github.com/Erudika/scoold\"\ntags:\n- name: \"posts\"\n- name: \"users\"\n- name: \"tags\"\n- name: \"comments\"\n- name: \"reports\"\n- name: \"spaces\"\n- name: \"webhooks\"\n- name: \"search\"\n- name: \"stats\"\n- name: \"backups\"\npaths:\n  /api:\n    get:\n      summary: General information and health\n      tags:\n        - stats\n      responses:\n        '200':\n          description: Server is healthy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Health'\n\n        '500':\n          description: Server is unhealthy\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Health'\n  /api/posts:\n    post:\n      summary: Create a new post\n      description: To publish the post in the given space, set the `space` field. Otherwise the post will be created in the default space.\u003cbr\u003eTo change the author, set the `creatorid` field to an existing user.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '201':\n          description: A new post object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: List questions on the front page\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: sortby\n          in: query\n          required: false\n          description: The `sortby` parameter could be a property name like `votes` or `properties.answercount` or a category like `activity`, `unanswered`, `unapproved` (posts without an approved answer)\n          schema:\n            type: string\n        - name: space\n          in: query\n          required: false\n          schema:\n            type: string\n        - name: filter\n          in: query\n          required: false\n          description: The `filter` is used to filter results based on tags or location\n          schema:\n            type: string\n            enum: [favtags, local]\n        - name: favtags\n          in: query\n          required: false\n          description: Used in combination with the `favtags` filter parameter to filter posts based on a set of tags\n          schema:\n            type: array\n            items:\n              type: string\n        - name: latlng\n          in: query\n          required: false\n          description: Used in combination with the `local` filter parameter to filter posts based on location, for example `42.32,24.53`\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A page of posts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n  /api/posts/{id}:\n    get:\n      summary: Returns a specific post along with its children (replies) and similar posts\n      description: You can paginate through child objects using the `page` parameter\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post to retrieve\n          schema:\n            type: string\n        - name: sortby\n          in: query\n          required: false\n          description: Sort children by field\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A post object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        '404':\n          description: Not found\n    patch:\n      summary: Update post\n      description: To change the user who edited the question, specify `lasteditby` in the request body. Additionally, you can modify the properties `space`, `latlng` and `location` in the request body to change their values.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post to update\n          schema:\n            type: string\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      responses:\n        '200':\n          description: Post was updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete post\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Post was deleted\n        '404':\n          description: Not found\n  /api/posts/{id}/approve:\n    put:\n      summary: Approve a post which awaits approval by a moderator\n      description: Only works for posts of type `UnapprovedQuestion` or `UnapprovedReply`\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Post was approved\n  /api/posts/{id}/accept/{replyid}:\n    put:\n      summary: Accept an answer (reply) to post as the best answer\n      description: Only works for posts of type `Reply`. This works as a toggle - each subsequent request will undo the previous action.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n        - name: replyid\n          in: path\n          required: true\n          description: The id of the `Reply` to accept\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Post was accepted\n  /api/posts/{id}/close:\n    put:\n      summary: Closes or opens a post - closed posts cannot have any more replies\n      description: Only works for posts of type `Question`. This works as a toggle - each subsequent request will undo the previous action.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Post was closed\n  /api/posts/{id}/pin:\n    put:\n      summary: Pins or unpins a post - pinned posts always stay on top\n      description: Only works for posts of type `Question` or `Sticky`. This works as a toggle - each subsequent request will undo the previous action.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Post was pinned\n  /api/posts/{id}/restore/{revisionid}:\n    put:\n      summary: Restores a revision of a post\n      description: Restoring a revision reverts the content of a post to a previous state.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n        - name: revisionid\n          in: path\n          required: true\n          description: The id of the revision to restore\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Revision was restored\n  /api/posts/{id}/like:\n    put:\n      summary: Likes or unlikes a post - liked posts go to a user's favorites list\n      description: Only works for posts of type `Question` or `Sticky`. This works as a toggle - each subsequent request will undo the previous action.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Post was liked\n  /api/posts/{id}/voteup:\n    put:\n      summary: Upvotes a post\n      description: Upvotes\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n        - name: userid\n          in: query\n          required: true\n          description: The id of the user voting\n          schema:\n            type: string\n      responses:\n        '200':\n          description: vote succeeded\n        '400':\n          description: vote failed\n  /api/posts/{id}/votedown:\n    put:\n      summary: Downvotes a post\n      description: Downvotes\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n        - name: userid\n          in: query\n          required: true\n          description: The id of the user voting\n          schema:\n            type: string\n      responses:\n        '200':\n          description: vote succeeded\n        '400':\n          description: vote failed\n  /api/posts/{id}/comments:\n    get:\n      summary: Returns a page of comments for a given post\n      description: By default, oldest comments are returned first, 5 per page. You can change that by setting the parameters `sortby`, `desc`, `limit` and `page`.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post to retrieve\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A list of comments\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comments'\n        '404':\n          description: Not found\n  /api/posts/{id}/revisions:\n    get:\n      summary: Returns a page of revisions for a given post\n      description: You can paginate through results using the parameters `sortby`, `desc`, `limit` and `page`.\n      tags:\n        - posts\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post to retrieve\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A list of revisions\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Revisions'\n        '404':\n          description: Not found\n  /api/users:\n    post:\n      summary: Create a new user\n      description: To assign spaces to users, use the `spaces` field. Otherwise the user will be assigned to the default space.\u003cbr\u003eThe `user` field contains the core Para `User` corresponding to the new `Profile` object.\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: The request entity. **Note:** `id` field will be ignored as all user ids are auto-generated by Para.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/User'\n      responses:\n        '201':\n          description: A new user object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: List users\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: q\n          in: query\n          required: false\n          example: \"*\"\n          description: A query string to find specific users\n          schema:\n            type: string\n        - name: sortby\n          in: query\n          required: false\n          example: \"timestamp\"\n          description: This could be a property name like `votes`, `properties.yearlyVotes`, `properties.quarterlyVotes`, `properties.monthlyVotes`  or `properties.weeklyVotes`.\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A list of users\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profiles'\n  /api/users/{id}:\n    get:\n      summary: Returns a specific user profile along with its user object\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: string\n      responses:\n        '200':\n          description: A user profile\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n        '404':\n          description: Not found\n    patch:\n      summary: Update user\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the user to update\n          schema:\n            type: string\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Profile'\n      responses:\n        '200':\n          description: Post was updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Profile'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete user\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the user to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Profile and user objects were deleted\n        '404':\n          description: Not found\n  /api/users/{id}/questions:\n    get:\n      summary: Returns a list of questions created by a user\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A list of posts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n        '404':\n          description: Not found\n  /api/users/{id}/replies:\n    get:\n      summary: Returns a list of replies (answers) created by a user\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A list of posts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n        '404':\n          description: Not found\n  /api/users/{id}/favorites:\n    get:\n      summary: Returns a list of a user's favorite posts\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A list of posts\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n        '404':\n          description: Not found\n  /api/users/{id}/moderator:\n    put:\n      summary: Promote or demote user as moderator\n      description: This works as a toggle - each subsequent request will undo the previous action.\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n      responses:\n        '200':\n          description: User was promoted or demoted\n  /api/users/{id}/ban:\n    put:\n      summary: Ban or unban user\n      description: You can permanently ban a user with `banuntil=-1`\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the post\n          schema:\n            type: string\n        - name: banuntil\n          in: query\n          required: false\n          description: Ban period end date as a future Unix timestamp in milliseconds, use `0` to unban, `-1` to permaban\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: User was banned or unbanned\n  /api/users/spaces:\n    put:\n      summary: Edit spaces in bulk\n      description: Map users to spaces\n      tags:\n        - users\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                spaces:\n                  description: list of spaces\n                  type: array\n                  items:\n                    type: string\n                users:\n                  description: list of user ids\n                  type: array\n                  items:\n                    type: string\n\n      responses:\n        '200':\n          description: Spaces were updated\n  /api/tags:\n    post:\n      summary: Create a new tag\n      tags:\n        - tags\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Tag'\n      responses:\n        '201':\n          description: A new tag object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: List tags\n      description: Returns a page of tags. Use the `page` parameter to paginate through results.\n      tags:\n        - tags\n      security:\n      - scoold_auth: []\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A page of tags returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tags'\n  /api/tags/{id}:\n    get:\n      summary: Get tag\n      tags:\n        - tags\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the tag to get\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Tag object returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '404':\n          description: Not found\n    patch:\n      summary: Rename tag\n      tags:\n        - tags\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the tag to rename\n          schema:\n            type: string\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                tag:\n                  description: The new name of the tag\n                  type: string\n                  example: new-tag-name\n      responses:\n        '200':\n          description: Tag was renamed\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Tag'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete tag\n      tags:\n        - tags\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the tag to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Tag was deleted\n        '404':\n          description: Not found\n  /api/tags/{id}/questions:\n    get:\n      summary: List questions tagged with a specific tag\n      tags:\n        - tags\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the tag\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Tag object returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n  /api/comments:\n    post:\n      summary: Create a new comment\n      tags:\n        - comments\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: Set `creatorid` to change the author of the comment. Set `parentid` to the id of an existing post.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Comment'\n      responses:\n        '201':\n          description: A new comment object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Comment'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  /api/comments/{id}:\n    get:\n      summary: Get comment\n      tags:\n        - comments\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the comment to get\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Comment object returned\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/Comment'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete comment\n      tags:\n        - comments\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the comment to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Comment was deleted\n  /api/reports:\n    post:\n      summary: Create a new report\n      description: You can store any additional properties in the report object - simply pass those as JSON in the request body.\n      tags:\n        - reports\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: Set `creatorid` to change the author of the report.\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Report'\n      responses:\n        '201':\n          description: A new report object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Report'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: List reports\n      tags:\n        - reports\n      security:\n      - scoold_auth: []\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: a page of report objects returned\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/Reports'\n  /api/reports/{id}:\n    get:\n      summary: Get report\n      tags:\n        - reports\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the report to get\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Report object returned\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/Report'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete report\n      tags:\n        - reports\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the report to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Report was deleted\n  /api/reports/{id}/close:\n    put:\n      summary: Close report\n      tags:\n        - reports\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the report to close\n          schema:\n            type: string\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              properties:\n                solution:\n                  description: Actions taken to solve the issue\n                  type: string\n      responses:\n        '200':\n          description: Report was closed\n  /api/spaces:\n    post:\n      summary: Create a new space\n      tags:\n        - spaces\n      security:\n      - scoold_auth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Space'\n      responses:\n        '201':\n          description: A new space object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Space'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: List spaces\n      tags:\n        - spaces\n      security:\n      - scoold_auth: []\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A page of space objects returned\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/Spaces'\n  /api/spaces/{id}:\n    get:\n      summary: Get space\n      tags:\n        - spaces\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the space to get\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Space object returned\n          content:\n            application/json:\n                schema:\n                  $ref: '#/components/schemas/Space'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete space\n      tags:\n        - spaces\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the space to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Space was deleted\n  /api/webhooks:\n    post:\n      summary: Create a new webhook\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n      responses:\n        '201':\n          description: A new webhook object\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        '400':\n          description: Bad request - missing or invalid request entity\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    get:\n      summary: List webhooks\n      description: Returns a page of webhooks. Use the `page` parameter to paginate through results.\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      parameters:\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: A page of webhooks returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhooks'\n  /api/webhooks/{id}:\n    get:\n      summary: Get webhook\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the webhook to get\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Webhook object returned\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        '404':\n          description: Not found\n    patch:\n      summary: Update webhook\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the webhook to update\n          schema:\n            type: string\n      requestBody:\n        description: The request entity\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Webhook'\n      responses:\n        '200':\n          description: Webhook was updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Webhook'\n        '404':\n          description: Not found\n    delete:\n      summary: Delete webhook\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: The id of the webhook to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Webhook was deleted\n        '404':\n          description: Not found\n  /api/events:\n    get:\n      summary: List webhook events\n      description: The list does not contain the standard `create`, `update`, `delete`, `createAll`, `updateAll`, `deleteAll`. You can subscribe to these events by creating a webhook with a `customEvents` property containing one or more of these events.\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      responses:\n        '200':\n          description: A list of events\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /api/types:\n    get:\n      summary: List available data types for use as webhook type filters.\n      description: You can subscribe to CRUD events in combination with a type filter.\n      tags:\n        - webhooks\n      security:\n      - scoold_auth: []\n      responses:\n        '200':\n          description: A list of data types\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n  /api/search/{type}/{query}:\n    get:\n      summary: Perform full-text search on objects of given type\n      tags:\n        - search\n      security:\n      - scoold_auth: []\n      parameters:\n        - name: type\n          in: path\n          required: true\n          description: The type of object to search for\n          schema:\n            type: string\n        - name: query\n          in: path\n          required: true\n          description: The search query\n          schema:\n            type: string\n        - $ref: '#/components/parameters/limit'\n        - $ref: '#/components/parameters/page'\n        - $ref: '#/components/parameters/sortby'\n        - $ref: '#/components/parameters/desc'\n      responses:\n        '200':\n          description: found objects returned\n          content:\n            application/json:\n              schema:\n                properties:\n                  totalHits:\n                    description: number of total hits for this query\n                    type: integer\n                  page:\n                    description: the page number\n                    type: integer\n                  items:\n                    description: a list of search results\n                    type: array\n                    items:\n                      type: object\n                  lastKey:\n                    description: the last key property of the pager for \"searchAfter\" queries\n                    type: string\n  /api/stats:\n    get:\n      summary: Returns various system statistics and server versions\n      tags:\n        - stats\n      security:\n      - scoold_auth: []\n      responses:\n        '200':\n          description: stats\n  /api/backup:\n    get:\n      summary: Returns a backup ZIP archive of all the data in Scoold\n      tags:\n        - backups\n      security:\n      - scoold_auth: []\n      responses:\n        '200':\n          description: A ZIP backup archive\n          content:\n            application/zip:\n              schema:\n                type: string\n                format: binary\n  /api/restore:\n    put:\n      summary: Restores a backup ZIP archive, overwriting all existing data in Scoold\n      tags:\n        - backups\n      security:\n      - scoold_auth: []\n      requestBody:\n        description: A ZIP backup archive\n        required: true\n        content:\n          application/zip:\n              schema:\n                type: string\n                format: binary\n      responses:\n        '200':\n          description: restore was successful\ncomponents:\n  schemas:\n    Post:\n      required:\n        - id\n        - title\n      properties:\n        id:\n          type: integer\n          format: int64\n        timestamp:\n          type: integer\n          format: int64\n          description: Unix timestamp of when the post was created\n        type:\n          type: string\n          enum:\n            - \"question\"\n            - \"reply\"\n            - \"sticky\"\n          description: Can be one of `question`, `reply`, `sticky`\n        name:\n          type: string\n        title:\n          type: string\n        body:\n          type: string\n        tags:\n          type: array\n          items:\n            type: string\n        creatorid:\n          type: string\n          description: The `id` of the author of this post (an existing user)\n        location:\n          type: string\n          description: The location name associated with this post\n        latlng:\n          type: string\n          description: Coordinates of the location in the format `\"43.26,25.36\"`\n        address:\n          type: string\n          description: The location address associated with this post\n        lastactivity:\n          type: integer\n          format: int64\n        lastedited:\n          type: integer\n          format: int64\n        lasteditby:\n          type: string\n        answerid:\n          type: string\n        revisionid:\n          type: string\n        closerid:\n          type: string\n        wiki:\n          type: boolean\n        space:\n          type: string\n          description: Selects a space or returns questions in the default space\n        comments:\n          $ref: '#/components/schemas/Comments'\n        children:\n          $ref: '#/components/schemas/Posts'\n        similar:\n          $ref: '#/components/schemas/Posts'\n        author:\n          $ref: '#/components/schemas/Profile'\n    Posts:\n      type: array\n      items:\n        $ref: '#/components/schemas/Post'\n    Profile:\n      type: object\n      properties:\n        id:\n          type: string\n        creatorid:\n          type: string\n        name:\n          type: string\n        picture:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n        bannedUntil:\n          type: integer\n          format: int64\n        spaces:\n          type: array\n          items:\n            type: string\n        badges:\n          type: string\n        website:\n          type: string\n        slackUserId:\n          type: string\n        mattermostUserId:\n          type: string\n        microsoftUserId:\n          type: string\n        location:\n          type: string\n        latlng:\n          type: string\n        aboutme:\n          type: string\n        user:\n          $ref: '#/components/schemas/User'\n    Profiles:\n      type: array\n      items:\n        $ref: '#/components/schemas/Profile'\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n        identifier:\n          description: Can be in the format - `user@domain.com`, `fb:123456` (Facebook), `gp:google_id` (Google), `ldap:ldap_id` (LDAP), `oa2:oauth_id` (OAuth2), etc. Check the [Para docs]() for more details.\n          type: string\n        name:\n          type: string\n        picture:\n          type: string\n        groups:\n          type: string\n        email:\n          type: string\n        active:\n          type: boolean\n        password:\n          type: string\n    Revision:\n      type: object\n      properties:\n        id:\n          type: string\n        body:\n          type: string\n        description:\n          type: string\n        title:\n          type: string\n        original:\n          type: string\n        author:\n          $ref: '#/components/schemas/Profile'\n    Revisions:\n      type: array\n      items:\n        $ref: '#/components/schemas/Revision'\n    Tag:\n      type: object\n      properties:\n        tag:\n          type: string\n        count:\n          type: integer\n    Tags:\n      type: array\n      items:\n        $ref: '#/components/schemas/Tag'\n    Comment:\n      type: object\n      properties:\n        id:\n          type: string\n        creatorid:\n          type: string\n        parentid:\n          type: string\n        timestamp:\n          type: integer\n          format: int64\n        comment:\n          type: string\n        hidden:\n          type: boolean\n        authorName:\n          type: string\n    Comments:\n      type: array\n      items:\n        $ref: '#/components/schemas/Comment'\n    Report:\n      type: object\n      properties:\n        id:\n          type: string\n        creatorid:\n          type: string\n        subType:\n          type: string\n          enum:\n            - SPAM\n            - OFFENSIVE\n            - DUPLICATE\n            - INCORRECT\n            - OTHER;\n        timestamp:\n          type: integer\n          format: int64\n        solution:\n          type: string\n        link:\n          type: string\n        closed:\n          type: boolean\n        authorName:\n          type: string\n    Reports:\n      type: array\n      items:\n        $ref: '#/components/schemas/Report'\n    Space:\n      type: object\n      properties:\n        id:\n          type: string\n        name:\n          type: string\n        type:\n          type: string\n    Spaces:\n      type: array\n      items:\n        $ref: '#/components/schemas/Space'\n    Webhook:\n      type: object\n      properties:\n        targetUrl:\n          type: string\n        secret:\n          type: string\n        typeFilter:\n          type: string\n        urlEncoded:\n          type: boolean\n        active:\n          type: boolean\n        tooManyFailures:\n          type: boolean\n        create:\n          type: boolean\n        update:\n          type: boolean\n        delete:\n          type: boolean\n        createAll:\n          type: boolean\n        updateAll:\n          type: boolean\n        deleteAll:\n          type: boolean\n        customEvents:\n          type: array\n          items:\n            type: string\n        triggeredEvent:\n          type: string\n          description: Passed in the body of a trigger `POST` request. Only used to trigger a custom event.\n        customPayload:\n          type: object\n          description: Passed in the body of a trigger `POST` request. Only used to trigger a custom event with a custom payload.\n    Webhooks:\n      type: array\n      items:\n        $ref: '#/components/schemas/Webhook'\n    Health:\n      type: object\n      properties:\n        healthy:\n          type: boolean\n        message:\n          type: string\n        pro:\n          type: boolean\n    Error:\n      required:\n        - code\n        - message\n      properties:\n        code:\n          type: integer\n          format: int32\n        message:\n          type: string\n  parameters:\n    limit:\n      name: limit\n      in: query\n      description: How many items to return at one time (default 30)\n      required: false\n      schema:\n        type: integer\n        format: int32\n        default: 30\n    page:\n      name: page\n      in: query\n      description: Page number (paginate through results)\n      required: false\n      schema:\n        type: integer\n        format: int32\n        default: 1\n    sortby:\n      name: sortby\n      in: query\n      description: Field name on which results will be sorted\n      required: false\n      schema:\n        type: string\n        default: \"timestamp\"\n    desc:\n      name: desc\n      in: query\n      description: Descending (true) or ascending (false) sort order\n      required: false\n      schema:\n        type: boolean\n        default: true\n\n  securitySchemes:\n    scoold_auth:\n      description: Don't have an API key? Generate one on the [Administration page](/admin).\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n"
		}
	},
	"Error": "parse: parse spec: paths: /api/posts/{id}: get: operation \"\": parameters: duplicate parameter: \"sortby\" in \"query\""
}