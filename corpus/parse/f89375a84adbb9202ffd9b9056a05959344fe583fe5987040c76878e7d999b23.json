{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/medusajs/medusa"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "docs/api/admin/openapi.yaml",
			"byteSize": 20293,
			"content": "openapi: 3.0.0\ninfo:\n  version: 1.0.0\n  title: Medusa Admin API\n  description: \u003e\n    API reference for Medusa's Admin endpoints. All endpoints are prefixed with\n    `/admin`.\n\n\n    ## Authentication\n\n\n    There are two ways to send authenticated requests to the Medusa server:\n    Using a user's API token, or using a Cookie Session ID.\n\n\n    \u003c!-- ReDoc-Inject: \u003cSecurityDefinitions\u003e --\u003e\n\n\n    ## Expanding Fields\n\n\n    In many endpoints you'll find an `expand` query parameter that can be passed\n    to the endpoint. You can use the `expand` query parameter to unpack an\n    entity's relations and return them in the response.\n\n\n    For example, when you list customers you can also retrieve their groups by\n    passing to the `expand` query parameter the value `groups`.\n\n\n    You can expand more than one relation by separating the relations in the\n    `expand` query parameter with a comma. For example, to retrieve both the\n    orders and the groups of a customer, pass to the `expand` query parameter\n    the value `groups,orders`.\n\n\n    Please note that the parameters you pass to `expand` replace any relations\n    that are expanded by default.\n\n\n    ## Selecting Fields\n\n\n    In many endpoints you'll find a `fields` query parameter that can be passed\n    to the endpoint. You can use the `fields` query parameter to specify which\n    fields in the entity should be returned in the response.\n\n\n    You can pass more than one field by seperating the field names in the\n    `fields` query parameter with a comma.\n\n\n    Only the fields you pass to `field` will be retrieved and returned in the\n    response. Any fields that are returned by default will not be returned in\n    this case. This does not affect relations.\n\n\n    For example, to only select the `title` and `description` fields of a\n    product, pass to the `fields` query parameter the value `title,description`.\n\n\n    ## Pagination\n\n\n    ### Query Parameters\n\n\n    In listing endpoints, such as list customers or list products, you can\n    control the pagination using the query parameters `limit` and `offset`.\n\n\n    `limit` is used to specify the maximum number of items that can be return in\n    the response. `offset` is used to specify how many items to skip before\n    returning the resulting entities.\n\n\n    You can use the `offset` query parameter to change between pages. For\n    example, if the limit is 50, at page 1 the offset should be 0; at page 2 the\n    offset should be 50, and so on.\n\n\n    ### Response Fields\n\n\n    In listing fields, aside from the entities retrieved, there are three\n    pagination-related fields returned: `count`, `limit`, and `offset`.\n\n\n    Similarly to the query parameters, `limit` is the maximum number of items\n    that can be returned in the response, and `field` is the number of items\n    that were skipped before the entities in the result.\n\n\n    `count` is the total number of available items of this entity. It can be\n    used to determine how many pages are there.\n\n\n    For example, if the `count` is 100 and the `limit` is 50, you can divide the\n    `count` by the `limit` to get the number of pages: `100/50 = 2 pages`.\n  license:\n    name: MIT\n    url: https://github.com/medusajs/medusa/blob/master/LICENSE\ntags:\n  - name: Auth\n    description: \u003e-\n      Auth endpoints that allow authorization of admin Users and manages their\n      sessions.\n  - name: App\n    description: App endpoints that allow handling apps in Medusa.\n  - name: Batch Job\n    description: Batch Job endpoints that allow handling batch jobs in Medusa.\n  - name: Claim\n    description: Claim endpoints that allow handling claims in Medusa.\n  - name: Collection\n    description: Collection endpoints that allow handling collections in Medusa.\n  - name: Customer\n    description: Customer endpoints that allow handling customers in Medusa.\n  - name: Customer Group\n    description: Customer Group endpoints that allow handling customer groups in Medusa.\n  - name: Discount\n    description: Discount endpoints that allow handling discounts in Medusa.\n  - name: Discount Condition\n    description: \u003e-\n      Discount Condition endpoints that allow handling discount conditions in\n      Medusa.\n  - name: Draft Order\n    description: Draft Order endpoints that allow handling draft orders in Medusa.\n  - name: Gift Card\n    description: Gift Card endpoints that allow handling gift cards in Medusa.\n  - name: Invite\n    description: Invite endpoints that allow handling invites in Medusa.\n  - name: Note\n    description: Note endpoints that allow handling notes in Medusa.\n  - name: Notification\n    description: Notification endpoints that allow handling notifications in Medusa.\n  - name: Order\n    description: Order endpoints that allow handling orders in Medusa.\n  - name: Price List\n    description: Price List endpoints that allow handling price lists in Medusa.\n  - name: Product\n    description: Product endpoints that allow handling products in Medusa.\n  - name: Product Tag\n    description: Product Tag endpoints that allow handling product tags in Medusa.\n  - name: Product Type\n    description: Product Types endpoints that allow handling product types in Medusa.\n  - name: Product Variant\n    description: Product Variant endpoints that allow handling product variants in Medusa.\n  - name: Region\n    description: Region endpoints that allow handling regions in Medusa.\n  - name: Return Reason\n    description: Return Reason endpoints that allow handling return reasons in Medusa.\n  - name: Return\n    description: Return endpoints that allow handling returns in Medusa.\n  - name: Sales Channel\n    description: Sales Channel endpoints that allow handling sales channels in Medusa.\n  - name: Shipping Option\n    description: Shipping Option endpoints that allow handling shipping options in Medusa.\n  - name: Shipping Profile\n    description: \u003e-\n      Shipping Profile endpoints that allow handling shipping profiles in\n      Medusa.\n  - name: Store\n    description: Store endpoints that allow handling stores in Medusa.\n  - name: Swap\n    description: Swap endpoints that allow handling swaps in Medusa.\n  - name: Tax Rate\n    description: Tax Rate endpoints that allow handling tax rates in Medusa.\n  - name: Upload\n    description: Upload endpoints that allow handling uploads in Medusa.\n  - name: User\n    description: User endpoints that allow handling users in Medusa.\nservers:\n  - url: https://api.medusa-commerce.com/admin\npaths:\n  /apps/authorizations:\n    $ref: paths/apps_authorizations.yaml\n  /apps:\n    $ref: paths/apps.yaml\n  /auth:\n    $ref: paths/auth.yaml\n  /batch-jobs/{id}/cancel:\n    $ref: paths/batch-jobs_{id}_cancel.yaml\n  /batch-jobs/{id}/confirm:\n    $ref: paths/batch-jobs_{id}_confirm.yaml\n  /batch-jobs:\n    $ref: paths/batch-jobs.yaml\n  /batch-jobs/{id}:\n    $ref: paths/batch-jobs_{id}.yaml\n  /collections/{id}/products/batch:\n    $ref: paths/collections_{id}_products_batch.yaml\n  /collections:\n    $ref: paths/collections.yaml\n  /collections/{id}:\n    $ref: paths/collections_{id}.yaml\n  /customer-groups/{id}/customers/batch:\n    $ref: paths/customer-groups_{id}_customers_batch.yaml\n  /customer-groups:\n    $ref: paths/customer-groups.yaml\n  /customer-groups/{id}:\n    $ref: paths/customer-groups_{id}.yaml\n  /customer-groups/{id}/customers:\n    $ref: paths/customer-groups_{id}_customers.yaml\n  /currencies:\n    $ref: paths/currencies.yaml\n  /currencies/{code}:\n    $ref: paths/currencies_{code}.yaml\n  /customers:\n    $ref: paths/customers.yaml\n  /customers/{id}:\n    $ref: paths/customers_{id}.yaml\n  /discounts/{id}/regions/{region_id}:\n    $ref: paths/discounts_{id}_regions_{region_id}.yaml\n  /discounts/{discount_id}/conditions/{condition_id}/batch:\n    $ref: paths/discounts_{discount_id}_conditions_{condition_id}_batch.yaml\n  /discounts/{discount_id}/conditions:\n    $ref: paths/discounts_{discount_id}_conditions.yaml\n  /discounts:\n    $ref: paths/discounts.yaml\n  /discounts/{id}/dynamic-codes:\n    $ref: paths/discounts_{id}_dynamic-codes.yaml\n  /discounts/{discount_id}/conditions/{condition_id}:\n    $ref: paths/discounts_{discount_id}_conditions_{condition_id}.yaml\n  /discounts/{id}:\n    $ref: paths/discounts_{id}.yaml\n  /discounts/{id}/dynamic-codes/{code}:\n    $ref: paths/discounts_{id}_dynamic-codes_{code}.yaml\n  /discounts/code/{code}:\n    $ref: paths/discounts_code_{code}.yaml\n  /gift-cards:\n    $ref: paths/gift-cards.yaml\n  /gift-cards/{id}:\n    $ref: paths/gift-cards_{id}.yaml\n  /draft-orders:\n    $ref: paths/draft-orders.yaml\n  /draft-orders/{id}/line-items:\n    $ref: paths/draft-orders_{id}_line-items.yaml\n  /draft-orders/{id}:\n    $ref: paths/draft-orders_{id}.yaml\n  /draft-orders/{id}/line-items/{line_id}:\n    $ref: paths/draft-orders_{id}_line-items_{line_id}.yaml\n  /draft-orders/{id}/pay:\n    $ref: paths/draft-orders_{id}_pay.yaml\n  /admin/draft-orders/{id}:\n    $ref: paths/admin_draft-orders_{id}.yaml\n  /invites/accept:\n    $ref: paths/invites_accept.yaml\n  /invites:\n    $ref: paths/invites.yaml\n  /invites/{invite_id}:\n    $ref: paths/invites_{invite_id}.yaml\n  /invites/{invite_id}/resend:\n    $ref: paths/invites_{invite_id}_resend.yaml\n  /notes:\n    $ref: paths/notes.yaml\n  /notes/{id}:\n    $ref: paths/notes_{id}.yaml\n  /notifications:\n    $ref: paths/notifications.yaml\n  /notifications/{id}/resend:\n    $ref: paths/notifications_{id}_resend.yaml\n  /order-edits/{id}/items:\n    $ref: paths/order-edits_{id}_items.yaml\n  /order-edits/{id}/cancel:\n    $ref: paths/order-edits_{id}_cancel.yaml\n  /order-edits/{id}/confirm:\n    $ref: paths/order-edits_{id}_confirm.yaml\n  /order-edits:\n    $ref: paths/order-edits.yaml\n  /order-edits/{id}/items/{item_id}:\n    $ref: paths/order-edits_{id}_items_{item_id}.yaml\n  /order-edits/{id}/changes/{change_id}:\n    $ref: paths/order-edits_{id}_changes_{change_id}.yaml\n  /order-edits/{id}:\n    $ref: paths/order-edits_{id}.yaml\n  /order-edits/{id}/request:\n    $ref: paths/order-edits_{id}_request.yaml\n  /orders/{id}/shipping-methods:\n    $ref: paths/orders_{id}_shipping-methods.yaml\n  /orders/{id}/archive:\n    $ref: paths/orders_{id}_archive.yaml\n  /orders/{id}/claims/{claim_id}/cancel:\n    $ref: paths/orders_{id}_claims_{claim_id}_cancel.yaml\n  /orders/{id}/claims/{claim_id}/fulfillments/{fulfillment_id}/cancel:\n    $ref: \u003e-\n      paths/orders_{id}_claims_{claim_id}_fulfillments_{fulfillment_id}_cancel.yaml\n  /orders/{id}/swaps/{swap_id}/fulfillments/{fulfillment_id}/cancel:\n    $ref: \u003e-\n      paths/orders_{id}_swaps_{swap_id}_fulfillments_{fulfillment_id}_cancel.yaml\n  /orders/{id}/fulfillments/{fulfillment_id}/cancel:\n    $ref: paths/orders_{id}_fulfillments_{fulfillment_id}_cancel.yaml\n  /orders/{id}/cancel:\n    $ref: paths/orders_{id}_cancel.yaml\n  /orders/{id}/swaps/{swap_id}/cancel:\n    $ref: paths/orders_{id}_swaps_{swap_id}_cancel.yaml\n  /orders/{id}/capture:\n    $ref: paths/orders_{id}_capture.yaml\n  /orders/{id}/complete:\n    $ref: paths/orders_{id}_complete.yaml\n  /orders/{id}/claims/{claim_id}/shipments:\n    $ref: paths/orders_{id}_claims_{claim_id}_shipments.yaml\n  /order/{id}/claims:\n    $ref: paths/order_{id}_claims.yaml\n  /orders/{id}/fulfillment:\n    $ref: paths/orders_{id}_fulfillment.yaml\n  /orders/{id}/shipment:\n    $ref: paths/orders_{id}_shipment.yaml\n  /orders/{id}/swaps/{swap_id}/shipments:\n    $ref: paths/orders_{id}_swaps_{swap_id}_shipments.yaml\n  /order/{id}/swaps:\n    $ref: paths/order_{id}_swaps.yaml\n  /orders/{id}/claims/{claim_id}/fulfillments:\n    $ref: paths/orders_{id}_claims_{claim_id}_fulfillments.yaml\n  /orders/{id}/swaps/{swap_id}/fulfillments:\n    $ref: paths/orders_{id}_swaps_{swap_id}_fulfillments.yaml\n  /orders/{id}:\n    $ref: paths/orders_{id}.yaml\n  /orders:\n    $ref: paths/orders.yaml\n  /orders/{id}/swaps/{swap_id}/process-payment:\n    $ref: paths/orders_{id}_swaps_{swap_id}_process-payment.yaml\n  /orders/{id}/refund:\n    $ref: paths/orders_{id}_refund.yaml\n  /orders/{id}/return:\n    $ref: paths/orders_{id}_return.yaml\n  /order/{id}/claims/{claim_id}:\n    $ref: paths/order_{id}_claims_{claim_id}.yaml\n  /payment-collections/{id}:\n    $ref: paths/payment-collections_{id}.yaml\n  /payment-collections/{id}/authorize:\n    $ref: paths/payment-collections_{id}_authorize.yaml\n  /price-lists/{id}/prices/batch:\n    $ref: paths/price-lists_{id}_prices_batch.yaml\n  /price-lists:\n    $ref: paths/price-lists.yaml\n  /price-lists/{id}:\n    $ref: paths/price-lists_{id}.yaml\n  /price-lists/{id}/products/{product_id}/prices:\n    $ref: paths/price-lists_{id}_products_{product_id}_prices.yaml\n  /price-lists/{id}/variants/{variant_id}/prices:\n    $ref: paths/price-lists_{id}_variants_{variant_id}_prices.yaml\n  /price-lists/{id}/products:\n    $ref: paths/price-lists_{id}_products.yaml\n  /product-types:\n    $ref: paths/product-types.yaml\n  /product-tags:\n    $ref: paths/product-tags.yaml\n  /products/{id}/options:\n    $ref: paths/products_{id}_options.yaml\n  /products:\n    $ref: paths/products.yaml\n  /products/{id}/variants:\n    $ref: paths/products_{id}_variants.yaml\n  /products/{id}/options/{option_id}:\n    $ref: paths/products_{id}_options_{option_id}.yaml\n  /products/{id}:\n    $ref: paths/products_{id}.yaml\n  /products/{id}/variants/{variant_id}:\n    $ref: paths/products_{id}_variants_{variant_id}.yaml\n  /products/tag-usage:\n    $ref: paths/products_tag-usage.yaml\n  /products/types:\n    $ref: paths/products_types.yaml\n  /products/{id}/metadata:\n    $ref: paths/products_{id}_metadata.yaml\n  /payments/{id}/capture:\n    $ref: paths/payments_{id}_capture.yaml\n  /payments/{id}:\n    $ref: paths/payments_{id}.yaml\n  /payments/{id}/refund:\n    $ref: paths/payments_{id}_refund.yaml\n  /publishable-api-keys/{id}/sales-channels/batch:\n    $ref: paths/publishable-api-keys_{id}_sales-channels_batch.yaml\n  /publishable-api-keys:\n    $ref: paths/publishable-api-keys.yaml\n  /publishable-api-keys/{id}:\n    $ref: paths/publishable-api-keys_{id}.yaml\n  /publishable-api-keys/{id}/sales-channels:\n    $ref: paths/publishable-api-keys_{id}_sales-channels.yaml\n  /publishable-api-keys/{id}/revoke:\n    $ref: paths/publishable-api-keys_{id}_revoke.yaml\n  /publishable-api-key/{id}:\n    $ref: paths/publishable-api-key_{id}.yaml\n  /regions/{id}/countries:\n    $ref: paths/regions_{id}_countries.yaml\n  /regions/{id}/fulfillment-providers:\n    $ref: paths/regions_{id}_fulfillment-providers.yaml\n  /regions/{id}/payment-providers:\n    $ref: paths/regions_{id}_payment-providers.yaml\n  /regions:\n    $ref: paths/regions.yaml\n  /regions/{id}:\n    $ref: paths/regions_{id}.yaml\n  /regions/{id}/fulfillment-options:\n    $ref: paths/regions_{id}_fulfillment-options.yaml\n  /regions/{id}/countries/{country_code}:\n    $ref: paths/regions_{id}_countries_{country_code}.yaml\n  /regions/{id}/fulfillment-providers/{provider_id}:\n    $ref: paths/regions_{id}_fulfillment-providers_{provider_id}.yaml\n  /regions/{id}/payment-providers/{provider_id}:\n    $ref: paths/regions_{id}_payment-providers_{provider_id}.yaml\n  /return-reasons:\n    $ref: paths/return-reasons.yaml\n  /return-reasons/{id}:\n    $ref: paths/return-reasons_{id}.yaml\n  /sales-channels/{id}/products/batch:\n    $ref: paths/sales-channels_{id}_products_batch.yaml\n  /sales-channels:\n    $ref: paths/sales-channels.yaml\n  /sales-channels/{id}:\n    $ref: paths/sales-channels_{id}.yaml\n  /returns/{id}/cancel:\n    $ref: paths/returns_{id}_cancel.yaml\n  /returns:\n    $ref: paths/returns.yaml\n  /returns/{id}/receive:\n    $ref: paths/returns_{id}_receive.yaml\n  /shipping-options:\n    $ref: paths/shipping-options.yaml\n  /shipping-options/{id}:\n    $ref: paths/shipping-options_{id}.yaml\n  /store/currencies/{code}:\n    $ref: paths/store_currencies_{code}.yaml\n  /store:\n    $ref: paths/store.yaml\n  /store/payment-providers:\n    $ref: paths/store_payment-providers.yaml\n  /store/tax-providers:\n    $ref: paths/store_tax-providers.yaml\n  /swaps/{id}:\n    $ref: paths/swaps_{id}.yaml\n  /swaps:\n    $ref: paths/swaps.yaml\n  /tax-rates/{id}/product-types/batch:\n    $ref: paths/tax-rates_{id}_product-types_batch.yaml\n  /tax-rates/{id}/products/batch:\n    $ref: paths/tax-rates_{id}_products_batch.yaml\n  /tax-rates/{id}/shipping-options/batch:\n    $ref: paths/tax-rates_{id}_shipping-options_batch.yaml\n  /tax-rates:\n    $ref: paths/tax-rates.yaml\n  /tax-rates/{id}:\n    $ref: paths/tax-rates_{id}.yaml\n  /shipping-profiles:\n    $ref: paths/shipping-profiles.yaml\n  /shipping-profiles/{id}:\n    $ref: paths/shipping-profiles_{id}.yaml\n  /uploads/protected:\n    $ref: paths/uploads_protected.yaml\n  /uploads:\n    $ref: paths/uploads.yaml\n  /users:\n    $ref: paths/users.yaml\n  /users/{id}:\n    $ref: paths/users_{id}.yaml\n  /users/password-token:\n    $ref: paths/users_password-token.yaml\n  /users/reset-password:\n    $ref: paths/users_reset-password.yaml\n  /variants:\n    $ref: paths/variants.yaml\ncomponents:\n  securitySchemes:\n    api_token:\n      type: http\n      x-displayName: API Token\n      description: \u003e\n        Use a user's API Token to send authenticated requests.\n\n\n        ### How to Add API Token to a User\n\n\n        At the moment, there's no direct way of adding an API Token for a user.\n        The only way it can be done is through directly editing the database.\n\n\n        If you're using a PostgreSQL database, you can run the following\n        commands in your command line to add API token:\n\n\n        ```bash\n\n        psql -d \u003cDB_NAME\u003e -U \u003cDB_USER\u003e\n\n        UPDATE public.user SET api_token='\u003cAPI_TOKEN\u003e' WHERE\n        email='\u003cUSER_EMAIL\u003e';\n\n        ```\n\n\n        Where:\n\n        - `\u003cDB_NAME\u003e` is the name of the database schema you use for the Medusa\n        server.\n\n        - `\u003cDB_USER\u003e` is the name of the user that has privileges over the\n        database schema.\n\n        - `\u003cAPI_TOKEN\u003e` is the API token you want to associate with the user.\n        You can use [this tool to generate a random\n        token](https://randomkeygen.com/).\n\n        - `\u003cUSER_EMAIL\u003e` is the email address of the admin user you want to have\n        this API token.\n\n\n        ### How to Use the API Token\n\n\n        The API token can be used for Bearer Authentication. It's passed in the\n        `Authorization` header as the following:\n\n\n        ```\n\n        Authorization: Bearer {api_token}\n\n        ```\n\n\n        In this API reference, you'll find in the cURL request samples the use\n        of `{api_token}`. This is where you must pass the API token.\n\n\n        If you're alternatively following along with the JS Client request\n        samples, you must provide the `apiKey` option when creating the Medusa\n        client:\n\n\n        ```js\n\n        const medusa = new Medusa({ baseUrl: MEDUSA_BACKEND_URL, maxRetries: 3,\n        apiKey: '{api_token}' })\n\n        ```\n      scheme: bearer\n    cookie_auth:\n      type: apiKey\n      in: cookie\n      name: connect.sid\n      x-displayName: Cookie Session ID\n      description: \u003e\n        Use a cookie session to send authenticated requests.\n\n\n        ### How to Obtain the Cookie Session\n\n\n        If you're sending requests through a browser, using JS Client, or using\n        tools like Postman, the cookie session should be automatically set when\n        the admin user is logged in.\n\n\n        If you're sending requests using cURL, you must set the Session ID in\n        the cookie manually.\n\n\n        To do that, send a request to [authenticate the\n        user](#tag/Auth/operation/PostAuth) and pass the cURL option `-v`:\n\n\n        ```bash\n\n        curl -v --location --request POST 'https://medusa-url.com/admin/auth' \\\n\n        --header 'Content-Type: application/json' \\\n\n        --data-raw '{\n          \"email\": \"user@example.com\",\n          \"password\": \"supersecret\"\n        }'\n\n        ```\n\n\n        The headers will be logged in the terminal as well as the response. You\n        should find in the headers a Cookie header similar to this:\n\n\n        ```bash\n\n        Set-Cookie:\n        connect.sid=s%3A2Bu8BkaP9JUfHu9rG59G16Ma0QZf6Gj1.WT549XqX37PN8n0OecqnMCq798eLjZC5IT7yiDCBHPM;\n\n        ```\n\n\n        Copy the value after `connect.sid` (without the `;` at the end) and pass\n        it as a cookie in subsequent requests as the following:\n\n\n        ```bash\n\n        curl --location --request GET 'https://medusa-url.com/admin/products' \\\n\n        --header 'Cookie: connect.sid={sid}'\n\n        ```\n\n\n        Where `{sid}` is the value of `connect.sid` that you copied.\n",
			"canonicalURL": "/github.com/medusajs/medusa@99add15fc33bdbb113e5e7b44014d5f0cdaf2144/-/blob/docs/api/admin/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/medusajs/medusa/blob/99add15fc33bdbb113e5e7b44014d5f0cdaf2144/docs/api/admin/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/currencies\": get: operation \"GetCurrencies\": parameters: parse parameter \"offset\": parse schema: at https://raw.githubusercontent.com/medusajs/medusa/99add15fc33bdbb113e5e7b44014d5f0cdaf2144/docs/api/admin/paths/currencies.yaml:27:18: parse default: expected type \"number\", got \"string\""
}