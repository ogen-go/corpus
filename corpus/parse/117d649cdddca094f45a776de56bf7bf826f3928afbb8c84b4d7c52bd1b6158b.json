{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/aws-samples/amazon-lex-slack-block-kit"
		},
		"file": {
			"name": "template.yaml",
			"size": 0,
			"path": "template.yaml",
			"byteSize": 6593,
			"content": "AWSTemplateFormatVersion: \"2010-09-09\"\nTransform: AWS::Serverless-2016-10-31\nDescription: \u003e\n  This template creates the necessary resources to use Block Kit\n  when integrating an Amazon Lex chatbot with Slack\n\nResources:\n  ListenFunction:\n    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction\n    Properties:\n      CodeUri: listen_slack_events/\n      Handler: listen.lambda_handler\n      Runtime: python3.8\n      Layers:\n         - !Ref SlackLambdaLayer\n      Policies:\n        - AWSLambdaBasicExecutionRole\n        - AWSSecretsManagerGetSecretValuePolicy:\n            SecretArn:\n             !Ref SlackLexBlockKitSecret\n        - AmazonLexRunBotsOnly\n        - SQSPollerPolicy:\n            QueueName: !GetAtt SlackEventQueue.QueueName\n      Events:\n        SQSTrigger:\n          Type: SQS\n          Properties:\n            Queue: !GetAtt SlackEventQueue.Arn\n            BatchSize: 1\n\n  OrderFlowerFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: fulfill_lex/\n      Handler: order_flowers.lambda_handler\n      Runtime: python3.8\n      Layers:\n         - !Ref SlackLambdaLayer\n      Policies:\n        - AWSLambdaBasicExecutionRole\n        - AWSSecretsManagerGetSecretValuePolicy:\n            SecretArn:\n             !Ref SlackLexBlockKitSecret\n        - AmazonLexRunBotsOnly\n\n  SlackLambdaLayer:\n    Type: AWS::Serverless::LayerVersion\n    Properties:\n      LayerName: slack-lex-block\n      Description: Slack sdk and urllib3\n      ContentUri: common\n      CompatibleRuntimes:\n        - python3.8\n    Metadata:\n        BuildMethod: makefile\n  \n  SlackEventQueue:\n    Type: AWS::SQS::Queue\n    Properties: \n          QueueName: SlackEventQueue\n          KmsMasterKeyId: alias/aws/sqs\n          RedrivePolicy: \n            deadLetterTargetArn: \n              !GetAtt MyDeadLetterQueue.Arn\n            maxReceiveCount: 3\n  \n  MyDeadLetterQueue: \n    Type: AWS::SQS::Queue\n    Properties: \n          QueueName: SlackEventDeadLetterQueue\n          KmsMasterKeyId: alias/aws/sqs\n\n  ListenSlackApiRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service: \"apigateway.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      Policies:\n        - PolicyName: ApiDirectWriteToSQS\n          PolicyDocument:\n            Version: \"2012-10-17\"\n            Statement:\n              Action:\n              - sqs:SendMessage\n              Effect: Allow\n              Resource:\n                - !GetAtt SlackEventQueue.Arn\n  \n  CloudWatchApiRole:\n    Type: \"AWS::IAM::Role\"\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: \"2012-10-17\"\n        Statement:\n          - Effect: \"Allow\"\n            Principal:\n              Service: \"apigateway.amazonaws.com\"\n            Action: \n              - \"sts:AssumeRole\"\n      Path: /\n      ManagedPolicyArns:\n        - \u003e-\n          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs\n  \n  ListenSlackApiLogs:\n    Type: AWS::Logs::LogGroup\n    Properties: \n      LogGroupName: ListenSlackAPILogs\n      RetentionInDays: 7\n  \n  CloudWatchArnApiGateway:\n    Type: AWS::ApiGateway::Account\n    Properties: \n      CloudWatchRoleArn: !GetAtt CloudWatchApiRole.Arn\n\n  ListenSlackApi:\n    Type: AWS::Serverless::Api\n    Properties:\n      StageName: dev\n      AccessLogSetting:\n          DestinationArn: !GetAtt ListenSlackApiLogs.Arn\n          Format: '$context.identity.sourceIp,$context.identity.caller,$context.identity.user,$context.requestTime,$context.httpMethod,$context.resourcePath,$context.protocol,$context.status,$context.responseLength,$context.requestId'\n      DefinitionBody:\n        openapi: \"3.0.1\"\n        info:\n         title: SlackLexWithBlockKit\n         version: \"1.0\"\n        paths:\n          /flower:\n            post:\n              responses:\n                \"200\":\n                  description: \"200 response\"\n                  content: {}\n              x-amazon-apigateway-integration:\n                  integrationSubtype: \"SQS-SendMessage\"\n                  credentials:\n                    Fn::GetAtt: [ListenSlackApiRole, Arn]\n                  requestParameters:\n                      integration.request.header.Content-Type: '''application/x-www-form-urlencoded'''\n                  requestTemplates:\n                      application/x-www-form-urlencoded: Action=SendMessage\u0026MessageBody=$util.urlEncode($util.escapeJavaScript($input.body))\u0026MessageAttribute.1.Name=timestamp\u0026MessageAttribute.1.Value.StringValue=$util.escapeJavaScript($input.params('X-Slack-Request-Timestamp'))\u0026MessageAttribute.1.Value.DataType=String\u0026MessageAttribute.2.Name=signature\u0026MessageAttribute.2.Value.StringValue=$util.escapeJavaScript($input.params('X-Slack-Signature'))\u0026MessageAttribute.2.Value.DataType=String\n                  passthroughBehavior: \"never\"\n                  uri: !Sub \"arn:${AWS::Partition}:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${SlackEventQueue.QueueName}\"\n                  payloadFormatVersion: \"1.0\"\n                  connectionType: \"INTERNET\"\n                  type: \"aws\"\n                  httpMethod: \"POST\"\n                  responses:\n                    default:\n                      statusCode: \"200\"\n        x-amazon-apigateway-importexport-version: \"1.0\"\n\n  SlackLexBlockKitSecret:\n    Type: AWS::SecretsManager::Secret\n    Properties: \n      Description: Slack Signature, Slack Bot token, Lex bot Name, Lex bot alias and lex Channel Id\n      Name: \"SLACK_LEX_BLOCK_KIT\"\n      SecretString: \n          '{\"SLACK_BOT_TOKEN\": \"replace by your Bot User OAuth Token from OAuth \u0026 Permissions\",\n          \"SLACK_SIGNING_SECRET\": \"replace by your signing secret from Basic Information\",\n          \"BOT_NAME\": \"replace by your Lex bot name\",\n          \"BOT_ALIAS\": \"replace by your Lex bot alias name\",\n          \"LEX_SLACK_CHANNEL_ID\": \"replace by your Lex channel id\"}'\n\nOutputs:\n  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function\n  # Find out more about other implicit resources you can reference within SAM\n  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api\n  ListenSlackApi:\n    Description: \"API Gateway endpoint URL for Slack interactivity components\"\n    Value: !Sub \"https://${ListenSlackApi}.execute-api.${AWS::Region}.amazonaws.com/dev/flower/\"\n  ",
			"canonicalURL": "/github.com/aws-samples/amazon-lex-slack-block-kit@96eb51f3cc554be7a3a8a5b8bbcafacad2e06f49/-/blob/template.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/aws-samples/amazon-lex-slack-block-kit/blob/96eb51f3cc554be7a3a8a5b8bbcafacad2e06f49/template.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse version: at template.yaml:1:1: invalid version: invalid major version: strconv.Atoi: parsing \"\": invalid syntax"
}