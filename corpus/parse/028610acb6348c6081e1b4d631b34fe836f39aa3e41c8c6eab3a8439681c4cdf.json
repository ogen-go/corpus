{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/thim81/openapi-format"
		},
		"file": {
			"name": "output.yaml",
			"size": 0,
			"path": "test/yaml-casing/output.yaml",
			"byteSize": 19850,
			"content": "openapi: 3.0.2\ninfo:\n  description: |-\n    this is a sample Pet Store Server based on the OpenAPI 3.0 specification. you can find out more about\n    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\n    You can now help us improve the API whether it's by making changes to the definition itself or to the code.\n    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\n    Some useful links:\n    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)\n  version: 1.0.6-SNAPSHOT\n  title: Swagger Petstore - OpenAPI 3.0\n  termsOfService: 'http://swagger.io/terms/'\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'\nservers:\n  - url: /v3\npaths:\n  /pet:\n    post:\n      operationId: add_pet\n      summary: add a new pet to the store\n      description: add a new pet to the store\n      parameters:\n        - in: header\n          name: content-type\n          required: true\n          schema:\n            type: string\n            example: application/json\n            default: application/json\n          description: Define the file type and format for the response object.\n        - $ref: '#/components/headers/x_rate_limit_limit'\n      requestBody:\n        description: Create a new pet in the store\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/requestBodies/req_body_pet'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/pet_model'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/pet_model'\n        required: true\n      responses:\n        '200':\n          description: Successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  properties:\n                    type: string\n                  id_pet:\n                    type: integer\n                    format: int64\n                    example: 10\n                  name_pet:\n                    type: string\n                    example: doggie\n                  pet_model:\n                    $ref: '#/components/responses/general_error'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/pet_model'\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n  /PetModel/findByStatus:\n    get:\n      operationId: find_pets_by_status\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      parameters:\n        - $ref: '#/components/parameters/limitParam'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/pet_model'\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/pet_model'\n        '400':\n          description: Invalid status value\n      security:\n        - api_key: []\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n  '/pet/{petId}':\n    get:\n      operationId: get_pet_by_id\n      summary: Find pet by ID\n      description: Returns a single pet\n      parameters:\n        - name: pet_id\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: limit_items\n          in: query\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/pet_model'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/pet_model'\n        '400':\n          description: Invalid ID supplied\n        '404':\n          description: Pet not found\n      security:\n        - api_key: []\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n    post:\n      operationId: update_pet_with_form\n      summary: Updates a pet in the store with form data\n      description: ''\n      parameters:\n        - name: pet_id\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n        - name: name\n          in: query\n          description: Name of pet that needs to be updated\n          schema:\n            type: string\n        - name: status\n          in: query\n          description: Status of pet that needs to be updated\n          schema:\n            type: string\n      responses:\n        '405':\n          description: Invalid input\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n    delete:\n      operationId: delete_pet\n      summary: Deletes a pet\n      description: ''\n      parameters:\n        - name: api-key-security\n          in: header\n          description: ''\n          required: false\n          schema:\n            type: string\n        - name: pet_id\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        '400':\n          description: Invalid pet value\n      security:\n        - petstore_auth:\n            - 'write:pets'\n            - 'read:pets'\n      tags:\n        - pet\n  /store/order:\n    post:\n      operationId: place_order\n      summary: Place an order for a pet\n      description: Place a new order in the store\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/order_model'\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/components/schemas/order_model'\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/order_model'\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/order_model'\n        '405':\n          description: Invalid input\n      tags:\n        - store\n      x-swagger-router-controller: OrderController\n  '/user/{username}':\n    get:\n      operationId: get_user_by_name\n      summary: Get user by user name\n      description: ''\n      parameters:\n        - name: username\n          in: path\n          description: 'The name that needs to be fetched. Use user1 for testing. '\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/user_model'\n            application/xml:\n              schema:\n                $ref: '#/components/schemas/user_model'\n        '400':\n          description: Invalid username supplied\n        '404':\n          description: User not found\n      tags:\n        - user\n    put:\n      operationId: update_user\n      summary: Update user\n      description: This can only be done by the logged in user.\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be deleted\n          required: true\n          schema:\n            type: string\n      requestBody:\n        description: Update an existent user in the store\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                  example: 10\n                username:\n                  type: string\n                  example: theUser\n                first_name:\n                  type: string\n                  example: John\n                last_name:\n                  type: string\n                  example: James\n                sites:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      site_url:\n                        type: string\n                        example: www.example.com\n                      domain_name:\n                        type: string\n                        example: example.com\n                      meta:\n                        type: object\n                        properties:\n                          ext_int:\n                            type: string\n                            example: com\n                          secure_conn:\n                            type: string\n                            example: https\n                          properties:\n                            type: string\n                            example: https\n            examples:\n              SampleExampleReports:\n                $ref: '#/components/examples/SampleExampleReports'\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                id:\n                  type: integer\n                  format: int64\n                  example: 10\n                username:\n                  type: string\n                  example: theUser\n                first_name:\n                  type: string\n                  example: John\n                last_name:\n                  type: string\n                  example: James\n                sites:\n                  type: array\n                  items:\n                    type: object\n                    properties:\n                      site_url:\n                        type: string\n                        example: www.example.com\n                      domain_name:\n                        type: string\n                        example: example.com\n                      meta:\n                        type: object\n                        properties:\n                          ext_int:\n                            type: string\n                            example: com\n                          secure_conn:\n                            type: string\n                            example: https\n                          properties:\n                            type: string\n                            example: https\n          application/xml:\n            schema:\n              $ref: '#/components/schemas/user_model'\n      responses:\n        default:\n          description: successful operation\n      tags:\n        - user\n      x-swagger-router-controller: UserController\ncomponents:\n  schemas:\n    error_model:\n      type: object\n      required:\n        - code\n        - message\n      properties:\n        code_error:\n          type: integer\n          format: int32\n        message_error:\n          type: string\n    order_model:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        pet_id:\n          type: integer\n          format: int64\n          example: 198772\n        quantity:\n          type: integer\n          format: int32\n          example: 7\n        ship_date:\n          type: string\n          format: date-time\n        sites:\n          type: array\n          items:\n            type: object\n            properties:\n              site_url:\n                type: string\n                example: www.example.com\n              domain_name:\n                type: string\n                example: example.com\n              meta:\n                type: object\n                properties:\n                  ext_int:\n                    type: string\n                    example: com\n                  secure_conn:\n                    type: string\n                    example: https\n                  properties:\n                    type: string\n                    example: https\n        status:\n          description: Order Status\n          type: string\n          example: approved\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n      x-swagger-router-model: io.swagger.petstore.model.Order\n      xml:\n        name: order\n    customer_model:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 100000\n        username:\n          type: string\n          example: fehguy\n        address:\n          type: array\n          items:\n            $ref: '#/components/schemas/address_model'\n          xml:\n            wrapped: true\n            name: addresses\n      xml:\n        name: customer\n    address_model:\n      type: object\n      properties:\n        street:\n          type: string\n          example: 437 Lytton\n        city:\n          type: string\n          example: Palo Alto\n        state:\n          type: string\n          example: CA\n        zip:\n          type: string\n          example: 94301\n      xml:\n        name: address\n    category_model:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 1\n        name:\n          type: string\n          example: Dogs\n      x-swagger-router-model: io.swagger.petstore.model.Category\n      xml:\n        name: category\n    user_model:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n          example: 10\n        username:\n          type: string\n          example: theUser\n        first_name:\n          type: string\n          example: John\n        last_name:\n          type: string\n          example: James\n        email_address:\n          type: string\n          example: john@email.com\n        phone_number:\n          type: string\n          example: 12345\n        user_status:\n          description: User Status\n          type: integer\n          format: int32\n          example: 1\n      x-swagger-router-model: io.swagger.petstore.model.User\n      xml:\n        name: user\n    tag_model:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      x-swagger-router-model: io.swagger.petstore.model.Tag\n      xml:\n        name: tag\n    pet_model:\n      type: object\n      properties:\n        properties:\n          type: string\n        id:\n          type: integer\n          format: int64\n          example: 10\n        name:\n          type: string\n          example: doggie\n        category:\n          $ref: '#/components/schemas/category_model'\n        photo_urls:\n          type: array\n          items:\n            type: string\n            xml:\n              name: photoUrl\n          xml:\n            wrapped: true\n        tags:\n          type: array\n          items:\n            $ref: '#/components/schemas/tag_model'\n          xml:\n            wrapped: true\n        status:\n          description: pet status in the store\n          type: string\n          enum:\n            - available\n            - pending\n            - sold\n      required:\n        - name\n        - photoUrls\n      x-swagger-router-model: io.swagger.petstore.model.Pet\n      xml:\n        name: pet\n  examples:\n    SampleExampleReports:\n      value:\n        id: bbadbeef-b3ab-40af-b05c-c0ffee6544cd\n        created: '2020-06-19T12:01:03.456Z'\n        lastAction: '2020-06-19T12:06:03.456Z'\n        status: Succeeded\n        type: ListExport\n        resourceLocation: 'https://customername.example/export'\n        properties:\n          reportLocation: 'https://customername.example/reports/ABC-123-DEF-456'\n    SampleSendNotification:\n      value:\n        - reference: 1234567ABC\n          to:\n            deviceToken: 1234567890AZERTYUIOP\n            provider: apple\n          content:\n            title: 'Hello world, content title'\n            message: 'Hello world, content message'\n            badge: null\n            sound: null\n            buttons: []\n            pushType: 2\n            inAppNotification:\n              title: 'Hello world, inAppNotification title'\n              body: 'Hello world, inAppNotification body'\n            expirationdate: null\n            data:\n              SMLTR_DEL_STATE: '2'\n              SMLTR_DEL_RETRY_CNT: '1'\n          tags:\n            - tag1\n            - tag 2\n      summary: A payload example for a notification\n  parameters:\n    skipParam:\n      name: skip_items\n      in: query\n      description: number of items to skip\n      required: true\n      schema:\n        type: integer\n        format: int32\n    limitParam:\n      name: limit_param\n      in: query\n      description: max records to return\n      required: true\n      schema:\n        type: integer\n        format: int32\n  responses:\n    not_found:\n      description: Entity not found.\n    illegal_input:\n      description: Illegal input for operation.\n    general_error:\n      description: An error occurred\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/'\n    general_pet:\n      description: Pet Model\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              properties:\n                type: string\n              idPet:\n                type: integer\n                format: int64\n                example: 10\n              namePet:\n                type: string\n                example: doggie\n              pet-model:\n                $ref: '#/components/responses/general_error'\n      headers:\n        X-RateLimit-Limit:\n          $ref: '#/components/headers/x_rate_limit_limit'\n        X-RateLimit-Remaining:\n          $ref: '#/components/headers/x_rate_limit_remaining'\n  requestBodies:\n    req_body_pet:\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/pet_model'\n        application/xml:\n          schema:\n            $ref: '#/components/schemas/pet_model'\n      description: Pet object that needs to be added to the store\n    user_array:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: '#/components/schemas/user_model'\n      description: List of user object\n  securitySchemes:\n    petstore_auth:\n      type: oauth2\n      flows:\n        implicit:\n          authorizationUrl: 'https://petstore.swagger.io/oauth/authorize'\n          scopes:\n            'write:pets': modify pets in your account\n            'read:pets': read your pets\n    api_key:\n      type: apiKey\n      name: api_key\n      in: header\n  headers:\n    x_rate_limit_limit:\n      description: Request limit per hour\n      schema:\n        type: integer\n      example: 100\n    x_rate_limit_remaining:\n      description: Remaining requests for the hour\n      schema:\n        type: integer\n      example: 94\n    x_rate_limit_unused:\n      description: Remaining requests for the hour\n      schema:\n        type: integer\n      example: 94\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: 'http://swagger.io'\nexternalDocs:\n  description: Find out more about Swagger\n  url: 'http://swagger.io'\n",
			"canonicalURL": "/github.com/thim81/openapi-format@00335957b6d98eac9b51e1b5b214363aa5f1ffc6/-/blob/test/yaml-casing/output.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/thim81/openapi-format/blob/00335957b6d98eac9b51e1b5b214363aa5f1ffc6/test/yaml-casing/output.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: at 1:15: responses: \"general_error\": at 1:2004: at 1:2015: content: application/json: at 1:2035: schema: at 1:2045: parse schema: resolve \"#/components/schemas/\": find schema: resolve: can't find value for \"components/schemas/\""
}