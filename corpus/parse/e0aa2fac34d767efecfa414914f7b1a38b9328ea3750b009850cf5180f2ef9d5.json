{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Fantom-foundation/explorer-api"
		},
		"file": {
			"name": "swagger.yml",
			"size": 0,
			"path": "swagger.yml",
			"byteSize": 25688,
			"content": "openapi: 3.0.1\ninfo:\n  title: Fantom explorer api\n  description: Work in progress\n  version: '0.1'\nservers:\n  - url: 'http://3.136.216.35:3100'\npaths:\n  /api/v1/get-blocks:\n    get:\n      description: Returns blocks list with pagination. Max count = 30, order may be -1 or 1.\n      parameters:\n        - name: offset\n          in: query\n          schema:\n            type: integer\n          example: 0\n        - name: count\n          in: query\n          schema:\n            type: integer\n          example: 1\n        - name: order\n          in: query\n          schema:\n            type: integer\n          example: -1\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      maxBlockHeight:\n                        type: integer\n                      total:\n                        type: integer\n                        description: total number of blocks in database by provided (or not) conditions\n                      offset:\n                        type: integer\n                        description: offset of pagination\n                      count:\n                        type: integer\n                        description: number of blocks per page\n                      blocks:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Block'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      tags:\n        - block\n      summary: Blocks list\n    servers:\n      - url: 'http://3.136.216.35:3100'\n  /api/v1/get-transaction:\n    get:\n      description: Get transaction by hash\n      parameters:\n        - name: transactionHash\n          in: query\n          schema:\n            type: string\n          required: true\n          example: '0x506a50cd7ecf27c3834a045d5e7501bc3bfb56b6bae03637c093c6c8d9735b8e'\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      transaction:\n                        $ref: '#/components/schemas/Transaction'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      tags:\n        - transaction\n      summary: Get transaction by hash\n    servers:\n      - url: 'http://3.136.216.35:3100'\n  /api/v1/get-block:\n    servers:\n      - url: 'http://3.136.216.35:3100'\n    get:\n      summary: Get block by block number\n      tags:\n        - block\n      description: Returns block with provided number\n      parameters:\n        - name: blockNumber\n          in: query\n          schema:\n            type: number\n          required: true\n          example: 5\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      block:\n                        $ref: '#/components/schemas/Block'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n  /api/v1/get-account:\n    get:\n      description: Returns account with transactions array in it with pagination.  You may filter transactions by query field 'trxsFilter' with values 'from' or 'to'. Without values filter not applied to result.\n      parameters:\n        - name: address\n          in: query\n          schema:\n            type: string\n          required: true\n          example: '0x239fa7623354ec26520de878b52f13fe84b06971'\n        - name: offset\n          in: query\n          schema:\n            type: integer\n          example: 0\n          description: default 0\n        - name: count\n          in: query\n          schema:\n            type: integer\n          example: 10\n          description: default 10\n        - name: trxsFilter\n          in: query\n          schema:\n            type: string\n          example: from\n          description: Accept params \"from\", \"to\", \"contract\". Filter supports multiple parameters at the same time, but they can be mutually exclusive, for example \"to\" and \"contract\" - contract creation transaction's parameter \"to\" is always null.\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      account:\n                        type: object\n                        properties:\n                          address:\n                            type: string\n                          balance:\n                            type: number\n                          nonce:\n                            type: integer\n                          totalTrxs:\n                            type: integer\n                          offsetTrxs:\n                            type: integer\n                          countTrxs:\n                            type: integer\n                          transactions:\n                            type: array\n                            items:\n                              $ref: '#/components/schemas/TransactionForAccountEndpoint'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Get account by address\n      tags:\n        - account\n    servers:\n      - url: 'http://3.136.216.35:3100'\n  /api/v1/get-transactions:\n    get:\n      description: Returns transactions list with pagination. Max count = 30, order may be -1 or 1.\n      parameters:\n        - name: offset\n          in: query\n          schema:\n            type: integer\n          example: 0\n        - name: count\n          in: query\n          schema:\n            type: integer\n          example: 1\n        - name: order\n          in: query\n          schema:\n            type: integer\n          example: -1\n        - name: block\n          in: query\n          schema:\n            type: integer\n          example: 15232\n        - name: from\n          in: query\n          schema:\n            type: string\n          example: \"0x239fa7623354ec26520de878b52f13fe84b06971\"\n          description: Add filter by sender address\n        - name: to\n          in: query\n          schema:\n            type: string\n          example: \"0x239fa7623354ec26520de878b52f13fe84b06971\"\n          description: Add filter by recipient address\n        - name: contractCreation\n          in: query\n          schema:\n            type: boolean\n          example: false\n          description: Exclude contract creation trxs or select only ctonract creation trxs. Omitting this parameter will cause including all types of trxs in selection.\n        - name: contractAddress\n          in: query\n          schema:\n            type: string\n          example: \"0x1234567890123456789012345678901234567891\"\n          description: Add filter by contract address\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      maxBlockHeight:\n                        type: integer\n                      total:\n                        type: integer\n                        description: total number of transactions in database by provided (or not) conditions\n                      offset:\n                        type: integer\n                        description: offset of pagination\n                      count:\n                        type: integer\n                        description: number of transactions per page\n                      transactions:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Transaction'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Transactions list\n      tags:\n        - transaction\n    servers:\n      - url: 'http://3.136.216.35:3100'\n  /api/v1/get-latest-data:\n    get:\n      description: Returns latest blocks and transactions with pagination. Max count = 30.\n      parameters:\n        - name: count\n          in: query\n          schema:\n            type: integer\n          example: 1\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      maxBlockHeight:\n                        type: integer\n                      count:\n                        type: integer\n                        description: number of blocks and transactions per page\n                      blocks:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Block'\n                      transactions:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/Transaction'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Get latest data\n      tags:\n        - latest data\n    servers:\n      - url: 'http://3.136.216.35:3100'\n  \n  /api/v1/epoch/latest:\n    get:\n      description: Returns info about latest ended epoch.\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      epochNumber:\n                        type: string\n                      totalTxFee:\n                        type: string\n                      endTime:\n                        type: string\n                        format: date-time\n                      duration:\n                        type: integer\n                        description: duration in milliseconds\n                      totalBaseRewardWeight:\n                        type: string\n                      totalTxRewardWeight:\n                        type: string\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Latest ended epoch\n      tags:\n        - epoch\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/delegator/address/{address}:\n    get:\n      description: Returns delegator by its address\n      parameters:\n        - name: address\n          in: path\n          schema:\n            type: string\n          example: '0x71981d82370e8cffd831003fa961b172e4c129d2'\n          required: true\n        - name: verbosity\n          in: query\n          schema:\n            type: number\n          example: 2\n          description: If 1, then include base fields. If 2, then include metrics.\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    $ref: '#/components/schemas/DelegatorObject'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Delegator by address\n      tags:\n        - delegator\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/delegator/staker/{id}:\n    get:\n      description: Returns all the delegators which delegated to the specified staker.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n        - name: verbosity\n          in: query\n          schema:\n            type: number\n          example: 2\n          description: If 0, then include only addresses. If 1, then include base fields. If 2, then include metrics.\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      delegators:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/DelegatorObject'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Delegators by staker id\n      tags:\n        - delegator\n    servers:\n      - url: 'http://3.136.216.35:3100'\n\n  /api/v1/staker/id/{id}/downtime:\n    get:\n      description: Period of time in nanoseconds for which validator didn’t participate in blocks.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      downtime:\n                        type: string\n                      missedBlocks:\n                        type: string\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker's downtime\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/staker/id/{id}/origination-score:\n    get:\n      description: Returns staker's origination score\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      originationScore:\n                        type: string\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker's origination score\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/staker/id/{id}/poi:\n    get:\n      description: Returns staker's proof of importance\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      poi:\n                        type: string\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker's PoI\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n\n  /api/v1/staker/id/{id}/validation-score:\n    get:\n      description: Returns staker's validating score\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      validationScore:\n                        type: string\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker's validating score\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/staker/id/{id}:\n    get:\n      description: Returns staker by its id\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n        - name: verbosity\n          in: query\n          schema:\n            type: number\n          example: 2\n          description: If 1, then include base fields. If 2, then include metrics.\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    $ref: '#/components/schemas/StakerObject'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker by id\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n      \n  /api/v1/staker/address/{address}:\n    get:\n      description: Returns staker by its address\n      parameters:\n        - name: address\n          in: path\n          schema:\n            type: string\n          example: '0xf88d5892faf084dcf4143566d9c9b3f047c153ca'\n          required: true\n        - name: verbosity\n          in: query\n          schema:\n            type: number\n          example: 2\n          description: If 0, then include only stakerID. If 1, then include base field. If 2, then include metrics.\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    $ref: '#/components/schemas/StakerObject'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker by address\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/staker/:\n    get:\n      description: Returns list of stakers.\n      parameters:\n        - name: verbosity\n          in: query\n          schema:\n            type: number\n          example: 2\n          description: If 0, then include only stakerIDs. If 1, then include base field. If 2, then include metrics (including downtime if validator).\n\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      stakers:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/StakerObject'\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Stakers list\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \n  /api/v1/staker/id/{id}/reward-weights:\n    get:\n      description: Returns staker's baseRewardWeight and txRewardWeight.\n      parameters:\n        - name: id\n          in: path\n          schema:\n            type: number\n          example: 1\n          required: true\n      responses:\n        '200':\n          description: ok\n          content:\n            application/json; charset=utf-8:\n              schema:\n                type: object\n                properties:\n                  meta:\n                    $ref: '#/components/schemas/meta'\n                  data:\n                    type: object\n                    properties:\n                      baseRewardWeight:\n                        type: string\n                      txRewardWeight:\n                        type: string\n      servers:\n        - url: 'http://3.136.216.35:3100'\n      summary: Staker's reward weights\n      tags:\n        - staker\n    servers:\n      - url: 'http://3.136.216.35:3100'\n      \ncomponents:\n  schemas:\n    meta:\n      type: object\n      properties:\n        success:\n          type: boolean\n          description: is operation successful\n      required:\n        - success\n    Block:\n      type: object\n      properties:\n        gasUsed:\n          type: integer\n          description: The total used gas by all transactions in this block.\n        hash:\n          type: string\n          description: Hash of the block.\n        number:\n          type: integer\n          description: The block number.\n        parentHash:\n          type: string\n          description: Hash of the parent block.\n        stateRoot:\n          type: string\n          description: The root of the final state trie of the block.\n        timestamp:\n          type: integer\n          description: The unix timestamp for when the block was collated.\n        transactions:\n          type: integer\n          description: number of transactions in block\n    Transaction:\n      type: object\n      properties:\n        blockHash:\n          type: string\n        blockNumber:\n          type: integer\n        from:\n          type: string\n        hash:\n          type: string\n        value:\n          type: string\n        nonce:\n          type: integer\n        r:\n          type: string\n        s:\n          type: string\n        v:\n          type: string\n        gas:\n          type: integer\n        gasUsed:\n          type: integer\n        gasPrice:\n          type: string\n        input:\n          type: string\n        transactionIndex:\n          type: integer\n        timestamp:\n          type: integer\n        cumulativeGasUsed:\n          type: integer\n        fee:\n          type: integer\n        status:\n          type: boolean\n        to:\n          type: string\n        contractAddress:\n          type: string\n    TransactionForAccountEndpoint:\n      type: object\n      properties:\n        from:\n          type: string\n        hash:\n          type: string\n        value:\n          type: string\n        nonce:\n          type: integer\n        gasUsed:\n          type: integer\n        gasPrice:\n          type: string\n        timestamp:\n          type: integer\n        fee:\n          type: integer\n        to:\n          type: string\n        contractAddress:\n          type: string\n    Response with validation error:\n      type: object\n      properties:\n        meta:\n          type: object\n          properties:\n            code:\n              type: integer\n            success:\n              type: boolean\n            message:\n              type: string\n        data:\n          type: object\n          properties:\n            additional:\n              type: array\n              items: \n                $ref: '#/components/schemas/ValidationErrorAdditionalObject'\n    ValidationErrorAdditionalObject:\n      type: object\n      properties:\n        value:\n          type: string\n        msg:\n          type: string\n        param:\n          type: string\n        location:\n          type: string\n    DelegatorObject:\n      type: object\n      properties:\n        address:\n          type: string\n        amount:\n          type: string\n        claimedRewards:\n          type: string\n        createdEpoch:\n          type: string\n        createdTime:\n          type: string\n        deactivatedEpoch:\n          type: string\n        deactivatedTime:\n          type: string\n        toStakerID:\n          type: string\n        claimedReward:\n          type: string\n    StakerObject:\n      type: object\n      properties:\n        address:\n          type: string\n        claimedRewards:\n          type: string\n        createdEpoch:\n          type: string\n        createdTime:\n          type: string\n        deactivatedEpoch:\n          type: string\n        deactivatedTime:\n          type: string\n        delegatedMe:\n          type: string\n        delegatorsClaimedRewards:\n          type: string\n        downtime:\n          type: string\n        id:\n          type: string\n        isCheater:\n          type: boolean\n        isValidator:\n          type: boolean\n        missedBlocks:\n          type: string\n        originationScore:\n          type: string\n        poi:\n          type: string\n        stake:\n          type: string\n        totalStake:\n          type: string\n        validationScore:\n          type: string\n        isActive:\n          type: boolean\n        isOffline:\n          type: boolean\n        baseRewardWeight:\n          type: string\n        txRewardWeight:\n          type: string\n        \n        ",
			"canonicalURL": "/github.com/Fantom-foundation/explorer-api@0faa52514671996f6dd6dd796823c2755a06ce2b/-/blob/swagger.yml",
			"externalURLs": [
				{
					"url": "https://github.com/Fantom-foundation/explorer-api/blob/0faa52514671996f6dd6dd796823c2755a06ce2b/swagger.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: at 1:980: invalid name: \"Response with validation error\" doesn't match \"^[a-zA-Z0-9.\\\\-_]+$\""
}