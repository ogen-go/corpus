{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/PaystackOSS/openapi"
		},
		"file": {
			"name": "betting.yaml",
			"size": 0,
			"path": "dist/betting.yaml",
			"byteSize": 22915,
			"content": "openapi: 3.0.1\ninfo:\n  title: Create a betting platform\n  description: |-\n    The OpenAPI specification for creating a betting platform using the [Paystack API](https://paystack.com/docs/api/).\n    ### Prerequisites\n    1. Sign up on [Paystack](https://paystack.com/signup) to get your secret API key\n    2. Set your API key as an environment variable on [Postman](https://learning.postman.com/docs/sending-requests/variables/)\n\n    We strongly recommend using the [Bulk Transfer API](https://paystack.com/docs/transfers/bulk-transfers) for sending customers their winnings instead of using Single Transfers.\n  version: 1.0.0\nservers:\n  - url: 'https://api.paystack.co'\n    description: Base API endpoint\npaths:\n  /transaction/initialize:\n    post:\n      tags:\n        - Transaction\n      summary: Initialize Transaction\n      operationId: transaction_initialize\n      description: Create a new transaction\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1transaction~1initialize/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - amount\n              properties:\n                email:\n                  description: Customer's email address\n                  type: string\n                  example: person@email.com\n                amount:\n                  description: 'Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR'\n                  type: integer\n                  example: 10247\n                currency:\n                  description: The transaction currency\n                  type: string\n                  enum:\n                    - NGN\n                    - GHS\n                    - ZAR\n                    - USD\n                reference:\n                  description: 'Unique transaction reference. Only -, ., = and alphanumeric characters allowed.'\n                  type: string\n                  example: 123.uniq=ref-\n                callback_url:\n                  description: Fully qualified url. Use this to override the callback url provided on the dashboard for this transaction\n                  type: string\n                  example: 'https://example.com/'\n                plan:\n                  description: |-\n                    If transaction is to create a subscription to a predefined plan, provide plan code here. \n                    This would invalidate the value provided in amount\n                  type: string\n                  example: PLN_123wede\n                invoice_limit:\n                  description: Number of times to charge customer during subscription to plan\n                  type: integer\n                  example: 10\n                metadata:\n                  description: Stringified JSON object of custom data\n                  type: object\n                  example:\n                    metadata:\n                      cart_id: 398\n                      custom_fields:\n                        - display_name: Invoice ID\n                          variable_name: Invoice ID\n                          value: 209\n                        - display_name: Cart Items\n                          variable_name: cart_items\n                          value: '3 bananas, 12 mangoes'\n                channels:\n                  description: An array of payment channels to control what channels you want to make available to the user to make a payment with\n                  type: array\n                  enum:\n                    - card\n                    - bank\n                    - ussd\n                    - qr\n                    - eft\n                    - mobile_money\n                    - bank_transfer\n                split_code:\n                  description: The split code of the transaction split\n                  type: string\n                  example: SPL_123AbZ\n                subaccount:\n                  description: The code for the subaccount that owns the payment\n                  type: string\n                  example: ACCT_23abcdefgh\n                transaction_charge:\n                  description: |-\n                    A flat fee to charge the subaccount for a transaction. \n                    This overrides the split percentage set when the subaccount was created\n                  type: integer\n                  example: 12300\n                bearer:\n                  description: The bearer of the transaction charge\n                  type: string\n                  enum:\n                    - account\n                    - subaccount\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Initiailize Transaction:\n                  value:\n                    status: true\n                    message: Authorization URL created\n                    data:\n                      authorization_url: 'https://checkout.paystack.com/spnajmit2hgi2c1'\n                      access_code: spandaoende\n                      reference: ad123ada\n        '401':\n          $ref: '#/paths/~1bank~1resolve/get/responses/401'\n        default:\n          description: Server error\n  /transaction/charge_authorization:\n    post:\n      tags:\n        - Transaction\n      summary: Charge Authorization\n      operationId: transaction_chargeAuthorization\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1transaction~1charge_authorization/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - amount\n                - authorization_code\n              properties:\n                email:\n                  description: Customer's email address used during the first transaction\n                  type: string\n                  example: person@email.com\n                amount:\n                  description: 'Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR'\n                  type: integer\n                  example: 10247\n                authorization_code:\n                  description: Valid authorization code to charge\n                  type: string\n                  example: AUTH_CODE\n                reference:\n                  description: 'Unique transaction reference. Only -, ., = and alphanumeric characters allowed.'\n                  type: string\n                  example: 123.uniq=ref-2\n                currency:\n                  description: The transaction currency\n                  type: string\n                  enum:\n                    - NGN\n                    - GHS\n                    - ZAR\n                    - USD\n                metadata:\n                  description: Stringified JSON object of custom data\n                  type: object\n                  example:\n                    cart_id: 398\n                    custom_fields:\n                      - display_name: Invoice ID\n                        variable_name: Invoice ID\n                        value: 209\n                      - display_name: Cart Items\n                        variable_name: cart_items\n                        value: '3 bananas, 12 mangoes'\n                split_code:\n                  description: The split code of the transaction split\n                  type: string\n                  example: SPL_123AbZ\n                subaccount:\n                  description: The code for the subaccount that owns the payment\n                  type: string\n                  example: ACCT_23abcdefgh\n                transaction_charge:\n                  description: |-\n                    A flat fee to charge the subaccount for a transaction. \n                    This overrides the split percentage set when the subaccount was created\n                  type: integer\n                  example: 12300\n                bearer:\n                  description: The bearer of the transaction charge\n                  type: string\n                  enum:\n                    - account\n                    - subaccount\n                queue:\n                  description: 'If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors.'\n                  type: boolean\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Charge Authorization:\n                  value:\n                    status: true\n                    message: Charge attempted\n                    data:\n                      amount: 500000\n                      currency: NGN\n                      reference: 123.uniq=ref-2\n                      metadata: 'cart_id:398, custom_fields:[{}]'\n                      split_code: SPL_123AbZ\n                      subaccount: ACCT_23abcdefgh\n        '401':\n          $ref: '#/paths/~1bank~1resolve/get/responses/401'\n        default:\n          description: Server error\n  /bank/resolve:\n    get:\n      tags:\n        - Verification\n      summary: Resolve Account Number\n      operationId: verification_resolveAccountNumber\n      parameters:\n        - name: account_number\n          in: query\n          schema:\n            type: integer\n          example: 0022728151\n        - name: bank_code\n          in: query\n          schema:\n            type: integer\n          example: 51\n      responses:\n        '200':\n          description: Resolve Account Number\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Resolve Bank:\n                  value:\n                    status: true\n                    message: Account number resolved\n                    data:\n                      account_number: 342391\n                      account_name: Doe Jane Loren\n                      bank_id: 9\n        '401':\n          description: Unauthorized operation\n          content:\n            application/json:\n              examples:\n                No-Authorization-Header:\n                  value:\n                    status: false\n                    message: No Authorization Header was found\n                Bad-Authorization-Header:\n                  value:\n                    status: false\n                    message: 'Format is Authorization Bearer [secret key]'\n                Invalid-Key:\n                  value:\n                    status: false\n                    message: Invalid key\n              schema:\n                type: object\n                properties:\n                  status:\n                    type: boolean\n                  message:\n                    type: string\n        '404':\n          $ref: '#/paths/~1bank~1resolve/get/responses/401'\n        default:\n          description: Server error\n  /transferrecipient:\n    post:\n      tags:\n        - Transfer Recipient\n      summary: Create Transfer Recipient\n      operationId: transferrecipient_create\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1transferrecipient/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - type\n                - name\n                - account_number\n                - bank_code\n              properties:\n                type:\n                  description: 'Recipient Type - nuban for NGN, mobile_money for MOMO in GHS, basa for ZAR and authorization for all.'\n                  type: string\n                  enum:\n                    - nuban\n                    - mobile_money\n                    - basa\n                    - authorization\n                name:\n                  description: Recipient's name\n                  type: string\n                  example: Ada Lovelace\n                account_number:\n                  description: Recipient's bank account number\n                  type: string\n                  example: '0000000000'\n                bank_code:\n                  description: Recipient's bank code. You can get the list of Bank Codes by calling the List Banks endpoint\n                  type: string\n                  example: '011'\n                description:\n                  description: A description for this recipient\n                  type: string\n                  example: Keeps our servers running\n                currency:\n                  description: Currency for the account receiving the transfer\n                  type: string\n                  enum:\n                    - NGN\n                    - GHS\n                    - ZAR\n                authorization_code:\n                  description: An authorization code from a previous transaction\n                  type: string\n                  example: AUTH_CODE\n                metadata:\n                  description: Stringified JSON object of custom data\n                  type: string\n                  example: |\n                    {referrer_id: 123}\n      responses:\n        '201':\n          description: Transfer Recipient Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Create Customer:\n                  value:\n                    status: true\n                    message: Transfer recipient created successfully\n                    data:\n                      active: true\n                      createdAt: 2022-09-16T08:31:43.321Z\n                      currency: NGN\n                      domain: live\n                      id: 38770134\n                      integration: 463433\n                      metadata:\n                        referrer_id: 123\n                      name: Ada Lovelace\n                      recipient_code: RCP_2fl8jmb2v3kbleb\n                      type: nuban\n                      updatedAt: 2022-09-16T08:31:43.321Z\n                      is_deleted: false\n                      isDeleted: false\n                      details:\n                        authorization_code: null\n                        account_number: 0\n                        account_name: Doe Jane Loren\n                        bank_code: 9\n                        bank_name: First Bank of Nigeria\n        '401':\n          $ref: '#/paths/~1bank~1resolve/get/responses/401'\n        default:\n          description: Server error\n  /transfer/bulk:\n    post:\n      tags:\n        - Transfer\n      summary: Initiate Bulk Transfer\n      operationId: transfer_bulk\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              $ref: '#/paths/~1transfer~1bulk/post/requestBody/content/application~1json/schema'\n          application/json:\n            schema:\n              type: object\n              required:\n                - batch\n              properties:\n                source:\n                  description: Where should we transfer from? Only balance is allowed for now\n                  type: string\n                transfers:\n                  description: 'A list of transfer object. Each object should contain amount, recipient, and reference'\n                  type: array\n                  items:\n                    type: object\n                    required:\n                      - source\n                      - amount\n                      - recipient\n                    properties:\n                      source:\n                        description: Where should we transfer from? Only balance is allowed for now\n                        type: string\n                        example: balance\n                      amount:\n                        description: Amount to transfer in kobo if currency is NGN. pesewas if currency is GHS and cents for ZAR.\n                        type: integer\n                        example: 10234\n                      recipient:\n                        description: The transfer recipient's code\n                        type: string\n                        example: RCP_CODE\n                      reason:\n                        description: The reason or narration for the transfer.\n                        type: string\n                        example: Good job\n                      currency:\n                        description: Specify the currency of the transfer. Defaults to NGN.\n                        type: string\n                      reference:\n                        description: |-\n                          If specified, the field should be a unique identifier (in lowercase) for the object. \n                          Only -,_ and alphanumeric characters are allowed.\n                        type: string\n                        example: Transfer-123_unique\n      responses:\n        '200':\n          description: Request successful\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/Ok/content/application~1json/schema'\n              examples:\n                Initiate Transfer:\n                  value:\n                    status: true\n                    message: Transfer has been queued\n                    data:\n                      reference: on5hyz9poe\n                      integration: 428626\n                      domain: test\n                      amount: 3794800\n                      currency: NGN\n                      source: balance\n                      reason: Holiday Flexing\n                      recipient: 6788170\n                      status: success\n                      transfer_code: TRF_fiyxvgkh71e717b\n                      id: 23070321\n                      createdAt: 2020-05-13T14:22:49.687Z\n                      updatedAt: 2020-05-13T14:22:49.687Z\n        '401':\n          $ref: '#/paths/~1bank~1resolve/get/responses/401'\n        default:\n          description: Server error\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n  schemas:\n    Customer:\n      allOf:\n        - type: object\n          required:\n            - email\n          properties:\n            email:\n              description: Customer's email address\n              type: string\n        - type: object\n          properties:\n            first_name:\n              description: Customer's first name\n              type: string\n              example: Some\n            last_name:\n              description: Customer's last name\n              type: string\n              example: Body\n            phone:\n              description: Customer's phone number\n              type: string\n              example: '+2348123456789'\n            metadata:\n              description: Stringified JSON object of custom data\n              type: string\n        - type: object\n          required:\n            - authorization_code\n          properties:\n            authorization_code:\n              description: Customer's authorization code to be deactivated\n              type: string\n        - type: object\n          required:\n            - customer\n          properties:\n            customer:\n              description: 'Customer''s code, or email address'\n              type: string\n            risk_action:\n              description: |\n                One of the possible risk actions [ default, allow, deny ]. allow to whitelist. \n                deny to blacklist. Customers start with a default risk action.\n              type: string\n              enum:\n                - default\n                - allow\n                - deny\n        - type: object\n          required:\n            - type\n            - country\n            - bvn\n            - bank_code\n            - account_number\n          properties:\n            type:\n              description: Predefined types of identification.\n              type: string\n              enum:\n                - bvn\n                - bank_account\n            country:\n              description: Two-letter country code of identification issuer\n              type: string\n              example: NG\n            bvn:\n              description: Customer's Bank Verification Number\n              type: integer\n              example: 0123456789\n            bank_code:\n              description: 'You can get the list of bank codes by calling the List Banks endpoint (https://api.paystack.co/bank).'\n              type: string\n              example: '007'\n            account_number:\n              description: Customer's bank account number.\n              type: string\n              example: '0111111111'\n            first_name:\n              description: Customer's first name\n              type: string\n              example: Uchenna\n            last_name:\n              description: Customer's last name\n              type: string\n              example: Okoro\n    Error:\n      type: object\n      properties:\n        status:\n          type: boolean\n        message:\n          type: string\n    Response:\n      type: object\n      properties:\n        status:\n          type: boolean\n        message:\n          type: string\n        data:\n          type: object\n  responses:\n    Ok:\n      description: Successful operation\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              status:\n                type: boolean\n              message:\n                type: string\n              data:\n                type: object\n    Created:\n      description: Resource created\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Response'\n    NotFound:\n      description: Entity not found\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            status: false\n            message: Entity not found\n    Unauthorized:\n      description: Unauthorized operation\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\n          example:\n            status: false\n            message: Invalid key\n    GeneralError:\n      description: General Error\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'\nsecurity:\n  - bearerAuth: []\n",
			"canonicalURL": "/github.com/PaystackOSS/openapi@e65c07ce33d6900becd5f8dc3b935e7536ce486f/-/blob/dist/betting.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/PaystackOSS/openapi/blob/e65c07ce33d6900becd5f8dc3b935e7536ce486f/dist/betting.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/transaction/initialize\": post: operation \"transaction_initialize\": requestBody: parse content: application/x-www-form-urlencoded: schema: parse schema: $ref: resolve \"#/paths/~1transaction~1initialize/post/requestBody/content/application~1json/schema\": property \"channels\": at dist/betting.yaml:86:21: parse enum values: parse value \"\\\"card\\\"\": expected type \"array\", got \"string\""
}