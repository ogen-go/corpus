{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Sciebo-RDS/Sciebo-RDS"
		},
		"file": {
			"name": "use-case_metadata.yml",
			"size": 0,
			"path": "RDS/layer2_use_cases/metadata/use-case_metadata.yml",
			"byteSize": 8075,
			"content": "openapi: 3.0.0\npaths:\n  '/user/{user-id}/research/{research-index}':\n    parameters:\n      - schema:\n          type: string\n        name: user-id\n        in: path\n        required: true\n      - schema:\n          type: string\n        name: research-index\n        in: path\n        required: true\n    get:\n      summary: Get all metadata and corresponding research id\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  researchId:\n                    type: integer\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        port:\n                          type: string\n                        metadata:\n                          type: object\n              examples:\n                example-1:\n                  value:\n                    length: 1\n                    projectId: 5\n                    list:\n                      - - port: port-zenodo\n                          metadata:\n                            titles:\n                              - title: long title\n                                lang: en\n                            publisher: research publisher gmbh\n                            type:\n                              resourceType: ''\n                              resourceTypeGeneral: Poster\n      operationId: api.UserResearch.get\n      description: This endpoint returns the projectId for the given user and the index of project. This is an endpoint for convenience.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                - type: 'null'\n            examples:\n              example-1:\n                value:\n                  titles: ''\n                  publisher: ''\n                  type: ''\n    patch:\n      summary: Modify a research\n      operationId: api.UserResearch.patch\n      responses:\n        '200':\n          description: 'OK, metadata used from request body'\n          content:\n            application/json:\n              schema:\n                description: 'This will returns only the updated fields, because this service redirects only the output from ports.'\n                oneOf:\n                  - type: object\n                    properties:\n                      length:\n                        type: integer\n                      list:\n                        type: array\n                        items:\n                          type: object\n                  - type: 'null'\n                    properties: {}\n              examples:\n                example-1:\n                  value:\n                    - port: port-zenodo\n                      metadata:\n                        titles:\n                          - title: long title\n                            lang: en\n                        publisher: research publisher gmbh\n                        type:\n                          resourceType: ''\n                          resourceTypeGeneral: Poster\n        '202':\n          description: 'Created, metadata taken from EFSS folder automatically, because there were no request body'\n        '404':\n          description: Not found a ro-crate file in the configured EFSS folder.\n      description: 'If no metadata were sent, the RO-Crate file will be used in the configured EFSS folder.'\n    put:\n      summary: Finish research\n      responses:\n        '200':\n          description: OK\n      description: 'Finish this research, for example publish it in the corresponding metadata service and set status to done.'\n      operationId: api.UserResearch.put\n  '/research/{research-id}':\n    parameters:\n      - schema:\n          type: string\n        name: research-id\n        in: path\n        required: true\n    get:\n      summary: Get all metadata from given research\n      tags: []\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        port:\n                          type: string\n                        metadata:\n                          type: object\n              examples:\n                example-1:\n                  value:\n                    length: 1\n                    list:\n                      - - port: port-zenodo\n                          metadata:\n                            titles:\n                              - title: long title\n                                lang: en\n                            publisher: research publisher gmbh\n                            type:\n                              resourceType: ''\n                              resourceTypeGeneral: Poster\n      description: |-\n        Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. \n\n        See the examples to see, how to use it.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - type: object\n                - type: 'null'\n            examples:\n              example-1:\n                value:\n                  titles: ''\n                  publisher: ''\n                  type: ''\n        description: 'If no keys are given, it returns all metadata.'\n    patch:\n      summary: Modify a research\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                description: 'This will returns only the updated fields, because this service redirects only the output from ports.'\n                properties:\n                  length:\n                    type: integer\n                  list:\n                    type: array\n                    items:\n                      type: object\n              examples:\n                example-1:\n                  value:\n                    - port: port-zenodo\n                      metadata:\n                        titles:\n                          - title: long title\n                            lang: en\n                        publisher: research publisher gmbh\n                        type:\n                          resourceType: ''\n                          resourceTypeGeneral: Poster\n      requestBody:\n        description: The given body has to be valid against the datacite jsonschema (without required fields).\n        content:\n          application/json:\n            schema:\n              type: object\n            examples:\n              example-1:\n                value:\n                  titles:\n                    - title: long title\n                      lang: en\n                  publisher: research publisher gmbh\n                  type:\n                    resourceType: ''\n                    resourceTypeGeneral: Poster\n      description: |-\n        Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. \n\n        See the examples to see, how to use it.\ninfo:\n  version: '1.0'\n  title: Metadata Service\n  description: This service is responsible for any metadata functionality to get and update all metadata through the ports. This is a convenient way to interact with the metadata from the ports.\n  contact:\n    name: Peter Heiss\n    url: 'https://www.research-data-services.org'\n    email: peter.heiss@uni-muenster.de\nservers:\n  - url: 'http://use-case_metadata:3000/metadata'\n    description: ''\ncomponents:\n  schemas: {}\n"
		}
	},
	"Error": "parse: parse spec: paths: /user/{user-id}/research/{research-index}: get: operation \"api.UserResearch.get\": requestBody: content: \"application/json\": parse schema: parse schema: oneOf: [1]: parse schema: unexpected schema type: \"null\""
}