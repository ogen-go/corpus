{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/mojaloop/pisp-project"
		},
		"file": {
			"name": "ttk-thirdparty-api.yaml",
			"size": 0,
			"path": "src/interface/ttk-thirdparty-api.yaml",
			"byteSize": 99028,
			"content": "openapi: 3.0.2\ninfo:\n  title: Mojaloop Thirdparty API Adapter\n  version: '1.0'\n  description: A Mojaloop API for thirdparty interactions between `PISPs` (Payment Initiation Service Providers) and `DFSPs` (Digital Financial Service Providers)\n  license:\n    name: TBD\n    url: TBD\nservers:\n  - url: /\npaths:\n  /consentRequests:\n    post:\n      tags:\n        - consentRequests\n      operationId: CreateConsentRequest\n      summary: CreateConsentRequest\n      description: |\n        A request from a PISP to a DFSP to start the process of delegating consent\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: The consentRequest to create\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ConsentRequestsPostRequest\n              type: object\n              description: |-\n                Used by: PISP\n                The HTTP request POST /consentRequests is used to request a DFSP to grant access to one or more accounts owned by a customer of the DFSP for the PISP who sends the request.\n                Callback and data model for POST /consentRequests:\n                Callback: PUT /consentRequests/{ID} Error callback: PUT /consentRequests/{ID}/error Data model - see below url\n                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31212-post-consentrequests\n              properties:\n                consentRequestId:\n                  $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                userId:\n                  type: string\n                  description: 'The identifier used in the **GET /accounts/**_{ID}_. Used by the DFSP to correlate an account lookup to a `consentRequest`'\n                  minLength: 1\n                  maxLength: 128\n                scopes:\n                  type: array\n                  minLength: 1\n                  maxLength: 256\n                  items:\n                    $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                authChannels:\n                  type: array\n                  minLength: 1\n                  maxLength: 256\n                  items:\n                    title: ConsentRequestChannelType\n                    type: string\n                    enum:\n                      - WEB\n                      - OTP\n                    description: |\n                      The auth channel being used for the consent request.\n                      - WEB - DFSP can support authorization via a web-based login.\n                      - OTP - DFSP can support authorization via a One Time PIN.\n                callbackUri:\n                  title: Uri\n                  type: string\n                  pattern: '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?'\n                  minLength: 1\n                  maxLength: 512\n                  description: |\n                    The API data type Uri is a JSON string in a canonical format that is restricted by a regular expression for interoperability reasons.\n                extensionList:\n                  title: ExtensionList\n                  type: object\n                  description: 'Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.'\n                  properties:\n                    extension:\n                      type: array\n                      items:\n                        title: Extension\n                        type: object\n                        description: Data model for the complex type Extension.\n                        properties:\n                          key:\n                            title: ExtensionKey\n                            type: string\n                            minLength: 1\n                            maxLength: 32\n                            description: Extension key.\n                          value:\n                            title: ExtensionValue\n                            type: string\n                            minLength: 1\n                            maxLength: 128\n                            description: Extension value.\n                        required:\n                          - key\n                          - value\n                      minItems: 1\n                      maxItems: 16\n                      description: Number of Extension elements.\n                  required:\n                    - extension\n              required:\n                - consentRequestId\n                - userId\n                - scopes\n                - authChannels\n                - callbackUri\n            example:\n              id: 4cab6274-8b3e-41b4-83ce-fc0847409155\n              initiatorId: pispA\n              authChannels:\n                - WEB\n                - OTP\n              scopes:\n                - accountId: dfspa.alice.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.alice.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n              callbackUri: 'pisp-app://callback.com'\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/consentRequests/{ID}':\n    put:\n      tags:\n        - consentRequests\n      operationId: UpdateConsentRequest\n      summary: UpdateConsentRequest\n      description: |\n        DFSP updates auth channels and/or auth uri in response to consentRequest.\n\n        PISP updates the consentRequest to include authorization token from their user,\n        which the DFSP is to then verify.\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentRequestsIDPutResponseWeb\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the request consent phase of the account linking web flow,\n                    the result is the PISP being instructed on a specific URL where this\n                    supposed user should be redirected. This URL should be a place where\n                    the user can prove their identity (e.g., by logging in).\n                  properties:\n                    scopes:\n                      type: array\n                      minLength: 1\n                      maxLength: 256\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    authChannels:\n                      type: array\n                      minLength: 1\n                      maxLength: 1\n                      items:\n                        title: ConsentRequestChannelTypeWeb\n                        type: string\n                        enum:\n                          - WEB\n                        description: |\n                          The web auth channel being used for `PUT /consentRequest/{ID}` request.\n                    callbackUri:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/callbackUri'\n                    authUri:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/callbackUri'\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - scopes\n                    - authChannels\n                    - callbackUri\n                    - authUri\n                  additionalProperties: false\n                - title: ConsentRequestsIDPutResponseOTP\n                  type: object\n                  description: |\n                    The object sent in a `PUT /consentRequests/{ID}` request.\n\n                    Schema used in the request consent phase of the account linking OTP/SMS flow.\n                  properties:\n                    scopes:\n                      type: array\n                      minLength: 1\n                      maxLength: 256\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    authChannels:\n                      type: array\n                      minLength: 1\n                      maxLength: 1\n                      items:\n                        title: ConsentRequestChannelTypeOTP\n                        type: string\n                        enum:\n                          - OTP\n                        description: |\n                          The OTP auth channel being used for `PUT /consentRequests/{ID}` request.\n                    callbackUri:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/callbackUri'\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - scopes\n                    - authChannels\n                  additionalProperties: false\n            examples:\n              sample1:\n                value:\n                  initiatorId: pispA\n                  authChannels:\n                    - WEB\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  callbackUri: 'pisp-app://callback.com'\n                  authUri: dfspa.com/authorize?consentRequestId=xxxxx\n              sample2:\n                value:\n                  initiatorId: pispA\n                  authChannels:\n                    - WEB\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  callbackUri: 'pisp-app://callback.com'\n                  authUri: dfspa.com/authorize?consentRequestId=xxxxx\n                  authToken: otp or secret\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /consents:\n    post:\n      description: |\n        Create a consent object. Called by DFSP after the successful creation and validation of a consentRequest.\n        The request is forwarded to both the Auth service and PISP.\n      summary: CreateConsent\n      operationId: CreateConsent\n      tags:\n        - consents\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentPostRequestAUTH\n                  type: object\n                  description: |\n                    The object sent in a `POST /consents` request to the Auth-Service\n                    by a DFSP to store registered Consent and credential\n                  properties:\n                    consentId:\n                      allOf:\n                        - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                      description: |\n                        Common ID between the PISP and FSP for the Consent object\n                        determined by the DFSP who creates the Consent.\n                    consentRequestId:\n                      $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                    scopes:\n                      minLength: 1\n                      maxLength: 256\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    credential:\n                      allOf:\n                        - $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential'\n                    status:\n                      title: ConsentStatus\n                      type: string\n                      enum:\n                        - ISSUED\n                        - REVOKED\n                      description: |-\n                        Allowed values for the enumeration ConsentStatus\n                        - ISSUED - The consent has been issued by the DFSP\n                        - REVOKED - The consent has been revoked\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - consentId\n                    - scopes\n                    - credential\n                    - status\n                  additionalProperties: false\n                - title: ConsentPostRequestPISP\n                  type: object\n                  description: |\n                    The provisional Consent object sent by the DFSP in `POST /consents`.\n                  properties:\n                    consentId:\n                      allOf:\n                        - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                      description: |\n                        Common ID between the PISP and the Payer DFSP for the consent object. The ID\n                        should be reused for re-sends of the same consent. A new ID should be generated\n                        for each new consent.\n                    consentRequestId:\n                      allOf:\n                        - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                      description: |\n                        The ID given to the original consent request on which this consent is based.\n                    scopes:\n                      type: array\n                      minLength: 1\n                      maxLength: 256\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    status:\n                      $ref: '#/paths/~1consents/post/requestBody/content/application~1json/schema/oneOf/0/properties/status'\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - consentId\n                    - consentRequestId\n                    - scopes\n                    - status\n            example:\n              id: 9d553d59-610f-44aa-b7ec-b483af24e98a\n              requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n              participantId: dfspA\n              initiatorId: pispA\n              scopes:\n                - accountId: dfspa.alice.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.alice.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/consents/{ID}':\n    parameters:\n      - name: ID\n        in: path\n        required: true\n        schema:\n          type: string\n        description: The identifier value.\n      - name: Content-Type\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n      - name: Date\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `Date` header field indicates the date when the request was sent.\n      - name: X-Forwarded-For\n        in: header\n        schema:\n          type: string\n        required: false\n        description: |-\n          The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.\n\n          **Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`.\n      - name: FSPIOP-Source\n        in: header\n        schema:\n          type: string\n        required: true\n        description: The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`).\n      - name: FSPIOP-Destination\n        in: header\n        schema:\n          type: string\n        required: false\n        description: 'The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field must be set by the original sender of the request if the destination is known (valid for all services except GET /parties) so that any entities between the client and the server do not need to parse the payload for routing purposes. If the destination is not known (valid for service GET /parties), the field should be left empty.'\n      - name: FSPIOP-Encryption\n        in: header\n        schema:\n          type: string\n        required: false\n        description: The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request.\n      - name: FSPIOP-Signature\n        in: header\n        schema:\n          type: string\n        required: false\n        description: The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature.\n      - name: FSPIOP-URI\n        in: header\n        schema:\n          type: string\n        required: false\n        description: 'The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'\n      - name: FSPIOP-HTTP-Method\n        in: header\n        schema:\n          type: string\n        required: false\n        description: 'The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set).'\n    put:\n      description: |\n        The HTTP request `PUT /consents/{ID}` is used to update a specified consent object.\n        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n        - Called by a `auth-service` to add the credential details.\n\n        - Called by a `PISP` to add a signature of the challenge.\n\n        PISP -\u003e Switch\n        Switch -\u003e PISP\n      summary: UpdateConsent\n      tags:\n        - consents\n      operationId: UpdateConsent\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentsIDPutResponseSigned\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used by the PISP to update a Consent with a signed challenge and register a credential.\n                    Called by a `PISP` to after signing a challenge. Sent to a DFSP for verification.\n                  properties:\n                    status:\n                      title: ConsentStatusIssued\n                      type: string\n                      enum:\n                        - ISSUED\n                      description: |-\n                        Allowed values for the enumeration ConsentStatus\n                        - ISSUED - The consent has been issued by the DFSP\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    credential:\n                      title: SignedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        SignedCredential is a special formatting of the credential to allow us to be\n                        more explicit about the `status` field - it should only ever be PENDING when\n                        updating a credential.\n                      properties:\n                        credentialType:\n                          title: CredentialType\n                          type: string\n                          enum:\n                            - FIDO\n                            - GENERIC\n                          description: |-\n                            The type of the Credential. - \"FIDO\" - The credential is based on a FIDO challenge. Its payload is a FIDOPublicKeyCredentialAttestation object. - \"GENERIC\" - The credential is based on a simple public key validation. Its payload is a GenericCredential object.\n                            https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3226-credentialtype\n                        status:\n                          title: CredentialStatusPending\n                          type: string\n                          enum:\n                            - PENDING\n                          description: |\n                            The status of the Credential.\n                            - \"PENDING\" - The credential has been created, but has not been verified\n                        genericPayload:\n                          title: GenericCredential\n                          type: object\n                          description: |\n                            A publicKey + signature of a challenge for a generic public/private keypair.\n                          properties:\n                            publicKey:\n                              type: string\n                              pattern: '^[A-Za-z0-9-_]+[=]{0,2}$'\n                              description: 'The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters.'\n                            signature:\n                              $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/1/properties/credential/properties/genericPayload/properties/publicKey'\n                          required:\n                            - publicKey\n                            - signature\n                          additionalProperties: false\n                        fidoPayload:\n                          title: FIDOPublicKeyCredentialAttestation\n                          type: object\n                          description: |\n                            A data model representing a FIDO Attestation result. Derived from \n                            [`PublicKeyCredential` Interface](https://w3c.github.io/webauthn/#iface-pkcredential).\n\n                            The `PublicKeyCredential` interface represents the below fields with\n                            a Type of Javascript [ArrayBuffer](https://heycam.github.io/webidl/#idl-ArrayBuffer).\n                            For this API, we represent ArrayBuffers as base64 encoded utf-8 strings.\n                          properties:\n                            id:\n                              type: string\n                              description: |\n                                credential id: identifier of pair of keys, base64 encoded\n                                https://w3c.github.io/webauthn/#ref-for-dom-credential-id\n                              minLength: 59\n                              maxLength: 118\n                            rawId:\n                              type: string\n                              description: |\n                                raw credential id: identifier of pair of keys, base64 encoded\n                              minLength: 59\n                              maxLength: 118\n                            response:\n                              type: object\n                              description: |\n                                AuthenticatorAttestationResponse\n                              properties:\n                                clientDataJSON:\n                                  type: string\n                                  description: |\n                                    JSON string with client data\n                                  minLength: 121\n                                  maxLength: 512\n                                attestationObject:\n                                  type: string\n                                  description: |\n                                    CBOR.encoded attestation object\n                                  minLength: 306\n                                  maxLength: 2048\n                              required:\n                                - clientDataJSON\n                                - attestationObject\n                              additionalProperties: false\n                            type:\n                              type: string\n                              description: 'response type, we need only the type of public-key'\n                              enum:\n                                - public-key\n                          required:\n                            - id\n                            - response\n                            - type\n                          additionalProperties: false\n                      required:\n                        - credentialType\n                        - status\n                      additionalProperties: false\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - scopes\n                    - credential\n                  additionalProperties: false\n                - title: ConsentsIDPutResponseVerified\n                  type: object\n                  description: |\n                    The HTTP request `PUT /consents/{ID}` is used by the DFSP or Auth-Service to update a Consent object once it has been Verified.\n                    Called by a `auth-service` to notify a DFSP that a credential has been verified and registered.\n                  properties:\n                    status:\n                      $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/status'\n                    scopes:\n                      type: array\n                      items:\n                        $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n                    credential:\n                      title: VerifiedCredential\n                      type: object\n                      description: |\n                        A credential used to allow a user to prove their identity and access\n                        to an account with a DFSP.\n\n                        VerifiedCredential is a special formatting of Credential to allow us to be\n                        more explicit about the `status` field - it should only ever be VERIFIED when\n                        updating a credential.\n                      properties:\n                        credentialType:\n                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/credentialType'\n                        status:\n                          $ref: '#/paths/~1consents~1%7BID%7D/patch/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/status'\n                        genericPayload:\n                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/genericPayload'\n                        fidoPayload:\n                          $ref: '#/paths/~1consents~1%7BID%7D/put/requestBody/content/application~1json/schema/oneOf/0/properties/credential/properties/fidoPayload'\n                      required:\n                        - credentialType\n                        - status\n                      additionalProperties: false\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - scopes\n                    - credential\n                  additionalProperties: false\n            examples:\n              sample1:\n                value:\n                  requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n                  participantId: dfspA\n                  initiatorId: pispA\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  credential:\n                    type: FIDO\n                    status: PENDING\n                    challenge:\n                      payload: base64 encoded challenge\n              sample2:\n                value:\n                  requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n                  participantId: dfspA\n                  initiatorId: pispA\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  credential:\n                    id: '9876'\n                    type: FIDO\n                    status: PENDING\n                    challenge:\n                      payload: base64 encoded challenge\n                      signature: payload signed by PISP - using private key\n                    payload: base64 encoded bytes- using public key\n              sample3:\n                value:\n                  requestId: 4cab6274-8b3e-41b4-83ce-fc0847409155\n                  participantId: dfspA\n                  initiatorId: pispA\n                  scopes:\n                    - accountId: dfspa.alice.1234\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                    - accountId: dfspa.alice.5678\n                      actions:\n                        - accounts.transfer\n                        - accounts.getBalance\n                  credential:\n                    id: '9876'\n                    type: FIDO\n                    status: VERIFIED\n                    challenge:\n                      payload: base64 encoded challenge\n                      signature: payload signed by PISP - using private key\n                    payload: base64 encoded bytes- using public key\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    patch:\n      description: |\n        The HTTP request `PATCH /consents/{ID}` is used to notify the PISP and DFSP of revoked consent.\n\n        Switch -\u003e PISP\n      summary: NotifyConsent\n      tags:\n        - consents\n      operationId: NotifyConsent\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              oneOf:\n                - title: ConsentsIDPatchResponseVerified\n                  description: |\n                    PATCH /consents/{ID} request object.\n\n                    Sent by the DFSP to the PISP when a consent is issued and verified.\n                    Used in the \"Register Credential\" part of the Account linking flow.\n                  type: object\n                  properties:\n                    credential:\n                      type: object\n                      properties:\n                        status:\n                          title: CredentialStatusVerified\n                          type: string\n                          enum:\n                            - VERIFIED\n                          description: |\n                            The status of the Credential.\n                            - \"VERIFIED\" - The Credential is valid and verified.\n                      required:\n                        - status\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - credential\n                - title: ConsentsIDPatchResponseRevoked\n                  description: |\n                    PATCH /consents/{ID} request object.\n\n                    Sent to both the PISP and DFSP when a consent is revoked.\n                    Used in the \"Unlinking\" part of the Account Unlinking flow.\n                  type: object\n                  properties:\n                    status:\n                      title: ConsentStatusRevoked\n                      type: string\n                      enum:\n                        - REVOKED\n                      description: |-\n                        Allowed values for the enumeration ConsentStatus\n                        - REVOKED - The consent has been revoked\n                    revokedAt:\n                      title: DateTime\n                      type: string\n                      pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$'\n                      description: 'The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons. The format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC).'\n                      example: '2016-05-24T08:38:08.699-04:00'\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - status\n                    - revokedAt\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/thirdpartyRequests/transactions/{ID}':\n    parameters:\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n    get:\n      description: |\n        The callback `GET /thirdpartyRequests/transactions/{ID}` is used to get information about a thirdparty request transaction.\n      summary: Get third party transaction requests\n      tags:\n        - thirdpartyRequests\n      operationId: GetThirdpartyTransactionRequests\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    patch:\n      operationId: NotifyThirdpartyTransactionRequests\n      summary: NotifyThirdpartyTransactionRequests\n      description: |\n        The HTTP request `PATCH /thirdpartyRequests/transactions/{ID}` is used to\n        notify a thirdparty of the outcome of a transaction request.\n\n        Switch(Thirdparty API Adapter) -\u003e PISP\n      tags:\n        - thirdpartyRequests\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/1'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                transactionId:\n                  $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                transactionRequestState:\n                  title: TransactionRequestState\n                  type: string\n                  enum:\n                    - RECEIVED\n                    - PENDING\n                    - ACCEPTED\n                    - REJECTED\n                  description: |-\n                    Below are the allowed values for the enumeration.\n                    - RECEIVED - Payer FSP has received the transaction from the Payee FSP.\n                    - PENDING - Payer FSP has sent the transaction request to the Payer.\n                    - ACCEPTED - Payer has approved the transaction.\n                    - REJECTED - Payer has rejected the transaction.\n                  example: RECEIVED\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/thirdpartyRequests/transactions/{ID}/error':\n    put:\n      tags:\n        - thirdpartyRequests\n      operationId: NotifyErrorThirdpartyTransactionRequests\n      summary: NotifyErrorThirdpartyTransactionRequests\n      description: |\n        If the server is unable to find the transaction request, or another processing error occurs,\n        the error callback `PUT /thirdpartyRequests/transactions/{ID}/error` is used.\n        The `{ID}` in the URI should contain the `transactionRequestId` that was used for the creation of the transaction request.\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: Error information returned.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ErrorInformationObject\n              type: object\n              description: Data model for the complex type object that contains ErrorInformation.\n              properties:\n                errorInformation:\n                  title: ErrorInformation\n                  type: object\n                  description: Data model for the complex type ErrorInformation.\n                  properties:\n                    errorCode:\n                      title: ErrorCode\n                      type: string\n                      pattern: '^[1-9]\\d{3}$'\n                      description: 'The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error.'\n                      example: '5100'\n                    errorDescription:\n                      title: ErrorDescription\n                      type: string\n                      minLength: 1\n                      maxLength: 128\n                      description: Error description string.\n                    extensionList:\n                      $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                  required:\n                    - errorCode\n                    - errorDescription\n              required:\n                - errorInformation\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /thirdpartyRequests/transactions:\n    post:\n      tags:\n        - thirdpartyRequests\n      operationId: CreateThirdpartyTransactionRequests\n      summary: CreateThirdpartyTransactionRequests\n      description: |\n        The HTTP request `POST /thirdpartyRequests/transactions` is used to request the creation of a third party transaction.\n        Called by a PISP to initiate a third party transaction flow.\n\n        PISP -\u003e Switch(Thirdparty API Adapter)\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/2'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/4'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/5'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/6'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/7'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/8'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/9'\n      requestBody:\n        description: Transaction request to be created.\n        required: true\n        content:\n          application/json:\n            schema:\n              title: ThirdpartyRequestsTransactionsPostRequest\n              type: object\n              description: |-\n                Used by: PISP\n                The HTTP request POST /thirdpartyRequests/transactions is used to request the creation of a transaction request on the server for the transfer described in the request.\n                Callback and data model information for POST /thirdpartyRequests/transactions:\n                Callback - PUT /thirdpartyRequests/transactions/{ID} Error Callback - PUT /thirdpartyRequests/transactions/{ID}/error Data Model - See link below\n                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#31712-post-thirdpartyrequeststransactions\n              properties:\n                transactionRequestId:\n                  allOf:\n                    - $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                  description: |\n                    Common ID between the PISP and the Payer DFSP for the transaction request object. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.\n                payee:\n                  allOf:\n                    - title: Party\n                      type: object\n                      description: Data model for the complex type Party.\n                      properties:\n                        partyIdInfo:\n                          $ref: '#/paths/~1thirdpartyRequests~1transactions/post/requestBody/content/application~1json/schema/properties/payer/allOf/0'\n                        merchantClassificationCode:\n                          title: MerchantClassificationCode\n                          type: string\n                          pattern: '^[\\d]{1,4}$'\n                          description: 'A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc.'\n                        name:\n                          title: PartyName\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: Name of the Party. Could be a real name or a nickname.\n                        personalInfo:\n                          title: PartyPersonalInfo\n                          type: object\n                          description: Data model for the complex type PartyPersonalInfo.\n                          properties:\n                            complexName:\n                              title: PartyComplexName\n                              type: object\n                              description: Data model for the complex type PartyComplexName.\n                              properties:\n                                firstName:\n                                  title: FirstName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\p{L}\\p{gc=Mark}\\p{digit}\\p{gc=Connector_Punctuation}\\p{Join_Control} .,''''-]{1,128}$'\n                                  description: First name of the Party (Name Type).\n                                  example: Henrik\n                                middleName:\n                                  title: MiddleName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\p{L}\\p{gc=Mark}\\p{digit}\\p{gc=Connector_Punctuation}\\p{Join_Control} .,''''-]{1,128}$'\n                                  description: Middle name of the Party (Name Type).\n                                  example: Johannes\n                                lastName:\n                                  title: LastName\n                                  type: string\n                                  minLength: 1\n                                  maxLength: 128\n                                  pattern: '^(?!\\s*$)[\\p{L}\\p{gc=Mark}\\p{digit}\\p{gc=Connector_Punctuation}\\p{Join_Control} .,''''-]{1,128}$'\n                                  description: Last name of the Party (Name Type).\n                                  example: Karlsson\n                            dateOfBirth:\n                              title: DateofBirth (type Date)\n                              type: string\n                              pattern: '^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$'\n                              description: Date of Birth of the Party.\n                              example: '1966-06-16'\n                      required:\n                        - partyIdInfo\n                  description: Information about the Payee in the proposed financial transaction.\n                payer:\n                  allOf:\n                    - title: PartyIdInfo\n                      type: object\n                      description: Data model for the complex type PartyIdInfo.\n                      properties:\n                        partyIdType:\n                          title: PartyIdType\n                          type: string\n                          enum:\n                            - MSISDN\n                            - EMAIL\n                            - PERSONAL_ID\n                            - BUSINESS\n                            - DEVICE\n                            - ACCOUNT_ID\n                            - IBAN\n                            - ALIAS\n                            - CONSENT\n                            - THIRD_PARTY_LINK\n                          description: |\n                            Below are the allowed values for the enumeration.\n                            - MSISDN - An MSISDN (Mobile Station International Subscriber Directory\n                            Number, that is, the phone number) is used as reference to a participant.\n                            The MSISDN identifier should be in international format according to the\n                            [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en).\n                            Optionally, the MSISDN may be prefixed by a single plus sign, indicating the\n                            international prefix.\n                            - EMAIL - An email is used as reference to a\n                            participant. The format of the email should be according to the informational\n                            [RFC 3696](https://tools.ietf.org/html/rfc3696).\n                            - PERSONAL_ID - A personal identifier is used as reference to a participant.\n                            Examples of personal identification are passport number, birth certificate\n                            number, and national registration number. The identifier number is added in \n                            the PartyIdentifier element. The personal identifier type is added in the\n                            PartySubIdOrType element.\n                            - BUSINESS - A specific Business (for example, an organization or a company)\n                            is used as reference to a participant. The BUSINESS identifier can be in any\n                            format. To make a transaction connected to a specific username or bill number\n                            in a Business, the PartySubIdOrType element should be used.\n                            - DEVICE - A specific device (for example, a POS or ATM) ID connected to a\n                            specific business or organization is used as reference to a Party.\n                            For referencing a specific device under a specific business or organization,\n                            use the PartySubIdOrType element.\n                            - ACCOUNT_ID - A bank account number or FSP account ID should be used as\n                            reference to a participant. The ACCOUNT_ID identifier can be in any format,\n                            as formats can greatly differ depending on country and FSP.\n                            - IBAN - A bank account number or FSP account ID is used as reference to a\n                            participant. The IBAN identifier can consist of up to 34 alphanumeric\n                            characters and should be entered without whitespace.\n                            - ALIAS An alias is used as reference to a participant. The alias should be\n                            created in the FSP as an alternative reference to an account owner.\n                            Another example of an alias is a username in the FSP system.\n                            The ALIAS identifier can be in any format. It is also possible to use the\n                            PartySubIdOrType element for identifying an account under an Alias defined\n                            by the PartyIdentifier.\n                            - CONSENT - A Consent represents an agreement between a PISP, a Customer and\n                            a DFSP which allows the PISP permission to perform actions on behalf of the \n                            customer. A Consent has an authoritative source: either the DFSP who issued \n                            the Consent, or an Auth Service which administers the Consent.\n                            - THIRD_PARTY_LINK - A Third Party Link represents an agreement between a PISP,\n                            a DFSP, and a specific Customer's account at the DFSP. The content of the link \n                            is created by the DFSP at the time when it gives permission to the PISP for \n                            specific access to a given account.\n                          example: PERSONAL_ID\n                        partyIdentifier:\n                          title: PartyIdentifier\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: Identifier of the Party.\n                          example: '16135551212'\n                        partySubIdOrType:\n                          title: PartySubIdOrType\n                          type: string\n                          minLength: 1\n                          maxLength: 128\n                          description: 'Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType.'\n                        fspId:\n                          title: FspId\n                          type: string\n                          minLength: 1\n                          maxLength: 32\n                          description: FSP identifier.\n                        extensionList:\n                          $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n                      required:\n                        - partyIdType\n                        - partyIdentifier\n                  description: Information about the Payer in the proposed financial transaction.\n                amountType:\n                  allOf:\n                    - title: AmountType\n                      type: string\n                      enum:\n                        - SEND\n                        - RECEIVE\n                      description: |-\n                        Below are the allowed values for the enumeration AmountType.\n                        - SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.\n                        - RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees.\n                      example: RECEIVE\n                  description: 'SEND for sendAmount, RECEIVE for receiveAmount.'\n                amount:\n                  allOf:\n                    - title: Money\n                      type: object\n                      description: Data model for the complex type Money.\n                      properties:\n                        currency:\n                          title: Currency\n                          description: 'The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.'\n                          type: string\n                          minLength: 3\n                          maxLength: 3\n                          enum:\n                            - AED\n                            - AFN\n                            - ALL\n                            - AMD\n                            - ANG\n                            - AOA\n                            - ARS\n                            - AUD\n                            - AWG\n                            - AZN\n                            - BAM\n                            - BBD\n                            - BDT\n                            - BGN\n                            - BHD\n                            - BIF\n                            - BMD\n                            - BND\n                            - BOB\n                            - BRL\n                            - BSD\n                            - BTN\n                            - BWP\n                            - BYN\n                            - BZD\n                            - CAD\n                            - CDF\n                            - CHF\n                            - CLP\n                            - CNY\n                            - COP\n                            - CRC\n                            - CUC\n                            - CUP\n                            - CVE\n                            - CZK\n                            - DJF\n                            - DKK\n                            - DOP\n                            - DZD\n                            - EGP\n                            - ERN\n                            - ETB\n                            - EUR\n                            - FJD\n                            - FKP\n                            - GBP\n                            - GEL\n                            - GGP\n                            - GHS\n                            - GIP\n                            - GMD\n                            - GNF\n                            - GTQ\n                            - GYD\n                            - HKD\n                            - HNL\n                            - HRK\n                            - HTG\n                            - HUF\n                            - IDR\n                            - ILS\n                            - IMP\n                            - INR\n                            - IQD\n                            - IRR\n                            - ISK\n                            - JEP\n                            - JMD\n                            - JOD\n                            - JPY\n                            - KES\n                            - KGS\n                            - KHR\n                            - KMF\n                            - KPW\n                            - KRW\n                            - KWD\n                            - KYD\n                            - KZT\n                            - LAK\n                            - LBP\n                            - LKR\n                            - LRD\n                            - LSL\n                            - LYD\n                            - MAD\n                            - MDL\n                            - MGA\n                            - MKD\n                            - MMK\n                            - MNT\n                            - MOP\n                            - MRO\n                            - MUR\n                            - MVR\n                            - MWK\n                            - MXN\n                            - MYR\n                            - MZN\n                            - NAD\n                            - NGN\n                            - NIO\n                            - NOK\n                            - NPR\n                            - NZD\n                            - OMR\n                            - PAB\n                            - PEN\n                            - PGK\n                            - PHP\n                            - PKR\n                            - PLN\n                            - PYG\n                            - QAR\n                            - RON\n                            - RSD\n                            - RUB\n                            - RWF\n                            - SAR\n                            - SBD\n                            - SCR\n                            - SDG\n                            - SEK\n                            - SGD\n                            - SHP\n                            - SLL\n                            - SOS\n                            - SPL\n                            - SRD\n                            - STD\n                            - SVC\n                            - SYP\n                            - SZL\n                            - THB\n                            - TJS\n                            - TMT\n                            - TND\n                            - TOP\n                            - TRY\n                            - TTD\n                            - TVD\n                            - TWD\n                            - TZS\n                            - UAH\n                            - UGX\n                            - USD\n                            - UYU\n                            - UZS\n                            - VEF\n                            - VND\n                            - VUV\n                            - WST\n                            - XAF\n                            - XCD\n                            - XDR\n                            - XOF\n                            - XPF\n                            - XTS\n                            - XXX\n                            - YER\n                            - ZAR\n                            - ZMW\n                            - ZWD\n                        amount:\n                          title: Amount\n                          type: string\n                          pattern: '^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$'\n                          description: 'The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed.'\n                          example: '123.45'\n                      required:\n                        - currency\n                        - amount\n                  description: Requested amount to be transferred from the Payer to Payee.\n                transactionType:\n                  allOf:\n                    - title: TransactionType\n                      type: object\n                      description: Data model for the complex type TransactionType.\n                      properties:\n                        scenario:\n                          title: TransactionScenario\n                          type: string\n                          enum:\n                            - DEPOSIT\n                            - WITHDRAWAL\n                            - TRANSFER\n                            - PAYMENT\n                            - REFUND\n                          description: |-\n                            Below are the allowed values for the enumeration.\n                            - DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.\n                            - WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.\n                            - TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.\n                            - PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.\n                            - REFUND - Used for performing a refund of transaction.\n                          example: DEPOSIT\n                        subScenario:\n                          title: TransactionSubScenario\n                          type: string\n                          pattern: '^[A-Z_]{1,32}$'\n                          description: 'Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type).'\n                          example: LOCALLY_DEFINED_SUBSCENARIO\n                        initiator:\n                          title: TransactionInitiator\n                          type: string\n                          enum:\n                            - PAYER\n                            - PAYEE\n                          description: |-\n                            Below are the allowed values for the enumeration.\n                            - PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.\n                            - PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device.\n                          example: PAYEE\n                        initiatorType:\n                          title: TransactionInitiatorType\n                          type: string\n                          enum:\n                            - CONSUMER\n                            - AGENT\n                            - BUSINESS\n                            - DEVICE\n                          description: |-\n                            Below are the allowed values for the enumeration.\n                            - CONSUMER - Consumer is the initiator of the transaction.\n                            - AGENT - Agent is the initiator of the transaction.\n                            - BUSINESS - Business is the initiator of the transaction.\n                            - DEVICE - Device is the initiator of the transaction.\n                          example: CONSUMER\n                        refundInfo:\n                          title: Refund\n                          type: object\n                          description: Data model for the complex type Refund.\n                          properties:\n                            originalTransactionId:\n                              $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n                            refundReason:\n                              title: RefundReason\n                              type: string\n                              minLength: 1\n                              maxLength: 128\n                              description: Reason for the refund.\n                              example: Free text indicating reason for the refund.\n                          required:\n                            - originalTransactionId\n                        balanceOfPayments:\n                          title: BalanceOfPayments\n                          type: string\n                          pattern: '^[1-9]\\d{2}$'\n                          description: '(BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed.'\n                          example: '123'\n                      required:\n                        - scenario\n                        - initiator\n                        - initiatorType\n                  description: Type of transaction.\n                note:\n                  type: string\n                  minLength: 1\n                  maxLength: 256\n                  description: A memo that will be attached to the transaction.\n                expiration:\n                  type: string\n                  description: |\n                    Date and time until when the transaction request is valid. It can be set to get a quick failure in case the peer FSP takes too long to respond.\n                  example: '2016-05-24T08:38:08.699-04:00'\n                extensionList:\n                  $ref: '#/paths/~1consentRequests/post/requestBody/content/application~1json/schema/properties/extensionList'\n              required:\n                - transactionRequestId\n                - payee\n                - payer\n                - amountType\n                - amount\n                - transactionType\n                - expiration\n            example:\n              transactionRequestId: 8d34f91d-d078-4077-8263-2c047876fcf6\n              sourceAccountId: dfspa.alice.1234\n              consentId: '111'\n              payee:\n                partyIdInfo:\n                  partyIdType: MSISDN\n                  partyIdentifier: +44 1234 5678\n                  fspId: dfspb\n              payer:\n                personalInfo:\n                  complexName:\n                    firstName: Alice\n                    lastName: K\n                partyIdInfo:\n                  partyIdType: MSISDN\n                  partyIdentifier: +44 8765 4321\n                  fspId: dfspa\n              amountType: SEND\n              amount:\n                amount: '100'\n                currency: USD\n              transactionType:\n                scenario: TRANSFER\n                initiator: PAYER\n                initiatorType: CONSUMER\n              expiration: '2020-07-15T22:17:28.985-01:00'\n      responses:\n        '202':\n          $ref: '#/paths/~1sendOTP/post/responses/202'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /login:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /login` is used to login to DFSP application by providing credentials.\n      summary: DFSP user login\n      operationId: DFSPLogin\n      parameters:\n        - name: Accept\n          in: header\n          required: true\n          schema:\n            type: string\n          description: The `Accept` header field indicates the version of the API the client would like the server to use.\n        - name: Content-Length\n          in: header\n          required: false\n          schema:\n            type: integer\n          description: |-\n            The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n\n            **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DFSPLoginRequest'\n            example:\n              userName: dfspa.user.name\n              password: dfspa.user.password\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n      responses:\n        '200':\n          description: OK\n        '400':\n          description: Bad Request\n          content:\n            application/json:\n              schema:\n                title: ErrorInformationResponse\n                type: object\n                description: Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.\n                properties:\n                  errorInformation:\n                    $ref: '#/paths/~1thirdpartyRequests~1transactions~1%7BID%7D~1error/put/requestBody/content/application~1json/schema/properties/errorInformation'\n          headers:\n            Content-Length:\n              required: false\n              schema:\n                type: integer\n              description: |-\n                The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n\n                **Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes).\n            Content-Type:\n              schema:\n                type: string\n              required: true\n              description: The `Content-Type` header indicates the specific version of the API used to send the payload body.\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '405':\n          description: Method Not Allowed\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '406':\n          description: Not Acceptable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '501':\n          description: Not Implemented\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n        '503':\n          description: Service Unavailable\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1login/post/responses/400/content/application~1json/schema'\n          headers:\n            Content-Length:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Length'\n            Content-Type:\n              $ref: '#/paths/~1login/post/responses/400/headers/Content-Type'\n  /authorize:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /authorize` is used to grant consent by a DFSP user.\n      summary: DFSP user authorization\n      operationId: DFSPAuthorize\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DFSPAuthorizeRequest'\n            example:\n              userName: dfspa.user.name\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /sendOTP:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /sendOTP` is used to send OTP to a DFSP user (most likely through SMS).\n      summary: DFSP Send OTP\n      operationId: SendOTP\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SendOTPRequest'\n            example:\n              userName: dfspa.user.name\n              consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n              message: '9876'\n      responses:\n        '202':\n          description: Accepted\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  /verifyOTPorSecret:\n    post:\n      tags:\n        - DFSPSim\n      description: The HTTP request `POST /verifyOTPorSecret` is used to verify OTP or Secret received from PISP.\n      summary: /verifyOTPorSecret\n      operationId: VerifyOTPorSecret\n      parameters:\n        - $ref: '#/paths/~1login/post/parameters/0'\n        - $ref: '#/paths/~1login/post/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      requestBody:\n        description: Perform verification of OTP or Secret\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VerifyOTPorSecretRequest'\n            examples:\n              sample1:\n                value:\n                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c3\n                  value: '1234'\n              sample2:\n                value:\n                  consentRequestId: 3b346cec-47b3-4def-b870-edb255aaf6c4\n                  value: xx auth secret xx\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/OTPorSecret/{ID}':\n    get:\n      tags:\n        - DFSPSim\n      description: 'The HTTP request `GET /OTPorSecret/{ID}` is used to get OTP or Secret from DFSP.'\n      summary: Get OTP or Secret for specified consentRequestId\n      operationId: GetOTPorSecret\n      parameters:\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n        - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n      responses:\n        '200':\n          description: Response containing details of the OTP or Secret\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/GetOTPorSecretResponse'\n              examples:\n                sample1:\n                  value:\n                    value: '1234'\n                sample2:\n                  value:\n                    value: xx auth secret xx\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n  '/store/consentRequests/{ID}':\n    parameters:\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/0'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/1'\n      - $ref: '#/paths/~1consents~1%7BID%7D/parameters/3'\n    get:\n      tags:\n        - DFSPSim\n      operationId: GetConsentRequest\n      summary: GetConsentRequest\n      description: |\n        The HTTP request `GET /store/consentRequests/{ID}` is used by DFSP to load a specified consentRequest.\n      responses:\n        '200':\n          description: Response containing consentRequest details\n          content:\n            application/json:\n              schema:\n                $ref: '#/paths/~1store~1consentRequests~1%7BID%7D/post/requestBody/content/application~1json/schema'\n              example:\n                scopes:\n                  - accountId: dfspa.username.1234\n                    actions:\n                      - accounts.transfer\n                      - accounts.getBalance\n                  - accountId: dfspa.username.5678\n                    actions:\n                      - accounts.transfer\n                      - accounts.getBalance\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\n    post:\n      tags:\n        - DFSPSim\n      operationId: StoreConsentRequest\n      summary: StoreConsentRequest\n      description: |\n        The HTTP request `POST /store/consentRequests/{ID}` is used by a DFSP to store consentRequests.\n      requestBody:\n        description: The consentRequest to store\n        required: true\n        content:\n          application/json:\n            schema:\n              title: Scope\n              type: object\n              description: |-\n                The Scope element contains an identifier defining, in the terms of a DFSP, an account on which access types can be requested or granted. It also defines the access types which are requested or granted.\n                https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#32121-scope\n              properties:\n                address:\n                  title: AccountAddress\n                  type: string\n                  description: |-\n                    The AccountAddress data type is a variable length string with a maximum size of 1023 characters and consists of:\n                    Alphanumeric characters, upper or lower case. (Addresses are case-sensitive so that they can contain data encoded in formats such as base64url.)\n                    - Underscore (_) - Tilde (~) - Hyphen (-) - Period (.) Addresses MUST NOT end in a period (.) character\n                    An entity providing accounts to parties (i.e. a participant) can provide any value for an AccountAddress that is meaningful to that entity. It does not need to provide an address that makes the account identifiable outside the entity's domain.\n                    IMPORTANT: The policy for defining addresses and the life-cycle of these is at the discretion of the address space owner (the payer DFSP in this case).\n                    https://github.com/mojaloop/documentation/blob/master/website/versioned_docs/v1.0.1/api/thirdparty/data-models.md#3212-accountaddress\n                  pattern: '^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$'\n                  minLength: 1\n                  maxLength: 1023\n                actions:\n                  type: array\n                  minItems: 1\n                  maxItems: 32\n                  items:\n                    title: ScopeAction\n                    type: string\n                    description: |\n                      The ScopeAction element contains an access type which a PISP can request\n                      from a DFSP, or which a DFSP can grant to a PISP.\n                      It must be a member of the appropriate enumeration.\n\n                      - ACCOUNTS_GET_BALANCE: PISP can request a balance for the linked account\n                      - ACCOUNTS_TRANSFER: PISP can request a transfer of funds from the linked account in the DFSP\n                      - ACCOUNTS_STATEMENT: PISP can request a statement of individual transactions on a user's account\n                    enum:\n                      - ACCOUNTS_GET_BALANCE\n                      - ACCOUNTS_TRANSFER\n                      - ACCOUNTS_STATEMENT\n              required:\n                - address\n                - actions\n            example:\n              scopes:\n                - accountId: dfspa.username.1234\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n                - accountId: dfspa.username.5678\n                  actions:\n                    - accounts.transfer\n                    - accounts.getBalance\n      responses:\n        '200':\n          $ref: '#/paths/~1login/post/responses/200'\n        '400':\n          $ref: '#/paths/~1login/post/responses/400'\n        '401':\n          $ref: '#/paths/~1login/post/responses/401'\n        '403':\n          $ref: '#/paths/~1login/post/responses/403'\n        '404':\n          $ref: '#/paths/~1login/post/responses/404'\n        '405':\n          $ref: '#/paths/~1login/post/responses/405'\n        '406':\n          $ref: '#/paths/~1login/post/responses/406'\n        '501':\n          $ref: '#/paths/~1login/post/responses/501'\n        '503':\n          $ref: '#/paths/~1login/post/responses/503'\ncomponents:\n  schemas:\n    Counter:\n      allOf:\n        - title: Integer\n          type: string\n          pattern: '^[1-9]\\d*$'\n          description: The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits.\n      description: Sequential counter used for cloning detection. Present only for U2F authentication.\n    U2FPIN:\n      title: U2FPIN\n      type: string\n      pattern: '^\\S{1,64}$'\n      minLength: 1\n      maxLength: 64\n      description: |\n        U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.\n    U2FPinValue:\n      title: U2FPinValue\n      type: object\n      description: |\n        U2F challenge-response, where payer FSP verifies if the response provided by end-user device matches the previously registered key.\n      properties:\n        pinValue:\n          allOf:\n            - $ref: '#/components/schemas/U2FPIN'\n          description: U2F challenge-response.\n        counter:\n          allOf:\n            - $ref: '#/components/schemas/Counter'\n          description: Sequential counter used for cloning detection. Present only for U2F authentication.\n    SecretValue:\n      title: SecretValue\n      type: string\n      minLength: 1\n      maxLength: 128\n    UserName:\n      title: UserName\n      type: string\n      minLength: 1\n      maxLength: 25\n    Password:\n      title: Password\n      type: string\n      minLength: 1\n      maxLength: 25\n    Message:\n      title: Message\n      type: string\n      description: OTP value or error message\n    DFSPLoginRequest:\n      title: DFSPLoginRequest\n      type: object\n      description: POST /login request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        password:\n          $ref: '#/components/schemas/Password'\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n      required:\n        - userName\n        - password\n        - consentRequestId\n    DFSPAuthorizeRequest:\n      title: DFSPAuthorizeRequest\n      type: object\n      description: POST /authorize request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n      required:\n        - userName\n        - consentRequestId\n    SendOTPRequest:\n      title: SendOTPRequest\n      type: object\n      description: POST /sendOTP request\n      properties:\n        userName:\n          $ref: '#/components/schemas/UserName'\n        consentRequestId:\n          title: CorrelationId\n          type: string\n          pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'\n          description: 'Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).'\n          example: b51ec534-ee48-4575-b6a9-ead2955b8069\n        message:\n          $ref: '#/components/schemas/Message'\n      required:\n        - userName\n        - consentRequestId\n        - message\n    VerifyOTPorSecretRequest:\n      title: VerifyOTPorSecretRequest\n      type: object\n      description: POST /verifyOTPorSecret request\n      properties:\n        consentRequestId:\n          $ref: '#/components/schemas/SendOTPRequest/properties/consentRequestId'\n        value:\n          oneOf:\n            - $ref: '#/components/schemas/GetOTPorSecretResponse/properties/value/oneOf/0'\n            - $ref: '#/components/schemas/SecretValue'\n          description: Contains the OTP or Secret value.\n      required:\n        - consentRequestId\n        - value\n    GetOTPorSecretResponse:\n      title: GetOTPorSecretResponse\n      type: object\n      description: 'Get /OTPorSecret/{ID} response'\n      properties:\n        value:\n          oneOf:\n            - title: OtpValue\n              type: string\n              pattern: '^\\d{3,10}$'\n              description: 'The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed.'\n            - $ref: '#/components/schemas/SecretValue'\n          description: Contains the OTP or Secret value.\n      required:\n        - value\n",
			"canonicalURL": "/github.com/mojaloop/pisp-project@df235939f38bf9f53c4d4bdc381c515fb770f132/-/blob/src/interface/ttk-thirdparty-api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/mojaloop/pisp-project/blob/df235939f38bf9f53c4d4bdc381c515fb770f132/src/interface/ttk-thirdparty-api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: path \"/consents\": post: operation \"CreateConsent\": requestBody: parse content: application/json: schema: parse schema: parse schema: property \"credential\": parse schema: parse schema: parse schema: property \"genericPayload\": parse schema: property \"signature\": parse schema: at 1:30808: find schema: resolve: can't find value for \"paths/~1consents~1{ID}/put/requestBody/content/application~1json/schema/oneOf/1/properties/credential/properties/genericPayload/properties/publicKey\""
}