{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/opentdf/opentdf"
		},
		"file": {
			"name": "openapi.yaml",
			"size": 0,
			"path": "examples/abacship-app/backend_server/openapi.yaml",
			"byteSize": 8737,
			"content": "openapi: 3.0.2\ninfo:\n  title: FastAPI\n  version: 0.1.0\nservers:\n  - url: ''\npaths:\n  /status:\n    get:\n      summary: Get Status\n      description: |-\n        Returns the current game status\n        (See Status enum -- possibly restructuring)\n      operationId: get_status_status_get\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                status: 2\n  /previous:\n    get:\n      summary: Get Last Turn\n      description: Return information about the last turn taken\n      operationId: get_last_turn_previous_get\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                player: player1\n                row: 1\n                col: 2\n  /grant:\n    post:\n      summary: Grant Attribute\n      description: |-\n        Accepts Player information of player making POST request\n        Grants an attribute to opposing player\n        Returns game status\n      operationId: grant_attribute_grant_post\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Player'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                status: 2\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /random:\n    get:\n      summary: Get Random Board\n      description: Get a randomized board\n      operationId: get_random_board_random_get\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                board:\n                  - - ocean\n                    - battleship\n                    - ocean\n                    - ...\n                  - - ocean\n                    - battleship\n                    - ocean\n                    - ...\n                  - - ocean\n                    - battleship\n                    - ocean\n                    - ...\n                  - - ...\n  /board:\n    get:\n      summary: Get Board\n      description: |-\n        Returns 2D array board representation for each player (with encrypted strings, base64-encoded)\n        (or nothing if the board is not set yet)\n      operationId: get_board_board_get\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                player1:\n                  - - encryptedstring00\n                    - encryptedstring01\n                    - ...\n                  - - encryptedstring10\n                    - encryptedstring11\n                    - ...\n                  - - ...\n                  - - encryptedstring90\n                    - encryptedstring91\n                    - ...\n                player2:\n                  - - encryptedstring00\n                    - encryptedstring01\n                    - ...\n                  - - encryptedstring10\n                    - encryptedstring11\n                    - ...\n                  - - ...\n                  - - encryptedstring90\n                    - encryptedstring91\n                    - ...\n    post:\n      summary: Post Board\n      description: |-\n        submit refresh token and 2D array representation of board (unencrypted)\n        returns player information including assigned name and new refresh token,\n        and the full board\n\n        (will not return until both player submit their board -- tentative design choice)\n\n        performs board verification, assigns attributes to users,\n        encryptes strings with tile attribtues\n\n        (im not sure if I will need both the access and refresh token \n        -- i will need the username (ex user1) in order to assign attributes, which i can\n        get from the access_token, or can just change it to pass in the username instead)\n      operationId: post_board_board_post\n      parameters:\n        - required: true\n          schema:\n            title: Access Token\n            type: string\n          name: access_token\n          in: query\n        - required: true\n          schema:\n            title: Refresh Token\n            type: string\n          name: refresh_token\n          in: query\n        - required: true\n          schema:\n            title: Player Name\n            type: string\n          name: player_name\n          in: query\n      requestBody:\n        content:\n          application/json:\n            schema:\n              title: Board\n              maxItems: 10\n              minItems: 10\n              type: array\n              items:\n                maxItems: 10\n                minItems: 10\n                type: array\n                items:\n                  type: string\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                player_info:\n                  name: player1\n                  refresh_token: the refresh token ...\n                  access_token: the access token ...\n                status: 2\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /check/square:\n    post:\n      summary: Check Square\n      description: |-\n        player: the player making the request\n        row: the row of the square to check on opponents board\n        col: the col of the square to check on opponents board\n\n        request attribute at that square from opponent\n        assign attribute to player\n        get updated tokens\n\n        returns Player with updated refresh and access token\n        returns updated board\n        returns new status\n      operationId: check_square_check_square_post\n      parameters:\n        - required: true\n          schema:\n            title: Row\n            type: integer\n          name: row\n          in: query\n        - required: true\n          schema:\n            title: Col\n            type: integer\n          name: col\n          in: query\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Player'\n        required: true\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                player_info:\n                  name: player1\n                  refresh_token: the refresh token ...\n                  access_token: the access token ...\n                encrypted_string: encrypted_stringXY\n                status: 2\n        '422':\n          description: Validation Error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/HTTPValidationError'\n  /reset:\n    put:\n      summary: Reset Game\n      description: |-\n        Resets game\n        Removes all entitlements from users\n      operationId: reset_game_reset_put\n      responses:\n        '200':\n          description: Successful Response\n          content:\n            application/json:\n              schema: {}\n              example:\n                status: 1\ncomponents:\n  schemas:\n    HTTPValidationError:\n      title: HTTPValidationError\n      type: object\n      properties:\n        detail:\n          title: Detail\n          type: array\n          items:\n            $ref: '#/components/schemas/ValidationError'\n    Player:\n      title: Player\n      required:\n        - name\n      type: object\n      properties:\n        name:\n          title: Name\n          enum:\n            - player1\n            - player2\n          type: string\n        refresh_token:\n          title: Refresh Token\n          type: string\n        access_token:\n          title: Access Token\n          type: string\n        username:\n          title: Username\n          type: string\n    ValidationError:\n      title: ValidationError\n      required:\n        - loc\n        - msg\n        - type\n      type: object\n      properties:\n        loc:\n          title: Location\n          type: array\n          items:\n            type: string\n        msg:\n          title: Message\n          type: string\n        type:\n          title: Error Type\n          type: string\n",
			"canonicalURL": "/github.com/opentdf/opentdf@258fee57a999e6dc9c54c9a92bd75c91121ed1ab/-/blob/examples/abacship-app/backend_server/openapi.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/opentdf/opentdf/blob/258fee57a999e6dc9c54c9a92bd75c91121ed1ab/examples/abacship-app/backend_server/openapi.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse servers: at 1:6154: server URL must not be empty"
}