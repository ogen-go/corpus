{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/influxdata/openapi"
		},
		"file": {
			"name": "oss.yml",
			"size": 0,
			"path": "src/oss.yml",
			"byteSize": 12423,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: InfluxDB OSS API Service\n  version: 2.0.0\n  description: |\n    The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint.\n  license:\n    name: MIT\n    url: 'https://opensource.org/licenses/MIT'\nservers:\n  - url: /api/v2\n#REF_OSS_TAGS\n#REF_OSS_TAG_GROUPS\npaths:\n#REF_COMMON_PATHS\n  /debug/pprof/all:\n    $ref: \"./oss/paths/debug_pprof_all.yml\"\n  /debug/pprof/allocs:\n    $ref: \"./oss/paths/debug_pprof_allocs.yml\"\n  /debug/pprof/block:\n    $ref: \"./oss/paths/debug_pprof_block.yml\"\n  /debug/pprof/cmdline:\n    $ref: \"./oss/paths/debug_pprof_cmdline.yml\"\n  /debug/pprof/goroutine:\n    $ref: \"./oss/paths/debug_pprof_goroutine.yml\"\n  /debug/pprof/heap:\n    $ref: \"./oss/paths/debug_pprof_heap.yml\"\n  /debug/pprof/mutex:\n    $ref: \"./oss/paths/debug_pprof_mutex.yml\"\n  /debug/pprof/profile:\n    $ref: \"./oss/paths/debug_pprof_profile.yml\"\n  /debug/pprof/threadcreate:\n    $ref: \"./oss/paths/debug_pprof_threadcreate.yml\"\n  /debug/pprof/trace:\n    $ref: \"./oss/paths/debug_pprof_trace.yml\"\n  /health:\n    $ref: \"./oss/paths/health.yml\"\n  /metrics:\n    $ref: \"./oss/paths/metrics.yml\"\n  /ready:\n    $ref: \"./oss/paths/ready.yml\"\n  /users:\n    $ref: \"./common/paths/users.yml\"\n  \"/users/{userID}\":\n    $ref: \"./common/paths/users_userID.yml\"\n  /setup:\n    $ref: \"./common/paths/setup.yml\"\n  /variables:\n    $ref: \"./common/paths/variables.yml\"\n  \"/variables/{variableID}\":\n    $ref: \"./common/paths/variables_variableID.yml\"\n  /sources:\n    $ref: \"./common/paths/sources.yml\"\n  /sources/{sourceID}:\n    $ref: \"./common/paths/sources_sourceID.yml\"\n  /sources/{sourceID}/health:\n    $ref: \"./common/paths/sources_sourceID_health.yml\"\n  /sources/{sourceID}/buckets:\n    $ref: \"./common/paths/sources_sourceID_buckets.yml\"\n  /scrapers:\n    $ref: \"./common/paths/scrapers.yml\"\n  \"/scrapers/{scraperTargetID}\":\n    $ref: \"./common/paths/scrapers_scraperTargetID.yml\"\n  \"/scrapers/{scraperTargetID}/labels\":\n    $ref: \"./common/paths/scrapers_scraperTargetID_labels.yml\"\n  \"/scrapers/{scraperTargetID}/labels/{labelID}\":\n    $ref: \"./common/paths/scrapers_scraperTargetID_labels_labelID.yml\"\n  \"/scrapers/{scraperTargetID}/members\":\n    $ref: \"./common/paths/scrapers_scraperTargetID_members.yml\"\n  \"/scrapers/{scraperTargetID}/members/{userID}\":\n    $ref: \"./common/paths/scrapers_scraperTargetID_members_userID.yml\"\n  \"/scrapers/{scraperTargetID}/owners\":\n    $ref: \"./common/paths/scrapers_scraperTargetID_owners.yml\"\n  \"/scrapers/{scraperTargetID}/owners/{userID}\":\n    $ref: \"./common/paths/scrapers_scraperTargetID_owners_userID.yml\"\n  \"/backup/kv\":\n    $ref: \"./oss/paths/backup_kv.yml\"\n  \"/backup/metadata\":\n    $ref: \"./oss/paths/backup_metadata.yml\"\n  \"/backup/shards/{shardID}\":\n    $ref: \"./oss/paths/backup_shards_shardID.yml\"\n  \"/restore/kv\":\n    $ref: \"./oss/paths/restore_kv.yml\"\n  \"/restore/sql\":\n    $ref: \"./oss/paths/restore_sql.yml\"\n  \"/restore/bucket/{bucketID}\":\n    $ref: \"./oss/paths/restore_bucket_bucketID.yml\"\n  \"/restore/bucketMetadata\":\n    $ref: \"./oss/paths/restore_bucketMetadata.yml\"\n  \"/restore/shards/{shardID}\":\n    $ref: \"./oss/paths/restore_shards_shardID.yml\"\n  \"/config\":\n    $ref: \"./oss/paths/config.yml\"\n  /remotes:\n    $ref: \"./oss/paths/remotes.yml\"\n  /remotes/{remoteID}:\n    $ref: \"./oss/paths/remotes_remoteID.yml\"\n  /replications:\n    $ref: \"./oss/paths/replications.yml\"\n  /replications/{replicationID}:\n    $ref: \"./oss/paths/replications_replicationID.yml\"\n  /replications/{replicationID}/validate:\n    $ref: \"./oss/paths/replications_replicationID_validate.yml\"\n  /dashboards:\n    $ref: \"./common/paths/dashboards.yml\"\n  /tasks:\n    $ref: \"./common/paths/tasks.yml\"\n  /tasks/{taskID}:\n    $ref: \"./common/paths/tasks_taskID.yml\"\ncomponents:\n  parameters:\n  #REF_COMMON_PARAMETERS\n  schemas:\n  #REF_COMMON_SCHEMAS\n    User:\n      $ref: \"./common/schemas/User.yml\"\n    Users:\n      $ref: \"./common/schemas/Users.yml\"\n    OnboardingRequest:\n      $ref: \"./common/schemas/OnboardingRequest.yml\"\n    OnboardingResponse:\n      $ref: \"./common/schemas/OnboardingResponse.yml\"\n    Variable:\n      $ref: \"./common/schemas/Variable.yml\"\n    Variables:\n      $ref: \"./common/schemas/Variables.yml\"\n    Source:\n      $ref: \"./common/schemas/Source.yml\"\n    Sources:\n      $ref: \"./common/schemas/Sources.yml\"\n    ScraperTargetRequest:\n      $ref: \"./common/schemas/ScraperTargetRequest.yml\"\n    ScraperTargetResponse:\n      $ref: \"./common/schemas/ScraperTargetResponse.yml\"\n    ScraperTargetResponses:\n      $ref: \"./common/schemas/ScraperTargetResponses.yml\"\n    MetadataBackup:\n      $ref: \"./oss/schemas/MetadataBackup.yml\"\n    BucketMetadataManifests:\n      $ref: \"./oss/schemas/BucketMetadataManifests.yml\"\n    BucketMetadataManifest:\n      $ref: \"./oss/schemas/BucketMetadataManifest.yml\"\n    RetentionPolicyManifests:\n      $ref: \"./oss/schemas/RetentionPolicyManifests.yml\"\n    RetentionPolicyManifest:\n      $ref: \"./oss/schemas/RetentionPolicyManifest.yml\"\n    ShardGroupManifests:\n      $ref: \"./oss/schemas/ShardGroupManifests.yml\"\n    ShardGroupManifest:\n      $ref: \"./oss/schemas/ShardGroupManifest.yml\"\n    ShardManifests:\n      $ref: \"./oss/schemas/ShardManifests.yml\"\n    ShardManifest:\n      $ref: \"./oss/schemas/ShardManifest.yml\"\n    ShardOwners:\n      $ref: \"./oss/schemas/ShardOwners.yml\"\n    ShardOwner:\n      $ref: \"./oss/schemas/ShardOwner.yml\"\n    SubscriptionManifests:\n      $ref: \"./oss/schemas/SubscriptionManifests.yml\"\n    SubscriptionManifest:\n      $ref: \"./oss/schemas/SubscriptionManifest.yml\"\n    RestoredBucketMappings:\n      $ref: \"./oss/schemas/RestoredBucketMappings.yml\"\n    BucketShardMappings:\n      $ref: \"./oss/schemas/BucketShardMappings.yml\"\n    BucketShardMapping:\n      $ref: \"./oss/schemas/BucketShardMapping.yml\"\n    Config:\n      $ref: \"./oss/schemas/Config.yml\"\n    RemoteConnection:\n      $ref: \"./oss/schemas/RemoteConnection.yml\"\n    RemoteConnections:\n      $ref: \"./oss/schemas/RemoteConnections.yml\"\n    RemoteConnectionCreationRequest:\n      $ref: \"./oss/schemas/RemoteConnectionCreationRequest.yml\"\n    RemoteConnectionUpdateRequest:\n      $ref: \"./oss/schemas/RemoteConnectionUpdateRequest.yml\"\n    Replication:\n      $ref: \"./oss/schemas/Replication.yml\"\n    Replications:\n      $ref: \"./oss/schemas/Replications.yml\"\n    ReplicationCreationRequest:\n      $ref: \"./oss/schemas/ReplicationCreationRequest.yml\"\n    ReplicationUpdateRequest:\n      $ref: \"./oss/schemas/ReplicationUpdateRequest.yml\"\n    Tasks:\n      $ref: \"./common/schemas/Tasks.yml\"\n    Task:\n      $ref: \"./common/schemas/Task.yml\"\n    TaskCreateRequest:\n      $ref: \"./common/schemas/TaskCreateRequest.yml\"\n    TaskUpdateRequest:\n      $ref: \"./common/schemas/TaskUpdateRequest.yml\"\n  responses:\n    #REF_COMMON_RESPONSES\n  examples:\n    AuthorizationPostRequest:\n      $ref: \"./common/requestBody/examples/AuthorizationRequestExamples.yml#/AuthorizationPostRequest\"\n    AuthorizationWithResourcePostRequest:\n      $ref: \"./common/requestBody/examples/AuthorizationRequestExamples.yml#/AuthorizationWithResourcePostRequest\"\n    AuthorizationWithUserPostRequest:\n      $ref: \"./common/requestBody/examples/AuthorizationRequestExamples.yml#/AuthorizationWithUserPostRequest\"\n    TaskWithFluxRequest:\n      $ref: \"./common/requestBody/examples/TaskRequestExamples.yml#/TaskWithFluxRequest\"\n  securitySchemes:\n    # TODO: Uncomment when Bearer auth is also available in Cloud:\n    # BearerAuthentication:\n    #   type: http\n    #   scheme: \"bearer\"\n    #   description: |\n    #     Use the [Bearer authentication](#section/Authentication/BearerAuthentication)\n    #     scheme to authenticate to the InfluxDB API.\n    #\n    #     In your API requests, send an `Authorization` header.\n    #     For the header value, provide the word `Bearer` followed by a space and an InfluxDB API token.\n    #\n    #     ### Syntax\n    #\n    #     `Authorization: Bearer YOUR_INFLUX_API_TOKEN`\n    #\n    #     For more information and examples, see the following:\n    #\n    #     - [`/authorizations`(#tag/Authorizations-(API-tokens)) endpoints]\n    #     - [Authorize API requests]({{% INFLUXDB_DOCS_URL %}}/api-guide/api_intro/#authentication)\n    #     - [Manage API tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/)\n    TokenAuthentication:\n      type: apiKey\n      name: Authorization\n      in: header\n      description: |\n        Use the [Token authentication](#section/Authentication/TokenAuthentication)\n        scheme to authenticate to the InfluxDB API.\n\n        In your API requests, send an `Authorization` header.\n        For the header value, provide the word `Token` followed by a space and an InfluxDB API token.\n        The word `Token` is case-sensitive.\n\n        ### Syntax\n\n        `Authorization: Token INFLUX_API_TOKEN`\n\n        ### Example\n\n        #### Use Token authentication with cURL\n\n        The following example shows how to use cURL to send an API request that uses Token authentication:\n\n        ```sh\n        curl --request GET \"INFLUX_URL/api/v2/buckets\" \\\n            --header \"Authorization: Token INFLUX_API_TOKEN\"\n        ```\n\n        Replace the following:\n\n          - *`INFLUX_URL`*: your InfluxDB URL\n          - *`INFLUX_API_TOKEN`*: your [InfluxDB API token]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token)\n\n        ### Related endpoints\n\n        - [`/authorizations` endpoints](#tag/Authorizations-(API-tokens))\n\n        ### Related guides\n\n        - [Authorize API requests]({{% INFLUXDB_DOCS_URL %}}/api-guide/api_intro/#authentication)\n        - [Manage API tokens]({{% INFLUXDB_DOCS_URL %}}/security/tokens/)\n    BasicAuthentication:\n      type: http\n      scheme: basic\n      description: |\n        ### Basic authentication scheme\n\n        Use the HTTP Basic authentication scheme for InfluxDB `/api/v2` API operations that support it:\n\n        ### Syntax\n\n        `Authorization: Basic BASE64_ENCODED_CREDENTIALS`\n\n        To construct the `BASE64_ENCODED_CREDENTIALS`, combine the username and\n        the password with a colon (`USERNAME:PASSWORD`), and then encode the\n        resulting string in [base64](https://developer.mozilla.org/en-US/docs/Glossary/Base64).\n        Many HTTP clients encode the credentials for you before sending the\n        request.\n\n        _**Warning**: Base64-encoding can easily be reversed to obtain the original\n        username and password. It is used to keep the data intact and does not provide\n        security. You should always use HTTPS when authenticating or sending a request with\n        sensitive information._\n\n        ### Examples\n\n        In the examples, replace the following:\n\n        - **`USERNAME`**: InfluxDB username\n        - **`PASSWORD`**: InfluxDB [API token]({{% INFLUXDB_DOCS_URL %}}/reference/glossary/#token)\n        - **`INFLUX_URL`**: your InfluxDB URL\n\n        #### Encode credentials with cURL\n\n        The following example shows how to use cURL to send an API request that uses Basic authentication.\n        With the `--user` option, cURL encodes the credentials and passes them\n        in the `Authorization: Basic` header.\n\n        ```sh\n        curl --get \"INFLUX_URL/api/v2/signin\"\n            --user \"USERNAME\":\"PASSWORD\"\n        ```\n\n        #### Encode credentials with Flux\n\n        The Flux [`http.basicAuth()` function](https://docs.influxdata.com/flux/v0.x/stdlib/http/basicauth/) returns a Base64-encoded\n        basic authentication header using a specified username and password combination.\n\n        #### Encode credentials with JavaScript\n\n        The following example shows how to use the JavaScript `btoa()` function\n        to create a Base64-encoded string:\n\n        ```js\n        btoa('USERNAME:PASSWORD')\n        ```\n\n        The output is the following:\n\n        ```js\n        'VVNFUk5BTUU6UEFTU1dPUkQ='\n        ```\n\n        Once you have the Base64-encoded credentials, you can pass them in the\n        `Authorization` header--for example:\n\n        ```sh\n        curl --get \"INFLUX_URL/api/v2/signin\"\n            --header \"Authorization: Basic VVNFUk5BTUU6UEFTU1dPUkQ=\"\n        ```\n\n        To learn more about HTTP authentication, see\n        [Mozilla Developer Network (MDN) Web Docs, HTTP authentication](https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication)._\nsecurity:\n  - TokenAuthentication: []\n  # TODO: Uncomment when Bearer auth is also available in Cloud:\n  # - BearerAuthentication: []\n",
			"canonicalURL": "/github.com/influxdata/openapi@00a445641ae596ea69e9cb74fd774bf92b9a2175/-/blob/src/oss.yml",
			"externalURLs": [
				{
					"url": "https://github.com/influxdata/openapi/blob/00a445641ae596ea69e9cb74fd774bf92b9a2175/src/oss.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/dashboards\": post: operation \"PostDashboards\": responses: 201: content: application/json: schema: parse schema: oneOf: $ref: resolve \"../schemas/DashboardWithViewProperties.yml\": allOf: property \"cells\": $ref: resolve \"./CellsWithViewProperties.yml\": items: $ref: resolve \"./CellWithViewProperties.yml\": allOf: property \"properties\": $ref: resolve \"./ViewProperties.yml\": oneOf: $ref: resolve \"./LinePlusSingleStatProperties.yml\": property \"hoverDimension\": at https://raw.githubusercontent.com/influxdata/openapi/00a445641ae596ea69e9cb74fd774bf92b9a2175/src/common/schemas/LinePlusSingleStatProperties.yml:75:13: parse enum values: parse value \"true\": expected type \"string\", got \"bool\""
}