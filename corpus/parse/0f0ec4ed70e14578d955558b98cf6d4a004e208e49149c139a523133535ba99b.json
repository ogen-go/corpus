{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/LUMASERV/api-docs"
		},
		"file": {
			"name": "core-api.v1.0.yaml",
			"size": 0,
			"path": "spec/core-api.v1.0.yaml",
			"byteSize": 245968,
			"content": "openapi: 3.0.0\ninfo:\n  title: LUMASERV Core API\n  version: '1.0'\n  contact:\n    name: LUMASERV Support Team\n    email: support@lumaserv.com\n    url: 'https://lumaserv.com'\n  description: LUMASERV Core API\nservers:\n  - url: 'https://api.lumaserv.com'\n    description: Live\ntags:\n  - name: address\n    description: IP Address and Subnet Management\n  - name: dns\n    description: DNS Management\n  - name: domains\n    description: Domain Management\n  - name: general\n    description: General Endpoints\n  - name: label\n    description: Label Endpoints\n  - name: plesk-licenses\n    description: Plesk License Management\n  - name: pricing\n    description: Pricing Endpoints\n  - name: s3-storage\n    description: S3 Object Storage Management\n  - name: server\n    description: Compute Service Management\n  - name: sshkeys\n    description: SSH-Key Management\n  - name: ssl\n    description: SSL Management\npaths:\n  /storage/s3/buckets:\n    get:\n      summary: getS3Buckets\n      tags:\n        - s3-storage\n      responses:\n        '200':\n          $ref: '#/components/responses/S3BucketListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getS3Buckets\n      description: Returns all s3 buckets\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createS3Bucket\n      operationId: createS3Bucket\n      responses:\n        '201':\n          $ref: '#/components/responses/S3BucketSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new s3 bucket\n      tags:\n        - s3-storage\n      requestBody:\n        $ref: '#/components/requestBodies/S3BucketCreateRequest'\n  '/storage/s3/buckets/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: S3 Bucket ID\n    get:\n      summary: getS3Bucket\n      tags:\n        - s3-storage\n      responses:\n        '200':\n          $ref: '#/components/responses/S3BucketSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getS3Bucket\n      description: Returns a single s3 bucket\n    delete:\n      summary: deleteS3Bucket\n      operationId: deleteS3Bucket\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - s3-storage\n      description: Deletes a s3 bucket\n  /storage/s3/access-keys:\n    get:\n      summary: getS3AccessKeys\n      tags:\n        - s3-storage\n      responses:\n        '200':\n          $ref: '#/components/responses/S3AccessKeyListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getS3AccessKeys\n      description: Returns all access keys\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createS3AccessKey\n      operationId: createS3AccessKey\n      responses:\n        '201':\n          $ref: '#/components/responses/S3AccessKeySingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - s3-storage\n      description: Creates a s3 access key\n      requestBody:\n        $ref: '#/components/requestBodies/S3AccessKeyCreateRequest'\n  '/storage/s3/access-keys/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: S3 Access Key ID\n    get:\n      summary: getS3AccessKey\n      tags:\n        - s3-storage\n      responses:\n        '200':\n          $ref: '#/components/responses/S3AccessKeySingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getS3AccessKey\n      description: Returns a single s3 access key\n    delete:\n      summary: deleteS3AccessKey\n      operationId: deleteS3AccessKey\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - s3-storage\n      description: Deletes a s3 access key\n  /licenses/plesk:\n    get:\n      summary: getPleskLicenses\n      tags:\n        - plesk-licenses\n      operationId: getPleskLicenses\n      description: Returns all plesk licenses\n      responses:\n        '200':\n          $ref: '#/components/responses/PleskLicenseListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[type_id]'\n          description: Plesk License Type ID\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createPleskLicense\n      operationId: createPleskLicense\n      responses:\n        '201':\n          $ref: '#/components/responses/PleskLicenseSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - plesk-licenses\n      description: Orders a new plesk license\n      requestBody:\n        $ref: '#/components/requestBodies/PleskLicenseCreateRequest'\n  '/licenses/plesk/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Plesk License ID\n    get:\n      summary: getPleskLicense\n      tags:\n        - plesk-licenses\n      responses:\n        '200':\n          $ref: '#/components/responses/PleskLicenseSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getPleskLicense\n      description: Returns a single plesk license\n    put:\n      summary: updatePleskLicense\n      operationId: updatePleskLicense\n      responses:\n        '200':\n          $ref: '#/components/responses/PleskLicenseSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - plesk-licenses\n      description: Updates a plesk license\n      requestBody:\n        $ref: '#/components/requestBodies/PleskLicenseUpdateRequest'\n  /licenses/plesk-types:\n    get:\n      summary: getPleskLicenseTypes\n      tags:\n        - plesk-licenses\n      responses:\n        '200':\n          $ref: '#/components/responses/PleskLicenseTypeListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getPleskLicenseTypes\n      description: Return all plesk license types\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n  '/licenses/plesk-types/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Plesk License Type ID\n    get:\n      summary: getPleskLicenseType\n      tags:\n        - plesk-licenses\n      responses:\n        '200':\n          $ref: '#/components/responses/PleskLicenseTypeSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getPleskLicenseType\n      description: Returns a single plesk license type\n  '/storage/s3/access-keys/{access_key_id}/grants':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: access_key_id\n        in: path\n        required: true\n        description: S3 Access Key ID\n    get:\n      summary: getS3AccessKeyGrants\n      tags:\n        - s3-storage\n      responses:\n        '200':\n          $ref: '#/components/responses/S3AccessGrantListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getS3AccessKeyGrants\n      description: Returns all grants for the s3 access key\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createS3AccessKeyGrant\n      operationId: createS3AccessKeyGrant\n      responses:\n        '201':\n          $ref: '#/components/responses/S3AccessGrantSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - s3-storage\n      description: Creates a new grant for the s3 access key\n      requestBody:\n        $ref: '#/components/requestBodies/S3AccessGrantCreateRequest'\n  '/storage/s3/access-keys/{access_key_id}/grants/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: access_key_id\n        in: path\n        required: true\n        description: S3 Access Key ID\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: S3 Access Grant ID\n    delete:\n      summary: deleteS3AccessKeyGrant\n      operationId: deleteS3AccessKeyGrant\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes a grant of a s3 access key\n      tags:\n        - s3-storage\n  /domain-handles:\n    get:\n      summary: getDomainHandles\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainHandleListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDomainHandles\n      description: Returns all domain handles\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createDomainHandle\n      operationId: createDomainHandle\n      responses:\n        '201':\n          $ref: '#/components/responses/DomainHandleSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Creates a domain handle\n      requestBody:\n        $ref: '#/components/requestBodies/DomainHandleCreateRequest'\n  '/domain-handles/{code}':\n    parameters:\n      - schema:\n          type: string\n        description: Handle Code\n        name: code\n        in: path\n        required: true\n    get:\n      summary: getDomainHandle\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainHandleSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDomainHandle\n      description: Returns a single domain handle\n    put:\n      summary: updateDomainHandle\n      operationId: updateDomainHandle\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainHandleSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Updates the domain handle\n      requestBody:\n        $ref: '#/components/requestBodies/DomainHandleUpdateRequest'\n    delete:\n      summary: deleteDomainHandle\n      operationId: deleteDomainHandle\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Deletes the domain handle\n  /domains:\n    get:\n      summary: getDomains\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDomains\n      description: Returns all domains\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[owner_handle_code]'\n          description: Handle Code of Owner Handle\n        - schema:\n            type: string\n          in: query\n          name: 'filter[admin_handle_code]'\n          description: Handle Code of Admin Handle\n        - schema:\n            type: string\n          in: query\n          name: 'filter[tech_handle_code]'\n          description: Handle Code of Tech Handle\n        - schema:\n            type: string\n          in: query\n          name: 'filter[zone_handle_code]'\n          description: Handle Code of Zone Handle\n        - schema:\n            type: string\n          in: query\n          name: 'filter[tld]'\n          description: TLD\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createDomain\n      operationId: createDomain\n      responses:\n        '201':\n          $ref: '#/components/responses/DomainSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Registers or transfer a domain\n      requestBody:\n        $ref: '#/components/requestBodies/DomainCreateRequest'\n  '/domains/{name}':\n    parameters:\n      - schema:\n          type: string\n          format: hostname\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    get:\n      summary: getDomain\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDomain\n      description: Returns a single domain\n    put:\n      summary: updateDomain\n      operationId: updateDomain\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Updates a domain\n      requestBody:\n        $ref: '#/components/requestBodies/DomainUpdateRequest'\n    delete:\n      summary: deleteDomain\n      operationId: deleteDomain\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes a domain immediately\n      tags:\n        - domains\n  '/domains/{name}/authinfo':\n    parameters:\n      - schema:\n          type: string\n          format: hostname\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    get:\n      summary: getDomainAuthinfo\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainAuthinfoResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDomainAuthinfo\n      description: Generates and returns the authinfo for the domain\n    delete:\n      summary: removeDomainAuthinfo\n      operationId: removeDomainAuthinfo\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Removes the authinfo from the domain\n  '/domains/{name}/restore':\n    parameters:\n      - schema:\n          type: string\n          format: hostname\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    post:\n      summary: restoreDomain\n      operationId: restoreDomain\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Restores a deleted domain\n  '/domains/{name}/schedule-delete':\n    parameters:\n      - schema:\n          type: string\n          format: hostname\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    post:\n      summary: scheduleDomainDelete\n      operationId: scheduleDomainDelete\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Schedules the deletion of the domain\n      requestBody:\n        $ref: '#/components/requestBodies/DomainScheduleDeleteRequest'\n  '/domains/{name}/unschedule-delete':\n    parameters:\n      - schema:\n          type: string\n          format: hostname\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    post:\n      summary: unscheduleDomainDelete\n      operationId: unscheduleDomainDelete\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainSingleResponse'\n        '400':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Unscheduled the pending domain deletion\n  /ssl/contacts:\n    get:\n      summary: getSSLContacts\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLContactListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLContacts\n      description: Returns all ssl contacts\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createSSLContact\n      operationId: createSSLContact\n      responses:\n        '201':\n          $ref: '#/components/responses/SSLContactSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - ssl\n      description: Creates a ssl contact\n      requestBody:\n        $ref: '#/components/requestBodies/SSLContactCreateRequest'\n  '/ssl/contacts/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: SSL Contact ID\n    get:\n      summary: getSSLContact\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLContactSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLContact\n      description: Returns a single ssl contact\n    delete:\n      summary: deleteSSLContact\n      operationId: deleteSSLContact\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - ssl\n      description: Deletes a ssl contact\n  /ssl/organisations:\n    get:\n      summary: getSSLOrganisations\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLOrganisationListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLOrganisations\n      description: Returns all ssl organisations\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createSSLOrganisation\n      operationId: createSSLOrganisation\n      responses:\n        '201':\n          $ref: '#/components/responses/SSLOrganisationSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - ssl\n      description: Creates a ssl organisation\n      requestBody:\n        $ref: '#/components/requestBodies/SSLOrganisationCreateRequest'\n  '/ssl/organisations/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: SSL Organisation ID\n    get:\n      summary: getSSLOrganisation\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLOrganisationSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLOrganisation\n      description: Returns a single ssl organisation\n    delete:\n      summary: deleteSSLOrganisation\n      operationId: deleteSSLOrganisation\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - ssl\n      description: Deletes a ssl organisation\n  /ssl/types:\n    get:\n      summary: getSSLTypes\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLTypeListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLTypes\n      description: Returns all ssl types\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n  '/ssl/types/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: SSL Type ID\n    get:\n      summary: getSSLType\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLTypeSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLType\n      description: Returns a single ssl type\n  /ssl/certificates:\n    get:\n      summary: getSSLCertificates\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLCertificateListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLCertificates\n      description: Returns all ssl certificates\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[type_id]'\n          description: SSL Type ID\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[organisation_id]'\n          description: Organisation ID\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[admin_contact_id]'\n          description: ID of Admin Contact\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[tech_contact_id]'\n          description: ID of Tech Contact\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n    post:\n      summary: createSSLCertificate\n      operationId: createSSLCertificate\n      responses:\n        '201':\n          $ref: '#/components/responses/SSLCertificateSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - ssl\n      description: Orders a new ssl certificate\n      requestBody:\n        $ref: '#/components/requestBodies/SSLCertificateCreateRequest'\n  '/ssl/certificates/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: SSL Certificate ID\n    get:\n      summary: getSSLCertificate\n      tags:\n        - ssl\n      responses:\n        '200':\n          $ref: '#/components/responses/SSLCertificateSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSLCertificate\n      description: Returns a single ssl certificate\n  /ssh-keys:\n    get:\n      summary: getSSHKeys\n      responses:\n        '200':\n          $ref: '#/components/responses/SSHKeyListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSHKeys\n      description: Returns all ssh keys\n      tags:\n        - sshkeys\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n    post:\n      summary: createSSHKey\n      operationId: createSSHKey\n      responses:\n        '201':\n          $ref: '#/components/responses/SSHKeySingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - sshkeys\n      description: Creates a new ssh key\n      requestBody:\n        $ref: '#/components/requestBodies/SSHKeyCreateRequest'\n  '/ssh-keys/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: SSH Key ID\n    get:\n      summary: getSSHKey\n      tags:\n        - sshkeys\n      responses:\n        '200':\n          $ref: '#/components/responses/SSHKeySingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSSHKey\n      description: Returns a single ssh key\n    delete:\n      summary: deleteSSHKey\n      operationId: deleteSSHKey\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - sshkeys\n      description: Deletes a ssh key\n  /servers:\n    get:\n      summary: getServers\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServers\n      description: Returns all servers\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[name]'\n          description: Name Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[state]'\n          description: State Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[variant_id]'\n          description: Variant ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[template_id]'\n          description: Template ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[host_id]'\n          description: Host ID Filter\n    post:\n      summary: createServer\n      operationId: createServer\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Creates a new server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerCreateRequest'\n  '/servers/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    get:\n      summary: getServer\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServer\n      description: Returns a single server\n    delete:\n      summary: deleteServer\n      operationId: deleteServer\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Deletes the server\n    put:\n      summary: updateServer\n      operationId: updateServer\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the server\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerUpdateRequest'\n  /server-volumes:\n    get:\n      summary: getServerVolumes\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVolumeListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVolumes\n      description: Returns all server volumes\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[server_id]'\n          description: Server ID Filter\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[class_id]'\n          description: Storage Class ID Filter\n    post:\n      summary: createServerVolume\n      operationId: createServerVolume\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerVolumeSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new volume\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerVolumeCreateRequest'\n  '/server-volumes/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server Volume ID\n    get:\n      summary: getServerVolume\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVolumeSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVolume\n      description: Returns a single volume\n    delete:\n      summary: deleteServerVolume\n      operationId: deleteServerVolume\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Deletes the volume\n    put:\n      summary: updateServerVolume\n      operationId: updateServerVolume\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVolumeSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the server volume\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerVolumeUpdateRequest'\n  /server-templates:\n    get:\n      summary: getServerTemplates\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerTemplateListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerTemplates\n      description: Returns all server templates\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: zone_id\n          description: Zone ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n    post:\n      summary: createServerTemplate\n      operationId: createServerTemplate\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerTemplateSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new server template\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerTemplateCreateRequest'\n  '/server-templates/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server Template ID\n    get:\n      summary: getServerTemplate\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerTemplateSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerTemplate\n      description: Returns a single server template\n  /server-medias:\n    get:\n      summary: getServerMedias\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerMediaListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerMedias\n      description: Returns all server media's\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[zone_id]'\n          description: Zone ID Filter\n    parameters: []\n    post:\n      summary: createServerMedia\n      operationId: createServerMedia\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerMediaSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new server media\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerMediaCreateRequest'\n  '/server-medias/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server Media ID\n    get:\n      summary: getServerMedia\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerMediaSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerMedia\n      description: Returns a single server media\n    delete:\n      summary: deleteServerMedia\n      operationId: deleteServerMedia\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes the server media\n      tags:\n        - server\n  /pricing/domains:\n    get:\n      summary: getDomainPricingList\n      tags:\n        - pricing\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainPriceListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDomainPricingList\n      description: Returns the price list for all top-level-domains\n      parameters:\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: project_id\n          description: Project ID\n  /search:\n    get:\n      summary: search\n      tags:\n        - general\n      responses:\n        '200':\n          $ref: '#/components/responses/SearchResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: search\n      description: 'Search for multiple resource types at once. Possible resource types are: domains, domain_handles'\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: resources\n          description: Comma seperated list of types\n        - schema:\n            type: string\n          in: query\n          name: search\n          description: Search\n        - schema:\n            type: integer\n          in: query\n          name: limit\n          description: Limit per Resource Type\n        - in: query\n          description: Project ID\n          name: project_id\n          schema:\n            type: string\n            format: uuid\n        - schema:\n            type: string\n          in: query\n          name: 'labels[:name]'\n          description: Filters for the label with the given name. Only checks the value if it's length is greater than 0.\n        - $ref: '#/components/parameters/WithLabels'\n  '/domains/{name}/check':\n    parameters:\n      - schema:\n          type: string\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    get:\n      summary: checkDomain\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainCheckResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: checkDomain\n      description: Checks if the domain is available for registration\n  /dns/zones:\n    get:\n      summary: getDNSZones\n      tags:\n        - dns\n      responses:\n        '200':\n          $ref: '#/components/responses/DNSZoneListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDNSZones\n      description: Returns all dns zones\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n  '/dns/zones/{name}':\n    parameters:\n      - schema:\n          type: string\n        name: name\n        in: path\n        required: true\n        description: Zone Name\n    get:\n      summary: getDNSZone\n      tags:\n        - dns\n      responses:\n        '200':\n          $ref: '#/components/responses/DNSZoneSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDNSZone\n      description: Returns a single dns zone\n    put:\n      summary: updateDNSZone\n      operationId: updateDNSZone\n      responses:\n        '200':\n          $ref: '#/components/responses/DNSZoneSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the dns zone\n      tags:\n        - dns\n      requestBody:\n        $ref: '#/components/requestBodies/DNSZoneUpdateRequest'\n  '/dns/zones/{name}/records':\n    parameters:\n      - schema:\n          type: string\n        name: name\n        in: path\n        required: true\n        description: Zone Name\n    get:\n      summary: getDNSZoneRecords\n      tags:\n        - dns\n      responses:\n        '201':\n          $ref: '#/components/responses/DNSRecordListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getDNSZoneRecords\n      description: Returns all records in the zone\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n    put:\n      summary: updateDNSZoneRecords\n      operationId: updateDNSZoneRecords\n      responses:\n        '200':\n          $ref: '#/components/responses/DNSRecordListResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - dns\n      description: Updates the records in the zone\n      requestBody:\n        $ref: '#/components/requestBodies/DNSRecordsUpdateRequest'\n    post:\n      summary: createDNSZoneRecord\n      operationId: createDNSZoneRecord\n      responses:\n        '200':\n          $ref: '#/components/responses/DNSRecordSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - dns\n      description: Creates a new record in the zone\n      requestBody:\n        $ref: '#/components/requestBodies/DNSRecordCreateRequest'\n  '/dns/zones/{name}/records/{id}':\n    parameters:\n      - schema:\n          type: string\n        description: DNS Zone Name\n        name: name\n        in: path\n        required: true\n      - schema:\n          type: string\n          format: uuid\n        description: DNS Record ID\n        name: id\n        in: path\n        required: true\n    put:\n      summary: updateDNSRecord\n      operationId: updateDNSRecord\n      responses:\n        '200':\n          $ref: '#/components/responses/DNSRecordSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the dns record\n      tags:\n        - dns\n      requestBody:\n        $ref: '#/components/requestBodies/DNSRecordUpdateRequest'\n    delete:\n      summary: deleteDNSRecord\n      operationId: deleteDNSRecord\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes the dns record\n      tags:\n        - dns\n  '/domains/{name}/verification':\n    parameters:\n      - schema:\n          type: string\n        name: name\n        in: path\n        required: true\n        description: Domain Name\n    get:\n      summary: checkDomainVerification\n      tags:\n        - domains\n      responses:\n        '200':\n          $ref: '#/components/responses/DomainCheckVerificationResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: checkDomainVerification\n      description: Checks whether the owner contact is unverified\n    post:\n      summary: sendDomainVerification\n      operationId: sendDomainVerification\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - domains\n      description: Resends the verification email in case the owner is unverified\n  /availability-zones:\n    get:\n      summary: getAvailabilityZones\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/AvailabilityZoneListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getAvailabilityZones\n      description: Returns all availability zones\n      parameters:\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[country_code]'\n          description: Country Code Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[city]'\n          description: City Filter\n    post:\n      summary: createAvailabilityZone\n      operationId: createAvailabilityZone\n      responses:\n        '201':\n          $ref: '#/components/responses/AvailabilityZoneSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new availability zone\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/AvailabilityZoneCreateRequest'\n  '/availability-zones/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Availability Zone ID\n    get:\n      summary: getAvailabilityZone\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/AvailabilityZoneSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getAvailabilityZone\n      description: Returns a single availability zone\n    put:\n      summary: updateAvailabilityZone\n      operationId: updateAvailabilityZone\n      responses:\n        '200':\n          $ref: '#/components/responses/AvailabilityZoneSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the availability zone\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/AvailabilityZoneUpdateRequest'\n  /server-variants:\n    get:\n      summary: getServerVariants\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVariantListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVariants\n      description: Returns all server variants\n      parameters:\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: project_id\n          description: Project ID Filter\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: zone_id\n          description: Zone ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[cores]'\n          description: Core Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[memory]'\n          description: Memory Size Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[disk]'\n          description: Disk Size Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[storage_class_id]'\n          description: Storage Class ID Filter\n    post:\n      summary: createServerVariant\n      operationId: createServerVariant\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerVariantSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new server variant\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerVariantCreateRequest'\n  '/server-variants/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server Variant ID\n    get:\n      summary: getServerVariant\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVariantSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVariant\n      description: Returns a single server variant\n    delete:\n      summary: deleteServerVariant\n      operationId: deleteServerVariant\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes the server variant\n      tags:\n        - server\n  /server-storage-classes:\n    get:\n      summary: getServerStorageClasses\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerStorageClassListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerStorageClasses\n      description: Returns all storage classes\n      parameters:\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[replication]'\n          description: Replication Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[ssd]'\n          description: SSD Filter\n    parameters: []\n    post:\n      summary: createServerStorageClass\n      operationId: createServerStorageClass\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerStorageClassSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new storage class\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerStorageClassCreateRequest'\n  '/server-storage-classes/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server Volume Class ID\n    get:\n      summary: getServerStorageClass\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerStorageClassSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerStorageClass\n      description: Returns a single storage class\n  /networks:\n    get:\n      summary: getNetworks\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/NetworkListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getNetworks\n      description: Returns all networks\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[zone_id]'\n          description: Zone ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[type]'\n          description: Type Filter\n    post:\n      summary: createNetwork\n      operationId: createNetwork\n      responses:\n        '201':\n          $ref: '#/components/responses/NetworkSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new network\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/NetworkCreateRequest'\n  '/networks/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Network ID\n    get:\n      summary: getNetwork\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/NetworkSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getNetwork\n      description: Returns a single network\n  '/servers/{id}/networks':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    get:\n      summary: getServerNetworks\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerNetworkListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerNetworks\n      description: Returns all server networks\n      parameters:\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPage\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/PaginationPageSize\n        - $ref: ./auth-api.v1.0.yaml#/components/parameters/Search\n        - schema:\n            type: string\n          in: query\n          name: 'filter[default]'\n          description: Default Interface Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[server_id]'\n          description: Server ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[network_id]'\n          description: Network ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[mac_address]'\n          description: MAC Address Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[address_v4_id]'\n          description: Address V4 ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[address_v6_id]'\n          description: Address V6 ID Filter\n    post:\n      summary: createServerNetwork\n      operationId: createServerNetwork\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerNetworkSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Adds a new network adapter to the server\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerNetworkCreateRequest'\n  '/servers/{id}/networks/{network_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n      - schema:\n          type: string\n          format: uuid\n        name: network_id\n        in: path\n        required: true\n        description: Server Network ID\n    delete:\n      summary: deleteServerNetwork\n      operationId: deleteServerNetwork\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Removes the network adapter\n      tags:\n        - server\n  /subnets:\n    get:\n      summary: getSubnets\n      tags:\n        - address\n      responses:\n        '200':\n          $ref: '#/components/responses/SubnetListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSubnets\n      description: Returns all subnets\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/LabelsFilter'\n        - $ref: '#/components/parameters/WithLabels'\n        - schema:\n            type: string\n            format: uuid\n          in: query\n          name: 'filter[network_id]'\n          description: Network ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n    post:\n      summary: createSubnet\n      operationId: createSubnet\n      responses:\n        '201':\n          $ref: '#/components/responses/SubnetSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new subnet\n      tags:\n        - address\n      requestBody:\n        $ref: '#/components/requestBodies/SubnetCreateRequest'\n  '/subnets/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Subnet ID\n    get:\n      summary: getSubnet\n      tags:\n        - address\n      responses:\n        '200':\n          $ref: '#/components/responses/SubnetSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getSubnet\n      description: Returns a single subnet\n    delete:\n      summary: deleteSubnet\n      operationId: deleteSubnet\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - address\n      description: Deletes a subnet\n  /server-hosts:\n    get:\n      summary: getServerHosts\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerHostListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          description: Forbidden\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerHosts\n      description: Returns all server hosts\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n    post:\n      summary: createServerHost\n      operationId: createServerHost\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerHostSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new server host\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerHostCreateRequest'\n  '/server-hosts/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerHost ID\n    get:\n      summary: getServerHost\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerHostSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerHost\n      description: Returns a single host\n  /server-storages:\n    get:\n      summary: getServerStorages\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerStorageListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          description: Forbidden\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerStorages\n      description: Returns all server storages\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[zone_id]'\n          description: Zone ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[external_id]'\n          description: External ID Filter\n    post:\n      summary: createServerStorage\n      operationId: createServerStorage\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerStorageSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new server storage\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerStorageCreateRequest'\n  '/server-storages/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerStorage ID\n    get:\n      summary: getServerStorage\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerStorageSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerStorage\n      description: Returns a single server storage\n  '/subnets/{id}/addresses':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Subnet ID\n    post:\n      summary: createSubnetAddress\n      operationId: createSubnetAddress\n      responses:\n        '200':\n          $ref: '#/components/responses/AddressSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          description: Forbidden\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new address in the subnet\n      requestBody:\n        $ref: '#/components/requestBodies/SubnetAddressCreateRequest'\n      tags:\n        - address\n  '/servers/{id}/start':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        description: Server ID\n        required: true\n    post:\n      summary: startServer\n      operationId: startServer\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Starts the server\n  '/servers/{id}/shutdown':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    post:\n      summary: shutdownServer\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: shutdownServer\n      description: Shuts the server down using a soft shutdown (ACPI Signal)\n      parameters:\n        - schema:\n            type: boolean\n          in: query\n          name: force\n          description: Optionally force the poweroff when the server doesn't respond to the signal in a reasonable amount of time\n  '/servers/{id}/stop':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    post:\n      summary: stopServer\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: stopServer\n      description: Stops the server forcefully (see shutdownServer for soft shutdown)\n  '/servers/{id}/recreate':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    post:\n      summary: recreateServer\n      operationId: recreateServer\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Recreates the server. This will delete all data on the root disk and the server will be freshly reinstalled.\n      tags:\n        - server\n  '/servers/{id}/vnc':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    get:\n      summary: getServerVNC\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVNCResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVNC\n      description: Returns vnc websocket credentials\n  '/servers/{id}/actions':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    get:\n      summary: getServerActions\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerActionListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerActions\n      description: Returns all actions for the server\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n  '/servers/{id}/actions/{action_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n      - schema:\n          type: string\n          format: uuid\n        name: action_id\n        in: path\n        required: true\n        description: ServerAction ID\n    get:\n      summary: getServerAction\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerActionSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerAction\n      description: Returns a single server action\n  '/server-volumes/{id}/attach':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Volume ID\n    post:\n      summary: attachServerVolume\n      operationId: attachServerVolume\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVolumeSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Attaches the volume to the provided server\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerVolumeAttachRequest'\n  '/server-volumes/{id}/detach':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Volume ID\n    post:\n      summary: detachServerVolume\n      operationId: detachServerVolume\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVolumeSingleResponse'\n        '400':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Detaches the volume from the current server\n      tags:\n        - server\n  '/servers/{id}/status':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n    get:\n      summary: getServerStatus\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerStatusResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerStatus\n      description: Fetches the current server status\n  /addresses:\n    get:\n      summary: getAddresses\n      tags:\n        - address\n      responses:\n        '200':\n          $ref: '#/components/responses/AddressListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getAddresses\n      description: Returns all addresses\n      parameters:\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n  '/addresses/{id}':\n    parameters:\n      - schema:\n          type: string\n        description: Address ID\n        name: id\n        in: path\n        required: true\n    get:\n      summary: getAddress\n      tags:\n        - address\n      responses:\n        '200':\n          $ref: '#/components/responses/AddressSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getAddress\n      description: Returns a single address\n  '/servers/{id}/resize':\n    parameters:\n      - schema:\n          type: string\n        description: Server ID\n        name: id\n        in: path\n        required: true\n    post:\n      summary: resizeServer\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '409':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: resizeServer\n      description: Resizes the server to the specified variant\n      requestBody:\n        $ref: '#/components/requestBodies/ServerResizeRequest'\n  /labels:\n    get:\n      summary: getLabels\n      tags:\n        - label\n      responses:\n        '200':\n          $ref: '#/components/responses/LabelListResponse'\n        '400':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getLabels\n      description: Returns all labels that are in use\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[name]'\n          description: Name Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[value]'\n          description: Value Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[object_type]'\n          description: Object Type Filter\n  '/servers/{id}/graph':\n    parameters:\n      - schema:\n          type: string\n        description: Server ID\n        name: id\n        in: path\n        required: true\n    get:\n      summary: getServerGraph\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerGraphResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerGraph\n      description: Returns graph data for the server\n      parameters:\n        - schema:\n            type: string\n            enum:\n              - hour\n              - day\n              - week\n              - month\n              - year\n          in: query\n          name: timeframe\n          description: Data Timeframe\n  /server-backups:\n    get:\n      summary: getServerBackups\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerBackupListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerBackups\n      description: Returns all server backups\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[server_id]'\n          description: Server ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n    post:\n      summary: createServerBackup\n      operationId: createServerBackup\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerBackupSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '409':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new backup of a server\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerBackupCreateRequest'\n  '/server-backups/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerBackup ID\n    get:\n      summary: getServerBackup\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerBackupSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerBackup\n      description: Returns a single server backup\n    delete:\n      summary: deleteServerBackup\n      operationId: deleteServerBackup\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes a server backup\n      tags:\n        - server\n  '/servers/{id}/restore':\n    parameters:\n      - schema:\n          type: string\n        description: Server ID\n        name: id\n        in: path\n        required: true\n    post:\n      summary: restoreServer\n      operationId: restoreServer\n      responses:\n        '200':\n          $ref: '#/components/responses/ScheduledServerActionSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '409':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Restores the server from a backup\n      requestBody:\n        $ref: '#/components/requestBodies/ServerRestoreRequest'\n  '/servers/{id}/scheduled-actions':\n    get:\n      summary: getScheduledServerActions\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ScheduledServerActionListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getScheduledServerActions\n      description: Returns all scheduled server actions\n      parameters:\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: ./billing-api.v1.0.yaml#/components/parameters/Search\n    post:\n      summary: createScheduledServerAction\n      operationId: createScheduledServerAction\n      responses:\n        '201':\n          $ref: '#/components/responses/ScheduledServerActionSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Schedules a new scheduled server action\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ScheduledServerActionCreateRequest'\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n  '/servers/{id}/scheduled-actions/{action_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: Server ID\n      - schema:\n          type: string\n          format: uuid\n        name: action_id\n        in: path\n        required: true\n        description: ScheduledServerAction ID\n    get:\n      summary: getScheduledServerAction\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ScheduledServerActionSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getScheduledServerAction\n      description: Returns a single scheduled server action\n    delete:\n      summary: deleteScheduledServerAction\n      operationId: deleteScheduledServerAction\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Deletes a scheduled server action\n  /server-firewalls:\n    get:\n      summary: getServerFirewalls\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerFirewallListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerFirewalls\n      description: Returns all server firewalls\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - $ref: '#/components/parameters/ProjectIDFilter'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n    post:\n      summary: createServerFirewall\n      operationId: createServerFirewall\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerFirewallSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new server firewall\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerFirewallCreateRequest'\n  '/server-firewalls/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerFirewall ID\n    get:\n      summary: getServerFirewall\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerFirewallSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerFirewall\n      description: Returns a single firewall\n    delete:\n      summary: deleteServerFirewall\n      operationId: deleteServerFirewall\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Deletes a server firewall\n  '/server-firewalls/{id}/rules':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerFirewall ID\n    get:\n      summary: getServerFirewallRules\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerFirewallRuleListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerFirewallRules\n      description: Returns all rules of the firewall\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[type]'\n          description: Type Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[protocol]'\n          description: Protocol Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[applied]'\n          description: Applied Rule Filter\n    post:\n      summary: createServerFirewallRule\n      operationId: createServerFirewallRule\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerFirewallRuleSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new rule in the server firewall\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerFirewallRuleCreateRequest'\n  '/server-firewalls/{id}/rules/{rule_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerFirewall ID\n      - schema:\n          type: string\n          format: uuid\n        name: rule_id\n        in: path\n        required: true\n        description: ServerFirewallRule ID\n    get:\n      summary: getServerFirewallRule\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerFirewallRuleSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerFirewallRule\n      description: Returns a single firewall rule\n    delete:\n      summary: deleteServerFirewallRule\n      operationId: deleteServerFirewallRule\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes a server firewall rule\n      tags:\n        - server\n  '/server-firewalls/{id}/members':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerFirewall ID\n    get:\n      summary: getServerFirewallMembers\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerFirewallMemberListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerFirewallMembers\n      description: Returns all members of the firewall\n      parameters:\n        - $ref: '#/components/parameters/Search'\n        - $ref: '#/components/parameters/PaginationPage'\n        - $ref: '#/components/parameters/PaginationPageSize'\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[type]'\n          description: Type Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[server_id]'\n          description: Server ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[label_name]'\n          description: Label Name Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[label_value]'\n          description: Label Value Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[applied]'\n          description: Applied Member Filter\n    post:\n      summary: createServerFirewallMember\n      operationId: createServerFirewallMember\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerFirewallMemberSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Adds a new member to the server firewall\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerFirewallMemberCreateRequest'\n  '/server-firewalls/{id}/members/{member_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerFirewall ID\n      - schema:\n          type: string\n          format: uuid\n        name: member_id\n        in: path\n        required: true\n        description: ServerFirewallMember ID\n    get:\n      summary: getServerFirewallMember\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerFirewallMemberSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerFirewallMember\n      description: Returns a single firewall member\n    delete:\n      summary: deleteServerFirewallMember\n      operationId: deleteServerFirewallMember\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Removes a member from the server firewall\n  /server-price-ranges:\n    get:\n      summary: getServerPriceRanges\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerPriceRangeListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerPriceRanges\n      description: Returns all price ranges for servers\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[title]'\n          description: Title Filter\n    post:\n      summary: createServerPriceRange\n      operationId: createServerPriceRange\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerPriceRangeSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new price range for servers\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerPriceRangeCreateRequest'\n  '/server-price-ranges/{id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerPriceRange ID\n    get:\n      summary: getServerPriceRange\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerPriceRangeSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerPriceRange\n      description: Returns a single price range for servers\n  '/server-price-ranges/{id}/variant-prices':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerPriceRange ID\n    get:\n      summary: getServerVariantPrices\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVariantPriceListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVariantPrices\n      description: Returns all variant prices for a range\n    post:\n      summary: createServerVariantPrice\n      operationId: createServerVariantPrice\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVariantPriceSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new variant price for the range\n      requestBody:\n        $ref: '#/components/requestBodies/ServerVariantPriceCreateRequest'\n      tags:\n        - server\n  '/server-price-ranges/{id}/variant-prices/{variant_id}':\n    parameters:\n      - schema:\n          type: string\n          format: uuid\n        name: id\n        in: path\n        required: true\n        description: ServerPriceRange ID\n      - schema:\n          type: string\n          format: uuid\n        name: variant_id\n        in: path\n        required: true\n        description: ServerVariant ID\n    get:\n      summary: getServerVariantPrice\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVariantPriceSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerVariantPrice\n      description: Returns the pricing for a specific variant in the range\n    put:\n      summary: updateServerVariantPrice\n      operationId: updateServerVariantPrice\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerVariantPriceSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      tags:\n        - server\n      description: Updates the price for a specific variant in the range\n      requestBody:\n        $ref: '#/components/requestBodies/ServerVariantPriceUpdateRequest'\n    delete:\n      summary: deleteServerVariantPrice\n      operationId: deleteServerVariantPrice\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Delete server variant price\n      tags:\n        - server\n  /server-price-range-assignments:\n    get:\n      summary: getServerPriceRangeAssignments\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerPriceRangeAssignmentListResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerPriceRangeAssignments\n      description: Returns all price range assignments for servers\n      parameters:\n        - schema:\n            type: string\n          in: query\n          name: 'filter[id]'\n          description: ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[range_id]'\n          description: Range ID Filter\n        - schema:\n            type: string\n          in: query\n          name: 'filter[user_id]'\n          description: User ID Filter\n        - $ref: '#/components/parameters/ProjectIDFilter'\n    post:\n      summary: createServerPriceRangeAssignment\n      operationId: createServerPriceRangeAssignment\n      responses:\n        '201':\n          $ref: '#/components/responses/ServerPriceRangeAssignmentSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Creates a new price range assignment for servers\n      requestBody:\n        $ref: '#/components/requestBodies/ServerPriceRangeAssignmentCreateRequest'\n      tags:\n        - server\n  '/server-price-range-assignments/{id}':\n    parameters:\n      - schema:\n          type: string\n        name: id\n        in: path\n        required: true\n        description: ServerPriceRangeAssignment ID\n    get:\n      summary: getServerPriceRangeAssignment\n      tags:\n        - server\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerPriceRangeAssignmentSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      operationId: getServerPriceRangeAssignment\n      description: Returns a single server price range assignment by id\n    delete:\n      summary: deleteServerPriceRangeAssignment\n      operationId: deleteServerPriceRangeAssignment\n      responses:\n        '200':\n          $ref: '#/components/responses/EmptyResponse'\n        '400':\n          $ref: '#/components/responses/EmptyResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Deletes a server price range assignment\n      tags:\n        - server\n    put:\n      summary: updateServerPriceRangeAssignment\n      operationId: updateServerPriceRangeAssignment\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerPriceRangeAssignmentSingleResponse'\n        '400':\n          $ref: '#/components/responses/InvalidRequestResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Updates the range of an existing server price range assignment\n      tags:\n        - server\n      requestBody:\n        $ref: '#/components/requestBodies/ServerPriceRangeAssignmentUpdateRequest'\n  '/servers/{id}/restart':\n    parameters:\n      - schema:\n          type: string\n        description: Server ID\n        name: id\n        in: path\n        required: true\n    post:\n      summary: restartServer\n      operationId: restartServer\n      responses:\n        '200':\n          $ref: '#/components/responses/ServerActionSingleResponse'\n        '401':\n          $ref: '#/components/responses/EmptyResponse'\n        '403':\n          $ref: '#/components/responses/EmptyResponse'\n        '404':\n          $ref: '#/components/responses/EmptyResponse'\n        '409':\n          $ref: '#/components/responses/EmptyResponse'\n        '500':\n          $ref: '#/components/responses/EmptyResponse'\n      description: Restarts the server\n      tags:\n        - server\ncomponents:\n  schemas:\n    ResponseMessages:\n      title: ResponseMessages\n      type: object\n      x-examples:\n        example:\n          warnings: []\n          errors: []\n          success:\n            - code: 10000\n              message: Action successfully executed.\n      properties:\n        warnings:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseMessage'\n        errors:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseMessage'\n        infos:\n          type: array\n          items:\n            $ref: '#/components/schemas/ResponseMessage'\n      required:\n        - warnings\n        - errors\n        - infos\n    ResponseMessage:\n      title: ResponseMessage\n      type: object\n      properties:\n        key:\n          type: string\n          example: general.serverError\n        message:\n          type: string\n          example: Action successfully executed.\n      required:\n        - key\n        - message\n    ResponseMetadata:\n      title: ResponseMetadata\n      type: object\n      properties:\n        transaction_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        build_commit:\n          type: string\n          example: master-a0b1c2d3\n        build_timestamp:\n          type: string\n          example: '2021-09-01 13:37:00'\n      required:\n        - transaction_id\n        - build_commit\n        - build_timestamp\n    ResponsePagination:\n      title: ResponsePagination\n      type: object\n      properties:\n        page:\n          type: integer\n          example: 1\n        page_size:\n          type: integer\n          example: 25\n        total:\n          type: integer\n          example: 1500\n      required:\n        - page\n        - page_size\n        - total\n    PleskLicense:\n      title: PleskLicense\n      type: object\n      description: A Plesk License\n      x-tags:\n        - plesk-licenses\n      properties:\n        id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        license:\n          type: string\n        key:\n          type: string\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - license\n        - key\n        - created_at\n    PleskLicenseType:\n      title: PleskLicenseType\n      type: object\n      description: A Plesk License Type\n      x-tags:\n        - plesk-licenses\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: Web Admin\n      required:\n        - id\n        - title\n    S3Bucket:\n      title: S3Bucket\n      type: object\n      x-tags:\n        - s3-storage\n      description: A S3 Bucket\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: Example Bucket\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - title\n    S3AccessKey:\n      title: S3AccessKey\n      type: object\n      x-tags:\n        - s3-storage\n      description: A S3 Access Key\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: Example Access Key\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - title\n    S3AccessGrant:\n      title: S3AccessGrant\n      type: object\n      description: ''\n      x-tags:\n        - s3-storage\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        bucket_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        path:\n          type: string\n          example: /videos\n        role:\n          type: string\n          enum:\n            - READ_ONLY\n            - READ_WRITE\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - role\n    DomainHandle:\n      title: DomainHandle\n      type: object\n      x-tags:\n        - domains\n      properties:\n        code:\n          type: string\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        type:\n          type: string\n          enum:\n            - PERSON\n            - ORGANISATION\n        gender:\n          type: string\n          enum:\n            - MALE\n            - FEMALE\n        first_name:\n          type: string\n        last_name:\n          type: string\n        organisation:\n          type: string\n        street:\n          type: string\n        street_number:\n          type: string\n        additional_address:\n          type: string\n        postal_code:\n          type: string\n        city:\n          type: string\n        region:\n          type: string\n        country_code:\n          type: string\n          minLength: 2\n          maxLength: 2\n        phone:\n          type: string\n        fax:\n          type: string\n        email:\n          type: string\n          format: email\n        id_card:\n          type: string\n        id_card_issue_date:\n          type: string\n        id_card_authority:\n          type: string\n        tax_number:\n          type: string\n        vat_number:\n          type: string\n        birth_date:\n          type: string\n        birth_country_code:\n          type: string\n          minLength: 2\n          maxLength: 2\n        birth_place:\n          type: string\n        birth_region:\n          type: string\n        company_registration_number:\n          type: string\n        privacy_protection:\n          type: boolean\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - code\n        - project_id\n        - type\n        - gender\n        - first_name\n        - last_name\n        - street\n        - street_number\n        - postal_code\n        - city\n        - country_code\n        - email\n        - privacy_protection\n        - created_at\n    Domain:\n      title: Domain\n      type: object\n      x-tags:\n        - domains\n      properties:\n        name:\n          type: string\n          format: hostname\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        owner_handle_code:\n          type: string\n        admin_handle_code:\n          type: string\n        tech_handle_code:\n          type: string\n        zone_handle_code:\n          type: string\n        status:\n          $ref: '#/components/schemas/DomainStatus'\n        created_at:\n          type: string\n        registered_at:\n          type: string\n        expire_at:\n          type: string\n        suspended_at:\n          type: string\n        suspended_until:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - name\n        - project_id\n        - owner_handle_code\n        - admin_handle_code\n        - tech_handle_code\n        - zone_handle_code\n        - status\n        - created_at\n    DomainAuthinfo:\n      title: DomainAuthinfo\n      type: object\n      x-tags:\n        - domains\n      properties:\n        authinfo:\n          type: string\n        valid_until:\n          type: string\n      required:\n        - authinfo\n    DomainRequestNameserver:\n      title: DomainRequestNameserver\n      type: object\n      properties:\n        name:\n          type: string\n          format: hostname\n        addresses:\n          type: array\n          items:\n            type: string\n            format: ipv4\n      required:\n        - name\n      x-tags:\n        - domains\n    SSLCertificate:\n      title: SSLCertificate\n      type: object\n      x-tags:\n        - ssl\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        type_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        organisation_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        admin_contact_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        tech_contact_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        approver_email:\n          type: string\n        valid_until:\n          type: string\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - type_id\n        - organisation_id\n        - admin_contact_id\n        - tech_contact_id\n        - approver_email\n        - created_at\n    SSLContact:\n      title: SSLContact\n      type: object\n      x-tags:\n        - ssl\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n        first_name:\n          type: string\n        last_name:\n          type: string\n        organisation:\n          type: string\n        email:\n          type: string\n        phone:\n          type: string\n        fax:\n          type: string\n        address:\n          type: string\n        additional_address:\n          type: string\n        city:\n          type: string\n        postal_code:\n          type: string\n        region:\n          type: string\n        country_code:\n          type: string\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - first_name\n        - last_name\n        - organisation\n        - email\n        - phone\n        - address\n        - city\n        - postal_code\n        - country_code\n        - created_at\n    SSLOrganisation:\n      title: SSLOrganisation\n      type: object\n      x-tags:\n        - ssl\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        name:\n          type: string\n        division:\n          type: string\n        address:\n          type: string\n        additional_address:\n          type: string\n        city:\n          type: string\n        postal_code:\n          type: string\n        region:\n          type: string\n        country_code:\n          type: string\n        phone:\n          type: string\n        fax:\n          type: string\n        registration_number:\n          type: string\n        duns:\n          type: string\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - name\n        - address\n        - city\n        - postal_code\n        - country_code\n        - phone\n        - created_at\n    SSLType:\n      title: SSLType\n      type: object\n      x-tags:\n        - ssl\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: PositiveSSL\n      required:\n        - id\n        - title\n    Server:\n      title: Server\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        name:\n          type: string\n        variant_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        template_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        media_id:\n          type: string\n          format: uuid\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n        state:\n          $ref: '#/components/schemas/ServerState'\n        zone_id:\n          type: string\n          format: uuid\n        addresses:\n          type: array\n          items:\n            $ref: '#/components/schemas/Address'\n      required:\n        - id\n        - project_id\n        - name\n        - variant_id\n        - template_id\n        - created_at\n        - state\n        - zone_id\n    SSHKey:\n      title: SSHKey\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n        public_key:\n          type: string\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - title\n        - public_key\n        - created_at\n    ServerTemplate:\n      title: ServerTemplate\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: Debian 10\n      required:\n        - id\n        - title\n    ServerMedia:\n      title: ServerMedia\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        zone_id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: GRML 2020 Full\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n        external_id:\n          type: string\n      required:\n        - id\n        - project_id\n        - title\n        - created_at\n    ServerVolume:\n      title: ServerVolume\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        project_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        title:\n          type: string\n          example: Example Volume\n        server_id:\n          type: string\n          format: uuid\n          example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n        size:\n          type: integer\n        class_id:\n          type: string\n          format: uuid\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n        root:\n          type: boolean\n        storage_id:\n          type: string\n          format: uuid\n        zone_id:\n          type: string\n          format: uuid\n      required:\n        - id\n        - project_id\n        - title\n        - size\n        - class_id\n        - created_at\n        - zone_id\n    DomainPricing:\n      title: DomainPricing\n      type: object\n      properties:\n        tld:\n          type: string\n        create:\n          type: number\n        renew:\n          type: number\n        restore:\n          type: number\n      required:\n        - tld\n      x-tags:\n        - pricing\n    SearchResults:\n      title: SearchResults\n      type: object\n      properties:\n        domains:\n          type: array\n          items:\n            $ref: '#/components/schemas/Domain'\n        domain_handles:\n          type: array\n          items:\n            $ref: '#/components/schemas/DomainHandle'\n    DomainCheckResult:\n      title: DomainCheckResult\n      type: object\n      properties:\n        available:\n          type: boolean\n      required:\n        - available\n      x-tags:\n        - domains\n    DNSZone:\n      title: DNSZone\n      type: object\n      x-tags:\n        - dns\n      properties:\n        project_id:\n          type: string\n          format: uuid\n        type:\n          type: string\n          enum:\n            - DOMAIN\n            - RDNS\n        name:\n          type: string\n        hostmaster:\n          type: string\n          format: email\n        ns1:\n          type: string\n        ns2:\n          type: string\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - project_id\n        - type\n        - name\n        - hostmaster\n        - ns1\n        - ns2\n        - created_at\n    DNSRecord:\n      title: DNSRecord\n      type: object\n      x-tags:\n        - dns\n      properties:\n        id:\n          type: string\n          format: uuid\n        name:\n          type: string\n        type:\n          type: string\n          enum:\n            - A\n            - AAAA\n            - MX\n            - CNAME\n            - SRV\n            - TXT\n            - PTR\n        ttl:\n          type: integer\n        data:\n          type: string\n      required:\n        - id\n        - name\n        - type\n        - data\n    DomainVerificationStatus:\n      title: DomainVerificationStatus\n      type: object\n      x-tags:\n        - domains\n      properties:\n        unverified:\n          type: boolean\n      required:\n        - unverified\n    ServerStorageClass:\n      title: ServerStorageClass\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        replication:\n          type: integer\n      required:\n        - id\n        - title\n        - replication\n    AvailabilityZone:\n      title: AvailabilityZone\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        country_code:\n          type: string\n        city:\n          type: string\n      required:\n        - id\n        - title\n        - country_code\n        - city\n    ServerVariant:\n      title: ServerVariant\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        cores:\n          type: integer\n        memory:\n          type: integer\n        disk:\n          type: integer\n        storage_class_id:\n          type: string\n          format: uuid\n      required:\n        - id\n        - title\n        - cores\n        - memory\n        - disk\n        - storage_class_id\n    Network:\n      title: Network\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n        zone_id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        type:\n          $ref: '#/components/schemas/NetworkType'\n        tag:\n          type: integer\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n      required:\n        - id\n        - project_id\n        - zone_id\n        - title\n        - created_at\n    ServerNetwork:\n      title: ServerNetwork\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        default:\n          type: boolean\n        network_id:\n          type: string\n          format: uuid\n        addresses:\n          type: array\n          format: uuid\n          items:\n            $ref: '#/components/schemas/Address'\n        created_at:\n          type: string\n        labels:\n          type: object\n          additionalProperties:\n            type: string\n        host_id:\n          type: string\n          format: uuid\n        external_id:\n          type: string\n      required:\n        - id\n        - default\n        - network_id\n        - created_at\n    ServerHost:\n      title: ServerHost\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        zone_id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        created_at:\n          type: string\n      required:\n        - id\n        - zone_id\n        - title\n        - created_at\n    ServerStorage:\n      title: ServerStorage\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        zone_id:\n          type: string\n          format: uuid\n        external_id:\n          type: string\n      required:\n        - id\n        - zone_id\n        - external_id\n      x-tags:\n        - server\n    Subnet:\n      title: Subnet\n      type: object\n      x-tags:\n        - address\n      properties:\n        id:\n          type: string\n          format: uuid\n        network_id:\n          type: string\n          format: uuid\n        address:\n          type: string\n        prefix:\n          type: integer\n        created_at:\n          type: string\n      required:\n        - id\n        - network_id\n        - address\n        - prefix\n        - created_at\n    NetworkType:\n      type: string\n      title: NetworkType\n      enum:\n        - VLAN\n        - VXLAN\n      x-tags:\n        - server\n    Address:\n      title: Address\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n        subnet_id:\n          type: string\n          format: uuid\n        address:\n          type: string\n        created_at:\n          type: string\n      required:\n        - id\n        - subnet_id\n        - address\n        - created_at\n      x-tags:\n        - address\n    ServerVNC:\n      title: ServerVNC\n      type: object\n      properties:\n        host:\n          type: string\n        port:\n          type: integer\n        password:\n          type: string\n      required:\n        - host\n        - port\n        - password\n      x-tags:\n        - server\n    ServerAction:\n      title: ServerAction\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        type:\n          $ref: '#/components/schemas/ServerActionType'\n        cancellable:\n          type: boolean\n        state:\n          $ref: '#/components/schemas/ServerActionState'\n        progress:\n          type: number\n        started_at:\n          type: string\n        ended_at:\n          type: string\n      required:\n        - id\n        - type\n        - cancellable\n        - state\n        - progress\n        - started_at\n    ServerStatus:\n      title: ServerStatus\n      type: object\n      x-tags:\n        - server\n      properties:\n        online:\n          type: boolean\n        uptime:\n          type: integer\n        cpu_usage:\n          type: number\n        memory:\n          type: integer\n        memory_usage:\n          type: number\n      required:\n        - online\n    ServerCreateRequestNetwork:\n      title: ServerCreateRequestNetwork\n      type: object\n      properties:\n        network_id:\n          type: string\n          format: uuid\n      required:\n        - network_id\n      x-tags:\n        - server\n    ServerActionType:\n      type: string\n      title: ServerActionType\n      enum:\n        - START\n        - SHUTDOWN\n        - STOP\n        - RESIZE\n      x-tags:\n        - server\n    ServerActionState:\n      type: string\n      title: ServerActionState\n      enum:\n        - STARTED\n        - CANCELLED\n        - FAILED\n        - SUCCESS\n      x-tags:\n        - server\n    Label:\n      title: Label\n      type: object\n      properties:\n        name:\n          type: string\n        value:\n          type: string\n        object_type:\n          $ref: '#/components/schemas/ObjectType'\n        object_id:\n          type: string\n          format: uuid\n      required:\n        - name\n        - value\n        - object_type\n        - object_id\n    ObjectType:\n      type: string\n      title: ObjectType\n      enum:\n        - DOMAIN\n        - DOMAIN_HANDLE\n        - SSH_KEY\n        - PLESK_LICENSE\n        - SSL_CERTIFICATE\n        - SSL_ORGANISATION\n        - SSL_CONTACT\n        - S3_BUCKET\n        - S3_ACCESS_KEY\n        - S3_ACCESS_GRANT\n        - DNS_ZONE\n        - SERVER\n        - SERVER_VOLUME\n        - SERVER_MEDIA\n        - NETWORK\n    ServerGraphEntry:\n      title: ServerGraphEntry\n      type: object\n      properties:\n        time:\n          type: integer\n        memory:\n          type: number\n        memory_usage:\n          type: number\n        cpu_usage:\n          type: number\n        disk_read:\n          type: integer\n        disk_write:\n          type: integer\n        network_ingress:\n          type: number\n        network_egress:\n          type: number\n      required:\n        - time\n        - memory\n        - memory_usage\n        - cpu_usage\n        - disk_read\n        - disk_write\n        - network_ingress\n        - network_egress\n      x-tags:\n        - server\n    ServerBackup:\n      title: ServerBackup\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        project_id:\n          type: string\n          format: uuid\n        action_id:\n          type: string\n          format: uuid\n        state:\n          $ref: '#/components/schemas/ServerBackupState'\n        scheduled:\n          type: boolean\n        size:\n          type: number\n        created_at:\n          type: string\n      required:\n        - id\n        - title\n        - project_id\n        - action_id\n        - state\n        - scheduled\n        - size\n        - created_at\n    ServerBackupState:\n      type: string\n      title: ServerBackupState\n      enum:\n        - PENDING\n        - SUCCESS\n        - FAILED\n      x-tags:\n        - server\n    ScheduledServerActionInterval:\n      type: string\n      title: ScheduledServerActionInterval\n      enum:\n        - DAILY\n        - WEEKLY\n        - BI_WEEKLY\n        - ONCE\n      x-tags:\n        - server\n    ScheduledServerAction:\n      title: ScheduledServerAction\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        server_id:\n          type: string\n          format: uuid\n        type:\n          $ref: '#/components/schemas/ServerActionType'\n        interval:\n          $ref: '#/components/schemas/ScheduledServerActionInterval'\n        execute_at:\n          type: string\n        created_at:\n          type: string\n        backup_id:\n          type: string\n          format: uuid\n      required:\n        - id\n        - server_id\n        - type\n        - interval\n        - execute_at\n        - created_at\n      x-tags:\n        - server\n    ServerFirewall:\n      title: ServerFirewall\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n        title:\n          type: string\n        created_at:\n          type: string\n      required:\n        - id\n        - project_id\n        - title\n        - created_at\n    ServerFirewallRule:\n      title: ServerFirewallRule\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        type:\n          $ref: '#/components/schemas/ServerFirewallRuleType'\n        addresses:\n          type: array\n          items:\n            type: string\n        protocol:\n          $ref: '#/components/schemas/ServerFirewallRuleProtocol'\n        ports:\n          type: array\n          items:\n            type: string\n        description:\n          type: string\n        applied:\n          type: boolean\n        created_at:\n          type: string\n      required:\n        - id\n        - type\n        - applied\n        - created_at\n    ServerFirewallRuleType:\n      type: string\n      title: ServerFirewallRuleType\n      enum:\n        - INGRESS\n        - EGRESS\n      x-tags:\n        - server\n    ServerFirewallRuleProtocol:\n      type: string\n      title: ServerFirewallRuleProtocol\n      enum:\n        - TCP\n        - UDP\n        - ICMP\n      x-tags:\n        - server\n    ServerFirewallMemberType:\n      type: string\n      title: ServerFirewallMemberType\n      enum:\n        - SERVER\n        - LABEL\n    ServerFirewallMember:\n      title: ServerFirewallMember\n      type: object\n      x-tags:\n        - server\n      properties:\n        id:\n          type: string\n          format: uuid\n        type:\n          $ref: '#/components/schemas/ServerFirewallMemberType'\n        server_id:\n          type: string\n          format: uuid\n        label_name:\n          type: string\n        label_value:\n          type: string\n        applied:\n          type: boolean\n        created_at:\n          type: string\n        children:\n          type: array\n          items:\n            $ref: '#/components/schemas/ServerFirewallMember'\n      required:\n        - id\n        - type\n        - applied\n        - created_at\n    ServerPriceRange:\n      title: ServerPriceRange\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          type: string\n      required:\n        - id\n        - title\n    ServerPriceRangeAssignment:\n      title: ServerPriceRangeAssignment\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        range_id:\n          type: string\n          format: uuid\n        user_id:\n          type: string\n          format: uuid\n        project_id:\n          type: string\n          format: uuid\n      required:\n        - id\n        - range_id\n        - user_id\n    ServerVariantPrice:\n      title: ServerVariantPrice\n      type: object\n      properties:\n        variant_id:\n          type: string\n          format: uuid\n        price:\n          type: number\n        offline_price:\n          type: number\n      required:\n        - variant_id\n        - price\n        - offline_price\n    ServerState:\n      type: string\n      title: ServerState\n      enum:\n        - INSTALLATION\n        - RESTORE\n        - ONLINE\n        - OFFLINE\n      x-tags:\n        - server\n    DomainStatus:\n      type: string\n      title: DomainStatus\n      enum:\n        - PENDING\n        - OK\n        - FAILED\n        - RESTRICTED\n        - SUSPENDED\n        - UNKNOWN\n      x-tags:\n        - domain\n  securitySchemes:\n    AuthToken:\n      type: http\n      scheme: bearer\n      description: ''\n  responses:\n    InvalidRequestResponse:\n      description: Response for validation errors\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - messages\n              - metadata\n        application/xml:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: object\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - success\n              - messages\n    EmptyResponse:\n      description: Empty Response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - messages\n              - metadata\n    S3BucketSingleResponse:\n      description: Single S3 Bucket\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/S3Bucket'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    S3BucketListResponse:\n      description: S3 Bucket List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/S3Bucket'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    S3AccessKeySingleResponse:\n      description: Single S3 Access Key\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/S3AccessKey'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    S3AccessKeyListResponse:\n      description: S3 Access Key List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/S3AccessKey'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    PleskLicenseSingleResponse:\n      description: Single Plesk License\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/PleskLicense'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    PleskLicenseListResponse:\n      description: Plesk License List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PleskLicense'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    PleskLicenseTypeSingleResponse:\n      description: Single Plesk License Type\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/PleskLicenseType'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    PleskLicenseTypeListResponse:\n      description: Plesk License Type List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/PleskLicenseType'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    S3AccessGrantListResponse:\n      description: S3 Access Grant List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/S3AccessGrant'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    S3AccessGrantSingleResponse:\n      description: Single S3 Access Grant\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/S3AccessGrant'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    DomainHandleSingleResponse:\n      description: Single Domain Handle\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/DomainHandle'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    DomainHandleListResponse:\n      description: Domain Handle List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainHandle'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    DomainSingleResponse:\n      description: Single Domain\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Domain'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    DomainListResponse:\n      description: Domain List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Domain'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    DomainAuthinfoResponse:\n      description: Authinfo\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/DomainAuthinfo'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLTypeListResponse:\n      description: SSLType List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SSLType'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLTypeSingleResponse:\n      description: Single SSLType\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/SSLType'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLContactListResponse:\n      description: SSLContact List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SSLContact'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLContactSingleResponse:\n      description: Single SSLContact\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/SSLContact'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLOrganisationListResponse:\n      description: SSLOrganisation List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SSLOrganisation'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLOrganisationSingleResponse:\n      description: Single SSLOrganisation\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/SSLOrganisation'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLCertificateListResponse:\n      description: SSLCertificate List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SSLCertificate'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSLCertificateSingleResponse:\n      description: Single SSLCertificate\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/SSLCertificate'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerListResponse:\n      description: Server List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Server'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerSingleResponse:\n      description: Single Server\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Server'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerMediaListResponse:\n      description: ServerMedia List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerMedia'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerMediaSingleResponse:\n      description: Single ServerMedia\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerMedia'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerVolumeListResponse:\n      description: ServerVolume List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerVolume'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerVolumeSingleResponse:\n      description: Single ServerVolume\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerVolume'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerTemplateListResponse:\n      description: ServerTemplate List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerTemplate'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    ServerTemplateSingleResponse:\n      description: Single ServerTemplate\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerTemplate'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSHKeyListResponse:\n      description: SSHKey List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/SSHKey'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    SSHKeySingleResponse:\n      description: Single SSHKey\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/SSHKey'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n            required:\n              - success\n              - data\n              - messages\n              - metadata\n    DomainPriceListResponse:\n      description: DomainPrice List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DomainPricing'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    SearchResponse:\n      description: Search Results\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/SearchResults'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    DomainCheckResponse:\n      description: Domain Check\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/DomainCheckResult'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    DNSZoneListResponse:\n      description: DNSZone List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DNSZone'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    DNSZoneSingleResponse:\n      description: Single DNSZone\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/DNSZone'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    DNSRecordListResponse:\n      description: DNSRecord List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/DNSRecord'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    DNSRecordSingleResponse:\n      description: Single DNSRecord\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/DNSRecord'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    DomainCheckVerificationResponse:\n      description: Domain Verification Status Response\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/DomainVerificationStatus'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    NetworkListResponse:\n      description: Network List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Network'\n              pagination:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    NetworkSingleResponse:\n      description: Single Network\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Network'\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    AvailabilityZoneListResponse:\n      description: AvailabilityZone List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AvailabilityZone'\n              pagination:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    AvailabilityZoneSingleResponse:\n      description: Single AvailabilityZone\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/AvailabilityZone'\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerStorageClassListResponse:\n      description: ServerStorageClass List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerStorageClass'\n              pagination:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerStorageClassSingleResponse:\n      description: Single ServerStorageClass\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerStorageClass'\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerVariantListResponse:\n      description: ServerVariant List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerVariant'\n              pagination:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerVariantSingleResponse:\n      description: Single ServerVariant\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerVariant'\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerNetworkListResponse:\n      description: ServerNetwork List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerNetwork'\n              pagination:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerNetworkSingleResponse:\n      description: Single ServerNetwork\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerNetwork'\n              pagination:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponsePagination\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - pagination\n              - messages\n    ServerHostListResponse:\n      description: ServerHost List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerHost'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerHostSingleResponse:\n      description: Single ServerHost\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerHost'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerStorageListResponse:\n      description: ServerStorage List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerStorage'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - pagination\n              - messages\n    SubnetListResponse:\n      description: Subnet List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Subnet'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    SubnetSingleResponse:\n      description: Single Subnet\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Subnet'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerStorageSingleResponse:\n      description: Single ServerStorage\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerStorage'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    AddressListResponse:\n      description: Address List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Address'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    AddressSingleResponse:\n      description: Single Address\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/Address'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerVNCResponse:\n      description: ServerVNC\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMetadata\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerVNC'\n              messages:\n                $ref: ./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerActionSingleResponse:\n      description: Single ServerAction\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerAction'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerActionListResponse:\n      description: ServerAction List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerAction'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerStatusResponse:\n      description: ServerStatus\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerStatus'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    LabelListResponse:\n      description: Label List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Label'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerGraphResponse:\n      description: Server Graph\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerGraphEntry'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerBackupListResponse:\n      description: ServerBackup List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerBackup'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerBackupSingleResponse:\n      description: Single ServerBackup\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerBackup'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ScheduledServerActionListResponse:\n      description: ScheduledServerAction List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ScheduledServerAction'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ScheduledServerActionSingleResponse:\n      description: Single ScheduledServerAction\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ScheduledServerAction'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerFirewallListResponse:\n      description: ServerFirewall List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerFirewall'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerFirewallSingleResponse:\n      description: Single ServerFirewall\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerFirewall'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerFirewallRuleListResponse:\n      description: ServerFirewallRule List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerFirewallRule'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n    ServerFirewallRuleSingleResponse:\n      description: Single ServerFirewallRule\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerFirewallRule'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerFirewallMemberListResponse:\n      description: ServerFirewallMember List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerFirewallMember'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerFirewallMemberSingleResponse:\n      description: Single ServerFirewallMember\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerFirewallMember'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerPriceRangeListResponse:\n      description: ServerPriceRange List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerPriceRange'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerPriceRangeSingleResponse:\n      description: Single ServerPriceRange\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerPriceRange'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerPriceRangeAssignmentListResponse:\n      description: ServerPriceRangeAssignment List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerPriceRangeAssignment'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerPriceRangeAssignmentSingleResponse:\n      description: Single ServerPriceRangeAssignment\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerPriceRangeAssignment'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerVariantPriceListResponse:\n      description: ServerVariantPrice List\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerVariantPrice'\n              pagination:\n                $ref: '#/components/schemas/ResponsePagination'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n    ServerVariantPriceSingleResponse:\n      description: Single ServerVariantPrice\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              metadata:\n                $ref: '#/components/schemas/ResponseMetadata'\n              success:\n                type: boolean\n              data:\n                $ref: '#/components/schemas/ServerVariantPrice'\n              messages:\n                $ref: '#/components/schemas/ResponseMessages'\n            required:\n              - metadata\n              - success\n              - data\n              - messages\n  requestBodies:\n    S3BucketCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              title:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - title\n      description: ''\n    S3AccessKeyCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              title:\n                type: string\n              secret_key:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - title\n              - secret_key\n    PleskLicenseCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              type_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              address:\n                type: string\n                format: ipv4\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - type_id\n      description: ''\n    PleskLicenseUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              address:\n                type: string\n                format: ipv4\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n    S3AccessGrantCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              bucket_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              path:\n                type: string\n              role:\n                type: string\n                enum:\n                  - READ_ONLY\n                  - READ_WRITE\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - role\n    DomainHandleCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              type:\n                type: string\n                enum:\n                  - PERSON\n                  - ORGANISATION\n              gender:\n                type: string\n                enum:\n                  - MALE\n                  - FEMALE\n              first_name:\n                type: string\n              last_name:\n                type: string\n              organisation:\n                type: string\n              street:\n                type: string\n              street_number:\n                type: string\n              additional_address:\n                type: string\n              postal_code:\n                type: string\n              city:\n                type: string\n              region:\n                type: string\n              country_code:\n                type: string\n                minLength: 2\n                maxLength: 2\n              phone:\n                type: string\n              fax:\n                type: string\n              email:\n                type: string\n                format: email\n              id_card:\n                type: string\n              id_card_issue_date:\n                type: string\n              id_card_authority:\n                type: string\n              tax_number:\n                type: string\n              vat_number:\n                type: string\n              birth_date:\n                type: string\n              birth_country_code:\n                type: string\n                minLength: 2\n                maxLength: 2\n              birth_place:\n                type: string\n              birth_region:\n                type: string\n              company_registration_number:\n                type: string\n              privacy_protection:\n                type: boolean\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - type\n              - gender\n              - first_name\n              - last_name\n              - street\n              - street_number\n              - postal_code\n              - city\n              - country_code\n              - email\n    DomainHandleUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              street:\n                type: string\n              street_number:\n                type: string\n              additional_address:\n                type: string\n              postal_code:\n                type: string\n              city:\n                type: string\n              region:\n                type: string\n              country_code:\n                type: string\n                minLength: 2\n                maxLength: 2\n              phone:\n                type: string\n              fax:\n                type: string\n              email:\n                type: string\n                format: email\n              id_card:\n                type: string\n              id_card_issue_date:\n                type: string\n              id_card_authority:\n                type: string\n              tax_number:\n                type: string\n              vat_number:\n                type: string\n              birth_date:\n                type: string\n              birth_country_code:\n                type: string\n                minLength: 2\n                maxLength: 2\n              birth_place:\n                type: string\n              birth_region:\n                type: string\n              company_registration_number:\n                type: string\n              privacy_protection:\n                type: boolean\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n    DomainCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n                format: hostname\n              authinfo:\n                type: string\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              duration:\n                type: integer\n                minimum: 1\n                maximum: 10\n                exclusiveMinimum: false\n              owner_handle_code:\n                type: string\n              admin_handle_code:\n                type: string\n              tech_handle_code:\n                type: string\n              zone_handle_code:\n                type: string\n              nameserver:\n                type: array\n                minItems: 2\n                items:\n                  $ref: '#/components/schemas/DomainRequestNameserver'\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - name\n              - project_id\n              - owner_handle_code\n              - admin_handle_code\n              - tech_handle_code\n              - zone_handle_code\n              - nameserver\n    DomainUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              owner_handle_code:\n                type: string\n              admin_handle_code:\n                type: string\n              tech_handle_code:\n                type: string\n              zone_handle_code:\n                type: string\n              nameserver:\n                type: array\n                minItems: 2\n                items:\n                  $ref: '#/components/schemas/DomainRequestNameserver'\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n    DomainScheduleDeleteRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              date:\n                type: string\n            required:\n              - date\n    SSLContactCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n              first_name:\n                type: string\n              last_name:\n                type: string\n              organisation:\n                type: string\n              email:\n                type: string\n                format: email\n              phone:\n                type: string\n              fax:\n                type: string\n              address:\n                type: string\n              additional_address:\n                type: string\n              city:\n                type: string\n              postal_code:\n                type: string\n              region:\n                type: string\n              country_code:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - first_name\n              - last_name\n              - organisation\n              - email\n              - phone\n              - address\n              - city\n              - postal_code\n              - country_code\n    SSLOrganisationCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n              name:\n                type: string\n              division:\n                type: string\n              address:\n                type: string\n              additional_address:\n                type: string\n              city:\n                type: string\n              postal_code:\n                type: string\n              region:\n                type: string\n              country_code:\n                type: string\n              phone:\n                type: string\n              fax:\n                type: string\n              registration_number:\n                type: string\n              duns:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - name\n              - address\n              - city\n              - postal_code\n              - country_code\n              - phone\n    SSLCertificateCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              type_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              organisation_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              organisation:\n                type: object\n              admin_contact_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              admin_contact:\n                type: object\n              tech_contact_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              tech_contact:\n                type: object\n              csr:\n                type: string\n              validation_method:\n                type: string\n                enum:\n                  - DNS\n                  - HTTPS\n              approver_email:\n                type: string\n                format: email\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - type_id\n              - csr\n              - validation_method\n              - approver_email\n    SSHKeyCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              title:\n                type: string\n              public_key:\n                type: string\n                description: RSA Public Key in OpenSSH or RFC 4716 Format\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - title\n              - public_key\n      description: ''\n    ServerCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              zone_id:\n                type: string\n                format: uuid\n              name:\n                type: string\n              variant_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              template_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              backup_id:\n                type: string\n                format: uuid\n                example: 1428d399-8861-40a5-a85f-6ed4c669bae0\n              ssh_keys:\n                type: array\n                items:\n                  type: string\n                  format: uuid\n              no_public_network:\n                type: boolean\n              networks:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ServerCreateRequestNetwork'\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - zone_id\n              - name\n              - variant_id\n              - ssh_keys\n    DNSZoneUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              hostmaster:\n                type: string\n                format: email\n              ns1:\n                type: string\n              ns2:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n    DNSRecordCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              type:\n                type: string\n                enum:\n                  - A\n                  - AAAA\n                  - CNAME\n                  - SRV\n                  - MX\n                  - TXT\n                  - PTR\n              ttl:\n                type: integer\n                minimum: 300\n                maximum: 86400\n              data:\n                type: string\n            required:\n              - name\n              - type\n              - data\n    DNSRecordsUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              type: object\n              properties:\n                name:\n                  type: string\n                type:\n                  type: string\n                  enum:\n                    - A\n                    - AAAA\n                    - CNAME\n                    - SRV\n                    - MX\n                    - TXT\n                    - PTR\n                ttl:\n                  type: integer\n                data:\n                  type: string\n              required:\n                - name\n                - type\n                - data\n    DNSRecordUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              type:\n                type: string\n                enum:\n                  - A\n                  - AAAA\n                  - CNAME\n                  - SRV\n                  - MX\n                  - TXT\n                  - PTR\n              ttl:\n                type: integer\n                maximum: 86400\n                minimum: 300\n              data:\n                type: string\n            required:\n              - name\n              - type\n              - data\n    SubnetCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n              network_id:\n                type: string\n                format: uuid\n              address:\n                type: string\n              prefix:\n                type: integer\n              public:\n                type: boolean\n            required:\n              - network_id\n              - address\n              - prefix\n    NetworkCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              zone_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n              project_id:\n                type: string\n                format: uuid\n              type:\n                $ref: '#/components/schemas/NetworkType'\n              tag:\n                type: integer\n            required:\n              - zone_id\n              - title\n    ServerHostCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              zone_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n              external_id:\n                type: string\n            required:\n              - zone_id\n              - title\n              - external_id\n    ServerMediaCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              zone_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n              external_id:\n                type: string\n            required:\n              - zone_id\n              - title\n              - external_id\n    ServerStorageClassCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              storage_ids:\n                type: array\n                items:\n                  type: string\n                  format: uuid\n              title:\n                type: string\n              replication:\n                type: integer\n            required:\n              - storage_ids\n              - title\n              - replication\n    ServerStorageCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              zone_id:\n                type: string\n                format: uuid\n              external_id:\n                type: string\n            required:\n              - zone_id\n              - external_id\n    ServerTemplateCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              zones:\n                type: object\n              title:\n                type: string\n              root_slot:\n                type: string\n            required:\n              - zones\n              - title\n              - root_slot\n    ServerVariantCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              zone_ids:\n                type: array\n                format: uuid\n                items:\n                  type: string\n              title:\n                type: string\n              cores:\n                type: integer\n              memory:\n                type: integer\n              disk:\n                type: integer\n              storage_class_id:\n                type: string\n                format: uuid\n              legacy:\n                type: boolean\n                deprecated: true\n                default: false\n            required:\n              - zone_ids\n              - title\n              - cores\n              - memory\n              - disk\n              - storage_class_id\n    AvailabilityZoneCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n              config:\n                type: object\n              country_code:\n                type: string\n              city:\n                type: string\n            required:\n              - title\n              - config\n              - country_code\n              - city\n    AvailabilityZoneUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n              config:\n                type: object\n              country_code:\n                type: string\n              city:\n                type: string\n    SubnetAddressCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              address:\n                type: string\n            required:\n              - address\n    ServerNetworkCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              network_id:\n                type: string\n                format: uuid\n            required:\n              - network_id\n    ServerVolumeAttachRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              server_id:\n                type: string\n                format: uuid\n            required:\n              - server_id\n    ServerUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n    ServerResizeRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              variant_id:\n                type: string\n                format: uuid\n              resize_disk:\n                type: boolean\n            required:\n              - variant_id\n    ServerVolumeCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              project_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n              class_id:\n                type: string\n                format: uuid\n              size:\n                type: integer\n              zone_id:\n                type: string\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n            required:\n              - project_id\n              - title\n              - class_id\n              - size\n              - zone_id\n    ServerBackupCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              server_id:\n                type: string\n                format: uuid\n              title:\n                type: string\n            required:\n              - server_id\n    ServerRestoreRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              backup_id:\n                type: string\n                format: uuid\n            required:\n              - backup_id\n    ScheduledServerActionCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                $ref: '#/components/schemas/ServerActionType'\n              interval:\n                $ref: '#/components/schemas/ScheduledServerActionInterval'\n              execute_at:\n                type: string\n              backup_id:\n                type: string\n                format: uuid\n              force:\n                type: boolean\n            required:\n              - type\n              - execute_at\n    ServerFirewallCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n              project_id:\n                type: string\n                format: uuid\n            required:\n              - title\n              - project_id\n    ServerFirewallRuleCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                $ref: '#/components/schemas/ServerFirewallRuleType'\n              addresses:\n                type: array\n                items:\n                  type: string\n              protocol:\n                $ref: '#/components/schemas/ServerFirewallRuleProtocol'\n              ports:\n                type: array\n                items:\n                  type: string\n              description:\n                type: string\n            required:\n              - type\n    ServerFirewallMemberCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              type:\n                $ref: '#/components/schemas/ServerFirewallMemberType'\n              server_id:\n                type: string\n                format: uuid\n              label_name:\n                type: string\n              label_value:\n                type: string\n            required:\n              - type\n    ServerPriceRangeCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              title:\n                type: string\n            required:\n              - title\n    ServerVariantPriceCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              variant_id:\n                type: string\n                format: uuid\n              price:\n                type: number\n              offline_price:\n                type: number\n            required:\n              - variant_id\n              - price\n              - offline_price\n    ServerVariantPriceUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              price:\n                type: number\n              offline_price:\n                type: number\n    ServerPriceRangeAssignmentCreateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              range_id:\n                type: string\n                format: uuid\n              user_id:\n                type: string\n                format: uuid\n              project_id:\n                type: string\n                format: uuid\n            required:\n              - range_id\n    ServerPriceRangeAssignmentUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              range_id:\n                type: string\n                format: uuid\n            required:\n              - range_id\n    ServerVolumeUpdateRequest:\n      content:\n        application/json:\n          schema:\n            type: object\n            properties:\n              labels:\n                type: object\n                additionalProperties:\n                  type: string\n  parameters:\n    ProjectIDFilter:\n      name: 'filter[project_id]'\n      in: query\n      required: false\n      schema:\n        type: string\n        format: uuid\n      description: Project ID Filter\n    PaginationPage:\n      name: page\n      in: query\n      schema:\n        type: integer\n        minimum: 1\n      description: Page\n    PaginationPageSize:\n      name: page_size\n      in: query\n      required: false\n      schema:\n        type: integer\n        default: 10\n      description: Page Size\n    Search:\n      name: search\n      in: query\n      required: false\n      schema:\n        type: string\n      description: Search\n    LabelsFilter:\n      name: 'filter[labels][:name]'\n      in: query\n      required: false\n      schema:\n        type: string\n      description: Filters for the label with the given name. Only checks the value if it's length is greater than 0.\n    WithLabels:\n      name: with_labels\n      in: query\n      required: false\n      schema:\n        type: boolean\n      description: 'If length 0, true or 1 is given, the labels will be added to the response objects.'\nsecurity:\n  - AuthToken: []\n"
		}
	},
	"Error": "parse: parse spec: parse components: responses: \"NetworkSingleResponse\": content: application/json: schema: parse schema: property \"messages\": parse schema: resolve \"./auth-api.v1.0.yaml#/components/schemas/ResponseMessages\": find schema: external base \"./auth-api.v1.0.yaml\" is not supported"
}