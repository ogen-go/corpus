{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/networknt/model-config"
		},
		"file": {
			"name": "openapi.yaml",
			"path": "rest/light-controller/openapi.yaml",
			"content": "---\nopenapi: \"3.0.2\"\ninfo:\n  title: \"Control Panel - OpenAPI 3.0\"\n  description: \"All light-4j services can register here during startup and deregister\\\n    \\ during the shutdown. It ensures that the control panel has a snapshot of running\\\n    \\ services all the time. The control panel also sends health check requests to\\\n    \\ each service continuously to ensure its healthy and server info request to assist\\\n    \\ the service certification. With the information above, this service can serve\\\n    \\ as a global discovery for service to service invocations.\"\n  termsOfService: \"http://swagger.io/terms/\"\n  contact:\n    email: \"stevehu@gmail.com\"\n  license:\n    name: \"Apache 2.0\"\n    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n  version: \"1.0.0\"\nservers:\n- url: \"https://lightapi.net\"\npaths:\n  /services:\n    post:\n      summary: \"Add a new service with opitonal health checks\"\n      description: \"Register a service during its startup\"\n      operationId: \"register\"\n      requestBody:\n        description: \"Register a service with optional health checks\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Service\"\n        required: true\n      responses:\n        \"200\":\n          description: \"Successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: \"Invalid Service Register Request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n    delete:\n      summary: \"Remove a service and its health checks from the registry\"\n      description: \"Deregister a service during its shutdown\"\n      operationId: \"deregister\"\n      parameters:\n      - name: \"serviceId\"\n        in: \"query\"\n        description: \"ID of the service\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"tag\"\n        in: \"query\"\n        description: \"Return only nodes with the tag\"\n        required: false\n        schema:\n          type: \"string\"\n      - name: \"protocol\"\n        in: \"query\"\n        description: \"Return only nodes with the prototol\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"address\"\n        in: \"query\"\n        description: \"IP address of the node\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"port\"\n        in: \"query\"\n        description: \"Port number of the node\"\n        required: true\n        schema:\n          type: \"integer\"\n      - name: \"checkInterval\"\n        in: \"query\"\n        description: \"Check interval from the portal-registry configuration.\"\n        required: true\n        schema:\n          type: \"integer\"\n      responses:\n        \"200\":\n          description: \"Successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: \"Invalid Service Register Request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n    get:\n      summary: \"Query all healthy services\"\n      description: \"Returns a list of services\"\n      operationId: \"getHealthService\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/lookup:\n    get:\n      summary: \"Discover service with serviceId and optional tag\"\n      description: \"Returns a list of nodes for the service\"\n      operationId: \"getLookupService\"\n      parameters:\n      - name: \"serviceId\"\n        in: \"query\"\n        description: \"ID of the service\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"tag\"\n        in: \"query\"\n        description: \"Return only nodes with the tag\"\n        required: false\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/chaosmonkey/assault:\n    post:\n      summary: \"Initiate a specfic chaosmonkey test\"\n      operationId: \"postChaosMonkeyAssault\"\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/AssaultInitPost\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/chaosmonkey:\n    post:\n      summary: \"Configure chaos monkey handlers for a specific service\"\n      operationId: \"postChaosMonkey\"\n      requestBody:\n        description: \"settings for chaos monkey\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/ChaosMonkeyAssaultConfigPost\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n    get:\n      summary: \"Get chaosmonkey handlers and their configurations on a specific service\"\n      operationId: \"getChaosMonkey\"\n      parameters:\n      - name: \"address\"\n        in: \"query\"\n        description: \"get info on a specific address\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"protocol\"\n        in: \"query\"\n        description: \"get info on a specific protocol\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"port\"\n        in: \"query\"\n        description: \"get info on a specific port\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n  /services/check:\n    get:\n      summary: \"Retrieve all health check statuses from the cluster\"\n      description: \"Get the live check statuses\"\n      operationId: \"getHealthChecks\"\n      parameters:\n      - name: \"local\"\n        in: \"query\"\n        description: \"Only return the local node health checks if it is true\"\n        required: false\n        schema:\n          type: \"boolean\"\n      - name: \"stale\"\n        in: \"query\"\n        description: \"Only return the stale health checks if it is true\"\n        required: false\n        schema:\n          type: \"boolean\"\n      responses:\n        \"200\":\n          description: \"Successful operation\"\n        \"400\":\n          description: \"Invalid Health Check Request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n    put:\n      summary: \"TTL type check to set the status of the check to pass or fail\"\n      description: \"TTL check to from the service for pass or not\"\n      operationId: \"checkStatus\"\n      requestBody:\n        description: \"TTL check to notify if the service is pass or not\"\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/CheckStatus\"\n        required: true\n      responses:\n        \"200\":\n          description: \"Successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"400\":\n          description: \"Invalid Service Register Request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/check/{id}:\n    get:\n      summary: \"Retrieve the current check status for a check id\"\n      description: \"Get the live check status for the node\"\n      operationId: \"getCheckStatus\"\n      parameters:\n      - name: \"id\"\n        in: \"path\"\n        description: \"id of the check object in format serviceId|tag:address:port\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"Successful operation\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Check\"\n        \"400\":\n          description: \"Invalid Service Register Request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/info:\n    get:\n      summary: \"Query service info by node of address and port\"\n      description: \"Returns a service info object\"\n      operationId: \"getServiceInfo\"\n      parameters:\n      - name: \"address\"\n        in: \"query\"\n        description: \"get info on a specific address\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"protocol\"\n        in: \"query\"\n        description: \"get info on a specific protocol\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"port\"\n        in: \"query\"\n        description: \"get info on a specific port\"\n        required: true\n        schema:\n          type: \"string\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/logger/content:\n    post:\n      summary: \"Query the contents of a log file.\"\n      description: \"Returns a JSON body of log entries\"\n      operationId: \"postServiceLoggerContent\"\n      requestBody:\n        description: \"Log Retrieval Search.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LogRetrieval\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n  /services/logger:\n    get:\n      summary: \"Query logger for a particular instance\"\n      description: \"Returns a list of loggers with logging levels\"\n      operationId: \"getServiceLogger\"\n      parameters:\n      - name: \"protocol\"\n        in: \"query\"\n        description: \"target server protocol, http or https.\"\n        required: true\n        schema:\n          type: \"string\"\n          enum:\n          - \"http\"\n          - \"https\"\n      - name: \"address\"\n        in: \"query\"\n        description: \"target server address.\"\n        required: true\n        schema:\n          type: \"string\"\n      - name: \"port\"\n        in: \"query\"\n        description: \"target server port number.\"\n        required: true\n        schema:\n          type: \"integer\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\n    post:\n      summary: \"Update the logging level for a particular instance\"\n      description: \"Returns a list of loggers with logging levels after updated.\"\n      operationId: \"postServiceLogger\"\n      requestBody:\n        description: \"Service that is updating loggers.\"\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/LoggerConfig\"\n      responses:\n        \"200\":\n          description: \"successful operation\"\n        \"400\":\n          description: \"Invalid request\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n        \"404\":\n          description: \"Service not found\"\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Status\"\n      security:\n      - portal_auth:\n        - \"A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2\"\ncomponents:\n  schemas:\n    AssaultType:\n      type: \"string\"\n      enum:\n      - \"com.networknt.chaos.ExceptionAssaultHandler\"\n      - \"com.networknt.chaos.KillappAssaultHandler\"\n      - \"com.networknt.chaos.LatencyAssaultHandler\"\n      - \"com.networknt.chaos.MemoryAssaultHandler\"\n    AssaultInitPost:\n      type: \"object\"\n      properties:\n        address:\n          type: \"string\"\n        protocol:\n          type: \"string\"\n        port:\n          type: \"integer\"\n        assaultType:\n          $ref: \"#/components/schemas/AssaultType\"\n    ChaosMonkeyAssaultConfigPost:\n      type: \"object\"\n      properties:\n        address:\n          type: \"string\"\n        protocol:\n          type: \"string\"\n        port:\n          type: \"integer\"\n        assaultType:\n          $ref: \"#/components/schemas/AssaultType\"\n        assaultConfig:\n          type: \"object\"\n          additionalProperties: true\n    MemoryAssault:\n      type: \"object\"\n      properties:\n        enabled:\n          type: \"boolean\"\n        bypass:\n          type: \"boolean\"\n        level:\n          type: \"integer\"\n          minimum: 1\n        memoryMillisecondsHoldFilledMemory:\n          type: \"integer\"\n          minimum: 1500\n        memoryMillisecondsWaitFilledMemory:\n          type: \"integer\"\n          minimum: 100\n          maximum: 30000\n        memoryFillIncrementFraction:\n          type: \"number\"\n          minimum: 0.1\n          maximum: 1.0\n        memoryFillTargetFraction:\n          type: \"number\"\n          minimum: 0.01\n          maximum: 0.95\n    LatencyAssault:\n      type: \"object\"\n      properties:\n        enabled:\n          type: \"boolean\"\n        bypass:\n          type: \"boolean\"\n        level:\n          type: \"integer\"\n          minimum: 1\n        latencyRangeStart:\n          type: \"integer\"\n        latencyRangeEnd:\n          type: \"integer\"\n    ExceptionAssault:\n      type: \"object\"\n      properties:\n        enabled:\n          type: \"boolean\"\n        bypass:\n          type: \"boolean\"\n        level:\n          type: \"integer\"\n          minimum: 1\n    KillAppAssault:\n      type: \"object\"\n      properties:\n        enabled:\n          type: \"boolean\"\n        bypass:\n          type: \"boolean\"\n        level:\n          type: \"integer\"\n          minimum: 1\n    Service:\n      type: \"object\"\n      properties:\n        serviceId:\n          type: \"string\"\n          description: \"a unique ID for the service across the organization.\"\n          example: \"com.networknt.petstore.v1\"\n        name:\n          type: \"string\"\n          description: \"a logical name of the service.\"\n          example: \"com.networknt.petstore.v1\"\n        tag:\n          type: \"string\"\n          description: \"a list of tags to assign to the service.\"\n        protocol:\n          type: \"string\"\n          description: \"http or https for the server.\"\n        address:\n          type: \"string\"\n          description: \"The address of the service.\"\n        port:\n          type: \"integer\"\n          description: \"The port number of the service\"\n          example: 8080\n        check:\n          $ref: \"#/components/schemas/Check\"\n      required:\n      - \"serviceId\"\n      - \"protocol\"\n      - \"address\"\n      - \"port\"\n    Check:\n      type: \"object\"\n      properties:\n        name:\n          type: \"string\"\n          description: \"The name of the check\"\n        id:\n          type: \"string\"\n          description: \"A unique ID for this check on the node\"\n        interval:\n          type: \"integer\"\n          description: \"The frequency at which to run this check in millisecond\"\n        notes:\n          type: \"string\"\n          description: \"Arbitrary information for humans.\"\n        deregisterCriticalServiceAfter:\n          type: \"integer\"\n          description: \"Check associated with a service should deregister after this\\\n            \\ time in millisecond\"\n        http:\n          type: \"string\"\n          description: \"An HTTP check to perform a GET request against the value of\\\n            \\ HTTP every Interval.\"\n        tlsSkipVerify:\n          type: \"boolean\"\n          description: \"If the certificate for an HTTPS check should not be verified.\"\n      required:\n      - \"id\"\n      - \"interval\"\n      - \"deregisterCriticalServiceAfter\"\n    CheckStatus:\n      type: \"object\"\n      properties:\n        id:\n          type: \"string\"\n          description: \"A unique ID for the check with serviceId, address and port\\\n            \\ combination\"\n        pass:\n          type: \"boolean\"\n          description: \"If the check is passed or failed\"\n        checkInterval:\n          type: \"integer\"\n          description: \"Check interval from the portal-registry configuration to update\\\n            \\ the health\"\n    LoggerConfig:\n      type: \"object\"\n      properties:\n        protocol:\n          type: \"string\"\n          description: \"Target server protocol\"\n        address:\n          type: \"string\"\n          description: \"Target server IP address\"\n        port:\n          type: \"integer\"\n          description: \"Target server port number\"\n        loggers:\n          type: \"array\"\n          description: \"A list of LoggerInfo entries\"\n          items:\n            $ref: \"#/components/schemas/LoggerInfo\"\n      required:\n      - \"protocol\"\n      - \"address\"\n      - \"port\"\n      - \"loggers\"\n    LogRetrieval:\n      type: \"object\"\n      properties:\n        protocol:\n          type: \"string\"\n          description: \"Target server protocol\"\n          enum:\n          - \"http\"\n          - \"https\"\n        address:\n          type: \"string\"\n          description: \"Target server IP address\"\n        port:\n          type: \"integer\"\n          description: \"Target server port number\"\n        loggerName:\n          type: \"string\"\n          description: \"Logger name\"\n        loggerLevel:\n          type: \"string\"\n          description: \"Logger level\"\n          enum:\n          - \"INFO\"\n          - \"DEBUG\"\n          - \"ERROR\"\n          - \"WARN\"\n          - \"TRACE\"\n        startTime:\n          type: \"string\"\n          description: \"Start time\"\n        endTime:\n          type: \"string\"\n          description: \"End time\"\n      required:\n      - \"protocol\"\n      - \"address\"\n      - \"port\"\n    LoggerInfo:\n      type: \"object\"\n      properties:\n        name:\n          type: \"string\"\n          description: \"Name of the logger\"\n        level:\n          type: \"string\"\n          enum:\n          - \"ERROR\"\n          - \"WARN\"\n          - \"INFO\"\n          - \"DEBUG\"\n          - \"TRACE\"\n          description: \"Logging level\"\n      required:\n      - \"name\"\n      - \"level\"\n    Status:\n      type: \"object\"\n      properties:\n        statusCode:\n          type: \"integer\"\n        code:\n          type: \"string\"\n        message:\n          type: \"string\"\n        description:\n          type: \"string\"\n        severity:\n          type: \"string\"\n      required:\n      - \"statusCode\"\n      - \"code\"\n      - \"message\"\n      - \"description\"\n  securitySchemes:\n    portal_auth:\n      type: \"oauth2\"\n      flows:\n        clientCredentials:\n          tokenUrl: \"https://lightapi.net/token\"\n          scopes:\n            A8E73740C0041C03D67C3A951AA1D7533C8F9F2FB57D7BA107210B9BC9E06DA2: \"default\"\n"
		}
	},
	"Error": "callback: json: cannot unmarshal number 0.1 into Go struct field Schema.minimum of type int64"
}