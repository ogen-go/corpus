{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/restful-ma/thresholds"
		},
		"file": {
			"name": "netatmo.net-1.1.1-swagger.yaml",
			"size": 0,
			"path": "benchmark-repository/openapi/netatmo.net-1.1.1-swagger.yaml",
			"byteSize": 67338,
			"content": "openapi: 3.0.0\ninfo:\n  contact:\n    email: contact-api@netatmo.com\n    name: Netatmo\n  description: \u003ch3\u003eWelcome to the Netatmo swagger on-line documentation !\u003c/h3\u003eThis site is\n    a complement to the official \u003ca href=\"https://dev.netatmo.com/\"\u003eNetatmo\n    developper documentation\u003c/a\u003e using swagger to bring interactivity and easy\n    testing of requests with the \"try it\" button (authenticate with the\n    authorization code 0Auth2 flow by clicking the authenticate button in the\n    methods). You can find the source code for this site can be found in the\n    project \u003ca\n    href=\"https://github.com/cbornet/netatmo-swagger-ui\"\u003enetatmo-swagger-ui\u003c/a\u003e.\n    You can also use the online \u003ca href=\"./swagger.json\"\u003eswagger declaration\u003c/a\u003e\n    file to generate code or static documentation (see \u003ca\n    href=\"https://github.com/cbornet/netatmo-swagger-api\"\u003enetatmo-swagger-api\u003c/a\u003e).\n  license:\n    name: \"Netatmo : Terms of Service\"\n    url: https://dev.netatmo.com/dev/resources/legal/introduction\n  termsOfService: https://dev.netatmo.com/dev/resources/legal/introduction\n  title: Netatmo\n  version: 1.1.1\n  x-apiClientRegistration:\n    url: https://dev.netatmo.com/dev/createanapp\n  x-apisguru-categories:\n    - iot\n  x-logo:\n    url: https://twitter.com/netatmo/profile_image?size=original\n  x-origin:\n    - format: swagger\n      url: https://raw.githubusercontent.com/cbornet/netatmo-swagger-decl/master/swagger.json\n      version: \"2.0\"\n  x-providerName: netatmo.net\n  x-unofficialSpec: true\nexternalDocs:\n  description: Netatmo reference API documentation\n  url: https://dev.netatmo.com/dev/resources/technical/reference\ntags:\n  - description: Weather station specific methods\n    name: station\n  - description: Healthy Home Coach specific methods\n    name: healthyhomecoach\n  - description: Thermostat specific methods\n    name: thermostat\n  - description: Welcome specific methods\n    name: welcome\n  - description: Public stations specific methods\n    name: public\n  - description: Partner API specific methods\n    name: partner\npaths:\n  /addwebhook:\n    get:\n      deprecated: false\n      description: |\n        Links a callback url to a user.\n      operationId: addwebhook\n      parameters:\n        - description: Your webhook callback url\n          in: query\n          name: url\n          required: true\n          schema:\n            type: string\n        - description: Webhooks are only available for Welcome, enter app_camera.\n          in: query\n          name: app_type\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomeWebhookResponse\"\n      security:\n        - code_oauth: []\n        - password_oauth: []\n      tags:\n        - welcome\n  /createnewschedule:\n    post:\n      description: The method createnewschedule creates a new schedule stored in the backup\n        list.\n      operationId: createnewschedule\n      parameters:\n        - description: The relay id\n          in: query\n          name: device_id\n          required: true\n          schema:\n            type: string\n        - description: The thermostat id\n          in: query\n          name: module_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/NAThermProgram\"\n        description: The thermostat program (zones and timetable)\n        required: true\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NANewScheduleResponse\"\n      security:\n        - code_oauth:\n            - write_thermostat\n        - password_oauth: []\n      tags:\n        - thermostat\n  /devicelist:\n    get:\n      deprecated: true\n      description: \u003e\n        The method devicelist returns the list of devices owned by the user, and\n        their modules.\n\n        A device is identified by its _id (which is its mac address) and each device may have one, several or no modules, also identified by an _id.\n      operationId: devicelist\n      parameters:\n        - description: Defines which device type will be returned by devicelist. It could\n            be app_thermostat or app_station (by default if not provided)\n          in: query\n          name: app_type\n          required: false\n          schema:\n            type: string\n            enum:\n              - app_thermostat\n              - app_station\n        - description: Specify a device_id if you want to retrieve only this device\n            informations.\n          in: query\n          name: device_id\n          required: false\n          schema:\n            type: string\n        - description: When set to \"true\", the favorite devices of the user are returned.\n            This flag is available only if the devices requested are Weather\n            Stations.\n          in: query\n          name: get_favorites\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NADeviceListResponse\"\n      security:\n        - code_oauth:\n            - read_thermostat\n            - read_station\n        - password_oauth: []\n      tags:\n        - station\n        - thermostat\n        - partner\n  /dropwebhook:\n    get:\n      deprecated: false\n      description: |\n        Dissociates a webhook from a user.\n      operationId: dropwebhook\n      parameters:\n        - description: For Welcome, use app_camera\n          in: query\n          name: app_type\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomeWebhookResponse\"\n      security:\n        - code_oauth: []\n        - password_oauth: []\n      tags:\n        - welcome\n  /getcamerapicture:\n    get:\n      deprecated: false\n      description: |\n        Returns the snapshot associated to an event.\n      operationId: getcamerapicture\n      parameters:\n        - description: id of the image (can be retrieved as 'id' in 'face' in Gethomedata,\n            or as 'id' in 'snapshot' in Getnextevents, Getlasteventof and\n            Geteventsuntil)\n          in: query\n          name: image_id\n          required: true\n          schema:\n            type: string\n        - description: Security key to access snapshots.\n          in: query\n          name: key\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                format: byte\n                type: string\n      security:\n        - code_oauth: []\n        - password_oauth: []\n      tags:\n        - welcome\n  /geteventsuntil:\n    get:\n      deprecated: false\n      description: |\n        Returns the snapshot associated to an event.\n      operationId: geteventsuntil\n      parameters:\n        - description: ID of the Home you're interested in\n          in: query\n          name: home_id\n          required: true\n          schema:\n            type: string\n        - description: Your request will retrieve all the events until this one\n          in: query\n          name: event_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomeEventsResponse\"\n      security:\n        - code_oauth:\n            - access_camera\n            - read_camera\n        - password_oauth: []\n      tags:\n        - welcome\n  /gethomecoachsdata:\n    get:\n      description: The method gethomecoachsdata Returns data from a user Healthy Home Coach\n        Station (measures and device specific data).\n      operationId: gethomecoachsdata\n      parameters:\n        - description: Id of the device you want to retrieve information of\n          in: query\n          name: device_id\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAHealthyHomeCoachDataResponse\"\n      tags:\n        - healthyhomecoach\n  /gethomedata:\n    get:\n      deprecated: false\n      description: |\n        Returns information about users homes and cameras.\n      operationId: gethomedata\n      parameters:\n        - description: Specify if you're looking for the events of a specific Home.\n          in: query\n          name: home_id\n          required: false\n          schema:\n            type: string\n        - description: Number of events to retrieve. Default is 30.\n          in: query\n          name: size\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomeHomeDataResponse\"\n      security:\n        - code_oauth:\n            - access_camera\n            - read_camera\n        - password_oauth: []\n      tags:\n        - welcome\n  /getlasteventof:\n    get:\n      deprecated: false\n      description: |\n        Returns most recent events.\n      operationId: getlasteventof\n      parameters:\n        - description: ID of the Home you're interested in\n          in: query\n          name: home_id\n          required: true\n          schema:\n            type: string\n        - description: Your request will retrieve all events of the given home until the\n            most recent event of the given person\n          in: query\n          name: person_id\n          required: true\n          schema:\n            type: string\n        - description: Number of events to retrieve. Default is 30.\n          in: query\n          name: offset\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomeEventsResponse\"\n      security:\n        - code_oauth:\n            - access_camera\n            - read_camera\n        - password_oauth: []\n      tags:\n        - welcome\n  /getmeasure:\n    get:\n      description: |\n        The method getmeasure returns the measurements of a device or a module.\n      operationId: getmeasure\n      parameters:\n        - description: Id of the device whose module's measurements you want to retrieve.\n            This _id can be found in the user's devices field.\n          in: query\n          name: device_id\n          required: true\n          schema:\n            type: string\n        - description: If you don't specify any module_id you will retrieve the device's\n            measurements. If you specify a module_id you will retrieve the\n            module's measurements.\n          in: query\n          name: module_id\n          required: false\n          schema:\n            type: string\n        - description: |\n            Defines the time interval between two measurements.\n            Possible values :\n            max -\u003e every value stored will be returned\n            30min -\u003e 1 value every 30 minutes\n            1hour -\u003e 1 value every hour\n            3hours -\u003e 1 value every 3 hours\n            1day -\u003e 1 value per day\n            1week -\u003e 1 value per week\n            1month -\u003e 1 value per month\n          in: query\n          name: scale\n          required: true\n          schema:\n            type: string\n            enum:\n              - max\n              - 30min\n              - 1hour\n              - 3hours\n              - 1day\n              - 1week\n              - 1month\n        - description: \u003e\n            Sets the type of measurement you want to retrieve.\n\n            The different types of measurements must be given in a comma separated list of strings.\n\n            Example: type=\"Temperature,Humidity\"\n\n            Depending on the device's type and the scale, different measurements are available:\n\n            For Weather Station :\n\n              max -\u003e Temperature, CO2, Humidity, Pressure, Noise, Rain (if\n            module_id is a rain sensor)\n\n              30min, 1hour, 3hours -\u003e Temperature, CO2, Humidity, Pressure,\n            Noise, min_temp, max_temp, min_hum, max_hum, min_pressure, max_pressure, min_noise, max_noise, sum_rain (if module_id is a rain sensor)\n\n              1day, 1week, 1month -\u003e Temperature, Co2, Humidity, Pressure, Noise,\n            min_temp, date_min_temp, max_temp, date_max_temp, min_hum, date_min_hum, max_hum, date_max_hum, min_pressure, date_min_pressure, max_pressure, date_max_pressure, min_noise, date_min_noise, max_noise, date_max_noise, date_min_co2, date_max_co2, sum_rain (if module_id is a rain sensor)\n\n            Please note, the measurements sent in the response will be in the same order as in this list.\n\n            All measurements are expressed in metric units:\n\n              Temperature: Celsius\n\n              Humidity: %\n\n              Co2: ppm\n\n              Pressure: mbar\n\n              Noise: db\n\n              Rain: mm\n\n            For Thermostat:\n\n              max -\u003e Temperature, Sp_Temperature, BoilerOn, BoilerOff\n\n              30min, 1hour, 3hours -\u003e Temperature, Sp_Temperature, min_temp,\n            max_temp, sum_boiler_on, sum_boiler_off\n\n              1day, 1week, 1month -\u003e Temperature, min_temp, date_min_temp,\n            max_temp, sum_boiler_on, sum_boiler_off\n\n              where\n\n            Temperature: Celsius\n\n              Sp_Temperature (temperature setpoint): Celsius\n\n              BoilerOn: Duration, since the previous data point, during which the\n            boiler has been on (in seconds)\n\n              BoilerOff : Duration, since the previous data point, during which\n            the boiler has been off (in seconds).\n\n              sum_boiler_on: Total duration during which the boiler has been on,\n            at a specific scale (in seconds).\n\n              sum_boiler_off: Total duration during which the boiler has been\n            off, at a specific scale (in seconds).\n          in: query\n          name: type\n          required: true\n          style: form\n          explode: false\n          schema:\n            type: array\n            items:\n              enum:\n                - Temperature\n                - CO2\n                - Humidity\n                - Pressure\n                - Noise\n                - Rain\n                - Sp_Temperature\n                - BoilerOn\n                - BoilerOff\n                - min_temp\n                - date_min_temp\n                - max_temp\n                - date_max_temp\n                - min_hum\n                - date_min_hum\n                - max_hum\n                - date_max_hum\n                - min_pressure\n                - date_min_pressure\n                - max_pressure\n                - date_max_pressure\n                - min_noise\n                - date_min_noise\n                - max_noise\n                - date_max_noise\n                - date_min_co2\n                - date_max_co2\n                - sum_rain\n                - sum_boiler_on\n                - sum_boiler_off\n              type: string\n        - description: |\n            Starting timestamp (utc) of the requested measurements.\n            Please note measurement retrieving is limited to 1024 measurements.\n          in: query\n          name: date_begin\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: \u003e\n            Ending timestamp (utc) of the request measurements.\n\n            If you want only the last measurement, do not provide date_begin, and set date_end to \"last\".\n          in: query\n          name: date_end\n          required: false\n          schema:\n            type: string\n        - description: Limits the number of measurements returned (default \u0026 max is 1024)\n          in: query\n          name: limit\n          required: false\n          schema:\n            type: integer\n            format: int32\n            maximum: 1024\n        - description: \u003e\n            Allows you to choose the format of the answer.\n\n            If you build a mobile app and bandwith usage is an issue, use optimize = true.\n\n            Use optimize = false, for an easier parse. In this case, values are indexed by sorted timestamp.\n\n            Example of un-optimized response :\n\n            {\"status\": \"ok\",\n              \"body\": {\n                \"1347575400\": [18.3,39],\n                \"1347586200\": [20.6,48]\n              },\n            \"time_exec\": 0.012136936187744}\n\n            If optimize is set true, measurements are returned as an array of series of regularly spaced measurements. Each series is defined by a beginning time beg_time and a step between measurements, step_time:\n\n            {\"status\": \"ok\",\n              \"body\": [\n                {\"beg_time\": 1347575400,\n                 \"step_time\": 10800,\n                 \"value\":\n                    [[18.3,39],\n                    [ 20.6,48]]\n                }],\n            \"time_exec\": 0.014238119125366}\n\n            Default value is true.\n          in: query\n          name: optimize\n          required: false\n          schema:\n            type: boolean\n        - description: \u003e\n            In scales higher than max, since the data is aggregated, the\n            timestamps returned are by default offset by +(scale/2).\n\n            For instance, if you ask for measurements at a daily scale, you will receive data timestamped at 12:00 if real_time is set to false (default case), and timestamped at 00:00 if real_time is set to true.\n\n            NB : The servers always store data with real_time set to true and data are offset by this parameter AFTER having being time-filtered, thus you could have data after date_end if real_time is set to false.\n          in: query\n          name: real_time\n          required: false\n          schema:\n            type: boolean\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAMeasureResponse\"\n      security:\n        - code_oauth:\n            - read_thermostat\n            - read_station\n        - password_oauth: []\n      tags:\n        - station\n        - thermostat\n        - partner\n        - public\n  /getnextevents:\n    get:\n      deprecated: false\n      description: |\n        Returns previous events.\n      operationId: getnextevents\n      parameters:\n        - description: ID of the Home you're interested in\n          in: query\n          name: home_id\n          required: true\n          schema:\n            type: string\n        - description: Your request will retrieve events occured before this one\n          in: query\n          name: event_id\n          required: true\n          schema:\n            type: string\n        - description: Number of events to retrieve. Default is 30.\n          in: query\n          name: size\n          required: false\n          schema:\n            type: integer\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomeEventsResponse\"\n      security:\n        - code_oauth:\n            - access_camera\n            - read_camera\n        - password_oauth: []\n      tags:\n        - welcome\n  /getstationsdata:\n    get:\n      description: The method getstationsdata Returns data from a user Weather Stations\n        (measures and device specific data).\n      operationId: getstationsdata\n      parameters:\n        - description: Id of the device you want to retrieve information of\n          in: query\n          name: device_id\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAStationDataResponse\"\n      tags:\n        - station\n  /getthermostatsdata:\n    get:\n      description: The method getthermostatsdata returns information about user's\n        thermostats such as their last measurements.\n      operationId: getthermostatsdata\n      parameters:\n        - description: Id of the device you want to retrieve information of\n          in: query\n          name: device_id\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAThermostatDataResponse\"\n      tags:\n        - thermostat\n  /getthermstate:\n    get:\n      deprecated: true\n      description: The method getthermstate returns the last Thermostat measurements, its\n        current weekly schedule, and, if present, its current manual temperature\n        setpoint.\n      operationId: getthermstate\n      parameters:\n        - description: The relay id\n          in: query\n          name: device_id\n          required: true\n          schema:\n            type: string\n        - description: The thermostat id\n          in: query\n          name: module_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAThermStateResponse\"\n      security:\n        - code_oauth:\n            - read_thermostat\n        - password_oauth: []\n      tags:\n        - thermostat\n        - partner\n  /getuser:\n    get:\n      deprecated: true\n      description: \u003e\n        The method getuser returns information about a user such as prefered\n        language, prefered units, and list of devices.\n      operationId: getuser\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAUserResponse\"\n      security:\n        - code_oauth: []\n        - password_oauth: []\n      tags:\n        - station\n        - thermostat\n  /partnerdevices:\n    get:\n      description: The method partnerdevices returns the list of device_id to which your\n        partner application has access to.\n      operationId: partnerdevices\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAPartnerDevicesResponse\"\n      security:\n        - code_oauth: []\n        - password_oauth: []\n      tags:\n        - partner\n  /setpersonsaway:\n    get:\n      deprecated: false\n      description: \u003e\n        Sets a person as 'Away' or the Home as 'Empty'. The event will be added\n        to the user’s timeline.\n      operationId: setpersonsaway\n      parameters:\n        - description: ID of the Home you're interested in\n          in: query\n          name: home_id\n          required: true\n          schema:\n            type: string\n        - description: If a person_id is specified, that person will be set as 'Away'. If\n            no person_id is specified, the Home will be set as 'Empty'.\n          in: query\n          name: person_id\n          required: false\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAWelcomePersonsAwayResponse\"\n      security:\n        - code_oauth:\n            - write_camera\n        - password_oauth: []\n      tags:\n        - welcome\n  /setthermpoint:\n    post:\n      description: The method setthermpoint changes the Thermostat manual temperature\n        setpoint.\n      operationId: setthermpoint\n      parameters:\n        - description: The relay id\n          in: query\n          name: device_id\n          required: true\n          schema:\n            type: string\n        - description: The thermostat id\n          in: query\n          name: module_id\n          required: true\n          schema:\n            type: string\n        - description: Chosen setpoint_mode\n          in: query\n          name: setpoint_mode\n          required: true\n          schema:\n            type: string\n            enum:\n              - program\n              - away\n              - hg\n              - manual\n              - off\n              - max\n        - description: When using the manual or max setpoint_mode, this parameter defines\n            when the setpoint expires.\n          in: query\n          name: setpoint_endtime\n          required: false\n          schema:\n            type: integer\n            format: int32\n        - description: When using the manual setpoint_mode, this parameter defines the\n            temperature setpoint (in Celcius) to use.\n          in: query\n          name: setpoint_temp\n          required: false\n          schema:\n            type: number\n            format: float\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAOkResponse\"\n      security:\n        - code_oauth:\n            - write_thermostat\n        - password_oauth: []\n      tags:\n        - thermostat\n  /switchschedule:\n    post:\n      description: The method switchschedule switches the Thermostat's schedule to another\n        existing schedule.\n      operationId: switchschedule\n      parameters:\n        - description: The relay id\n          in: query\n          name: device_id\n          required: true\n          schema:\n            type: string\n        - description: The thermostat id\n          in: query\n          name: module_id\n          required: true\n          schema:\n            type: string\n        - description: \u003e\n            The schedule id. It can be found in the getthermstate response,\n            under the keys \"therm_program_backup\" and \"therm_program\".\n          in: query\n          name: schedule_id\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAOkResponse\"\n      security:\n        - code_oauth:\n            - write_thermostat\n        - password_oauth: []\n      tags:\n        - thermostat\n  /syncschedule:\n    post:\n      description: The method syncschedule changes the Thermostat weekly schedule.\n      operationId: syncschedule\n      parameters:\n        - description: The relay id\n          in: query\n          name: device_id\n          required: true\n          schema:\n            type: string\n        - description: The thermostat id\n          in: query\n          name: module_id\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          text/plain:\n            schema:\n              $ref: \"#/components/schemas/NAThermProgram\"\n        description: The thermostat program (zones, timetable and name)\n        required: true\n      responses:\n        \"200\":\n          description: Successful response\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/NAOkResponse\"\n      security:\n        - code_oauth:\n            - write_thermostat\n        - password_oauth: []\n      tags:\n        - thermostat\nservers:\n  - url: https://api.netatmo.net/api\ncomponents:\n  securitySchemes:\n    code_oauth:\n      type: oauth2\n      flows:\n        authorizationCode:\n          authorizationUrl: https://api.netatmo.net/oauth2/authorize\n          tokenUrl: https://api.netatmo.net/oauth2/token\n          scopes:\n            access_camera: Access welcome camera\n            read_camera: Read welcome camera's data\n            read_station: Read weather station's data\n            read_thermostat: Read thermostat's data\n            write_camera: Write welcome camera's data\n            write_thermostat: Configure the thermostat\n    password_oauth:\n      type: oauth2\n      flows:\n        password:\n          tokenUrl: https://api.netatmo.net/oauth2/token\n          scopes: {}\n  schemas:\n    NADashboardData:\n      properties:\n        AbsolutePressure:\n          description: Real measured pressure @ time_utc (in mb)\n          format: float\n          type: number\n        BoilerOff:\n          format: int32\n          type: integer\n        BoilerOn:\n          format: int32\n          type: integer\n        CO2:\n          description: Last Co2 measured @ time_utc (in ppm)\n          format: float\n          type: number\n        GustAngle:\n          description: Direction of the last 5 min highest gust wind\n          format: int32\n          type: integer\n        GustStrength:\n          description: Speed of the last 5 min highest gust wind\n          format: int32\n          type: integer\n        Humidity:\n          description: Last humidity measured @ time_utc (in %)\n          format: float\n          type: number\n        Noise:\n          description: Last noise measured @ time_utc (in db)\n          format: float\n          type: number\n        Pressure:\n          description: Last Sea level pressure measured @ time_utc (in mb)\n          format: float\n          type: number\n        Rain:\n          description: Last rain measured (in mm)\n          format: float\n          type: number\n        Temperature:\n          description: Last temperature measure @ time_utc (in °C)\n          format: float\n          type: number\n        WindAngle:\n          description: Current 5 min average wind direction measured @ time_utc (in °)\n          format: int32\n          type: integer\n        WindStrength:\n          description: Current 5 min average wind speed measured @ time_utc (in km/h)\n          format: int32\n          type: integer\n        date_max_temp:\n          description: Timestamp when max temperature was measured\n          format: int32\n          type: integer\n        date_min_temp:\n          description: Timestamp when min temperature was measured\n          format: int32\n          type: integer\n        device_id:\n          format: float\n          type: number\n        health_idx:\n          description: \"Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4\n            = Unhealthy\"\n          format: int32\n          type: integer\n        max_temp:\n          description: Min temperature of the day (measured @ date_min_temp)\n          format: float\n          type: number\n        min_temp:\n          description: Max temperature of the day (measured @ date_max_temp)\n          format: float\n          type: number\n        pressure_trend:\n          description: Pressure evolution trend\n          type: string\n        sum_rain_1:\n          description: Amount of rain in last hour\n          format: float\n          type: number\n        sum_rain_24:\n          description: Amount of rain today\n          format: float\n          type: number\n        temp_trend:\n          description: Temperature evolution trend\n          type: string\n        time_utc:\n          format: int32\n          type: integer\n    NADate:\n      properties:\n        sec:\n          format: int32\n          type: integer\n        usec:\n          format: int32\n          type: integer\n    NADevice:\n      properties:\n        _id:\n          type: string\n        behavior:\n          format: int32\n          type: integer\n        cipher_id:\n          type: string\n        dashboard_data:\n          $ref: \"#/components/schemas/NADashboardData\"\n        data_type:\n          items:\n            type: string\n          type: array\n        date_setup:\n          $ref: \"#/components/schemas/NADate\"\n        firmware:\n          format: int32\n          type: integer\n        first_pid_avail:\n          type: boolean\n        heating_system:\n          $ref: \"#/components/schemas/NAHeatingSystem\"\n        house_model:\n          $ref: \"#/components/schemas/NAHouseModel\"\n        hw_version:\n          format: int32\n          type: integer\n        ip:\n          type: string\n        last_fw_update:\n          format: int32\n          type: integer\n        last_radio_store:\n          format: int32\n          type: integer\n        last_status_store:\n          format: int32\n          type: integer\n        last_upgrade:\n          format: int32\n          type: integer\n        module_name:\n          type: string\n        modules:\n          description: It lists which modules are linked with this device\n          items:\n            type: string\n          type: array\n        new_feature_avail:\n          type: boolean\n        place:\n          $ref: \"#/components/schemas/NAPlace\"\n        public_ext_data:\n          type: boolean\n        setpoint:\n          type: object\n        setpoint_default_duration:\n          format: int32\n          type: integer\n        setpoint_order:\n          additionalProperties:\n            items:\n              $ref: \"#/components/schemas/NAObject\"\n            type: array\n          type: object\n        station_name:\n          type: string\n        therm_program:\n          additionalProperties:\n            $ref: \"#/components/schemas/NAThermProgram\"\n          type: object\n        therm_program_backup:\n          additionalProperties:\n            items:\n              $ref: \"#/components/schemas/NAThermProgram\"\n            type: array\n          type: object\n        therm_program_order:\n          additionalProperties:\n            items:\n              $ref: \"#/components/schemas/NAObject\"\n            type: array\n          type: object\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NAMain : for the base station\n\n            NAModule1 : for the outdoor module\n\n            NAModule4 : for the additionnal indoor module\n\n            NAModule3 : for the rain gauge module\n\n            NAPlug : for the thermostat relay/plug\n\n            NATherm1 : for the thermostat module\n          type: string\n        udp_conn:\n          type: boolean\n        user_owner:\n          items:\n            type: string\n          type: array\n        wifi_status:\n          description: \u003e\n            It contains the current wifi status. The different thresholds to\n            take into account are\n\n            RSSI_THRESHOLD_0 = 86 bad signal\n\n            RSSI_THRESHOLD_1 = 71 middle quality signal\n\n            RSSI_THRESHOLD_2 = 56 good signal\n          format: int32\n          type: integer\n    NADeviceListBody:\n      properties:\n        devices:\n          items:\n            $ref: \"#/components/schemas/NADevice\"\n          type: array\n        modules:\n          items:\n            $ref: \"#/components/schemas/NAModule\"\n          type: array\n    NADeviceListResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NADeviceListBody\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAHealthyHomeCoach:\n      properties:\n        _id:\n          type: string\n        cipher_id:\n          type: string\n        co2_calibrating:\n          type: boolean\n        dashboard_data:\n          $ref: \"#/components/schemas/NADashboardData\"\n        data_type:\n          items:\n            type: string\n          type: array\n        date_setup:\n          format: int32\n          type: integer\n        firmware:\n          format: int32\n          type: integer\n        last_setup:\n          format: int32\n          type: integer\n        last_status_store:\n          format: int32\n          type: integer\n        last_upgrade:\n          format: int32\n          type: integer\n        name:\n          type: string\n        place:\n          $ref: \"#/components/schemas/NAPlace\"\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NHC: Healthy Home Coach\n          type: string\n        wifi_status:\n          description: \u003e\n            It contains the current wifi status. The different thresholds to\n            take into account are\n\n            RSSI_THRESHOLD_0 = 86 bad signal\n\n            RSSI_THRESHOLD_1 = 71 middle quality signal\n\n            RSSI_THRESHOLD_2 = 56 good signal\n          format: int32\n          type: integer\n    NAHealthyHomeCoachDataBody:\n      properties:\n        devices:\n          items:\n            $ref: \"#/components/schemas/NAHealthyHomeCoach\"\n          type: array\n        user:\n          $ref: \"#/components/schemas/NAUser\"\n    NAHealthyHomeCoachDataResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAHealthyHomeCoachDataBody\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAHeatingSystem:\n      properties:\n        heating_energy:\n          type: string\n        heating_system_window_seen:\n          type: boolean\n    NAHouseModel:\n      properties:\n        algo_type:\n          type: string\n        ca:\n          $ref: \"#/components/schemas/NAHouseModelCa\"\n        ext_temps:\n          additionalProperties:\n            format: int32\n            type: integer\n          type: object\n        first_anticipate_avail:\n          type: boolean\n        first_pid_avail:\n          type: boolean\n        gefs:\n          $ref: \"#/components/schemas/NAStation\"\n        in_use:\n          type: string\n        last_compute_try:\n          $ref: \"#/components/schemas/NADate\"\n        link_station:\n          $ref: \"#/components/schemas/NALinkStation\"\n        pid_algo:\n          $ref: \"#/components/schemas/NAPidAlgo\"\n        prefered_algo_type:\n          type: string\n        simple_algo:\n          $ref: \"#/components/schemas/NASimpleAlgo\"\n        station:\n          $ref: \"#/components/schemas/NAStation\"\n        station_firsttime_anticipate:\n          type: boolean\n        time:\n          $ref: \"#/components/schemas/NADate\"\n        time_algo_changed:\n          format: int32\n          type: integer\n        time_pid_computed:\n          format: int32\n          type: integer\n    NAHouseModelCa:\n      properties:\n        so:\n          type: string\n        te:\n          format: double\n          type: number\n        ti:\n          format: int32\n          type: integer\n    NALinkStation:\n      properties:\n        Temperature:\n          format: float\n          type: number\n        ext:\n          type: string\n        mac:\n          type: string\n    NAMain:\n      properties:\n        _id:\n          type: string\n        cipher_id:\n          type: string\n        co2_calibrating:\n          type: boolean\n        dashboard_data:\n          $ref: \"#/components/schemas/NADashboardData\"\n        data_type:\n          items:\n            type: string\n          type: array\n        date_setup:\n          format: int32\n          type: integer\n        firmware:\n          format: int32\n          type: integer\n        last_setup:\n          format: int32\n          type: integer\n        last_status_store:\n          format: int32\n          type: integer\n        last_upgrade:\n          format: int32\n          type: integer\n        module_name:\n          type: string\n        modules:\n          items:\n            $ref: \"#/components/schemas/NAStationModule\"\n          type: array\n        place:\n          $ref: \"#/components/schemas/NAPlace\"\n        station_name:\n          type: string\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NAMain : for the base station\n\n            NAModule1 : for the outdoor module\n\n            NAModule4 : for the additionnal indoor module\n\n            NAModule3 : for the rain gauge module\n\n            NAPlug : for the thermostat relay/plug\n\n            NATherm1 : for the thermostat module\n          type: string\n        wifi_status:\n          description: \u003e\n            It contains the current wifi status. The different thresholds to\n            take into account are\n\n            RSSI_THRESHOLD_0 = 86 bad signal\n\n            RSSI_THRESHOLD_1 = 71 middle quality signal\n\n            RSSI_THRESHOLD_2 = 56 good signal\n          format: int32\n          type: integer\n    NAMeasureBodyElem:\n      properties:\n        beg_time:\n          format: int32\n          type: integer\n        step_time:\n          format: int32\n          type: integer\n        value:\n          items:\n            items:\n              format: float\n              type: number\n            type: array\n          type: array\n    NAMeasureResponse:\n      properties:\n        body:\n          items:\n            $ref: \"#/components/schemas/NAMeasureBodyElem\"\n          type: array\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAModule:\n      properties:\n        _id:\n          type: string\n        battery_vp:\n          description: \u003e\n            It contains the current battery status. The threshold depends on the\n            kind of module, below is the list of the different threshold to take\n            into account according the module type.\n\n            \"Indoor module Battery range: 6000 ... 4200\" |\n\n            INDOOR_BATTERY_LEVEL_FULL = 5640\n\n            INDOOR_BATTERY_LEVEL_HIGH = 5280\n\n            INDOOR_BATTERY_LEVEL_MEDIUM = 4920\n\n            INDOOR_BATTERY_LEVEL_LOW = 4560\n\n            \"Below 4560: very low\" |\n\n\n            \"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\n\n            BATTERY_LEVEL_FULL = 5500\n\n            BATTERY_LEVEL_HIGH = 5000\n\n            BATTERY_LEVEL_MEDIUM = 4500\n\n            BATTERY_LEVEL_LOW = 4000\n\n            \"Below 4000: very low\" |\n\n\n            \"Thermostat Battery range: 4500 ... 3000\" |\n\n            THERMOSTAT_BATTERY_LEVEL_FULL = 4100\n\n            THERMOSTAT_BATTERY_LEVEL_HIGH = 3600\n\n            THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\n\n            THERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\n            \"Below 3000: very low\"\n          format: int32\n          type: integer\n        dashboard_data:\n          $ref: \"#/components/schemas/NADashboardData\"\n        data_type:\n          items:\n            type: string\n          type: array\n        date_setup:\n          $ref: \"#/components/schemas/NADate\"\n        firmware:\n          format: int32\n          type: integer\n        last_message:\n          format: int32\n          type: integer\n        last_seen:\n          format: int32\n          type: integer\n        main_device:\n          type: string\n        module_name:\n          type: string\n        public_ext_data:\n          type: boolean\n        rf_status:\n          description: \u003e\n            \"It contains the current radio status. The different thresholds to\n            take into account are :\" |\n\n            RADIO_THRESHOLD_SIGNAL_LOW = 90\n\n            RADIO_THRESHOLD_SIGNAL_MEDIUM = 80\n\n            RADIO_THRESHOLD_SIGNAL_HIGH = 70\n\n            RADIO_THRESHOLD_SIGNAL_FULL = 60\n          format: int32\n          type: integer\n        therm_orientation:\n          format: int32\n          type: integer\n        therm_relay_cmd:\n          format: int32\n          type: integer\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NAMain : for the base station\n\n            NAModule1 : for the outdoor module\n\n            NAModule4 : for the additionnal indoor module\n\n            NAModule3 : for the rain gauge module\n\n            NAPlug : for the thermostat relay/plug\n\n            NATherm1 : for the thermostat module\n          type: string\n    NANewScheduleBody:\n      properties:\n        schedule_id:\n          description: |\n            Id of the schedule. It can be use with the method \"switchschedule\"\n          type: string\n    NANewScheduleResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NANewScheduleBody\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAObject:\n      properties:\n        $id:\n          type: string\n    NAOkResponse:\n      properties:\n        body:\n          type: string\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAPartnerDevicesResponse:\n      properties:\n        body:\n          items:\n            type: string\n          type: array\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAPidAlgo:\n      properties:\n        gain:\n          format: int32\n          type: integer\n        period:\n          format: int32\n          type: integer\n        td:\n          format: int32\n          type: integer\n        ti:\n          format: int32\n          type: integer\n    NAPlace:\n      properties:\n        altitude:\n          format: float\n          type: number\n        city:\n          type: string\n        country:\n          type: string\n        from_ip:\n          type: boolean\n        improveLocProposed:\n          type: boolean\n        location:\n          items:\n            format: double\n            type: number\n          type: array\n        timezone:\n          type: string\n        trust_location:\n          type: boolean\n    NAPlug:\n      properties:\n        _id:\n          type: string\n        firmware:\n          format: int32\n          type: integer\n        last_bilan:\n          $ref: \"#/components/schemas/NAYearMonth\"\n        last_plug_seen:\n          format: int32\n          type: integer\n        last_status_store:\n          format: int32\n          type: integer\n        modules:\n          items:\n            $ref: \"#/components/schemas/NAThermostat\"\n          type: array\n        place:\n          $ref: \"#/components/schemas/NAPlace\"\n        plug_connected_boiler:\n          format: int32\n          type: integer\n        station_name:\n          type: string\n        syncing:\n          type: boolean\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NAMain : for the base station\n\n            NAModule1 : for the outdoor module\n\n            NAModule4 : for the additionnal indoor module\n\n            NAModule3 : for the rain gauge module\n\n            NAPlug : for the thermostat relay/plug\n\n            NATherm1 : for the thermostat module\n          type: string\n        udp_conn:\n          type: boolean\n        wifi_status:\n          description: \u003e\n            It contains the current wifi status. The different thresholds to\n            take into account are\n\n            RSSI_THRESHOLD_0 = 86 bad signal\n\n            RSSI_THRESHOLD_1 = 71 middle quality signal\n\n            RSSI_THRESHOLD_2 = 56 good signal\n          format: int32\n          type: integer\n    NASetpoint:\n      properties:\n        setpoint_endtime:\n          format: int32\n          type: integer\n        setpoint_mode:\n          type: string\n        setpoint_temp:\n          format: float\n          type: number\n    NASetpointLog:\n      properties:\n        setpoint:\n          $ref: \"#/components/schemas/NASetpoint\"\n        timestamp:\n          format: int64\n          type: integer\n    NASimpleAlgo:\n      properties:\n        high_deadband:\n          format: int32\n          type: integer\n    NAStation:\n      properties:\n        lag_down:\n          format: int32\n          type: integer\n        lag_up:\n          format: int32\n          type: integer\n        off_overshoot:\n          format: float\n          type: number\n        on_overshoot:\n          format: float\n          type: number\n        pk:\n          format: int32\n          type: integer\n        tau:\n          format: int32\n          type: integer\n    NAStationDataBody:\n      properties:\n        devices:\n          items:\n            $ref: \"#/components/schemas/NAMain\"\n          type: array\n        user:\n          $ref: \"#/components/schemas/NAUser\"\n    NAStationDataResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAStationDataBody\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAStationModule:\n      properties:\n        _id:\n          type: string\n        battery_percent:\n          description: It contains the current battery level in percentage.\n          format: int32\n          type: integer\n        battery_vp:\n          description: \u003e\n            It contains the current battery status. The threshold depends on the\n            kind of module, below is the list of the different threshold to take\n            into account according the module type.\n\n            \"Indoor module Battery range: 6000 ... 4200\" |\n\n            INDOOR_BATTERY_LEVEL_FULL = 5640\n\n            INDOOR_BATTERY_LEVEL_HIGH = 5280\n\n            INDOOR_BATTERY_LEVEL_MEDIUM = 4920\n\n            INDOOR_BATTERY_LEVEL_LOW = 4560\n\n            \"Below 4560: very low\" |\n\n\n            \"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\n\n            BATTERY_LEVEL_FULL = 5500\n\n            BATTERY_LEVEL_HIGH = 5000\n\n            BATTERY_LEVEL_MEDIUM = 4500\n\n            BATTERY_LEVEL_LOW = 4000\n\n            \"Below 4000: very low\" |\n\n\n            \"Thermostat Battery range: 4500 ... 3000\" |\n\n            THERMOSTAT_BATTERY_LEVEL_FULL = 4100\n\n            THERMOSTAT_BATTERY_LEVEL_HIGH = 3600\n\n            THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\n\n            THERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\n            \"Below 3000: very low\"\n          format: int32\n          type: integer\n        dashboard_data:\n          $ref: \"#/components/schemas/NADashboardData\"\n        data_type:\n          items:\n            type: string\n          type: array\n        firmware:\n          format: int32\n          type: integer\n        last_message:\n          format: int32\n          type: integer\n        last_seen:\n          format: int32\n          type: integer\n        last_setup:\n          format: int32\n          type: integer\n        module_name:\n          type: string\n        rf_status:\n          description: \u003e\n            \"It contains the current radio status. The different thresholds to\n            take into account are :\" |\n\n            RADIO_THRESHOLD_SIGNAL_LOW = 90\n\n            RADIO_THRESHOLD_SIGNAL_MEDIUM = 80\n\n            RADIO_THRESHOLD_SIGNAL_HIGH = 70\n\n            RADIO_THRESHOLD_SIGNAL_FULL = 60\n          format: int32\n          type: integer\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NAMain : for the base station\n\n            NAModule1 : for the outdoor module\n\n            NAModule4 : for the additionnal indoor module\n\n            NAModule3 : for the rain gauge module\n\n            NAPlug : for the thermostat relay/plug\n\n            NATherm1 : for the thermostat module\n          type: string\n    NAThermMeasure:\n      properties:\n        setpoint_temp:\n          format: float\n          type: number\n        temperature:\n          format: float\n          type: number\n        time:\n          format: int32\n          type: integer\n    NAThermProgram:\n      properties:\n        name:\n          type: string\n        program_id:\n          type: string\n        selected:\n          type: boolean\n        timetable:\n          items:\n            $ref: \"#/components/schemas/NATimeTableItem\"\n          type: array\n        zones:\n          items:\n            $ref: \"#/components/schemas/NAZone\"\n          type: array\n    NAThermStateBody:\n      properties:\n        battery_vp:\n          format: int32\n          type: integer\n        last_plug_seen:\n          format: int32\n          type: integer\n        last_therm_seen:\n          format: int32\n          type: integer\n        measured:\n          $ref: \"#/components/schemas/NAThermMeasure\"\n        plug_connected_boiler:\n          format: int32\n          type: integer\n        rf_status:\n          format: int32\n          type: integer\n        setpoint:\n          $ref: \"#/components/schemas/NASetpoint\"\n        setpoint_order:\n          $ref: \"#/components/schemas/NASetpoint\"\n        therm_orientation:\n          format: int32\n          type: integer\n        therm_program:\n          $ref: \"#/components/schemas/NAThermProgram\"\n        therm_program_backup:\n          items:\n            $ref: \"#/components/schemas/NAThermProgram\"\n          type: array\n        therm_program_order:\n          $ref: \"#/components/schemas/NAThermProgram\"\n        therm_relay_cmd:\n          format: int32\n          type: integer\n        udp_conn:\n          type: boolean\n        wifi_status:\n          format: int32\n          type: integer\n    NAThermStateResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAThermStateBody\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAThermostat:\n      properties:\n        _id:\n          type: string\n        battery_vp:\n          description: \u003e\n            It contains the current battery status. The threshold depends on the\n            kind of module, below is the list of the different threshold to take\n            into account according the module type.\n\n            \"Indoor module Battery range: 6000 ... 4200\" |\n\n            INDOOR_BATTERY_LEVEL_FULL = 5640\n\n            INDOOR_BATTERY_LEVEL_HIGH = 5280\n\n            INDOOR_BATTERY_LEVEL_MEDIUM = 4920\n\n            INDOOR_BATTERY_LEVEL_LOW = 4560\n\n            \"Below 4560: very low\" |\n\n\n            \"Raingauge and outdoor module Battery range: 6000 ... 3600\" |\n\n            BATTERY_LEVEL_FULL = 5500\n\n            BATTERY_LEVEL_HIGH = 5000\n\n            BATTERY_LEVEL_MEDIUM = 4500\n\n            BATTERY_LEVEL_LOW = 4000\n\n            \"Below 4000: very low\" |\n\n\n            \"Thermostat Battery range: 4500 ... 3000\" |\n\n            THERMOSTAT_BATTERY_LEVEL_FULL = 4100\n\n            THERMOSTAT_BATTERY_LEVEL_HIGH = 3600\n\n            THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300\n\n            THERMOSTAT_BATTERY_LEVEL_LOW = 3000\n\n            \"Below 3000: very low\"\n          format: int32\n          type: integer\n        firmware:\n          format: int32\n          type: integer\n        last_message:\n          format: int32\n          type: integer\n        last_therm_seen:\n          format: int32\n          type: integer\n        measured:\n          $ref: \"#/components/schemas/NAThermMeasure\"\n        module_name:\n          type: string\n        rf_status:\n          description: \u003e\n            \"It contains the current radio status. The different thresholds to\n            take into account are :\" |\n\n            RADIO_THRESHOLD_SIGNAL_LOW = 90\n\n            RADIO_THRESHOLD_SIGNAL_MEDIUM = 80\n\n            RADIO_THRESHOLD_SIGNAL_HIGH = 70\n\n            RADIO_THRESHOLD_SIGNAL_FULL = 60\n          format: int32\n          type: integer\n        setpoint:\n          $ref: \"#/components/schemas/NASetpoint\"\n        setpoint_history:\n          description: The last 20 setpoints (mode, endtime, and timestamp) the thermostats\n            has entered.\n          items:\n            $ref: \"#/components/schemas/NASetpointLog\"\n          type: array\n        setpoint_order:\n          $ref: \"#/components/schemas/NASetpoint\"\n        therm_orientation:\n          format: int32\n          type: integer\n        therm_program_list:\n          description: List of the weekly heating planning used by the thermostat\n          items:\n            $ref: \"#/components/schemas/NAThermProgram\"\n          type: array\n        therm_relay_cmd:\n          format: int32\n          type: integer\n        type:\n          description: \u003e\n            Included in every device or module. It defines the type of the\n            device/module. Its values are among :\n\n            NAMain : for the base station\n\n            NAModule1 : for the outdoor module\n\n            NAModule4 : for the additionnal indoor module\n\n            NAModule3 : for the rain gauge module\n\n            NAPlug : for the thermostat relay/plug\n\n            NATherm1 : for the thermostat module\n          type: string\n    NAThermostatDataBody:\n      properties:\n        devices:\n          items:\n            $ref: \"#/components/schemas/NAPlug\"\n          type: array\n        user:\n          $ref: \"#/components/schemas/NAUser\"\n    NAThermostatDataResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAThermostatDataBody\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NATimeTableItem:\n      properties:\n        id:\n          format: int32\n          type: integer\n        m_offset:\n          format: int32\n          type: integer\n    NAUser:\n      properties:\n        _id:\n          type: string\n        administrative:\n          $ref: \"#/components/schemas/NAUserAdministrative\"\n        date_creation:\n          $ref: \"#/components/schemas/NADate\"\n        devices:\n          description: An array of string containing the ids of the devices owned by the\n            user\n          items:\n            type: string\n          type: array\n        friend_devices:\n          description: \u003e\n            An array of string containing the ids of the devices on which the\n            user has a \"guest\" access\n          items:\n            type: string\n          type: array\n        mail:\n          type: string\n        timeline_not_read:\n          format: int32\n          type: integer\n        timeline_size:\n          format: int32\n          type: integer\n    NAUserAdministrative:\n      properties:\n        country:\n          description: user country\n          type: string\n        feel_like_algo:\n          description: algorithm used to compute feel like temperature, 0 -\u003e humidex, 1 -\u003e\n            heat-index\n          type: string\n        lang:\n          description: user locale\n          type: string\n        pressureunit:\n          description: 0 -\u003e mbar, 1 -\u003e inHg, 2 -\u003e mmHg\n          type: string\n        reg_locale:\n          description: user regional preferences (used for displaying date)\n          type: string\n        unit:\n          description: 0 -\u003e metric system, 1 -\u003e imperial system\n          type: string\n        windunit:\n          description: 0 -\u003e kph, 1 -\u003e mph, 2 -\u003e ms, 3 -\u003e beaufort, 4 -\u003e knot\n          type: string\n    NAUserResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAUser\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAWelcomeCameras:\n      properties:\n        alim_status:\n          description: If power supply is ok (on/off)\n          type: string\n        id:\n          description: Id of the camera\n          type: string\n        is_local:\n          description: Only for scope access_camera. If Camera and application requesting\n            the information are on the same IP (true/false)\n          type: boolean\n        name:\n          description: Name of the camera\n          type: string\n        sd_status:\n          description: If SD card status is ok (on/off)\n          type: string\n        status:\n          description: If camera is monitoring (on/off)\n          type: string\n        type:\n          description: Type of the camera\n          type: string\n        vpn_url:\n          description: Only for scope access_camera. Address of the camera\n          type: string\n    NAWelcomeEvents:\n      properties:\n        camera_id:\n          description: Camera that detected the event\n          type: string\n        id:\n          description: Identifier of the event\n          type: string\n        is_arrival:\n          description: If person was considered away before being seen during this event\n          type: boolean\n        message:\n          description: User facing event description\n          type: string\n        person_id:\n          description: Id of the person the event is about (if any)\n          type: string\n        snapshot:\n          $ref: \"#/components/schemas/NAWelcomeSnapshot\"\n        sub_type:\n          description: Subtypes of SD and Alim events. Go to Welcome page for further\n            details.\n          format: int32\n          type: integer\n        time:\n          description: Time of occurence of event\n          format: int32\n          type: integer\n        type:\n          description: Type of events. Go to the Welcome page for further details.\n          type: string\n        video_id:\n          description: Identifier of the video\n          type: string\n        video_status:\n          description: Status of the video (recording, deleted or available)\n          type: string\n    NAWelcomeEventsData:\n      properties:\n        events_list:\n          items:\n            $ref: \"#/components/schemas/NAWelcomeEvents\"\n          type: array\n    NAWelcomeEventsResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAWelcomeEventsData\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAWelcomeFace:\n      properties:\n        id:\n          description: Id of the face.\n          type: string\n        key:\n          description: Key for this face to use in getcamerapicture.\n          type: string\n        version:\n          description: Version of the face if user changed their photo.\n          format: int32\n          type: integer\n    NAWelcomeGlobalInfo:\n      properties:\n        show_tags:\n          description: show tags\n          type: boolean\n    NAWelcomeHomeData:\n      properties:\n        global_info:\n          $ref: \"#/components/schemas/NAWelcomeGlobalInfo\"\n        homes:\n          items:\n            $ref: \"#/components/schemas/NAWelcomeHomes\"\n          type: array\n        user:\n          $ref: \"#/components/schemas/NAWelcomeUser\"\n    NAWelcomeHomeDataResponse:\n      properties:\n        body:\n          $ref: \"#/components/schemas/NAWelcomeHomeData\"\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAWelcomeHomes:\n      properties:\n        cameras:\n          items:\n            $ref: \"#/components/schemas/NAWelcomeCameras\"\n          type: array\n        events:\n          items:\n            $ref: \"#/components/schemas/NAWelcomeEvents\"\n          type: array\n        id:\n          description: Id of the home.\n          type: string\n        modules:\n          items:\n            $ref: \"#/components/schemas/NAWelcomeModules\"\n          type: array\n        name:\n          description: Name of the home\n          type: string\n        persons:\n          items:\n            $ref: \"#/components/schemas/NAWelcomePersons\"\n          type: array\n        place:\n          $ref: \"#/components/schemas/NAWelcomePlace\"\n    NAWelcomeModules:\n      properties:\n        battery_percent:\n          description: remaining battery percentage\n          format: int32\n          type: integer\n        id:\n          description: mac address of the module\n          type: string\n        last_activity:\n          description: Timestamp of last move detected by the module\n          format: int32\n          type: integer\n        name:\n          description: name of the module (given by the user)\n          type: string\n        rf:\n          description: Radio status\n          type: string\n        status:\n          description: status of the module\n          type: string\n        type:\n          description: NACamDoorTag for tags\n          type: string\n    NAWelcomePersons:\n      properties:\n        face:\n          $ref: \"#/components/schemas/NAWelcomeFace\"\n        id:\n          description: Id of the person.\n          type: string\n        last_seen:\n          description: Time at which the person was last seen.\n          format: int32\n          type: integer\n        out_of_sight:\n          description: True if the Person is out of sight.\n          type: boolean\n        pseudo:\n          description: Name of the person, if pseudo is missing, person is unknown.\n          type: string\n    NAWelcomePersonsAwayResponse:\n      properties:\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n        time_server:\n          format: int32\n          type: integer\n    NAWelcomePlace:\n      properties:\n        city:\n          description: City of the home.\n          type: string\n        country:\n          description: Country of the home.\n          type: string\n        timezone:\n          description: Timezone of the home.\n          type: string\n    NAWelcomeSnapshot:\n      properties:\n        id:\n          description: Id of the snapshot.\n          type: string\n        key:\n          description: Key for this snapshot.\n          type: string\n        version:\n          description: Version of the snapshot.\n          format: int32\n          type: integer\n    NAWelcomeUser:\n      properties:\n        lang:\n          description: user locale\n          type: string\n        reg_locale:\n          description: user regional preferences (used for displaying date)\n          type: string\n    NAWelcomeWebhookResponse:\n      properties:\n        status:\n          type: string\n        time_exec:\n          format: double\n          type: number\n    NAYearMonth:\n      properties:\n        m:\n          format: int32\n          type: integer\n        y:\n          format: int32\n          type: integer\n    NAZone:\n      properties:\n        id:\n          format: int32\n          type: integer\n        name:\n          type: string\n        temp:\n          format: float\n          type: number\n        type:\n          format: int32\n          type: integer\n",
			"canonicalURL": "/github.com/restful-ma/thresholds@5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/-/blob/benchmark-repository/openapi/netatmo.net-1.1.1-swagger.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/restful-ma/thresholds/blob/5b0b2a3322d3b2b7c0e0f2c0c0ad0e524e67bf82/benchmark-repository/openapi/netatmo.net-1.1.1-swagger.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /setthermpoint: post: operation \"setthermpoint\": parameters: parse parameter \"setpoint_mode\": schema: parse enum values: parse value \"false\": expected type \"string\", got \"bool\""
}