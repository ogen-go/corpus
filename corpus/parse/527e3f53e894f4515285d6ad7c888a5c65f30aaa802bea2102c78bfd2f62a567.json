{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/openfoodfacts/openfoodfacts-server"
		},
		"file": {
			"name": "api.yml",
			"size": 0,
			"path": "docs/reference/api.yml",
			"byteSize": 12744,
			"content": "openapi: 3.1.0\ninfo:\n  title: Open Food Facts Open API\n  description: |\n    As a developer, the Open Food Facts API allows you to get information \n    and contribute to the products database. You can create great apps to \n    help people make better food choices and also provide data to enhance the database.\n  termsOfService: 'https://world.openfoodfacts.org/terms-of-use'\n  contact:\n    name: Open Food Facts\n    url: 'https://slack.openfoodfacts.org/'\n    email: contact@openfoodfacts.org\n  license:\n    name: 'data: ODbL'\n    url: 'https://opendatacommons.org/licenses/odbl/summary/index.html'\n  version: '2'\nservers:\n  - url: 'https://world.openfoodfacts.org'\n    description: prod\n  - description: dev\n    url: 'https://off:off@world.openfoodfacts.net'\npaths:\n  '/api/v2/product/{barcode}':\n    get:\n      tags:\n        - Read Requests\n      summary: Get information for a specific product by barcode\n      parameters:\n        - name: barcode\n          in: path\n          description: |\n            The barcode of the product to be fetched\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '3017620422003'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/get_product_by_barcode.yaml\n      description: |\n        A product can be fetched via its unique barcode.\n        It returns all the details of that product response.\n      operationId: get-product-by-barcode\n  '/api/v2/product/{barcode}?fields=knowledge_panels':\n    get:\n      tags:\n        - Read Requests\n      summary: |\n        Get Knowledge panels for a specific product by barcode \n        (special case of get product)\n      parameters:\n        - name: barcode\n          in: path\n          description: |\n            The barcode of the product to be fetched\n          required: true\n          style: simple\n          explode: false\n          schema:\n            type: string\n            example: '3017620422003'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: ./responses/get_product_by_barcode_base.yaml\n                  - type: object\n                    properties:\n                      product:\n                        type: object\n                        properties:\n                          knowledge_panels:\n                            $ref: ./schemas/knowledge_panels/panels.yaml\n      description: |\n        Knowledge panels gives high leve informations about a product,\n        ready to display.\n        This is used by open food facts website, \n        and by the official mobile application\n      operationId: get-product-by-barcode-knowledge-panels\n  /cgi/product_image_upload.pl:\n    post:\n      tags:\n        - Write Requests\n      summary: Add a Photo to an Existing Product\n      operationId: get-cgi-product_image_upload.pl\n      description: |\n        Photos are source and proof of data. \n        The first photo uploaded for a product is \n        auto-selected as the product’s “front” photo.'\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/add_photo_to_existing_product.yaml\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: ./requestBodies/add_photo_to_existing_product.yaml\n        description: ''\n  /cgi/ingredients.pl:\n    parameters: []\n    get:\n      summary: Performing OCR on a Product\n      operationId: get-cgi-ingredients.pl\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/ocr_on_product.yaml\n      description: |\n        Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.\n      parameters:\n        - $ref: '#/components/parameters/id'\n        - $ref: '#/components/parameters/code'\n        - $ref: '#/components/parameters/process_image'\n        - $ref: '#/components/parameters/ocr_engine'\n      tags:\n        - Read Requests\n  /cgi/product_image_crop.pl:\n    post:\n      summary: Crop A Photo\n      operationId: post-cgi-product_image_crop.pl\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties: {}\n      description: |\n        Cropping is only relevant for editing existing products. \n        You cannot crop an image the first time you upload it to the system.\n      parameters: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: ./requestBodies/crop_a_photo.yaml\n      tags:\n        - Write Requests\n    get:\n      summary: Rotate A Photo\n      operationId: get-cgi-product_image_crop.pl\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/rotate_a_photo.yaml\n      description: |\n        Although we recommend rotating photos manually and uploading a new version of the image, \n        the OFF API allows you to make api calls to automate this process.\n        You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.\n      parameters:\n        - $ref: '#/components/parameters/code'\n        - $ref: '#/components/parameters/id'\n        - $ref: '#/components/parameters/imgid'\n        - $ref: '#/components/parameters/angle'\n      tags:\n        - Write Requests\n  /cgi/product_jqm2.pl:\n    post:\n      summary: Add or Edit A Product\n      operationId: post-cgi-product_jqm2.pl\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/add_or_edit_a_product.yaml\n      parameters: []\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: ./requestBodies/add_or_edit_a_product.yaml\n      tags:\n        - Write Requests\n      description: |\n        If the barcode exists then you will be editing the existing product, \n        However if it doesn''t you will be creating a new product with that unique barcode,\n        and adding properties to the product.\n  /api/v2/search:\n    get:\n      summary: Search for Products\n      tags:\n        - Read Requests\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: ./responses/search_for_products.yaml\n      operationId: get-search\n      description: |\n        Search request allows you to get the nutritional data of products that match your search criteria. \n        It allows you create many custom APIs for your use case. \n        If the search query parameter has 2 possible values, they are seperated by a comma(,).\n      parameters:\n        - $ref: '#/components/parameters/categories_tags_en'\n        - $ref: '#/components/parameters/labels_tags_en'\n        - $ref: '#/components/parameters/fields'\n        - $ref: '#/components/parameters/sort_by'\n    parameters: []\n  /cgi/suggest.pl:\n    get:\n      summary: Get Suggestions to Aid Adding/Editing Products\n      tags:\n        - Read Requests\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n      operationId: get-cgi-suggest.pl\n      parameters:\n        - $ref: '#/components/parameters/tagtype'\n        - $ref: '#/components/parameters/term'\n      description: |\n        For example , Dave is looking for packaging_shapes that contain the term \"fe\", \n        all packaging_shapes containing \"fe\" will be returned. \n        This is useful if you have a search in your application, \n        for a specific product field.\n  '/api/v2/product/{barcode}?fields=images':\n    parameters:\n      - schema:\n          type: string\n        name: barcode\n        in: path\n        required: true\n    get:\n      summary: Get Images for a specific product by barcode (special case of get product)\n      tags:\n        - Read Requests\n      responses:\n        '200':\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  code:\n                    type: string\n                    example: '3017620422003'\n                  product:\n                    type: object\n                    properties:\n                      images:\n                        type: object\n                        patternProperties:\n                          /^\\d+$/:\n                            $ref: ./schemas/images/image.yaml\n                          (front|ingredients|nutrition|packaging|other)_\\w\\w(-\\w\\w)?:\n                            $ref: ./schemas/images/selected_image.yaml\n                  status:\n                    type: integer\n                    example: 1\n                  status_verbose:\n                    type: string\n                    example: product found\n      operationId: get-api-v2-product-barcode-?fields=images\n      description: Images ensure the reliability of Open Food Facts data. It provides a primary source and proof of all the structured data. You may therefore want to display it along the structured information.\ncomponents:\n  schemas:\n    Product:\n      $ref: ./schemas/product.yaml\n  parameters:\n    id:\n      schema:\n        type: string\n        example: ingredients_en\n      in: query\n      name: id\n      required: true\n    code:\n      schema:\n        type: string\n        example: '4251105501381'\n      in: query\n      name: code\n      description: Barcode of the product\n      required: true\n    process_image:\n      schema:\n        type: string\n        example: '1'\n      in: query\n      name: process_image\n      required: true\n    ocr_engine:\n      schema:\n        type: string\n        example: google_cloud_vision\n      in: query\n      name: ocr_engine\n      required: true\n    imgid:\n      schema:\n        type: string\n        example: '1'\n      in: query\n      name: imgid\n      required: true\n    angle:\n      schema:\n        type: string\n        example: '90'\n      in: query\n      name: angle\n      required: true\n    categories_tags_en:\n      schema:\n        type: string\n        example: chocolates\n      in: query\n      name: categories_tags_en\n      description: |\n        The category of products you are searching for.\n    sort_by:\n      schema:\n        type: string\n        example: product_name\n        enum:\n          - product_name\n          - last_modified_t\n          - scans_n\n          - unique_scans_n\n          - created_t\n          - completeness\n          - popularity_key\n          - nutriscore_score\n          - nova_score\n          - nothing\n          - ecoscore_score\n      in: query\n      name: sort_by\n      description: |\n        The allowed values  used to sort/order the search results.\n\n        * `product_name` sorts on name      \n        * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)\n        * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product\n        * `created_t`, `last_modified_t`, are about creation and modification dates\n        * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)\n    labels_tags_en:\n      schema:\n        type: string\n        example: organic\n      in: query\n      name: labels_tags_en\n      description: |\n        The labels of products you are searching for.\n    fields:\n      schema:\n        type: string\n        example: 'code,product_name'\n      in: query\n      name: fields\n      description: |\n        The fields to be returned from the product object can also be limited.\n        If not specified, it returns the entire product object response.\n    tagtype:\n      schema:\n        type: string\n        example: additives\n      in: query\n      name: tagtype\n    term:\n      schema:\n        type: string\n        example: f\n      in: query\n      name: term\ntags:\n  - name: Read Requests\n  - name: Write Requests\n",
			"canonicalURL": "/github.com/openfoodfacts/openfoodfacts-server@389e03a16fbf16327e86508d497a468f4097646c/-/blob/docs/reference/api.yml",
			"externalURLs": [
				{
					"url": "https://github.com/openfoodfacts/openfoodfacts-server/blob/389e03a16fbf16327e86508d497a468f4097646c/docs/reference/api.yml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse components: schemas: \"Product\": resolve \"#/components/schemas/Product\": at docs/reference/api.yml:287:13: $ref: resolve \"./schemas/product.yaml\": decode: yaml: unmarshal errors:\n  yaml: line 852: cannot unmarshal !!str `string` into jsonschema.RawSchema"
}