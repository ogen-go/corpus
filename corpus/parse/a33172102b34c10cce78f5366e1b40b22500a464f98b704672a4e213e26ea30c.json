{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tadoku/tadoku"
		},
		"file": {
			"name": "api.yaml",
			"size": 0,
			"path": "services/content-api/http/rest/openapi/api.yaml",
			"byteSize": 9465,
			"content": "openapi: 3.0.3\ninfo:\n  title: content-api\n  license:\n    name: MIT\n    url: https://github.com/tadoku/tadoku/blob/main/LICENSE\n  version: 1.0.0\nexternalDocs:\n  description: Find out more about Tadoku\n  url: https://tadoku.github.io/tadoku/\nservers:\n  - url: https://tadoku.app/api/content/\npaths:\n  /pages/{namespace}/{slug}:\n    get:\n      summary: Returns page content for a given slug\n      operationId: pageFindBySlug\n      tags: [pages]\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of page to return\n          required: true\n          schema:\n            type: string\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'    \n        '404':\n          description: Page not found or not published\n  /pages/{namespace}/{id}:\n    put:\n      summary: Updates an existing page\n      operationId: pageUpdate\n      tags: [pages]\n      security:\n        - cookieAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Page'\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: id\n          in: path\n          description: ID of page\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n        '400':\n          description: Invalid page\n        '404':\n          description: Page does not exist and cannot be updated\n  /pages/{namespace}:\n    post:\n      summary: Creates a new page\n      operationId: pageCreate\n      tags: [pages]\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Page'\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Page'\n        '400':\n          description: Invalid page\n    get:\n      summary: lists all pages\n      operationId: pageList\n      tags: [pages]\n      security:\n        - cookieAuth: []\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page_size\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: include_drafts\n          in: query\n          required: false\n          allowEmptyValue: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Pages'\n  /posts/{namespace}/{slug}:\n    get:\n      summary: Returns page content for a given slug\n      operationId: postFindBySlug\n      tags: [posts]\n      parameters:\n        - name: slug\n          in: path\n          description: Slug of post to return\n          required: true\n          schema:\n            type: string\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'    \n        '404':\n          description: Post not found or not published\n  /posts/{namespace}/{id}:\n    put:\n      summary: Updates an existing post\n      operationId: postUpdate\n      tags: [posts]\n      security:\n        - cookieAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      parameters:\n        - name: id\n          in: path\n          description: ID of post\n          required: true\n          schema:\n            type: string\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        '400':\n          description: Invalid post\n        '404':\n          description: Post does not exist and cannot be updated\n  /posts/{namespace}:\n    post:\n      summary: Creates a new post\n      operationId: postCreate\n      tags: [posts]\n      security:\n        - cookieAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/Post'\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n      responses:\n        '201':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Post'\n        '400':\n          description: Invalid post\n    get:\n      summary: lists all posts\n      operationId: postList\n      tags: [posts]\n      parameters:\n        - name: namespace\n          in: path\n          required: true\n          schema:\n            type: string\n        - name: page_size\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: page\n          in: query\n          required: false\n          schema:\n            type: integer\n        - name: include_drafts\n          in: query\n          required: false\n          allowEmptyValue: true\n          schema:\n            type: boolean\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Posts'\n  /ping:\n    get:\n      summary: Checks if service is responsive\n      operationId: ping\n      tags: [metadata]\n      responses:\n        '200':\n          description: successful operation\n          content:\n            text/plain:\n              schema:\n                type: string\ncomponents:\n  schemas:\n    Page:\n      type: object\n      required:\n        - slug\n        - title\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: d7e82f70-f7b9-4952-8258-1e4d16f0c244\n        slug:\n          type: string\n          example: welcome-to-tadoku\n        title:\n          type: string\n          example: Welcome to Tadoku!\n        html:\n          type: string\n          example: \u003cp\u003eExample page!\u003c/p\u003e\n        published_at:\n          type: string\n          format: date-time\n          example: 2022-12-14T19:48:00Z\n        created_at:\n          type: string\n          format: date-time\n          example: 2022-12-14T19:48:00Z\n        updated_at:\n          type: string\n          format: date-time\n          example: 2022-12-14T19:48:00Z\n    Pages:\n      allOf:\n        - $ref: '#/components/schemas/PaginatedList'\n        - type: object\n          required:\n            - pages\n          properties:\n            pages:\n              type: array\n              maxItems: 50\n              items:\n                $ref: \"#/components/schemas/Page\"\n    Post:\n      type: object\n      required:\n        - slug\n        - title\n        - content\n      properties:\n        id:\n          type: string\n          format: uuid\n          example: d7e82f70-f7b9-4952-8258-1e4d16f0c244\n        namespace:\n          type: string\n          example: tadoku\n        slug:\n          type: string\n          example: welcome-to-tadoku\n        title:\n          type: string\n          example: Welcome to Tadoku!\n        content:\n          type: string\n          format: markdown\n          example: This an example **with markdown**.\n        published_at:\n          type: string\n          format: date-time\n          example: 2022-12-14T19:48:00Z\n        created_at:\n          type: string\n          format: date-time\n          example: 2022-12-14T19:48:00Z\n        updated_at:\n          type: string\n          format: date-time\n          example: 2022-12-14T19:48:00Z\n    Posts:\n      allOf:\n        - $ref: '#/components/schemas/PaginatedList'\n        - type: object\n          required:\n            - posts\n          properties:\n            posts:\n              type: array\n              maxItems: 50\n              items:\n                $ref: \"#/components/schemas/Post\"\n    PaginatedList:\n      type: object\n      required:\n        - next_page_token\n        - total_size\n      properties:\n        total_size:\n          type: integer\n          example: 100\n        next_page_token:\n          type: string\n          description: is empty if there's no next page\n          example: \"3\"\n  securitySchemes:\n    cookieAuth:\n      type: apiKey\n      in: cookie\n      name: ory_kratos_session",
			"canonicalURL": "/github.com/tadoku/tadoku@345efa9f841437c0e1a2ba48bb3dd9e1be25999d/-/blob/services/content-api/http/rest/openapi/api.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/tadoku/tadoku/blob/345efa9f841437c0e1a2ba48bb3dd9e1be25999d/services/content-api/http/rest/openapi/api.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: at services/content-api/http/rest/openapi/api.yaml:14:3: duplicate path: \"/pages/{namespace}/{slug}\""
}