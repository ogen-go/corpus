{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/airbusgeo/playground-docs"
		},
		"file": {
			"name": "api_geo_data_manager_playground.yaml",
			"size": 0,
			"path": "api/api_geo_data_manager_playground.yaml",
			"byteSize": 56302,
			"content": "openapi: 3.0.0\n\n#\n# Info\n#\ninfo:\n  title: Geo Data Manager API for Intelligence Playground\n  description: |\n    Airbus Defence and Space \"Geo Data Manager\" API specification for Intelligence Playground.\n    The data manager is reponsible for managing datasets, zones, tags and records.\n    - A dataset gather zones, jobs and records.\n    - A zone corresponds to an AOI (Area of Interest) on selected image(s).\n    - A tag classifies records.\n    - A record may be a manually created object representing ground truth or the result of a processing.\n  contact:\n    name: Airbus Defence and Space\n    url: 'https://www.airbus.com/'\n  license:\n    name: Apache 2.0\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 1.0.0\n  x-logo:\n    url: https://www.intelligence-airbusds.com/files/pmedia/public/r2421_9_airbus_rgb.png\n\n#\n# Servers\n#\nservers:\n  - url: https://api.playground.airbusds-geo.com\n    description: Intelligence Playground production server\n\n#\n# Tags\n#\ntags:\n  - name: Mandatory\n    description: |\n      Mandatory resources.\n      Defines the main entry point of the service.\n  - name: Projects\n    description: |\n      Project management.\n  - name: Datasets\n    description: |\n      Dataset management.\n  - name: Zones\n    description: |\n      Zone management.\n  # - name: Tags\n  #   description: |\n  #     Tag management.\n  - name: Records\n    description: |\n      Record management.\n  - name: Exports\n    description: |\n      Export management.\n#\n# Security\n#\nsecurity:\n  - bearerAuth: []\n\n#\n# Paths\n#\npaths:\n  #\n  # OpenAPI schema\n  #\n  /api/v1/openapi:\n    get:\n      tags:\n        - Mandatory\n      summary: Open API specification of this service in YAML format\n      description: |\n        Returns Open API specification of this service in YAML format.\n        Subset of this API with implemented services.\n      responses:\n        '200':\n          description: Get Data Manager API for Playground.\n\n  #\n  # Project list\n  #\n  /api/v1/projects:\n    get:\n      parameters:\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: string\n        - name: itemsPerPage\n          in: query\n          description: \"Page size. Default: 10, max: 100.\"\n          required: false\n          schema:\n            type: string\n      tags:\n        - Projects\n      summary: List all available projects\n      description: |\n        Return the list of all projects that are available\n        for current user\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Projects'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Dataset list and creation\n  #\n  /api/v1/datasets:\n    get:\n      parameters:\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: integer\n        - name: itemsPerPage\n          in: query\n          description: \"Page size. Default: 10, max: 100.\"\n          required: false\n          schema:\n            type: integer\n      tags:\n        - Datasets\n      summary: List all available datasets\n      description: |\n        Return the list of all datasets for the given project\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Datasets'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    post:\n      tags:\n        - Datasets\n      summary: Add a new dataset\n      description: Add a new dataset\n      requestBody:\n        description: |\n          Dataset description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetInput'\n      responses:\n        '201':\n          description: Dataset has been registered\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the created dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Dataset management\n  #\n  '/api/v1/datasets/{datasetId}':\n    get:\n      parameters:\n        - name: datasetId\n          in: path\n          description: ID of dataset to return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      tags:\n        - Datasets\n      summary: Find dataset by ID\n      description: Return a single dataset\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      parameters:\n        - name: datasetId\n          in: path\n          description: ID of dataset to update\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      tags:\n        - Datasets\n      summary: Update an existing dataset\n      description: Update an existing dataset\n      requestBody:\n        description: |\n          Dataset description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/DatasetInput'\n      responses:\n        '201':\n          description: Dataset has been updated\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the updated dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    delete:\n      parameters:\n        - name: datasetId\n          in: path\n          description: Dataset ID to delete\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      tags:\n        - Datasets\n      summary: Delete a dataset\n      description: |\n        Definitively remove a dataset from the platform.\n      responses:\n        '202':\n          description: Dataset marked for deletion\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/DatasetSummary'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Zone list and creation\n  #\n  '/api/v1/zones':\n    get:\n      parameters:\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: integer\n        - name: itemsPerPage\n          in: query\n          description: \"Page size. Default: 10, max: 100.\"\n          required: false\n          schema:\n            type: integer\n        - name: datasetId\n          in: query\n          description: Dataset ID\n          required: false\n          schema:\n            type: string\n            format: uuid\n        - name: status\n          in: query\n          description: Status of the zone. See ZoneStatus definition.\n          required: false\n          schema:\n            type: string\n            enum:\n              - PENDING\n              - LABELLIZED\n              - RESERVED\n            example: LABELLIZED\n      tags:\n        - Zones\n      summary: List all available zones\n      description: |\n        Return the list of all zones for the given project\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Zones'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  \n  #\n  # Zone management\n  #\n  '/api/v1/zones/{zoneId}':\n    get:\n      parameters:\n        - name: zoneId\n          in: path\n          description: ID of zone to return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      tags:\n        - Zones\n      summary: Find zone by ID\n      description: Return a single zone\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ZoneDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n    put:\n      parameters:\n        - name: zoneId\n          in: path\n          description: ID of zone to update\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      tags:\n        - Zones\n      summary: Update an existing zone\n      description: Update an existing zone\n      requestBody:\n        description: |\n          Zone description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ZoneUpdate'\n      responses:\n        '201':\n          description: Zone has been updated\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the updated zone\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ZoneDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  #\n  # Record list and creation for one record\n  #\n  # /api/v1/records/{datasetId}:\n  #   get:\n  #     tags:\n  #       - Records\n  #     summary: List all records\n  #     description: Return the list of all records\n  #     parameters:\n  #       - name: datasetId\n  #         in: path\n  #         description: Dataset ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: projectId\n  #         in: query\n  #         description: Project ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: page\n  #         in: query\n  #         description: \"Page number. Default: 1.\"\n  #         required: false\n  #         schema:\n  #           type: string\n  #       - name: itemsPerPage\n  #         in: query\n  #         description: \"Page size. Default: 10, max: 100.\"\n  #         required: false\n  #         schema:\n  #           type: string\n  #     responses:\n  #       '200':\n  #         description: successful operation\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Records'\n  #       '400':\n  #         description: Bad request\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '401':\n  #         description: Unauthorized\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '403':\n  #         description: Forbidden\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '404':\n  #         description: Not Found\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #   post:\n  #     tags:\n  #       - Records\n  #     summary: Create a record\n  #     description: Create a record\n  #     parameters:\n  #       - name: datasetId\n  #         in: path\n  #         description:  Dataset ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: projectId\n  #         in: query\n  #         description: Project ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - in: header\n  #         name: X-Correlation-ID\n  #         description: System wide request identifier.\n  #         schema:\n  #           type: string\n  #       - in: header\n  #         name: X-ADS-Debug\n  #         description: Enable debug mode.\n  #         schema:\n  #           type: boolean\n  #     responses:\n  #       '201':\n  #         description: Record added\n  #         headers:\n  #           Location:\n  #             schema:\n  #               type: string\n  #             description: URI of the record\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/RecordDescribe'\n  #       '400':\n  #         description: Bad request\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '401':\n  #         description: Unauthorized\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '403':\n  #         description: Forbidden\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '404':\n  #         description: Not Found\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '405':\n  #         description: Invalid input\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #     requestBody:\n  #       description: Record description\n  #       required: true\n  #       content:\n  #         application/json:\n  #           schema:\n  #             $ref: '#/components/schemas/RecordDescribe'\n\n  #\n  # Record management\n  #\n  # /api/v1/records/{datasetId}/{recordId}:\n  #   get:\n  #     tags:\n  #       - Records\n  #     summary: Find record by ID\n  #     description: Returns a single record\n  #     parameters:\n  #       - name: datasetId\n  #         in: path\n  #         description: Dataset ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: recordId\n  #         in: path\n  #         description: ID of record to return\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: projectId\n  #         in: query\n  #         description: Project ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #     responses:\n  #       '200':\n  #         description: successful operation\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/RecordDescribe'\n  #       '400':\n  #         description: Bad request\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '401':\n  #         description: Unauthorized\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '403':\n  #         description: Forbidden\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '404':\n  #         description: Not Found\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #   delete:\n  #     tags:\n  #       - Records\n  #     summary: Delete a record\n  #     description: Delete a record\n  #     parameters:\n  #       - name: datasetId\n  #         in: path\n  #         description: Dataset ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: recordId\n  #         in: path\n  #         description: ID of record to delete\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #       - name: projectId\n  #         in: query\n  #         description: Project ID\n  #         required: true\n  #         schema:\n  #           type: string\n  #           format: uuid\n  #     responses:\n  #       '202':\n  #         description: Record deleted\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/RecordSummary'\n  #       '204':\n  #         description: Record deleted\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/RecordDescribe'\n  #       '400':\n  #         description: Bad request\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '401':\n  #         description: Unauthorized\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '403':\n  #         description: Forbidden\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n  #       '404':\n  #         description: Not Found\n  #         content:\n  #           application/json:\n  #             schema:\n  #               $ref: '#/components/schemas/Error'\n\n  #\n  # Record export\n  #\n  '/api/v1/records/{datasetId}/export':\n    get:\n      tags:\n        - Records\n      summary: Export records\n      description: Export records. datasetId or jobId has to be specified in the query.\n      parameters:\n        - name: datasetId\n          in: path\n          description: Dataset ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: type\n          in: query\n          description: Export type. See RecordExportType definition.\n          required: true\n          schema:\n            type: string\n            enum:\n              - geojson\n              - kml\n            example: geojson\n        - name: jobId\n          in: query\n          description: Job ID to filter export to a job.\n          required: false\n          schema:\n            type: string\n            format: uuid\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/responses/GeoJSON'\n            application/vnd.google-earth.kml+xml:\n              schema:\n                $ref: '#/components/responses/KML'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n\n  #\n  # Export management\n  #\n  '/api/v1/exports':\n    get:\n      tags:\n        - Exports\n      summary: List all available exports\n      description: Return the list of all exports for the given project\n      parameters:\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: page\n          in: query\n          description: \"Page number. Default: 1.\"\n          required: false\n          schema:\n            type: integer\n        - name: itemsPerPage\n          in: query\n          description: \"Page size. Default: 10, max: 100.\"\n          required: false\n          schema:\n            type: integer\n        - name: exportType\n          in: query\n          description: Export type. See ExportType definition.\n          required: false\n          schema:\n            type: string\n            format: uuid\n            enum:\n              - Dataset\n              - Job\n            example: LABELLIZED\n        - name: status\n          in: query\n          description: Status of the zone. See ExportStatus definition.\n          required: false\n          schema:\n            type: string\n            enum:\n              - PENDING\n              - RUNNING\n              - SUCCEEDED\n              - FAILED\n            example: RUNNING\n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Exports'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n  \n  \n  '/api/v1/exports/{exportId}':\n    get:\n      tags:\n        - Exports\n      summary: Find export by ID\n      description: Return a single export\n      parameters:\n        - name: exportId\n          in: path\n          description: ID of export to return\n          required: true\n          schema:\n            type: string\n            format: uuid\n        - name: projectId\n          in: query\n          description: Project ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      \n      responses:\n        '200':\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '404':\n          description: Not Found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  \n  '/api/v1/exports/dataset/{datasetId}':  \n    post:\n      tags:\n        - Exports\n      summary: Create a new dataset export\n      description: Create a new export\n      parameters:\n        - name: datasetId\n          in: path\n          description: dataset ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Export description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExportInput'\n      responses:\n        '201':\n          description: Export has been registered\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the created dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  \n  '/api/v1/exports/job/{jobId}':  \n    post:\n      tags:\n        - Exports\n      summary: Create a new job export\n      description: Create a new export\n      parameters:\n        - name: jobId\n          in: path\n          description: job ID\n          required: true\n          schema:\n            type: string\n            format: uuid\n      requestBody:\n        description: Export description\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ExportInput'\n      responses:\n        '201':\n          description: Export has been registered\n          headers:\n            Location:\n              schema:\n                type: string\n              description: URI of the created dataset\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ExportDescribe'\n        '400':\n          description: Bad request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          description: Unauthorized\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Forbidden\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '405':\n          description: Invalid input\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n#\n# Components\n#\ncomponents:\n\n  #\n  # Security\n  #\n  securitySchemes:\n    BearerAuth:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n\n  #\n  # Responses\n  #\n  responses:\n    GeoJSON:\n      description: GeoJSON.\n\n    KML:\n      description: KML.\n\n  #\n  # Schemas\n  #\n  schemas:\n\n    #\n    # Projects schema\n    #\n    Projects:\n      type: object\n      properties:\n        projects:\n          type: array\n          items:\n            $ref: '#/components/schemas/ProjectSummary'\n        count:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        _links:\n          $ref: '#/components/schemas/NavLinks'\n\n    #\n    # ProjectSummary schema\n    #\n    ProjectSummary:\n      description: |\n        Project summary.\n      type: object\n      required:\n        - projectId\n        - name\n        - description\n        - creationDate\n      properties:\n        projectId:\n          description: Unique identifier of the project.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        name:\n          description: Name of the project.\n          type: string\n          example: 'Ship detection qualification'\n        description:\n          description: Description of the project.\n          type: string\n          example: 'Qualification sandbox for ship detection'\n        creationDate:\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        _links:\n          $ref: '#/components/schemas/ProjectLinks'\n\n    #\n    # Datasets schema\n    #\n    Datasets:\n      type: object\n      properties:\n        datasets:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetSummary'\n        count:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        _links:\n          $ref: '#/components/schemas/NavLinks'\n    \n    #\n    # Zones schema\n    #\n    Zones:\n      type: object\n      properties:\n        zones:\n          type: array\n          items:\n            $ref: '#/components/schemas/ZoneSummary'\n        count:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        _links:\n          $ref: '#/components/schemas/NavLinks'\n    \n    #\n    # Exports schema\n    #\n    Exports:\n      type: object\n      properties:\n        exports:\n          type: array\n          items:\n            $ref: '#/components/schemas/ExportSummary'\n        count:\n          type: integer\n          example: 1\n        total:\n          type: integer\n          example: 1\n        _links:\n          $ref: '#/components/schemas/NavLinks'\n\n    #\n    # DatasetSummary schema\n    #\n    DatasetSummary:\n      description: |\n        Dataset summary.\n      type: object\n      required:\n        - datasetId\n        - projectId\n        - name\n        - description\n        - creationDate\n      properties:\n        datasetId:\n          description: Unique identifier of the dataset.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        projectId:\n          description: Unique identifier of the project.\n          type: string\n          format: uuid\n          example: 22c61933-0b06-442c-8bab-723b2b41f570\n        name:\n          description: Name of the dataset.\n          type: string\n          example: 'Ship detection v1.1'\n        description:\n          description: Description of the dataset.\n          type: string\n          example: 'Ship detection v1.1'\n        creationDate:\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        _links:\n          $ref: '#/components/schemas/ItemLinks'\n\n    #\n    # DatasetDescribe schema\n    #\n    DatasetDescribe:\n      description: |\n        Dataset description.\n      type: object\n      required:\n        - datasetId\n        - projectId\n        - name\n        - description\n        - creationDate\n      properties:\n        datasetId:\n          description: Unique identifier of the dataset.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        projectId:\n          description: Unique identifier of the project.\n          type: string\n          format: uuid\n          example: 22c61933-0b06-442c-8bab-723b2b41f570\n        name:\n          description: Name of the dataset.\n          type: string\n          example: 'Ship detection v1.1'\n        description:\n          description: Description of the dataset.\n          type: string\n          example: 'Ship detection v1.1'\n        creationDate:\n          description: Creation date fo the dataset.\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        _links:\n          $ref: '#/components/schemas/DatasetLinks'\n\n    #\n    # DatasetInput schema\n    #\n    DatasetInput:\n      description: |\n        Dataset creation and update.\n      type: object\n      required:\n        - projectId\n        - name\n        - description\n      properties:\n        projectId:\n          description: Unique identifier of the project.\n          type: string\n          format: uuid\n          example: 22c61933-0b06-442c-8bab-723b2b41f570\n        name:\n          description: Name of the dataset.\n          type: string\n          example: 'Ship detection v1.1'\n        description:\n          description: Description of the dataset.\n          type: string\n          example: 'Ship detection v1.1'\n\n\n    #\n    # ZoneSummary schema\n    #\n    ZoneSummary:\n      description: |\n        Zone summary.\n      type: object\n      required:\n        - zoneId\n        - datasetId\n        - name\n        - creationDate\n        - status\n        - imageIds\n        - geom\n      properties:\n        zoneId:\n          description: Unique identifier of the zone.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        datasetId:\n          description: Unique identifier of the dataset.\n          type: string\n          format: uuid\n          example: 22c61933-0b06-442c-8bab-723b2b41f570\n        name:\n          description: Name of the zone.\n          type: string\n          example: 'South Africa'\n        creationDate:\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        status:\n          description: Zone status. See ZoneStatus definition.\n          type: string\n          enum:\n            - PENDING\n            - LABELLIZED\n            - RESERVED\n          example: LABELLIZED\n        imageIds:\n          description: identifier for each image of the zone.\n          type: array\n          items:\n            type: string\n          example: ['3c4f2100a26f7f20cb04be0a8a56e0203aeb66c3']\n        geom:\n          description: Geometry of the zone as GeoJSON.\n          type: object\n        _links:\n          $ref: '#/components/schemas/ItemLinks'\n\n    #\n    # ZoneDescribe schema\n    #\n    ZoneDescribe:\n      description: |\n        Zone description.\n      type: object\n      required:\n        - zoneId\n        - datasetId\n        - name\n        - creationDate\n        - status\n        - imageIds\n        - geom\n      properties:\n        zoneId:\n          description: Unique identifier of the zone.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        datasetId:\n          description: Unique identifier of the dataset.\n          type: string\n          format: uuid\n          example: 22c61933-0b06-442c-8bab-723b2b41f570\n        name:\n          description: Name of the zone.\n          type: string\n          example: 'South Africa'\n        creationDate:\n          description: Creation date fo the zone.\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        status:\n          description: Zone status. See ZoneStatus definition.\n          type: string\n          enum:\n            - PENDING\n            - LABELLIZED\n            - RESERVED\n          example: LABELLIZED\n        imageIds:\n          description: identifier for each image of the zone.\n          type: array\n          items:\n            type: string\n          example: ['3c4f2100a26f7f20cb04be0a8a56e0203aeb66c3']\n        geom:\n          description: Geometry of the zone as GeoJSON.\n          type: object\n        _links:\n          $ref: '#/components/schemas/ItemLinks'\n\n    #\n    # ZoneUpdate schema\n    #\n    ZoneUpdate:\n      description: |\n        Zone update.\n      type: object\n      properties:\n        name:\n          description: Name of the zone.\n          type: string\n          example: 'Toulouse'\n        description:\n          description: Description of the zone.\n          type: string\n          example: 'Toulouse area'\n        status:\n          description: Zone status\n          type: string\n          enum:\n            - PENDING\n            - LABELLIZED\n            - RESERVED\n          example: LABELLIZED\n\n    #\n    # ZoneStatus schema\n    #\n    ZoneStatus:\n      description: |\n        Zone status.\n      type: string\n      enum:\n        - PENDING\n        - LABELLIZED\n        - RESERVED\n      example: LABELLIZED\n\n\n    #\n    # ExportSummary schema\n    #\n    ExportSummary:\n      description: |\n        Export summary.\n      type: object\n      required:\n        - exportId\n        - exportType\n        - name\n        - creationDate\n        - status\n      properties:\n        exportId:\n          description: Unique identifier of the export.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        exportType:\n          description: Export type. See ExportType definition.\n          type: string\n          enum:\n            - Dataset\n            - Job\n          example: Dataset\n        name:\n          description: Name of the export.\n          type: string\n          example: 'South Africa'\n        creationDate:\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        status:\n          description: Export status. See ExportStatus definition.\n          type: string\n          enum:\n            - PENDING\n            - RUNNING\n            - SUCCEEDED\n            - FAILED\n          example: RUNNING\n        _links:\n          $ref: '#/components/schemas/ItemLinks'\n\n    #\n    # ExportDescribe schema\n    #\n    ExportDescribe:\n      description: |\n        Export description.\n      type: object\n      required:\n        - exportId\n        - exportType\n        - name\n        - creationDate\n        - status\n        - gsUrl\n        - httpUrl\n      properties:\n        exportId:\n          description: Unique identifier of the export.\n          type: string\n          format: uuid\n          example: 15c61933-0b06-442c-8bab-723b2b41f570\n        exportType:\n          description: Export type. See ExportType definition.\n          type: string\n          enum:\n            - Dataset\n            - Job\n          example: Dataset\n        name:\n          description: Name of the export.\n          type: string\n          example: 'South Africa'\n        creationDate:\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n        status:\n          description: Export status. See ExportStatus definition.\n          type: string\n          enum:\n            - PENDING\n            - RUNNING\n            - SUCCEEDED\n            - FAILED\n          example: RUNNING\n        _links:\n          $ref: '#/components/schemas/ExportLinks'\n\n    #\n    # ExportInput schema\n    #\n    ExportInput:\n      description: |\n        Export creation.\n      type: object\n      required:\n        - name\n        - projectId\n      properties:\n        name:\n          description: Name of the export.\n          type: string\n          example: 'Ship detection v1.1'\n        projectId:\n          description: Unique identifier of the project.\n          type: string\n          format: uuid\n          example: 22c61933-0b06-442c-8bab-723b2b41f570\n\n    #\n    # ExportType schema\n    #\n    ExportType:\n      description: |\n        Export type.\n      type: string\n      enum:\n        - Dataset\n        - Job\n      example: Dataset\n\n    #\n    # ExportStatus schema\n    #\n    ExportStatus:\n      description: |\n        Export status.\n      type: string\n      enum:\n        - PENDING\n        - RUNNING\n        - SUCCEEDED\n        - FAILED\n      example: RUNNING\n\n\n    #\n    # RecordExportType schema\n    #\n    RecordExportType:\n      description: |\n        Record export type.\n      type: string\n      enum:\n        - geojson\n        - kml\n      example: geojson\n\n    #\n    # Records schema\n    #\n    # Records:\n    #   type: object\n    #   properties:\n    #     records:\n    #       type: array\n    #       items:\n    #         $ref: '#/components/schemas/RecordSummary'\n    #     count:\n    #       type: integer\n    #       example: 1\n    #     total:\n    #       type: integer\n    #       example: 1\n    #     _links:\n    #       $ref: '#/components/schemas/NavLinks'\n\n    #\n    # RecordSummary schema\n    #\n    # RecordSummary:\n    #   type: object\n    #   required:\n    #     - recordId\n    #     - datasetId\n    #     - jobId\n    #     - creationDate\n    #     - tags\n    #     - state\n    #   properties:\n    #     recordId:\n    #       description: Unique identifier of the record.\n    #       type: string\n    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b\n    #     datasetId:\n    #       description: Unique identifier of the dataset.\n    #       type: string\n    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b\n    #     jobId:\n    #       description: Unique identifier of the job.\n    #       type: string\n    #       example: 15c61933-0b06-442c-8bab-723b2b41f570\n    #     creationDate:\n    #       description: Date of the creation of this record.\n    #       type: string\n    #       format: date-time\n    #       example: '2017-07-21T17:32:28Z'\n    #     tags:\n    #       description: List of tags.\n    #       type: array\n    #       items:\n    #         type: string\n    #       example: \"['ship']\"\n    #     state:\n    #       description: State of the record.\n    #       $ref: '#/components/schemas/RecordState'\n    #     _links:\n    #       $ref: '#/components/schemas/ItemLinks'\n\n    #\n    # RecordDescribe schema\n    #\n    # RecordDescribe:\n    #   type: object\n    #   required:\n    #     - recordId\n    #     - datasetId\n    #     - jobId\n    #     - creationDate\n    #     - tags\n    #     - state\n    #     - geom\n    #     - sourceIds\n    #   properties:\n    #     recordId:\n    #       description: Unique identifier of the record.\n    #       type: string\n    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b\n    #     datasetId:\n    #       description: Unique identifier of the dataset.\n    #       type: string\n    #       example: bb4358f0-30f2-11e8-b467-0ed5f89f718b\n    #     jobId:\n    #       description: Unique identifier of the job.\n    #       type: string\n    #       example: 15c61933-0b06-442c-8bab-723b2b41f570\n    #     creationDate:\n    #       description: Date of the creation of this record.\n    #       type: string\n    #       format: date-time\n    #       example: '2017-07-21T17:32:28Z'\n    #     tags:\n    #       description: List of tags.\n    #       type: array\n    #       items:\n    #         type: string\n    #       example: ['ship']\n    #     state:\n    #       description: State of the record.\n    #       $ref: '#/components/schemas/RecordState'\n    #     geom:\n    #       description: Geometry of the record as GeoJSON.\n    #       type: object\n    #     sourceIds:\n    #       description: Source image of the record.\n    #       type: array\n    #       items:\n    #         type: string\n    #       example: ['DS_SPOT7_201806191033345_FR1_FR1_SV1_SV1_W003N37_01790']\n    #     _links:\n    #       $ref: '#/components/schemas/RecordLinks'\n\n    #\n    # RecordState schema\n    #\n    # RecordState:\n    #   description: State of a record.\n    #   type: string\n    #   enum:\n    #     - PREDICTED\n    #     - MODIFIED\n    #     - ADDED\n    #     - DELETED\n    #     - VERIFIED\n    #   example: ADDED\n\n    #\n    # NavLinks schema\n    #\n    NavLinks:\n      description: |\n        Links to related resources.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current page reference.\n          $ref: '#/components/schemas/Reference'\n        next:\n          description: Next page reference.\n          $ref: '#/components/schemas/Reference'\n        prev:\n          description: Previous page reference\n          $ref: '#/components/schemas/Reference'\n        first:\n          description: First page reference.\n          $ref: '#/components/schemas/Reference'\n        last:\n          description: Last page reference\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # ItemLinks schema\n    #\n    ItemLinks:\n      description: |\n        Links for single resource.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # ProjectLinks schema\n    #\n    ProjectLinks:\n      description: |\n        Links for single project.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n        datasets:\n          description: List of associated datasets.\n          $ref: '#/components/schemas/Reference'\n        users:\n          description: List of associated users.\n          $ref: '#/components/schemas/Reference'\n        processes:\n          description: List of associated processes.\n          $ref: '#/components/schemas/Reference'\n        update:\n          description: PUT ressource to update this project.\n          $ref: '#/components/schemas/Reference'\n        delete:\n          description: DELETE ressource to delete this project.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # DatasetLinks schema\n    #\n    DatasetLinks:\n      description: |\n        Links for single dataset.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n        zones:\n          description: List of associated zones.\n          $ref: '#/components/schemas/Reference'\n        #tags:\n        #  description: List of associated tags.\n        #  $ref: '#/components/schemas/Reference'\n        jobs:\n          description: List of associated jobs.\n          $ref: '#/components/schemas/Reference'\n        recordsAsGeojson:\n          description: Download a zip file of GeoJSON records.\n            The zip archive contains one file per zone.\n            Only zones with 'LABELLIZED' status are exported.\n          $ref: '#/components/schemas/Reference'\n        update:\n          description: PUT ressource to update this dataset.\n          $ref: '#/components/schemas/Reference'\n        delete:\n          description: DELETE ressource to delete this dataset.\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # ExportLinks schema\n    #\n    ExportLinks:\n      description: |\n        Links for single export.\n      type: object\n      required:\n        - self\n      properties:\n        self:\n          description: Current resource reference.\n          $ref: '#/components/schemas/Reference'\n        list:\n          description: List similar resource references.\n          $ref: '#/components/schemas/Reference'\n        gsUrl:\n          description: Google Storage URL of the bucket.\n          $ref: '#/components/schemas/Reference'\n        httpUrl:\n          description: HTTP URL of the bucket\n          $ref: '#/components/schemas/Reference'\n\n    #\n    # RecordLinks schema\n    #\n    # RecordLinks:\n    #   description: |\n    #     Links for single record.\n    #   type: object\n    #   required:\n    #     - self\n    #   properties:\n    #     self:\n    #       description: Current resource reference.\n    #       $ref: '#/components/schemas/Reference'\n    #     list:\n    #       description: List similar resource references.\n    #       $ref: '#/components/schemas/Reference'\n    #     zone:\n    #       description: Associated zone.\n    #       $ref: '#/components/schemas/Reference'\n    #     tags:\n    #       description: List of associated tags.\n    #       $ref: '#/components/schemas/Reference'\n    #     job:\n    #       description: Associated job.\n    #       $ref: '#/components/schemas/Reference'\n    #     update:\n    #       description: PUT ressource to update this record.\n    #       $ref: '#/components/schemas/Reference'\n    #     delete:\n    #       description: DELETE ressource to delete this record.\n    #       $ref: '#/components/schemas/Reference'\n\n    #\n    # Reference schema\n    #\n    Reference:\n      description: |\n        Reference object.\n      type: object\n      required:\n        - href\n      properties:\n        relation:\n          description: Description of the relation.\n          type: string\n          example: myrelation\n        href:\n          description: Determine the target URI of the related resource.\n          type: string\n          format: uri\n          example: |\n            http://myservice.com/api/v1/processes/15c61933-0b06-442c-8bab-723b2b41f570\n        type:\n          description: Expected content type of the response of the reference.\n          type: string\n          example: application/json\n        method:\n          description: |\n            HTTP verb to distinguish between several possible actions on the\n            same ressource. GET if omitted.\n          $ref: '#/components/schemas/ReferenceMethod'\n\n    #\n    # ReferenceMethod schema\n    #\n    ReferenceMethod:\n      description: |\n        HTTP verbs to access resources.\n      type: string\n      enum:\n        - GET\n        - POST\n        - PUT\n        - DELETE\n      example: GET\n\n    #\n    # Error schema\n    #\n    Error:\n      description: |\n        Error returned when request fails\n      type: object\n      required:\n        - message\n      properties:\n        message:\n          description: End user error description.\n          type: string\n          example: Something went wrong!\n        hint:\n          description: Internal / developper error message (no trace).\n          type: string\n          example: Class CatDetection threw an exception on line 125\n        correlationId:\n          description: System request identifier from request header.\n          type: string\n          example: run-1258\n        timestamp:\n          description: Error timestamp.\n          type: string\n          format: date-time\n          example: '2017-07-21T17:32:28Z'\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/v1/datasets: get: operation \"\": security: unknown security schema \"bearerAuth\""
}