{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/tkestack/tke"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "pkg/registry/harbor/helmClient/api/swagger.yaml",
			"byteSize": 19912,
			"content": "openapi: 3.0.1\ninfo:\n  title: Harbor API\n  description: These APIs provide services for manipulating Harbor project.\nservers:\n- url: http://localhost/api/\n- url: https://localhost/api/\nsecurity:\n- basicAuth: []\npaths:\n  /version:\n    get:\n      tags:\n      - Version\n      summary: Get API version\n      description: Get the version of API that supported by the Harbor instance.\n      responses:\n        \"200\":\n          description: The supported API version\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200'\n  /chartrepo/health:\n    get:\n      tags:\n      - Chart Repository\n      summary: Check the health of chart repository service.\n      description: Check the health of chart repository service.\n      responses:\n        \"200\":\n          description: Health status of chart repository service is returned.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/inline_response_200_1'\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n  /chartrepo/{repo}/charts:\n    get:\n      tags:\n      - Chart Repository\n      summary: Get all the charts under the specified project\n      description: Get all the charts under the specified project\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Searched for charts of project in Harbor successfully.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ChartInfoEntry'\n                x-content-type: application/json\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n    post:\n      tags:\n      - Chart Repository\n      summary: Upload a chart file to the specified project.\n      description: Upload a chart file to the specified project. With this API, the\n        corresponding provance file can be uploaded together with chart file at once.\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/body'\n        required: true\n      responses:\n        \"201\":\n          description: The specified chart is successfully uploaded.\n          content: {}\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n        \"507\":\n          $ref: '#/definitions/InsufficientStorageChartAPIError'\n  /chartrepo/{repo}/charts/{name}:\n    get:\n      tags:\n      - Chart Repository\n      summary: Get all the versions of the specified chart\n      description: Get all the versions of the specified chart\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The chart name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Retrieved all versions of the specified chart\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartVersions'\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"404\":\n          $ref: '#/definitions/NotFoundChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n    delete:\n      tags:\n      - Chart Repository\n      summary: Delete all the versions of the specified chart\n      description: Delete all the versions of the specified chart\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The chart name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The specified chart entry is successfully deleted.\n          content: {}\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n  /chartrepo/{repo}/charts/{name}/{version}:\n    get:\n      tags:\n      - Chart Repository\n      summary: Get the specified chart version\n      description: Get the specified chart version\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The chart name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: The chart version\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: Successfully retrieved the chart version\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ChartVersionDetails'\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"404\":\n          $ref: '#/definitions/NotFoundChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n    delete:\n      tags:\n      - Chart Repository\n      summary: Delete the specified chart version\n      description: Delete the specified chart version\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: name\n        in: path\n        description: The chart name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      - name: version\n        in: path\n        description: The chart version\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      responses:\n        \"200\":\n          description: The specified chart entry is successfully deleted.\n          content: {}\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"404\":\n          $ref: '#/definitions/NotFoundChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n  /chartrepo/{repo}/prov:\n    post:\n      tags:\n      - Chart Repository\n      summary: Upload a provance file to the specified project.\n      description: Upload a provance file to the specified project. The provance file\n        should be targeted for an existing chart file.\n      parameters:\n      - name: repo\n        in: path\n        description: The project name\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/body_1'\n        required: true\n      responses:\n        \"201\":\n          description: The provance file is successfully uploaded.\n          content: {}\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n        \"507\":\n          $ref: '#/definitions/InsufficientStorageChartAPIError'\n  /chartrepo/charts:\n    post:\n      tags:\n      - Chart Repository\n      summary: Upload a chart file to the defult 'library' project.\n      description: Upload a chart file to the default 'library' project. Uploading\n        together with the prov file at the same time is also supported.\n      requestBody:\n        content:\n          multipart/form-data:\n            schema:\n              $ref: '#/components/schemas/body_2'\n        required: true\n      responses:\n        \"201\":\n          description: The specified chart is successfully uploaded.\n          content: {}\n        \"401\":\n          $ref: '#/definitions/UnauthorizedChartAPIError'\n        \"403\":\n          $ref: '#/definitions/ForbiddenChartAPIError'\n        \"500\":\n          $ref: '#/definitions/InternalChartAPIError'\n        \"507\":\n          $ref: '#/definitions/InsufficientStorageChartAPIError'\ncomponents:\n  schemas:\n    ChartAPIError:\n      required:\n      - error\n      type: object\n      properties:\n        error:\n          type: string\n          description: The error message returned by the chart API\n      description: The error object returned by chart repository API\n    UnauthorizedChartAPIError:\n      description: Unauthorized\n      allOf:\n      - $ref: '#/components/schemas/ChartAPIError'\n    ForbiddenChartAPIError:\n      description: Operation is forbidden or quota exceeded\n      allOf:\n      - $ref: '#/components/schemas/ChartAPIError'\n    InternalChartAPIError:\n      description: Internal server error occurred\n      allOf:\n      - $ref: '#/components/schemas/ChartAPIError'\n    NotFoundChartAPIError:\n      description: Not found\n      allOf:\n      - $ref: '#/components/schemas/ChartAPIError'\n    InsufficientStorageChartAPIError:\n      description: Insufficient storage\n      allOf:\n      - $ref: '#/components/schemas/ChartAPIError'\n    ChartInfoEntry:\n      required:\n      - created\n      - name\n      - total_versions\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of chart\n        total_versions:\n          type: integer\n          description: Total count of chart versions\n        latest_version:\n          type: string\n          description: latest version of chart\n        created:\n          type: string\n          description: The created time of chart\n        updated:\n          type: string\n          description: The created time of chart\n        icon:\n          type: string\n          description: The icon path of chart\n        home:\n          type: string\n          description: The home website of chart\n        deprecated:\n          type: boolean\n          description: Flag to indicate if the chart is deprecated\n      description: The object contains basic chart information\n      example:\n        total_versions: 0\n        latest_version: latest_version\n        created: created\n        deprecated: true\n        name: name\n        icon: icon\n        updated: updated\n        home: home\n    ChartInfoList:\n      type: array\n      description: The chart list under the project\n      items:\n        $ref: '#/components/schemas/ChartInfoEntry'\n    ChartVersion:\n      properties:\n        labels:\n          $ref: '#/components/schemas/Labels'\n      description: A specified chart entry\n      example:\n        labels:\n        - creation_time: creation_time\n          update_time: update_time\n          deleted: true\n          color: color\n          project_id: 6\n          scope: scope\n          name: name\n          description: description\n          id: 0\n        - creation_time: creation_time\n          update_time: update_time\n          deleted: true\n          color: color\n          project_id: 6\n          scope: scope\n          name: name\n          description: description\n          id: 0\n      allOf:\n      - $ref: '#/components/schemas/ChartMetadata'\n      - type: object\n        properties:\n          created:\n            type: string\n            description: The created time of the chart entry\n          removed:\n            type: boolean\n            description: A flag to indicate if the chart entry is removed\n          digest:\n            type: string\n            description: The digest value of the chart entry\n          urls:\n            type: array\n            description: The urls of the chart entry\n            items:\n              type: string\n    ChartVersions:\n      type: array\n      description: A list of chart entry\n      items:\n        $ref: '#/components/schemas/ChartVersion'\n      x-schema-name: ChartVersions\n    ChartVersionDetails:\n      type: object\n      properties:\n        metadata:\n          $ref: '#/components/schemas/ChartVersion'\n        security:\n          $ref: '#/components/schemas/SecurityReport'\n        dependencies:\n          type: array\n          items:\n            $ref: '#/components/schemas/Dependency'\n        values:\n          type: object\n          additionalProperties:\n            type: object\n            properties: {}\n            example: {}\n        files:\n          type: object\n          additionalProperties:\n            type: string\n        labels:\n          $ref: '#/components/schemas/Labels'\n      description: The detailed information of the chart entry\n      example:\n        metadata:\n          labels:\n          - creation_time: creation_time\n            update_time: update_time\n            deleted: true\n            color: color\n            project_id: 6\n            scope: scope\n            name: name\n            description: description\n            id: 0\n          - creation_time: creation_time\n            update_time: update_time\n            deleted: true\n            color: color\n            project_id: 6\n            scope: scope\n            name: name\n            description: description\n            id: 0\n        security:\n          signature:\n            prov_file: prov_file\n            signed: true\n        values:\n          key: {}\n        files:\n          key: files\n        dependencies:\n        - name: name\n          repository: repository\n          version: version\n        - name: name\n          repository: repository\n          version: version\n        labels:\n        - creation_time: creation_time\n          update_time: update_time\n          deleted: true\n          color: color\n          project_id: 6\n          scope: scope\n          name: name\n          description: description\n          id: 0\n        - creation_time: creation_time\n          update_time: update_time\n          deleted: true\n          color: color\n          project_id: 6\n          scope: scope\n          name: name\n          description: description\n          id: 0\n    ChartMetadata:\n      required:\n      - apiVersion\n      - appVersion\n      - engine\n      - icon\n      - name\n      - version\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the chart\n        home:\n          type: string\n          description: The URL to the relevant project page\n        sources:\n          type: array\n          description: The URL to the source code of chart\n          items:\n            type: string\n        version:\n          type: string\n          description: A SemVer 2 version of chart\n        description:\n          type: string\n          description: A one-sentence description of chart\n        keywords:\n          type: array\n          description: A list of string keywords\n          items:\n            type: string\n        engine:\n          type: string\n          description: The name of template engine\n        icon:\n          type: string\n          description: The URL to an icon file\n        apiVersion:\n          type: string\n          description: The API version of this chart\n        appVersion:\n          type: string\n          description: The version of the application enclosed in the chart\n        deprecated:\n          type: boolean\n          description: Whether or not this chart is deprecated\n      description: The metadata of chart version\n    Labels:\n      type: array\n      description: A list of label\n      items:\n        $ref: '#/components/schemas/Label'\n      x-schema-name: Labels\n    Label:\n      type: object\n      properties:\n        id:\n          type: integer\n          description: The ID of label.\n        name:\n          type: string\n          description: The name of label.\n        description:\n          type: string\n          description: The description of label.\n        color:\n          type: string\n          description: The color of label.\n        scope:\n          type: string\n          description: The scope of label, g for global labels and p for project labels.\n        project_id:\n          type: integer\n          description: The project ID if the label is a project label.\n        creation_time:\n          type: string\n          description: The creation time of label.\n        update_time:\n          type: string\n          description: The update time of label.\n        deleted:\n          type: boolean\n          description: The label is deleted or not.\n      example:\n        creation_time: creation_time\n        update_time: update_time\n        deleted: true\n        color: color\n        project_id: 6\n        scope: scope\n        name: name\n        description: description\n        id: 0\n    SecurityReport:\n      type: object\n      properties:\n        signature:\n          $ref: '#/components/schemas/DigitalSignature'\n      description: The security information of the chart\n      example:\n        signature:\n          prov_file: prov_file\n          signed: true\n    Dependency:\n      required:\n      - name\n      - version\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the chart denpendency\n        version:\n          type: string\n          description: The version of the chart dependency\n        repository:\n          type: string\n          description: The URL to the repository\n      description: Another chart the chart depends on\n      example:\n        name: name\n        repository: repository\n        version: version\n    DigitalSignature:\n      type: object\n      properties:\n        signed:\n          type: boolean\n          description: A flag to indicate if the chart is signed\n        prov_file:\n          type: string\n          description: The URL of the provance file\n      description: The signature of the chart\n      example:\n        prov_file: prov_file\n        signed: true\n    inline_response_200:\n      type: object\n      properties:\n        version:\n          type: string\n      example:\n        version: version\n    inline_response_200_1:\n      type: object\n      properties:\n        healthy:\n          type: boolean\n      example:\n        healthy: true\n    body:\n      required:\n      - chart\n      properties:\n        chart:\n          type: string\n          description: The chart file\n          format: binary\n    body_1:\n      required:\n      - prov\n      properties:\n        prov:\n          type: string\n          description: The provance file\n          format: binary\n    body_2:\n      required:\n      - chart\n      properties:\n        chart:\n          type: string\n          description: The chart file\n          format: binary\n  securitySchemes:\n    basicAuth:\n      type: http\n      scheme: basic\nx-original-swagger-version: \"2.0\"\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /chartrepo/charts: post: operation \"\": responses: 401: resolve \"#/definitions/UnauthorizedChartAPIError\" reference: invalid response reference: \"#/definitions/UnauthorizedChartAPIError\""
}