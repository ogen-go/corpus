{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/merikbest/ecommerce-spring-reactjs"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "src/main/resources/static/swagger-api/swagger.yaml",
			"byteSize": 50529,
			"content": "openapi: 3.0.0\ninfo:\n  version: \"1.0.0\"\n  title: \"ecommerce-spring-reactjs\"\nservers:\n  - url: \"http://localhost:8080\"\n  - url: \"https://perfume-websore-api.herokuapp.com\"\n\ntags:\n  - name: \"AdminController\"\n  - name: \"AuthenticationController\"\n  - name: \"PerfumeController\"\n  - name: \"RegistrationController\"\n  - name: \"UserController\"\n\npaths:\n  /api/v1/admin/add:\n    post:\n      tags:\n        - \"AdminController\"\n      summary: \"Add perfume to database\"\n      operationId: \"addPerfume\"\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                perfumeTitle:\n                  type: string\n                perfumer:\n                  type: string\n                year:\n                  type: string\n                country:\n                  type: string\n                perfumeGender:\n                  type: string\n                fragranceTopNotes:\n                  type: string\n                fragranceMiddleNotes:\n                  type: string\n                fragranceBaseNotes:\n                  type: string\n                description:\n                  type: string\n                filename:\n                  type: string\n                price:\n                  type: string\n                volume:\n                  type: string\n                type:\n                  type: string\n              required:\n                - perfumeTitle\n                - perfumer\n                - year\n                - country\n                - perfumeGender\n                - fragranceTopNotes\n                - fragranceMiddleNotes\n                - fragranceBaseNotes\n                - price\n                - volume\n                - type\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/FullPerfumeResponse\"\n              examples:\n                PerfumeResponse:\n                  $ref: \"#/components/schemas/FullPerfumeResponse\"\n        \"400\":\n          description: \"Bad request\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/PerfumeError\"\n              examples:\n                PerfumeError:\n                  $ref: \"#/components/schemas/PerfumeError\"\n      security:\n        - token: []\n\n  /api/v1/admin/edit:\n    post:\n      tags:\n        - \"AdminController\"\n      summary: \"Update perfume\"\n      operationId: \"updatePerfume\"\n      requestBody:\n        required: true\n        content:\n          multipart/form-data:\n            schema:\n              type: object\n              properties:\n                file:\n                  type: string\n                  format: binary\n                perfumeTitle:\n                  type: string\n                perfumer:\n                  type: string\n                year:\n                  type: string\n                country:\n                  type: string\n                perfumeGender:\n                  type: string\n                fragranceTopNotes:\n                  type: string\n                fragranceMiddleNotes:\n                  type: string\n                fragranceBaseNotes:\n                  type: string\n                description:\n                  type: string\n                filename:\n                  type: string\n                price:\n                  type: string\n                volume:\n                  type: string\n                type:\n                  type: string\n              required:\n                - perfumeTitle\n                - perfumer\n                - year\n                - country\n                - perfumeGender\n                - fragranceTopNotes\n                - fragranceMiddleNotes\n                - fragranceBaseNotes\n                - price\n                - volume\n                - type\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/FullPerfumeResponse\"\n              examples:\n                PerfumeResponse:\n                  $ref: \"#/components/schemas/FullPerfumeResponse\"\n        \"400\":\n          description: \"Bad request\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/PerfumeError\"\n              examples:\n                PerfumeError:\n                  $ref: \"#/components/schemas/PerfumeError\"\n      security:\n        - token: []\n\n  /api/v1/admin/delete/{id}:\n    delete:\n      tags:\n        - \"AdminController\"\n      summary: \"Delete perfume\"\n      operationId: \"deletePerfume\"\n      parameters:\n        - name: \"id\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Perfume deleted successfully\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Perfume not found.\"\n      security:\n        - token: []\n\n  /api/v1/admin/orders:\n    get:\n      tags:\n        - \"AdminController\"\n      summary: \"Get all orders from database\"\n      operationId: \"getAllOrders\"\n      parameters: []\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n      security:\n        - token: []\n\n  /api/v1/admin/order/{email}:\n    get:\n      tags:\n        - \"AdminController\"\n      summary: \"Get user orders by email\"\n      operationId: \"getUserOrdersByEmail\"\n      parameters:\n        - name: \"email\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n      security:\n        - token: []\n\n  /api/v1/admin/order/delete/{id}:\n    delete:\n      tags:\n        - \"AdminController\"\n      summary: \"Delete order\"\n      operationId: \"deleteOrder\"\n      parameters:\n        - name: \"id\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Order deleted successfully\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Order not found.\"\n      security:\n        - token: []\n\n  /api/v1/admin/user/{id}:\n    get:\n      tags:\n        - \"AdminController\"\n      summary: \"Get user by id\"\n      operationId: \"getUser\"\n      parameters:\n        - name: \"id\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"User not found.\"\n      security:\n        - token: []\n\n  /api/v1/admin/user/all:\n    get:\n      tags:\n        - \"AdminController\"\n      summary: \"Get users from database\"\n      operationId: \"getAllUsers\"\n      parameters: []\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/BaseUserResponse\"\n      security:\n        - token: []\n\n  /api/v1/admin/graphql/user:\n    post:\n      tags:\n        - \"AdminController\"\n      summary: \"Get user by GraphQL query\"\n      operationId: \"getUserByQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ user(id: 2) { id email firstName lastName city address phoneNumber postIndex } }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: \"integer\"\n                    format: int64\n                  email:\n                    type: \"string\"\n                  firstName:\n                    type: \"string\"\n                  lastName:\n                    type: \"string\"\n                  city:\n                    type: \"string\"\n                  address:\n                    type: \"string\"\n                  phoneNumber:\n                    type: \"string\"\n                  postIndex:\n                    type: \"string\"\n                example:\n                  id: 2\n                  email: \"test123@test.com\"\n                  firstName: \"John\"\n                  lastName: \"Doe\"\n                  city: \"New York\"\n                  address: \"Wall Street 1\"\n                  phoneNumber: \"1234567890\"\n                  postIndex: \"1234567890\"\n      security:\n        - token: []\n\n  /api/v1/admin/graphql/user/all:\n    post:\n      tags:\n        - \"AdminController\"\n      summary: \"Get all users by GraphQL query\"\n      operationId: \"getAllUsersByQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ users { id email firstName lastName city address phoneNumber postIndex } }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: \"integer\"\n                      format: int64\n                    email:\n                      type: \"string\"\n                    firstName:\n                      type: \"string\"\n                    lastName:\n                      type: \"string\"\n                    city:\n                      type: \"string\"\n                    address:\n                      type: \"string\"\n                    phoneNumber:\n                      type: \"string\"\n                    postIndex:\n                      type: \"string\"\n                  example:\n                    id: 2\n                    email: \"test123@test.com\"\n                    firstName: \"John\"\n                    lastName: \"Doe\"\n                    city: \"New York\"\n                    address: \"Wall Street 1\"\n                    phoneNumber: \"1234567890\"\n                    postIndex: \"1234567890\"\n      security:\n        - token: []\n\n  /api/v1/admin/graphql/orders:\n    post:\n      tags:\n        - \"AdminController\"\n      summary: \"Get all orders by GraphQL query\"\n      operationId: \"getAllOrdersQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ orders { id totalPrice date firstName lastName city address email phoneNumber postIndex orderItems { id amount quantity perfume { id perfumeTitle perfumer price filename } } } }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n      security:\n        - token: []\n\n  /api/v1/admin/graphql/order:\n    post:\n      tags:\n        - \"AdminController\"\n      summary: \"Get orders by user Email GraphQL query\"\n      operationId: \"getUserOrdersByEmailQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ ordersByEmail(email: test123@test.com) { id totalPrice date firstName lastName city address email phoneNumber postIndex orderItems { id amount quantity perfume { id perfumeTitle perfumer price filename } } } }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n      security:\n        - token: []\n\n  /api/v1/auth/login:\n    post:\n      tags:\n        - \"AuthenticationController\"\n      summary: \"Login\"\n      operationId: \"login\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: \"test123@test.com\"\n                password:\n                  type: string\n                  example: \"1234567890\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/AuthenticationResponse\"\n        \"403\":\n          description: \"Forbidden\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Incorrect password or email\"\n\n  /api/v1/auth/forgot/{email}:\n    get:\n      tags:\n        - \"AuthenticationController\"\n      summary: \"Send password reset code to users email\"\n      operationId: \"forgotPassword\"\n      parameters:\n        - name: \"email\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Reset password code is send to your E-mail\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Email not found\"\n\n  /api/v1/auth/reset/{code}:\n    get:\n      tags:\n        - \"AuthenticationController\"\n      summary: \"Returns user info by password reset code\"\n      operationId: \"getPasswordResetCode\"\n      parameters:\n        - name: \"code\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"test@test.com\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Password reset code is invalid!\"\n\n  /api/v1/auth/reset:\n    post:\n      tags:\n        - \"AuthenticationController\"\n      summary: \"Reset password\"\n      operationId: \"passwordReset\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                email:\n                  type: string\n                  example: \"test@test.com\"\n                password:\n                  type: string\n                  example: \"1234567890\"\n                password2:\n                  type: string\n                  example: \"1234567890\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Password successfully changed!\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  passwordError:\n                    type: \"string\"\n                  password2Error:\n                    type: \"string\"\n              examples:\n                PasswordMatchError:\n                  summary: \"Password Match Error\"\n                  value:\n                    passwordError: \"Passwords do not match.\"\n                PasswordConfirmationError:\n                  summary: \"Password Confirmation Error\"\n                  value:\n                    password2Error: \"Password confirmation cannot be empty.\"\n                    \n  /api/v1/auth/edit/password:\n    put:\n      tags:\n        - \"AuthenticationController\"\n      summary: \"Change user password\"\n      operationId: \"updateUserPassword\"\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                password:\n                  type: \"string\"\n                  example: \"1234567890\"\n                password2:\n                  type: \"string\"\n                  example: \"1234567890\"\n              required:\n                - password\n                - password2\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Password successfully changed!\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  passwordError:\n                    type: \"string\"\n                  password2Error:\n                    type: \"string\"\n              examples:\n                BindingResultError:\n                  summary: \"Binding Result Errors\"\n                  value:\n                    passwordError: \"The password must be between 6 and 16 characters long\"\n                    password2Error: \"The password confirmation must be between 6 and 16 characters long\"\n                MatchPasswordError:\n                  summary: \"Match Password Error\"\n                  value:\n                    data: \"Passwords do not match.\"\n      security:\n        - token: []\n\n  /api/v1/perfumes:\n    get:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Returns list of perfumes\"\n      operationId: \"getAllPerfumes\"\n      parameters: []\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PerfumeResponse\"\n\n  /api/v1/perfumes/{id}:\n    get:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Get perfume by id\"\n      operationId: \"getPerfume\"\n      parameters:\n        - name: \"id\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/FullPerfumeResponse\"\n                \n  /api/v1/perfumes/reviews/{id}:\n    get:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Get Reviews By Perfume Id\"\n      operationId: \"getReviewsByPerfumeId\"\n      parameters:\n        - name: \"id\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/ReviewResponse\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Perfume not found.\"\n\n  /api/v1/perfumes/ids:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Get perfumes by ids\"\n      operationId: \"getPerfumesByIds\"\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: \"array\"\n              items:\n                type: \"integer\"\n                format: int64\n              example: [1, 2, 3]\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PerfumeResponse\"\n\n  /api/v1/perfumes/search:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Find perfumes by filter parameters\"\n      operationId: \"findPerfumesByFilterParams\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                perfumers:\n                  type: \"array\"\n                  items:\n                    type: \"string\"\n                    example: \"Dior\"\n                genders:\n                  type: \"array\"\n                  items:\n                    type: \"string\"\n                    example: \"male\"\n                prices:\n                  type: \"array\"\n                  items:\n                    type: \"integer\"\n                    format: int32\n                  example: [1, 200]\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PerfumeResponse\"\n\n  /api/v1/perfumes/search/gender:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Find perfumes by gender\"\n      operationId: \"findByPerfumeGender\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                genders:\n                  type: \"array\"\n                  items:\n                    type: \"string\"\n                    example: \"male\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PerfumeResponse\"\n\n  /api/v1/perfumes/search/perfumer:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Find perfumes by brand\"\n      operationId: \"findByPerfumer\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                perfumers:\n                  type: \"array\"\n                  items:\n                    type: \"string\"\n                  example: [\"Dior\", \"Creed\"]\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/PerfumeResponse\"\n\n  /api/v1/perfumes/graphql/ids:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Get list of perfumes by ids GraphQL query\"\n      operationId: \"getPerfumesByIdsQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ perfumesIds(ids: [16,17,18]) {id perfumeTitle perfumer price filename} }\"\n\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: \"integer\"\n                      format: int64\n                    perfumeTitle:\n                      type: \"string\"\n                    perfumer:\n                      type: \"string\"\n                    price:\n                      type: \"integer\"\n                      format: int32\n                    filename:\n                      type: \"string\"\n                  example:\n                    id: 43\n                    perfumeTitle: \"Sauvage\"\n                    perfumer: \"Dior\"\n                    price: 62\n                    filename: \"empty.jpg\"\n\n  /api/v1/perfumes/graphql/perfumes:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Get list of perfumes by GraphQL query\"\n      operationId: \"getAllPerfumesByQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ perfumes {id perfumeTitle perfumer price filename} }\"\n\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: \"integer\"\n                      format: int64\n                    perfumeTitle:\n                      type: \"string\"\n                    perfumer:\n                      type: \"string\"\n                    price:\n                      type: \"integer\"\n                      format: int32\n                    filename:\n                      type: \"string\"\n                  example:\n                    id: 43\n                    perfumeTitle: \"Sauvage\"\n                    perfumer: \"Dior\"\n                    price: 62\n                    filename: \"empty.jpg\"\n\n  /api/v1/perfumes/graphql/perfume:\n    post:\n      tags:\n        - \"PerfumeController\"\n      summary: \"Get perfume by GraphQL query\"\n      operationId: \"getPerfumeByQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ perfume(id: 43) {id perfumeTitle perfumer price filename} }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: \"integer\"\n                    format: int64\n                  perfumeTitle:\n                    type: \"string\"\n                  perfumer:\n                    type: \"string\"\n                  price:\n                    type: \"integer\"\n                    format: int32\n                  filename:\n                    type: \"string\"\n                example:\n                  id: 43\n                  perfumeTitle: \"Sauvage\"\n                  perfumer: \"Dior\"\n                  price: 62\n                  filename: \"empty.jpg\"\n\n  /api/v1/registration:\n    post:\n      tags:\n        - \"RegistrationController\"\n      summary: \"Registration\"\n      operationId: \"registration\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                email:\n                  type: \"string\"\n                  example: \"test1234@test.com\"\n                password:\n                  type: \"string\"\n                  example: \"1234567890\"\n                password2:\n                  type: \"string\"\n                  example: \"1234567890\"\n                firstName:\n                  type: \"string\"\n                  example: \"John\"\n                lastName:\n                  type: \"string\"\n                  example: \"Doe\"\n                captcha:\n                  type: \"string\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: \"string\"\n                    example: \"User successfully registered.\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  passwordError:\n                    type: \"string\"\n                  password2Error:\n                    type: \"string\"\n              examples:\n                PasswordMatchError:\n                  summary: \"Password Match Error\"\n                  value:\n                    passwordError: \"Passwords do not match.\"\n                EmailError:\n                  summary: \"Email Error\"\n                  value:\n                    emailError: \"Email is already used.\"\n                BindingResultError:\n                  summary: \"Binding Result Errors\"\n                  value:\n                    captchaError: \"Fill captcha.\"\n                    firstNameError: \"First name cannot be empty\"\n                    lastNameError: \"Last name cannot be empty\"\n                    passwordError: \"The password must be between 6 and 16 characters long\"\n                    password2Error: \"The password confirmation must be between 6 and 16 characters long\"\n                    emailError: \"Incorrect email\"\n\n  /api/v1/registration/activate/{code}:\n    get:\n      tags:\n        - \"RegistrationController\"\n      summary: \"Activate email code\"\n      operationId: \"activateEmailCode\"\n      parameters:\n        - name: \"code\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"string\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: \"string\"\n                    example: \"User successfully activated.\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Activation code not found.\"\n\n  /api/v1/users/info:\n    get:\n      tags:\n        - \"UserController\"\n      summary: \"Get authenticated user info\"\n      operationId: \"getUserInfo\"\n      parameters: []\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Email not found.\"\n      security:\n        - token: []\n\n  /api/v1/users/graphql/info:\n    post:\n      tags:\n        - \"UserController\"\n      summary: \"Get authenticated user info by GraphQL query\"\n      operationId: \"getUserInfoByQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ user(id: 2) { id email password firstName lastName city address phoneNumber postIndex activationCode passwordResetCode active provider roles } }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: \"integer\"\n                    format: int64\n                  email:\n                    type: \"string\"\n                  firstName:\n                    type: \"string\"\n                  lastName:\n                    type: \"string\"\n                  city:\n                    type: \"string\"\n                  address:\n                    type: \"string\"\n                  phoneNumber:\n                    type: \"string\"\n                  postIndex:\n                    type: \"string\"\n                example:\n                  id: 2\n                  email: \"test123@test.com\"\n                  firstName: \"John\"\n                  lastName: \"Doe\"\n                  city: \"New York\"\n                  address: \"Wall Street 1\"\n                  phoneNumber: \"1234567890\"\n                  postIndex: \"1234567890\"\n      security:\n        - token: []\n\n  /api/v1/users/edit:\n    put:\n      tags:\n        - \"UserController\"\n      summary: \"Edit authenticated user info\"\n      operationId: \"updateUserInfo\"\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                firstName:\n                  type: \"string\"\n                  example: \"John\"\n                lastName:\n                  type: \"string\"\n                  example: \"Doe\"\n                city:\n                  type: \"string\"\n                  example: \"New York\"\n                address:\n                  type: \"string\"\n                  example: \"Wall Street 1\"\n                phoneNumber:\n                  type: \"string\"\n                  example: \"123456\"\n                postIndex:\n                  type: \"string\"\n                  example: \"123456\"\n              required:\n                - firstName\n                - lastName\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  firstNameError:\n                    type: string\n                    example: \"First name cannot be empty\"\n                  lastNameError:\n                    type: string\n                    example: \"Last name cannot be empty\"\n      security:\n        - token: []\n\n  /api/v1/users/cart:\n    post:\n      tags:\n        - \"UserController\"\n      summary: \"Get perfumes by ids\"\n      operationId: \"getCart\"\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: \"array\"\n              items:\n                type: \"integer\"\n                format: int32\n              example: [1, 2, 3]\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/FullPerfumeResponse\"\n\n  /api/v1/users/order/{orderId}:\n    get:\n      tags:\n        - \"UserController\"\n      summary: \"Get Order By Id\"\n      operationId: \"getOrderById\"\n      parameters:\n        - name: \"orderId\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                $ref: \"#/components/schemas/OrderResponse\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Order not found.\"\n      security:\n        - token: []\n\n  /api/v1/users/order/{orderId}/items:\n    get:\n      tags:\n        - \"UserController\"\n      summary: \"Get Order Items By Order Id\"\n      operationId: \"getOrderItemsByOrderId\"\n      parameters:\n        - name: \"orderId\"\n          in: \"path\"\n          required: true\n          schema:\n            type: \"integer\"\n            format: \"int64\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderItemResponse\"\n        \"404\":\n          description: \"Not Found\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Order not found.\"\n      security:\n        - token: [ ]\n\n  /api/v1/users/orders:\n    get:\n      tags:\n        - \"UserController\"\n      summary: \"Get all user orders by email\"\n      operationId: \"getAllUserOrders\"\n      parameters: []\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n      security:\n        - token: []\n\n  /api/v1/user/graphql/orders:\n    post:\n      tags:\n        - \"UserController\"\n      summary: \"Get all user orders by GraphQL query\"\n      operationId: \"getUserOrdersByQuery\"\n      requestBody:\n        required: true\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                query:\n                  type: \"string\"\n                  example: \"{ ordersByEmail(email: test123@test.com) { id totalPrice date firstName lastName city address email phoneNumber postIndex orderItems { id amount quantity perfume { id perfumeTitle perfumer price filename } } } }\"\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n      security:\n        - token: []\n\n  /api/v1/users/order:\n    post:\n      tags:\n        - \"UserController\"\n      summary: \"Post order\"\n      operationId: \"postOrder\"\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                totalPrice:\n                  type: \"number\"\n                  format: \"double\"\n                  example: 100\n                firstName:\n                  type: \"string\"\n                  example: \"John\"\n                lastName:\n                  type: \"string\"\n                  example: \"Doe\"\n                city:\n                  type: \"string\"\n                  example: \"New York\"\n                address:\n                  type: \"string\"\n                  example: \"Wall Street 1\"\n                email:\n                  type: \"string\"\n                  example: \"test123@test.com\"\n                phoneNumber:\n                  type: \"string\"\n                  example: \"123456\"\n                postIndex:\n                  type: \"integer\"\n                  format: \"int32\"\n                  example: 123456\n                perfumesId:\n                  type: \"object\"\n                  properties:\n                    43:\n                      type: integer\n                      example: 1\n              required:\n                - firstName\n                - lastName\n                - city\n                - address\n                - email\n                - phoneNumber\n                - postIndex\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/OrderResponse\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  firstNameError:\n                    type: \"string\"\n                    example: \"Fill in the input field\"\n                  lastNameError:\n                    type: \"string\"\n                    example: \"Fill in the input field\"\n                  cityError:\n                    type: \"string\"\n                    example: \"Fill in the input field\"\n                  addressError:\n                    type: \"string\"\n                    example: \"Fill in the input field\"\n                  emailError:\n                    type: \"string\"\n                    example: \"Email cannot be empty\"\n                  phoneNumberError:\n                    type: \"string\"\n                    example: \"Phone number cannot be empty\"\n                  postIndexError:\n                    type: \"string\"\n                    example: \"Post index cannot be empty\"\n\n  /api/v1/users/review:\n    post:\n      tags:\n        - \"UserController\"\n      summary: \"Add review to perfume\"\n      operationId: \"addReviewToPerfume\"\n      requestBody:\n        content:\n          'application/json':\n            schema:\n              type: object\n              properties:\n                perfumeId:\n                  type: \"number\"\n                  format: \"int64\"\n                  example: 43\n                author:\n                  type: \"string\"\n                  example: \"John Doe\"\n                message:\n                  type: \"string\"\n                  example: \"Hello World!\"\n              required:\n                - perfumeId\n                - author\n                - message\n      responses:\n        \"200\":\n          description: \"OK\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  data:\n                    type: string\n                    example: \"Review added successfully.\"\n        \"400\":\n          description: \"Bad Request\"\n          content:\n            'application/json':\n              schema:\n                type: object\n                properties:\n                  authorError:\n                    type: \"string\"\n                    example: \"Fill in the input field\"\n                  messageError:\n                    type: \"string\"\n                    example: \"Fill in the input field\"\n\ncomponents:\n  securitySchemes:\n    token:\n      type: apiKey\n      name: Authorization\n      in: header\n\n  schemas:\n    FullPerfumeResponse:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 43\n        perfumeTitle:\n          type: \"string\"\n          example: \"Sauvage\"\n        perfumer:\n          type: \"string\"\n          example: \"Dior\"\n        perfumeRating:\n          type: \"integer\"\n          format: \"int32\"\n          example: 5\n        year:\n          type: \"integer\"\n          format: \"int32\"\n          example: 2015\n        country:\n          type: \"string\"\n          example: \"France\"\n        perfumeGender:\n          type: \"string\"\n          example: \"male\"\n        fragranceTopNotes:\n          type: \"string\"\n          example: \"Sichuan Pepper\"\n        fragranceMiddleNotes:\n          type: \"string\"\n          example: \"Bergamot\"\n        fragranceBaseNotes:\n          type: \"string\"\n          example: \"Ambroxan\"\n        description:\n          type: \"string\"\n          example: \"Perfume description\"\n        filename:\n          type: \"string\"\n          example: \"Dior_Sauvage.jpg\"\n        price:\n          type: \"integer\"\n          format: \"int32\"\n          example: 62\n        volume:\n          type: \"string\"\n          example: \"100\"\n        type:\n          type: \"string\"\n          example: \"Eau de parfum\"\n        file:\n          type: \"string\"\n          format: binary\n            \n    PerfumeResponse:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 43\n        perfumeTitle:\n          type: \"string\"\n          example: \"Sauvage\"\n        perfumer:\n          type: \"string\"\n          example: \"Dior\"\n        price:\n          type: \"integer\"\n          format: \"int32\"\n          example: 62\n        filename:\n          type: \"string\"\n          example: \"Dior_Sauvage.jpg\"\n        perfumeRating:\n          type: \"integer\"\n          format: \"int32\"\n          example: 5\n\n    ReviewResponse:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 1\n        author:\n          type: \"string\"\n          example: \"John Doe\"\n        message:\n          type: \"string\"\n          example: \"Message\"\n        perfumeRating:\n          type: \"integer\"\n          format: \"int32\"\n          example: 5\n        date:\n          type: \"string\"\n          example: \"2021-04-07\"\n\n    PerfumeError:\n      type: \"object\"\n      properties:\n        perfumeTitleError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        perfumerError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        yearError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        countryError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        typeError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        volumeError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        perfumeGenderError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        fragranceTopNotesError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        fragranceMiddleNotesError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        fragranceBaseNotesError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n        priceError:\n          type: \"string\"\n          example: \"Fill in the input field\"\n\n    OrderResponse:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 1\n        totalPrice:\n          type: \"number\"\n          format: \"double\"\n          example: 100\n        date:\n          type: \"string\"\n          example: \"2021-04-07\"\n        firstName:\n          type: \"string\"\n          example: \"John\"\n        lastName:\n          type: \"string\"\n          example: \"Doe\"\n        city:\n          type: \"string\"\n          example: \"New York\"\n        address:\n          type: \"string\"\n          example: \"Wall Street 1\"\n        email:\n          type: \"string\"\n          example: \"test123@test.com\"\n        phoneNumber:\n          type: \"string\"\n          example: \"123456\"\n        postIndex:\n          type: \"integer\"\n          format: \"int32\"\n          example: 123456\n\n    OrderItemResponse:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 1\n        amount:\n          type: \"integer\"\n          format: \"int64\"\n          example: 100\n        quantity:\n          type: \"integer\"\n          format: \"int64\"\n          example: 2\n        perfume:\n          $ref: \"#/components/schemas/PerfumeResponse\"\n\n    BaseUserResponse:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 2\n        email:\n          type: \"string\"\n          example: \"test123@test.com\"\n        firstName:\n          type: \"string\"\n          example: \"John\"\n        roles:\n          type: \"array\"\n          items:\n            type: \"string\"\n            example: \"USER\"\n        provider:\n          type: \"string\"\n          example: \"LOCAL\"\n\n    User:\n      type: \"object\"\n      properties:\n        id:\n          type: \"integer\"\n          format: \"int64\"\n          example: 2\n        email:\n          type: \"string\"\n          example: \"test123@test.com\"\n        firstName:\n          type: \"string\"\n          example: \"John\"\n        lastName:\n          type: \"string\"\n          example: \"Doe\"\n        city:\n          type: \"string\"\n          example: \"New York\"\n        address:\n          type: \"string\"\n          example: \"Wall Street 1\"\n        phoneNumber:\n          type: \"string\"\n          example: \"123456\"\n        postIndex:\n          type: \"string\"\n          example: \"123456\"\n        provider:\n          type: \"string\"\n          example: \"LOCAL\"\n        roles:\n          type: \"array\"\n          items:\n            type: \"string\"\n            example: \"USER\"\n\n    AuthenticationResponse:\n      type: \"object\"\n      properties:\n        user:\n            $ref: \"#/components/schemas/User\"\n        token:\n          type: \"string\"\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/v1/admin/add: post: operation \"addPerfume\": responses: 400: content: application/json: examples: \"PerfumeError\": resolve \"#/components/schemas/PerfumeError\": invalid example reference"
}