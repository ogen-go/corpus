{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/synesthesiam/opentts"
		},
		"file": {
			"name": "swagger.yaml",
			"size": 0,
			"path": "swagger.yaml",
			"byteSize": 3148,
			"content": "openapi: \"3.0.0\"\ninfo:\n  title: 'OpenTTS'\n  version: '2.1'\n  description: 'Open Text to Speech API'\nschemes:\n  - http\nservers:\n  - url: http://localhost:5500\n    description: Local server\npaths:\n  /api/tts:\n    get:\n      summary: 'Speak text to WAV'\n      parameters:\n        - in: query\n          name: voice\n          required: true\n          description: 'Voice in the form tts:voice or tts:voice#speaker_id'\n          schema:\n            type: string\n            example: 'espeak:en'\n        - in: query\n          name: text\n          required: true\n          description: 'Text to speak'\n          schema:\n            type: string\n            example: 'Welcome to the world of speech synthesis!'\n        - in: query\n          name: vocoder\n          description: 'Vocoder quality (Larynx/Glow-Speak only)'\n          schema:\n            type: string\n            enum: [high, medium, low]\n            example: 'high'\n        - in: query\n          name: denoiserStrength\n          description: 'Strength of vocoder denoiser (0-1, 0 is disabled, Larynx/Glow-Speak only)'\n          schema:\n            type: number\n            example: 0.03\n        - in: query\n          name: cache\n          description: 'Use WAV cache if enabled (--cache, default: true)'\n          schema:\n            type: boolean\n            example: false\n        - in: query\n          name: denoiserStrength\n          description: 'Strength of vocoder denoiser (0-1, 0 is disabled, Larynx/Glow-Speak only)'\n          schema:\n            type: number\n            example: 0.03\n      produces:\n        - audio/wav\n      responses:\n        '200':\n          description: audio\n          schema:\n            type: binary\n  /api/voices:\n    get:\n      summary: 'Get available voices'\n      produces:\n        - application/json\n      parameters:\n        - in: query\n          name: language\n          description: 'Filter based on language(s)'\n          schema:\n            type: string\n            example: 'en'\n        - in: query\n          name: locale\n          description: 'Filter based on locale(s)'\n          schema:\n            type: string\n            example: 'en-us'\n        - in: query\n          name: gender\n          description: 'Filter based on gender(s)'\n          schema:\n            type: string\n            enum: [M, F]\n            example: 'M'\n        - in: query\n          name: tts_name\n          description: 'Filter based on TTS system name(s)'\n          schema:\n            type: string\n            enum: [espeak, flite, festival, nanotts, marytts]\n            example: flite\n      responses:\n        '200':\n          description: voices\n          schema:\n            type: object\n  /api/languages:\n    get:\n      summary: 'Get available languages'\n      produces:\n        - application/json\n      parameters:\n        - in: query\n          name: tts_name\n          description: 'Filter based on TTS system name(s)'\n          schema:\n            type: string\n            enum: [espeak, flite, festival, nanotts, marytts]\n            example: flite\n      responses:\n        '200':\n          description: languages\n          schema:\n            type: list\n"
		}
	},
	"Error": "parse: parse spec: parse operations: paths: /api/tts: get: parameters: duplicate parameter: \"denoiserStrength\" in \"query\""
}