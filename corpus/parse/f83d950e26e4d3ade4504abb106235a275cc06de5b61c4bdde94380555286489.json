{
	"File": {
		"__typename": "FileMatch",
		"repository": {
			"name": "github.com/docker/docker.github.io"
		},
		"file": {
			"name": "dvp.yaml",
			"size": 0,
			"path": "docker-hub/api/dvp.yaml",
			"byteSize": 17200,
			"content": "openapi: 3.0.0\ninfo:\n  title: DVP Data API\n  version: 1.0.0\n  x-logo:\n    url: https://docs.docker.com/assets/images/logo-docker-main.png\n    href: /reference\n  description: |\n     The Docker DVP Data API allows [Docker Verified Publishers](https://docs.docker.com/docker-hub/publish/) to view image pull analytics data for their namespaces. Analytics data can be retrieved as raw data, or in a summary format.\n       \n     #### Summary data\n\n     In your summary data CSV, you will have access to the data points listed below. You can request summary data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). \n\n     - For every namespace, repository, and reference (tag or digest):\n       - Unique IP address count\n       - Pulls by tag count\n       - Pulls by digest count\n       - Version check count\n\n     #### Raw data\n\n     In your raw data CSV you will have access to the data points listed below. You can request raw data for a complete week (Monday through Sunday) or for a complete month (available on the first day of the following month). **Note:** each action is represented as a single row.\n\n     - Type (industry)\n     - Host (cloud provider)\n     - Country (geolocation)\n     - Timestamp\n     - Namespace\n     - Repository\n     - Reference (digest is always included, tag is provided when available)\n     - HTTP request method\n     - Action, one of the following:\n       - Pull by tag\n       - Pull by digest\n       - Version check\n     - User-Agent\n\nservers:\n  - url: https://hub.docker.com/api/publisher/analytics/v1\nsecurity:\n  - HubAuth: []\n\nfeatures.openapi:\n  schemaDefinitionsTagName: Schemas\n\ntags:\n  - name: authentication\n    x-displayName: Authentication Endpoints\n  - name: namespaces\n    x-displayName: Namespace data\n  - name: discovery\n    x-displayName: Discovery\n  - name: responseDataFile\n    x-displayName: ResponseDataFile\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/ResponseDataFile\" /\u003e\n  - name: yearModel\n    x-displayName: Year Data Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/YearModel\" /\u003e\n  - name: monthModel\n    x-displayName: Month Data Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/MonthModel\" /\u003e\n  - name: weekModel\n    x-displayName: Week Data Model\n    description: |\n      \u003cSchemaDefinition schemaRef=\"#/components/schemas/WeekModel\" /\u003e\n\nx-tagGroups:\n  - name: API\n    tags:\n      - authentication\n      - discovery\n      - namespaces\n  - name: Models\n    tags:\n      - responseDataFile\n      - yearModel\n      - monthModel\n      - weekModel\n\npaths:\n  /v2/users/login:\n    security: []\n    servers:\n      - url: https://hub.docker.com\n    post:\n      security: []\n      tags:\n        - authentication\n      summary: Create an authentication token\n      operationId: PostUsersLogin\n      description: |\n        Creates and returns a bearer token in JWT format that you can use to\n        authenticate with Docker Hub APIs.\n\n        The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.\n\n        Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/UsersLoginRequest\"\n        description: Login details.\n        required: true\n      responses:\n        200:\n          description: Authentication successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsersLoginSuccessResponse\"\n        401:\n          description: Authentication failed or second factor required\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsersLoginErrorResponse\"\n  /v2/users/2fa-login:\n    security: []\n    servers:\n      - url: https://hub.docker.com\n    post:\n      security: []\n      tags:\n        - authentication\n      summary: Second factor authentication.\n      operationId: PostUsers2FALogin\n      description: |\n        When a user has 2FA enabled, this is the second call to perform after\n        `/v2/users/login` call.\n\n        Creates and returns a bearer token in JWT format that you can use to authenticate with Docker Hub APIs.\n\n        The returned token is used in the HTTP Authorization header like `Authorization: Bearer {TOKEN}`.\n\n        Most Docker Hub APIs require this token either to consume or to get detailed information. For example, to list images in a private repository.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Users2FALoginRequest\"\n        description: Login details.\n        required: true\n      responses:\n        200:\n          description: Authentication successful\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsersLoginSuccessResponse\"\n        401:\n          description: Authentication failed or second factor required\n          content:\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/PostUsers2FALoginErrorResponse\"\n\n\n  /:\n    get:\n      tags: [discovery]\n      summary: Get namespaces and repos\n      description: Gets a list of your namespaces and repos which have data available\n      operationId: getNamespaces\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamespaceData'\n  /namespaces/{namespace}:\n    get:\n      tags: [discovery]\n      summary: Get namespace\n      description: Gets metadata associated with specified namespace, including extra repos associated with the namespace\n      operationId: getNamespace\n      parameters:\n        - in: path\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: Namespace to fetch data for\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/NamespaceMetadata'\n  /namespaces/{namespace}/pulls/exports/years:\n    get:\n      tags: [namespaces]\n      summary: Get years with data\n      description: Gets a list of years that have data for the given namespace\n      operationId: getNamespaceYears\n      parameters:\n        - in: path\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: Namespace to fetch data for\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/YearData'\n  /namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}:\n    get:\n      tags: [namespaces]\n      summary: Get timespans with data\n      description: Gets a list of timespans of the given type that have data for the given namespace and year\n      operationId: getNamespaceTimespans\n      parameters:\n        - in: path\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: Namespace to fetch data for\n        - in: path\n          name: year\n          schema:\n            type: integer\n          required: true\n          description: Year to fetch data for\n        - in: path\n          name: timespantype\n          schema:\n            $ref: '#/components/schemas/TimespanType'\n          required: true\n          description: Type of timespan to fetch data for\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimespanData'\n  /namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}:\n    get:\n      tags: [namespaces]\n      summary: Get namespace metadata for timespan\n      description: Gets info about data for the given namespace and timespan\n      operationId: getNamespaceTimespanMetadata\n      parameters:\n        - in: path\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: Namespace to fetch data for\n        - in: path\n          name: year\n          schema:\n            type: integer\n          required: true\n          description: Year to fetch data for\n        - in: path\n          name: timespantype\n          schema:\n            $ref: '#/components/schemas/TimespanType'\n          required: true\n          description: Type of timespan to fetch data for\n        - in: path\n          name: timespan\n          schema:\n            type: integer\n          required: true\n          description: Timespan to fetch data for\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TimespanModel'\n        '404':\n          description: Not Found\n  /namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/raw:\n    get:\n      tags: [namespaces]\n      summary: Get namespace data for timespan\n      description: Gets a list of URLs that can be used to download the raw pull data for the given namespace and timespan\n      operationId: getNamespaceDataByTimespan\n      parameters:\n        - in: path\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: Namespace to fetch data for\n        - in: path\n          name: year\n          schema:\n            type: integer\n          required: true\n          description: Year to fetch data for\n        - in: path\n          name: timespantype\n          schema:\n            $ref: '#/components/schemas/TimespanType'\n          required: true\n          description: Type of timespan to fetch data for\n        - in: path\n          name: timespan\n          schema:\n            type: integer\n          required: true\n          description: Timespan to fetch data for\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseData'\n  /namespaces/{namespace}/pulls/exports/years/{year}/{timespantype}/{timespan}/summary:\n    get:\n      tags: [namespaces]\n      summary: Get namespace summary data for timespan\n      description: Gets a list of URLs that can be used to download the summary pull data for the given namespace and timespan\n      operationId: getNamespaceSummaryByTimespan\n      parameters:\n        - in: path\n          name: namespace\n          schema:\n            type: string\n          required: true\n          description: Namespace to fetch data for\n        - in: path\n          name: year\n          schema:\n            type: integer\n          required: true\n          description: Year to fetch data for\n        - in: path\n          name: timespantype\n          schema:\n            $ref: '#/components/schemas/TimespanType'\n          required: true\n          description: Type of timespan to fetch data for\n        - in: path\n          name: timespan\n          schema:\n            type: integer\n          required: true\n          description: Timespan to fetch data for\n      responses:\n        '200':\n          description: Success\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ResponseData'\n\ncomponents:\n  schemas:\n    UsersLoginRequest:\n      description: User login details\n      type: object\n      required:\n        - username\n        - password\n      properties:\n        username:\n          description: The username of the Docker Hub account to authenticate with.\n          type: string\n          example: myusername\n        password:\n          description:\n            The password or personal access token (PAT) of the Docker Hub\n            account to authenticate with.\n          type: string\n          example: hunter2\n    PostUsersLoginSuccessResponse:\n      description: successful user login response\n      type: object\n      properties:\n        token:\n          description: |\n            Created authentication token.\n\n            This token can be used in the HTTP Authorization header as a JWT to authenticate with the Docker Hub APIs.\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n          nullable: false\n    PostUsersLoginErrorResponse:\n      description: failed user login response or second factor required\n      type: object\n      required:\n        - detail\n      properties:\n        detail:\n          description: Description of the error.\n          type: string\n          example: Incorrect authentication credentials\n          nullable: false\n        login_2fa_token:\n          description:\n            Short time lived token to be used on `/v2/users/2fa-login` to\n            complete the authentication. This field is present only if 2FA is\n            enabled.\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n          nullable: true\n    Users2FALoginRequest:\n      description: Second factor user login details\n      type: object\n      required:\n        - login_2fa_token\n        - code\n      properties:\n        login_2fa_token:\n          description: The intermediate 2FA token returned from `/v2/users/login` API.\n          type: string\n          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\n        code:\n          description:\n            The Time-based One-Time Password of the Docker Hub account to\n            authenticate with.\n          type: string\n          example: 123456\n    PostUsers2FALoginErrorResponse:\n      description: failed second factor login response.\n      type: object\n      properties:\n        detail:\n          description: Description of the error.\n          type: string\n          example: Incorrect authentication credentials\n          nullable: false\n\n    ResponseData:\n      properties:\n        data:\n          type: array\n          items: \n            $ref: '#/components/schemas/ResponseDataFile'\n    ResponseDataFile:\n      properties:\n        url:\n          type: string\n        size:\n          type: integer\n          format: int64\n    NamespaceData:\n      properties:\n        namespaces:\n          type: array\n          items:\n            type: string\n        repos:\n          type: array\n          items:\n            type: string\n    NamespaceMetadata:\n      properties:\n        namespace:\n          type: string\n        extraRepos:\n          type: array\n          items:\n            type: string\n        datasets:\n          type: array\n          items:\n            $ref: '#/components/schemas/DatasetModel'\n    DatasetModel:\n      properties:\n        name:\n          $ref: '#/components/schemas/DatasetType'\n        views:\n          type: array\n          items:\n            $ref: '#/components/schemas/DataviewType'\n        timespans:\n          type: array\n          items:\n            $ref: '#/components/schemas/TimespanType'\n    YearData:\n      properties:\n        years:\n          type: array\n          items:\n            $ref: '#/components/schemas/YearModel'\n    YearModel:\n      properties:\n        year:\n          type: integer\n    MonthData:\n      properties:\n        months:\n          type: array\n          items:\n            $ref: '#/components/schemas/MonthModel'\n    MonthModel:\n      properties:\n        month:\n          type: integer\n    WeekData:\n      properties:\n        weeks:\n          type: array\n          items:\n            $ref: '#/components/schemas/WeekModel'\n    WeekModel:\n      properties:\n        week:\n          type: integer\n    TimespanType:\n      type: string\n      enum: [months,weeks]\n    DataviewType:\n      type: string\n      enum: [raw,summary]\n    DatasetType:\n      type: string\n      enum: [pulls]\n    TimespanModel:\n      oneOf:\n        - $ref: '#/components/schemas/MonthModel'\n        - $ref: '#/components/schemas/WeekModel'\n    TimespanData:\n      oneOf:\n        - $ref: '#/components/schemas/MonthData'\n        - $ref: '#/components/schemas/WeekData'\n  securitySchemes:\n    HubAuth:\n      type: https\n      scheme: bearer\n      bearerFormat: JWT\n      description: |\n        JWT Bearer Authentication is required to access the Docker DVP Data API.  \n          \n        Note - PATs are not supported on this API  \n          \n        This authentication documentation is duplicated from the [Hub API Authentication docs](https://docs.docker.com/docker-hub/api/latest/#tag/authentication)\n      x-displayName: Docker Hub Authentication\n",
			"canonicalURL": "/github.com/docker/docker.github.io@e0bbe1a32f4c44991cccf5b262911196a6dba0c3/-/blob/docker-hub/api/dvp.yaml",
			"externalURLs": [
				{
					"url": "https://github.com/docker/docker.github.io/blob/e0bbe1a32f4c44991cccf5b262911196a6dba0c3/docker-hub/api/dvp.yaml",
					"serviceKind": "GITHUB"
				}
			]
		}
	},
	"Error": "parse: parse spec: parse path items: path \"/\": get: operation \"getNamespaces\": security: parse security scheme \"HubAuth\": https: at 1:4448: unknown security scheme type \"https\""
}